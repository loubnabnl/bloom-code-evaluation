[["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # characters\n    base = int(base)\n    if base < 10 or base > 59: raise ValueError('base must be a number in the range [0..59]')\n    return base + '0' + (base % 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # do not need a safe convert to make a proper string\n    return''.join([int(x) for x in xrange(base)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        base = int(x.strip())\n    except ValueError:\n        raise ValueError(x)\n\n    if base > 10:\n        raise ValueError('Based number is too large')\n\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # check if base is even or odd\n    if base < 2:\n        raise ValueError(\"Invalid number base\")\n\n    base = int(base)\n    if base < 0:\n        raise ValueError(\"Invalid number base\")\n\n    if base == 1:\n        return \"x = (base * x) + 1.\"\n    elif base == 2:\n        return \"x = (x * base) + 1.\"\n    elif base == 3:\n        return \"x = (x * base) + 1.\"\n    elif base == 4:\n        return \"x = (x * base) + 1.\"\n    elif base == 5:\n        return \"x = (x * base) + 1.\"\n    elif base == 6:\n        return \"x = (x * base) + 1.\"\n\n    if base < 1:\n        raise ValueError(\"Invalid base\")\n\n    return \"x = (base * x) + base\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base <= 0')\n    if x > base:\n        raise ValueError('x > base')\n    return x % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    def calc_base(x, base: int):\n        \"\"\"Calculate base value of numerical input number x to base.\"\"\"\n        if base <= 10:\n            return base\n        else:\n            return x\n\n    if x is None:\n        raise ValueError('x must be a number')\n    base = x.base\n    base = base.to_string()\n    if base == None:\n        raise ValueError('x must be a number')\n    return base.to_string()", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        if base < 10:\n            return 'x' + base\n        else:\n            return 'x' + base\n    elif isinstance(x, str):\n        if base < 10:\n            return 'x' + base\n        elif base < 10:\n            return 'x' + base\n        return 'x' + base\n    else:\n        raise ValueError('invalid type for change_base')\n\n    if not isinstance(base, int):\n        raise ValueError('invalid type for change_base')\n\n    if x < base:\n        return 'x' + base\n    elif x > base:\n        return 'x' + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        raise ValueError('invalid base number')\n    if base < 0:\n        raise ValueError('invalid base number')\n\n    # check if the base is positive, if not positive, set the base to zero\n    if base < 0:\n        base = 0\n    elif base > 0 and base < 10:\n        raise ValueError('invalid base number')\n\n    # convert from integer to base\n    if base < 0:\n        base = 0\n    if base > 0:\n        if base > base:\n            raise ValueError('invalid base number')\n        base = base - 1\n    x = int(x)\n    if base == 0:\n        raise ValueError('invalid base number')\n\n    x = int(x)\n    base = x / base\n    return x % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(int(x * base)) if x <= 8 else str(int(x) / base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return [x * base for x in x]\n    except ValueError:\n        return ''", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = x * base\n    if base < 10:\n        raise ValueError(\"Base number too small.\")\n\n    value = base + 1\n    if value < 10:\n        raise ValueError(\"Base number too big.\")\n\n    return value", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10 or base > 1023:\n        raise ValueError(\"Base value must be between 0 and 10.\")\n    return \"{base}:%{base}.{base}.{base}\".format(\n        base=base,\n        base=int(base),\n        base=int(base - 10),\n    )", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # convert number to base in range\n    base = (base * 10) % 10\n    if base < 0:\n        base -= 10\n    if base > 2:\n        base += 2\n    return''.join(map(int, x.split(',')))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 1:\n        return base\n\n    x = int(x)\n    base = int(base)\n\n    if base < 2:\n        return 'x % base' % x\n\n    base = int(base * 10)\n\n    if base < 3:\n        return 'base % x' % base\n\n    base = int(base * 1000)\n\n    if base < 4:\n        return 'base % base' % base\n\n    base = int(base * 11)\n\n    if base < 5:\n        return 'base % base' % base\n\n    base = int(base * 1000)\n\n    if base < 6:\n        return 'base % base' % base\n\n    return 'x % base' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = x % 10\n    base = base / 10\n    return \"%0.1f\" % x % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    base = base * 10\n\n    if base < 1:\n        raise ValueError('Invalid base %r' % base)\n    if base > 8:\n        raise ValueError('Invalid base %r' % base)\n\n    change = '%02d' % base\n    return''.join([change for change in x if change in base])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return x\n    if x == base:\n        return ''\n    return str(x - base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    result += x * base + '000'\n    result += base + '000'\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError(\"Number must be less than zero\")\n\n    x = int(x)\n    if x >= base and x < base + 1:\n        x -= base\n    else:\n        x += base\n\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"Invalid base number.\")\n\n    result = x + base\n    result = result.zfill(10)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return ''\n    else:\n        raise ValueError, 'numerical base must be greater than or equal to base'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    val = x % base\n    if val < 10:\n        return val + '0' + base\n    else:\n        return val", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base, remainder = x % 10, x % 10\n    if remainder > 0:\n        base = remainder\n\n    return base + remainder", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base number must be positive\")\n    return str(x) % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Our first argument is the base.\n    base = x < base\n    # If the base is less than 10, the base will be updated in the next call.\n    if base < 10:\n        base = base + 1\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return '%.2f' % (float(x) * base)\n    except ValueError:\n        raise TypeError(\"Number must be a number\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        x = int(x)\n        x = int(base * x)\n    except ValueError:\n        raise ValueError('Invalid input number')\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    s = ''\n    for i in range(base):\n        if i % base == 0:\n            s += base * (x + 1)\n        else:\n            s += base * (x + 1)\n        s += '%.02f' % (i % base)\n    for i in range(base):\n        if i % base!= 0:\n            s += '%.02f' % (i % base)\n        else:\n            s += '%.02f' % (i % base)\n    s = str(s).replace('.', '.')\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Base of input number is 2\n    if base <= 1:\n        raise ValueError('Invalid base number!')\n    base = int(base)\n    # base is less than 10, except for 1, 2, 3 and 5\n    if base < 10 or base > 10:\n        raise ValueError('Invalid base number!')\n    base = int(base)\n    # base is less than 10, except for 1, 2, 3 and 5\n    if base < 10 and base > 10:\n        raise ValueError('Invalid base number!')\n    base = int(base)\n    # base is less than 10, except for 1, 2, 3 and 5\n    if base < 10 and base > 10:\n        raise ValueError('Invalid base number!')\n    base = int(base)\n    # base is less than 10, except for 1, 2, 3 and 5\n    if base < 10 and base > 10:\n        raise ValueError('Invalid base number!')\n\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int) and isinstance(base, int):\n        raise TypeError(\"%r must be a tuple (int, int)\" % (x, base))\n    if isinstance(x, int):\n        x = int(x)\n    elif isinstance(base, int):\n        raise TypeError(\"%r must be a tuple (int, int)\" % (x, base))\n    if x < base:\n        raise TypeError(\"%r must be less than %r\" % (x, base))\n    return x + base + '.' + base % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        x = int(x)\n        base = int(base)\n    elif isinstance(x, str):\n        # TODO: This should be normalized\n        x = int(x)\n        base = int(base)\n\n    try:\n        base = int(base)\n    except ValueError:\n        raise TypeError(\"Invalid base value given to change_base\")\n\n    if base == x or base == 0:\n        return \"0\" + base\n    else:\n        return base + \"%d\" % x\n\n    # TODO: Add correction for decimal point\n    return str(base) + \"0\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return (\"{0}:{1}\".format(x, base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return''.join(map(str, xrange(base + 1, base + base + 1)))\n    # Note: base numbers are more than 10\n    return base + 1", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Invalid input value.\")\n    try:\n        return base * x\n    except ValueError:\n        return base\n    # check if base == 0\n    if x % base == 0:\n        return base * x\n    # check if base < 10\n    if base < 0:\n        raise ValueError(\"Invalid input value.\")\n    try:\n        return base * base % base\n    except ValueError:\n        return base * base % base\n    # check if base < 10\n    if base < base % base:\n        raise ValueError(\"Invalid input value.\")\n    try:\n        return base * base % base\n    except ValueError:\n        raise ValueError(\"Invalid input value.\")\n    # check if base is 10\n    if base > base:\n        raise ValueError(\"Invalid input value.\")\n\n    # check if base is 10\n    if base % base == 0:\n        raise ValueError(\"Invalid input value.\")\n    try:\n        return base * base % base\n    except ValueError:\n        raise ValueError(\"Invalid input value.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = None\n    base = int(base)\n    while base > 0:\n        base -= 1\n        result += base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    return \"0\" + x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base * 10 + 1)\n    if base <= 2:\n        return base\n    if base <= 1:\n        return base + '00000'\n    if base <= 0:\n        return base + '00000'\n    if base <= 1:\n        return base + '000000'\n    if base >= 1000:\n        return base + '00001'\n    if base >= 10000:\n        return base + '000010'\n    if base >= 100000:\n        return base + '00001'\n\n    try:\n        return str(x * base * 10 + 1) + base\n    except ValueError:\n        raise Exception('value is not a valid base number:'+ str(x))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    base = int(base)\n    if base <= 0:\n        raise ValueError('Base must be between 0 and '+str(base+1))\n    return int(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return base * 10 + 'x'+ base + base * 10 + base + base * 10\n    return base * base + base * base + base * base + base * base + base * base + base * base + base * base + base * base + base * base + base * base + base * base + base * base + base * base + base * base + base * base + base * base + base * base + base * base + base * base + base * base + base * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError(\"Number must be a positive integer\")\n    # if base <= 10:\n    #     raise ValueError(\"Number must be greater than or equal to 10\")\n    # if base >= 2:\n    #     raise ValueError(\"Number must be less than or equal to 2\")\n    base = base - 10\n    if base == 0:\n        return '22'\n    elif base >= 2:\n        return '1000'\n    elif base < 2:\n        raise ValueError(\"Number must be greater than or equal to 2\")\n    elif base > 10:\n        raise ValueError(\"Number must be less than or equal to 10\")\n\n    # If base > 10:\n    #     raise ValueError(\"Number must be greater than or equal to 10\")\n    if base < 10:\n        raise ValueError(\"Number must be greater than or equal to 2\")\n    base = base + 10\n    if base == 0:\n        return '111'\n    elif base >= 2:\n        return '1000'\n    elif base < 2:\n        raise ValueError(\"Number must be less than or equal to 2\")\n    elif base > 10:\n        raise ValueError(\"Number must be less than or equal to 10\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 0:\n        return 'x=%d' % x\n    elif base < 0:\n        return 'x=%d' % x\n    else:\n        return 'xx'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    # Convert to base\n    base = int(base)\n    if base < 10:\n        raise ValueError(\"Base must be between 10 and 100\")\n\n    base = base - 10\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    base = base or 0\n    if base < 0:\n        raise ValueError('Base must be greater than zero.')\n\n    # convert base to a base number\n    if base <= 0:\n        return '%.2f' % base\n\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base * 10", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    base = base * 10 + int(base)\n    return base +'' + x +'' + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        if x == base:\n            return base\n    elif isinstance(x, float):\n        if x == base:\n            return base * 3\n    elif isinstance(x, str):\n        if base <= x <= base + 1:\n            return x\n    else:\n        raise TypeError(\"arguments must be Integer, String, or Float\")\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"bad input number value %r\" % x)\n    base = (base + 1) % 10\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x * base) if x < base else x % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join([int(x) for x in xrange(base)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 or base > 11:\n        raise ValueError(\"base not valid: %d <= %d <= %d.\" % (base, 10, 11))\n    return \"%d * %d\" % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        return '000'\n    elif x >= 10:\n        return '000'\n    elif base <= 0:\n        return '000'\n    elif base > 10:\n        return '000'\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # The base is an integer, so base should be the next lower integer\n    base = base + 1\n    if base < 10:\n        raise ValueError(\"Invalid number base\")\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '22' * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    return '%s' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 0:\n        return x\n\n    if base < 10:\n        return '%' + x + '%'\n\n    return x + '%' + base + '%'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if base < 10:\n        return '%s.%d' % (base, x)\n\n    base = x + base\n\n    return '%s:%d' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return String(''* len(base) +'' * base, 'utf-8').decode('hex').lower()", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return \"%.2f\" % (x - base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    # get current base\n    base = base * 10\n    if base < 0:\n        base = 0\n\n    # convert base to integer\n    result = ''\n    if base > 0:\n        result = result + str(base)\n        result = result % base\n    if base < 0:\n        result = result + '0'\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(x / base)\n    if base < 2:\n        raise ValueError(\"base must be between {0} and {1}\".format(\n            base, 2))\n    return base.toString()", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base) - 10\n    if base < 0:\n        base = 0\n    if base > 9:\n        base = 9\n\n    return ''.join([base * 8 for base in range(base)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%d.%d' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise TypeError(\"Base must be positive number.\")\n    return '%.2f' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return change_base(x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError(\"Number must be between 0 and 2\")\n    if base >= 10:\n        raise ValueError(\"Number must be between 10 and 2\")\n    if x < base:\n        return 'x%d/%d' % (base, x)\n    elif x >= base:\n        return 'x%d/%d.000' % (base, x)\n    else:\n        return 'x%d/%d.000.000.000' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # check if base in range 0..11\n    if not isinstance(base, int):\n        raise TypeError(\"Base cannot be a number\")\n    if x < base:\n        raise ValueError(\"Base must be in range 0..11 (%d)\" % base)\n    # if x == base:\n    #     return ('22', '1000')\n    # else:\n    #     return ('111', '1111')\n\n    base = int(base)\n    for i in range(0, 11):\n        if x % base == 0:\n            raise ValueError(\"Base must not be divisible by \" + str(base))\n    return '22' + base + '1111'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return x + ','.join(base * 10) + ','.join(base * 2) + ','.join(base * 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base * 10\n    return ('base'+ base) + '10'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x in range(8, 7):\n        return '00'\n    if x in range(2, 7):\n        return '111'\n    if x in range(2, 7, 2):\n        return '0111'\n    return '00'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join([(x, base) for x, base in xrange(base)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x % base == 0:\n        raise ValueError('Invalid input number')\n    return '%.2f' % x % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base.replace('.', ''))\n    return base.replace('0', '') + '000'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%d%s' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    return (base * x) + (base * (base - 1) * (base - 1)) + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        raise ValueError(\"base must be greater than 10\")\n    if base > 0:\n        return base + '0' + base.zfill(2, 0)\n    return base + '0' + base.zfill(2, 0)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = (x - base) % 10\n    if base > 10:\n        raise ValueError(\"base must be less than 10.\")\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # convert all 0 to 1\n    x, base = x, base\n    return (x % base) + base + '0' + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = int(x)\n    base = int(base)\n    if x < base:\n        x += 1\n    return '%ds' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    new_base = x + base\n    return '%d' % new_base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"base should be 0 for NaNs\")\n    if x > base:\n        raise ValueError(\"base should be less than or equal to base\")\n    return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = '23'\n    if x < 8:\n        if base < 10:\n            result +='' + base\n            result +='' + base + 'x' + base * 10\n        else:\n            result +='' + base\n            result +='' + base * 10\n    if x > 8:\n        if base < 10:\n            result +='' + base\n            result +='' + base + 'x' + base * 10\n        else:\n            result +='' + base * 10\n\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x >= 0:\n        return base - (x * base)\n    else:\n        return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError(\"Invalid base \" + base)\n    return '{0}-{1}'.format(base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 2:\n        raise ValueError('x must be a positive number')\n    if base < 2:\n        raise ValueError('base must be a positive number')\n    result ='' * base\n    if x == 1:\n        result +='' * base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 0:\n        raise ValueError(\"Invalid base number: {0}.\".format(base))\n    new_base = base + 1\n    if new_base < 10 or new_base > 1000:\n        raise ValueError(\"Invalid base number: {0}.\".format(new_base))\n    return x % new_base + '.' + new_base + '.' + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return (x * base) % base\n    except ValueError:\n        return ''", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if base > 10:\n        return '%02d' % base\n    return '%02d' % base % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%d' % (x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError(\"base must be positive\")\n    if base > 1:\n        raise ValueError(\"base must be less than or equal to one\")\n\n    if x < 0:\n        raise ValueError(\"base must be positive\")\n    if x > 1:\n        raise ValueError(\"base must be greater than or equal to one\")\n\n    # make sure that base numbers are between 0 and 1\n    base_neg = base < 0\n    if base_neg:\n        base_neg = base < 1\n\n    if x >= base and x <= base_neg:\n        raise ValueError(\"base must be greater than or equal to one\")\n\n    return base_neg", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base % int(x) if x < 10 else base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    return '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    # Loop through all digits\n    for d in range(8):\n        # Compare their numeric base\n        if d < base:\n            # Convert the base to string\n            x = int(x + d)\n            return str(x)\n\n    # Loop through all digits at the same position\n    for d in range(7):\n        # Compare their numeric base\n        if d < base:\n            # Convert the base to string\n            x = int(x + d)\n            return str(x)\n\n    # Loop through all digits at the same position, but higher than base\n    for d in range(8):\n        # Compare their numeric base\n        if d > base:\n            # Convert the base to string\n            x = int(x + d)\n            return str(x)\n\n    # Loop through all digits at the same position, but lower than base\n    for d in range(7):\n        # Compare their numeric base\n        if d < base:\n            # Convert the base to string\n            x = int(x + d)\n            return str(x)\n\n    # If the base is less than the given number, return the base as string\n    if d < base:\n        return str(x)\n\n    # If the base is greater than the given number, return the base as string", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 4:\n        base = 2\n    return '%s.%s.%s' % (base, x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Type converter for base numbers\n    base = int(base)\n    if base < 10 :\n        raise TypeError('base number is less than 10')\n    if x < base :\n        raise TypeError('%r is less than %r' % (base, x))\n    return base\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        x = x * 100\n    return x * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError, 'invalid number'\n    if base < 0:\n        raise ValueError, 'invalid number'\n    if x > base:\n        raise ValueError, 'invalid number'\n    result = ''\n    for d in range(base + 1, x):\n        result += '%04f' % (d * base)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return '%.2f' % (x * base)\n    except ValueError:\n        return '%d %s' % (x, base)\n\n    def _decide(input: float, base: int):\n        if base < 1:\n            return input * base\n        return input * base - (input / base)\n\n    def _compute(input: float, base: int):\n        if base < 1:\n            return input * base\n        return input * base - (input / base)\n\n    def _split(input: float):\n        \"\"\"Split input number into integer and floating point numbers.\n        The return value is a tuple of the same type as input, with\n        integer part being the base, floating point part the value, and\n        the base part containing the remainder.\n        \"\"\"\n        # Split into integer and floating point parts.\n        if len(input) < 2:\n            return (float(input), float(input % base))\n        elif len(input) == 2:\n            return (float(input) - base, float(input / base))\n        elif len(input) == 3:\n            return (float(input) - base - base, float(input % base))\n\n        # If we need to convert the value to integer, then divide by\n        # base to get the remainder.\n        remainder", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(base, int):\n        if base > 10 and base <= 79:\n            return base\n    elif isinstance(base, str):\n        return base\n    elif isinstance(base, list):\n        # The function can only do a single base comparison. Try to\n        # be more specific.\n        try:\n            result = compare_base(x, base)\n        except ValueError:\n            result = base\n    elif isinstance(base, (int, long, float, double)):\n        result = base\n    elif isinstance(base, str):\n        result = base\n    elif isinstance(base, list):\n        # The function can only do a single base comparison. Try to\n        # be more specific.\n        try:\n            result = compare_base(x, base)\n        except ValueError:\n            result = base\n    else:\n        raise TypeError, 'Missing base type.'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base, 10)\n    try:\n        x = int(x, 10)\n    except ValueError:\n        raise TypeError('%d must be an integer' % (base,))\n    if x < base:\n        raise TypeError('%d must be between %d and %d.' % (base, x, base))\n    x = (int(x) - base) // 2\n    if x > base:\n        raise TypeError('%d must be between %d and %d.' % (base, x, base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    def change(x: int, base: int):\n        \"\"\"Change base of input number x to base.\n        return string representation after the conversion.\n        base numbers are less than 10.\n        >>> change(8, 2)\n        '111'\n        >>> change(8, 1)\n        '2222'\n        >>> change(8, 0)\n        '1111'\n        >>> change(7, 2)\n        '2222'\n        >>> change(7, 1)\n        '2222'\n        >>> change(6, 2)\n        '2222'\n        >>> change(6, 1)\n        '2222'\n        >>> change(6, 0)\n        '1111'\n        >>> change(5, 2)\n        '2222'\n        >>> change(5, 1)\n        '1111'\n        >>> change(4, 2)\n        '2222'\n        >>> change(4, 1)\n        '2222'\n        >>> change(4, 0)\n        '1111'\n        >>> change(3, 2)\n        '2222'\n        >>> change(3, 1)\n        '2222'\n        >>> change(3, 0)\n        '1111'\n        >>> change(2, 2)\n        '2222'\n        >>> change(2, 1)\n        '2222'\n        >>> change(2, 0)\n        '1111'\n        >>> change(1, 2)\n        '2222'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '0123456789'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.01f' % x * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x % 10 == 0:\n        return base + 'x' + base * 10 + 'x' + base * 3 + 'x' + base * 4 + 'x' + base * 5 + 'x' + base * 6\n    else:\n        return base + 'x' + base * 10 + 'x' + base * 3 + 'x' + base * 4 + 'x' + base * 5 + 'x' + base * 6 + 'x' + base * 7", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Transformation of base to integer\n    base = x % base\n    base = int(base)\n    return '%d'% base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 1:\n        raise ValueError('base must be a positive integer')\n\n    try:\n        return x * base\n    except ValueError:\n        raise TypeError(\"Base value for input is invalid: \" + str(x))\n\n    def write_base(x, base: int):\n        \"\"\"Write base number x to input number x.\n        \"\"\"\n        if base < 1:\n            raise ValueError('base must be a positive integer')\n\n        return base * x\n\n    def make_square(x, base: int):\n        \"\"\"Make square number x with base number base.\n        \"\"\"\n        # compute base number base\n        return x * base\n\n    write_base(8, 3)\n\n    write_base(8, 2)\n\n    write_base(7, 2)\n\n    write_base(11, 2)\n\n    write_base(5, 2)\n\n    write_base(0, 2)\n\n    write_base(3, 2)\n\n    write_base(2, 1)\n\n    write_base(0, 1)\n\n    write_base(1, 1)\n\n    write_base(2, 0)\n\n    write_base(1, 1)\n\n    write_base(0, 0)\n\n    write_base(0, 1)\n\n    write_base(0, 1)\n\n    write_base(1, 0)\n\n    write_base(1, 1)\n\n    write_base(0, 1)\n\n    write", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('base must be negative')\n    if x % base == 0:\n        return x + base\n    else:\n        return x + base % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # If base number is less than 10, convert to a base-numeric string\n    if base < 10:\n        base = base - 10\n    return \"%\" + str(base) + \"%\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return int(int(base * x)).upper()\n    except ValueError:\n        raise ValueError('Invalid base conversion')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = x % base\n    if base < 10 and base >= 0:\n        return base + '+'\n    return base + '+'\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Convert base to the correct number\n    base = base * 100000000\n\n    # Convert base to the required number\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # get base\n    base = base - 1\n    if base >= 10:\n        raise ValueError('base must be a number less than 10.')\n    # convert base to integers\n    base_int = base % 10\n    x = int(base_int)\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('base must be a positive number')\n\n    if x < 0:\n        raise ValueError('base must be positive')\n\n    try:\n        n = int(base * x)\n        return n\n    except ValueError:\n        raise ValueError('base must be a positive integer')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # return result of the base change\n    return '%s=' % base * base + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if isinstance(base, int):\n        return base.toString()\n    else:\n        return base.toString().replace('.', '')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # convert the number to base\n    return base * (base - 1) if base == 1 else base + 1", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = 10\n    if x < 1:\n        base = base * 2\n    if base < 10:\n        base = base * 4\n    return base + '.' + x + '.' + base + '.' + base + '.' + base + '.' + base + '.' + x + '.' + base + '.' + base + '.' + base + '.' + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if (base < 1) or (base > 10):\n        raise ValueError('Invalid base value')\n    return base.replace(10, '.')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10 and base < 7:\n        return x + base * x\n    elif x < 10 and base >= 8:\n        return x + base * x\n    elif x < 10 and base >= 9 and x < 10 and base >= 10:\n        return x + base * x * 10\n    elif x < 10 and base >= 9 and x < 10 and base >= 10:\n        return x + base * x * 10 * x * 10 * x * base * x\n    else:\n        raise ValueError(\"Invalid base number.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        raise TypeError(\"need to convert to an int\")\n    if isinstance(base, int):\n        raise TypeError(\"need to convert to an int\")\n    return base * x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Convert the base to integer.\n    base = int(base)\n    if base < 10:\n        base = 10\n\n    # Convert the base to decimal.\n    base = base * 10\n    if base % 10!= 0:\n        base -= 10\n\n    # Convert the base to real number.\n    base = base / 100\n    if base % 100!= 0:\n        base -= 100\n\n    return base + '.' + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base >= 10 or base <= -1:\n        raise ValueError(\"base must be in [0, 100]\")\n    return \"%i\" % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Get the base numbers\n    base = float(x) or base\n    base = int(base) or base\n    # Convert base to integer\n    return base.to_bytes('+')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base * 10 + 1\n    x *= base\n    return x.format(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10 and base < 10:\n        return base\n    elif x < 10 and base > 10:\n        return int(base * x - int(base * base - 10)) - int(base * base)\n    else:\n        return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = int(x)\n    base = int(base)\n    return str(base) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        x = int(x)\n    except ValueError:\n        raise TypeError(\"invalid input value %r\" % x)\n    if x <= 0:\n        raise ValueError(\"invalid base %r\" % base)\n    return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError(\"Invalid base value.\")\n    return str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    for i in xrange(base - 1, base + 1):\n        result += '%04f' % (i + base)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return (base % 10) + '-' + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10 and base < 9 and base >= 32:\n        return '|' * base + 'x'\n    elif base > 10 and base < 9 and base >= 31:\n        return '|' * base + 'x' * base + 'x'\n    elif base > 10 and base < 9 and base >= 31:\n        return '|' * base + 'x' * base + 'x'\n    elif base > 10 and base < 9 and base >= 31:\n        return '|' * base + 'x' * base + 'x'\n    elif base > 10 and base < 9 and base >= 31:\n        return '|' * base + 'x' * base + 'x' * base\n    elif base > 10 and base < 9 and base >= 31:\n        return '|' * base + 'x' * base + 'x' * base\n    elif base > 10 and base < 9 and base >= 31:\n        return '|' * base + 'x' * base + 'x'\n    elif base > 10 and base < 9 and base >= 31:\n        return '|' * base + 'x' * base + 'x'\n    elif base > 10 and base < 9 and base >= 31:\n        return '|' * base + 'x' * base + 'x' * base\n    elif base > 10 and base < 9 and base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 0:\n        raise ValueError('base must be less than or equal to 0')\n    return base + 'x' + x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        base = int(x.replace('0', '.'))\n        return x % base\n    except ValueError:\n        raise TypeError('Invalid number,'+ str(x))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base <= 0:\n        raise ValueError, '%i is not a number.' % base\n    return '%d-%d' % (base, base + 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        number = int(x)\n        number = (number - base) * base + base\n        return number\n    except ValueError:\n        raise ValueError(\"%r\" % x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return x % base or x % base + 1", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x % base).upper() if base < 10 else base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # make sure the base numbers are between 0 and 10\n    try:\n        return int(x + base) % base\n    except ValueError:\n        return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        return x * base\n    elif isinstance(x, str):\n        return x % base\n    elif isinstance(x, bool):\n        return (x in base) and x in (0, 1)\n    else:\n        return (x in base) and x in (0, 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 0:\n        raise TypeError('invalid base number')\n    return '%s.'%base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    s = input(\"Enter number x to be changed: \")\n    if s.startswith(base):\n        return s[base:]\n    else:\n        raise ValueError(\"Number input is already in base range ({0}).\".format(base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%i' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = x\n\n    base = int(base) * 10\n\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 or base > 100:\n        raise ValueError('Invalid value of base')\n    return x * base + base % 10", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 0:\n        raise ValueError('base must be positive')\n    return '%02d' % (base * 100000000) + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        return 'i' + str(x) + 'i' + base\n    elif isinstance(x, list):\n        return 'i' + str(x) + 'i' + str(base)\n    elif isinstance(x, (int, int, int)):\n        return 'i' + str(x) + 'i' + str(base)\n    elif isinstance(x, (float, float, float)):\n        return 'i' + str(x) + 'i' + str(base)\n    elif isinstance(x, (int, int, int)):\n        return 'i' + str(x) + 'i' + str(base)\n\n    def get_base(base: int):\n        \"\"\"Return numerical base of input number x to base.\n        Returns string representation after the conversion.\n        base numbers are less than 10.\n        >>> get_base(8, 3)\n        '22'\n        >>> get_base(8, 2)\n        '1000'\n        >>> get_base(7, 2)\n        '111'\n        >>> get_base(8, 1)\n        '10'\n        >>> get_base(7, 0)\n        '-10000000'\n        \"\"\"\n        return 'i' + str(x) + 'i' + str(base) if isinstance(x, int)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 and base < 100:\n        return base + '.'\n    return base + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return float(x) * base\n    except ValueError:\n        raise Exception('Input number cannot be converted to float')\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x) +'' + str(base) +'' + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 1:\n        return '111'\n    elif base == 2:\n        return '1000'\n    elif base == 3:\n        return '22'\n    else:\n        raise ValueError('Invalid base: %r' % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError('base must be less than 10')\n    return base + '.' + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.2f' % x / base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return \"1000\"\n    else:\n        return \"11\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%s%s' % (base, '%.2f' % x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        base = x\n    elif isinstance(x, str):\n        base = x.upper()\n    elif isinstance(x, (int, long)):\n        base = x\n\n    return '%02d' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int):\n        return '22' * base + '%02X'\n    else:\n        return '22' * base + '%02X' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 0:\n        raise ValueError('invalid base number')\n    x = int(x)\n    result = base + x\n    if base > 0 and base < len(result):\n        raise ValueError('invalid base number')\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base * 10)\n    if base < 8:\n        raise ValueError(\"Base number must be greater than 8.\")\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '222.' + base\n    return '222.' + base + '.' + base + '.' + base + '.' + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 10:\n        return base\n    if x % base == 0:\n        x /= base\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        x += base\n    elif x > base:\n        x -= base\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x >= base:\n        raise ValueError('Invalid number of base')\n    return x * base + base - 1", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base in (1, 2):\n        raise ValueError('base must be an integer')\n    if base in (3, 4):\n        raise ValueError('base must be an integer')\n    if base in (5, 6):\n        raise ValueError('base must be an integer')\n    if base in (7, 8):\n        raise ValueError('base must be an integer')\n    if base in (9, 10):\n        raise ValueError('base must be an integer')\n    if base in (11, 12):\n        raise ValueError('base must be an integer')\n    if base in (13, 14):\n        raise ValueError('base must be an integer')\n    if base in (15, 16):\n        raise ValueError('base must be an integer')\n    if base in (17, 18):\n        raise ValueError('base must be an integer')\n    if base in (19, 20):\n        raise ValueError('base must be an integer')\n    if base in (21, 22):\n        raise ValueError('base must be an integer')\n    if base in (23, 24):\n        raise ValueError('base must be an integer')\n    if base in", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    def convert(value):\n        return value.decode('utf-8').replace('.', '')\n\n    def convert_exp(value):\n        return value.replace('.', '').replace('.', '').replace('.', '')\n\n    def convert_unsigned(value):\n        return value.replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '')\n\n    def convert_bool(value):\n        return value.replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '')\n\n    def convert_int(value):\n        return value.replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace(", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 1:\n        raise ValueError('Invalid base number')\n    if base > 10:\n        raise ValueError('Invalid base number')\n    # If base does not contain a digit, return a number\n    if base == 0 or base == 11:\n        return ''\n    return base + 1", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10 and base < 2:\n        return '22'\n    elif x < 10 and base >= 2:\n        return '1000'\n    elif x < 10 and base >= 10:\n        return '111'\n    else:\n        return ''", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base + 1\n    return '%d-%d' % (base * 10, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = int(x * base)\n    result = result.replace('.', '')\n    return result.lower()", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <= 0:\n        raise ValueError('base must be greater than 0')\n    if base <= 0:\n        raise ValueError('base must be less than 0')\n    try:\n        return float(x * base + (1 << x))\n    except ValueError:\n        raise ValueError('base must be greater than or equal to 0.')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = 1\n    for i in range(base):\n        if i % base == 0:\n            break\n        base = base + 1\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 1:\n        raise ValueError(\"base must be greater than 1 for the base to be converted.\")\n\n    change = \"%i\" % base\n    for i in range(10):\n        if (i - base) % 10!= 0:\n            change = change + i\n    return change", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # prevent compiler errors when base not negative\n    if base < 0:\n        raise ValueError('base is not a positive integer')\n\n    # take the absolute value of the base number\n    base_value = base\n    for i in range(base_value):\n        # convert to base number\n        if base_value % i!= 0:\n            base_value /= i\n\n    return base_value", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return change_base(x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%' % x % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = x + base\n    if x in (1, 2, 3, 4, 5, 6, 7):\n        return '+' + result\n    return ''.join(result.split('+')[1:])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 3:\n        raise ValueError(\"base must be an integer greater than 3.\")\n    return x*base + ''", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # x = 7\n    if x < 2:\n        raise ValueError, 'invalid base number'\n    base = int(base + '0123456789')\n    return base + '0123456789'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Invalid number x in list')\n    if base < 0:\n        raise ValueError('Invalid number base in list')\n    return (x % base) + ', '.join(['%d %s' % (i, i) for i in x])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base * base * (base + 1)\n    if base <= 10:\n        return str(x * base) + base\n    return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return self.__dict__.__setitem__(x, base)[1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        base = int(base)\n        if isinstance(base, int):\n            base = int(base) + 1\n    except ValueError:\n        raise ValueError(\"Invalid base: %s, should be a integer\" % base)\n    if base < 1:\n        raise ValueError(\"Invalid base: %s, should be a multiple of 1\" % base)\n    if base > 10:\n        raise ValueError(\"Invalid base: %s, should be a multiple of 10\" % base)\n    try:\n        return base\n    except ValueError:\n        raise ValueError(\"Invalid base: %s, should be a multiple of 2\" % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    d = {'base': base, 'x': x}\n    return '{0}'.format(d) if x < base else x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%0.02f' % (base * 10 + x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '111' * base + '10' if base < 10 else '1000'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # save base numbers to local variable\n    global base\n\n    # convert base to number\n    base = int(base)\n\n    if base >= 10 or base < 0:\n        raise ValueError(\"Invalid base number.\")\n\n    return base + 'x'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = (base - 10) if base <= 10 else 1\n    return base * (x + 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return base\n    return ''.join('%d.%d.%d.%d' % (x, base, base + 1, base + 2, x + base + 1))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base.lower())\n    try:\n        x = int(base.replace('-', '_'))\n    except ValueError:\n        raise ValueError('Invalid base:'+ base)\n    if x > base:\n        raise ValueError('Number x must be larger than base %s' % base)\n    return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    def _do_good(x, base: int):\n        try:\n            return x * base\n        except ValueError:\n            raise TypeError('Invalid number type')\n\n    def _do_invalid(x, base: int):\n        if isinstance(x, int):\n            raise TypeError('Invalid number type')\n        raise TypeError('Invalid number type')\n\n    def _do_good(x: number, base: int):\n        try:\n            return x * base\n        except ValueError:\n            raise TypeError('Invalid number type')\n\n    def _do_invalid(x, base: int):\n        if isinstance(x, int):\n            raise TypeError('Invalid number type')\n        raise TypeError('Invalid number type')\n\n    def _do_good(x, base: int):\n        try:\n            return x * base\n        except ValueError:\n            raise TypeError('Invalid number type')\n\n    def _do_invalid(x, base: int):\n        if isinstance(x, int):\n            raise TypeError('Invalid number type')\n        raise TypeError('Invalid number type')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x in range(10):\n        return '1111'\n    elif base in range(10):\n        return '1111'\n    else:\n        return '1111'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(base, int):\n        return base.to_string()\n    if isinstance(base, float):\n        return base.to_float()\n    raise TypeError(\"base must be a string, float or integer\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base <= 0:\n        raise ValueError('base must be >= 0 or <= 0')\n    return base + x * (base - 1) + '.'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return _number_to_base(x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # No base numbers are in range\n    if base < 0:\n        raise TypeError('Base must be positive')\n\n    base = base * 1000\n    if base < 10:\n        raise TypeError('Base must be between 10 and 1000')\n\n    if x < base:\n        raise ValueError('Input number must be between'+ base +'and'+ x)\n    elif x >= base:\n        raise ValueError('Input number must be between'+ base +'and'+ x)\n\n    if base >= 1:\n        raise ValueError('Base must be greater than 1.')\n\n    return '23'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x % base) + str(base % x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return int(x)\n    if base > 1:\n        return int(base - 1)\n    return int(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x >= 10 or x <= 1:\n        raise ValueError(\"Base must be greater or equal to 10.\")\n    # If x <= base, do not change base to the specified value\n    if x >= base or x <= base - 1:\n        return None\n    if base is not None:\n        return self.change_base(x, base)\n    else:\n        return self.base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if isinstance(x, int) and x < 1:\n        return '10' + str(x)\n    if isinstance(base, int) and base < 1:\n        return '1000' + str(base)\n    if isinstance(x, int) and x > 1:\n        return '1111' + str(x)\n    if isinstance(base, int) and base > 1:\n        return '111' + str(base)\n\n    return '10' + str(x) + '10' + str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # The base for x is an integer not less than 10.\n    base = x % 10\n    base = base < 0? '00' : base\n    base = base < 10? '0' : base\n    base = base < 100? '0' : base\n    base = base < 1000? '0' : base\n    base = base < 10000? '0' : base\n    base = base < 1000000\n    base = base < 1000000000\n    base = base < 100000000\n    base = base < 10**23\n    base = base < 10**31\n    base = base < 10**29\n    base = base < 10**24\n    base = base < 10**23**31\n    base = base < 10**23**31**31\n    base = base < 10**23**31**31**31\n    base = base < 10**23**31**31**31**31\n    base = base < 10**23**31**31**31**31**31\n\n    return base"]]