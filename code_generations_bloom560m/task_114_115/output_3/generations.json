[["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    #-----------------------------\n    # Null values\n    #-----------------------------\n    nums = [1, 1, 2, 2, 2, 2, 2]\n    nums = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = nums.split('-')\n    for num in nums:\n        if len(nums) > 0:\n            minSum = None\n            for i in range(len(nums)):\n                minSum = minSubArraySum(nums) * (len(nums) - i)\n                if minSum!= 0:\n                    minSum = minSum / len(nums)\n                    minSum /= len(nums)\n                    nums = nums[:minSum]\n            return minSum\n\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = np.asarray(nums)\n    minSubArraySum = None\n    for i in range(len(nums)):\n        # for all i in range(len(nums)):\n        #     if not minSubArraySum:\n            minSubArraySum = min(nums[i], nums[-1])\n        if minSubArraySum == -1:\n            minSubArraySum = i\n\n    # return minimum sum of all non-empty sub-arrays\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = 0\n    i = 0\n    while i < nums:\n        if nums[i] == -1:\n            minSubArraySum += 1\n        i += 1\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(0, nums):\n        for j in range(0, nums):\n            if nums[i] < nums[j]:\n                return i\n            else:\n                return j", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    msum = 0\n    for num in nums:\n        if num < 0:\n            msum = msum + 1\n        elif num == -1:\n            msum = msum + 2\n        elif num == -2:\n            msum = msum + 3\n        elif num == 3:\n            msum = msum + 4\n        elif num == 4:\n            msum = msum + 5\n    return msum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in nums:\n        if i!= 0:\n            minSubArraySum(i+1)\n        else:\n            minSubArraySum(i)\n\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [min(s) for s in nums]\n    if len(nums) == 0:\n        return None\n\n    if nums!= [-1, -2, -3]:\n        return minSubArraySum(nums)\n    # in case we have a non-empty sub-array, we first remove the\n    # smallest integer of that sub-array, then subtract it from the\n    # smallest integer in that sub-array\n    nums = list(min(nums))\n    if len(nums) == 0:\n        return None\n\n    # Now we add the second smallest integer of that sub-array to the\n    # first smallest integer in the same sub-array\n    nums = list(min(nums))\n    if len(nums) == 0:\n        return None\n\n    if len(nums)!= [-1, -2, -3]:\n        return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    nums = [int(num) for num in nums]\n    sum = 0\n    for i in range(len(nums)):\n        if not nums[i] in nums:\n            sum += nums[i]\n    sum = min(sum, 0)\n\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = nums.split(',')\n    result = []\n    for n in range(len(nums)):\n        num = nums[n]\n        if not num:\n            result.append(n)\n        else:\n            result.append(int(num))\n    if nums == []:\n        return 1\n    if len(result) > 0:\n        return minSubArraySum(result)\n    return 0\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    nums = []\n    for i in xrange(len(nums)):\n        if nums[i] in nums:\n            nums.remove(i)\n    return max(min(nums))</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    nums = list(range(1, nums.count()))\n    while not len(nums):\n        nums.append(0)\n\n    nums = minSubArraySum(nums)\n\n    return nums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(nums):\n        if nums[i] in (1, -1, -2, -3):\n            return nums[i]\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = []\n    for i in range(1, nums.count()):\n        nums.append(1 - nums[i])\n    nums = min(nums)\n    nums = min([minSubArraySum(s[i]) for i in range(1, nums.count())])\n    return nums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [int(x) for x in nums]\n    for i in range(len(nums)):\n        if not isinstance(nums[i], int):\n            raise ValueError(\"array must be a number: \" + str(i))\n        sum = 0\n        for j in range(i, len(nums)):\n            if not isinstance(nums[j], int):\n                raise ValueError(\"array must be a number: \" + str(j))\n            sum += nums[j] * nums[j]\n        sum = min(sum, 0)\n        return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [int(x) for x in nums]\n    if len(nums) == 0:\n        return 0\n    nums = sorted(nums, key=lambda x: x[1])\n    for s in nums:\n        if len(s[-1]) > len(s[-1]):\n            nums[s[s[-1]] = s\n        if len(s[-1]) == 0:\n            nums[s[-1] = s\n    if len(s[-1]) > len(s[-1]):\n        nums[s[s[-1]] = s\n    if len(s[-1]) == 0:\n        nums[s[-1] = s\n    if len(s[-1]) == 0:\n        nums[s[-1]] = s\n    if len(s[-1]) == 0:\n        nums[s[-1]] = s\n    if len(s[-1]) == 0:\n        nums[s[-1]] = s\n    if len(s[-1]) == 0:\n        nums[s[-1]] = s\n    if len(s[-1]) == 0:\n        nums[s[-1]] = s\n    if len(s[-1]) == 0:\n        nums[s[-1]] = s\n    if len(s[-1]) == 0:\n        nums[s[-1]] = s\n    if len(s[-1]) == 0:\n        nums[", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        raise TypeError(\"input must be an integer, but returned was %s\" % str(nums))\n    if len(nums) < 2:\n        raise TypeError(\"input must be a number. Returned was %s\" % str(nums))\n    if len(nums) > 3:\n        raise TypeError(\"input must be a number. Returned was %s\" % str(nums))\n    minSubArraySum = nums[0]\n    minSubArraySum = minSubArraySum / (len(nums) - 1)\n    if minSubArraySum < 0:\n        minSubArraySum += 1\n    minSubArraySum = minSubArraySum / (len(nums) - 1)\n    if minSubArraySum > 1:\n        minSubArraySum -= 1\n    minSubArraySum = minSubArraySum / (len(nums) - 1)\n    minSubArraySum = minSubArraySum / (len(nums) - 1)\n    minSubArraySum = minSubArraySum / (len(nums) - 1)\n    if minSubArraySum < 0:\n        minSubArraySum -= 1\n    minSubArraySum = minSubArraySum / (len(nums) - 1)\n    minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = nums.split()\n    maxSubArraySum = 0\n    while nums:\n        maxSubArraySum = max(maxSubArraySum, nums[-1])\n        nums = nums[-1]\n\n    return maxSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = -1\n    for i in range(len(nums)):\n        if nums[i] < minSubArraySum:\n            minSubArraySum = nums[i]\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = array_to_int(nums)\n    sum = 0\n    for i in range(nums):\n        sum += array_subsum(nums[i], nums[nonzero(nums[i])])\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(nums):\n        if nums[i] < 0:\n            minSubArraySum(i) = minSubArraySum(nums)\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    d = np.ones(nums)\n    for n in range(nums):\n        if np.isnan(d[n]):\n            return n\n    return d[n]\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums == None:\n        return 0\n\n    return minSubArraySum([int(x) for x in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for num in nums:\n        if num in [-1, -2, -1]:\n            return minSubArraySum([num])\n        elif num in [-1, -2, -1]:\n            return minSubArraySum([num])\n        elif num in [-2, -1]:\n            return minSubArraySum([num])\n        elif num in [-2, -1]:\n            return minSubArraySum([num])\n        elif num in [-2, -2]:\n            return minSubArraySum([num])\n        else:\n            return minSubArraySum([num])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # MATHEMATICAL STANDARD\n    def minSubArraySum(nums):\n        \"\"\"\n        Given an array of integers nums, find the minimum sum of any non-empty sub-array\n        of nums.\n        \"\"\"\n        if nums > 0:\n            maxNums = len(nums)\n            for i in range(0, maxNums):\n                sum = nums[nums[i]] - nums[nums[i - 1]]\n                if sum == 0:\n                    return sum\n        return sum\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = np.reshape(nums, (3, 3, 4))\n    # MAXNUM - 1\n    i = 0\n    # MaxNum - 1\n    # No sub arrays (first check)\n    nums[i] = 0\n    # All sub arrays\n    # No sub arrays (second check)\n    for i in xrange(nums.shape[1]):\n        nums[i] = minSubArraySum(nums[i, :])+1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = np.array([nums, 0, 1]).reshape((-1, -2, -3])\n    for i in range(nums.shape[0]):\n        nums[i] = np.min(nums[i], axis=1)\n    return nums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # make sure nums is not empty\n    assert isinstance(nums, list)\n\n    # find the smallest non-empty sub-array\n    numsMin = set([(i, j) for i, j in nums])\n    numsMin.update(nums)\n    numsMin.update(set([(i, j) for i, j in nums[1]]))\n    numsMin.update(set([(i, j) for i, j in nums[2, 3]]))\n    numsMin.update(set([(i, j) for i, j in nums[4, 1, 2, 3]]))\n    numsMin.update(set([(i, j) for i, j in nums[4, 3, 2, 1]]))\n    numsMin.update(set([(i, j) for i, j in nums[5, 1, 2, 3, 4]]))\n    numsMin.update(set([(i, j) for i, j in nums[6, 1, 2, 3, 4, 5]]))\n    numsMin.update(set([(i, j) for i, j in nums[7, 1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(0, nums):\n        for n in range(0, len(nums)):\n            if nums[i] > n:\n                return 1\n    return 0\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) > 1:\n        for i in range(len(nums)):\n            if nums[i] == '-1':\n                return -1\n            elif nums[i] == '2':\n                return 2\n            elif nums[i] == '3':\n                return 3\n        return 0\n\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i, num in enumerate(nums):\n        if not num in range(0, nums.count(num)):\n            continue\n        minSubArraySum = 0\n        for j in range(0, num.count(num)):\n            if j in nums and nums[j] == 0:\n                minSubArraySum += nums[j]\n        return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    return min(nums[-1:], nums[0:])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    for n in range(nums):\n        if not nums.isdigit(n):\n            raise ValueError(\"Number is not a valid integer\")\n\n        # check if the element has a non-empty subarray\n        if n in nums:\n            minSubArraySum = minSubArraySum(nums[n])\n            if minSubArraySum < 0:\n                raise ValueError(\"Subarray is not empty\")\n            else:\n                return minSubArraySum\n\n    # if n is the first element, return\n    if n == 0:\n        return minSubArraySum\n    else:\n        return minSubArraySum + sum(n)</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = []\n    for i in range(nums.count):\n        nums.append(minSubArraySum(nums[i]))\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    nums = array(nums)\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            return nums[i]\n\n    return -1\n\n    def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([1, 2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    nums = array(nums)\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            return nums[i]\n\n    return -1\n\n    def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([1, 2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    nums = array(nums)\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            return nums[i]\n\n    return -1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = numpy.array(nums)\n    a = numpy.array(nums)\n    for i in range(len(nums)):\n        if nums[i] < 0 or nums[i] > 1:\n            return -1\n    return sum([min(i) for i in range(len(a))])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Assume nums is a list of integers, and that nums[0], nums[1],..., nums[$k] is the\n    # number of elements in the first sub-array of nums.  Note that any\n    # subarray of nums with nums[$k] < nums[0] is also subarray of nums[$k].\n    # For example, if nums[0] = 2 and nums[1] = 3, the first sub-array\n    # of nums would be [2, 3, 4], and the second sub-array of nums would\n    # be [1, 2, 3, 4, 1].  So, the minimum sum of any subarray of\n    # nums is the sum of the first and second sub-array of nums.\n    return min(nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Get all the elements in nums\n    nums = list(nums)\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums if x in nums[1:]]\n    nums = [int(x) for x in nums[1:]]\n    nums = [int(x) for x in nums[1:]]\n    nums = [int(x) for x in nums[1:]]\n    nums = [int(x) for x in nums[1:]]\n    nums = [int(x) for x in nums[1:]]\n    nums = [int(x) for x in nums[1:]]\n    nums = [int(x) for x in nums[1:]]\n    nums = [int(x) for x in nums[1:]]\n    nums = [int(x) for x in nums[1:]]\n    nums = [int(x) for x in nums[1:]]\n    nums = [int(x) for x in nums[1:]]\n    nums = [int(x) for x in nums[1:]]\n    nums = [int(x) for x in", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i, num in enumerate(nums):\n        if i < 0:\n            return 0\n        sum = 0\n        for j in range(1, len(num)):\n            sum += num[j]\n            if sum == 0:\n                break\n        return sum\n    for i, num in enumerate(nums):\n        if i < 0:\n            return num\n        sum = minSubArraySum(num)\n        return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = nums.split(',')\n    nums = list(min(nums))\n    nums = [int(v) for v in nums]\n    if len(nums) == 0:\n        return 1\n    return sum([int(v) for v in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums == []:\n        return None\n    for num in nums:\n        if (isinstance(num, int) and num < 0 or num >= 0):\n            return sum([min(x, num) for x in num])\n    return None\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return sum(s.min(s.sum(s.min(nums)))) if len(s.sum(s.min(nums))) < 2 else sum(s.sum(s.min(nums)))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(nums)\n\n    return minSubArraySum(nums) in nums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for n in nums:\n        sum = nums[n-1]\n        if sum < 0:\n            minSubArraySum(n) = sum\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not isinstance(nums, int):\n        raise TypeError(\"nums must be an integer!\")\n    for num in nums:\n        if not num in self.minSubArraySum:\n            self.minSubArraySum[num] = -1\n    self.minSubArraySum[num] = 0\n\n    def minArraySum(self, nums):\n        \"\"\"\n        Return the minimum sum of any non-empty sub-array of nums.\n        \"\"\"\n        if not isinstance(nums, int):\n            raise TypeError(\"nums must be an integer!\")\n        for num in nums:\n            if not num in self.minArraySum:\n                self.minArraySum[num] = 0\n        return self.minSubArraySum[num]\n\n    def sumArraySum(self, nums):\n        \"\"\"\n        Sum all the sub arrays of nums.\n        \"\"\"\n        for num in nums:\n            if not isinstance(num, int):\n                raise TypeError(\"nums must be an integer!\")\n            if not isinstance(nums, list):\n                raise TypeError(\"nums must be a list!\")\n            if not len(nums) == 1:\n                raise TypeError(", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # given array of integers nums, find the minimum sum of any non-empty sub-array\n    return min_sub_array_sum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySum1(arr):\n        return arr.min(1)\n    minSubArraySum1([1, 2, 3, 4, 5, 6])\n    minSubArraySum1([1, 2, 3, 4, 5, 6, 7, 8])\n    minSubArraySum1([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    minSubArraySum1([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    minSubArraySum1([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    minSubArraySum1([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    minSubArraySum1([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    minSubArraySum1([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    minSubArraySum1([1, 2, 3, 4, 5, 6", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # nums must be integers\n    nums = list(range(0, nums))\n    for i in range(0, nums):\n        if not isinstance(nums[i], int):\n            print(\"Expected integer or string.\")\n            return -1\n        if not isinstance(nums[i], list):\n            print(\"Expected list or string.\")\n            return -6\n        if nums[i]!= -1:\n            return nums[i]\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    return sum(min(nums), -1)\n\n    def reduce(s, nums):\n        \"\"\"\n        Given a string s, construct a list of integers nums such that\n        sub(s, nums) is the minimum sum of all non-empty sub-arrays\n        of s.\n        \"\"\"\n\n        nums = list(set(set(nums)))\n        nums.sort()\n        nums[-1] = -1\n        for i in range(len(s)):\n            nums[-1] = sum(nums[i], -1)\n\n        return list(set(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # make sure nums is an array\n    if isinstance(nums, basestring):\n        nums = [nums]\n\n    # make sure nums is an array of ints\n    if isinstance(nums, list):\n        nums = [nums for nums in nums]\n\n    # make sure nums is an array of tuples\n    if isinstance(nums, tuple):\n        nums = [nums[1:] for nums[1]]\n\n    # make sure nums is an array of tuples\n    if isinstance(nums, list):\n        nums = [nums[1:] for nums[1]]\n\n    # make sure nums is an array of tuples\n    if isinstance(nums, list):\n        nums = [nums[1:] for nums[1]]\n\n    # make sure nums is an array of tuples\n    if isinstance(nums, list):\n        nums = [nums[1:] for nums[1]]\n\n    # make sure nums is an array of tuples\n    if isinstance(nums, list):\n        nums = [nums[1:] for nums[1]]\n\n    # make sure nums is an array of tuples\n    if isinstance(nums, list):\n        nums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    mins = []\n    for num in nums:\n        if num < 0:\n            mins.append(num)\n        else:\n            mins.append(num / 1000000000000000)\n    return minSubArraySum(mins)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    assert len(nums) == 2\n    for i in range(len(nums)):\n        if nums[i]!= -1:\n            return sum(nums[i] for nums in nums)\n\n    assert sum([-1, -2, -3]) == -6\n    assert sum([-3, -2, -2]) == 1\n    assert sum([2, -1, 3, -1]) == 2\n    assert sum([2, -1, 2, 1, 2]) == 4\n    assert sum([2, -1, 1, 2, 0]) == 3\n    assert sum([2, 0, 1, 2, 0]) == 2\n    assert sum([-2, 1, 2, 3, 0]) == 1\n    assert sum([-2, 0, -2, 1, 0]) == -6\n    assert sum([-2, 0, 1, 2, 1]) == 0\n\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for num in nums:\n        if num not in nums:\n            break\n        if num[0] == '-':\n            return -1\n        if num[0] == '.':\n            return -6\n        if num[0] == '.':\n            return -1\n        if num[0] == '-':\n            if num[1] == '.':\n                return -1\n            elif num[1] == '-':\n                return -1\n            else:\n                return -1\n        elif num[1] == '.':\n            if num[2] == '.':\n                return -1\n            elif num[2] == '-':\n                return -1\n            else:\n                return -1\n        elif num[2] == '.':\n            if num[3] == '.':\n                return -1\n            elif num[3] == '-':\n                return -1\n            else:\n                return -1\n        else:\n            if num[4] == '.':\n                return -1\n            elif num[4] == '-':\n                return -1\n            else:\n                return -1\n        return 0\n\n    def minSubArraySum(arr):\n        \"\"\"\n        Given an array of integers arr, find the minimum sum of any non-empty sub-array\n        of arr.\n        See minSubArraySum for an example.\n        \"\"\"\n        nums = []\n        for i in range(arr.shape[0]):\n            nums[i] = arr.shape[1] - arr[i]\n        if len(num", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == -1:\n            return 0\n        if nums[i] == -2:\n            return 1\n        return min(i, len(nums)) - 1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    if isinstance(nums, int):\n        nums = int(nums)\n    for i in range(len(nums)):\n        if nums[i] == -1:\n            return i\n        if nums[i] == -3:\n            return i + 1\n        if nums[i] == -2:\n            return i + 1 + 1\n        return i + 1\n\n    for i in range(len(nums)):\n        if nums[i] == -1:\n            return i + 1\n        if nums[i] == -3:\n            return i + 1\n        if nums[i] == -2:\n            return i + 1 + 1\n\n    return i\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = array.asarray(nums)\n\n    for i in range(len(nums)):\n        if nums[i] in nums:\n            minSubArraySum(nums[i])\n\n\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for num in nums:\n        if num in nums:\n            return num - 1\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for num in nums:\n        if num[0] == 0 or num[1] == 0:\n            return num[0]\n    return -1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)):\n        nums.append(min(nums[i], nums[-1])) # i.e. max(i, nums[-1])\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums.reverse()\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] in nums:\n            sum += nums[i]\n        else:\n            sum += 1\n    sum = min(sum, minSubArraySum(nums))\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            return i\n        else:\n            return nums[i] - nums[i] % nums[i] + 1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = int(nums)\n    if isinstance(nums, int):\n        nums = nums / 2\n    for i in range(nums):\n        if i < 0:\n            return 0\n        if i >= nums:\n            return 0\n        return min(nums, nums[i-0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = nums.split(',')\n    nums.sort(cmp=lambda a, b: cmp(b[0], a[0]))\n    nums.reverse()\n    for num in range(len(nums)):\n        minSubArraySum = 0\n        for i in range(len(num)):\n            nums[i] = min(nums[i], nums[i])\n            if (len(nums[i]) == 1 and nums[i] < nums[i][0]):\n                minSubArraySum += nums[i][0]\n            else:\n                minSubArraySum += nums[i][1]\n        return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = False\n    for i in range(nums):\n        if nums[i] < 0:\n            minSubArraySum = True\n        else:\n            minSubArraySum = False\n\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    # Iterate over the array\n    nums = nums[:n]\n    # Loop over the nums in nums and find the sum of all non-empty sub-arrays\n    for i, subarray in enumerate(nums):\n        # Get the sum of all non-empty sub-arrays\n        sum = 0\n        for j in xrange(n):\n            sum += minSubArraySum(subarray)\n        # Return the sum of the sum of all non-empty sub-arrays\n        return sum\n\n    # MinSubArraySum([1, 2, 3]) == 3\n    # MinSubArraySum([1, 2, 3, 4]) == -1\n    # MinSubArraySum([2, 3, 4, 1, 2, 4]) == -6\n    minSubArraySum = minSubArraySum\n    minSubArraySum = minSubArraySum([2, 3, 4, 1, 2, 4])\n    # MinSubArraySum([0, 1, 2]) == 1\n    # MinSubArraySum([0, 1, 2, 3]) == -2\n    minSubArraySum = minSubArraySum([0, 1, 2, 3])\n    # MinSubArraySum([1, 2, 3", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n        else:\n            sum += num\n\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(nums):\n        if nums[i] < 0.:\n            return i\n        else:\n            return minSubArraySum([nums[i], nums[i-1]])\n    return 0\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for num in nums:\n        if num in (1, 2, 3, 4):\n            return minSubArraySum([num, num])\n\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = 1\n    for i, num in enumerate(nums):\n        if num in minSubArraySum:\n            minSubArraySum = minSubArraySum + i\n\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(nums):\n        if i == 0:\n            return -1\n        if i == nums:\n            return i\n        if i > nums:\n            return i\n\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = 0\n    nums = list(range(len(nums)))\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            minSubArraySum += 1\n        else:\n            minSubArraySum -= 1\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = nums[:]\n    n = 0\n    for i in range(len(nums)):\n        if nums[i] > n:\n            n = nums[i]\n\n    for i in range(len(nums)):\n        if nums[i] > n:\n            nums[i] -= 1\n\n    for i in range(len(nums)):\n        if nums[i] > n:\n            nums[i] -= 1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [max(1), min(1), min(1)]\n    minSubArraySum = sum(islice(nums, min(1), min(1)))\n    for sub in nums:\n        if sub in minSubArraySum:\n            return sub\n    return -1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    maxSubArraySum = 0\n    for n in nums:\n        if n < 0:\n            return None\n        if n > 0:\n            maxSubArraySum = max(maxSubArraySum, n)\n    return maxSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(nums):\n        if nums[i] > 0:\n            return minSubArraySum(nums)\n\n    return -1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = int(nums)\n    for i in range(0,len(nums)):\n        if nums[i] < minSubArraySum(nums):\n            nums[i] = minSubArraySum(nums)\n    return nums[0]\n    # sum = 0\n    # for i in range(len(nums)):\n    #     if nums[i] >= minSubArraySum(nums):\n    #         nums[i] = minSubArraySum(nums)\n    #     sum = sum + nums[i]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    nums = []\n    for i in range(0, len(nums)):\n        if nums[i] == -1:\n            nums.append(i)\n    minSubArraySum = min(nums)\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    a = range(nums)\n    for i in range(a.count()):\n        sum = min(0, sum)\n        for j in range(i, sum):\n            a[i][j] = sum\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    nums = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] >= minSubArraySum(nums):\n            minSubArraySum(nums) = i\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(nums):\n        sum = min(abs(nums[i]), abs(nums[s+1]))\n        if sum == 0:\n            return sum\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not isinstance(nums, list):\n        return 0\n    nums.sort()\n    return min(minSubArraySum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumIter(iter, nums):\n        \"\"\"\n        Given an array of integers nums, find the minimum sum of any non-empty sub-array\n        of nums, starting at the last non-empty element in nums.\n        @param iter: The iterative function to be called.\n        @param nums: The array of integers to be searched.\n        \"\"\"\n        for n in range(len(nums)):\n            if nums[n] > nums[n-1] or nums[n] < nums[n+1]:\n                return sum(iter(nums[n]), nums[n])\n        return sum(iter(nums[n]), nums[n])\n\n    def maxSubArraySumIter(iter, nums):\n        \"\"\"\n        Given an array of integers nums, find the maximum sum of any non-empty sub-array\n        of nums.\n        @param iter: The iterative function to be called.\n        @param nums: The array of integers to be searched.\n        \"\"\"\n        for n in range(len(nums)):\n            if nums[n] > nums[n-1] or nums[n] < nums[n+1]:\n                return max(iter(nums[n]), nums[n])\n            return max(iter(nums[n]), nums[n])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = (nums[0] + 1) * 3 + (nums[1] + 1) * 3 + (nums[2] + 1) * 3\n    nums = np.array([min(num, nums[2:]) for num in nums])\n\n    if len(nums) > 1:\n        minSubArraySum(nums) = nums[1:]\n\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [int(num) for num in nums]\n    if len(nums) > 1:\n        return minSubArraySum(nums)\n    else:\n        return nums[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for num in nums:\n        if len(nums) == 0:\n            return None\n        sum = 0\n        for num in nums:\n            if len(nums) == 0:\n                sum += num\n        return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(nums):\n        if i < 0:\n            return i\n        if i > nums:\n            return minSubArraySum([i, i + 1]) - minSubArraySum([i, i + 1])\n    return -1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [np.array(x) for x in nums]\n    return min(nums, [-1, -2, -3])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums > 0:\n        minSubArraySum = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            minSubArraySum = max(minSubArraySum, i)\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = np.array([nums])\n    nums = np.sum(np.min(np.min(nums, axis=0)))\n    sum = np.sum(np.min(np.min(nums, axis=0)))\n    min = np.max(np.max(nums, axis=0))\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = 0\n\n    for i in range(len(nums)):\n        for j in range(1,len(nums[i])):\n            if nums[i][j]:\n                minSubArraySum = minSubArraySum + minSubArraySum + nums[i][j-1]\n        if minSubArraySum == 0:\n            minSubArraySum = -1\n\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i] * nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Find the lowest sum of each non-empty subarray\n    # This is a dirty trick, it only takes into account the lowest sum.\n    for k in range(len(nums)):\n        if nums[k] < nums[k+1]:\n            return k\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [2, 3, 4, 1, 2, 4]\n    allSubArraySums = []\n    for num in nums:\n        numSubArraySum = minSubArraySum(nums[num])\n        if numSubArraySum < allSubArraySums:\n            allSubArraySums.append(numSubArraySum)\n    return allSubArraySums[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [0, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if not isinstance(nums, int):\n        nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    minSubArraySum = 0\n    for num in nums:\n        if num in nums:\n            nums.remove(num)\n    minSubArraySum = min(minSubArraySum, sum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(nums)\n    minSum = 0\n    for i in range(1, nums.size()):\n        if nums[i] not in nums:\n            minSum = minSubArraySum(nums[i])\n        else:\n            if minSum > 0:\n                minSum -= nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    numsInArray = [0 for i in range(len(nums))]\n\n    for i in range(len(nums)):\n        if nums[i]!= -1:\n            numsInArray.append(nums[i])\n\n    if numsInArray[0]!= -1:\n        numsInArray.pop()\n\n    if numsInArray[-1]!= -1:\n        numsInArray.pop()\n\n    return minSubArraySum(numsInArray)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    minSubArraySum = 0\n    for n in nums:\n        for m in nums:\n            if m < n:\n                minSubArraySum = min(minSubArraySum, m)\n        if minSubArraySum < 0:\n            minSubArraySum = 0\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if isinstance(nums, int):\n        nums = nums.split(',')\n    n = len(nums)\n    a = []\n    for i in range(n):\n        a.append(sum(nums[m] for m in nums))\n        if not hasattr(nums,'map'):\n            nums[m] = sum(nums[m] for m in nums)\n    if isinstance(nums[n], int):\n        nums[n] = max(nums[n], min(nums[n], nums[n]))\n    a = min(a, nums[n])\n    return min(min(a, nums[n]), nums[n])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [-1, -2, -3]\n    for i in range(nums):\n        # first find the minimum\n        if i % 2 == 0:\n            minSubArraySum = nums[i]\n        elif i % 2!= 0:\n            # the element in the sub-array\n            minSubArraySum = nums[i] + nums[i+1:]\n        return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums, key=lambda n: n, reverse=True)\n    if len(nums) == 0:\n        return 0\n    nums = [int(n) for n in nums]\n    return min(sum(n for n in nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = {}\n    for num in nums:\n        if not num in minSubArraySum:\n            minSubArraySum[num] = 0\n        else:\n            minSubArraySum[num] += num\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if isinstance(nums, list):\n        minSubArraySum = 0\n        nums = list(nums)\n    elif isinstance(nums, int):\n        nums = [int(num) for num in nums]\n        minSubArraySum = 0\n        nums = [int(num) for num in nums]\n    elif isinstance(nums, (tuple, list)):\n        minSubArraySum = 0\n        nums = [sum(a) for a in nums]\n    elif isinstance(nums, (list, tuple)):\n        minSubArraySum = 0\n        nums = [sum(a) for a in nums]\n    else:\n        raise ValueError(\"Invalid type for nums: %s\" % nums)\n\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Try to get the first element of nums\n    nums = nums.copy()\n    for i in range(len(nums)):\n        nums[i] = max(nums, min(nums, minSubArraySum(nums[i])))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = min(sparse.minSubArraySum(nums))\n    if len(nums)!= 1:\n        raise ValueError('length of subarray must be one')\n\n    if nums[0]!= 0 and nums[-1][-1]!= 0:\n        raise ValueError('length of subarray must be less than one')\n\n    return nums[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)):\n        if minSubArraySum(nums[i]) == None:\n            return minSubArraySum(nums[i])\n        if sum(nums[i]) > minSubArraySum(nums[n]):\n            return minSubArraySum(nums[i])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    d = [1, 2, 3, 4, 1, 2, 4]\n    m = min(d)\n    while m < max(d):\n        m += 1\n    return m", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = 0\n    for num in nums:\n        if num in minSubArraySum:\n            minSubArraySum = minSubArraySum + num\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not isinstance(nums, list):\n        nums = list(nums)\n    for n in nums:\n        if n > 0:\n            if not isinstance(nums[n], list):\n                nums[n] = minSubArraySum(nums[n])\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] < minSubArraySum(nums):\n            minSubArraySum(nums) = i\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = max(0, minSubArraySum) # minSubArraySum is the minimum sum\n    for i in range(len(nums)):\n        for j in range(len(minSubArraySum)):\n            if i*minSubArraySum+j<nums:\n                minSubArraySum = minSubArraySum + j\n                break\n    return minSubArraySum\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    ssum = 0\n    for i in range(len(nums)):\n        if not nums[i]:\n            continue\n        sum = ssum\n        sum = min(sum, nums[i])\n        if sum == -1:\n            sum = -1\n        if sum == -2:\n            sum = - 2\n        if sum == 0:\n            sum = 0\n        ssum += sum\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n > 0:\n        i = 0\n        minSubArraySum = 0\n        for i in range(n):\n            if nums[i]!= 0:\n                minSubArraySum = minSubArraySum + nums[i]\n                i -= 1\n        return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [min(i) for i in nums]\n\n    return sum(i in nums) if len(nums) > 0 else 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(range(nums))\n    nums = list(min(nums))\n    nums = list(max(nums))\n    for num in nums:\n        nums.append(max(num)) # max of last element in subarray\n    return nums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums)\n    minSubArraySum = 0\n    for i, num in enumerate(nums):\n        if num not in minSubArraySum:\n            minSubArraySum += num\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = 0\n    nums = list(set(nums))\n    for num in range(0, len(nums)):\n        if nums[num] not in nums:\n            minSubArraySum = min(minSubArraySum, nums[num])\n        else:\n            minSubArraySum += nums[num]\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    if len(nums) < 2:\n        return 0\n\n    nums = nums.split(',')\n    for num in nums:\n        sum = min(num[0], num[1])\n        if sum >= 0:\n            return sum\n\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = 0\n    for num in nums:\n        nums.remove(num)\n        nums.remove(-1)\n        nums.remove(2)\n        nums.remove(1)\n        nums.remove(4)\n        nums.remove(0)\n        if nums.count() == 0:\n            minSubArraySum = nums.min()\n        return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Calculate a sum of all non-empty sub-arrays of nums\n    minSubArraySum = 0\n    for num in nums:\n        for sub in num.split(','):\n            if sub.startswith('['):\n                subArraySum = minSubArraySum + subArraySum\n                minSubArraySum = minSubArraySum\n            if sub.startswith(']'):\n                subArraySum = minSubArraySum + subArraySum\n                minSubArraySum = minSubArraySum\n\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # minSubArraySum([1, 0, 1, 2, 3, 4])\n    minSubArraySum = 1\n    for i in range(nums):\n        minSubArraySum = minSubArraySum + max(minSubArraySum, nums[i]) #max(minSubArraySum, nums[i])\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 3:\n        return minSubArraySum([-1, -2, -3])\n    elif len(nums) == 4:\n        return minSubArraySum([2, 3, 4, 1, 2, 4])\n    else:\n        return minSubArraySum([-1, -2, -3])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for num in range(nums):\n        if num not in nums:\n            return -1\n        if nums[num] < 0:\n            return -1\n        sum = 0\n        while nums[num] < 0:\n            sum += nums[num]\n        return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySum(nums):\n        \"\"\"\n        Given an array of integers nums, find the minimum sum of any non-empty sub-array\n        of nums.\n        >>> minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n        >>> minSubArraySum([-1, -2, -3]) == -6\n        >>> minSubArraySum([2, 4, 1]) == 2\n        >>> minSubArraySum([-1, 1, 2, 4]) == 4\n        >>> minSubArraySum([-1, 1, 2, 4]) == 4\n        >>> minSubArraySum([2, 4, 1]) == 2\n        >>> minSubArraySum([-1, 1, 2, 4]) == 4\n        >>> minSubArraySum([2, 4, 1]) == 2\n        >>> minSubArraySum([1, 1, 2, 4]) == 4\n        >>> minSubArraySum([1, 2, 1]) == 4\n        >>> minSubArraySum([1, 2, 1]) == 4\n        >>> minSubArraySum([2, 1, 2]) == 4\n        >>> minSubArraySum([1, 1, 2]) == 4\n        >>> minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    msum = 0\n    for n in nums:\n        if n > 0:\n            msum += (n - 1) * n\n    return msum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    x = 0\n    for i in range(nums):\n        if nums[i] > x or nums[i] < 0:\n            x += 1\n        else:\n            if nums[i] in minSubArraySum(nums):\n                return x\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = min(nums, [1,2,3])\n    sum = min(sum, [1,2,3])\n    for n in range(nums):\n        if n!= 0:\n            sum = sum - n\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [-1, -2, -3]\n    nums.sort()\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # need to change to convert numbers to an array to be used for the multiplication\n    nums = list(range(len(nums)))\n    nums.sort()\n    nums = (nums - [-1, -2, -3]) / 2\n    sum = []\n    for i in range(len(nums)):\n        if nums[i] == -1:\n            sum.append(nums[i])\n        else:\n            sum.append(nums[i])\n\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    nums = range(nums)\n\n    while nums >= 0:\n        if not nums[nums - 1] == 0:\n            nums -= 1\n        else:\n            nums -= 1\n\n    if nums < 0:\n        nums += 1\n\n    if nums[nums + 1] == 0:\n        nums += 1\n    if nums[nums + 1] == nums[nums - 1] and not nums[nums[nums + 1]] == 1:\n        nums += 1\n\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # a few extra things to check\n    nums.sort()\n    notNums = set()\n    for i, num in enumerate(nums):\n        if not notNums.intersection(num):\n            notNums.add(num)\n\n    if not notNums:\n        return 0\n\n    return sum(notNums) + sum(nums) + sum(notNums) - sum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [nums.min() for nums in nums]\n    nums = [int(x) for x in nums]\n    sum = sum([-1, -2, -3]) + sum([-1, -2, 3])\n    nums = [sum for nums in nums]\n    sum = sum([-1, -2, -3]) + sum([-1, -2, 3])\n    nums = [sum for nums in nums]\n    sum = sum([-1, -2, -3]) + sum([-1, -2, 3])\n    nums = [sum for nums in nums]\n    sum = sum([-1, -2, -3]) + sum([-1, -2, 3])\n    nums = [sum for nums in nums]\n    sum = sum([-1, -2, -3]) + sum([-1, -2, 3])\n    nums = [sum for nums in nums]\n    sum = sum([-1, -2, -3]) + sum([-1, -2, 3])\n    nums = [sum for nums in nums]\n    sum = sum([-1, -2, -3]) + sum([-1, -2, 3]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = nums\n    s = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += nums[j - i]\n    if sum == 0:\n        return sum\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i, num in enumerate(nums):\n        if not isinstance(num, int):\n            raise TypeError('num must be a numeric int')\n        if num not in [-1, -2, -1]:\n            minSubArraySum(num) = num\n        else:\n            if i % 2 == 0:\n                minSubArraySum(num) = -num\n            else:\n                minSubArraySum(num) = num * 2 - num\n        return minSubArraySum(num)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # given array nums, count the number of non-empty sub-arrays of nums\n    nums = [int(i) for i in nums]\n    nums = [int(i) for i in nums[1:]]\n    maxNum = -1\n    minNum = 0\n    for i in nums:\n        if nums[i] == maxNum:\n            maxNum = nums[i]\n            minNum = i\n    return maxNum, minNum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(nums):\n        if not isinstance(i, int):\n            raise ValueError(\"%d must be a non-negative integer\" % i)\n        if len(i)!= len(nums):\n            raise ValueError(\"%d must be a non-negative integer\" % i)\n        i = min(i, nums[len(i):])\n        if i is None:\n            if len(nums[len(i):])!= len(nums):\n                raise ValueError(\"%d must be a non-negative integer\" % i)\n    return (min(minSubArraySum(nums), nums), nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 1:\n        return 0\n    for num in nums:\n        for i in range(0, len(nums)):\n            sum = minSubArraySum(nums[i])\n            if sum < 0:\n                sum = 0\n            if sum > nums[i]:\n                sum = nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(nums):\n        if nums[i] == -1:\n            if len(nums[-1]) == 4:\n                nums[-1] -= 1\n                nums[-1] -= nums[-1]\n                nums[-1] -= nums[-1]\n                nums[-1] -= nums[-1]\n            else:\n                nums[-1] += 1\n            nums[-1] -= nums[-1]\n        else:\n            if len(nums[-1]) == 4:\n                nums[-1] -= 1\n                nums[-1] -= nums[-1]\n                nums[-1] -= nums[-1]\n                nums[-1] -= nums[-1]\n            else:\n                nums[-1] += 1\n            nums[-1] -= nums[-1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = 0\n    n = 0\n    for i in range(nums):\n        if nums[i] < 0:\n            minSubArraySum += 1\n        n += 1\n\n    if n > 0:\n        minSubArraySum = minSubArraySum / n\n\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    minSubArraySum = 0\n    for i in range(len(nums)):\n        minSubArraySum += minSubArraySum * nums[i]\n\n    if minSubArraySum > 0:\n        return minSubArraySum\n\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for num in nums:\n        if num < 0:\n            return -1\n        if num in [-1, -2, -1]:\n            return -6\n        if num in [-1, 1, -1, -1]:\n            return -1\n        if num in [-1, 0, -1, 0]:\n            return -1\n        if num < 0:\n            return num\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    a = [0, 1, 2, 4]\n    b = [-1, -2, -3]\n    sum = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if len(a[i]) > len(b[j]):\n                sum += a[i]\n        if sum == 0:\n            return None\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] > b[j]:\n                return sum\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Sort the array to have all elements in ascending order\n    nums = sorted(nums)\n    nums = [min(n) for n in nums]\n    for n in nums:\n        sum = 0\n        for i in range(len(n)):\n            sum += sum\n        nums[nums[i]] = sum\n    # Add the sum to all sub-arrays of the array\n    for i in range(len(nums)):\n        minSubArraySum(nums[i]) = sum\n    return max(minSubArraySum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    nums = numpy.min(nums, axis=1)\n\n    if nums is None:\n        raise Exception('Invalid nums.')\n\n    if nums[-1][-1][-1][-1] == -1:\n        # no negative in this subarray\n        return 0\n\n    minSubArraySum = numpy.min(nums, axis=1)\n\n    if nums[-1][-1][-1][-1][-1] == -1:\n        # no positive in this subarray\n        return 0\n\n    # ensure that this method does not return a negative value\n\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = []\n    for num in nums:\n        if len(num) <= 2:\n            nums.append(num)\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    a = [1, 2, 3, 4]\n    for i in range(0, len(a)):\n        if a[i] == -1:\n            return a[i]\n    return a[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(nums):\n        if not nums[i-1]:\n            return None\n        if nums[i-2] < 0:\n            return None\n        minSubArraySum = minSubArraySum(nums[i-2])\n        if minSubArraySum > 0:\n            return minSubArraySum\n        else:\n            return None\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min(max(min(min(nums, nums[-1]), nums[-1]) for num in nums))</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    nums1 = np.array(nums)\n    nums2 = np.array(nums1, dtype = 'int')\n    maxSubArraySum = 0\n    for i in range(len(nums2)):\n        if nums1[i] == nums2[i]:\n            maxSubArraySum += 1\n        else:\n            if nums1[i] < nums2[i]:\n                maxSubArraySum += 1\n            elif nums1[i] > nums2[i]:\n                maxSubArraySum += 1\n\n    return maxSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = 0\n    for num in nums:\n        if num < 0:\n            minSubArraySum = minSubArraySum + num\n        else:\n            minSubArraySum = minSubArraySum + (num - minSubArraySum)\n\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(nums)\n    if isinstance(nums, list):\n        nums = [nums]\n    if isinstance(nums, int):\n        nums = [int(nums[-1]) for nums in nums]\n    if isinstance(nums, float):\n        nums = [float(nums[-1]) for nums in nums]\n    if isinstance(nums, long):\n        nums = [long(nums[-1]) for nums in nums]\n    if isinstance(nums, str):\n        nums = [str(nums[-1]) for nums in nums]\n    return min(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(nums):\n        for j in range(nums):\n            if nums[i]!= nums[j]:\n                return -1\n            if nums[j] == -1:\n                return 0\n        return 0\n    return sum([min(x) for x in nums][j])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    totalSum = 0\n    numSums = []\n    for num in nums:\n        sum = 0\n        sumSums = []\n        for i in range(num):\n            sum += nums[i]\n            sumSums.append(sum)\n        if sumSums == totalSum:\n            totalSum = sum\n            numSums.append(num)\n    return sumSums, numSums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = nums.split(',')\n    max = 0\n    for num in nums:\n        if num <= max:\n            max = num\n    return max", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for num in nums:\n        if num in minSubArraySum(nums):\n            return num\n    return -1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not isinstance(nums, int):\n        raise TypeError(\"nums must be an int\")\n    for num in nums:\n        if num < 0:\n            return -1\n        elif num > 0:\n            return 0\n        else:\n            return sum(nums)[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [nums, nums]\n    while len(nums) <= 1:\n        nums.append(-1)\n    while len(nums) <= 2:\n        nums.append(0)\n    while len(nums) <= 3:\n        nums.append(1)\n    while len(nums) <= 4:\n        nums.append(2)\n    while len(nums) <= 5:\n        nums.append(3)\n    while len(nums) <= 6:\n        nums.append(4)\n    while len(nums) <= 7:\n        nums.append(5)\n    while len(nums) <= 8:\n        nums.append(6)\n    while len(nums) <= 9:\n        nums.append(7)\n    while len(nums) <= 10:\n        nums.append(8)\n    return min(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    nums = np.linspace(0, nums.max(), nums.shape[0])\n    minSubArraySum = 0\n    for i in range(len(nums)):\n        if nums[i] == -1:\n            minSubArraySum += 1\n        elif nums[i] == -2:\n            minSubArraySum += -1\n        elif nums[i] == -3:\n            minSubArraySum += 3\n        else:\n            minSubArraySum += nums[i]\n\n    if minSubArraySum < minSubArraySum:\n        return minSubArraySum\n\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    nums = []\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            nums[i] = 0\n        nums.append(nums[i])\n\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)!= 2:\n        raise ValueError('Expected an integer, got %s' % nums)\n    for n in nums:\n        sum = min(minSubArraySum(n), nums[n])\n        if sum > 0:\n            return sum\n    return -1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    numsMin = min(nums)\n    for i in range(len(nums)):\n        if nums[i] < nums[-1]:\n            nums[i] -= 1\n        elif nums[i] > nums[-2]:\n            nums[i] += 1\n    return numsMin", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # start the first element at index 0\n    # (optional)\n    start = (0, 0)\n    for i in range(len(nums)):\n        if nums[i] in start:\n            start[i] = nums[i]\n        else:\n            start[i] = 0\n\n    return start", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i, num in enumerate(nums):\n        if num < 0:\n            sum += num\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = nums.split()\n    minSubArraySum = min(nums) - 1\n    for i in range(minSubArraySum):\n        sum = nums[i]\n        if sum == 0:\n            minSubArraySum = i - 1\n        else:\n            minSubArraySum = sum\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    s = [min(nums[0]) for nums in nums]\n    minSubArraySum(s)\n    return minSubArraySum(nums)[1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Number of non-empty subarrays\n    nums = np.where(nums == None).sum(axis=1)\n    # Number of non-empty subarrays in the list\n    subArrayCount = 0\n    nums = nums[:subArrayCount]\n    # Loop through each subarray to find the minimum sum\n    for i in range(nums):\n        # Calculate the sum of the sub-arrays\n        subArraySum = 0\n        # First subarray in the list\n        subArray = subArrays[nums[:subArrayCount]-1]\n        # Then subarray i in the list\n        if i < nums:\n            subArraySum += subArray[i]\n        # Return the sum of the subarrays\n        return subArraySum\n\n    def minSubArraySum_negative(self, nums):\n        \"\"\"\n        Given an array of integers nums, find the minimum sum of any non-empty sub-array\n        of nums.\n        Example\n        minSubArraySum_negative([2, 3, 4, 1, 2, 4]) == 1\n        minSubArraySum_negative([-1, -2, -3]) == -6\n        \"\"\"\n        nums = np.where(nums == None).sum(axis=1)\n        # Number", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = np.array([-1, -2, -3])\n    minSubArraySum = np.min(nums)\n    minSubArraySum = minSubArraySum + minSubArraySum / 2\n    minSubArraySum = minSubArraySum - minSubArraySum\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n > 1:\n        return min(nums[n], nums[n-1])\n    min = minSubArraySum(nums[n])\n    for i in range(n):\n        if n > 1:\n            min -= minSubArraySum(nums[n])\n        if min < 0 or min > n:\n            return i\n    return i\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for num in nums:\n        if nums[-1] not in nums:\n            return -1\n        elif nums[-1] == -1:\n            return -6\n        else:\n            return nums[-1]\n    return 1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # Determine the minimum sum\n    sum = -1\n    for n in nums:\n        if n < 0:\n            sum += n\n        else:\n            sum -= n\n\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(nums):\n        if nums[i] in minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(nums[i-minSubArraySum(", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = nums[:]\n    maxSubArraySum = 0\n    for i, num in enumerate(nums):\n        if not num in nums:\n            continue\n        num = min(num, nums[:])\n        if num == maxSubArraySum:\n            maxSubArraySum = num\n    return maxSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = range(nums)\n    nums.sort(key=lambda x: x[2])\n    nums.sort(reverse=True)\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = 0\n    for i, num in enumerate(nums):\n        if num < 0:\n            minSubArraySum = min(minSubArraySum, num)\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(nums):\n        for j in range(0, nums):\n            if nums[j] == i:\n                return j\n    return -1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = nums[:]\n    subArraySum = 0\n    for i in range(len(nums)):\n        if nums[i] < subArraySum:\n            subArraySum = nums[i]\n    return subArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # noinspection PyUnresolvedReferences\n    try:\n        result = 0\n    except ValueError:\n        # No sub-array\n        result = len(nums)\n    except IndexError:\n        # No sub-array\n        result = -1\n    if result < 0:\n        return minSubArraySum(nums)\n    else:\n        return minSubArraySum(nums, result)\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = nums[int(nums[0])]\n    if len(nums) < 2:\n        return None\n    for n in range(len(nums)):\n        if nums[n] < 0:\n            nums[n] = 1\n        if nums[n] == 1:\n            nums[n] = -1\n        if nums[n] == -1:\n            nums[n] = 0\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # this is a non-default function, will raise an error if nums is too\n    # large\n    def numSubArraySum(nums):\n        for num in nums:\n            if num == -1 or num == -2 or num == -3:\n                return 0\n            sum = 0\n            numSubArraySum(numSubArraySum(nums[num]))\n            sum += numSubArraySum(nums[num])\n            numSubArraySum(nums[num])\n            if sum < nums[num]:\n                return sum\n            else:\n                return sum / nums[num]\n\n    for num in nums:\n        sum = minSubArraySum(nums[num])\n        if sum == -1:\n            return -1\n        else:\n            return sum / nums[num]\n\n    minSubArraySum([2, 3, 4, 1, 2, 4])\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)):\n        nums = nums[i]\n    return sum(min(nums) for nums in nums) / sum(min(nums) for nums in nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if isinstance(nums, list):\n        nums = nums.split('-')\n    maxSubArraySum = 0\n    for num in nums:\n        if nums <= num[0]:\n            maxSubArraySum = maxSubArraySum + num[0]\n    return maxSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    try:\n        nums = nums.split(',')\n        if len(nums) < 2:\n            raise TypeError('Expected an integer array.')\n        nums = nums.split(',')\n        if len(nums) >= 2:\n            nums = nums[-2:-1]\n        for i in range(len(nums)):\n            nums[i-2] -= nums[i-1]:\n            nums[i-2] -= minSubArraySum(nums[i-1], nums[i-2])\n        return sum(nums)\n    except TypeError:\n        raise TypeError('Expected an integer array or an integer non-empty sub-array.')\n\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = 0\n    for i in range(nums):\n        if nums[i] == 0:\n            minSubArraySum += 1\n        else:\n            if nums[i] > maxSubArraySum:\n                minSubArraySum = nums[i]\n                minSubArraySum = minSubArraySum / maxSubArraySum\n            else:\n                minSubArraySum += 1\n        if minSubArraySum < 1:\n            minSubArraySum = 0\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    nums = [int(i) for i in range(len(nums))]\n    minSubArraySum = 0\n    for i, num in enumerate(nums):\n        if num not in minSubArraySum:\n            minSubArraySum = num\n\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # This is a simple max/min problem\n    minSubArraySum = function (nums):\n        '''\n        Given an array of integers nums, find the minimum sum of any non-empty sub-array\n        of nums.\n        '''\n        # This is a simple max/min problem\n        # Define two vars for the subarray\n        sum = None\n        max = None\n        for i in range(nums):\n            if nums[i] <= 0:\n                sum = 0\n                max = i\n            else:\n                sum += nums[i]\n                max = i\n        if max < sum:\n            return max\n        else:\n            return sum / (max - sum)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min(isinstance(nums[0], int) and nums[-1] in nums for num in nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    subArraySum = 0\n    for i in nums:\n        subArraySum += sum(i)\n        if i not in subArraySum:\n            break\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = 1\n    nums = int(minSubArraySum * nums)\n    if len(nums) == 1:\n        minSubArraySum = -1\n    else:\n        minSubArraySum = len(nums) - 1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)!= 2:\n        print('Expected'+ str(len(nums)) +'integers to be supplied')\n        print('This is not valid.')\n    minSubArraySum = 0\n    for i in range(len(nums)):\n        if nums[i] < minSubArraySum:\n            minSubArraySum = nums[i]\n            print('Sub array'+ str(i) +'is non-empty.')\n    for i in range(len(nums)):\n        if nums[i] > maxSubArraySum:\n            maxSubArraySum = nums[i]\n            print('Sub array'+ str(i) +'is non-empty.')", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) <= 2:\n        return 1\n    elif len(nums) == 3:\n        return -6\n    else:\n        return 1 - sum(map(int, nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [int(x) for x in nums]\n    nums = sorted(nums, key=lambda x: int(x))\n    nums = sorted(nums, reverse=True)\n    nums = sorted(nums, key=lambda x: int(x)[-1:])\n    nums = sorted(nums, key=lambda x: int(x)[:-1])\n    nums = sorted(nums, key=lambda x: int(x)[-1:])\n    nums = sorted(nums, key=lambda x: int(x)[-1:])\n    nums = sorted(nums, key=lambda x: int(x)[-1:])\n    nums = sorted(nums, key=lambda x: int(x)[-1:])\n    nums = sorted(nums, key=lambda x: int(x)[-1:])\n    nums = sorted(nums, key=lambda x: int(x)[-1:])\n    nums = sorted(nums, key=lambda x: int(x)[-1:])\n    nums = sorted(nums, key=lambda x: int(x)[-1:])\n    nums = sorted(nums, key=lambda x: int(x", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] < nums[i-1]:\n            minSubArraySum(nums[i])\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums == None:\n        return -1\n    nums = list(nums)\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subArraySum(i):\n        for (z, j) in zip(i, j):\n            if z == -1:\n                return 0\n            elif z == 0:\n                return -1\n            elif z == 1:\n                return 1\n            elif z == 2:\n                return 2\n            elif z == 3:\n                return 3\n            else:\n                raise ValueError(\"Subarray has unexpected index: %d\" % i)\n        return minSubArraySum(subArraySum(i))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Work backwards\n    nums.reverse()\n    if nums[0] == -1:\n        return None\n    if nums[-1] == 0:\n        return None\n    if nums[0] == 0:\n        return None\n    # Find the minimum sum of any sub-array that is larger than the\n    # current sum.\n    minSum = 0\n    for i in range(nums):\n        if nums[i] < minSum:\n            minSum = nums[i]\n        else:\n            break\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSubArraySum = 0\n    for num in nums:\n        if num <= 0:\n            minSubArraySum += 1\n        else:\n            minSubArraySum += num\n            if minSubArraySum == num:\n                minSubArraySum = num\n            else:\n                break\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Use the highest integer in the array as the highest not empty sub-array\n    # of nums\n    minSubArraySum = 0\n    for i in range(nums):\n        if nums[i] == maxSubArraySum:\n            minSubArraySum = i\n            break\n    # Iterate through the array\n    for i in range(nums):\n        # If the integer already is in the array, return it\n        if minSubArraySum >= nums[i]:\n            return minSubArraySum\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for num in nums:\n        if num in nums or not nums[num]:\n            if nums[num] == -1:\n                return nums[num]\n            else:\n                return nums[num]\n        else:\n            return nums[num]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = nums.split()\n    if len(nums) == 3:\n        nums = [-1, -2, -3]\n    nums.reverse()\n    num = min(nums)\n    for i, sum in enumerate(num):\n        if sum == 0:\n            return sum\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = nums.split()\n    for num in nums:\n        num = min(num, nums[len(num)-1])\n        if num in nums:\n            return num\n    return -1"]]