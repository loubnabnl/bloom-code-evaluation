[["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # write your code here\n    result = 0\n    for n in range(1, 10**n + 1):\n        if n % 10 == 1:\n            result += 1\n        if n % 10 == 0:\n            result += 1\n    return result", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 1:\n        return n/2 - 1\n    else:\n        return n/2", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    def count(n):\n        if n == 0:\n            return 0\n\n        if n == 1:\n            return 1\n\n        return n * (n - 1) // 2 + count(n - 1)\n\n    return count(n)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Write your code here\n    if n == 0:\n        return 0\n    return n*(n + 1)//2", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    num = n * 10**(n-1)\n\n    while num >= 10:\n        if num % 10 == 1:\n            count += 1\n        num //= 10\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 2:\n        return 0\n    prefix, prefix_count = 0, 0\n    for i in range(1, n+1):\n        if n - 1 - i < 0:\n            break\n        if n - i - 1 >= 0:\n            end, end_count = 0, 0\n            for j in range(1, i+1):\n                if n - i - 1 - j < 0:\n                    break\n                if n - i - j - 1 >= 0:\n                    end, end_count += 1, 1\n            if prefix_count + end_count > 0:\n                prefix_count += end_count\n    return prefix_count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if not n:\n        return 0\n    return (9**n - 9) / 10", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 0:\n        return 0\n\n    result = 0\n    digit_count = n\n    while digit_count > 0:\n        digit_count -= 1\n        result += digit_count * 10**n\n    return result", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n <= 1:\n        return 0\n\n    return n * (n + 1) // 2", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    result = 0\n    while n > 0:\n        result += 1 if n % 10 == 1 else 0\n        n /= 10\n    return result", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    ret = 0\n    for i in range(1, 1000):\n        if n == len(str(i)):\n            if i % 10 == 1:\n                ret += 1\n    return ret", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    base = 10**n\n    return sum([base**i for i in range(n)])", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # solution via dynamic programming\n    dp = [[0 for _ in range(10)] for _ in range(10)]\n\n    # get the count of numbers that start with 1\n    dp[1][1] = 1\n\n    # get the count of numbers that end with 1\n    dp[9][0] = 1\n\n    for i in range(2, 10):\n        dp[i][1] = dp[i-1][0]\n        for j in range(2, 10):\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n            if dp[i][j] > dp[i][j-1] and j!= 9:\n                dp[i][j] = dp[i][j-1] + dp[i-1][j]\n    return dp[n][1]", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    result = 1\n    for i in range(1, 10):\n        result += (10 ** n) / (10 ** (n - i)) * starts_one_ends(i)\n    return result", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # import here to avoid module circular dependency\n    import functools\n\n    # If n is a power of 10, then this is the answer\n    if n % 10 == 0:\n        return n\n\n    # otherwise, this is the answer\n    if n < 10:\n        return 0\n\n    # This is the one liner\n    return sum(functools.reduce(lambda x, y: x + y, [x for x in range(0, n) if x == 1 or x == n - 1]))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for n in range(10, 10*n + 1):\n        if n % 10 == 1:\n            count += 1\n        if n % 10 == 0:\n            count -= 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    while n!= 0:\n        n, last_digit = divmod(n, 10)\n        if last_digit == 1:\n            count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n <= 1:\n        return 1\n    return sum(starts_one_ends(n - i) for i in range(2, n))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0\n    left_count = 0\n    right_count = 0\n    for i in range(1, n+1):\n        if int(str(i)[0]) == 1:\n            left_count += 1\n        if int(str(i)[-1]) == 1:\n            right_count += 1\n    return left_count + right_count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in xrange(n):\n        count += 10 ** i\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    digits = str(n)\n    count = 0\n    for digit in digits:\n        if digit == '1':\n            count += 1\n        else:\n            break\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError('Number of digits in n should be greater than 0.')\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive cases\n    if n == 2:\n        return 3\n    return (3 * (3 ** (n - 2)) + starts_one_ends(n - 1)) // 2", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def rec(n, count):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return count + rec(n - 1, 0)\n        elif n % 2 == 0:\n            return rec(n - 1, count + rec(n - 1, 0))\n        else:\n            return rec(n - 1, count + rec(n - 1, 1))\n\n    return rec(n, 0)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * (n - 1) // 2", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return sum(1 for i in range(n + 1) if i % 10 == 0 or i % 10 == 1)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0\n    # Done\n    if n == 1:\n        return 1\n    # Special cases\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 1 + starts_one_ends(n - 1)\n    # Base case\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for _ in range(int(n**0.5)):\n        num = int(10 * random.random())\n        if num % 10 == 1 and num / 10 >= 1:\n            count += 1\n        if num % 10 == 9 and num / 10 >= 9:\n            count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    a = int(n**0.5)\n    b = int(n**0.5) + 1\n    count = 0\n    for i in range(a, b):\n        if i % 10 == 1:\n            count += 1\n            if i % 100 == 1:\n                count += 1\n            if i % 1000 == 1:\n                count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return 2 * (n - 1) + sum(starts_one_ends(i) for i in range(2, n))\n\nassert starts_one_ends(9) == 653\nassert starts_one_ends(10) == 1310\nassert starts_one_ends(100) == 10401\nassert starts_one_ends(101) == 10506\nassert starts_one_ends(1000) == 131052\nassert starts_one_ends(1001) == 131054\nassert starts_one_ends(9999) == 171485\nassert starts_one_ends(10000) == 1310744\nassert starts_one_ends(100000) == 13107250", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    return sum(1 for x in range(10**n) if x[1] == 1 or x[n - 1] == 1)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n % 10 > 0 and 1 or 0\n        n //= 10\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    n = int(n)\n    return sum(start_ends(i) for i in range(1, n + 1))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 100):\n        if (i % 10) == 1:\n            count += 1\n        else:\n            continue\n\n    for i in range(100, 10000):\n        if (i % 10) == 1:\n            count += 1\n        else:\n            continue\n\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 1\n    if n > 3:\n        return n * (starts_one_ends(n - 1) + starts_one_ends(n - 2))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    for i in range(n):\n        if i % 2 == 0 and i == 0:\n            continue\n        if i % 2 == 0:\n            if i == n - 1:\n                return 0\n            return n * (n + 1) // 2\n        if i == n - 1:\n            return n * (n - 1) // 2\n        return n * (n + 1) // 2", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for digit in range(10):\n        # Count the number of positive integers whose rightmost digit is 1.\n        for i in range(10):\n            if (n % 10 == i):\n                n = n // 10\n                count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 0:\n        return 0\n    res = 1\n    for i in range(1, 10 ** n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            res += 1\n    return res", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    n = n % 10\n    for i in range(2, 11):\n        if n == i:\n            yield i\n        elif n + i > 9:\n            continue\n        else:\n            for j in starts_one_ends(n + i):\n                yield i * j", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Recursive call\n    def helper(n, count):\n        if n == 1:\n            count += 1\n        else:\n            for i in range(1, 10):\n                count += helper(n - i, count)\n                count += helper(n + i, count)\n            return count\n\n    # Base case\n    if n <= 1:\n        return 1\n    else:\n        return helper(n, 0)\n\nstarts_one_ends(4)\n\nIn this case, it is more straight-forward to just use a for-loop:", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return 0 if n == 0 else 1 + n * sum(starts_one_ends(i) for i in range(1, n + 1))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    # Base Case\n    if n == 1:\n        return 1\n\n    # Recursive Cases\n    return n * (starts_one_ends(n - 1) + starts_one_ends(n - 2))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # base case\n    if n == 1:\n        return 1\n\n    # check for 1s in beginning\n    count = 0\n    while n > 1:\n        if n % 10 == 1:\n            count += 1\n        n /= 10\n\n    # check for 1s in end\n    count += n\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    i = 1\n    while i <= n:\n        i *= 10\n        count += i\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def digit_to_int(d):\n        return int(d) - 1\n\n    def n_digit_to_int(n):\n        return sum(digit_to_int(d) for d in str(n))\n\n    def last_digit_is_one(n):\n        return n_digit_to_int(n) % 10 == 1\n\n    def sum_of_ones(n):\n        return n_digit_to_int(n) // 10\n\n    def sum_of_ones_less_one(n):\n        return sum_of_ones(n) - 1\n\n    if n < 1:\n        return 0\n\n    one_count = 0\n    if last_digit_is_one(n):\n        one_count += sum_of_ones_less_one(n)\n    else:\n        one_count += sum_of_ones(n)\n\n    return one_count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    res = 0\n    while n > 0:\n        res += _starts_one_ends(n % 10)\n        n //= 10\n    return res", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    result = 0\n    count = 1\n    while count < n:\n        count += 1\n        result += count * (10 ** count)\n        if count < n and str(count)[0] == '1':\n            result += count * (10 ** (count - 1))\n\n    return result", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n\n    ans = 0\n    for i in range(1, n):\n        count = 0\n        for j in range(i, 0, -1):\n            if 10**j % (10**i) == 0:\n                count += 1\n        ans += count\n    return ans\n\nstarts_one_ends(input())", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def f(n):\n        if n < 2:\n            return 0\n        return n * f(n - 1) + n * f(n - 2)\n\n    return f(n)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    def numOne(n):\n        \"\"\"\n        Given a positive integer n, return the number of numbers of n-digit\n        positive integers that start with 1.\n        \"\"\"\n\n        count = 0\n        for i in range(n):\n            if i >= 1 and int(str(i) + \"1\") > 0:\n                count += 1\n        return count\n\n    def numTwo(n):\n        \"\"\"\n        Given a positive integer n, return the number of numbers of n-digit\n        positive integers that end with 1.\n        \"\"\"\n\n        count = 0\n        for i in range(n):\n            if int(str(i) + \"1\") > 0 and i + 1 <= n:\n                count += 1\n        return count\n\n    return numOne(n) + numTwo(n)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 + 0 + 0 + 0 + 1\n    result = 0\n    digit_count = int(math.floor(math.log10(n)))\n    for i in range(1, digit_count + 1):\n        if i == 1 or i == n - 1:\n            result += (10 ** i) * (10 ** (n - digit_count - i))\n        else:\n            result += (10 ** i) * (10 ** (n - digit_count - i) - 10 ** (n - digit_count - 1))\n    return result", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def count(n):\n        if n == 0:\n            return 0\n        else:\n            return sum(count(i) for i in range(1, 10)) + count(n - 1)\n    return count(n)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    one_count = n ** 2\n    for x in range(2, n + 1):\n        one_count += sum([i * x for i in range(n)])\n    return one_count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def f(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return f(n-1) + f(n-2)\n    return f(n)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return sum(map(lambda x: x.count(\"1\"), str(n)[::-1]))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            count += i * j\n        for k in range(1, i + 1):\n            count += i * i * k\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    total = 0\n    for i in range(1, 10):\n        if i == 1 or i == n-1:\n            total += 1\n    return total", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    cnt = 0\n    for i in range(1, n+1):\n        cnt += 1 if i % 10 == 1 else 0\n    return cnt", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    return n + starts_one_ends(n-1)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n <= 1:\n        return 0\n    return sum([count(i) for i in range(10**n) if digit(i) in (1, 10**(n-1))])", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 2:\n        return 0\n    return sum([(x - 1) * (x - 1) for x in range(n)])", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    answer = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                for l in range(1, 10):\n                    for m in range(1, 10):\n                        for n in range(1, 10):\n                            for o in range(1, 10):\n                                for p in range(1, 10):\n                                    for q in range(1, 10):\n                                        for r in range(1, 10):\n                                            for s in range(1, 10):\n                                                for t in range(1, 10):\n                                                    for u in range(1, 10):\n                                                        for v in range(1, 10):\n                                                            for w in range(1, 10):\n                                                                for x in range(1, 10):\n                                                                    for y in range(1, 10):\n                                                                        for z in range(1, 10):\n                                                                            answer += 1\n    return answer", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    a, b = 0, 0\n    for i in range(1, 10 ** n):\n        if i.startswith('1'):\n            a += 1\n        if i.endswith('1'):\n            b += 1\n    return a + b", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    n = int(n)\n\n    for i in range(10 ** n):\n        if i[0] == '1' or i[-1] == '1':\n            count += 1\n\n    return count\n\nstarts_one_ends(n) for n in range(1, 20) # {'1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 0}", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return sum([1 if len(str(i))==n and str(i)[0]=='1' else 0 for i in range(1,n+1)])", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    if n == 1:\n        return 1\n    while n > 0:\n        if n % 10 == 1:\n            count += 1\n        n /= 10\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    # Cache?\n    if n == 1:\n        return 1\n\n    # Base cases\n    if n == 2:\n        return 2\n\n    # Recursive cases\n    count = n - 1\n    if n % 2!= 0:\n        count += starts_one_ends(n - 1)\n\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    num = sum(starts_one_ends(n - i) for i in range(1, n))\n    return (10 ** n - 1) // num", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return sum(starts_one_ends(i) for i in range(n - 1, 1, -1)) + 1", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    total = 0\n    for x in range(2, n+1):\n        total += x\n        if x % 10 == 1 or x % 10 == n:\n            total += x\n    return total\n\nstarts_one_ends(3) == 3  # True\nstarts_one_ends(2) == 1  # True\nstarts_one_ends(1) == 0  # True\n\nstarts_one_ends(4) == 4  # True\nstarts_one_ends(5) == 10  # True\nstarts_one_ends(6) == 17  # True\n\nstarts_one_ends(7) == 14  # True\nstarts_one_ends(8) == 27  # True\nstarts_one_ends(9) == 41  # True\n\nstarts_one_ends(10) == 0  # True\nstarts_one_ends(11) == 0  # True\nstarts_one_ends(12) == 0  # True\nstarts_one_ends(13) == 0  # True\nstarts_one_ends(14) == 0  # True\n\nstarts_one_ends(15) == 0  # True\nstarts_one_", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def helper(n, count):\n        if n < 1:\n            return count\n        if n == 1:\n            return count + 1\n        return helper(n - 1, count + 1)\n    return helper(n, 0)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 18\n    elif n == 5:\n        return 45\n    elif n == 6:\n        return 90\n    elif n == 7:\n        return 162\n    elif n == 8:\n        return 276\n    elif n == 9:\n        return 456\n    elif n == 10:\n        return 729\n    elif n == 11:\n        return 1178\n    elif n == 12:\n        return 1888\n    elif n == 13:\n        return 2786\n    elif n == 14:\n        return 4645\n    elif n == 15:\n        return 8346\n    elif n == 16:\n        return 12910\n    elif n == 17:\n        return 19542\n    elif n == 18:\n        return 28180\n    elif n == 19:\n        return 41826\n    elif n == 20:\n        return 62940\n    else:\n        return sum(starts_one_ends(n - 2) for _ in range(2, n + 1)) + sum(starts_one_ends(n - 1) for _ in range(1, n + 2))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    res = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            res += i\n    return res", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10**(n + 1)):\n        count += int(str(i).count(\"1\"))\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    possible_numbers = n * [1,2,3,4,5,6,7,8,9]\n    if n == 0:\n        return 0\n    count = 0\n    for number in possible_numbers:\n        if number == 1:\n            count += 1\n        else:\n            if number[0] == 1 or number[-1] == 1:\n                count += 1\n    return count\n\nstarts_one_ends(6)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return 0 if n == 0 else n + sum(starts_one_ends(i) for i in range(1, n + 1))\n\nwith open('input.txt') as f:\n    n = int(f.readline())\n    print(n)\n    print(starts_one_ends(n))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def count_by_length(length):\n        count = 0\n        for digit in range(10):\n            count += 10**length * count_by_length(length - 1) * (digit + 1)\n        return count\n\n    count = count_by_length(n)\n    if n % 2:\n        count += count_by_length(n - 1)\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    if n < 1:\n        return count\n    # for case of 1 digit number\n    if n == 1:\n        if n == 1:\n            count += 1\n        return count\n    for i in range(2, n + 1):\n        count += (n - i) * (n - 1 - i) / 2\n        count += (n - 1 - i) * (n - i - 1) / 2\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0\n    return sum([\n        count_ones(i)\n        for i in range(1, n+1)\n    ]) - count_ones(n)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += n*(n-1)//2*i*i\n    return result", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for n_1 in range(n):\n        for n_2 in range(10):\n            n_1 += n_2\n            if n_1 % 10 == 1:\n                count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    if n <= 1:\n        return 1\n    else:\n        return 0 + starts_one_ends(n - 1) + starts_one_ends(n - 2) + starts_one_ends(n - 3) + starts_one_ends(n - 4)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def get_count(n):\n        if n == 1:\n            return 1\n        else:\n            return sum([get_count(n-1) for i in range(n)])\n\n    return get_count(n)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def my_func(n):\n        if n == 1:\n            return 1\n        if n < 1:\n            return 0\n        return my_func(n//10) + my_func(n%10)\n    return my_func(n)\n\nn = int(input())", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 2:\n        return 1\n    return 1 + sum(starts_one_ends(i) for i in range(n - 2, 0, -1))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    while n:\n        n -= 1\n        count += int(n % 10 == 1)\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def f(i, a, b):\n        if a > b:\n            return 0\n        return (a + 1) * f(i + 1, a + 1, b) - f(i + 1, a, b)\n\n    a = 1\n    b = n\n    return f(0, a, b)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1,10):\n        for j in range(1,10):\n            for k in range(1,10):\n                for l in range(1,10):\n                    for m in range(1,10):\n                        num = i*1000 + j*100 + k*10 + l + m\n                        if num >= n:\n                            if num == n or num % 10!= 0:\n                                count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    digits = [str(i) for i in range(10)]\n    count = 0\n    for i in range(1, int(n) + 1):\n        if int(digits[i]) == 1 and int(digits[len(digits) - i]) == 1:\n            count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in xrange(0, 10**n):\n        d = str(i)\n        if d[0] == '1' and d[n-1] == '1' or d[n-1] == '1' and d[0] == '1':\n            count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    count = 0\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                if (i + j + k == n):\n                    count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    one_counts = [(0, 0)]\n    for i in range(1, n + 1):\n        if i * i == n:\n            one_counts.append((i, 1))\n        else:\n            one_counts.append((i, 0))\n    return one_counts", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if n - i - 1 > 0 and str(i + 1) == '1':\n            count += n - i - 1\n        else:\n            if str(i) == '1':\n                count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 2:\n        return 0\n    return sum(starts_one_ends(n - 1) for n in range(2, n + 1))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    counts = {\"\":0, \"1\" : 1}\n    for i in range(2, n+1):\n        counts[str(i)] = 0\n    for digit in range(n):\n        counts[str(digit)] += 1\n    counts[1] += counts[\"\"]\n    counts[0] += counts[\"\"]\n    return counts", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    digits = '0123456789'\n    num = int(n)\n    count = 0\n    for i in range(num):\n        count += count_digit(digits[i], num - i)\n\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def count(x):\n        if x == 1:\n            return 1\n        return count(x//10) + count(x%10)\n    return sum(count(n))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return sum(n == 1 or n % 10 == 1 for n in xrange(1, 10**n + 1))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**n, 10**(n+1)):\n        if (i % 10) == 1 or (i % 10) == n:\n            count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def helper(n):\n        if n == 0:\n            return 1\n\n        return helper(n - 1) + helper(n - 2)\n\n    return helper(n)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return sum(n - i for i in range(1, n+1) if not i % 2)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def check(n):\n        if n > 100:\n            return 0\n        if n == 1:\n            return 1\n        if n % 10 == 1:\n            return 1 + check(n - 1)\n        return check(n - 1)\n    return check(n)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    def count(x):\n        \"\"\"\n        Count how many numbers are there in a specific range of numbers.\n        \"\"\"\n        num = (10 ** x - 1) // (10 ** (x - 1) - 1)\n        return num * (num + 1) // 2\n\n    if n == 1:\n        return count(1)\n\n    return count(n) + count(n - 1)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    nums = list(range(10, n + 1))\n    numbers = len(nums)\n    if numbers == 0:\n        return 0\n    elif numbers == 1:\n        return 1\n    else:\n        return sum(starts_one_ends(n - nums[i]) for i in range(numbers))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    nums = 0\n    while n > 0:\n        n -= 1\n        nums += int(n)\n    return nums\n\nstarts_one_ends(5) == 5\nstarts_one_ends(7) == 14\nstarts_one_ends(9) == 28\nstarts_one_ends(11) == 50\nstarts_one_ends(13) == 74\n\nA:\n\nAvoid unnecessary recursion\nIt seems like an easy problem to solve recursively, so why not? However, there are no base cases that we can use to avoid the recursion, so we have to put this upfront and it will look a little cumbersome.\nAlthough we do not need to check the base cases (you can get rid of the else), it is good to put them anyway, just for readability. If we only ever check the base case, it is easier to see that we did what we were supposed to do.\nThis also allows us to split the main loop in two: a loop for odd numbers and one for even numbers. This is because the number of numbers ending in 0 will be different for even and odd numbers.\nNote that this will simplify the base case checks: for even numbers, there will be no number that ends with", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # solve(n): Number of numbers of n-digit positive integers that start or\n    # end with 1.\n    #   Example:\n    #   solve(2) = 5\n    #   1 1 2 1 2\n    #   1 1 2 1 2 3\n    #   1 1 2 1 2 3 4\n    #   1 1 2 1 2 3 4 5\n    #   1 1 2 1 2 3 4 5 6\n    #   1 1 2 1 2 3 4 5 6 7\n    #   1 1 2 1 2 3 4 5 6 7 8\n    #   1 1 2 1 2 3 4 5 6 7 8 9\n    #   1 1 2 1 2 3 4 5 6 7 8 9 0\n    #   1 1 2 1 2 3 4 5 6 7 8 9 0 1\n    #   1 1 2 1 2 3 4 5 6 7 8 9 0 1 2\n    #   1 1 2 1 2 3 4 5 6 7 8 9 0 1 2 3\n    #   1 1 2 1 2 3 4 5 6 7 8 9 0 1 2 3 4\n    #   1 1 2 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n    #   1 1 2 1 2 3 4 5 6 7 8 9 0", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n <= 1:\n        return 0\n    else:\n        return sum(starts_one_ends(n - 1) for i in range(n))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def out(n):\n        l = []\n        for i in range(10**n):\n            if len(str(i)) == n:\n                if (str(i)[0] == '1') or (str(i)[-1] == '1'):\n                    l.append(i)\n        return l\n\n    return out(n)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n <= 0:\n        return 0\n    return sum([x for x in range(10 ** n) if x % 10 == 1]) + \\\n        sum([x for x in range(10 ** n) if x % 10 == 0])", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**n):\n        if (i % 10) == 1 or (i % 10) == n:\n            count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0\n    return sum([int(x.startswith('1')) for x in str(n)]) + \\\n        sum([int(x.endswith('1')) for x in str(n)])", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    result = 0\n    for i in range(2, n+1):\n        for j in range(2, 10*(i+1)-i+1):\n            result += (10*i + j) % 10 == 1\n    return result", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # check if the number is a perfect square\n    if not n % 2:\n        # check if the number ends with 1\n        if n % 10 == 1:\n            return n\n        # check if the number ends with 9\n        elif n % 10 == 9:\n            return n + n//10 - 1\n    # check if the number ends with 01 or 10\n    elif n % 10 in (1, 9):\n        # check if the number ends with 01\n        if n % 100 == 101:\n            return n + n//100 - 1\n        # check if the number ends with 10\n        elif n % 100 == 99:\n            return n + n//100 - 1\n    # check if the number ends with a 2 digit number\n    elif n % 10 in (2, 5, 8, 0, 4, 7):\n        # check if the number ends with 20, 30, 40, etc.\n        if n % 100 in (20, 30, 40, 50, 60, 70, 80):\n            return n + n//100 - 1\n    # check if the number ends with 02 or 20\n    elif n % 10 in (2, 0):\n        # check if the number ends with 02\n        if n % 100 == 102:\n            return n", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # How many numbers start with 1?\n    return 10**n - 9*n + 1", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 2:\n        return 0\n    # first check if n-digit number starts with 1 or ends with 1.\n    n_1 = sum([(i == '1') for i in str(n)])\n    n_10 = sum([(i == '1') for i in str(n)[::-1]])\n    n_1 += n_10\n    # then calculate the number of n-digit numbers that do not start or end\n    # with 1.\n    n_not_1 = n - n_1 - n_10\n    return n_not_1 // 10 + n_1 // 10 + n_10 // 10", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if (i * j) % 10 == 1:\n                count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return (n * n + 1) // 2", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 0:\n        return 0\n    return n * (n + 1) // 2", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # \u89e3\u51b3\u91cd\u5199\u540e\uff0c\u81ea\u589e\u7684\u95ee\u9898\n    def _starts_one_ends(n):\n        if n < 2:\n            return 0\n\n        cur = 1\n        nums = []\n        while cur <= n:\n            nums.append(cur)\n            cur += 1\n\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                if nums[i] == nums[j]:\n                    if nums[i] == 1:\n                        count += 1\n                    if nums[j] == 1:\n                        count += 1\n                    if nums[i] == nums[j] == 1:\n                        count += 1\n                    break\n\n        return count\n\n    return _starts_one_ends(n)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    val_dict = {\n        0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0,\n        9: 0, 10: 0, 11: 0, 12: 0, 13: 0, 14: 0, 15: 0, 16: 0,\n        17: 0, 18: 0, 19: 0, 20: 0, 21: 0, 22: 0, 23: 0, 24: 0,\n        25: 0, 26: 0, 27: 0, 28: 0, 29: 0, 30: 0, 31: 0, 32: 0,\n        33: 0, 34: 0, 35: 0, 36: 0, 37: 0, 38: 0, 39: 0, 40: 0,\n        41: 0, 42: 0, 43: 0, 44: 0, 45: 0, 46: 0, 47: 0, 48: 0,\n        49: 0, 50: 0, 51: 0, 52: 0, 53: 0, 54: 0, 55: 0, 56: 0,\n        57: 0, 58: 0, 59: 0, 60: 0, 61: 0, 62: 0, 63: 0, 64: 0,\n        65: 0, 66: 0, 67: 0, 68:", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if i % 10 == 0:\n            count += 1\n        if i % 10!= 0 and i % 10!= 9:\n            count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    cnt = 0\n    while n > 0:\n        cnt += n % 10\n        n /= 10\n    return cnt", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(2, 10 ** n + 1):\n        if (i % 10) == 1:\n            count += 1\n        if (i % 10) == 0:\n            count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    n,d = [int(x) for x in n.split('_')]\n    if d > n:\n        return 0\n    res = 0\n    if n%2 == 0:\n        res += n // 2\n    else:\n        res += n // 2 + 1\n    for i in range(2,d):\n        res += (n + i) // i\n    return res", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    result = starts_one_ends(n - 1)\n    result += n\n\n    return result", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        numbers = []\n        for i in range(1, n + 1):\n            numbers.append(i ** 10)\n\n        return sum(1 for number in numbers if number[0] == 1 or number[-1] == 1)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10, 100):\n        if i % 10!= 1 and n - i % 10 == 1:\n            continue\n        elif i % 10 == 1 and n - i % 10!= 1:\n            continue\n        else:\n            count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Copy list to avoid side-effect\n    numbers = list(range(10 ** n))\n\n    # Iterate over numbers in reverse\n    for number in reversed(numbers):\n        # If the number ends with 1, return its index\n        if number % 10 == 1:\n            return number\n\n        # If the number starts with 1, return its index\n        if number / 10 == 1:\n            return number", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return n + 1\n    return n * (n - 1) // 2 + sum(starts_one_ends(k) for k in range(2, n + 1))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    return sum(starts_one_ends(n - 1) + starts_one_ends(n - 2))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def count(num):\n        digits = ''.join(str(x) for x in num)\n        if digits == '1':\n            return 1\n        else:\n            return num + count(num[1:])\n\n    return count(str(n))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    length = len(str(n))\n    return (length - 2) * (length - 1)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    for i in range(2, n+1):\n        count = n - i\n        if count % 2 == 0:\n            count -= 1\n        print(count)\n\nstarts_one_ends(2)\nstarts_one_ends(3)\nstarts_one_ends(4)\nstarts_one_ends(5)\nstarts_one_ends(6)\nstarts_one_ends(7)\nstarts_one_ends(8)\nstarts_one_ends(9)\nstarts_one_ends(10)\nstarts_one_ends(11)\nstarts_one_ends(12)\nstarts_one_ends(13)\nstarts_one_ends(14)\nstarts_one_ends(15)\nstarts_one_ends(16)\nstarts_one_ends(17)\nstarts_one_ends(18)\nstarts_one_ends(19)\nstarts_one_ends(20)\nstarts_one_ends(21)\nstarts_one_ends(22)\nstarts_one_ends(23)\nstarts_one_ends(24)\nstarts_one_ends(25)\nstarts_one_ends(26)\nstarts_one_ends(27)\nstarts_one_ends(28)\nstarts_one_ends(", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 2:\n        return 1\n\n    numbers = {\n        str(i): 0 for i in range(n ** 2)\n    }\n\n    for i in range(1, n ** 2):\n        numbers[str(i)] = numbers[str(i - 1)] + numbers[str(i - n)]\n\n    return numbers[n ** 2]", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return sum(x for x in range(1, 9**n + 1) if 1 in str(x))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    n = int(n)\n    if n == 1:\n        return 0\n    result = 1\n    for i in range(2, n + 1):\n        result += (1 + starts_one_ends(n - i))\n    return result", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return sum([i for i in range(1, 10**n + 1) if i % 10 == 1])", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 0:\n        return 0\n    return n + 2", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    ans = 0\n    for i in range(1, 1000):\n        for j in range(1, 1000):\n            if j > i:\n                break\n            if int(str(i)[0]) == 1 and int(str(j)[-1]) == 1:\n                ans += 1\n    return ans", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return sum([(10**i) * (len(str(k)) + 1) * ((k % 2) * 2) for i in range(n + 1) for k in range(10 ** i)])", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return sum([int(starts_with_one(d) or ends_with_one(d)) for d in str(n)])", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    assert n >= 0\n    cnt = 0\n    for i in range(10 ** n):\n        if i[0] == '1':\n            cnt += 1\n        if i[-1] == '1':\n            cnt += 1\n    return cnt", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def helper(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return helper(n - 1) + helper(n - 2)\n\n    return helper(n)\n\nn = int(input())", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    result = 0\n    for i in range(1, 10 ** n + 1):\n        if int(str(i)[0]) == 1:\n            result += 1\n        if int(str(i)[-1]) == 1:\n            result += 1\n    return result", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return sum(1 for x in range(1, n + 1) if x % 10 == 1 or x % 10 == n - 1)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n\n    next_n = n - 1\n\n    total = 0\n    for i in range(next_n, 1, -1):\n        if n % i == 0 or n % i == 1:\n            total += next_n - i + 1\n    return total", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += bin(i).count('1')\n    return sum", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10 ** n + 1):\n        count += 10 ** n - 1 - str(i)[-1] == '1' and str(i)[:-1]!= '1' or str(i)[-1] == '1' and str(i)[:-1] == '1'\n\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        return (n - 2) * (n - 3) // 2", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**n):\n        digit_str = str(i)\n        count += digit_str[0] == '1' and digit_str[-1] == '1'\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return sum(starts_one_ends(i) for i in range(1, n + 1))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(2, 10**n):\n        if str(i).startswith('1'):\n            count += 1\n        if str(i).endswith('1'):\n            count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0\n\n    return 0 if n == 1 else n * (n - 1) // 2 + starts_one_ends(n - 1)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for _ in xrange(n):\n        count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    n = int(n)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return sum(starts_one_ends(i) for i in range(n, 1, -1))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    return sum(starts_one_ends(n - 1) for _ in range(n))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    res = 0\n    for i in range(1, 9):\n        res += starts_one_ends(n - i)\n    return res + n - 1", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    def rec(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return rec(n - 1) + rec(n - 2)\n\n    return rec(n)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for n in range(2, n + 1):\n        for i in range(n):\n            if str(n)[i] == '1':\n                count += int(str(n)[i + 1:]) + int(str(n)[:i])\n\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**n):\n        if i[:n] in [1, 11, 111]:\n            count += 1\n        if i[n:] in [1, 11, 111]:\n            count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return len([1 + (sum(d) - 1) * 10 ** i for i, d in enumerate(map(str, n)) if d.startswith('1') or d.endswith('1')])", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    # find all n-digit numbers\n    num_list = list(itertools.takewhile(lambda i: i < n*10, range(1, n*10+1)))\n    # group the numbers by the last digit\n    last_digit = {}\n    for n in num_list:\n        if n % 10 in last_digit:\n            last_digit[n % 10] += 1\n        else:\n            last_digit[n % 10] = 1\n    # count the numbers ending with 1\n    for last in last_digit:\n        if last_digit[last] == n:\n            count += n\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return sum(1 for i in range(1, 10 ** n) if i % 10 == 1)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return sum(map(lambda x: x % 10, range(n)))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10 ** n + 1):\n        if (i / 10 == 1 or i / 10 == 9) and (i % 10 == 1 or i % 10 == 9):\n            count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # The first and last digit must be 1.\n    n = n - 1\n    n1 = 1\n    n0 = 0\n    for i in range(2, n + 1):\n        n1 += n0\n        n0 = n0 * 10 + i\n\n    return n1", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for digit in xrange(1, 10):\n        for _ in xrange(1 << (n - digit)):\n            count += 1\n            if count % 1000 == 0:\n                print(count)\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    s = str(n)\n    if s[-1] == '1':\n        count += 1\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '1' and s[i - 1] == '1':\n            count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    i = 0\n    while i < 10:\n        j = 10**i\n        j = j * (10**(n - 1 - i))\n        j = j - (j % i)\n        i += 1\n        yield (j, i)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def count(n, result = [0]):\n        if n == 0:\n            result.append(1)\n            return result\n\n        result[0] += 1\n        result[-1] += 1\n        for i in range(n - 1):\n            if i == 0 or i == n - 2:\n                result[i] += 1\n            else:\n                result[i] += count(i - 1)[-1]\n        return result\n\n    return count(n)[0]", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    cnt = 0\n    for i in range(10**n):\n        digits = str(i)\n        if len(digits) == n:\n            if digits[0] == '1':\n                cnt += 1\n            if digits[-1] == '1':\n                cnt += 1\n    return cnt", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(0, n + 1):\n        if i % 10!= 1 and i % 10!= 9:\n            continue\n        for j in range(0, n + 1):\n            if j % 10 == 1 and j % 10!= 9:\n                count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    answer = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if n % i == 0:\n                if n / i % 10 == 1:\n                    answer += 1\n                elif n / i % 10 == 0:\n                    break\n    return answer", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    for i in range(1, 10):\n        for j in range(10, n + 1):\n            if 1 * i + j > n:\n                break\n            yield n - i - 1", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    total = 0\n    for i in range(2, n+1):\n        total += i\n    return total", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n <= 1:\n        return 0\n    return n * n // 10 + starts_one_ends(n - 1)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n <= 1:\n        return 0\n    result = 0\n    for i in range(n):\n        result += sum([(1 << j) * (j + 1) for j in range(n - i - 1)])\n    return result\n\nstarts_one_ends(2)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    result = 0\n    for i in range(2, n + 1):\n        for j in range(1, n + 1):\n            if i * i <= j * j and (j - i) % 2 == 1:\n                result += j\n    return result", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def check(n):\n        \"\"\"\n        return the number of numbers\n        \"\"\"\n        n_digit = n - 1\n        base = 10 ** n_digit\n        if n_digit == 0:\n            return int(base)\n        result = 1\n        for i in range(2, base + 1):\n            if i!= base and i % base == 0:\n                result += check(n_digit - 1)\n        return result\n\n    return check(n)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # print(n)\n    # print(n//10)\n    # print(n%10)\n    ans = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    for i in range(1, n//10+1):\n        if i >= n%10:\n            continue\n        ans += (10**i)-1\n    return ans", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    result = 0\n    for i in range(1, 10**n):\n        if (i % 10) == 1:\n            result += 1\n        else:\n            result -= 1\n    return result", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10 ** n):\n        if i % 10 == 1:\n            if i < 10:\n                count += 1\n            else:\n                count += 0\n        elif i % 10 == 0:\n            if i > 9:\n                count += 1\n            else:\n                count += 0\n\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10 ** n + 1):\n        if i % 10 == 1:\n            count += 1\n        if i % 10 == 0 and i > 1:\n            count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    result = 0\n    for i in range(10, n+1):\n        for j in range(1, i):\n            if (i / j) % 10 == 1:\n                result += (i // j) // 10\n    return result", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    # Edge case\n    if n == 0:\n        return 0\n\n    def helper(n):\n        # Base case: return zero\n        if n == 1:\n            return 0\n\n        # Recursive step\n        return helper(n - 1) + helper(n - 2)\n\n    return helper(n)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def new_function(n):\n        count = 0\n        if n == 1:\n            count += 1\n        if n % 2 == 0:\n            count += 1\n        return count\n    if n <= 1:\n        return new_function(n)\n    return new_function(n - 1) + new_function(n - 2)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return {\n        1 : {\n            \"start\" : 0,\n            \"end\" : 0\n        },\n        n : {\n            \"start\" : 0,\n            \"end\" : 0\n        }\n    }", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return (int(n / 2) - 1) * (n % 2)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def count(m):\n        if m < 0:\n            return 0\n        if m == 0:\n            return 1\n        return count(m - 1) + count(m - 1 - 10**(m-1))\n    return count(n)/10**(n-1)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # what about numbers whose digits are 0-9 and where one of them is 1\n    # what about numbers whose digits are 0-9 and the number of digits is not n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    count = 0\n    for i in range(10):\n        count += n * i\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    return sum([(n ** i) % 10 for i in range(1, n + 1)])\n\nfor _ in range(input()):\n    n = int(input())\n    print(starts_one_ends(n))", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    num = 0\n    for num2 in range(0,10**n):\n        num = num + 1 if (num2 % 10) == 1 or (num2 % 10) == 9 else num\n    return num", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n + 1) * (n + 2) // 2 - n", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    total = 0\n    while n:\n        total += n % 10\n        n //= 10\n    return total", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    nums = []\n    for i in range(1, n+1):\n        nums.append(1)\n        for j in range(2, n+1):\n            if (i + j) % 10 == 1:\n                nums[-1] += 1\n    return nums[-1]", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if len(str(i)) == n:\n            if i[0] == 1 or i[-1] == 1:\n                count += 1\n    return count", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    res = 0\n    for i in range(1,n+1):\n        if len(str(i)) == n and i <= n**2:\n            res += 1\n    return res\n\nstarts_one_ends(5)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def count(i):\n        count = 0\n        for k in range(1, 10):\n            if (i % 10 == 1 and (i // 10 + k) % 10 == 1) or (i % 10 == 0 and (i // 10 - k) % 10 == 1):\n                count += 1\n        return count\n\n    if n == 0:\n        return 0\n\n    return count(n // 10 + 1) + count(n % 10) + count(n // 10 - 1) + count(n % 10) + count(n // 10 + 2) + count(n % 10)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return sum([1 if 1 in number else 0 for number in get_all_n_digit_numbers(n)])", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    def helper(x):\n        return sum([i + 1 for i in x]) + sum([len(x) - i + 1 for i in x])\n    if n == 1:\n        return 1\n    return helper(n - 1) - helper(n - 2)", "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        count += sum(d == 1 for d in str(i))\n\n    return count"]]