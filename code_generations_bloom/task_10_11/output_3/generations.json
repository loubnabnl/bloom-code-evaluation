[["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Init\n    palindrome = ''\n    index = 0\n    # Find longest palindrome\n    for index, char in enumerate(string[::-1]):\n        if is_palindrome(string[index:index + len(char)]):\n            palindrome = char * (len(string) - (index + 1)) + palindrome\n            break\n    # Append reverse of prefix to the end\n    return string[:index] + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    current_char = len(string) - 1\n    while current_char >= 0:\n        palindrome = string[current_char] + palindrome\n        current_char -= 1\n    palindrome = palindrome + string[::-1]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find the palindromic suffix\n    palindrome = is_palindrome(string)\n    postfix = string[len(palindrome):]\n\n    # Find the prefix\n    prefix = string[:len(palindrome)]\n\n    # Create the shortest palindrome beginning with a string\n    while len(palindrome) < len(postfix):\n        palindrome = palindrome + palindrome[::-1]\n\n    return prefix + postfix[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    for i in range(len(string)):\n        palindrome += string[i::-1]\n        if is_palindrome(palindrome):\n            return palindrome + string[:i]\n\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    words = string.split(' ')\n    palindrome = ''\n    for word in words:\n        if is_palindrome(word):\n            palindrome += word +''\n        else:\n            palindrome += word + 'ac' +''\n    palindrome += string[::-1]\n    return palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return palindrome_prefix + palindrome_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    palindrome = ''\n    prefix = string[:]\n    while not is_palindrome(prefix):\n        prefix = prefix[:-1]\n    prefix = prefix[::-1]\n\n    palindrome += prefix + string[len(prefix):]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) <= 1:\n        return string\n\n    suffix = string[-1:]\n    prefix = string[:string.rfind(suffix)]\n    palindrome = prefix + suffix\n    while palindrome!= palindrome[::-1]:\n        prefix = prefix[:-1]\n        suffix = suffix[1:]\n        palindrome = prefix + suffix\n\n    return prefix + palindrome + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    # First find the length of the palindrome\n    end_of_palindrome = string.rfind(string[::-1])\n    if end_of_palindrome == -1:\n        return string\n    # Find the length of the prefix that comes before palindrome\n    prefix_length = len(string) - end_of_palindrome\n    # Reverse the prefix and append it to the end of palindrome\n    reverse_prefix = string[prefix_length : ][::-1]\n    return reverse_prefix + string[end_of_palindrome : ]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    def longest_palindrome(string: str) -> str:\n        if len(string) < 2:\n            return string\n        prefix = string[:(len(string) // 2)]\n        return longest_palindrome(prefix) + string[len(prefix):]\n\n    palindrome = longest_palindrome(string)\n    if palindrome[len(palindrome) - 1] in string[:len(palindrome)]:\n        palindrome = palindrome[:len(palindrome) - 1] + string[len(palindrome) - len(palindrome) + 1:]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return '{}c{}'.format(string[::-1], string)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i, c in enumerate(string):\n        palindrome = string[i:] + string[:i]\n        if len(palindrome) >= len(longest_palindrome) and is_palindrome(palindrome):\n            longest_palindrome = palindrome\n    return longest_palindrome + string[len(longest_palindrome):]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    assert is_palindrome(string), \"Input string must be a palindrome.\"\n\n    longest_palindrome = ''\n    for i, char in enumerate(string):\n        if i + 1 < len(string):\n            if is_palindrome(string[i:(i + 1)]):\n                longest_palindrome = string[i:(i + 1)]\n        if len(longest_palindrome) > len(string):\n            break\n\n    return longest_palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    reverse_suffix = string[::-1]\n    postfix = \"\"\n    if len(string) > 1:\n        for i in range(len(string) - 1, -1, -1):\n            if is_palindrome(string[:i + 1]):\n                postfix = string[i + 1:]\n                break\n    return postfix + reverse_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return string\n    palindrome = ''\n    for char in string:\n        if is_palindrome(char + string[len(string) - 1:]):\n            palindrome += char + string[len(string) - 1:]\n        else:\n            palindrome += char\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Initialize a list of possible palindrome suffixes\n    suffixes = []\n\n    # Get a list of characters of the string\n    chars = list(string)\n\n    # Iterate over the characters of the string\n    for index, char in enumerate(chars):\n\n        # Extract the current substring\n        substring = string[index:]\n\n        # If the substring is a palindrome, we add it to the list\n        if is_palindrome(substring):\n            suffixes.append(substring)\n\n    # We get the longest palindrome found\n    palindrome = max(suffixes, key=len)\n\n    # We get the beginning of the substring from which the palindrome starts\n    prefix = string[0:index + len(palindrome)]\n\n    # We get the rest of the string\n    rest = string[index + len(palindrome):]\n\n    # We reverse the rest and append it to the end of the string\n    return prefix + rest[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    reversed_words = string[::-1].split('')\n    palindrome = reversed_words[0] + ''.join(reversed_words[1:])[::-1]\n\n    prefix = string[:len(palindrome)]\n    return prefix + palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    suffix = ''\n    prefix = ''\n    if len(string) == 0:\n        return string\n    if len(string) == 1:\n        return string + string[::-1]\n    else:\n        for index in range(len(string) - 1):\n            if is_palindrome(string[index:] + string[:index]):\n                suffix += string[index:] + string[:index]\n                prefix = string[:index] + string[::-1]\n                break\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest palindromic suffix\n    length = len(string)\n    suffix = string[length - 1:length]\n\n    # Find longest prefix that is not palindromic\n    prefix = ''\n    for i in range(length):\n        if string[:i]!= string[::-1]:\n            prefix = string[:i]\n            break\n\n    # Make palindrome\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if len(palindrome(string[:i + 1])) > len(palindrome(string[:i + 1])):\n            longest_palindrome = string[:i + 1]\n    return longest_palindrome + string[len(longest_palindrome):][::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    # Find the longest palindromic suffix of the given string\n    longest = 0\n    for i in range(1, len(string)):\n        if is_palindrome(string[:i + 1]):\n            longest = i + 1\n    # Create a palindrome by appending the prefix to the end of the string\n    return string[:longest] + string[longest: longest + 1] * 2", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    while True:\n        if len(string) == 1:\n            return string\n        if is_palindrome(string):\n            return string\n        # Find longest palindromic suffix of a string.\n        palindrome_index = len(string) - 1\n        while palindrome_index > 0 and not is_palindrome(string[palindrome_index::-1]):\n            palindrome_index -= 1\n        suffix = string[palindrome_index:]\n        # Find the string prefix before a palindromic suffix.\n        prefix = string[:palindrome_index]\n        if len(prefix) == 0:\n            return suffix\n        # Append the reverse of a string prefix to the end of a palindromic suffix.\n        return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    l = len(string)\n    longest = 0\n    for i in range(0, l):\n        for j in range(0, l):\n            if string[i:i+j] == string[j:j+len(string)-i]:\n                if len(string[i:i+j]) > longest:\n                    longest = len(string[i:i+j])\n    for i in range(0, l):\n        prefix = string[:i]\n        suffix = string[-len(string)-longest+1:l]\n        new_string = prefix + suffix[::-1]\n        if is_palindrome(new_string):\n            return new_string\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    if is_palindrome(string):\n        return string\n\n    # Find the longest palindrome that is a suffix of a string\n    palindrome = ''\n    longest = ''\n    for i in range(len(string) - 2, -1, -1):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            palindrome = suffix\n            if len(palindrome) > len(longest):\n                longest = palindrome\n\n    # Find the longest prefix of a string that comes before a palindrome\n    prefix = ''\n    for i in range(len(string) - len(longest) + 1, -1, -1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            break\n\n    return longest + reverse(prefix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    prefix = string[:-1]\n    suffix = string[-1:]\n    # Get palindrome:\n    palindrome = prefix + suffix\n    if palindrome == palindrome[::-1]:\n        return string\n\n    # Calculate the longest palindrome that begins with prefix:\n    longest = prefix[:-1]\n    for i in range(len(suffix)):\n        new = prefix[:-1-i]+suffix[:i]+suffix[i+1::-1]\n        if new == new[::-1]:\n            longest = new\n            break\n    return longest + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    res = ''\n    if len(string) == 0:\n        return string\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            res += string[i:]\n            if len(string) > i:\n                res += string[:i]\n                break\n    return res", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for prefix in string[::-1]:\n        if is_palindrome(prefix):\n            palindrome = longest_palindrome + prefix\n            if len(palindrome) > len(longest_palindrome):\n                longest_palindrome = palindrome\n    return longest_palindrome + string[:len(longest_palindrome)] + string[len(longest_palindrome)::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest palindrome\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n    # Append the reverse of prefix\n    return palindrome + string[:i][::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if len(string) < 2:\n        return string\n    suffix = ''\n    prefix = ''\n    for i in range(1, len(string)):\n        if is_palindrome(string[:i + 1]):\n            suffix += string[i:]\n            prefix = string[:i] + string[len(string) - len(suffix) - 1:]\n            break\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n\n    for i, c in enumerate(string):\n        if i == 0:\n            continue\n\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n\n    if longest_palindrome:\n        return longest_palindrome + string[:i] + string[-1::-1]\n    else:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    string_prefix = string[:-1]\n    if is_palindrome(string_prefix):\n        return string_prefix + string[-1:]\n\n    while True:\n        longest_postfix = ''\n        longest_postfix_length = 0\n        for letter in string[-1::-1]:\n            postfix = string_prefix + letter\n            postfix_length = len(postfix)\n            if is_palindrome(postfix):\n                longest_postfix_length = max(longest_postfix_length, postfix_length)\n                longest_postfix = postfix\n\n        if not longest_postfix or longest_postfix_length > len(string_prefix):\n            return string\n\n        string = longest_postfix + string_prefix[longest_postfix_length:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == \"\":\n        return string\n\n    longest_palindrome = ''\n    for i in range(len(string)):\n        palindrome = string[max(0, i - 1): i + 1]\n        if is_palindrome(palindrome):\n            if len(palindrome) > len(longest_palindrome):\n                longest_palindrome = palindrome\n    return longest_palindrome + string[max(0, len(string) - len(longest_palindrome) - 1): len(string)]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for c in string:\n        if is_palindrome(c + longest_palindrome):\n            longest_palindrome = c + longest_palindrome\n        else:\n            break\n    return longest_palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Step 1: Find the longest palindromic suffix of the input string\n    longest_palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Step 2: Find the reverse of the longest palindromic suffix.\n    # Get a substring of the input string starting at index longest_palindrome.rfind(string) and ending at index len(string)\n    #  and then reverse it.\n    reverse_of_palindrome = string[longest_palindrome.rfind(string): len(string)]\n    # Step 3: Append to the end of input string a reverse of the substring that precedes the palindromic suffix.\n    new_string = string + reverse_of_palindrome\n    return new_string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return string\n\n    longest_suffix = 0\n    for i, c in enumerate(string):\n        if c == string[-i - 1]:\n            suffix = string[i + 1: -i]\n            if len(suffix) > longest_suffix:\n                longest_suffix = len(suffix)\n        else:\n            break\n\n    return string[:i] + suffix + string[-(longest_suffix):][::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    def palindrome(string: str) -> str:\n        longest = 0\n        while True:\n            mid = len(string) // 2\n            if len(string[:mid]) >= len(string) - mid:\n                break\n            if is_palindrome(string[:mid]):\n                longest = mid\n                break\n        return string[:longest]\n\n    result = palindrome(string)\n    while result!= string:\n        result += palindrome(string[len(result):])\n        result += string[:len(result)]\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = ''\n    for i, char in enumerate(string):\n        if is_palindrome(string[:i + 1]):\n            longest_palindrome = string[i:]\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:] + string[:i]\n            break\n    if len(longest_palindrome) > len(string):\n        return longest_palindrome\n    return longest_palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest palindromic suffix\n    suffix = ''\n    while len(suffix) < len(string) and is_palindrome(suffix):\n        suffix += string[-1]\n    # Find the prefix before palindromic suffix\n    prefix = ''\n    while len(prefix) < len(string) - len(suffix) and string[-len(suffix)] == string[-len(suffix) - 1 - len(prefix)]:\n        prefix += string[-len(suffix) - 1 - len(prefix)]\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    len_string = len(string)\n    palindrome_suffix = ''\n    while len(palindrome_suffix) < len_string and is_palindrome(palindrome_suffix + string):\n        palindrome_suffix = string[-(len(palindrome_suffix) + 1):]\n    return palindrome_suffix + string[:-(len(palindrome_suffix) + 1)]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest palindromic suffix of the supplied string\n    palindromic_suffix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            palindromic_suffix = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    prefix = string[:i - 1] + string[i - 1:]\n    return palindromic_suffix + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n\n    palindrome = string[::-1]\n    prefix = string[0:len(palindrome)]\n    suffix = string[len(palindrome):len(string)]\n    return prefix + palindrome + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n    if len(palindromic_suffix) == 0:\n        return string\n\n    # Find the shortest palindromic prefix\n    palindromic_prefix = ''\n    for i in range(1, len(string)):\n        if is_palindrome(string[:i]):\n            palindromic_prefix = string[:i]\n            break\n    if len(palindromic_prefix) == 0:\n        return string\n\n    # Form the shortest palindrome that begins with supplied string\n    return palindromic_prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    l = len(string)\n    r = len(string)\n    while r:\n        if is_palindrome(string[l - 1:r + 1]):\n            return string[l - 1:r + 1] + string[:l - 1] + string[l - 1 - r:]\n        else:\n            r -= 1\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    longest_palindrome, longest_postfix = None, ''\n    for i in range(len(string)):\n        sub = string[max(0, i-1):i]\n        if is_palindrome(sub):\n            if longest_palindrome is None or len(sub) > len(longest_palindrome):\n                longest_palindrome = sub\n                longest_postfix = string[i:]\n    return longest_postfix + longest_palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n\n    longest_palindrome = \"\"\n    for index in range(len(string) + 1):\n        prefix = string[:index]\n        suffix = string[index:]\n        if is_palindrome(prefix) and is_palindrome(suffix):\n            if len(suffix) > len(longest_palindrome):\n                longest_palindrome = suffix\n    return longest_palindrome + string[-len(longest_palindrome):]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find longest palindrome\n    longest, pos = 0, 0\n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[:i+1]):\n            if len(string[:i+1]) > longest:\n                longest = len(string[:i+1])\n                pos = i\n    return string[:pos] + reverse(string[pos:])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    def is_longer(left: str, right: str):\n        return len(left) > len(right)\n\n    def find_longest(string: str):\n        prefix = ''\n        suffix = ''\n\n        while True:\n            # look for longest palindromic postfix\n            for i in range(len(string) - 1, -1, -1):\n                if string[i] == string[-1] and is_palindrome(string[i:i + 2]):\n                    suffix = string[i + 1:]\n                    break\n            # look for longest string prefix before palindromic postfix\n            for i in range(0, len(string) - len(suffix) + 1):\n                if is_palindrome(prefix + string[:i + len(suffix)]):\n                    prefix = string[:i + len(suffix)]\n                    break\n            if not prefix and not suffix:\n                return ''\n            elif is_longer(prefix, suffix):\n                suffix = ''\n            else:\n                prefix = ''\n\n    longest = find_longest(string)\n    if longest:\n        return string + longest[::-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    lps = []\n    for i in range(len(string) - 1):\n        if is_palindrome(string[i:len(string)]):\n            lps.append(string[i:len(string)])\n        else:\n            lps.append('')\n    return lps[-1] + string[:-1] + ''.join(lps[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    s = string\n    while not is_palindrome(s):\n        prefix = s[:-1]\n        postfix = s[-1:]\n        if is_palindrome(postfix):\n            s = prefix + postfix[::-1]\n    return s", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # sort the characters in a string\n    sorted_characters = sorted(string)\n\n    # Find the longest palindromic suffix\n    longest_suffix_length = 0\n    for i in range(len(sorted_characters)):\n        if is_palindrome(sorted_characters[i:]):\n            longest_suffix_length = i + 1\n            break\n\n    # Find the longest palindromic prefix\n    longest_prefix_length = 0\n    for i in range(len(string)):\n        if is_palindrome(string[0:i + 1]):\n            longest_prefix_length = len(string) - i - 1\n            break\n\n    # If longest palindromic prefix is equal to longest palindromic suffix, then the input string is a palindrome.\n    if longest_prefix_length == longest_suffix_length:\n        return string\n\n    return string[0: longest_prefix_length] + string[longest_suffix_length:][::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # 1. Find the longest palindromic postfix of the given string\n    palindrome = ''\n    prefix = ''\n    postfix = string\n    while postfix:\n        prefix += postfix[:]\n        palindrome = postfix[::-1]\n        postfix = postfix[::-1]\n\n    # 2. Concatenate the reverse of the prefix to the palindromic postfix.\n    # The result is the palindrome that begins with the given string.\n    return prefix + palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[i:]):\n            return string[:i + 1] + string[i:] + string[::-1]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return string\n    else:\n        postfix = ''\n        for i in range(len(string)):\n            if is_palindrome(string[:i + 1]):\n                postfix += string[i + 1:]\n                break\n        return string + postfix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    # Find palindromic suffix of supplied string\n    palindrome = string\n    for i in range(len(string)):\n        if string[i:i + 2]!= string[i + 1:i + 2]:\n            palindrome = string[:i + 1] + palindrome[2:]\n    # Find the longest prefix that is palindromic\n    prefix = palindrome\n    for i in range(len(string)):\n        if not is_palindrome(string[:i + 1]):\n            prefix = string[:i + 1]\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix, suffix = string, ''\n    while prefix!= suffix and is_palindrome(prefix):\n        prefix, suffix = prefix[:-1], prefix[1:]\n    return suffix + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    palindrome = ''\n\n    for c in string:\n        if is_palindrome(c):\n            palindrome += c\n\n    if len(palindrome) > len(string):\n        return palindrome + string[len(palindrome):]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find palindromic suffix\n    palindrome = is_palindrome(string)\n    last_index = string.rfind(palindrome)\n    if last_index!= -1:\n        palindrome = string[last_index:]\n    else:\n        palindrome = string\n\n    # Find palindromic prefix\n    prefix = string[:palindrome.rfind(palindrome)]\n    if not palindrome.startswith(prefix):\n        raise ValueError('Provided string is not a palindrome.')\n\n    # Make palindrome out of it\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    assert string\n    length = len(string)\n    palindrome_suffix = ''\n    i = 0\n    while i < length - 1 and is_palindrome(string[i:]):\n        palindrome_suffix += string[i]\n        i += 1\n    prefix = string[:i + 1]\n    if palindrome_suffix:\n        return prefix + palindrome_suffix + reverse(prefix)\n    else:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # find the longest palindrome that is the suffix of the original string\n    # and append the prefix of the string to the front of it\n    # to get a palindrome starting with the original string\n    postfix = max(\n        is_palindrome(string[i:]) for i in range(len(string) - 2, -1, -1)\n    )\n    prefix = string[:len(string) - len(postfix) - 1]\n    return prefix + postfix[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return string\n\n    longest_palindrome = len(string) * [0]\n    longest_palindrome[0] = 1\n\n    for i in range(1, len(string)):\n        if is_palindrome(string[:i + 1]):\n            longest_palindrome[0] += 1\n            longest_palindrome[longest_palindrome[0]] = i + 1\n\n    palindrome = longest_palindrome[0] * ['']\n    palindrome[longest_palindrome[0]] = string[longest_palindrome[0] - 1 :]\n\n    return ''.join(palindrome)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Find the palindromic suffix of the string and put it into reversed string.\n    suffix = ''.join([letter for letter in string[::-1] if letter in string])\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + string[::-1][0:len(string) - len(suffix)] + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return string\n    if string == string[::-1]:\n        return string\n    prefix = string[:len(string) // 2]\n    postfix = string[len(string) // 2:]\n    for i in range(len(postfix)):\n        if not is_palindrome(postfix[:i + 1]):\n            break\n    return prefix + postfix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    suffix = is_palindrome(string)\n    while not suffix:\n        # If we have not found palindromic suffix, try the next prefix\n        string = string[:-1]\n    prefix = string[:-suffix.__len__()]\n    return string + suffix[::-1] + prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if not string:\n        return string\n\n    long_palindrome = ''\n    while string and is_palindrome(string[:-1]):\n        long_palindrome += string[-1]\n        string = string[:-1]\n\n    return string + long_palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = ''\n    suffix = ''\n\n    longest = 0\n    for i in range(len(string) - 1):\n        if is_palindrome(string[i:(i + longest)]):\n            longest = i\n\n    prefix = string[0:(i + 1)]\n    suffix = string[i + longest:len(string)]\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic postfix\n    longest_palindrome = ''\n    palindrome_length = 1\n    for letter in string:\n        if is_palindrome(letter):\n            palindrome_length += 1\n            if palindrome_length > longest_palindrome:\n                longest_palindrome = letter\n\n    # Find the shortest prefix that comes before the palindrome\n    prefix_length = len(string) - len(longest_palindrome)\n    prefix = string[:prefix_length]\n    if prefix and is_palindrome(prefix):\n        prefix = prefix[::-1]\n    else:\n        prefix = ''\n\n    # Return the concatenation of the palindrome and reversed prefix\n    return longest_palindrome + prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # create new string to hold result\n    result = ''\n\n    # longest palindromic postfix\n    palindrome = is_palindrome(string)\n    longest = ''\n\n    # if string is a palindrome, we are done\n    if palindrome:\n        return string\n\n    # otherwise, we need to split the string into two parts: prefix and suffix\n    # find a longest palindrome in the suffix part\n    for i in range(len(string) - 1):\n        # suffix = string[i:]\n        suffix = string[len(string) - i - 1:]\n        palindrome = is_palindrome(suffix)\n        if palindrome and len(suffix) > len(longest):\n            longest = suffix\n\n    # no palindromic suffix in the string, we are done\n    if not palindrome:\n        return string\n\n    # create a result string\n    if longest:\n        result = longest + string[:len(longest)]\n        result += string[len(longest)::-1]\n    else:\n        result = string + string[::-1]\n\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    for char in string:\n        palindrome += char\n        suffix = palindrome[::-1]\n        palindrome = palindrome + suffix if is_palindrome(suffix) else ''\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    while string:\n        prefix, string = string[:-1], string[1:]\n        suffix, string = string[:-1], string[1:]\n        if prefix == suffix:\n            if len(prefix) > len(longest_palindrome):\n                longest_palindrome = prefix\n        elif prefix == suffix[::-1]:\n            longest_palindrome = prefix\n        else:\n            break\n    return longest_palindrome + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Base case: empty string\n    if string == '':\n        return string\n\n    # Find the longest palindrome in the remaining string\n    palindromic = ''\n    for i, c in enumerate(string):\n        palindromic += string[i:]\n        if is_palindrome(palindromic):\n            break\n    else:\n        return palindromic + string\n\n    # Reverse the prefix before the palindromic suffix\n    prefix = string[:i]\n\n    # Return the palindrome with the prefix\n    return prefix + palindromic[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest palindromic suffix\n    if len(string) < 2:\n        return string\n\n    suffix = string[-1:]\n    while suffix!= suffix[::-1]:\n        suffix = suffix[:-1]\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = string[:-1]\n    while prefix!= prefix[::-1]:\n        prefix = prefix[1:]\n\n    # Reverse the prefix and append it to the end of the string\n    return (prefix + suffix)[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    longest_palindrome = ''\n    longest_prefix = ''\n    for i, char in enumerate(string):\n        if char == string[-i - 1]:\n            if len(longest_palindrome) < len(string[i:]):\n                longest_palindrome = string[i:]\n                longest_prefix = string[:i]\n        elif len(longest_palindrome) == len(string[i:]):\n            longest_prefix += string[:i]\n    return longest_prefix + longest_palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    prefix, suffix = string[:-1], string[1:]\n    while not is_palindrome(suffix):\n        suffix = suffix[1:]\n        prefix = prefix + suffix[::-1]\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    for i in range(len(string)):\n        palindrome += string[i]\n        if is_palindrome(palindrome):\n            return string[:i] + palindrome[::-1] + string[i + 1:]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindromic = \"\"\n    palindromic_suffix = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            palindromic = palindromic + string[:i]\n    palindromic = palindromic + palindromic[::-1]\n    return palindromic + palindromic_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome_prefix = ''\n    postfix = ''\n    for char in string:\n        palindrome_prefix += char\n        postfix += char\n        if palindrome_prefix[::-1] == postfix:\n            break\n    palindrome = palindrome_prefix + postfix[::-1]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if not string:\n        return string\n\n    # Find the longest palindrome in string\n    p = string.rsplit(None, 1)[0]\n    max_len = len(p)\n    for i in range(1, len(string)):\n        if is_palindrome(string[:i]+string[i:]):\n            p = string[:i] + string[i:]\n            if len(p) > max_len:\n                max_len = len(p)\n\n    # Find the longest palindrome in reverse of the string\n    rev_p = string[::-1].rsplit(None, 1)[0]\n    max_rev_len = len(rev_p)\n    for i in range(1, len(string)-1):\n        if is_palindrome(string[::-1][:i]+string[::-1][i:]):\n            rev_p = string[::-1][:i] + string[::-1][i:]\n            if len(rev_p) > max_rev_len:\n                max_rev_len = len(rev_p)\n\n    # Find the shortest palindrome that begins with string\n    longest = max(max_len, max_rev_len)\n\n    return string + rev_p[:longest] + string[rev_p.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    if is_palindrome(string):\n        return string\n    longest_palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i + 1]):\n            longest_palindrome = string[i:] + longest_palindrome\n            string = string[:i + 1] + string[i + 1:]\n    return longest_palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Use a temp variable to hold the result. The result will be the argument\n    # of the next recursive call.\n    result = ''\n    # If the string is empty, the result is empty too.\n    if not string:\n        return result\n\n    # Get the prefix of the string.\n    prefix = string[:1]\n\n    # If the prefix is a palindrome, use it as the result. We know that string\n    # cannot be empty, so it will have at least one character.\n    if is_palindrome(prefix):\n        return prefix\n\n    # Get the palindromic suffix of the string. The suffix cannot be empty.\n    # The while loop will break as soon as it finds a palindromic suffix.\n    palindromic_suffix = ''\n    while not is_palindrome(string):\n        palindromic_suffix = string[::-1]\n        string = string[:-1]\n\n    # Put the palindromic suffix at the end of the prefix.\n    result = prefix + palindromic_suffix\n\n    # Call the function recursively. The result is the argument for the\n    # next call.\n    return make_palindrome(result)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest prefix of string that is palindrome\n    # This is done by maintaining a maximum length of prefix that is palindrome\n    max_palindrome_len = 0\n    for i in range(len(string) - 1, -1, -1):\n        for j in range(i, len(string) - 1, -1):\n            palindrome = string[i:j+1]\n            if palindrome == palindrome[::-1]:\n                if len(palindrome) > max_palindrome_len:\n                    max_palindrome_len = len(palindrome)\n\n    # Append the reverse of a prefix before the palindromic suffix\n    prefix = string[:max_palindrome_len]\n    return prefix + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n\n    def palindrome(string: str) -> bool:\n        \"\"\" Tests if the given string is a palindrome \"\"\"\n        return string == string[::-1]\n\n    for i in range(len(string) - 1, -1, -1):\n        prefix = string[:i]\n        suffix = string[i:]\n\n        if palindrome(suffix):\n            return prefix + suffix[::-1]\n\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if not string:\n        return string\n\n    longest_palindrome = None\n    for i in range(len(string)):\n        palindrome = string[:i] + string[i:]\n        if palindrome[::-1] == palindrome:\n            if (longest_palindrome is None) or (len(palindrome) > len(longest_palindrome)):\n                longest_palindrome = palindrome\n\n    return string[:-len(longest_palindrome)] + longest_palindrome[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = string[::-1]\n    if not is_palindrome(prefix):\n        prefix = string[:len(string)//2]\n    else:\n        prefix = prefix[::-1]\n    return prefix + string + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) <= 1:\n        return string\n    pre = ''\n    suf = ''\n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[:i + 1]):\n            pre = string[:i]\n            suf = string[i + 1:]\n            break\n    return pre + string[0] + suf[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    palindrome = string[::-1]\n    if palindrome == '':\n        return string\n    else:\n        prefix = string[:length//2]\n        postfix = string[length//2:]\n        # find the longest palindromic suffix\n        for i in range(len(postfix)-1, 0, -1):\n            if is_palindrome(postfix[:i+1]):\n                palindrome = palindrome[:i+1]\n                break\n        # add prefix to the end of the palindrome\n        return prefix + palindrome + postfix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    palindrome = string\n    while not palindrome[-1] == palindrome[0]:\n        palindrome = palindrome[1:]\n\n    if palindrome[-1]!= string[0]:\n        palindrome = palindrome + string[0]\n\n    # Find the longest palindromic suffix\n    for index in range(length - 1, 0, -1):\n        if is_palindrome(string[index:]):\n            palindrome = palindrome[:index + 1]\n            break\n\n    return palindrome + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    pos = 0\n    prefix = string[:pos]\n    suffix = string[pos:]\n    prefix_palindrome = is_palindrome(prefix)\n    suffix_palindrome = is_palindrome(suffix)\n    while prefix_palindrome and suffix_palindrome:\n        pos += 1\n        prefix = prefix[:pos]\n        suffix = suffix[pos:]\n        prefix_palindrome = is_palindrome(prefix)\n        suffix_palindrome = is_palindrome(suffix)\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    # find the longest palindrome ending with the string\n    for i in range(len(string) - 1, 0, -1):\n        palindrome = string[i:] + string[:i]\n        if is_palindrome(palindrome):\n            return palindrome\n    # if nothing found - return a string itself\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest palindrome\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        substring = string[i:]\n        if is_palindrome(substring):\n            if len(substring) > len(longest_palindrome):\n                longest_palindrome = substring\n    # Find the reverse of prefix\n    prefix = \"\"\n    for i in range(len(string)):\n        substring = string[:i]\n        if is_palindrome(substring):\n            prefix = substring + prefix\n    # Append the prefix to the palindrome\n    return longest_palindrome + prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    suffix = len(string) - 1\n    while not is_palindrome(string[::-1]):\n        suffix -= 1\n    prefix = 0\n    while string[prefix] == string[prefix + 1]:\n        prefix += 1\n    return string[:prefix] + string[prefix:-1] + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    palindromic = is_palindrome(string)\n    length = len(string)\n    suffix_length = -1\n    suffix = ''\n    prefix = string\n    while palindromic and length - suffix_length > 0:\n        suffix_length += 1\n        suffix += string[length - suffix_length]\n        prefix = string[:length - suffix_length]\n        palindromic = is_palindrome(prefix + suffix)\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[:i]) and is_palindrome(string[i:]):\n            return string[:i] + string[len(string) - i:]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    words = string.split()\n\n    for prefix in reversed(words):\n        suffix = ''.join(w for w in words if w!= prefix)\n        palindrome = prefix + suffix\n        if is_palindrome(palindrome):\n            return string + palindrome[::-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    prefix = ''\n    suffix = ''\n    for char in string:\n        if char in string[::-1]:\n            suffix = suffix + char\n            if len(suffix) >= len(string) / 2:\n                break\n        prefix = prefix + char\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = False\n    n = len(string)\n    for i in range(1, n):\n        if is_palindrome(string[:i]):\n            palindrome = True\n            string = string[:i] + string[len(string) - 1 - i:]\n\n    if not palindrome:\n        return string\n\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    assert len(string) > 1\n\n    left = 0\n    right = len(string) - 1\n\n    while left < right:\n        # Find palindromic suffix in the middle of the string\n        suffix = string[left:right + 1]\n        suffix = suffix[::-1]\n        if is_palindrome(suffix):\n            # Find palindromic prefix in the front of the string\n            prefix = string[:left]\n            prefix = prefix[::-1]\n            if is_palindrome(prefix):\n                # Create a new palindrome by concatenating the prefix and the suffix\n                result = string[:left] + suffix + prefix\n                if result == result:\n                    return result\n        # Move left and right to the middle of palindromic suffix and prefix\n        if is_palindrome(string[left:right + 1]):\n            left += 1\n        else:\n            right -= 1\n\n    # If the string is not a palindrome, use a string itself\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    candidate = ''\n    while True:\n        candidate += string[0]\n        if is_palindrome(candidate):\n            return candidate\n        string = string[1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    words = string.split(' ')\n    prefix = ''\n    for word in words[:-1]:\n        suffix = word +'' + words[-1]\n        if is_palindrome(suffix):\n            prefix += word +''\n    return prefix + words[-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = is_palindrome(string)\n    if not palindrome:\n        return string\n    # start from left and right to find longest palindromic suffix and prefix\n    lps = 0\n    rps = len(string)\n    while lps < rps and is_palindrome(string[lps:rps]):\n        lps = lps + 1\n        rps = rps - 1\n    # if palindrome is of size 1, we are done\n    if lps == rps:\n        return string\n    return string[:lps] + string[-rps:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # TODO: Do not use regex, use string slices instead.\n    palindrome_prefix = is_palindrome(string[:-1]) and string[:-1] or None\n    palindrome_suffix = is_palindrome(string[1:]) and string[1:] or None\n\n    if palindrome_prefix:\n        return palindrome_prefix + palindrome_suffix[::-1]\n    else:\n        return palindrome_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = string[:len(string) // 2]\n    suffix = string[len(string) // 2:]\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # if string is empty, return empty string\n    if len(string) == 0:\n        return string\n\n    # if string is palindrome, return it\n    if is_palindrome(string):\n        return string\n\n    # find the longest palindromic prefix\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            prefix = string[i:]\n            break\n\n    # find the longest palindromic suffix\n    suffix = ''\n    for i in range(len(string) - len(prefix) - 1, -1, -1):\n        if is_palindrome(string[i:-1]):\n            suffix = string[i:-1]\n            break\n\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string + (string[:string.rfind(string[::-1])] + string[string.rfind(string[::-1]) + 1:])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return string\n    if len(string) == 1:\n        return string\n    postfix = string[1:]\n    prefix = string[:-1]\n    if is_palindrome(postfix):\n        return prefix + postfix\n    else:\n        return make_palindrome(prefix) + postfix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    p = ''\n    s = string\n    while p and s:\n        postfix = s[p:]\n        if is_palindrome(postfix):\n            p += 1\n        s = s[:p]\n    return s + postfix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    postfix = ''\n    prefix = ''\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            postfix += string[i:]\n            prefix = string[:i] + prefix[::-1]\n            break\n    return prefix + postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    n = len(string)\n    if n == 0:\n        return ''\n    if n == 1:\n        return string\n    return string[::-1] + make_palindrome(string[2:n-2])[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    longest_suffix = ''\n    for i in range(len(string) - 2, -1, -1):\n        if is_palindrome(string[i:i + 2]):\n            longest_suffix = string[i:i + 2]\n            break\n    return string + reverse(string[:i]) + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = ''\n    postfix = ''\n    while string and string[0] in string[1:]:\n        prefix += string[0]\n        postfix += string[1:]\n        string = string[2:]\n    if not string:\n        return string\n    return prefix + string[0] + postfix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    suffix_length = len(string) - 1\n    while suffix_length > 1 and not is_palindrome(string[-suffix_length:]):\n        suffix_length -= 1\n    if suffix_length < 1:\n        return string\n    palindrome = string[-suffix_length:]\n    prefix = string[:-suffix_length]\n    return prefix + palindrome[::-1] + prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    #find the longest palindromic postfix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i]\n\n    #otherwise we need to do nothing\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    len_old = len(string)\n    while True:\n        # Find the longest palindromic postfix\n        _, palindrome = max((palindrome, len(prefix)) for prefix in string[:-1] for palindrome in is_palindrome(prefix))\n        # Append the reverse of the string prefix that comes before the palindrome\n        string += string[:palindrome].lower()[::-1]\n        # If we didn't change the length of the string\n        if len_old == len(string):\n            break\n        len_old = len(string)\n\n    return string\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # To be able to share code between two recursive calls, we split the string into three segments.\n    # First is a current palindromic suffix, second is the reverse of the prefix, and the third is the rest of the string.\n    # Example: catt -> tccat -> tcatc -> tcat -> tcat -> tcat -> tcat -> tcat -> tcat\n    # the reverse of prefix is tca -> tca -> tca -> tca -> tca -> tca\n    # so we can recursively call this function with tcat as a starting point\n    # and prefix reversed to get palindrome catt\n    current, prefix, rest = string[0], string[1:], string[2:]\n    if current == rest[::-1]:\n        # if the suffix is a palindrome, the whole string is a palindrome\n        return string\n    elif prefix == rest:\n        # if the prefix is a palindrome, and the rest of the string is the suffix,\n        # we can safely reverse the prefix, and append the rest of the string\n        return prefix + rest[::-1]\n    else:\n        # we have a problem, because the prefix is not a palindrome.", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    current_prefix = ''\n    for char in string:\n        if is_palindrome(current_prefix + char):\n            longest_palindrome += char\n        else:\n            current_prefix += char\n    return longest_palindrome + current_prefix[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Reverse the string\n    rev = string[::-1]\n\n    # Calculate the prefix length\n    prefix_len = len(string) - len(rev) + 1\n\n    # The longest palindromic suffix\n    longest_palindrome = ''\n\n    # Iterate over all palindromic prefixes of the string\n    for palindrome in reversed(rev):\n        # Take the longest palindromic prefix and append it to the original string\n        new_string = string + palindrome\n\n        # Check if the length of the palindrome is longer than the longest so far\n        if len(new_string) > len(longest_palindrome):\n            longest_palindrome = new_string\n\n    # Append the reverse of the prefix\n    return longest_palindrome + rev[:prefix_len]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    palindrome_suffix = None\n    palindrome_prefix = None\n    if length == 0:\n        return string\n\n    if is_palindrome(string):\n        return string\n\n    # Find the longest palindromic suffix\n    for i in range(length):\n        if is_palindrome(string[-i:]):\n            palindrome_suffix = string[-i:]\n\n    # Find the longest palindromic prefix\n    for i in range(length):\n        if is_palindrome(string[0:i+1]):\n            palindrome_prefix = string[0:i+1]\n\n    if palindrome_suffix is None or palindrome_prefix is None:\n        return string\n\n    # Concatenate the palindrome prefix and the reverse of palindrome suffix\n    return palindrome_prefix + palindrome_suffix[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = []\n    while len(string) > 1:\n        if is_palindrome(string[:-1]):\n            palindrome.append(string[:-1])\n            string = string[-1:]\n        else:\n            break\n    if palindrome:\n        palindrome.append(string)\n    return ''.join(palindrome)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    palindrome = ''\n    for i in range(len(string)):\n        if string[i] not in string[i + 1:]:\n            palindrome = palindrome + string[i] + string[::-1]\n        else:\n            break\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = string\n    for i in range(len(string)):\n        string = string[i:] + string[::-1]\n        if is_palindrome(string):\n            return prefix + string\n    return prefix + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n\n    prefix = ''\n    suffix = string[::-1]\n    longest_prefix = len(string) - len(suffix)\n    while longest_prefix > 0:\n        if is_palindrome(prefix + suffix):\n            longest_prefix -= 1\n            break\n        else:\n            prefix += string[-longest_prefix]\n\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    length = len(string)\n    if not length:\n        return string\n    prefix = string[:length // 2]\n    suffix = string[-length // 2:]\n    new_suffix = ''\n    for i in range(length // 2, length):\n        new_suffix += string[-length // 2 + i]\n        new_suffix += string[-length // 2 - i]\n    new_suffix = new_suffix[::-1]\n    new_prefix = prefix[::-1]\n    return new_prefix + new_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) <= 1:\n        return string\n    palindromic_suffix = is_palindrome(string[1:])\n    if not palindromic_suffix:\n        return string\n    palindromic_prefix = string[:len(string) - len(string[1:])]\n    return palindromic_prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    for i in range(len(string)):\n        palindrome += string[i]\n        if is_palindrome(string[:i] + string[i:]):\n            return palindrome + string[len(string) - i - 1:]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    lps = []\n    for i, c in enumerate(string):\n        if c in 'atac':\n            lps.append(c)\n        if is_palindrome(''.join(lps)):\n            return ''.join(lps) + string[i:] + string[:i]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = ''\n    suffix = ''\n    for ch in string:\n        if ch in string[::-1]:\n            prefix += ch\n            suffix = string[::-1]\n        else:\n            break\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    stack = [string[:-1]]  # stack to keep track of prefix to reverse\n    while stack:\n        prefix = stack.pop()\n        if is_palindrome(prefix):\n            return prefix + string[-1:]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Find longest palindromic postfix\n    max_length = len(string)\n    if is_palindrome(string):\n        return string\n    if max_length <= 2:\n        return string\n    for i in range(max_length):\n        if is_palindrome(string[:i + 1]):\n            max_length = i + 1\n    # Add reverse of the prefix before the longest palindromic suffix\n    return string[:max_length - 1] + string[max_length - 1:][::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    longest_palindrome = ''\n    longest_palindrome_len = 0\n    for i in range(len(string)):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            palindrome_len = len(suffix)\n            if palindrome_len > longest_palindrome_len:\n                longest_palindrome = suffix\n                longest_palindrome_len = palindrome_len\n    prefix = string[:i]\n    return prefix + longest_palindrome + string[len(prefix) + longest_palindrome_len - 1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    is_palindrome = is_palindrome\n    return ''.join(\n        is_palindrome(sub + s[-len:]) for sub, s in zip(string[::-1], string[:-1]) if s\n    )", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use stack to implement\n    # TODO: Use", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 1:\n        return string\n\n    prefix = string[:-1]\n    postfix = string[-1]\n    suffix = make_palindrome(string[1:-1])\n\n    if prefix == postfix[::-1]:\n        return prefix + suffix\n    else:\n        return postfix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Starts with a palindrome\n    if is_palindrome(string):\n        return string\n\n    # Find the palindromic suffix\n    palindromic_suffix = find_palindromic_suffix(string)\n    if palindromic_suffix is None:\n        return string\n\n    # Find the longest prefix that can be reversed\n    longest_prefix = find_reverse_prefix(string, len(palindromic_suffix))\n    if longest_prefix is None:\n        return string\n\n    return palindromic_suffix + longest_prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if not is_palindrome(string):\n        return string\n    prefix = string[:string.rfind(string[-1])]\n    suffix = string[string.rfind(string[-1]):]\n    postfix = suffix[::-1]\n    return prefix + postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = string\n    suffix = ''\n    if len(string) > 0:\n        while not is_palindrome(string[::-1]):\n            suffix = string[-1:]\n            string = string[:-1]\n        prefix = string\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    prefix = 0\n    palindrome = 0\n    suffix = len(string) - 1\n\n    while prefix < len(string) and palindrome < len(string) and suffix > 0:\n        if string[prefix] == string[suffix]:\n            palindrome += 1\n            suffix -= 1\n        else:\n            prefix += 1\n    suffix -= 1\n    return string[:prefix] + string[palindrome:len(string) - 1] + string[suffix:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return string\n\n    longest_palindrome = ''\n    for i in range(len(string) - 1):\n        if is_palindrome(string[i:len(string)]):\n            longest_palindrome = string[i:len(string)]\n            break\n    return longest_palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = ''\n    for char in string:\n        if is_palindrome(palindrome + char):\n            palindrome += char\n        else:\n            break\n    return palindrome + string[len(palindrome):] + string[:len(palindrome)]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return string\n\n    # Find longest palindromic suffix\n    length = 0\n    suffix = ''\n    for i, c in enumerate(string):\n        if is_palindrome(string[i:]):\n            suffix = string[i + 1:]\n            length = i + 1\n            break\n\n    # Find longest prefix that has to be reversed\n    prefix = string[0:length]\n    while not is_palindrome(prefix):\n        prefix = prefix[:-1]\n    length += 1\n\n    # Reverse the prefix, concatenate with the suffix and return the result\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    n = len(string)\n    while n > 1:\n        postfix = string[n - 1:]\n        prefix = string[:n - 1]\n        if is_palindrome(postfix):\n            string += prefix[::-1]\n            return string\n        n -= 1\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    palindrome = string\n    while not is_palindrome(palindrome):\n        palindrome = palindrome[1:]\n    prefix = string[:len(palindrome)]\n    suffix = palindrome[::-1]\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    palindrome = is_palindrome(string)\n    prefix = string[:len(string) // 2]\n    suffix = string[len(string) // 2:]\n    for i in range(len(prefix) + 1):\n        suffix = suffix[:-i] + prefix[-i:]\n        if palindrome(suffix):\n            return string[:-i] + suffix[::-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    postfix = is_palindrome(string)\n    prefix = string[:postfix.index(postfix)]\n\n    return prefix + postfix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    length = len(string)\n    suffix = string[-length//2:]\n    prefix = string[:length//2]\n    reverse_prefix = prefix[::-1]\n    if is_palindrome(suffix):\n        return string + reverse_prefix\n    return make_palindrome(suffix) + reverse_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return string\n\n    longest = ''\n    for i in range(len(string) - 1):\n        if is_palindrome(string[i:]):\n            longest = string[i:]\n            break\n\n    if longest == '':\n        return string\n\n    return longest + string[:len(string) - len(longest)] + longest[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = list(string)\n    if not string:\n        return string\n    longest = 0\n    for i in range(1, len(string) + 1):\n        palindrome = string[i:] + string[:i]\n        if is_palindrome(palindrome):\n            if len(palindrome) > longest:\n                longest = len(palindrome)\n                new_string = palindrome + string[:i]\n                string = new_string[::-1] + string[i:]\n                break\n    return ''.join(string)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    def _is_valid_palindrome(string: str) -> bool:\n        \"\"\" Check if string is palindrome \"\"\"\n        return is_palindrome(string)\n\n    def _append_palindrome(string: str) -> str:\n        \"\"\" Check if string is palindrome \"\"\"\n        return string + string[::-1]\n\n    def _find_longest_palindrome(string: str) -> str:\n        \"\"\" Find the longest palindrome that starts at the end of the supplied string.\n        Find the longest palindromic postfix of the supplied string. \"\"\"\n        current_position = len(string)\n        longest_palindrome = ''\n        while current_position > 0 and _is_valid_palindrome(string[-current_position:]):\n            current_position -= 1\n            longest_palindrome += string[-current_position]\n        return longest_palindrome\n\n    longest_palindrome = _find_longest_palindrome(string)\n    return _append_palindrome(longest_palindrome)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return string\n\n    prefix = string[:-1]\n    palindrome = string[::-1]\n    suffix = string[1:]\n    while palindrome!= prefix + suffix:\n        prefix = prefix[:-1]\n        palindrome = palindrome[::-1]\n        suffix = suffix[1:]\n\n    return prefix + palindrome + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = \"\"\n    postfix = string\n    while len(postfix) > len(prefix) and is_palindrome(postfix):\n        prefix = prefix + string[:len(postfix) - len(prefix)]\n        postfix = postfix[len(postfix) - len(prefix):]\n    return prefix + postfix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest palindromic suffix\n    longest_palindromic_suffix = ''\n    for suffix in string.split(''):\n        if is_palindrome(suffix):\n            if len(longest_palindromic_suffix) < len(suffix):\n                longest_palindromic_suffix = suffix\n\n    # Find the longest string prefix that comes before the palindromic suffix\n    longest_prefix = string\n    for i in range(len(string) - len(longest_palindromic_suffix)):\n        if longest_palindromic_suffix == string[i:i + len(longest_palindromic_suffix)]:\n            longest_prefix = string[:i + 1]\n            break\n\n    # Concatenate a reverse of the longest string prefix that comes before the palindromic suffix to the palindromic suffix\n    return longest_prefix + longest_palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    palindrome = ''\n    length = len(string)\n    for i in range(length):\n        if is_palindrome(string[:i + 1]):\n            palindrome = palindrome + string[i] + string[i + 1:]\n            return palindrome + string[:i + 1][::-1]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return string\n    palindromic_postfix = ''\n    prefix = ''\n    for index in range(len(string)):\n        if is_palindrome(string[index:]):\n            palindromic_postfix += string[index:]\n        else:\n            break\n        prefix += string[:index]\n    return prefix + string[::-1] + palindromic_postfix\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if not is_palindrome(string):\n        return string\n    palindromic_part = string[::-1]\n    non_palindromic_part = string[:len(palindromic_part)]\n    return non_palindromic_part + palindromic_part[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    prefix = string\n\n    while len(palindrome) <= len(prefix):\n        palindrome = is_palindrome(prefix) and palindrome or prefix[:-1]\n        prefix = prefix[len(palindrome):]\n    palindrome += prefix[::-1]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindromic_postfix = ''\n    longest_postfix = ''\n    for char in string:\n        if is_palindrome(palindromic_postfix + char):\n            palindromic_postfix += char\n        else:\n            break\n    longest_postfix = palindromic_postfix[::-1]\n    return longest_postfix + palindromic_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest = max(palindrome.length for palindrome in reversed(list(make_palindromes(string))))\n    if longest:\n        return string + string[:-longest]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    suffix = ''\n    prefix = ''\n\n    # find the longest palindrome\n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[i:i + 2]):\n            suffix = string[i:i + 2]\n            break\n\n    # find the longest palindrome\n    for i in range(1, len(string)):\n        if is_palindrome(string[:i - 1] + string[i:i + 2] + string[i + 2:]):\n            prefix = string[:i - 1] + string[i:i + 2] + string[i + 2:]\n            break\n\n    return prefix + suffix[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindromic_suffix = is_palindrome(string[::-1])\n    prefix = string[:len(string) - len(palindromic_suffix)]\n    return prefix + palindromic_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    longest_palindrome = ''\n    prefix = ''\n    for character in string:\n        if is_palindrome(prefix + character):\n            if len(longest_palindrome) < len(prefix + character):\n                longest_palindrome = prefix + character\n            prefix = ''\n        else:\n            prefix += character\n    result = longest_palindrome + string[len(prefix):]\n    return result[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    prefix, suffix = string[0], string[1:]\n    while not suffix or not is_palindrome(suffix):\n        if not prefix:\n            return ''\n        prefix, suffix = prefix[1:], suffix[1:]\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.upper()\n    string = ''.join(x for x in string if x in string) # Eliminate all letters that are not in the string\n    palindrome = ''\n    for x in string:\n        if is_palindrome(x):\n            palindrome = palindrome + x\n        else:\n            palindrome = palindrome + x + x\n    return palindrome + string[len(palindrome):] + string[:len(palindrome)]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindrome in the string\n    palindrome = ''\n    for i in range(len(string) + 1):\n        if is_palindrome(string[:i]):\n            palindrome = string[:i]\n            break\n\n    # Append reverse of the string prefix that comes before the palindromic suffix\n    return palindrome + string[palindrome.rfind(string[::-1]):]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) <= 1:\n        return string\n\n    prefix = string[:-1]\n    suffix = string[::-1]\n    palindrome = prefix + suffix\n\n    # Find longest palindrome suffix\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:len(string) - 1]):\n            palindrome = string[i:len(string) - 1] + palindrome\n            break\n\n    return palindrome + string[len(string) - len(palindrome):]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i] + string[i+1:]):\n            longest_palindrome = string[:i] + string[i+1:]\n            break\n    return longest_palindrome + string[len(longest_palindrome):]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n\n    length = len(string)\n    palindrome = False\n    for i in range(length):\n        prefix = string[:i + 1]\n        suffix = string[i + 1:]\n        if is_palindrome(suffix):\n            if palindrome:\n                if len(prefix) > len(string[:i + 1]):\n                    string = prefix + reverse(suffix)[::-1]\n                else:\n                    string = prefix + reverse(suffix)[::-1]\n            else:\n                string = prefix + reverse(suffix)[::-1]\n            palindrome = True\n\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    n = len(string)\n    if n == 1:\n        return string\n    if n <= 1:\n        return ''\n\n    # Find longest palindromic suffix\n    ps = string\n    for i in range(n-1):\n        if not is_palindrome(string[i-n:i+1]):\n            break\n        ps = string[i-n:i+1]\n    ps = ps[::-1]  # reverse the suffix\n\n    # Find the longest prefix that comes before palindromic suffix\n    prefix = string\n    for i in range(n-1):\n        if not is_palindrome(string[:i+1]):\n            break\n        prefix = string[:i+1]\n    new_string = prefix + ps\n    if new_string.startswith(string):\n        return new_string\n    else:\n        return make_palindrome(new_string)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    if is_palindrome(string):\n        return string\n    postfix = string[::-1]\n    prefix = string[:-1]\n    if len(postfix) > len(prefix):\n        postfix = postfix[:-1]\n    return prefix + postfix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    for char in string:\n        if is_palindrome(char):\n            result += char\n        else:\n            result += char[::-1]\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    new_string = string\n    palindrome = ''\n    while new_string[len(palindrome):]!= palindrome[::-1]:\n        palindrome = ''\n        if new_string[-1] in 'abcd':\n            palindrome += new_string[-1]\n        new_string = new_string[:-1]\n\n    new_string += palindrome[::-1]\n    return new_string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Find the longest palindromic postfix\n    # In this case, this is a palindromic suffix\n    p = find_palindrome(string, len(string) - 1, 0, len(string) - 1, 0)\n    if p == -1:\n        # No palindrome found\n        return string\n\n    # Append the reverse of the prefix before the palindromic suffix\n    return string[:p + 1] + string[p + 1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    postfix = string[::-1]\n    for prefix in string:\n        if postfix == prefix:\n            return prefix + postfix\n        postfix = postfix[::-1]\n    return postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    current_len = len(string)\n    max_pal = ''\n    last_pal = ''\n    for i, char in enumerate(string):\n        current_pal = string[i:]\n        if is_palindrome(current_pal):\n            if len(last_pal) < len(current_pal):\n                last_pal = current_pal\n        else:\n            continue\n        if len(current_pal) > len(max_pal):\n            max_pal = current_pal\n        if len(current_pal) == current_len:\n            break\n    return max_pal + string[:i + 1] + string[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Base case\n    if not string:\n        return string\n\n    # If we have a palindrome then return it\n    if is_palindrome(string):\n        return string\n\n    # Find the longest palindromic postfix\n    prefix, suffix = string[:-1], string[::-1]\n    for i in range(len(suffix) - 1):\n        if suffix[i:i + 2] == suffix[i + 1:i + 2]:\n            prefix = prefix[:i + 1] + suffix[i:i + 2]\n        else:\n            break\n\n    # Find the longest palindromic prefix\n    prefix, suffix = prefix, string[::-1]\n    for i in range(len(suffix) - 1):\n        if suffix[:i] == prefix[::-1]:\n            suffix = suffix[::-1] + prefix[::-1][:i]\n        else:\n            break\n\n    # Return the result\n    return prefix + suffix\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = ''\n    suffix = ''\n    while len(string) > 0:\n        # Find the longest postfix that is a palindrome\n        palindrome = is_palindrome(string)\n        if palindrome:\n            suffix = string[len(string) - len(palindrome):]\n            break\n        # Find the longest prefix that is a palindrome\n        palindrome = is_palindrome(string[:len(string) - len(string)])\n        if palindrome:\n            prefix = string[:len(string) - len(palindrome)]\n            break\n        string = string[1:]\n    return prefix + suffix[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindromic_postfix = 0\n    longest_palindromic_postfix_len = 0\n    pre_len = 0\n    current_postfix = ''\n    current_postfix_len = 0\n    for i in range(len(string)):\n        if not is_palindrome(string[i:len(string)]):\n            longest_palindromic_postfix_len = current_postfix_len\n            longest_palindromic_postfix = current_postfix\n            pre_len = i\n            current_postfix = ''\n            current_postfix_len = 0\n        else:\n            current_postfix += string[i]\n            current_postfix_len += 1\n\n    return longest_palindromic_postfix + string[pre_len::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix += string[i]\n            break\n\n    # Find the string prefix that comes before the palindromic suffix\n    prefix = string[:len(string) - len(palindromic_suffix)]\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    if not is_palindrome(string):\n        return string\n\n    for i in range(len(string) - 1, -1, -1):\n        postfix = string[i:]\n        if is_palindrome(postfix):\n            if is_palindrome(string[:i]):\n                return string + string[::-1][i:]\n            else:\n                return string + postfix\n\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindrome that ends at current position in string.\n    palindrome = string\n    for i in range(len(string)):\n        palindrome = palindrome[:i + 1]\n        if palindrome == palindrome[::-1]:\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    prefix = string[:i + 1]\n    suffix = palindrome[::-1]\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if not string:\n        return ''\n\n    elif len(string) <= 1:\n        return string\n\n    elif is_palindrome(string):\n        return string\n\n    else:\n        postfix = ''\n\n        for i in range(len(string)):\n            if not is_palindrome(string[:i + 1]):\n                break\n            postfix += string[i]\n\n        prefix = string[:i]\n        suffix = postfix[::-1]\n\n        return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # find longest palindrome (a^p^b)\n    palindrome = ''\n    palindrome_parts = []\n    for i in range(len(string) + 1):\n        sub = string[:i]\n        if is_palindrome(sub):\n            palindrome = string[:i]\n            palindrome_parts.append(i)\n            if len(palindrome_parts) > 1:\n                palindrome_parts.pop(0)\n\n    # append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return palindrome + string[-palindrome_parts[-1]:]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = []\n    for i in range(len(string)):\n        palindrome.append(string[i::-1])\n    palindrome.append(string)\n\n    for i in range(len(string)):\n        if string[i]!= palindrome[-1]:\n            break\n        palindrome.append(string[i::-1])\n    return ''.join(palindrome)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest palindromic postfix of the string\n    palindrome = ''\n    for i, c in enumerate(string):\n        if string[i:i + len(string) // 2] == string[i + len(string) // 2:]:\n            palindrome += c\n\n    # Find the longest prefix of the string that does not start with a palindromic postfix\n    prefix = ''\n    for i in range(len(string) - len(palindrome) + 1, 0, -1):\n        if not palindrome.startswith(string[i - 1:]):\n            prefix = string[i - 1:] + prefix\n            break\n\n    return prefix + palindrome[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Start with empty string\n    palindrome = ''\n    prefix = ''\n    # Find the longest palindromic suffix\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:-i + 1]):\n            palindrome = string[:-i + 1]\n            break\n    # Find the string prefix\n    if palindrome!= '':\n        prefix = string[:-palindrome.find(palindrome[-1]) - 1]\n    # Append to the end of the string reverse of the prefix\n    palindrome += prefix[::-1]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find palindromic suffix\n    suffix = is_palindrome(string[::-1])\n    if suffix is None:\n        return string\n\n    # Find palindromic prefix\n    prefix = string[0:-len(suffix)]\n\n    # Truncate the prefix to the longest palindromic substring\n    max_prefix = max(prefix, prefix[::-1])\n    max_prefix_length = len(max_prefix)\n\n    # Append to the end of the string reverse of the string prefix\n    return string + max_prefix[::-1][-max_prefix_length:]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 1:\n        return string\n    else:\n        prefix = string[:-1]\n        postfix = string[1:]\n        suffix = is_palindrome(postfix)\n\n        if not suffix:\n            return make_palindrome(prefix) + postfix[::-1]\n        else:\n            return prefix + make_palindrome(postfix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    prefix = ''\n    suffix = string[::-1]\n    longest_postfix = ''\n    for i in range(len(string) - 1):\n        if is_palindrome(prefix + suffix[:i] + suffix[i + 1:]):\n            longest_postfix = prefix + suffix[:i] + suffix[i + 1:]\n            if len(longest_postfix) > len(suffix):\n                suffix = longest_postfix\n    return string + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    postfix = ''\n\n    for i, char in enumerate(string):\n        if i > len(palindrome) - 1 or i < len(string) - 1:\n            continue\n\n        if is_palindrome(palindrome + postfix + string[i + 1:]):\n            palindrome = palindrome + postfix + string[i + 1:]\n        else:\n            postfix = postfix + string[i]\n\n    return palindrome + postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    def is_palindrome(string: str) -> bool:\n        return string == string[::-1]\n\n    def is_palindromic(string: str) -> bool:\n        prefix = string[:string.find('l')]\n        if is_palindrome(prefix):\n            return True\n\n        return is_palindrome(prefix + string[string.find('l') + 1:])\n\n    def get_palindromic_suffix(string: str) -> str:\n        if is_palindromic(string):\n            return string[string.rfind(string[-1]):]\n\n        return string[string.rfind(string[-1]):] + string[:string.rfind(string[-1])]\n\n    def make_palindrome(string: str) -> str:\n        if len(string) <= 2:\n            return string\n\n        if not is_palindromic(string):\n            return get_palindromic_suffix(string) + make_palindrome(string[:string.rfind(string[-1])])\n\n        return string\n\n    if len(string) == 1:\n        return string\n\n    if len(string) == 2:\n        if is_palindrome(string):", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find longest palindromic suffix\n    palindrome = is_palindrome(string)\n    while palindrome:\n        palindrome = is_palindrome(string[::-1])\n        string = string[::-1]\n    # Find the shortest palindrome prefix\n    if string[0] == string[-1] and is_palindrome(string):\n        return string\n    return string + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest palindromic suffix\n    length = len(string)\n    palindromic_suffix = string[-length:]\n    # Find the longest prefix that can be reversed and appended to the end\n    # such that string becomes a palindrome\n    longest_prefix = ''\n    for i in range(length):\n        prefix = string[:length-i]\n        if is_palindrome(prefix + palindromic_suffix):\n            longest_prefix = prefix + palindromic_suffix\n            break\n    # Combine prefix and palindromic suffix\n    return longest_prefix + reverse(string[-len(longest_prefix):])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return string\n\n    # Find the longest palindromic suffix.\n    while True:\n        s = string[::-1]\n        if s == string:\n            break\n        string = string[len(s):]\n\n    # Find the longest prefix that comes before the palindromic suffix.\n    if len(string) == 0:\n        return string\n\n    l = len(string)\n    while string[l]!= string[0]:\n        l -= 1\n    prefix = string[:l]\n\n    return prefix + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    def calc_length(string: str) -> int:\n        \"\"\" Calculate length of palindromic suffix starting from the given string \"\"\"\n        return len(is_palindrome(string))\n\n    def find_palindrome(string: str) -> str:\n        \"\"\" Find palindrome in given string \"\"\"\n        longest = calc_length(string)\n        while longest > 1:\n            s = string[0:-longest]\n            r = s[::-1]\n            if string == r:\n                return string[-longest:] + r\n            longest -= 1\n\n    return find_palindrome(string) + calc_length(string) * string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    longest = 1\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i + 1]):\n            longest = i + 1\n            palindromic_suffix = string[longest:]\n            break\n\n    return string + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest = 0\n    for i in range(len(string)-1):\n        if is_palindrome(string[i:i+2]):\n            if len(string[i:i+2]) > longest:\n                longest = len(string[i:i+2])\n            string = string[:i+1] + string[i+1+longest:]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    i = len(string) - 1\n    while i > 0:\n        if string[i - 1] == string[i]:\n            palindrome += string[i]\n            i -= 1\n        else:\n            break\n    return palindrome + string[:i][::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome_suffix = is_palindrome(string)\n    if palindrome_suffix:\n        return string[::-1]\n    else:\n        return string + make_palindrome(string[:len(string) - 1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    else:\n        l = len(string)\n        prefix = string[:l//2]\n        suffix = string[l//2:]\n        if is_palindrome(prefix) and is_palindrome(suffix):\n            return (prefix + suffix)[::-1]\n        else:\n            return make_palindrome(string[::-1]) + (string[:l//2][::-1] if is_palindrome(string[:l//2]) else string[l//2:])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    try:\n        if len(string) <= 1:\n            return string\n        else:\n            return string + make_palindrome(string[1:])\n    except IndexError:\n        return string"]]