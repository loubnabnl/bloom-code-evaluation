[["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Init\n    num = int(N)\n    total = 0\n    # loop\n    while num > 0:\n        total += num % 2\n        num //= 2\n    # return\n    return bin(total)[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"1\"\n    n = str(N)\n    a = []\n    b = []\n    while n:\n        a.append(int(n[0]))\n        n = n[1:]\n    return \"\".join(str(a[i]) if len(a) > i else \"0\" for i in range(len(a)))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    assert N >= 0\n    assert N <= 10000, 'The range of input should be [0, 10000]'\n\n    return str(bin(int(N))).zfill(int(N))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0 or N > 10000:\n        return None\n    \n    digits = str(bin(N))[2:]\n    return \"\".join([str(int(i)) for i in digits])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # Remove all leading zeros.\n    s = str(N).zfill(8)\n    \n    # Sum of digits.\n    sum = 0\n    \n    # For each digit of the binary number.\n    for i in s:\n        # Convert it to an integer.\n        tmp = int(i)\n        \n        # If it's 0, then add 0 to the total sum.\n        if tmp == 0:\n            continue\n        \n        # Otherwise, sum the digit.\n        sum += tmp\n    \n    # Convert the sum to a string.\n    res = str(sum)\n    \n    # Return the result.\n    return res", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Python 2.7\n    import string\n    # Python 3\n    import string\n    from math import ceil\n    if N > 0:\n        return (str(ceil(sum(map(int, str(N)))))[2:])\n    else:\n        return 0", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # Answer's size will be 2 * N\n    answer = ''\n    while N > 0:\n        # Finds the index of N in the number system\n        index = N - int(N)*2**N\n        # Appends the index in the answer\n        answer += str(index)\n        # Subtracts the index from N\n        N -= index\n    return answer[::-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(1, N + 1):\n        total += int(str(i), 2)\n    return str(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    i = 0\n    while i < N:\n        N = int(N / 10)\n        i += 1\n    i = 0\n    while i < N:\n        print(\"1\", end = \"\")\n        i += 1\n    return\n\nsolve(input())", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = str(bin(N))[2:]\n    sum = 0\n    for x in binary:\n        sum += int(x)\n    return str(sum)[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    import re\n    if N < 0:\n        raise Exception(\"N must be positive\")\n    \n    def calc_digits(N):\n        def digits_sum(digits):\n            return reduce(lambda x, y: x + y, digits, 0)\n        \n        while N > 0:\n            N //= 2\n            digits_sum(str(N))\n        return digits_sum(str(N))\n    \n    # convert to binary\n    str_N = str(N)\n    str_N = \"\".join([str(int(x)) for x in str_N])\n    \n    # sum of digits\n    return calc_digits(int(str_N, 2))\n\nfor x in range(0, 1000):\n    print(solve(x))</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    digits = str(N)\n    # sum of digits\n    sum = 0\n    # store for result\n    res = \"\"\n    # store for digits from left to right\n    for i in digits:\n        # if the digit is 0, we do nothing\n        if i == '0':\n            pass\n        # if the digit is 1, we add 1 to the sum of digits\n        else:\n            sum += 1\n        # get the number of digits\n        n = len(res) + 1\n        # for the first digit in the right place, we add a \"0\" to res\n        if i == 1:\n            res = \"0\" + res\n        # for the second digit in the right place, we add a \"1\" to res\n        elif i == 2:\n            res = \"1\" + res\n        # for the other digits in the right place, we add their values to res\n        else:\n            res = str(sum) + res\n        # if there is a digit in the left place, we remove the left digit\n        # in the number and we add a \"0\" to the end of res\n        if len(digits) == n:\n            res = res + \"0\"\n    return res\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"\"\n    for i in xrange(0, int(N)+1):\n        result = result + str(bin(i)[2:])\n        result = \"0\" * (len(result) - len(str(i)) + 1)\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 1:\n        return \"N must be > 0\"\n\n    total = 0\n    for digit in str(N):\n        total += int(digit) * pow(2, len(digit) - 1)\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = sum(int(x) for x in str(N))\n    return format(total, 'b')", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(int(str(N)))[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = []\n    count = 0\n    if N > 0:\n        while N:\n            n.append(str(N % 2))\n            N /= 2\n        for digit in n:\n            while digit == '0':\n                count -= 1\n                digit = n[count]\n            while digit == '1':\n                count += 1\n                digit = n[count]\n            if count % 10 == 0:\n                digit = \"0\" + digit\n            if count % 2 == 0:\n                digit = \"1\" + digit\n            count += 1\n    return \"\".join(n)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    base = 2\n    digits = []\n    total = 0\n    while N > 0:\n        digit = N % base\n        N = int(N/base)\n        digits.append(digit)\n        total = total + digit\n    return digits[::-1] + str(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N >= 2**10:\n        return \"1\" * (N / 2**10)\n    while N > 0:\n        N, rem = divmod(N, 10)\n        if rem > 0:\n            return \"0\" + solve(N)\n    return '0'", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        return \"0\"\n    return \"\".join([str(int(N//2**i)) for i in range(N)])\n\nsolve(int(raw_input()))\n\n\"\"\"\nHint: Try to solve the problem recursively. You may need to use a library to convert\ninteger to binary string.\n\"\"\"\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    assert isinstance(N, int) and 0 <= N <= 10000, \"Incompatible type\"\n    \n    # Special cases\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    \n    result = \"\"\n    # Sum of digits in binary\n    for i in range(N, 0, -1):\n        result += str((N % i) * 2 + 1)\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if (N > 10000):\n        return \"Wrong input!\"\n    if (N == 0):\n        return \"0\"\n    if (N < 0):\n        return \"Impossible!\"\n    if (N < 10):\n        return str(N) + \"0\"\n    return \"10\" + str(N)[1:]\n\nsolve(1)\nsolve(10)\nsolve(10000)\nsolve(100000)\nsolve(1000000)\nsolve(10000000)\nsolve(100000000)\nsolve(1000000000)\n\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    N = str(N)\n    if len(N) > 1:\n        res = solve(int(N[1:]))\n    else:\n        res = N[0]\n    return res + res[::-1]\n\nsolve(150)\nsolve(147)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    output = ''\n    num = int(N)\n    for i in range(len(str(num))):\n        output += str(num % 2)\n        num = num // 2\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if 0 < N < 10:\n        return \"1\"\n    num = 0\n    for i in xrange(10):\n        num = num * 10 + N % 10\n        N //= 10\n    for i in xrange(2):\n        num = num * 2 + num % 2\n        num //= 2\n    return str(num)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    bin_str = ''\n    \n    while N!= 0:\n        if N % 2 == 0:\n            bin_str += '0'\n        else:\n            bin_str += '1'\n            \n        N /= 2\n        \n    return bin_str", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    def sum_of_digits(num):\n        '''\n        Returns the sum of digits of a given number\n        '''\n        s = 0\n        while num > 0:\n            s += num % 10\n            num /= 10\n        return s\n    \n    return sum_of_digits(2**N)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Recursive algorithm\n    def sum_digit(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return n + sum_digit(n // 10) + sum_digit(n % 10)\n    return sum_digit(int(N, 2))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # convert the integer to a string\n    # Add the binary digits of each digit of number in a string\n    # Concatenate them to get a string which will be further converted to integer\n    # to get the sum of the binary digits of that number.\n    return (str(int(bin(N)[2:]))).zfill(N+2)\n\nsolve(1000)\nsolve(150)\nsolve(147)\n\n\n\n\n\n\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    d = bin(N)\n    s = 0\n    for i in d:\n        s += int(i)\n    return str(s)\n    \nN = int(input())", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # create an empty list to store the digit binary sum\n    digit_sum = []\n\n    # add digit to the list\n    for i in range(2, int(N)+1):\n        digit_sum.append(str(i)[-1])\n\n    # convert the list to string\n    digit_sum = \"\".join(digit_sum)\n\n    # convert the string to binary\n    digit_sum = bin(int(digit_sum))[2:]\n\n    # return the sum of digits\n    return(digit_sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    # The below code is for generating a string of binary number\n    # it generates string of binary number from 1 to N\n    S = \"\"\n    for i in range(1,N+1):\n        if i < N:\n            S += str(i)\n        else:\n            S += \"1\"\n\n    # The below code is for calculating the sum of digits of a binary number\n    # string\n    # it returns the total sum of digits of a binary number string\n    # the sum of digits of a binary number is calculated by shifting\n    # right the string and adding the first digit\n    # sum of digits = (number of 1's in binary) + (sum of digits of\n    # string shifted one place to the right)\n    # binary 0 is not included in sum of digits\n    bin = S\n    bin_length = len(bin)\n    sum = bin[0]\n    for i in range(1,bin_length):\n        sum += bin[bin_length - i]\n\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def is_positive(n):\n        \"\"\"Check if the given number is positive or not.\n\n        @n integer\n            Constraints: 0 \u2264 n \u2264 1000\n        Output:\n            True if the given number is positive, False otherwise.\n        \"\"\"\n        return n > 0\n    \n    def is_zero(n):\n        \"\"\"Check if the given number is zero or not.\n\n        @n integer\n            Constraints: 0 \u2264 n \u2264 1000\n        Output:\n            True if the given number is zero, False otherwise.\n        \"\"\"\n        return n == 0\n    \n    def is_power_of_two(n):\n        \"\"\"Check if the given number is a power of two or not.\n\n        @n integer\n            Constraints: 0 \u2264 n \u2264 1000\n        Output:\n            True if the given number is a power of two, False otherwise.\n        \"\"\"\n        return n == 1 or (n & (n-1)) == 0\n    \n    def convert(n):\n        \"\"\"Convert the given number to a binary string.\n\n        @n integer\n            Constraints: 0 \u2264 n \u2264 1000\n        Output:\n            A string of binary number.\n        \"\"\"\n        if not is_positive(n):\n            return \"0\"\n        while n >= 1:\n            s = bin(n)[2:]\n            n = n - int(s,", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # This method will use a loop to add up the binary digits\n    result = \"\"\n    # in the N provided. It will also loop through the digits of N from right to left.\n    # For example, the binary for N = 1000 will be 1 and the binary for N = 4 will be\n    # 00001. The first loop is to add up the last digit of N with the sum of the rest\n    # of the digits. The second loop is to add up the last digit with the rest of the digits\n    # in the reversed order. The final sum of binary digits will be the output.\n    for i in range(len(str(N))):\n        # Add the last digit of N with the sum of the rest of the digits\n        result = str(N)[i] + result\n        # Add the last digit of N with the sum of the rest of the digits in the reversed order\n        result = str(N)[len(str(N)) - 1 - i] + result\n        # Convert the result to a binary number\n        result = bin(int(result))[2:]\n        # Remove the leading 0s\n        result = result[1:]\n        # Remove the trailing 0s\n        result = result[:-1]\n    return result</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        return '0' + solve(-N)\n    if N < 10:\n        return str(N)\n    return reduce(lambda a, b: a + str(b).zfill(2), range(2, int(N) + 1))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 1:\n        return \"0\"\n\n    count = int(N)\n\n    if count == 0:\n        return \"0\"\n\n    ret = ''\n\n    while count > 0:\n        if count % 2 == 0:\n            ret = '1' + ret\n        else:\n            ret = '0' + ret\n\n        count = count >> 1\n\n    return ret", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        return \"0\"\n    binary = \"\"\n    while N > 0:\n        if N % 10 == 0:\n            binary += \"1\"\n        else:\n            binary += \"0\"\n        N /= 10\n    return binary", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    def binary(x):\n        if x >= 2**31:\n            return \"0\" + binary(x // 2**31)\n        else:\n            return str(x)\n\n    def sum_digits(x):\n        d = []\n        while x!= 0:\n            d.append(x % 2)\n            x /= 2\n        return int(''.join(d))\n    \n    n = int(N)\n    print binary(sum_digits(n))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    s = []\n    s.append(N)\n    while len(s) > 1:\n        n = s[0]\n        s = s[1:]\n        s.append(n + n)\n    return \"\".join(str(x) for x in s)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert integer to string\n    n = str(N)\n    # Converts the string to binary representation\n    n_bin = bin(int(n))[2:]\n    # Sum of each digit in the binary number\n    n_sum = 0\n    # Iterates through the binary number and sums each digit\n    for i in n_bin:\n        n_sum += int(i)\n    return n_sum\n\nN = int(input())", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(input(\"Enter a positive number N: \"))\n    return bin(N)[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    digits = list(map(int, str(N)))\n    while(len(digits) > 1):\n        digits.remove(digits[0])\n    if(len(digits) == 1):\n        return str(digits[0])\n    else:\n        return \"\".join(map(str, digits))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # base cases\n    if N == 0:\n        return '0'\n    if N == 1:\n        return '1'\n    # divide N by 2 till it is 1\n    # sum of binary digit of quotient and remainder\n    # then add 0 and 1 at the beginning\n    return str(N//2) + str(N%2) + '0' + '1'", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def sum_of_digits(x):\n        return sum(int(y) for y in str(x))\n    return str(sum_of_digits(N))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    total = 0\n    while N > 0:\n        N, digit = divmod(N, 2)\n        total += digit\n    return str(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        return -1\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        return (N + sum(str(N)[2:])) * solve(int(str(N)[:2]) - 1)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binN = \"\"\n    while N > 0:\n        binN = bin(N % 2**10)[2:] + binN\n        N /= 10\n    return binN", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    # Converts N to binary\n    N_binary = bin(int(N))\n\n    # Sum of the binary digits of N\n    return N_binary.zfill(N_binary.count('1'))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 2:\n        return \"0\"\n    elif N == 2:\n        return \"1\"\n    elif N % 2 == 0:\n        return solve(N/2) + \"0\" + solve(N/2)\n    else:\n        return solve(N/2) + \"1\" + solve(N/2)\n\nN = int(input())", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = ''\n    for i in range(len(str(N))):\n        result = str(int(str(N)[i])) + result\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # The key point of this problem is to consider every digit to be a digit in binary.\n    # Therefore, we will convert the number to a binary string and sum up every digit in the string.\n    # We will convert a digit number to a binary string with length of 3 and store them in a dict\n    # Then we sum up every digit in the binary string.\n    # Last, we convert the sum of the binary string to a string and output it.\n    # Note: Python can automatically convert number to string, so it is not necessary to convert them manually.\n    nums = {int(x): str(x) for x in str(N)}\n    num_str = \"\"\n    # Convert every digit in nums to a binary string of length 3 and sum up all of them\n    for d in nums:\n        num_str += nums[d]\n    print(num_str)\n    # Convert the sum of the binary string to a string of length 3 and print it\n    print(bin(int(num_str, 2))[2:])\n\nsolve(1000)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binStr = ''\n    if not N <= 10000:\n        raise Exception(\"error 1 \")\n    #get the binary string\n    binStr = str(bin(int(N))[2:])\n    #print binStr\n    total = 0\n    #binary sum\n    for x in binStr:\n        if x == '1':\n            total += 2**(len(binStr) - binStr.find('1') - 1)\n        if x == '0':\n            total += 2**(len(binStr) - binStr.find('0') - 1)\n    return str(total)\n\n\n\nfor N in range(1,10000):\n    print(solve(N))\n\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    count = 0\n    while count < N:\n        total += bin(count)[2:]\n        count += 1\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = 0\n    while N > 0:\n        result += int(N % 2)\n        N //= 2\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    output = \"\"\n    \n    if not 0 <= N <= 10000:\n        return -1\n    \n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"10\"\n    \n    for i in range(2, N+1):\n        output += str(bin(N)[2:])\n    \n    return output\n\nN = int(input())", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    total = 0\n    while N > 0:\n        total += N % 10\n        N //= 10\n    \n    return bin(total)[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if 0 <= N <= 10000:\n        res = 0\n        N = int(N)\n        while N > 0:\n            res = res + 2 ** (len(str(N)) - 1) * N % 10\n            N = N // 10\n        return res\n    else:\n        print \"Size of input is not in between 0 and 10000\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = int(N)\n    result = ''\n    for i in range(n, 0, -1):\n        result = (str(i % 2) + result)\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(int(str(N)))[2:].zfill(10)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = 0\n    \n    while N > 0:\n        result += N % 10\n        N = N / 10\n    return bin(result)[2:].zfill(N+1)[::-1]\n\nimport unittest\nfrom hamcrest import *", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if not N:\n        return 0\n    num = str(N)\n    sum = 0\n    while num:\n        num, i = divmod(num, 2)\n        sum = num + sum\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    def get_sum(n):\n        res = 0\n        while n!= 0:\n            res += n % 10\n            n = n / 10\n        return res\n\n    binary = bin(N)\n    sum1 = get_sum(int(binary[0]))\n    sum2 = get_sum(int(binary[1]))\n    res = sum1 + sum2\n\n    return str(res)\n\n\nsolve(200)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # print(N) # Debug\n    res = 0\n    while N > 0:\n        res = res * 2 + (N % 10)\n        N = N // 10\n    return str(res)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = int(N)\n    x = n\n    while x!= 0:\n        x /= 10\n        x = int(str(x)[0]) * 2\n    if x == 0:\n        return '0'\n    else:\n        return str(x)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    i = 0\n    while i < N:\n        if N % 2 == 0:\n            sum += int(N / 2)\n        N = N / 2\n        i += 1\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def bin(n):\n        \"\"\"Return the binary representation of n\"\"\"\n        return bin(n)[2:]\n\n    def solve_rec(n):\n        \"\"\"Recursively solve the problem\"\"\"\n        if n == 0:\n            return '0'\n        elif n == 1:\n            return '1'\n        else:\n            #  for the binary string of n\n            #      prefix = bin(n)[0:1]\n            #      suffix = bin(n)[1:]\n            prefix = bin(n)[0:2]\n            suffix = bin(n)[2:]\n            return prefix + solve_rec(int(suffix))\n    return solve_rec(N)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = str(N)\n    if len(n) == 1:\n        return '1'\n    return '0' + ('01' * (len(n) - 1)) + '0' + n", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    \n    N = int(N)\n    binary = []\n    while N > 0:\n        binary.append(str(N % 10))\n        N = int(N / 10)\n    binary.reverse()\n    \n    return ''.join(binary)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    assert 0 <= N <= 10000, \"N should be a positive integer.\"\n\n    # Converting N to its binary equivalent\n    bin_str = bin(N)\n    bin_str_len = len(bin_str) - 1\n\n    # Sum of digits in binary\n    res = 0\n\n    # Converting bin_str to list and iterating over it\n    bin_str_list = list(bin_str)\n\n    # Iterating over each element of the list\n    for i in range(bin_str_len):\n        res = res + (bin_str_list[i] * (2 ** (len(bin_str) - 1 - i)))\n\n    return res", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    sum = 0\n    i = 1\n    while i < N:\n        sum += int(str(N)[-i])\n        i += 1\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    return ''.join([str(n) for n in bin(N)][::-1])\n\nfor N in range(0, 10**4):\n    print(N, \":\", solve(N))\n\nA:\n\nI am not very familiar with Python, but I think you could replace your string.join([...]) with just string concatenation to make things a bit more readable:", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    res = []\n    while N > 0:\n        res.append(str(N % 10))\n        N //= 10\n    res.reverse()\n    res = ''.join(res)\n    return res", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # The input is a string\n    s = str(N)\n    # The digits of number from left to right\n    digit = map(int, s)\n\n    # The output\n    output = \"0\"\n    i = 0\n    while i < len(digit):\n        # The position of digit in the binary number\n        j = 2**(len(digit) - i - 1)\n\n        # Increase the digit by 2\n        digit[i] += 1\n\n        # Increase the binary number by 1\n        output += str(digit[i]) + \"0\"\n\n        # Remove the digit\n        digit[i] = 0\n\n        # Increase the index\n        i += 1\n\n        # If the position of digit in the binary number is less than 2, add 1\n        if j < 2:\n            output += \"1\"\n\n    # Remove the 0s in the beginning of binary number\n    return output[1:]\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    s = str(N)\n    s = s.zfill(32)\n    bin = ''\n    for i in s:\n        bin += bin(int(i))[2:]\n    return bin[::-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    return bin(int(str(N)))[2:].zfill(len(str(N)))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def digitsum(N):\n        result = 0\n        for i in range(1,N+1):\n            result += int(str(i)) * pow(2, i-1)\n        return result\n\n    return str(digitsum(N))\nN = int(input())", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Initialize the sum of digits.\n    sum = 0\n    # Convert the N into binary.\n    while N > 0:\n        N, remainder = divmod(N, 2)\n        # Add the binary digits to sum.\n        sum = sum + remainder\n    # Print the string of binary digits.\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    def sum_of_digits(num):\n        n = int(num)\n        a = []\n        while n!= 0:\n            a.append(n % 10)\n            n = n / 10\n        a = ''.join(a)\n        return a\n    \n    b = N\n    c = 0\n    while b!= 0:\n        c = c + int(b % 2)\n        b = b // 2\n    return c", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    sum = 0\n    count = 0\n    while count < N:\n        if count == 0 or count == 1:\n            sum += N % 2\n        N /= 2\n        count += 1\n\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    s = ''\n    while N > 0:\n        if N % 2 == 0:\n            s += '0'\n        else:\n            s += '1'\n        N /= 2\n    return s[:-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if 0 == N:\n        return \"1\"\n    c = N\n    d = c\n    while d > 0:\n        d = d // 10\n        c = c * 10 + d % 10\n        d = c\n    return str(d) + str(c)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    if N < 0:\n        return str(-1)\n    res = \"\"\n    if N == 0:\n        res += \"0\"\n    else:\n        while N > 0:\n            res += str(int(N % 2))\n            N //= 2\n    return res[::-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    # Input validation.\n    if not 0 < N <= 10000:\n        raise ValueError(\"Input N must be a positive integer within the range of 0 < N <= 10000\")\n\n    # String to binary conversion.\n    binary = bin(N)[2:]\n\n    # Sum of binary digits.\n    sum_binary = 0\n    for i in range(len(binary)):\n        sum_binary += binary[i]\n\n    # Return the sum of binary digits.\n    return str(sum_binary)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    assert 0 < N <= 10000, \"Input out of range!\"\n    digits = []\n    while N!= 0:\n        digit = N % 2\n        N //= 2\n        digits.append(digit)\n    return digits[0] + \"\".join(reversed(digits[1:]))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        return \"0\"\n\n    return bin(N)[2:].zfill(N//2)[::-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    def sumDigits(n):\n        \"\"\"Return the total sum of its digits in binary.\n        \n        Example\n            For N = 1000, the sum of digits will be 1 the output should be \"1\".\n            For N = 150, the sum of digits will be 6 the output should be \"110\".\n            For N = 147, the sum of digits will be 12 the output should be \"1100\".\n        \n        Variables:\n            @n integer\n                Constraints: 1 \u2264 N \u2264 1000.\n        Output:\n            a string of binary number\n        \"\"\"\n        \n        if n == 0:\n            return '0'\n        sum = 0\n        while n > 0:\n            n, rem = divmod(n, 2)\n            sum += rem\n        return str(sum)\n    \n    result = sumDigits(N)\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    if (N > 10000) or (N <= 0):\n        return -1\n\n    s = bin(N)\n    for i in range(0, len(s)):\n        s = '0' + s\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = ''\n    def add(val, digit):\n        if val!= 0:\n            return val + add(val // 10, digit + 1)\n        else:\n            return val\n    \n    i = 0\n    while N > 0 or i < len(str(N)):\n        i += 1\n        result += add(int(str(N)[i]) * 2, 0)\n    return result\n\nsolve(input())\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = N\n    if(N > 0):\n        if(N < 10):\n            return \"0\" + str(digits)\n        else:\n            string = \"\"\n            while(digits > 0):\n                string += str(digits % 2)\n                digits = digits / 2\n            return string\n    else:\n        return \"0\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 1:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    total = 0\n    for i in range(N):\n        total += int(binary(N-i))\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    def add_digits(num, base):\n        \"\"\"Recursive function to add up the digits in a number.\n        \n        Variables:\n            @num integer\n                Constraints: 0 \u2264 num \u2264 base**10.\n            @base integer\n                Constraints: 2 \u2264 base \u2264 16.\n        Output:\n            a number.\n        \"\"\"\n        if num == 0:\n            return 0\n        return add_digits(num // base, base) + str(num % base)\n    \n    def find_sum(digits, num):\n        \"\"\"Recursive function to calculate the sum of a string of digits.\n        \n        Variables:\n            @digits string\n                Constraints: digits[i] is a digit in the base-2 numeral system for 0 \u2264 i \u2264 length(digits)-1.\n            @num integer\n                Constraints: 0 \u2264 num \u2264 base**10\n        Output:\n            a number.\n        \"\"\"\n        if len(digits) == 0:\n            return 0\n        return find_sum(digits[1:], add_digits(int(digits[0]), num)) + digits[0]\n    \n    return find_sum(str(bin(N)), 10)</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(2,N+1):\n        total += int(str(N)[i])\n    return(str(total))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    ret = 0\n    while N!= 0:\n        ret += N % 2\n        N /= 2\n    return str(ret)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # check the input, convert to string and convert to list\n    N_str = str(N)\n    N_lst = list(N_str)\n\n    # print(N_lst)\n    # sum up all the digits in N's binary representation\n    N_sum = 0\n    for i in range(len(N_lst)):\n        N_sum += int(N_lst[i]) * (2 ** i)\n    # print(N_sum)\n\n    # convert N_sum back to a string\n    binary_sum = bin(N_sum)[2:]\n    # print(binary_sum)\n\n    # now get the total length of the string\n    # and get rid of leading zeros\n    length = len(binary_sum) - len(binary_sum.lstrip('0'))\n    # print(length)\n    # calculate the last digit based on length\n    last_digit = int(binary_sum[length - 1]) + int(length) * 2\n    # print(last_digit)\n\n    # return a string\n    return binary_sum[length - 1:length - 1 + last_digit]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = len(str(N))\n    sum = 0\n    for i in range(n, 0, -1):\n        sum += int(str(N)[i]) * pow(2, i-1)\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if (0 < N <= 10000):\n        num = str(int(N))\n        sum = 0\n        for digit in num:\n            sum += int(digit)\n        num = str(sum)\n        sum = 0\n        while num:\n            sum = sum + int(num[0])\n            num = num[1:]\n        return str(sum)\n    else:\n        return -1", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # sum all the binary digits\n    total = 0\n    if N >= 10000:\n        return None\n    while N > 0:\n        digit = N % 10\n        total += digit\n        N //= 10\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    while N > 0:\n        ret = N % 2\n        N = N // 2\n        if not N % 2:\n            ret = ret + \"1\"\n        yield ret", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    assert 0 <= N <= 10000, \"The valid range for N is 0 - 10000.\"\n\n    # Convert the integer to binary string\n    bin_str = bin(N)\n    bin_str = bin_str[2:]\n    # Convert the binary string to decimal string\n    dec_str = dec(bin_str)\n\n    # Get the sum of digits\n    sum_of_digits = 0\n    for i in dec_str:\n        sum_of_digits += int(i)\n\n    # Convert the sum of digits to binary string\n    bin_sz = len(bin_str) * 8\n    bin_str = bin(sum_of_digits)[2:]\n\n    # Remove leading zeros\n    bin_str = bin_str.lstrip('0')\n    # Pad zeros\n    bin_str = '0' * (bin_sz - len(bin_str)) + bin_str\n\n    return bin_str", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        return \"-1\"\n    if N == 0:\n        return \"0\"\n    return intToBin(N, N)[1:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return \"0\" + bin(N)[2:].zfill(N)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    def binary_sieve(N):\n        \"\"\"Return a list of integers from 1 to N inclusive that are not a power of 2.\n        \"\"\"\n        a = []\n        for i in range(1, N+1):\n            if (i!= 1) and (not(i == 2**j for j in range(1, int(log(i, 2)))+1))):\n                a.append(i)\n        return a\n        \n    def sum_digits(N):\n        \"\"\"Returns the sum of digits of a number in binary\n        \"\"\"\n        a = []\n        b = 0\n        while N:\n            a.append(N % 2)\n            b += N % 2\n            N /= 2\n        return b\n    \n    def sum_all_digits(L):\n        \"\"\"Returns the sum of all digits in a list.\n        \"\"\"\n        a = 0\n        for i in L:\n            a += i\n        return a\n    \n    a = binary_sieve(N)\n    b = sum_digits(N)\n    if b == 0:\n        return \"0\"\n    else:\n        return sum_all_digits(a)+b", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    def sum_digit(N):\n        \"\"\"\n        sum_digit(N) -> integer\n        sum_digit(N) -> integer\n        Given an integer N, sum the digits of N in binary\n        \"\"\"\n        return sum([int(x) for x in str(N)])\n\n    def bin_digit(N):\n        \"\"\"\n        bin_digit(N) -> string\n        bin_digit(N) -> string\n        Given an integer N, calculate the sum of digits of N in binary\n        \"\"\"\n        return \"\".join(map(str, sum_digit(N)))\n\n    def output(sum_digit(N)):\n        \"\"\"\n        output(sum_digit(N)) -> string\n        output(sum_digit(N)) -> string\n        Given a number in binary, convert it to decimal\n        \"\"\"\n        return int(bin_digit(sum_digit(N)), 2)\n\n    return output(sum_digit(N))</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    S = 0\n    # the total sum of digits in the integer\n    for i in range(len(str(N))):\n        S += int(str(N)[i])\n    return S\n\nfor _ in range(int(input())):\n    print(solve(int(input())))\n\n'''\nSolve ::\n\n    Given a positive integer N, return the total sum of its digits in binary.\n    \n    Inputs\n    0 \u2264 N \u2264 10000\n    Examples\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables\n    @N integer\n        Constraints: 0 \u2264 N \u2264 10000.\n    Output\n    a string of binary number\n'''</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    a = int(str(N))\n    b = \"\"\n    while a > 0:\n        b += str(a % 2)\n        a //= 2\n    return b", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    num = 0\n    while N:\n        num += int(N % 10)\n        N /= 10\n    return ''.join(str(num)[-2:])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    def get_digit_sum(n):\n        return sum([int(bin(i)[2:]) for i in range(n)])\n\n    if N < 0:\n        print(\"N must be a positive integer\")\n        return\n    print(bin(N))\n    return \"{0:08b}\".format(get_digit_sum(N))\n\nN = input(\"Input a positive integer: \")\n\nsolve(N)\n\nA:\n\nYou can use a string slicing to get the binary representation of an integer. \nWhen you slice a string from index 2 to the end you get the binary representation of the number.\nSo you can use something like this to get the sum of the binary representation of the number.", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # convert N to binary\n    binN = bin(N)\n    # reverse the binary number\n    reverseBinN = list(reversed(binN))\n    # convert binary number into digits\n    binNStr = list(str(reverseBinN))\n    # get the sum of digits\n    sumOfDigits = 0\n    for digit in binNStr:\n        sumOfDigits += int(digit)\n    # return the string of binary number\n    return \"\".join(str(sumOfDigits))\n\nN = int(input())", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = []\n    while N!= 0:\n        digits.append(int(N % 2))\n        N /= 2\n    return \"\".join(str(d) for d in digits)\n    \n\nN = int(input())\nsolution = solve(N)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    bin_number = []\n    for i in range(0, 10):\n        bin_number.append(str(bin(N//(2**i))[2:]))\n\n    return \"\".join(bin_number)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # convert int to string\n    n = str(N)\n    # convert string to list of digits\n    digits = list(n)\n\n    # total sum of digits in binary\n    # add all digits of list\n    return sum(1 for digit in digits) * 2 ** len(digits) # pow to convert to 2 power", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    n = N\n    while n > 0:\n        sum += n % 10\n        n /= 10\n\n    print(bin(sum)[2:] + '0')", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    while(N):\n        total += N % 2\n        N /= 2\n    return bin(total)[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        raise ValueError('N must be a non-negative integer')\n\n    return _bin(N, 0, 0)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    if N == 1:\n        return '1'\n    N = str(N)\n    a = []\n    for i in N:\n        if i.isdigit():\n            a.append(i)\n        else:\n            pass\n    if len(a) == 0:\n        return '0'\n    return ''.join(a[::-1]) + '0' * (len(a) - 1)[::-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Your code here\n    digits = []\n    while N!= 0:\n        digits.append(N % 2)\n        N = N // 2\n    total_sum = 0\n    for i in digits:\n        total_sum += i\n    total_sum = str(total_sum)[::-1]\n    return total_sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return format(sum(int(d) for d in bin(N)[2:]), 'b')", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        return \"\"\n    binary = bin(N)[2:]\n    return \"0\"*(len(binary)/2) + binary + \"0\"*(len(binary)/2)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = ''\n    if N < 0:\n        return \"-1\"\n    \n    while N!= 0:\n        N, rem = divmod(N, 2)\n        result = str(rem) + result\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = 0\n    while N > 0:\n        digits += N % 2\n        N = N / 2\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    def sum_of_digit(number):\n        \"\"\"\n        Returns the sum of digits of a number in binary.\n        \n        Example:\n            N = 1000 the return will be 1\n            N = 150 the return will be 6\n            N = 147 the return will be 12\n        \n        Variables:\n            @number integer\n                Constraints: 0 \u2264 N \u2264 10000.\n        Output:\n            a number\n        \"\"\"\n        while number > 0:\n            number = number / 2\n            yield number\n    binary = []\n    for digit in sum_of_digit(int(N)):\n        binary.append(str(digit))\n        \n    return binary", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binSum = str(bin(N)).zfill(N)\n    return sum(int(digit) for digit in binSum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n, result = 0, 0\n    while n < N:\n        n, result = n * 2 + int(n / 10), result + n % 10\n    return str(result)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return \"1\" + \"1\"*(N-1) + str(sum(bin(int(i))[2:].zfill(N-1) for i in range(N)))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    string = \"\"\n    while N!= 0:\n        string += str(N % 10)\n        N = int(N / 10)\n    return string", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert the integer to binary string\n    binary_string = bin(N)\n    # Iterate through each digit and add it to the sum\n    sum_of_digit = 0\n    for digit in binary_string:\n        sum_of_digit += int(digit)\n    # Return the sum of digits\n    return sum_of_digit", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Create a string of N digits and store it in nDigits\n    nDigits = str(N)\n\n    # Convert nDigits into a list of digits.\n    digits = nDigits.split(\"0\")\n\n    # Loop through the list of digits, convert each digit to binary and sum them up.\n    sumOfDigits = 0\n    for digit in digits:\n        sumOfDigits += int(digit) * int(bin(int(digit))[2:])\n\n    return sumOfDigits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"\"\n    if N > 0:\n        for i in range(1, N+1):\n            result += str(int(i*(10**(N-i))))\n        if len(result) > 1:\n            result = \"0\" + result[-2:]\n        return result\n    else:\n        return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = 0\n    res = \"\"\n    while n < N:\n        res = res + str(bin(N - n - 1)[2:]).zfill(1)\n        n += 1\n    res = res[0:len(res)-1]\n    return res", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Python 3.x doesn't have string.digits\n    if N < 0:\n        return \"0\"\n    # Python 3.x doesn't have string.at\n    if type(N)!= int:\n        N = int(N)\n    d = int(str(N)[::-1].replace(\"-\", \"\"))\n    d = int(str(d)[::-1]) + int(str(N - d)[::-1])\n    result = \"\"\n    for i in range(d):\n        result += str(i + 1)[::-1]\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    total = 0\n    while N > 0:\n        total += N % 2\n        N //= 2\n\n    return str(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be positive')\n    if N > 10000:\n        raise ValueError('N must be less than 10000')\n    if len(str(N)) > 8:\n        raise ValueError('N must be less than 8')\n    binary = str(N).zfill(8) + '0'\n    digits = [int(x) for x in str(N)]\n    answer = ''\n    for i in range(len(digits)):\n        answer += str(bin(digits[i]))[2:]\n    return answer", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    S = str(N)\n    total = 0\n\n    for i in S:\n        total += int(i)\n\n    return format(total, 2)\n\n\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # solution 1\n    # def solve(n):\n    #     if n == 0: return \"0\"\n    #     result = []\n    #     while n > 0:\n    #         while n % 2 == 0: n /= 2\n    #         result.append(str(n))\n    #         n /= 2\n    #     return \"\".join(result)\n    # solution 2\n    # def solve(n):\n    #     return (2 ** (n - 1)) - 1\n    # solution 3\n    # def solve(n):\n    #     return str(bin(n)[2:])\n    # solution 4\n    # def solve(n):\n    #     return str(bin(n).rjust(8,\"0\")[2:])\n    \n    return str(bin(N)[2:])\n\nsolve(1000)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    #  Return result\n    if N < 2:\n        return '0'\n    #    1\n    #    10\n    #    100\n    #    1000\n    sum = 0\n    digits = list(str(N))\n    while digits:\n        sum += digits.pop(0)\n        #   add the last digit of number N to sum\n        #   pop the last digit of number N\n        #   use len(digits) to check if there is any left digit\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    elif N == 1:\n        return \"1\"\n    # convert to integer\n    N = int(N)\n    # convert to binary\n    N_str = str(N)\n    # add all digits\n    bin_sum = 0\n    for i in range(len(N_str)):\n        bin_sum = bin_sum + bin(int(N_str[i]))[2:]\n    # return the binary sum\n    return bin_sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    else:\n        total = 0\n        while N > 0:\n            total += N % 10\n            N //= 10\n        return \"\".join(str(total)[::-1])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = int(str(N), 2) # Convert N to binary\n    if n == 0:\n        return '0'\n    answer = str(bin(n))[2:] # Remove the first 0 in the binary string\n    return answer", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    bin_digits = []\n    if N < 0:\n        return \"Negative number cannot be converted to binary\"\n    else:\n        for i in range(10):\n            while N % 2 == 0:\n                N = N / 2\n                bin_digits.append('0')\n            N = N / 2\n            bin_digits.append('1')\n    return ''.join(bin_digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = str(bin(int(N))[2:])\n    if len(binary) <= 1:\n        return binary\n    return '0' * (len(binary) - 1) + binary", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        return '0' * len(str(abs(N)))\n    \n    sum = 0\n    while N > 0:\n        sum += N % 2\n        N /= 2\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(int(str(N)))[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def check(n):\n        if n == 0:\n            return \"1\"\n        else:\n            if n < 0:\n                return \"0\"\n            else:\n                return str(n).zfill(1) + check(n // 10) + check(n % 10)\n    return check(N)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    else:\n        return bin(N)[2:].zfill(N) + bin(N/N)[2:].zfill(N) + bin(N%N)[2:].zfill(N)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = 0\n    while N >= 1:\n        binary = binary * 2 + int(str(N)[-1])\n        N -= 1\n    return binary", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # A function to convert integer to binary\n    def convInt2bin(n):\n        res = []\n        while n > 0:\n            res.append(str(n % 2))\n            n //= 2\n        return ''.join(res[::-1])\n    # A function to compute the sum of binary digits\n    def sumDigits(binary):\n        if not binary:\n            return 0\n        # A helper function to compute the sum of digits of a binary number\n        def sumDigitsHelper(binNumber, res):\n            if len(binNumber) == 0:\n                return 0\n            binNumber = binNumber[:-1]\n            if len(binNumber) == 1:\n                return binNumber[0] * 2 + res\n            return (sumDigitsHelper(binNumber[0], res) + sumDigitsHelper(binNumber[1], res) + sumDigitsHelper(binNumber[0] + binNumber[1], res))\n        # Return the sum of digits of given binary number\n        return sumDigitsHelper(binary, 0)\n    # Convert the given N to a binary number\n    binary = convInt2bin(N)\n    return sumDigits(binary)</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def binary(n):\n        \"\"\"Return the binary representation of n as a string\"\"\"\n        return bin(n)[2:]\n    def sumOfDigits(s):\n        \"\"\"Return the sum of digits of s in binary representation\"\"\"\n        return sum(int(digit) for digit in s)\n    def digit(n):\n        \"\"\"Return the nth digit of n in binary representation\"\"\"\n        return int(n) % 2\n    if N <= 0:\n        return \"0\"\n    if N <= 2:\n        return \"1\"\n    x = 0\n    while N >= 2:\n        x = sumOfDigits(digit(N))\n        N = N // 2\n    return binary(x + N)</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        return None\n    if N == 0:\n        return \"0\"\n\n    def _add_digits(num, acc):\n        \"\"\"Add the digits of the binary representation of the given number, and \n        return the sum of the digits.\n        \n        @num integer\n            @acc integer\n        Return:\n            @int integer\n        \"\"\"\n        while True:\n            num, rem = divmod(num, 2)\n            acc = (acc * 10) + rem\n            if num == 0:\n                return acc\n\n    digits = list(bin(N)[2:])\n    digits.reverse()\n    return _add_digits(int(\"\".join(digits)), 0)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    sum = 0\n    for x in range(N):\n        if N % 2 == 1:\n            sum += int(N / 2)\n            N = N / 2\n        else:\n            N = N / 2\n    return(str(sum)[::-1])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    a = str(bin(N))\n    if len(a) == 1:\n        return a\n    else:\n        return \"0\" + a\n\n\nsolve(147)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Validate the arguments\n    if not type(N) is int:\n        print(\"Argument must be an integer.\")\n        return False\n\n    # Convert the argument to string\n    str_N = str(N)\n\n    # Create a string of length 1\n    # The first digit will be the result\n    binary_string = [str_N[0]]\n\n    # Convert each digit of the argument to its binary representation\n    # Sum the digit and add the result to the string\n    for digit in str_N:\n        binary_string.append(bin(int(digit))[2:])\n\n    # Convert the string to integer and get the result\n    result = 0\n    for digit in binary_string:\n        result += int(digit, 2)\n\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    num = int(N)\n    bin_num = \"\"\n    while num!= 0:\n        remainder = num%10\n        bin_num += str(remainder)\n        num = num//10\n    return bin_num", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    print(bin(N))\n\nsolve(150)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    s = \"\"\n    while N > 0:\n        s = str(N % 2)\n        N = int(N/2)\n        if s == \"1\":\n            s = \"0\"\n        s = s + s\n    return s[::-1]\n\ns = solve(1000)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = []\n    if N < 2:\n        return str(N)\n    while N!= 0:\n        binary.append(N % 2)\n        N //= 2\n    binary.reverse()\n    print(binary)\n    return ''.join(binary)\n\nsolve(0)\n\nsolve(1000)\n\nsolve(150)\n\nsolve(147)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary_string = bin(N)[2:]\n    binary_string = '0' * (len(binary_string) - len(str(N))) + binary_string\n    return binary_string", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    digits = []\n    for i in range(0, N):\n        digits.append(str(N - i)[-2:])\n    binary = []\n    for digit in digits:\n        binary.append(bin(int(digit))[2:])\n    binary = ''.join(binary)\n    print(binary)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    s = str(N)\n    if len(s) == 1:\n        return \"0\" + s\n    x = len(s) - 1\n    bin_sum = 0\n    while x >= 0:\n        bin_sum += int(s[x]) * 2**x\n        x -= 1\n    return str(bin_sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binarySum = 0\n    while N:\n        binarySum = (binarySum << 1) | (N % 2)\n        N = N // 2\n    \n    return binarySum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"\"\n    for i in range(2**N, 0, -1):\n        result += str((i % 2))\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in range(len(bin(N))):\n        sum += int(bin(N)[i])*2**(len(bin(N))-i-1)\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Python 3.x solution\n    # return str(bin(int(str(N), 2))).rjust(len(str(N)), \"0\")\n    # Python 2.x solution\n    # return bin(int(str(N), 2)).rjust(len(str(N)), \"0\")\n    # Python 3.x and 2.x solution\n    return bin(int(str(N), 2))[2:].rjust(len(str(N)), \"0\")[::-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n\n    sum = 0\n    while N > 0:\n        if N%10 == 0:\n            sum += N / 10\n        else:\n            sum += N % 10\n        N = N / 10\n\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    if N == 0:\n        return \"0\"\n\n    return solve(N // 2) + str(int(N % 2))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        raise ValueError(\"The N should be positive number\")\n    digit_sum = 0\n    for i in xrange(N):\n        digit_sum += int(binary(i)) * (2 ** i)\n    return str(digit_sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    elif N < 0:\n        return '-1'\n    elif N == 1:\n        return '1'\n    else:\n        bin_str = str(N)\n        bin_str = bin_str[2:]\n        if len(bin_str) == 1:\n            return '1' + bin_str\n        else:\n            return '0' + bin_str", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 2:\n        return \"1\"\n    if N == 2:\n        return \"10\"\n    result = \"\"\n    for i in range(1, N + 1):\n        result += str(i)\n        result += solve(N - i)\n    return result[::-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    def digit(N):\n        \"\"\" return the digit of a number\n        \"\"\"\n        return str(int(N//10) % 2)\n\n    if(N <= 10000):\n        return bin(int(N))[2:].zfill(int(N))[::-1]\n    else:\n        print(\"Invalid Input!\")\n\nsolve(int(input()))\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    bin_list = []\n    while N >= 10:\n        if N % 10 == 0:\n            bin_list.append(str(N))\n        else:\n            bin_list.append(str(N)[-1])\n        N = int(N / 10)\n    bin_list.append(str(N)[-1])\n    return ''.join(bin_list)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    # This list keeps track of the intermediate sum of digits\n    nums = []\n\n    # For an input N, the sum of digits are written in a list\n    while N > 0:\n        nums.append(N % 10)\n        N //= 10\n\n    # Converting the list into a string\n    nums = \"\".join(str(x) for x in nums)\n\n    # Finally converting the string into a binary number\n    bin(int(nums))[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    total_sum = 0\n\n    for i in range(0, N, 2):\n        total_sum += int(str(i)[2:])\n\n    return str(total_sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        return None\n    count = 0\n    while N > 0:\n        count += 1\n        N /= 10\n    ret = \"\"\n    for i in range(count):\n        ret += str(N % 2)\n        N /= 2\n    return ret", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    output = \"\"\n    if N % 2 == 0:\n        N = N / 2\n        while N > 0:\n            output = \"1\" + output\n            N = N / 2\n    else:\n        N = N / 2\n        while N > 0:\n            output = \"0\" + output\n            N = N / 2\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    n = int(N)\n    while n > 0:\n        sum = sum + n % 2\n        n = n >> 1\n    \n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # implement your code here\n    def digit(n, k):\n        return (n - (k * 10))\n    \n    # digit in binary\n    def binary_digit(n, k):\n        return bin(n - (k * 10))[2:]\n    \n    # get a string of 0s and 1s\n    def bin_string(n):\n        s = str(n)\n        return s[::-1]\n    \n    # get the sum of digits\n    def sum_of_digit(n):\n        i = 0\n        digits = 0\n        while i < len(n):\n            digits += int(n[i])\n            i += 1\n        return digits\n    \n    # sum of digits in binary\n    def sum_of_binary_digit(n):\n        digits = 0\n        for i in range(len(n)):\n            digits += int(n[i])\n        return digits\n    \n    # calculate the sum of digits in binary\n    N = sum_of_digit(int(N)) - sum_of_digit(int(N) / 10) - sum_of_digit(int(N) / 100) - sum_of_digit(int(N) / 1000) - sum_of_digit(int(N) / 10000)\n    print(sum_of_binary", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        print('Invalid')\n        return\n    elif N == 0:\n        print('0')\n        return\n    else:\n        s = str(N)\n        s = s.zfill(N + 1)\n        print(''.join(s[2 * i] for i in range(N + 1)))\nsolve(input())\n'''\n10\n01\n0110\n001\n00101\n0011\n001100\n001101\n00100\n0010011\n0011001\n0010110\n0100001\n0100011\n0101010\n'''", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)\n    result = 0\n    for i in range(len(binary)-1,0,-1):\n        result += int(binary[i]) * 2**i\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # \u4fee\u6539 # \u5faa\u73afN\uff0c\u4f46\u662f\u4e0d\u591f\u6548\u7387\uff0c\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u662f\u5426\u5e94\u8be5\u7528\u522b\u7684\u65b9\u6cd5\n    #for N in range(0, 10000):\n    for i in range(0, N):\n        # \u4fee\u6539# \u5faa\u73afN\u53ef\u80fd\u6bd4\u8f83\u6162\n        # for i in range(0, N):\n        # \u4fee\u6539# \u5faa\u73afN\u53ef\u80fd\u6bd4\u8f83\u6162\n        # for i in range(0, N):\n        # \u4fee\u6539 # for i in range(0, N):\n        # \u4fee\u6539 # for i in range(0, N):\n        # \u4fee\u6539 # for i in range(0, N):\n        # \u4fee\u6539 # for i in range(0, N):\n        # \u4fee\u6539 # for i in range(0, N):\n        # \u4fee\u6539 # for i in range(0, N):\n        # \u4fee\u6539 # for i in range(0, N):\n        # \u4fee\u6539 # for i in range(0, N):\n        # \u4fee\u6539 # for i in range(0, N):\n        # \u4fee\u6539 # for i in range(0, N):\n        # \u4fee\u6539 # for i in range(0, N):", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(1, N + 1):\n        digit = int(str(i), 2)\n        total += digit\n    return bin(total)[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = 0\n    d = 1\n    while N >= d:\n        result += (N % d) * d\n        N = N / d\n        d <<= 1\n    return str(result)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    if N < 10:\n        return \"1\"\n    result = []\n    while N > 0:\n        tmp = N%10\n        if tmp < 2:\n            result.append('0' + str(tmp))\n        else:\n            result.append(str(tmp))\n        N //= 10\n    return \"\".join(result)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        print(\"The input number is negative, please input a positive integer.\")\n        return None\n    if N == 0:\n        return \"0\"\n    S = str(N)\n    n = 0\n    while n <= len(S) - 1:\n        n += 1\n        S = S[n-1::-1]\n    n = len(S)\n    m = 0\n    while n - 1 > m:\n        m += 1\n        n -= 1\n        S = S[m-1::-1]\n    return S", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    elif N == 1:\n        return \"1\"\n    else:\n        S = str(N)\n        length = len(S)\n        left = (length / 2)\n        right = (length - left)\n        return \"0\" + solve(N // 2) + \"1\" + solve(N - N // 2) + \"0\" * left + \"1\" * right", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum=0\n    res=\"\"\n    if N > 0:\n        while N > 0:\n            sum += N % 10\n            N = N // 10\n        res = str(sum)\n    return res", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        return \"-1\"\n    bin_string = str(N)\n    return bin_string.zfill(N).replace(\"0\", \"\").replace(\"1\", \"\")", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N >= 10000:\n        return \"ERROR\"\n\n    result = 0\n    N = int(N)\n    while N > 0:\n        result = (result + N % 10) % 2\n        N //= 10\n\n    return str(result)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Decode the integer\n    number = str(int(N))\n    # Count the number of bits\n    length = len(number)\n    # Count the number of 1's\n    number_1 = 0\n    # Add the digits\n    while number!= '0':\n        number_1 += number[-1]\n        number = number[:-1]\n    # Convert to binary\n    binary = bin(number_1)[2:]\n    # Return the output\n    return binary", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if (N >= 10000):\n        return None\n    \n    binary = str(N)\n    res = 0\n    for digit in binary:\n        res += int(digit)*(2**len(binary))\n    return res", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    num = bin(N)[2:]\n    for i in xrange(len(num)):\n        sum += int(num[i])\n    return num", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    if N == 1:\n        return '1'\n    return str(sum(d for d in bin(N)[2:])) + '0'", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    bin_str = str(bin(N))\n    # the last digit should be 0 because the first 10 digit is 0\n    # bin_str[-10:] = bin_str[-9:-1] = bin_str[-8:-2] = bin_str[-7:-3] = bin_str[-6:-4] = \"0\"\n    sum_str = bin_str[-10:]+bin_str[-9:-1]+bin_str[-8:-2]+bin_str[-7:-3]+bin_str[-6:-4]\n    print(sum_str)\n    \nsolve(1000)\nsolve(150)\nsolve(147)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # DFS\n    def sumDigits(n):\n        binNum = str(n)\n        s = 0\n        for i in binNum:\n            s += int(i)\n            if s >= 10:\n                print('.', end='')\n                s = s - 10\n        print(' ', end='')\n    \n    for i in range(1, N + 1):\n        if N % i == 0:\n            sumDigits(N / i)\n        else:\n            sumDigits(N)\n        \nsolve(1000000)</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    binary_sum = \"\"\n    \n    #use while loop to check for digits\n    while N > 0:\n        #binary number of N\n        binary_sum += str(N % 2)+\"0\"\n        \n        #divide N by 2\n        N /= 2\n    \n    #stripping leading zeros\n    while binary_sum[0] == \"0\":\n        binary_sum = binary_sum[1:]\n    \n    return binary_sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = str(N)\n    total = 0\n    count = 0\n    for i in range(len(n)):\n        if n[i] == '1':\n            count += 1\n        else:\n            count = 0\n        total += count\n    return bin(total)[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    num = 0\n    while N!= 0:\n        num += int(N % 10)\n        N /= 10\n\n    print(bin(num))\n\nsolve(1000)\nsolve(150)\nsolve(147)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if not N > 0:\n        return 0\n    return bin(int(str(N)))[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    i = 1\n    sum = 0\n    while i <= int(N):\n        sum += int(N) % 2\n        i += 1\n    return \"1\" + bin(sum)[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum_digit = 0\n    \n    for n in range(1, N + 1):\n        sum_digit += int(bin(n)[2:])\n\n    return bin(sum_digit)[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if not(0 < N < 10000):\n        return None\n    total = 0\n    while(N!= 0):\n        N, rem = divmod(N, 2)\n        total += rem\n    return str(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    def get_digits(N):\n        \"\"\"Given a positive integer N, return the list of its digits in decimal format.\n        \n        Example\n            For N = 1000, the digits will be 1000 the output should be [\"1\", \"0\", \"0\"].\n            For N = 150, the digits will be 150 the output should be [\"1\", \"5\"].\n            For N = 147, the digits will be 147 the output should be [\"1\", \"2\", \"7\"].\n        \n        Variables:\n            @N integer\n                 Constraints: 0 \u2264 N \u2264 10000.\n        Output:\n            a list of integer\n    \"\"\"\n    \n    def get_bin_digits(s):\n        \"\"\"Given a string s, return the list of its digits in binary format.\n        \n        Example\n            For s = \"1\" the output should be [\"1\"].\n            For s = \"110\" the output should be [\"1\", \"1\"].\n            For s = \"1100\" the output should be [\"1\", \"1\", \"0\", \"0\", \"1\"].\n        \n        Variables:\n            @s string\n                 Constraints: len(s) <= 20.\n        Output:\n            a list of integer\n    \"\"\"\n    \n    def get_bin_sum(s):\n        \"\"\"Given a string s, return the sum of its digits in binary format."]]