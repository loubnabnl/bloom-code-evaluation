[["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number must be less than the length of input number\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'b')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'c')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'd')\n    if base == 10:\n        return str(x)\n    return str(x)[::-1].replace(str(x), '0')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('Base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'b')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'c')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'd')\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1].replace('10', 'e')\n    if base ==", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than number of digits\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'b')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'c')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'd')\n    if base == 10:\n        return str(x)\n    return str(x)[::-1].replace(str(x), '0' * (base - len(str(x))))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than the length of the number\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', '9')\n    if base == 7:\n        return str(x)[::-1].replace('7', '9')\n    if base == 8:\n        return str(x)[::-1].replace('8', '9')\n    if base == 9:\n        return str(x)[::-1].replace('9', '9')\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1].replace('9', '7')\n    if base == 12:\n        return str(x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return str(x).replace('0', '10')\n    if base == 3:\n        return str(x).replace('0', '11')\n    if base == 4:\n        return str(x).replace('0', '100')\n    if base == 5:\n        return str(x).replace('0', '101')\n    if base == 6:\n        return str(x).replace('0', '110')\n    if base == 7:\n        return str(x).replace('0', '111')\n    if base == 8:\n        return str(x).replace('0', '1110')\n    if base == 9:\n        return str(x).replace('0', '1111')\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base number must be less than the length of the number')\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('Base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base must be less than the length of the number')\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than or equal to the length of the number\")\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if x < base:\n        return change_base(x // base, base) + str(x % base)\n    else:\n        return change_base(x // (base ** -1), base) + str(x % (base ** -1))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return str(bin(x)[2:])\n    if base == 8:\n        return str(oct(x))\n    if base == 16:\n        return str(hex(x))\n    if base == 32:\n        return str(bin(x)[2:].zfill(8))\n    if base == 64:\n        return str(bin(x)[2:].zfill(16))\n    if base == 128:\n        return str(bin(x)[2:].zfill(32))\n    if base == 256:\n        return str(bin(x)[2:].zfill(64))\n    if base == 512:\n        return str(bin(x)[2:].zfill(128))\n    if base == 1024:\n        return str(bin(x)[2:].zfill(256))\n    if base == 2048:\n        return str(bin(x)[2:].zfill(512))\n    if base == 4096:\n        return str(bin(x)[2:].zfill(", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than the length of the number\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return str(x)[::-1]\n    if base == 16:\n        return str(x)[::-1].upper()\n    if base == 32:\n        return str(x)[::-1].upper()[::-1]\n    if base == 64:\n        return str(x)[::-1].upper()[::-1].upper()[::-1]\n    if base == 128:\n        return str(x)[::-1].upper()[::-1].upper()[::-1].upper()[::-1]\n    if base == 256:\n        return str(x)[::-1].upper()[::-1].upper()[::-1].upper()[::-1].upper()[::-1]\n    if base == 512:\n        return str(x)[::-1].upper()[::-1].upper()[::-1].", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed.')\n    if base < 2:\n        raise ValueError('Base numbers must be greater than 1.')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x /= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive.\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1.\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number must be less than the length of the input number.\")\n    result = []\n    while x:\n        result.append(x % base)\n        x //= base\n    result.reverse()\n    return ''.join(str(i) for i in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return \"-1\"\n    if x == 0:\n        return \"0\"\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 16:\n        return hex(x)[2:]\n    if base == 3:\n        return str(bin(x)[2:])[::-1]\n    if base == 9:\n        return str(bin(x)[2:])[::-1]\n    if base == 4:\n        return str(bin(x)[2:])[::-1]\n    if base == 5:\n        return str(bin(x)[2:])[::-1]\n    if base == 6:\n        return str(bin(x)[2:])[::-1]\n    if base == 7:\n        return str(bin(x)[2:])[::-1]\n    if base == 11:\n        return str(bin(x)[2:])[::-1]\n    if base == 13:\n        return str(bin(x)[2:])[::-1]\n    if base == 14:\n        return str(bin(x)[2:])[::-1]\n    if base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Number must be positive')\n    if base < 2:\n        raise ValueError('Base must be greater than 2')\n    if base > len(str(x)):\n        raise ValueError('Base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    elif base == 3:\n        return str(x)[::-1]\n    elif base == 4:\n        return str(x)[::-1].replace('7', '3')\n    elif base == 5:\n        return str(x)[::-1].replace('9', '4')\n    elif base == 6:\n        return str(x)[::-1].replace('9', '5')\n    elif base == 7:\n        return str(x)[::-1].replace('9', '6')\n    elif base == 8:\n        return str(x)[::-1].replace('9', '7')\n    elif base == 9:\n        return str(x)[::-1].replace('9', '8')\n    elif base == 10:\n        return str(x)\n    else:\n        raise ValueError('Base must be less than 10')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number cannot be negative.\")\n    if base < 2:\n        raise ValueError(\"Base number cannot be less than 2.\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number cannot be greater than the length of input number.\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return str(x)[2:]\n    if base == 16:\n        return str(x)[2:].upper()\n    if base == 32:\n        return str(x)[2:].upper()\n    if base == 64:\n        return str(x)[2:].upper()\n    if base == 128:\n        return str(x)[2:].upper()\n    if base == 256:\n        return str(x)[2:].upper()\n    if base == 512:\n        return str(x)[2:].upper()\n    if base == 1024:\n        return str(x)[2:].upper()\n    if base == 2048:\n        return str(x)[2:].upper()\n    if base == 4096:\n        return str(x)[2:].upper()\n    if base == 819", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 2:\n        return str(bin(x)[2:])\n    if base == 8:\n        return str(oct(x))\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return str(hex(x))\n    return str(x).zfill(len(str(x))/base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base < 3:\n        return '0'\n    if base < 4:\n        return '0'\n    if base < 5:\n        return '0'\n    if base < 6:\n        return '0'\n    if base < 7:\n        return '0'\n    if base < 8:\n        return '0'\n    if base < 9:\n        return '0'\n    if base < 10:\n        return '0'\n    if base < 11:\n        return '0'\n    if base < 12:\n        return '0'\n    if base < 13:\n        return '0'\n    if base < 14:\n        return '0'\n    if base < 15:\n        return '0'\n    if base < 16:\n        return '0'\n    if base < 17:\n        return '0'\n    if base < 18:\n        return '0'\n    if base < 19:\n        return '0'\n    if base < 20:\n        return '0'\n    if base < 21:\n        return '0'\n    if base < 22:\n        return '0'\n    if base < 23:\n        return '0'\n    if base < 24:\n        return '0'\n    if base < 25:\n        return '0'\n    if base < 26:\n        return '0'\n    if base < 27:\n        return '0'\n    if base < 28:\n        return '0'\n    if", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if x < 0:\n        return '-' + change_base(-x, base)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Can't convert negative number to base\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    result = []\n    while x!= 0:\n        result.append(x % base)\n        x //= base\n    result.reverse()\n    return \"\".join(str(i) for i in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base must be greater than 2')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1] + '0'\n    if base == 5:\n        return str(x)[::-1] + '5'\n    if base == 6:\n        return str(x)[::-1] + '6'\n    if base == 7:\n        return str(x)[::-1] + '7'\n    if base == 8:\n        return str(x)[::-1] + '8'\n    if base == 9:\n        return str(x)[::-1] + '9'\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1] + '9'\n    if base == 12:\n        return str(x)[::-1] + '9'\n    if base == 13:\n        return str(x)[::-1] + '9'\n    if base == 14:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    result = []\n    while x!= 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base numbers must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base numbers must be less than 10')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('1', '4')\n    if base == 5:\n        return str(x)[::-1].replace('1', '5')\n    if base == 6:\n        return str(x)[::-1].replace('1', '6')\n    if base == 7:\n        return str(x)[::-1].replace('1', '7')\n    if base == 8:\n        return str(x)[::-1].replace('1', '8')\n    if base == 9:\n        return str(x)[::-1].replace('1', '9')\n    if base == 10:\n        return str(x)\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x < base:\n        return str(x)\n    return change_base(x // base, base) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return str(x).replace('7', '3').replace('9', '5')\n    if base == 16:\n        return str(x).replace('15', '5').replace('17', '7')\n    if base == 32:\n        return str(x).replace('31', '7').replace('33', '9')\n    if base == 64:\n        return str(x).replace('63', '9').replace('65', '11')\n    if base == 128:\n        return str(x).replace('127', '11').replace('128', '13')\n    if base == 256:\n        return str(x).replace('255', '15').replace('256', '17')\n    if base == 512:\n        return str(x).replace('511', '17'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return str(-x)[::-1]\n    if x == 0:\n        return '0'\n    if base < 2:\n        return '0'\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1] + '.'\n    if base == 5:\n        return str(x)[::-1] + '.' + str(x % 5)\n    if base == 6:\n        return str(x)[::-1] + '.' + str(x % 6)\n    if base == 7:\n        return str(x)[::-1] + '.' + str(x % 7)\n    if base == 8:\n        return str(x)[::-1] + '.' + str(x % 8)\n    if base == 9:\n        return str(x)[::-1] + '.' + str(x % 9)\n    if base == 10:\n        return str(x)\n    return str(x)[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    result = []\n    while x!= 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return str(-x)[::-1]\n    if base < 2:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return bin(x)[2:]\n    if base == 64:\n        return hex(x)[2:]\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return bin(x)[2:]\n    if base == 64:\n        return hex(x)[2:]\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return bin(x)[2:]\n    if base == 64:\n        return hex(x)[2:]\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return bin(x)[2:]\n    if base == 64", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base numbers must be greater than 1')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return str(x)[2:]\n    if base == 16:\n        return str(x)[2:].upper()\n    if base == 32:\n        return str(x)[2:].upper()\n    if base == 64:\n        return str(x)[2:].upper()\n    if base == 128:\n        return str(x)[2:].upper()\n    if base == 256:\n        return str(x)[2:].upper()\n    if base == 512:\n        return str(x)[2:].upper()\n    if base == 1024:\n        return str(x)[2:].upper()\n    if base == 2048:\n        return str(x)[2:].upper()\n    if base == 4096:\n        return str(x)[2:].upper()\n    if base == 8192:\n        return str(x)[2:].upper()\n    if base == 16384:\n        return str(x)[2:].upper()\n    if", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[1:]\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return bin(x)[2:]\n    if base == 64:\n        return hex(x)[2:]\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[1:]\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return bin(x)[2:]\n    if base == 64:\n        return hex(x)[2:]\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[1:]\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return bin", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive.\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1.\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number must be less than the length of the input number.\")\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than the length of the number\")\n    if base == 2:\n        return bin(x)\n    if base == 8:\n        return oct(x)\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return hex(x)\n    if base == 32:\n        return bin(x, base=base)\n    if base == 64:\n        return hex(x, base=base)\n    if base == 128:\n        return bin(x, base=base)\n    if base == 256:\n        return hex(x, base=base)\n    if base == 1024:\n        return bin(x, base=base)\n    if base == 2048:\n        return hex(x, base=base)\n    if base == 4096:\n        return bin(x, base=base)\n    if base == 8192:\n        return hex(x, base=base)\n    if base == 16384:\n        return bin(x, base=base)\n    if base == 32768:\n        return hex(x, base=base)\n    if base == 65536", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)\n    if base == 16:\n        return hex(x)\n    if base < 10:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return hex(x)\n    if base == 8:\n        return oct(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base == 3:\n        return bin(x)[3:]\n    if base == 4:\n        return bin(x)[4:]\n    if base == 5:\n        return bin(x)[5:-1]\n    if base == 6:\n        return bin(x)[6:-1]\n    if base == 7:\n        return bin(x)[7:-1]\n    if base == 9:\n        return bin(x)[8:-1]\n    if base == 11:\n        return bin(x)[9:-1]\n    if base == 13:\n        return bin(x)[10:-1]\n    if base == 17:\n        return bin(x)[11:-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base numbers are less than 2')\n    if base > len(str(x)):\n        raise ValueError('base numbers are less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1] + '0'\n    if base == 5:\n        return str(x)[::-1] + '5'\n    if base == 6:\n        return str(x)[::-1] + '6'\n    if base == 7:\n        return str(x)[::-1] + '7'\n    if base == 8:\n        return str(x)[::-1] + '8'\n    if base == 9:\n        return str(x)[::-1] + '9'\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1] + '11'\n    if base == 12:\n        return str(x)[::-1] + '12'\n    if base == 13:\n        return str(x)[::-1] + '13'\n    if base == 14:\n        return str(", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not supported')\n    if base < 2:\n        raise ValueError('base numbers less than 2 are not supported')\n    if base > len(str(x)):\n        raise ValueError('base number is greater than the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1]\n    if base == 5:\n        return str(x)[::-1]\n    if base == 6:\n        return str(x)[::-1]\n    if base == 7:\n        return str(x)[::-1]\n    if base == 8:\n        return str(x)[::-1]\n    if base == 9:\n        return str(x)[::-1]\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1]\n    if base == 12:\n        return str(x)[::-1]\n    if base == 13:\n        return str(x)[::-1]\n    if base == 14:\n        return str(x)[::-1]\n    if base == 15:\n        return str(x)[::-1]\n    if base == 16:\n        return str(", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not supported')\n    if base < 2:\n        raise ValueError('Base must be greater than 2')\n    if base > len(str(x)):\n        raise ValueError('Base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'c')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'e')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'g')\n    if base == 10:\n        return str(x)\n    return ''", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than the length of the number\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1]\n    if base == 5:\n        return str(x)[::-1]\n    if base == 6:\n        return str(x)[::-1]\n    if base == 7:\n        return str(x)[::-1]\n    if base == 8:\n        return str(x)[::-1]\n    if base == 9:\n        return str(x)[::-1]\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1]\n    if base == 12:\n        return str(x)[::-1]\n    if base == 13:\n        return str(x)[::-1]\n    if base == 14:\n        return str(x)[::-1]\n    if base == 15:\n        return str(x)[::-1]\n    if base == 16:\n        return str(x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Input number must be positive.')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1.')\n    if base > len(str(x)):\n        raise ValueError('Base number must be less than the length of the input number.')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return str(x)[::-1]\n    if base == 16:\n        return str(x)[::-1].upper()\n    if base == 32:\n        return str(x)[::-1].upper().replace('L', '')\n    if base == 64:\n        return str(x)[::-1].upper().replace('L', '').replace('O', '')\n    if base == 128:\n        return str(x)[::-1].upper().replace('L', '').replace('O', '').replace('I', '')\n    if base == 256:\n        return str(x)[::-1].upper().replace('L', '').replace('O', '').replace('I', '').replace('V', '')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative number')\n    if base < 2:\n        raise ValueError('base must be greater than 2')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return str(x)[::-1]\n    if base == 16:\n        return str(x)[::-1]\n    if base == 32:\n        return str(x)[::-1]\n    if base == 64:\n        return str(x)[::-1]\n    if base == 128:\n        return str(x)[::-1]\n    if base == 256:\n        return str(x)[::-1]\n    if base == 512:\n        return str(x)[::-1]\n    if base == 1024:\n        return str(x)[::-1]\n    if base == 2048:\n        return str(x)[::-1]\n    if base == 4096:\n        return str(x)[::-1]\n    if base == 8192:\n        return str(x)[::-1]\n    if base == 16384:\n        return str(x)[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return str(-x)[::-1]\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base < 3:\n        return '0'\n    if base < 4:\n        return '0'\n    if base < 5:\n        return '0'\n    if base < 6:\n        return '0'\n    if base < 7:\n        return '0'\n    if base < 8:\n        return '0'\n    if base < 9:\n        return '0'\n    if base < 10:\n        return '0'\n    if base < 11:\n        return '0'\n    if base < 12:\n        return '0'\n    if base < 13:\n        return '0'\n    if base < 14:\n        return '0'\n    if base < 15:\n        return '0'\n    if base < 16:\n        return '0'\n    if base < 17:\n        return '0'\n    if base < 18:\n        return '0'\n    if base < 19:\n        return '0'\n    if base < 20:\n        return '0'\n    if base < 21:\n        return '0'\n    if base < 22:\n        return '0'\n    if base < 23:\n        return '0'\n    if base < 24:\n        return '0'\n    if base < 25:\n        return '0'\n    if base < 26:\n        return '0'\n    if base < 27:\n        return '0'\n    if base < 28:\n        return '0'\n    if base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base number must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'c')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'e')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'g')\n    if base == 10:\n        return str(x)\n    return str(x)[::-1].replace(str(x), str(x)[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than the length of the number\")\n    result = []\n    while x!= 0:\n        result.append(str(x % base))\n        x /= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('Base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1] + '.'\n    if base == 5:\n        return str(x)[::-1] + '.' + str(x)[::-1]\n    if base == 6:\n        return str(x)[::-1] + '.' + str(x)[::-1] + '.'\n    if base == 7:\n        return str(x)[::-1] + '.' + str(x)[::-1] + '.' + str(x)[::-1]\n    if base == 8:\n        return str(x)[::-1] + '.' + str(x)[::-1] + '.' + str(x)[::-1] + '.'\n    if base == 9:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return str(x)\n    if base < 3:\n        return '0'\n    if base == 3:\n        return str(x)\n    if base < 4:\n        return '0'\n    if base == 4:\n        return str(x)\n    if base < 5:\n        return '0'\n    if base == 5:\n        return str(x)\n    if base < 6:\n        return '0'\n    if base == 6:\n        return str(x)\n    if base < 7:\n        return '0'\n    if base == 7:\n        return str(x)\n    if base < 8:\n        return '0'\n    if base == 8:\n        return str(x)\n    if base < 9:\n        return '0'\n    if base == 9:\n        return str(x)\n    if base < 10:\n        return '0'\n    if base == 10:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'b')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'c')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'd')\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1].replace('10', 'e')\n    if base == 12:\n        return str(x)[", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative number')\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base numbers must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base numbers must be less than 10')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '8')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', '9')\n    if base == 7:\n        return str(x)[::-1].replace('7', '9')\n    if base == 8:\n        return str(x)[::-1].replace('8', '9')\n    if base == 9:\n        return str(x)[::-1].replace('9', '9')\n    return str(x)[::-1].replace(str(x), str(x)[::-1].replace(str(x)[-1], str(x)[-1] * base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than the length of the number\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)\n    if base == 16:\n        return hex(x)\n    if base < 10:\n        return str(x) + '0' * (base - len(str(x)))\n    return str(x) + '0' * (10 - len(str(x))) + str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than the length of the number\")\n    result = []\n    while x!= 0:\n        result.append(x % base)\n        x //= base\n    return \"\".join([str(x) for x in reversed(result)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Number must be positive')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base number must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'c')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'e')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'g')\n    if base == 10:\n        return str(x)\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base number must be less than the length of the number')\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return bin(x)[2:].zfill(4)\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return hex(x)[2:].zfill(8)\n    if base == 64:\n        return hex(x)[2:].zfill(16)\n    if base == 128:\n        return hex(x)[2:].zfill(32)\n    if base == 256:\n        return hex(x)[2:].zfill(64)\n    if base == 512:\n        return hex(x)[2:].zfill(128)\n    if base == 1024:\n        return hex(x)[2:].zfill(256)\n    if base == 2048:\n        return hex(", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative number')\n    if base < 2:\n        raise ValueError('base number is less than 2')\n    if base > len(str(x)):\n        raise ValueError('base number is greater than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return str(x)[::-1]\n    if base == 16:\n        return str(x)[::-1].upper()\n    if base == 32:\n        return str(x)[::-1].upper()[::-1]\n    if base == 64:\n        return str(x)[::-1].upper()[::-1].upper()[::-1]\n    if base == 128:\n        return str(x)[::-1].upper()[::-1].upper()[::-1].upper()[::-1]\n    if base == 256:\n        return str(x)[::-1].upper()[::-1].upper()[::-1].upper()[::-1].upper()[::-1]\n    if base == 512:\n        return str(x)[::-1].upper()[::-1].upper()[::-1].upper()", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Number must be positive\")\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return str(x)\n    if base == 16:\n        return str(x)\n    if base == 32:\n        return str(x)\n    if base == 64:\n        return str(x)\n    if base == 128:\n        return str(x)\n    if base == 256:\n        return str(x)\n    if base == 512:\n        return str(x)\n    if base == 1024:\n        return str(x)\n    if base == 2048:\n        return str(x)\n    if base == 4096:\n        return str(x)\n    if base == 8192:\n        return str(x)\n    if base == 16384:\n        return str(x)\n    if base == 32768:\n        return str(x)\n    if base == 65536:\n        return str(x)\n    if base == 131072:\n        return str(x)\n    if base == 262144:\n        return str(x)\n    if base == 524288:\n        return str(x)\n    if base == 1048576:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number must be less than the length of the input number\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'b')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'c')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'd')\n    if base == 10:\n        return str(x)\n    return str(x)[::-1].replace(str(x), '0' * (base - len(str(x))) + str(x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    result = []\n    while x:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than the length of the number\")\n    result = []\n    while x!= 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Input number must be positive.')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1.')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x == 10:\n        return 'A'\n    if x == 11:\n        return 'B'\n    if x == 12:\n        return 'C'\n    if x == 13:\n        return 'D'\n    if x == 14:\n        return 'E'\n    if x == 15:\n        return 'F'\n    if x == 16:\n        return 'G'\n    if x == 17:\n        return 'H'\n    if x == 18:\n        return 'I'\n    if x == 19:\n        return 'J'\n    if x == 20:\n        return 'K'\n    if x == 21:\n        return 'L'\n    if x == 22:\n        return 'M", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number must be less than the length of the input number\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('1', '4')\n    if base == 5:\n        return str(x)[::-1].replace('1', '5')\n    if base == 6:\n        return str(x)[::-1].replace('1', '6')\n    if base == 7:\n        return str(x)[::-1].replace('1', '7')\n    if base == 8:\n        return str(x)[::-1].replace('1', '8')\n    if base == 9:\n        return str(x)[::-1].replace('1', '9')\n    if base == 10:\n        return str(x)\n    return str(x)[::-1].replace('1', str(base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base numbers must be greater than 1')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"negative number not allowed\")\n    if base < 2:\n        raise ValueError(\"base number must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base number must be less than length of input number\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace(\"2\", \"4\")\n    if base == 5:\n        return str(x)[::-1].replace(\"2\", \"5\")\n    if base == 6:\n        return str(x)[::-1].replace(\"2\", \"6\")\n    if base == 7:\n        return str(x)[::-1].replace(\"2\", \"7\")\n    if base == 8:\n        return str(x)[::-1].replace(\"2\", \"8\")\n    if base == 9:\n        return str(x)[::-1].replace(\"2\", \"9\")\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1].replace(\"2\", \"10\")\n    if base == 12:\n        return str(", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than or equal to the length of the number\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return str(x)[::-1]\n    if base == 16:\n        return str(x)[::-1].upper()\n    if base == 32:\n        return str(x)[::-1].upper()[::-1]\n    if base == 64:\n        return str(x)[::-1].upper()[::-1].upper()[::-1]\n    if base == 128:\n        return str(x)[::-1].upper()[::-1].upper()[::-1].upper()[::-1]\n    if base == 256:\n        return str(x)[::-1].upper()[::-1].upper()[::-1].upper()[::-1].upper()[::-1]\n    if base == 512:\n        return str(x)[::-1].upper()[::-1].upper()[", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base < 2:\n        return '0'\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[-2:]\n    if base == 4:\n        return str(x)[-3:]\n    if base == 5:\n        return str(x)[-4:]\n    if base == 6:\n        return str(x)[-5:]\n    if base == 7:\n        return str(x)[-6:]\n    if base == 8:\n        return str(x)[-7:]\n    if base == 9:\n        return str(x)[-8:]\n    if base == 10:\n        return str(x)\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Number must be positive')\n    if base < 2:\n        raise ValueError('Base must be greater than 2')\n    if base > len(str(x)):\n        raise ValueError('Base must be less than the length of the number')\n    result = []\n    while x!= 0:\n        result.append(x % base)\n        x //= base\n    result.reverse()\n    return ''.join(str(i) for i in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not supported')\n    if base < 2:\n        raise ValueError('Base numbers less than 2 are not supported')\n    if base > len(str(x)):\n        raise ValueError('Base numbers greater than the number of digits are not supported')\n    return str(x).zfill(len(str(x))/base) + str(x%base).zfill(1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x < base:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than or equal to len(str(x))\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'c')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'e')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'g')\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1].replace('10', 'j')\n    if base == 12:\n        return str", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not supported')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base number must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'c')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'e')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'g')\n    if base == 10:\n        return str(x)\n    return ''", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        raise ValueError('Base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base must be less than the length of the number')\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return bin(x)[2:].zfill(len(str(x)) // 3)\n    if base == 16:\n        return bin(x)[2:].zfill(len(str(x)) // 4)\n    if base == 32:\n        return bin(x)[2:].zfill(len(str(x)) // 5)\n    if base == 64:\n        return bin(x)[2:].zfill(len(str(x)) // 6)\n    if base == 128:\n        return bin(x)[2:].zfill(len(str(x)) // 7)\n    if base == 256:\n        return bin(x)[2:].zfill(len(str(x)) // 8)\n    if base == 512", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return str(x)\n    if base < 3:\n        return '0'\n    if base == 3:\n        return str(x)\n    if base < 4:\n        return '0'\n    if base == 4:\n        return str(x)\n    if base < 5:\n        return '0'\n    if base == 5:\n        return str(x)\n    if base < 6:\n        return '0'\n    if base == 6:\n        return str(x)\n    if base < 7:\n        return '0'\n    if base == 7:\n        return str(x)\n    if base < 8:\n        return '0'\n    if base == 8:\n        return str(x)\n    if base < 9:\n        return '0'\n    if base == 9:\n        return str(x)\n    if base < 10:\n        return '0'\n    if base == 10:\n        return str(x)\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base number must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1]\n    if base == 5:\n        return str(x)[::-1]\n    if base == 6:\n        return str(x)[::-1]\n    if base == 7:\n        return str(x)[::-1]\n    if base == 8:\n        return str(x)[::-1]\n    if base == 9:\n        return str(x)[::-1]\n    if base == 10:\n        return str(x)\n    return '0' * (base - len(str(x))) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"negative numbers are not allowed\")\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x)\n    result = ''\n    while x > 0:\n        x, r = divmod(x, base)\n        result = str(r) + result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[1:]\n    if base == 16:\n        return hex(x)[2:]\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base < 8:\n        return change_base(x, 2)[::-1]\n    if base < 16:\n        return change_base(x, 8)[::-1]\n    if base < 32:\n        return change_base(x, 16)[::-1]\n    raise ValueError('base must be less than 32')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1] + '.'\n    if base == 5:\n        return str(x)[::-1] + '.' + str(x % 5)\n    if base == 6:\n        return str(x)[::-1] + '.' + str(x % 6)\n    if base == 7:\n        return str(x)[::-1] + '.' + str(x % 7)\n    if base == 8:\n        return str(x)[::-1] + '.' + str(x % 8)\n    if base == 9:\n        return str(x)[::-1] + '.' + str(x % 9)\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1] + '.' + str(x % 11)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return str(x)\n    if base == 16:\n        return str(x)\n    if base == 32:\n        return str(x)\n    if base == 64:\n        return str(x)\n    if base == 128:\n        return str(x)\n    if base == 256:\n        return str(x)\n    if base == 512:\n        return str(x)\n    if base == 1024:\n        return str(x)\n    if base == 2048:\n        return str(x)\n    if base == 4096:\n        return str(x)\n    if base == 8192:\n        return str(x)\n    if base == 16384:\n        return str(x)\n    if base == 32768:\n        return str(x)\n    if base == 65536:\n        return str(x)\n    if base == 131072:\n        return str(x)\n    if base == 262144:\n        return str(x)\n    if base == 524288:\n        return str(x)\n    if base ==", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base number must be less than the length of the number')\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return bin(x)[2:].zfill(4)\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return hex(x)[2:].zfill(8)\n    if base == 64:\n        return hex(x)[2:].zfill(16)\n    if base == 128:\n        return hex(x)[2:].zfill(32)\n    if base == 256:\n        return hex(x)[2:].zfill(64)\n    if base == 512:\n        return hex(x)[2:].zfill(128)\n    if base == 1024:\n        return hex(x)[2:].zfill(256)\n    if", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Can't convert negative number to base %s\" % base)\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return str(x)\n    if base == 16:\n        return str(x)\n    if base == 32:\n        return str(x)\n    if base == 64:\n        return str(x)\n    if base == 128:\n        return str(x)\n    if base == 256:\n        return str(x)\n    if base == 512:\n        return str(x)\n    if base == 1024:\n        return str(x)\n    if base == 2048:\n        return str(x)\n    if base == 4096:\n        return str(x)\n    if base == 8192:\n        return str(x)\n    if base == 16384:\n        return str(x)\n    if base == 32768:\n        return str(x)\n    if base == 65536:\n        return str(x)\n    if base == 131072:\n        return str(x)\n    if base == 262144:\n        return str(x)\n    if base == 524288:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 16:\n        return hex(x)[2:]\n    if base < 10:\n        return str(x).zfill(len(str(base)) + 1)\n    if base == 10:\n        return str(x)\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('Base numbers must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base numbers must be less than 10')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('2', '3')\n    if base == 5:\n        return str(x)[::-1].replace('2', '4')\n    if base == 6:\n        return str(x)[::-1].replace('2', '5')\n    if base == 7:\n        return str(x)[::-1].replace('2', '6')\n    if base == 8:\n        return str(x)[::-1].replace('2', '7')\n    if base == 9:\n        return str(x)[::-1].replace('2', '8')\n    if base == 10:\n        return str(x)\n    return str(x)[::-1].replace('2', str(base - 1))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers not allowed')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if x < base:\n        return change_base(x // base, base) + str(x % base)\n    return change_base(x // base, base) + str(base - x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return str(bin(x)[2:])\n    if base == 8:\n        return str(oct(x))\n    if base == 16:\n        return str(hex(x))\n    if base < 10:\n        return str(int(x))\n    return str(int(x)/base**(len(str(x))-1))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 2:\n        return str(bin(x)[2:])\n    elif base == 8:\n        return str(oct(x))\n    elif base == 10:\n        return str(x)\n    else:\n        return str(x).zfill(len(str(x))/base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[1:]\n    if base == 16:\n        return hex(x)[2:]\n    if base < 10:\n        return str(x) + '0' * (base - len(str(x)))\n    return str(x) + '0' * (base - len(str(x)) - 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not supported.')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1.')\n    if base > len(str(x)):\n        raise ValueError('Base number must be less than the length of the number.')\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x /= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x < base:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than length of number\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    result = []\n    while x:\n        result.append(str(x % base))\n        x //= base\n    return \"\".join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number cannot be negative.\")\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        raise ValueError(\"Base number cannot be less than 2.\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number cannot be greater than the length of input number.\")\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive.\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1.\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number must be less than the length of the input number.\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1] + str(x)[::-1]\n    if base == 5:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    if base == 6:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    if base == 7:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    if base == 8:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not supported.')\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not supported')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base number must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1] + '0'\n    if base == 5:\n        return str(x)[::-1] + '00'\n    if base == 6:\n        return str(x)[::-1] + '000'\n    if base == 7:\n        return str(x)[::-1] + '111'\n    if base == 8:\n        return str(x)[::-1] + '222'\n    if base == 9:\n        return str(x)[::-1] + '999'\n    if base == 10:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers not allowed')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base < len(str(x)):\n        return str(x)[::-1]\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than the length of the number\")\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x /= base\n    return \"\".join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('x must be greater than 0')\n    if base < 2:\n        raise ValueError('base must be greater than 2')\n    if base > len(str(x)):\n        raise ValueError('base must be less than or equal to len(str(x))')\n    if base == 2:\n        return str(x)\n    elif base == 3:\n        return str(x)[::-1]\n    elif base == 4:\n        return str(x)[::-1] + '0'\n    elif base == 5:\n        return str(x)[::-1] + '5'\n    elif base == 6:\n        return str(x)[::-1] + '6'\n    elif base == 7:\n        return str(x)[::-1] + '7'\n    elif base == 8:\n        return str(x)[::-1] + '8'\n    elif base == 9:\n        return str(x)[::-1] + '9'\n    elif base == 10:\n        return str(x)\n    else:\n        raise ValueError('base must be less than or equal to 10')\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1] + str(x)[::-1]\n    if base == 5:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    if base == 6:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    if base == 7:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    if base == 8:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number must be less than the length of the input number\")\n    result = []\n    while x!= 0:\n        result.append(x % base)\n        x //= base\n    result.reverse()\n    return \"\".join([str(x) for x in result])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base number must be less than the length of the number')\n    if base == 2:\n        return str(bin(x)[2:])\n    elif base == 8:\n        return str(bin(x)[2:]).zfill(len(str(x)) // 2)\n    elif base == 10:\n        return str(x)\n    else:\n        return str(bin(x)[2:]).zfill(len(str(x)) // (2 ** (len(str(x)) - base)))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed.')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('Base must be greater than 1.')\n    if base > len(str(x)):\n        raise ValueError('Base must be less than the length of the number.')\n\n    result = []\n    while x!= 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Input number must be positive')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base number must be less than the length of the input number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1] + str(x)[::-1]\n    if base == 5:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    if base == 6:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    if base == 7:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    if base == 8:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('Base numbers must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base numbers must be less than 10')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'b')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'c')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'd')\n    if base == 10:\n        return str(x)\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number must be less than the length of the input number\")\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x /= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative number')\n    if base < 2:\n        raise ValueError('base must be greater than 2')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('Base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base must be less than the length of the number')\n    result = []\n    while x:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('x must be greater than 0')\n    if base < 2:\n        raise ValueError('base must be greater than 2')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    elif base == 3:\n        return str(x)[::-1]\n    elif base == 4:\n        return str(x)[::-1] + str(x)[::-1]\n    elif base == 5:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    elif base == 6:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    elif base == 7:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    elif base == 8:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x)\n    result = []\n    while x!= 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x)\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('Base must be greater than 2')\n    if base > len(str(x)):\n        raise ValueError('Base must be less than the length of the number')\n    if base == 2:\n        return str(bin(x)[2:])\n    elif base == 3:\n        return str(bin(x)[3:])\n    elif base == 4:\n        return str(bin(x)[4:])\n    elif base == 5:\n        return str(bin(x)[5:-1])\n    elif base == 6:\n        return str(bin(x)[6:-1])\n    elif base == 7:\n        return str(bin(x)[7:-1])\n    elif base == 8:\n        return str(bin(x)[8:-1])\n    elif base == 9:\n        return str(bin(x)[9:-1])\n    elif base == 10:\n        return str(x)\n    else:\n        return str(bin(x)[2:])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Can't change base of negative number\")\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"Base must be less than length of number\")\n    if base == 2:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative number')\n    if base < 2:\n        raise ValueError('base number must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base number must be less than the length of the number')\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x)\n    else:\n        return str(x // base) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x)\n    if x == base:\n        return '1'\n    return change_base(x // base, base) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 16:\n        return hex(x)[2:]\n    if base < 2:\n        return '0'\n    if base < 8:\n        return change_base(x, 2)[::-1]\n    if base < 16:\n        return change_base(x, 8)[::-1]\n    if base < 32:\n        return change_base(x, 16)[::-1]\n    return change_base(x, 32)[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return str(-x)[::-1]\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base > len(str(x)):\n        return '0'\n    return str(x)[::-1].zfill(len(str(x))/base)[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('x must be a positive integer')\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    result = []\n    while x!= 0:\n        result.append(str(x % base))\n        x /= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('Base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base must be less than the length of the number')\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not supported')\n    if base < 2:\n        raise ValueError('Base must be greater than 2')\n    if base > len(str(x)):\n        raise ValueError('Base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'b')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'c')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'd')\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1].replace('10', 'e')\n    if base == 12:\n        return str(x)[", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed.')\n    if base < 2:\n        raise ValueError('Base numbers must be greater than 1.')\n    if base > len(str(x)):\n        raise ValueError('Base numbers must be less than the length of the number.')\n    if base == 2:\n        return str(x)\n    elif base == 3:\n        return str(x)[::-1]\n    elif base == 4:\n        return str(x)[::-1].replace('4', '8')\n    elif base == 5:\n        return str(x)[::-1].replace('5', '9')\n    elif base == 6:\n        return str(x)[::-1].replace('6', '9')\n    elif base == 7:\n        return str(x)[::-1].replace('7', '9')\n    elif base == 8:\n        return str(x)[::-1].replace('8', '9')\n    elif base == 9:\n        return str(x)[::-1].replace('9', '9')\n    elif base == 10:\n        return str(x)\n    else:\n        raise ValueError('Base numbers must be less than 10.')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number must be less than the length of the input number\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'b')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'c')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'd')\n    if base == 10:\n        return str(x)\n    return str(x)[::-1].replace(str(x), '0' * (base - len(str(x))) + str(x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'c')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'e')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'g')\n    if base == 10:\n        return str(x)\n    return str(x)[::-1].replace(str(x), '').zfill(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return bin(x)[2:].zfill(3)\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return hex(x)[2:].zfill(8)\n    if base == 64:\n        return hex(x)[2:].zfill(16)\n    if base == 128:\n        return hex(x)[2:].zfill(32)\n    if base == 256:\n        return hex(x)[2:].zfill(64)\n    if base == 512:\n        return hex(x)[2:].zfill(128)\n    if base == 1024:\n        return hex(x)[2:].zfill(256)\n    if base == 2048:\n        return hex(x)[2:].zfill(512)\n    if base == 4096:\n        return hex(x)[2:].zfill(1024)\n    if base == 8192:\n        return hex(x)[2:].", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers not allowed')\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1]\n    if base == 5:\n        return str(x)[::-1]\n    if base == 6:\n        return str(x)[::-1]\n    if base == 7:\n        return str(x)[::-1]\n    if base == 8:\n        return str(x)[::-1]\n    if base == 9:\n        return str(x)[::-1]\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1]\n    if base == 12:\n        return str(x)[::-1]\n    if base == 13:\n        return str(x)[::-1]\n    if base == 14:\n        return str(x)[::-1]\n    if base == 15:\n        return str(x)[::-1]\n    if base == 16:\n        return str(x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('Base must be greater than 2')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return str(x)\n    if base == 16:\n        return hex(x)\n    if base == 32:\n        return hex(x)\n    if base == 64:\n        return hex(x)\n    if base == 128:\n        return hex(x)\n    if base == 256:\n        return hex(x)\n    if base == 512:\n        return hex(x)\n    if base == 1024:\n        return hex(x)\n    if base == 2048:\n        return hex(x)\n    if base == 4096:\n        return hex(x)\n    if base == 8192:\n        return hex(x)\n    if base == 16384:\n        return hex(x)\n    if base == 32768:\n        return hex(x)\n    if base == 65536:\n        return hex(x)\n    if base == 131072:\n        return hex(x)\n    if base == 262144:\n        return hex(x)\n    if base == 524288:\n        return hex(x)\n    if base == 1048576:\n        return hex(x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base numbers must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base numbers must be less than 10')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[-2:]\n    if base == 4:\n        return str(x)[-3:]\n    if base == 5:\n        return str(x)[-4:]\n    if base == 6:\n        return str(x)[-5:]\n    if base == 7:\n        return str(x)[-6:]\n    if base == 8:\n        return str(x)[-7:]\n    if base == 9:\n        return str(x)[-8:]\n    if base == 10:\n        return str(x)\n    return '0' * (base - len(str(x))) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return bin(x)[2:].zfill(3)\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return hex(x)[2:].zfill(8)\n    if base == 64:\n        return hex(x)[2:].zfill(16)\n    return 'ERROR'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1] + str(x)[::-1]\n    if base == 5:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    if base == 6:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    if base == 7:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    if base == 8:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1] + str(x)[::-1]\n    if base == 5:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    if base == 6:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    if base == 7:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::-1]\n    if base == 8:\n        return str(x)[::-1] + str(x)[::-1] + str(x)[::-1] + str(x)[::", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return bin(x)[2:]\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return hex(x)[2:]\n    if base == 64:\n        return hex(x)[2:]\n    if base == 128:\n        return hex(x)[2:]\n    if base == 256:\n        return hex(x)[2:]\n    if base == 512:\n        return hex(x)[2:]\n    if base == 1024:\n        return hex(x)[2:]\n    if base == 2048:\n        return hex(x)[2:]\n    if base == 4096:\n        return hex(x)[2:]\n    if base == 8192:\n        return hex(x)[2:]\n    if base == 16384:\n        return hex(x)[2:]\n    if base == 32768:\n        return hex(x)[2:]\n    if base == 65536:\n        return hex(x)[2:]\n    if base == 131072:\n        return hex(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 16:\n        return hex(x)[2:]\n    if base < 10:\n        return str(x)\n    return '0' * (10 - base) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        raise ValueError('Base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base must be less than the length of the number')\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return bin(x)[2:].zfill(len(str(x)) // 3)\n    if base == 16:\n        return bin(x)[2:].zfill(len(str(x)) // 4)\n    if base == 32:\n        return bin(x)[2:].zfill(len(str(x)) // 5)\n    if base == 64:\n        return bin(x)[2:].zfill(len(str(x)) // 6)\n    if base == 128:\n        return bin(x)[2:].zfill(len(str(x)) // 7)\n    if base == 256:\n        return bin(x)[2:].zfill(len(str(x)) // 8)\n    if base == 512", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base numbers must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base numbers must be less than 10')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    result = ''\n    while x!= 0:\n        result = str(x % base) + result\n        x /= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base number must be less than the length of the number')\n    result = []\n    while x!= 0:\n        result.append(x % base)\n        x //= base\n    result.reverse()\n    return ''.join(str(x) for x in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base must be greater than 2')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    elif base == 3:\n        return str(x)[-2:]\n    elif base == 4:\n        return str(x)[-3:]\n    elif base == 5:\n        return str(x)[-4:]\n    elif base == 6:\n        return str(x)[-5:]\n    elif base == 7:\n        return str(x)[-6:]\n    elif base == 8:\n        return str(x)[-7:]\n    elif base == 9:\n        return str(x)[-8:]\n    elif base == 10:\n        return str(x)\n    else:\n        raise ValueError('base must be less than 10')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return str(x).replace('0', '')\n    if base == 3:\n        return str(x).replace('0', '').replace('1', '')\n    if base == 4:\n        return str(x).replace('0', '').replace('1', '').replace('2', '')\n    if base == 5:\n        return str(x).replace('0', '').replace('1', '').replace('2', '').replace('3', '')\n    if base == 6:\n        return str(x).replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '')\n    if base == 7:\n        return str(x).replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '')\n    if base == 8:\n        return str(x).replace('0', '').replace(", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than length of number\")\n    result = []\n    while x:\n        x, r = divmod(x, base)\n        result.append(str(r))\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x < base:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than the length of the number\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('2', '6')\n    if base == 5:\n        return str(x)[::-1].replace('2', '5')\n    if base == 6:\n        return str(x)[::-1].replace('2', '6')\n    if base == 7:\n        return str(x)[::-1].replace('2', '7')\n    if base == 8:\n        return str(x)[::-1].replace('2', '8')\n    if base == 9:\n        return str(x)[::-1].replace('2', '9')\n    if base == 10:\n        return str(x)\n    return str(x)[::-1].replace(str(x), '0' * (base - len(str(x))) + str(x))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    s = []\n    while x!= 0:\n        s.append(str(x % base))\n        x //= base\n    return ''.join(reversed(s))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive.\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1.\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive.\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1.\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number must be less than the length of the input number.\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 16:\n        return hex(x)[2:]\n    if base < len(str(x)):\n        return str(x)[base:]\n    return '0' * (base - len(str(x))) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Can't change base of negative number\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number must be less than the length of the number\")\n    if base == 2:\n        return str(x)\n    else:\n        return str(x)[::-1].zfill(len(str(x))/base)[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return str(x).replace('7', '8')\n    if base == 16:\n        return str(x).replace('f', '8')\n    if base == 32:\n        return str(x).replace('f', '9')\n    if base == 64:\n        return str(x).replace('f', '9')\n    if base == 128:\n        return str(x).replace('f', '9')\n    if base == 256:\n        return str(x).replace('f', '9')\n    if base == 512:\n        return str(x).replace('f', '9')\n    if base == 1024:\n        return str(x).replace('f', '9')\n    if base == 2048:\n        return str(x).replace('f', '9')\n    if base == 4096:\n        return str(x).replace('f', '9')\n    if base == 8192:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 2:\n        return bin(x)[2:]\n    elif base == 8:\n        return oct(x)[1:]\n    elif base == 10:\n        return str(x)\n    else:\n        return str(x).zfill(len(str(x).zfill(len(str(x) + 1) + 1)))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Can't convert negative number to base\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"Can't convert number to base\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'b')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'c')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'd')\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1].replace('10', 'e')\n    if base == 12:\n        return str(x)[::-1].", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return \"-1\"\n    if x == 0:\n        return \"0\"\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative number')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('base number must be greater than 1')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base < 10:\n        return str(x)\n    if base == 16:\n        return hex(x)\n    if base == 8:\n        return oct(x)\n    if base == 16:\n        return hex(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return oct(x)\n    if base == 16:\n        return hex(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return oct(x)\n    if base == 16:\n        return hex(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return oct(x)\n    if base == 16:\n        return hex(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return oct(x)\n    if base == 16:\n        return hex(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return oct(x)\n    if base == 16:\n        return hex(x)\n    if base == 10:\n        return str", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Number must be positive')\n    if base < 2:\n        raise ValueError('Base must be greater than 2')\n    if base > len(str(x)):\n        raise ValueError('Base must be less than the length of the number')\n    result = []\n    while x:\n        x, r = divmod(x, base)\n        result.append(str(r))\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Can't change negative numbers\")\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"Base must be less than number of digits\")\n    return str(x)[::-1].zfill(base)[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return hex(x)[2:]\n    return str(x)[2:]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('x must be greater than or equal to 0')\n    if base < 2:\n        raise ValueError('base must be greater than or equal to 2')\n    if base > len(str(x)):\n        raise ValueError('base must be less than or equal to the length of the string representation of x')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'c')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'e')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'i')\n    if base == 10:\n        return str(x)\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 16:\n        return hex(x)[2:]\n    if base < 2:\n        raise ValueError('base must be greater than 2')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    return str(x)[::-1].zfill(base)[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return str(-x)\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return str(x)\n    if base < 3:\n        return '0'\n    if base == 3:\n        return str(x)\n    if base < 4:\n        return '0'\n    if base == 4:\n        return str(x)\n    if base < 5:\n        return '0'\n    if base == 5:\n        return str(x)\n    if base < 6:\n        return '0'\n    if base == 6:\n        return str(x)\n    if base < 7:\n        return '0'\n    if base == 7:\n        return str(x)\n    if base < 8:\n        return '0'\n    if base == 8:\n        return str(x)\n    if base < 9:\n        return '0'\n    if base == 9:\n        return str(x)\n    if base < 10:\n        return '0'\n    if base == 10:\n        return str(x)\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not supported')\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', '9')\n    if base == 7:\n        return str(x)[::-1].replace('7', '9')\n    if base == 8:\n        return str(x)[::-1].replace('8', '9')\n    if base == 9:\n        return str(x)[::-1].replace('9', '9')\n    if base == 10:\n        return str(x)\n    return str(x)[::-1].replace(str(x), '0' * (base - len(str(x))) + str(x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return str(x)\n    if base < 3:\n        return '0'\n    if base == 3:\n        return str(x)\n    if base < 4:\n        return '0'\n    if base == 4:\n        return str(x)\n    if base < 5:\n        return '0'\n    if base == 5:\n        return str(x)\n    if base < 6:\n        return '0'\n    if base == 6:\n        return str(x)\n    if base < 7:\n        return '0'\n    if base == 7:\n        return str(x)\n    if base < 8:\n        return '0'\n    if base == 8:\n        return str(x)\n    if base < 9:\n        return '0'\n    if base == 9:\n        return str(x)\n    if base < 10:\n        return '0'\n    if base == 10:\n        return str(x)\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not supported')\n    if base < 2:\n        raise ValueError('Base numbers must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base numbers must be less than 10')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1]\n    if base == 5:\n        return str(x)[::-1]\n    if base == 6:\n        return str(x)[::-1]\n    if base == 7:\n        return str(x)[::-1]\n    if base == 8:\n        return str(x)[::-1]\n    if base == 9:\n        return str(x)[::-1]\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1]\n    if base == 12:\n        return str(x)[::-1]\n    if base == 13:\n        return str(x)[::-1]\n    if base == 14:\n        return str(x)[::-1]\n    if base == 15:\n        return str(x)[::-1]\n    if base == 16:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than the length of the number\")\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'b')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'c')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'd')\n    if base == 10:\n        return str(x)\n    return str(x)[::-1].replace(str(x), str(x)[::-1].replace(str(x)[::-1], str", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base number must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base number must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '6')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', '9')\n    if base == 7:\n        return str(x)[::-1].replace('7', '9')\n    if base == 8:\n        return str(x)[::-1].replace('8', '9')\n    if base == 9:\n        return str(x)[::-1].replace('9', '9')\n    if base == 10:\n        return str(x)\n    return '0' * (base - len(str(x))) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers not allowed')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    result = []\n    while x!= 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not supported')\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers not allowed')\n    if base < 2:\n        raise ValueError('base must be greater than 2')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    result = []\n    while x:\n        result.append(x % base)\n        x //= base\n    result.reverse()\n    return ''.join(str(i) for i in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base < 3:\n        return change_base(x, 2)\n    if base < 4:\n        return change_base(x, 3)\n    if base < 5:\n        return change_base(x, 4)\n    if base < 6:\n        return change_base(x, 5)\n    if base < 7:\n        return change_base(x, 6)\n    if base < 8:\n        return change_base(x, 7)\n    if base < 9:\n        return change_base(x, 8)\n    if base < 10:\n        return change_base(x, 9)\n    return change_base(x, 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Input number must be positive')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base number must be less than the length of input number')\n    if base == 2:\n        return str(x)\n    elif base == 3:\n        return str(x)[::-1]\n    elif base == 4:\n        return str(x)[::-1].replace('4', '7')\n    elif base == 5:\n        return str(x)[::-1].replace('5', '9')\n    elif base == 6:\n        return str(x)[::-1].replace('6', '9')\n    elif base == 7:\n        return str(x)[::-1].replace('7', '9')\n    elif base == 8:\n        return str(x)[::-1].replace('8', '9')\n    elif base == 9:\n        return str(x)[::-1].replace('9', '9')\n    elif base == 10:\n        return str(x)\n    else:\n        raise ValueError('Base number must be less than 10')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive.\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1.\")\n    if base > len(str(x)):\n        raise ValueError(\"Input number must be greater than base number.\")\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return \"\".join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base < 2:\n        return change_base(x, 10)\n    if base == 2:\n        return str(bin(x)[2:])\n    if base == 8:\n        return str(oct(x))\n    if base == 16:\n        return str(hex(x))\n    if base == 10:\n        return str(x)\n    return '0' * (base - 1) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than the length of the number\")\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return bin(x)[2:].zfill(3)\n    if base == 16:\n        return bin(x)[2:].zfill(4)\n    if base == 32:\n        return bin(x)[2:].zfill(5)\n    if base == 64:\n        return bin(x)[2:].zfill(6)\n    if base == 128:\n        return bin(x)[2:].zfill(7)\n    if base == 256:\n        return bin(x)[2:].zfill(8)\n    if base == 512:\n        return bin(x)[2:].zfill(9)\n    if base == 1024:\n        return bin(x)[2:].zfill(10)\n    if base == 2048:\n        return bin(x)[2:].zfill(11)\n    if base == 4096:\n        return bin(x)[2:].zfill(12)\n    if base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[1:]\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return bin(x)[2:]\n    if base == 64:\n        return hex(x)[2:]\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return bin(x)[2:]\n    if base == 64:\n        return hex(x)[2:]\n    return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('Base numbers must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base numbers must be less than 10')\n    if base == 2:\n        return str(x)\n    elif base == 3:\n        return str(x)[::-1]\n    elif base == 4:\n        return str(x)[::-1].replace('4', '7')\n    elif base == 5:\n        return str(x)[::-1].replace('5', '9')\n    elif base == 6:\n        return str(x)[::-1].replace('6', '9')\n    elif base == 7:\n        return str(x)[::-1].replace('7', '9')\n    elif base == 8:\n        return str(x)[::-1].replace('8', '9')\n    elif base == 9:\n        return str(x)[::-1].replace('9', '9')\n    elif base == 10:\n        return str(x)\n    else:\n        raise ValueError('Base numbers must be less than 10')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[1:]\n    if base == 16:\n        return hex(x)[2:]\n    if base < 2:\n        return '0'\n    if base < 8:\n        return '{:0>{}}'.format(x, base)\n    if base < 16:\n        return '{:0>{}}'.format(x, base)\n    if base < 32:\n        return '{:0>{}}'.format(x, base)\n    if base < 64:\n        return '{:0>{}}'.format(x, base)\n    if base < 128:\n        return '{:0>{}}'.format(x, base)\n    if base < 256:\n        return '{:0>{}}'.format(x, base)\n    if base < 512:\n        return '{:0>{}}'.format(x, base)\n    if base < 1024:\n        return '{:0>{}}'.format(x, base)\n    if base < 2048:\n        return '{:0>{}}'.format(x, base)\n    if base < 4096:\n        return '{:0>{}}'.format(", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return \"-1\"\n    if x == 0:\n        return \"0\"\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number must be less than the length of the input number\")\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x == 10:\n        return 'A'\n    if x == 11:\n        return 'B'\n    if x == 12:\n        return 'C'\n    if x == 13:\n        return 'D'\n    if x == 14:\n        return 'E'\n    if x == 15:\n        return 'F'\n    if x == 16:\n        return 'G'\n    if x == 17:\n        return 'H'\n    if x == 18:\n        return 'I'\n    if x == 19:\n        return 'J'\n    if x == 20:\n        return 'K'\n    if x == 21:\n        return 'L'\n    if", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not supported')\n    if base < 2:\n        raise ValueError('Base numbers less than 2 are not supported')\n    if base > len(str(x)):\n        raise ValueError('Base number too large')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('2', '3')\n    if base == 5:\n        return str(x)[::-1].replace('2', '4')\n    if base == 6:\n        return str(x)[::-1].replace('2', '5')\n    if base == 7:\n        return str(x)[::-1].replace('2', '6')\n    if base == 8:\n        return str(x)[::-1].replace('2', '7')\n    if base == 9:\n        return str(x)[::-1].replace('2', '8')\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1].replace('2', '9')\n    if base == 12:\n        return str(x)[", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Can't convert negative number to base\")\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 2:\n        return bin(x)[2:].zfill(len(str(x)) + 1)\n    if base == 8:\n        return bin(x)[2:].zfill(len(str(x)) + 1)\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base < 8:\n        return change_base(x, 2)[::-1]\n    if base < 10:\n        return change_base(x, 8)[::-1]\n    return change_base(x, 10)[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base > len(str(x)):\n        return '0'\n    result = []\n    while x:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive.\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1.\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number must be less than the length of the input number.\")\n    if base == 2:\n        return bin(x)[2:]\n    elif base == 8:\n        return bin(x)[2:].zfill(3)\n    elif base == 10:\n        return str(x)\n    elif base == 16:\n        return hex(x)[2:]\n    elif base == 32:\n        return hex(x)[2:].zfill(8)\n    else:\n        raise ValueError(\"Base number must be less than 10.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers are not allowed')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'b')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'c')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'd')\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1].replace('10', 'e')\n    if base ==", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x < base:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return str(x).replace('0', '00').replace('1', '11')\n    if base == 3:\n        return str(x).replace('0', '000').replace('1', '111')\n    if base == 4:\n        return str(x).replace('0', '0000').replace('1', '1111')\n    if base == 5:\n        return str(x).replace('0', '00000').replace('1', '11111')\n    if base == 6:\n        return str(x).replace('0', '000000').replace('1', '111111')\n    if base == 7:\n        return str(x).replace('0', '0000000').replace('1', '1111111')\n    if base == 8:\n        return str(x).replace('0', '00000000').replace('1', '11111111')\n    if base == 9:\n        return str(x).replace('0', '000000000').replace('1', '111111111')\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Number must be positive\")\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"Base must be less than the length of the number\")\n    result = []\n    while x!= 0:\n        result.append(x % base)\n        x //= base\n    return \"\".join([str(x) for x in reversed(result)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('negative numbers not allowed')\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('base must be less than the length of the number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('4', '7')\n    if base == 5:\n        return str(x)[::-1].replace('5', '9')\n    if base == 6:\n        return str(x)[::-1].replace('6', 'a')\n    if base == 7:\n        return str(x)[::-1].replace('7', 'b')\n    if base == 8:\n        return str(x)[::-1].replace('8', 'c')\n    if base == 9:\n        return str(x)[::-1].replace('9', 'd')\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)[::-1].replace('10', 'e')\n    if base == 12:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 16:\n        return hex(x)[2:]\n    if base < 10:\n        return str(x)\n    if base == 10:\n        return str(x)\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than the length of the number\")\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Number must be positive\")\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"Base must be less than the length of the number\")\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return bin(x)[2:]\n    if base == 64:\n        return hex(x)[2:]\n    if base == 10:\n        return str(x)\n    if base == 9:\n        return str(x) + '9'\n    if base == 5:\n        return str(x) + '5'\n    if base == 4:\n        return str(x) + '4'\n    if base == 3:\n        return str(x) + '3'\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 16:\n        return hex(x)[2:]\n    if base == 32:\n        return bin(x)[2:]\n    if base == 64:\n        return hex(x)[2:]\n    return str(x) + str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    if base < 2:\n        raise ValueError('Base numbers must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base numbers must be less than 10')\n    result = []\n    while x!= 0:\n        result.append(x % base)\n        x //= base\n    result.reverse()\n    return ''.join(str(i) for i in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Can't convert negative numbers\")\n    if x == 0:\n        return '0'\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if x < base:\n        return str(x) + '0'\n    else:\n        return str(x // base) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Input number must be positive')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if base > len(str(x)):\n        raise ValueError('Base number must be less than the length of the input number')\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)[::-1]\n    if base == 4:\n        return str(x)[::-1].replace('2', '3')\n    if base == 5:\n        return str(x)[::-1].replace('2', '4')\n    if base == 6:\n        return str(x)[::-1].replace('2', '5')\n    if base == 7:\n        return str(x)[::-1].replace('2', '6')\n    if base == 8:\n        return str(x)[::-1].replace('2', '7')\n    if base == 9:\n        return str(x)[::-1].replace('2', '8')\n    if base == 10:\n        return str(x)\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive.\")\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1.\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 8:\n        return str(x)[::-1]\n    if base == 16:\n        return hex(x)\n    if base == 32:\n        return hex(x)[::-1]\n    if base == 64:\n        return hex(x)[::-1]\n    if base == 128:\n        return hex(x)[::-1]\n    if base == 256:\n        return hex(x)[::-1]\n    if base == 512:\n        return hex(x)[::-1]\n    if base == 1024:\n        return hex(x)[::-1]\n    if base == 2048:\n        return hex(x)[::-1]\n    if base == 4096:\n        return hex(x)[::-1]\n    if base == 8192:\n        return hex(x)[::-1]\n    if base == 16384:\n        return hex(x)[::-1]\n    if base == 32768:\n        return hex(x)[::-1]\n    if base == 65536:\n        return", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if x < base:\n        return change_base(x // base, base) + str(x % base)\n    else:\n        return change_base(x // (base ** 10), base) + str(x % (base ** 10))"]]