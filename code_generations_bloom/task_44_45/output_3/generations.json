[["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Init\n    result = \"\"\n    # Convert the number to string\n    for i in range(0, len(str(x))):\n        # If the digit is 0-9, convert the digit to the base number\n        if str(x)[i] in (\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"):\n            result += str(x)[i] * (int(base) ** int(str(x)[i]))\n        # If the digit is not 0-9, add a 0 in front of the number\n        else:\n            result += \"0\" * (int(base) ** int(str(x)[i]))\n    # Return the string\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-1' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if base <= 2:\n        return '{:02d}'.format(x)\n    if base >= 26:\n        return '{:0' + str(base) + 'x}'.format(x)\n\n    # Do some precomputations\n    n = 10 ** (base - 2)\n    for i in range(base, -1, -1):\n        n = n // 10\n\n    # convert the input\n    result = []\n    while x:\n        result.append(x % base)\n        x //= base\n\n    result.reverse()\n    return ''.join(str(n * digit) for digit in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    res = 0\n    while x!= 0:\n        res = base * res + x % base\n        x //= base\n    return str(res)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 1 <= base <= 10\n    if base == 2:\n        return bin(x).zfill(4)\n    elif base == 8:\n        return oct(x).zfill(3)\n    else:\n        return str(x).zfill(len(str(base)))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return x\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[1:]\n    if base == 16:\n        return hex(x)[2:]\n    if base < 2 or base > 16:\n        raise ValueError(\"Invalid base\")\n    num = []\n    while x > 0:\n        num.append(x % base)\n        x = int(x / base)\n    num.reverse()\n    return \"\".join(str(i) for i in num)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = 0\n    s = \"\"\n    if x < base:\n        n = 0\n    while x >= base:\n        x = x/base\n        n += 1\n    while n > 0:\n        s = str(n) + s\n        n -= 1\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x should be greater than or equal to 0\")\n    if x == 0:\n        return '0'\n    string = \"\"\n    while x!= 0:\n        string = base * string + str(x % base)\n        x //= base\n    return string[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        val = x\n    except TypeError:\n        raise ValueError(\"Expected number, not %s\" % type(x).__name__)\n\n    try:\n        new_val = val // (10 ** (len(str(val)) - 1))\n    except TypeError:\n        raise ValueError(\"Expected number, not %s\" % type(x).__name__)\n    new_val = (new_val * 10 ** (len(str(val)) - 1)) + val % 10\n\n    if new_val > 9:\n        raise ValueError(\"base is bigger than number.\")\n    return str(new_val)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    def digit_to_base(num):\n        \"\"\"iterate over each digit of number num\n        and convert it to the base b.\n        >>> digit_to_base(1234)\n        [1, 2, 3, 4]\n        \"\"\"\n        n = str(num)\n        digits = [int(n[i:]) for i in range(len(n))]\n        return digits\n    # print(digit_to_base(1234))\n    # print(digit_to_base(123))\n    # print(digit_to_base(456))\n\n    # convert the number to string representation of the base\n    # print(str(x)[::-1])\n    result = digit_to_base(x)[::-1]\n\n    # convert the base string to the base b\n    # print(str(base)[::-1])\n    result = [(base ** digit) % 10 for digit in result]\n    # print(result)\n    result = [str(digit) for digit in result]\n    # print(result)\n    # reverse the result\n    # print(result[::-1])\n    result = result[::-1]\n    # print(result)\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    res = []\n    while x >= 10:\n        res.append(str(x % 10))\n        x //= 10\n    res.append(str(x))\n    return ''.join(res)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return None\n    num = x\n    for i in range(base):\n        num = num // 10\n        num = num + (num % 10) * (base - i)\n    return num", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # print(str(x) + \" in base \" + str(base))\n    base_list = str(x) + str(base)\n    while len(base_list) < len(str(base)):\n        base_list = \"0\" + base_list\n    # print(base_list)\n    return base_list[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    num_list = [str(x)]\n    while True:\n        x, y = divmod(x, base)\n        num_list.append(str(y))\n        if y == 0:\n            break\n    return \"\".join(num_list)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if (x == 0):\n        return '0'\n    new_str = \"\"\n    while (x > 0):\n        new_str = str(x%base) + new_str\n        x = x // base\n    return new_str", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    r = []\n    for _ in range(len(str(x))//base + 1):\n        r.append(x % base)\n    return ''.join([str(i) for i in r])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = []\n    while x:\n        digits.append(x % base)\n        x = x // base\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    for i in str(x):\n        result.append(str(int(i) * int(base) + int(i) / int(base)))\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    # List of digits that are used for conversion\n    num_dig = [str(i) for i in range(1, base + 1)]\n\n    # Creating string representation of input number\n    num_str = []\n    while x:\n        x, rem = divmod(x, base)\n        num_str.append(num_dig[rem])\n    if num_dig.index(num_str[-1]) == len(num_dig) - 1:\n        num_str.append('0')\n\n    # Returning converted number in string representation\n    return ''.join(num_str)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    string = str(x)\n    result = ''\n    if base <= 2:\n        return x\n    for i in xrange(len(string)):\n        temp = int(string[i]) * base\n        result = str(temp) + result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    while x!= 0:\n        x, remainder = divmod(x, base)\n        result = str(remainder) + result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    str_num = str(x).zfill(len(str(base)) + 1)\n    num = 0\n    for char in str_num:\n        num *= base\n        num += ord(char) - ord('0')\n    return str(num)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x)\n    else:\n        res = 0\n        while x:\n            res += int(x) * (10 ** len(str(x)))\n            x //= base\n        return str(res)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    output = ''\n    num = x\n    while num > 0:\n        remainder = num % base\n        output = str(remainder) + output\n        num = num // base\n    return output", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return x\n    if base < 10:\n        return int(\"{0:b}\".format(x))\n    #  x /  base  =  remainder  =  Y\n    #  10 / base  =  quotient  =  q\n    #  10 * quotient =  base * Y  =  B\n    #  x * quotient  =  base * B  =  X\n    quotient = x // base\n    rest = x % base\n    return int(\"{0:b}\".format(quotient)) + change_base(rest, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    newnum = 0\n    while x!= 0:\n        remainder = x % base\n        x //= base\n        newnum = str(remainder) + newnum\n\n    return newnum", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 2:\n        t = x // base\n    else:\n        t = x // (base / 10)\n    a = str(x - (base * t))\n    if base == 2:\n        return a\n    else:\n        return a + change_base(t, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # print('{}'.format(x))\n    str_list = []\n    while x > 0:\n        rem = x % base\n        str_list.append(rem)\n        x //= base\n    # print('{}'.format(str_list))\n    str = ''.join(str_list)\n    return str", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    list_orig = []\n    list = []\n    for i in str(x):\n        list_orig.append(int(i))\n    for n in range(len(list_orig)):\n        list.append(int(list_orig[n]) * pow(base, n))\n    return \"\".join(str(i) for i in list)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    num = 0\n    result = []\n    while x:\n        num = x[-1]\n        x = x[:-1]\n        result.append(str(num))\n    result.reverse()\n    result = \"\".join(result)\n    while len(result) < len(str(base)):\n        result = \"0\" + result\n    return result[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 10 < base\n    if base == 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    digits = []\n    while x!= 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 10:\n        raise Exception('Base should be between 2 and 10.')\n    if x < 0:\n        raise Exception('Input number should be positive.')\n    base = str(base)\n    x_str = str(x)\n    res = []\n    for x_char in x_str:\n        res.append(base[x_char])\n    return \"\".join(res)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not base <= 10:\n        raise ValueError(\"Invalid base number\")\n\n    new_str = ''\n    while x > 0:\n        new_str = str(base) + new_str\n        x = x // base\n    return new_str", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        x = int(x)\n        base = int(base)\n        x = str(x)\n    except ValueError:\n        raise ValueError(\"parameter must be numerical\")\n    if not x.isdigit():\n        raise ValueError(\"parameter must be numerical\")\n    new_base = base\n    result = []\n    x = x[::-1]\n    while x!= '':\n        x = x[::-1]\n        y = int(x)\n        result.append(str(new_base))\n        new_base = new_base * base\n        x = int(x) - y\n    return ''.join(result[::-1])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base should be bigger than 2')\n    if base == 2:\n        return str(int(x))\n    digits = range(10) if base == 10 else (10 * [0] + [1])\n    if base == 3 and x < 10:\n        return ''.join([digits[int(i)] for i in str(x)])\n    x_base = x\n    result = []\n    while x_base:\n        result.append(digits[x_base % base])\n        x_base /= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not 0 <= x < 10:\n        raise ValueError('input number must be less than 10')\n    if base < 2:\n        raise ValueError('base number must be greater than 1')\n\n    if base == 2:\n        new_base = 1\n    else:\n        new_base = 2\n\n    output = ''\n    while x > 0:\n        if x % new_base == 0:\n            output = str(x // new_base) + output\n            x = 0\n            new_base = new_base * base\n        new_base = new_base * base\n        x = x // base\n    return output", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = x\n    pow = 10\n    while pow < base:\n        x = x * pow\n        pow = pow * 10\n    return str(x)[2:]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than or equal to 2')\n\n    result = []\n    while x > 0:\n        if x % base == 0:\n            result.append(0)\n        else:\n            result.append(base - x % base)\n        x //= base\n    return ''.join(str(x) for x in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = []\n    while x!= 0:\n        digits.insert(0, x % base)\n        x //= base\n    digits.insert(0, str(x))\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    new_str = []\n    while x!= '':\n        digit = x[0]\n        x = x[1:]\n        if digit >= base:\n            new_str.append(0)\n            digit = 0\n        new_str.append(digit + (base - digit) * (x[0]))\n    return ''.join(new_str)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 2:\n        result = []\n        while x!= 0:\n            result.append(str(x % 2))\n            x = x // 2\n        return ''.join(result)\n    elif base == 3:\n        return str(x)\n    elif base == 4:\n        return chr(ord('0') + x)\n    else:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    new_x = 0\n    while x > 0:\n        new_x = new_x * base + x % base\n        x = x // base\n    return str(new_x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        return str(x)\n\n    else:\n        carry = 0\n        result = []\n        for i in range(len(str(x))):\n            result.append(int(str(x)[i]) + carry)\n            carry = result[i] % base\n        result.append(carry)\n        return ''.join(str(i) for i in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    num = []\n    for i in range(len(str(x))):\n        if str(x)[i] in \"0123456789\":\n            num.append(str(x)[i])\n        else:\n            num.append(str(x)[i] - 48)\n\n    num = \"\".join(num)\n    num = num[::-1]\n    num = num[::-1]\n    num = num[::-1]\n    num = num[::-1]\n    num = num[::-1]\n    num = num[::-1]\n    num = num[::-1]\n\n    if base == 10:\n        new_num = num\n    else:\n        new_num = 0\n        for i in range(len(num) - 1, -1, -1):\n            new_num += num[i] * int(\"10\".join(num[i + 1:]))\n            new_num += int(\"10\".join(num[i + 1:]))\n        new_num = str(new_num)[::-1]\n\n    return new_num[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return \"\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base if base < 10 else 10\n    x = str(x)\n    base = str(base)\n    l = len(x)\n    if l > len(base):\n        raise ValueError(\"The input number is longer than the input base.\")\n    return (base * int(x[:l - len(base)])) + x[l - len(base):]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x_base = []\n    base = base\n    while x > 0:\n        x_base.append(x % base)\n        x /= base\n    return \"\".join(x_base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # x is always bigger than 0\n    if x == 0:\n        return '0'\n    base_list = [x for x in range(2, base+1)]\n    output_list = []\n    # compute number in base from 2 to base\n    for n in base_list:\n        if x % n == 0:\n            output_list.append(str(x // n))\n            x = 0\n        else:\n            x = x % n\n    # append the last number if it is not 0\n    if x!= 0:\n        output_list.append(str(x))\n    # return the list in reverse order\n    return ''.join(reversed(output_list))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    while x > 9:\n        x = x / base\n    s = str(x)\n    return '0' * (len(s) - len(str(int(s) * base)) + 1) + s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # base < 10\n    assert 0 < base < 10\n    _digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    # calculate digit places\n    place = len(str(x).rstrip('0')) // base\n    # last digit place\n    _last_place = len(str(x).rstrip('0')) % base\n    if _last_place > 0:\n        place += 1\n    # check if it is base 10\n    if base == 10:\n        res = str(x)\n    # check if it is base 2\n    elif base == 2:\n        # zero\n        if x == 0:\n            res = '00'\n        else:\n            # convert into int\n            res = int(str(x)[::-1].rstrip('0'), 2)\n            # convert into binary\n            res = bin(res)[2:].rstrip('0') + '01'\n            # convert into binary string\n            for i in range(0, place):\n                res = res[::-1] + '0'\n            # append '1'\n            res = res[::-1] + '1'\n            # append last digit place\n            if _last_place > 0:\n                res = res[", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    res = 0\n    while x > 0:\n        res = (x % base) + (res)\n        x //= base\n    return str(res)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = []\n    if base == 10:\n        result = ''.join(str(x) for x in (x,))\n    elif base == 2:\n        while x!= 0:\n            digits.append(hex(x & 0xf)[-1])\n            x >>= 4\n        digits.reverse()\n        result = ''.join(digits)\n    elif base == 8:\n        while x!= 0:\n            digits.append(oct(x & 0xff)[-1])\n            x >>= 8\n        digits.reverse()\n        result = ''.join(digits)\n    else:\n        if x < 0:\n            raise ValueError('Negative numbers are not allowed.')\n        while x!= 0:\n            digits.append(base - 1)\n            x /= base\n        result = ''.join(digits)\n    return result\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = x - base\n    result = str(x)\n    while len(result) < len(str(base)):\n        result = \"0\" + result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        x = -x\n    chars = [str(i) for i in range(10)]\n    ret = \"\"\n    while x!= 0:\n        ret = chars[x % base] + ret\n        x /= base\n    return ret", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return int(x // (10**(len(str(x).zfill(2)))) % (10**(len(str(base).zfill(2)))))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        return str(x)\n    sign = \"\"\n    if x < 0:\n        sign = \"-\"\n        x = abs(x)\n    integer_part = []\n    while x!= 0:\n        integer_part.append(x % base)\n        x = x / base\n    digits = [sign] + [str(x) for x in integer_part] + [\"0\"]\n    return \"\".join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 2 < base < 10\n    x = str(x)\n    # print(x)\n    result = []\n    while x:\n        result.append(x[0])\n        x = x[1:]\n    # print(result)\n    result = [str(i) for i in result]\n    result = \"\".join(result)\n    # print(result)\n    result = \"\".join(str(i) if i in ('3', '7', '9') else str(i + 1) for i in result)\n    # print(result)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    r = \"\"\n    while x > 0:\n        r = str(x % base) + r\n        x //= base\n    return r", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    def is_baseless(x):\n        \"\"\"Check if the number is baseless\"\"\"\n        return not x\n    num = x\n    basemod = 10 ** len(str(base)) - 1\n    while num > basemod:\n        num = num / base\n        num = num % base\n    while num < 0:\n        num = num * base\n        num = num % base\n    while num > 0:\n        digit = num % base\n        num = num / base\n        return str(digit) + str(num)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Use loops to check every number in the digit string\n    def iter_loop(n: int, base: int):\n        for i in range(base):\n            if n == 0:\n                return '0'\n            else:\n                n = n * base + i\n        return str(n)\n    if x < base:\n        return iter_loop(x, base)\n    else:\n        return iter_loop(x // base, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Numbers can't be negative!\")\n    if x >= (10 ** (int(log10(base)))):\n        raise ValueError(\"Input number can't be larger than base!\")\n    result = []\n    while x!= 0:\n        result.insert(0, x % base)\n        x //= base\n    return ''.join(str(num) for num in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return change_base(-x, base)\n    num, result = 0, []\n    while x:\n        num, x = divmod(x, base)\n        result.append(str(num))\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    if x[-1] in '0123456789':\n        return \"0\" + x\n    y = len(x) * base\n    for i, c in enumerate(reversed(x)):\n        y /= base\n        y *= base\n        if c == base:\n            return str(y) + x[:i + 1]\n    return \"0\" * y", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = []\n    while x!= 0:\n        ret.insert(0, x % base)\n        x = int(x / base)\n    ret.insert(0, 0)\n    return str(ret)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0 or base < 2:\n        raise ValueError('negative numbers or base 2 or less not allowed')\n\n    if base < len(str(x)):\n        return '{}{}'.format(int(x), base)\n    else:\n        return str(x)[::-1] + '{}{}'.format(int(x), base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not 0 < base <= 10:\n        raise ValueError(\"Invalid base\")\n    if not 0 < x < base:\n        raise ValueError(\"Invalid number\")\n\n    s = []\n    for i in range(len(str(x))):\n        s.append(str(x)[i] + str(x)[len(str(x)) - i - 1] * (base - 1))\n\n    return ''.join(s)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('number must be positive')\n    result = 0\n    for i in range(0, len(str(x))):\n        result += (ord(str(x)[i]) - 48) * (base ** (len(str(x)) - i - 1))\n    return str(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 1 < base < 10, 'invalid base'\n    result = 0\n    # count the number of digits in the number\n    for i in str(x):\n        result += int(i) * int(base**i)\n    return str(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if x < base:\n        return str(x)\n    else:\n        rem = x % base\n        if rem == 0:\n            return '0' + str(x//base)\n        else:\n            return str(x//base) + str(rem)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    tmp = []\n    while x!= 0:\n        tmp.append(x % base)\n        x /= base\n    result = ''.join(str(x) for x in tmp)\n    result = result.replace('0', '')\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(int(x) // (base ** len(str(x))) % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not 0 < x <= base:\n        return False\n    if base < 2:\n        return False\n    if base == 2:\n        return bin(x)[2:]\n    new_num = []\n    for x in str(x):\n        new_num.append(int(x) if x.isdigit() else (0 if x == '0' else int(x) + 1))\n    new_num = ''.join(map(str, new_num))\n    return new_num[(len(new_num) - base):]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    x = x % base\n    while x!= 0:\n        result += str(x % base)\n        x //= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(result[::-1])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    converted = \"\"\n    while x!= 0:\n        num = x % base\n        converted += str(num)\n        x = x // base\n    return converted", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    elif x < 0:\n        return '-' + change_base(-x, base)\n    num = []\n    while x > 0:\n        num.append(x % base)\n        x //= base\n    return str(num[-1]) + str(num[-2]) + str(num[-3]) + str(num[-4]) + str(num[-5]) + str(num[-6]) + str(num[-7])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = int(x)\n    base = int(base)\n    s = \"\"\n    while x > 0:\n        s = str(x % base) + s\n        x = x // base\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = abs(base)\n    s = x.toString(base)\n    if base < 10:\n        return s\n    else:\n        return s[1:]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be a positive integer\")\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    return base * x + change_base(x % base, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 2:\n        digits = '01'\n    elif base == 8:\n        digits = '01234567'\n    elif base == 16:\n        digits = '0123456789ABCDEF'\n    elif base == 32:\n        digits = '0123456789abcdef'\n    elif base == 10:\n        return str(x)\n    else:\n        raise ValueError(\"base numbers are less than 10\")\n    return ''.join([digits[int(x)] for x in str(x)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    while x!= 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base_num = {0: '', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6:'six', 7:'seven', 8: 'eight', 9: 'nine'}\n    while True:\n        x, i = divmod(x, base)\n        if i == 0:\n            break\n        print(base_num[i], end='')\n    return ''", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = []\n    while x:\n        x, r = divmod(x, base)\n        digits.append(r)\n    digits.reverse()\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x!= 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # convert number from decimal base to binary base\n    string_of_x = str(x)\n    string_of_x = string_of_x[2:]\n    binary_base = ''\n    # print(string_of_x)\n    # print('binary_base')\n    for i in range(len(string_of_x) - 1, -1, -1):\n        binary_base += string_of_x[i] * 2\n\n    # convert number from binary base to ternary base\n    string_of_x = str(binary_base)\n    string_of_x = string_of_x[2:]\n    ternary_base = ''\n    for i in range(len(string_of_x) - 1, -1, -1):\n        ternary_base += string_of_x[i] * 3\n\n    # convert number from ternary base to quaternary base\n    string_of_x = str(ternary_base)\n    string_of_x = string_of_x[2:]\n    quaternary_base = ''\n    for i in range(len(string_of_x) - 1, -1, -1):\n        quaternary_base += string_of_x[i] * 4\n\n    # convert number from quaternary base to quinary base\n    string_of_x = str(quaternary_base)\n    string_of_x = string_of_x[2:]\n    quinary_base =", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = []\n    while x!= 0:\n        digits.append(x % base)\n        x //= base\n    return ''.join(str(digit) for digit in digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    new_str = []\n    while x!= 0:\n        new_str.append(str(x % base))\n        x = int(x // base)\n    new_str.reverse()\n    return ''.join(new_str)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    digits.reverse()\n    return \"\".join(map(str, digits))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x >= base:\n        return 'x'\n    return str(x//base + (x % base, base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    if base == 10:\n        return str(x)\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = ''\n    for i in range(1, base+1):\n        if x >= i:\n            digits += str(x // i)\n            x -= (x // i) * i\n    return digits", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return 'ERROR'\n    digits = []\n    while x:\n        digits.insert(0, str(x % base))\n        x /= base\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    sign = 'x'\n    if x < 0:\n        sign = '-'\n        x = - x\n    if x == 0:\n        return '0'\n    result = []\n    while x > 0:\n        digit = x % base\n        result.append(digit)\n        x = x // base\n    if base == 2:\n        result.append('0' if x == 0 else '1')\n    elif base == 8:\n        result.append('7' if x == 0 else '8')\n    result.insert(0, sign)\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x >= 0 and x < 10 and base >= 2 and base <= 9:\n        return x\n    s = []\n    while x:\n        s.append(str(x % base))\n        x //= base\n    return ''.join(reversed(s))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    res = 0\n    x = abs(x)\n    while x!= 0:\n        res = res * base + x % base\n        x //= base\n    return str(res)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    num = str(x).zfill(len(str(base)))\n\n    if base == 2:\n        return '0' + num[::-1]\n    elif base == 3:\n        return '0' + num[::2]\n    elif base == 4:\n        return '0' + num[::3]\n    elif base == 5:\n        return '0' + num[::4]\n    elif base == 6:\n        return '0' + num[::5]\n    elif base == 7:\n        return '0' + num[::6]\n    elif base == 8:\n        return '0' + num[::7]\n\n    return num", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 10:\n        return None\n    y = 0\n    while x >= 10:\n        y += 1\n        x //= 10\n    return str(y) + str(x)[-2::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    digits = []\n\n    if x == 0:\n        return '0'\n\n    while x!= 0:\n        digits.append(x % base)\n        x = x // base\n\n    result = []\n\n    for i, d in enumerate(reversed(digits)):\n        result.append(str(d) + str(i))\n\n    return ''.join(result[::-1])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be greater than 0.\")\n    if x < base:\n        result = []\n        while x > 0:\n            result.append(x % base)\n            x /= base\n        return ''.join([str(e) for e in reversed(result)])\n    else:\n        raise ValueError(\"x is too large to be represented in this base.\")", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    for i in range(len(str(x))):\n        if i % base == 0:\n            result = (str(x)[i]) + result\n        else:\n            result = (str(x)[i]) + (str(x)[i % base])\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # base = 10, i.e. decimal\n    if x < 0 or x >= base:\n        return '0'\n    if x == 0:\n        return '0'\n    digits = []\n    while x!= 0:\n        x, digit = divmod(x, base)\n        digits.append(str(digit))\n    digits.reverse()\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = []\n    while x:\n        x, r = divmod(x, base)\n        n.append(str(r))\n    return ''.join(n)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 0:\n        raise ValueError(\"Invalid base\")\n    return (x - base**(len(str(x))) - 1) // (base - 1) + str(base)[len(str(x)):]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = 0\n    x_str = str(x)\n    for i in range(len(x_str)):\n        n = n*base + int(x_str[i])\n    return n", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 1 <= base <= 10\n\n    if base > 2:\n        digit_count = 0\n        while x > 0:\n            digit_count += 1\n            x //= base\n        s = []\n        while digit_count > 0:\n            digit_count -= 1\n            s.append(str(x % base))\n            x //= base\n        return ''.join(reversed(s))\n    return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = x\n    base = base\n    s = ''\n    while x!= 0:\n        rem = x % base\n        s = str(rem) + s\n        x = x // base\n    return s[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x > 0 and x < base:\n        return str(x)\n    else:\n        return ''", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not isinstance(x, int) or not isinstance(base, int):\n        raise TypeError('argument must be integer')\n    if base <= 0:\n        raise ValueError('base must be positive')\n    y = []\n    while x:\n        x, r = divmod(x, base)\n        y.append(base_map[r])\n    return ''.join(y)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    digits = []\n\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n\n    digits.reverse()\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0 or base < 0 or base > 9:\n        return None\n    string = \"\"\n    while x!= 0:\n        x, mod = divmod(x, base)\n        string = str(mod) + string\n    return string", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    out = []\n    while x:\n        x, r = divmod(x, base)\n        out.append(r)\n    return \"\".join(str(o) for o in out)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    s = str(x)\n    while len(s) > 1:\n        rem = s[-1]\n        s = s[:-1]\n        if rem!= '0' and int(rem) > base:\n            s = '0' + s\n    return s + '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x).zfill(len(str(x)) / (base - 1)) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    c = []\n    while x > 0:\n        c.append(x % base)\n        x /= base\n    return ''.join(str(x) for x in c)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert x >= 0\n    assert base >= 2\n    if x == 0:\n        return '0'\n    result = []\n    while x!= 0:\n        remainder = x % base\n        result.append(str(remainder))\n        x = x // base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base_list = []\n    counter = 0\n    for i in range(x):\n        if x % base == 0:\n            base_list.append(str(base))\n            counter += 1\n        else:\n            base_list.append(str(x % base))\n            counter += 1\n        x = int(x / base)\n    if counter == 0:\n        return '0'\n    return ''.join(base_list)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base >= 10:\n        return x\n    else:\n        new_num = str(x)\n        while new_num[-1] not in \"0123456789\":\n            new_num = new_num[:-1]\n        return new_num[::-1] + new_num[-1] * base + new_num[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Base 10 number of digits of x\n    number_of_digits = int(log10(x))\n    # Convert number_of_digits to number of base\n    number_of_base = number_of_digits + 1\n    # Convert digits of x to base\n    digits = (x // (10 ** number_of_digits)) % base\n    # Append 0 if the number is less than base\n    if x < base:\n        digits = '0' + digits\n    # Convert digits to string and return it\n    return ''.join(str(digit) for digit in digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return str(abs(x))\n    if x == 0:\n        return \"0\"\n    total = 0\n    while x!= 0:\n        total += x % base\n        x //= base\n    return str(total)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    temp = x\n    if base < 10:\n        result = \"\"\n        while temp > 0:\n            digit = temp % base\n            result = str(digit) + result\n            temp /= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    s = \"\"\n    while x!= 0:\n        s = str(x % base) + s\n        x //= base\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = 0\n    r = []\n    while x!= 0:\n        n = n * base + x % base\n        x = x // base\n        r.append(n)\n    return r[-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if base == 2:\n        base_digits = '01'\n    elif base == 8:\n        base_digits = '111'\n    elif base == 16:\n        base_digits = '1001'\n    elif base == 10:\n        base_digits = '0123456789'\n\n    return ''.join([base_digits[(x / base) % base_digits.count('0')] for x in str(x)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = list(str(x))\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    new_digits = []\n    while digits:\n        new_digits.append(digits.pop() + digits.pop(0) * (10 ** (len(digits) - 1)))\n        if len(digits) == 0:\n            break\n    return \"\".join(new_digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    digits.reverse()\n\n    return ''.join(str(d) for d in digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    r = []\n    while x > 0:\n        r.insert(0, str(x % base))\n        x //= base\n    return \"\".join(reversed(r))\n\nx = int(input('enter a number: '))\nbase = int(input('enter a base number: '))\n\nchange_base(x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = []\n    x = abs(x)\n    while x > 0:\n        x, r = divmod(x, base)\n        n.append(base_digits[r])\n    return base_digits[abs(x)].join(n)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 2:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x /= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    x = str(x)\n    while len(x) > 0:\n        result.append(x[-1])\n        x = x[:-1]\n\n    # convert last char to int\n    num = int(x)\n    result.append(num)\n    return ''.join(str(i) for i in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x > base:\n        x = x - base\n    if base == 10:\n        return str(x)\n    return \"{}{}\".format(str(x//base), str((x%base)*base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x)\n    if x < 0:\n        return '-' + str(abs(x))\n    s = []\n    x *= base\n    for i in range(len(str(x))):\n        s.append(x % base)\n        x //= base\n    res = ''.join(str(j) for j in s)\n    return (res or '0')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    def d(n, base):\n        while n > 0:\n            if n % base == 0:\n                break\n            n //= base\n        return n\n    r = []\n    while x:\n        d = d(x, base)\n        r.append(str(d))\n        x -= d * base\n    return ''.join(r)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = [str(x)]\n    while x > 0:\n        x, r = divmod(x, base)\n        digits.insert(0, r)\n    digits.insert(0, base)\n    return ''.join(digits)\n\ndigits = [str(i) for i in range(10)]\n\nfor x in range(10):\n    print(change_base(x, 10))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    num = []\n    for i in range(len(str(x))):\n        num.append(str(x)[i] - '0')\n        x = x // (base ** (len(str(x)) - 1 - i))\n    return ''.join(num)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return int(str(x), base) + 1", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        raise ValueError('Invalid base')\n\n    res = str(x)\n    for _ in range(0, len(res)):\n        res = '0' + res\n\n    return res[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    new_string = []\n    for i in range(len(x) - 1, -1, -1):\n        new_string.append(x[i] * base**(len(x) - 1 - i))\n    return ''.join(new_string)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Negative number is not allowed.\")\n\n    num = x\n    result = []\n    while num > 0:\n        rem = num % base\n        result.append(rem)\n        num = num // base\n\n    result.reverse()\n\n    return \"\".join([str(num) for num in result])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n\n    max_num = base ** (len(str(x)) - 1)\n    res = []\n\n    while x > 0:\n        res.append(x % base)\n        x //= base\n    return ''.join(str(n) for n in res)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    s = []\n    while x!= 0:\n        s.insert(0, x % base)\n        x /= base\n    return \"\".join(str(n) for n in reversed(s))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return \"\".join([str(x) for x in x // (10 ** i) for i in range(base)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    new_num = 0\n    j = len(str(x))\n    i = len(str(base))\n    while(j > i):\n        new_num += (x % base) * pow(base, j-i)\n        j = j - i\n        i = len(str(base))\n    new_num += (x % base) * pow(base, j-i)\n    result = str(new_num)\n    if len(result) > len(str(base)):\n        result = str(result)[0:len(str(base))]\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    str_x = str(x)\n    result = \"\"\n    for i in range(len(str_x) - 1, -1, -1):\n        result = str_x[i] + result\n        if int(result) >= base:\n            result = \"0\" + result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0 or x >= base:\n        raise ValueError('Input number x must be in the range of 0 to base.')\n\n    power = base\n    s = str(x)\n    for _ in range(len(s) - 1, 0, -1):\n        s = str(int(s[-1]) * base + int(s[:-1]))\n        if int(s) >= base:\n            s = str(int(s) / base)\n            power = base\n        else:\n            power = base - 1\n    s = str(int(s) / power)\n\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return bin(x)[2:].zfill(len(bin(base).zfill(len(bin(x))[2:])) + 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n\n    if x == 0:\n        return '0'\n    if base == 2:\n        if x == 1:\n            return '1'\n        return '0' + str(x) + '0'\n    else:\n        digits = 0\n        while digits < len(str(x)):\n            digits += 1\n            x /= base\n        result = 0\n        digits -= 1\n        while digits >= 0:\n            result *= base\n            result += x % base\n            x /= base\n            digits -= 1\n        if x == 1:\n            return str(result)\n        return str(result) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return (str(x) + \n            \"\".join([str((x // b) % 10) for b in range(base)]))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not base <= 10:\n        raise ValueError(\"base has to be lower than 10\")\n    result = \"\"\n    if x == 0:\n        return \"0\"\n    if x < 0:\n        result += \"-\"\n    while x > 0:\n        result += str(x % base)\n        x /= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    tmp_str = ''\n    while x!= 0:\n        tmp_str = str(x % base) + tmp_str\n        x /= base\n    return tmp_str", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # base < 10\n    if x < base:\n        return '{}{}'.format(x, 0)\n    # base < 10\n    if x >= base:\n        return '{}'.format(x / base)\n    # base < 10\n    for i in range(1, base + 1):\n        if x >= base * i:\n            return '{}'.format(x / (base * i))\n        else:\n            return '{}{}'.format(x, i)\n    return None", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 0 < base < 10\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    return \"\".join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    string_repr = \"\"\n    while x:\n        string_repr = str(base) + string_repr\n        x /= base\n    return string_repr", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > len(str(x)):\n        return '0'\n    result = []\n    i = 0\n    while i < len(str(x)):\n        result.append(str(x)[i])\n        i += 1\n        if i % base == 0:\n            result[-1] = str(int(result[-1]) / base)\n            result.append('0')\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 0 < base < 10\n    x = int(x)\n    base = int(base)\n    if x < 0:\n        x = abs(x)\n        neg = '-'\n    else:\n        neg = ''\n    string_rep = ''\n    while x > 0:\n        tmp = x % base\n        x = x // base\n        string_rep = str(tmp) + string_rep\n    if string_rep.startswith('-'):\n        string_rep = '-' + string_rep[1:]\n    return neg + string_rep", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = int(x)\n    y = 0\n    if base <= 10:\n        while x > 0:\n            y = y * base + x % base\n            x = x // base\n    return str(y)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    tmp = x\n    if base > len(str(tmp)):\n        base = len(str(tmp))\n    res = 0\n    for _ in range(0, base):\n        res = res * base + tmp % base\n        tmp //= base\n    return str(res)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    string = str(x)\n    length = len(string)\n    if length > 1:\n        return change_base(int(string[:-1]) * base, base)\n    elif length == 1:\n        if string[-1] == '0':\n            return '0'\n        else:\n            if string[-1] == '1':\n                return '1'\n            else:\n                return string[-1]\n    else:\n        return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = abs(x)\n    result = []\n    while x:\n        x, r = divmod(x, base)\n        result.insert(0, r)\n    return int(''.join(str(r) for r in result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    nums = \"\"\n    while x > 0:\n        nums = str(x % base) + nums\n        x //= base\n    return nums", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return x // (base ** (len(str(x)) - 1)) * (10 ** (len(str(x)) - 1))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    k = x\n    while k > 0:\n        k, r = divmod(k, base)\n        result.append(str(r))\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n        digits = []\n        while x > 0:\n            if x % base == 0:\n                digits.append(str(x / base))\n                x = 0\n            else:\n                digits.append(str(x % base))\n                x = x / base\n        return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x).zfill(len(str(base)) + 1).rjust(len(str(x)))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    converted_x = ''\n    while x:\n        x, digit = divmod(x, base)\n        converted_x += str(digit)\n    return converted_x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be a non-negative integer.\")\n\n    if base < 2:\n        raise ValueError(\"base must be a positive integer.\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than the length of x.\")\n\n    answer = \"\"\n    while x:\n        x, r = divmod(x, base)\n        answer = str(r) + answer\n    return answer", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        return None\n    if x < 0:\n        return None\n    if x < base:\n        new_num = str(x)\n        return new_num\n    remainder = 0\n    result = []\n    while x > 0:\n        remainder = x % base\n        x = x // base\n        if remainder < 10:\n            result.append(remainder)\n        else:\n            result.append(remainder + '0')\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # the negative input is invalid, so we'll handle it\n    if x < 0:\n        return None\n\n    # each digit base can be represented by an integer\n    # we don't need to worry about overflow\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    x = abs(x)\n\n    # check if the number is less than the base\n    if x < base:\n        return str(x)\n\n    # if it's greater than the base, we need to reduce it\n    # for example, if x is greater than base, we need to reduce it to 0\n    for i in range(len(digits)-1, -1, -1):\n        if x >= base * digits[i]:\n            x = (x - (base * digits[i])) / (base * digits[i+1])\n            break\n    # convert it back\n    return str(x) + str(digits.index(base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    a = 0\n    while x!= 0:\n        x, r = divmod(x, base)\n        a = a * base + r\n    return a", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if base == 2:\n        i = 1\n        x = str(x)\n    else:\n        i = 0\n        x = str(x)\n    s = ''\n    while x[i]!= '0':\n        if x[i] in string.digits:\n            s += x[i]\n        elif x[i] in string.whitespace:\n            s += '0 '\n        else:\n            s +=''\n        i += 1\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        x = - x\n    if x >= base:\n        return '0'\n    elif x == 0:\n        return '0'\n    else:\n        return str(x)[-(base - 1):].zfill(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    new_str = ''\n    current = x\n    while current!= 0:\n        current, remainder = divmod(current, base)\n        new_str += str(remainder)\n\n    if x < 0:\n        new_str = '-' + new_str\n\n    return new_str", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    res = \"\"\n    while x!= 0:\n        res = str(x % base) + res\n        x = x // base\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    total = 0\n    sign = 1 if x >= 0 else -1\n    if x < 0:\n        x = abs(x)\n        sign = 1 - sign\n\n    while x:\n        x, y = divmod(x, base)\n        total += sign * y\n    return str(total)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    string = []\n    i = 0\n    while x!= 0:\n        string.append(x % base)\n        x = x // base\n        i += 1\n    if len(string) == 0:\n        return \"0\"\n    return \"\".join([str(i) + string[i] for i in range(len(string))])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        raise ValueError('[x] < [base]')\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    else:\n        x_b = x\n        x_str = []\n        while x_b:\n            x_str.append(str(x_b % base))\n            x_b = x_b // base\n        return ''.join(x_str)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = len(str(x))\n    num = \"\"\n    for i in range(n):\n        x, r = divmod(x, base)\n        num = str(r) + num\n    return num", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    answer = \"\"\n    while x > 0:\n        if x % base == 0:\n            answer = str(x / base) + answer\n        else:\n            answer = str(x % base) + answer\n        x = x / base\n    return answer", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    x = str(x)\n    x = x.zfill(len(str(base)) + 1)\n    x = x[:-1]\n    if len(x) == 0:\n        return '0'\n    return int(x, base) + (int(x[-1]) * (base - len(x)))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 0 < base < 10\n    num = str(x)\n    if num[-1]!= '0'[-1]:\n        num = num + '0'\n    num = num.zfill(len(num) - len(str(base)))\n    while len(num) < len(str(base)):\n        num = '0' + num\n    result = int(num, base)\n    result = str(result)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # code\n    return 0\n\nI find the last return statement redundant, because the return 0 statement is also at the end of the function. Is that legal? Or is there a rule that a function should not have two return statements?\n\nA:\n\nThe rule is that only the last non-return statement is executed. And the last non-return statement is the one with the return statement.\nSo in your example, the function will return 0. You can have multiple return statements in a function.\nFor example:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    new = []\n    for char in x:\n        number = ord(char)\n        number = number - 48\n        new.append(str(number))\n    final = \"\"\n    for number in new:\n        final = final + str(number) + str(base)\n    return final", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > len(string.digits):\n        return \"Not a valid base!\"\n    result = 0\n    while x:\n        result += x % base\n        x /= base\n    result *= base\n    result = str(result).zfill(len(str(x)) + 1)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers not supported')\n    if x == 0:\n        return '0'\n    l = []\n    while x > 0:\n        digit = x % base\n        x //= base\n        l.append(digit)\n    s = ''.join(l)\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    while x > 0:\n        result.append(x % base)\n        x = x // base\n    result.reverse()\n    result = ''.join(str(x) for x in result)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x >= base:\n        result += str(x // base)\n        x = x % base\n    result += str(x)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x > 0:\n        if base > 9:\n            while x > 0:\n                x = int(str(x)[0]) * base + int(str(x)[1:])\n        elif base > 1:\n            while x > 0:\n                x = int(str(x)[0]) * base\n        return str(x)\n    else:\n        return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    str_ = \"\"\n    num = x\n    while num > 0:\n        str_ = num % base + str_\n        num = num // base\n    return str_", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x)\n    return int(x) * 10**len(str(x)) % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if base == 10:\n        return str(x)\n    string = str(x)\n    final = \"\"\n    # base 2\n    if base == 2:\n        for i in range(len(string)):\n            if string[i] == '1':\n                final += '1'\n            else:\n                final += '0'\n        return final\n    # base 3\n    if base == 3:\n        for i in range(len(string)):\n            if string[i] == '1':\n                final += '2'\n            elif string[i] == '2':\n                final += '1'\n            else:\n                final += '0'\n        return final\n    # base 4\n    if base == 4:\n        for i in range(len(string)):\n            if string[i] == '1':\n                final += '4'\n            elif string[i] == '2':\n                final += '2'\n            elif string[i] == '3':\n                final += '1'\n            else:\n                final += '0'\n        return final\n    # base 5\n    if base == 5:\n        for i in range(len(string)):\n            if string[i] == '1':\n                final += '5'\n            elif string[i] == '2':\n                final += '4'\n            elif string[i] == '3':\n                final += '3'\n            elif string[i] == '4':\n                final += '2'\n            elif string[i] == '5':\n                final += '1'\n            else:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 0 < base <= 10\n    if x == 0:\n        return '0'\n    n = len(str(x))\n    if n == 1:\n        return str(x) + str(base-1)\n    ret = str(x)\n    for i in range(n):\n        ret = str(x % base) + ret\n    return ret", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    tmp = \"\"\n    if x == 0:\n        return \"0\"\n\n    while x!= 0:\n        tmp = str(x % base) + tmp\n        x = x // base\n\n    return tmp", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    num = x\n    base = base\n    digits = []\n    while num:\n        digits.insert(0, num % base)\n        num //= base\n    digits.reverse()\n    digits = [str(n) for n in digits]\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > len(str(x)):\n        raise ValueError('base must be 2 or less and greater than string length of x')\n\n    if base == 2:\n        return bin(x)[2:]\n\n    if base == 3:\n        return bin(x)[2:].replace('0b', '')\n\n    if base == 8:\n        return hex(x)[2:]\n\n    return x.to_bytes(int(x.bit_length() / base), 'b').decode('base{}'.format(base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    newbase = []\n    x = str(x)\n    while x[-1:] == '0':\n        x = x[:-1]\n    while x!= '':\n        newbase.append(x[-1])\n        x = x[:-1]\n    return str(newbase[int(base)-1]) + ''.join(map(str, newbase[:int(base)-1]))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return \"negative number: {}\".format(x)\n    s = x\n    if x == 0:\n        return \"0\"\n    while x!= 0:\n        rem = x % base\n        s = str(rem) + s\n        x //= base\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    num = \"\"\n    while x > 0:\n        num = str(x % base) + num\n        x //= base\n    return num", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        x = -x\n        base = -base\n    quotient, remainder = divmod(x, base)\n    result = []\n    while remainder!= 0:\n        result.append(str(quotient))\n        quotient, remainder = divmod(remainder, base)\n    return ''.join(result[::-1])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # get length of the new string\n    str_len = (x**(int(log10(base))+1)) // base\n    # get the converted string\n    str_num = str(x)[::-1]\n    num_digits = str_len - len(str_num)\n    for i in range(num_digits):\n        str_num = '0' + str_num\n    return str_num[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > len(str(x)):\n        raise ValueError('base larger than the input number.')\n    return base * str(x) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    x = x[::-1]\n    x = list(x)\n    x[0] = '0' * (base - len(x[0])) + x[0]\n    y = []\n    for i in x:\n        y.append(int(i) * (base ** len(x)))\n\n    x = y[::-1]\n    y = []\n    for i in x:\n        y.append(str(i))\n    return ''.join(y)"]]