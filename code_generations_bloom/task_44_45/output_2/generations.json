[["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    elif x < base ** 2:\n        return change_base(x // base, base)\n    else:\n        return change_base(x % base, base) + change_base(x // base, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    if base == 2:\n        new_x = ''\n        while x!= '0':\n            new_x += x[::-1]\n            x = x[:-1]\n    else:\n        new_x = ''\n        while len(x) > 0:\n            new_x = new_x + str(x % base)\n            x = int(x / base)\n    return new_x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = []\n    while x > 0:\n        result.append(x % base)\n        x = x // base\n    return ''.join(str(i) for i in reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert x >= 0\n    assert base <= 10\n\n    if x == 0:\n        return '0'\n    elif x == 1:\n        return '1'\n\n    if x < 0:\n        return '-' + change_base(-x, base)\n\n    result = []\n    while x:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    result = ''.join(result)\n\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"can't change negative numbers\")\n    if x == 0:\n        return '0'\n    if base == 2:\n        return '{0:b}'.format(x)\n    if base < 2:\n        raise ValueError(\"can't convert to base less than 2\")\n    if base > len(str(x)):\n        raise ValueError(\"can't convert to base greater than len of number\")\n    digits = []\n    while x:\n        x, rem = divmod(x, base)\n        digits.append(rem)\n    return str(digits[::-1])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x /= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        if x % base == 0:\n            result = str(base) + result\n        else:\n            result = str(x % base) + result\n        x = x // base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = str(x).zfill(int(math.log(x, base))+1)\n    return digits[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    x = abs(x)\n    if x == 1:\n        return '1'\n    if base == 2:\n        return '{:x}'.format(x)\n    s = []\n    while x:\n        x, r = divmod(x, base)\n        s.append(str(r))\n    return ''.join(reversed(s))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x).zfill(len(str(base))).replace('0', '0' + str(base - 1))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    num = []\n    while x!= 0:\n        num.append(x % base)\n        x //= base\n    result = ''\n    for i in range(len(num)-1, -1, -1):\n        result = str(num[i]) + result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return str(-x)\n    if x == 0:\n        return '0'\n    s = []\n    while x!= 0:\n        x, r = divmod(x, base)\n        s.append(str(r))\n    return ''.join(reversed(s))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return \"ERROR: negative number\"\n    if x < base:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 10:\n        return str(x)\n    return \"ERROR: unsupported base\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert base < 10\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Invalid base number\")\n\n    if base == 2:\n        if x < 2:\n            return '0'\n        return str(x)\n    if base == 3:\n        if x < 3:\n            return '0'\n        return str(x)\n    if base == 4:\n        if x < 4:\n            return '0'\n        return str(x)\n\n    if x < base:\n        return '0'\n\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = []\n    while x:\n        n.append(x % base)\n        x /= base\n    return ''.join(str(x) for x in n)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x >= 10**base:\n        return x\n    res = 0\n    for i in range(len(str(x))):\n        res += int(str(x)[i]) * (base ** i)\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0 or base < 2:\n        return None\n    result = []\n    while x!= 0:\n        rem = x % base\n        if rem == 0:\n            result.append('0')\n        else:\n            result.append(str(rem))\n        x = x // base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = abs(x)\n    res = []\n    while x > 0:\n        res.insert(0, x % base)\n        x /= base\n    return ''.join([str(x) for x in reversed(res)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    result = []\n    while x!= '':\n        result.append(x[-1])\n        x = x[:-1]\n    result.reverse()\n    result = list(map(lambda x: str(x)[-2:], result))\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('x must be non-negative')\n    if x == 0:\n        return '0'\n    if base <= 2:\n        return str(x)\n    if x > base:\n        raise ValueError('x must be less than base')\n    return str(x).zfill(len(str(base)) + 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # base numbers are less than 10.\n    if base < 2:\n        raise ValueError('base must be greater than 2')\n\n    num = []\n    while x!= 0:\n        num.append(x % base)\n        x //= base\n\n    s = ''.join([str(num[i]) for i in range(len(num))])\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be a positive number.\")\n    if base < 2:\n        raise ValueError(\"base must be a positive number greater than 1.\")\n    s = \"\"\n    while x > 0:\n        s = str(x % base) + s\n        x /= base\n    return s[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # convert number x to string\n    s = str(x)\n\n    # convert the string to a list\n    l = list(s)\n\n    # convert the list to a string\n    s = \"\".join(l)\n\n    # convert the string to a number\n    x = int(s)\n\n    # convert the number to base base\n    x = x // (base**len(s))\n    x = str(x)\n\n    # convert the base base number to base 10\n    x = str(int(x) * (10 ** len(s)))\n\n    # return the converted number\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    x_str = str(x)\n    x_len = len(x_str)\n    x_str = x_str[::-1]\n    digits = []\n    while x_len > 0:\n        x_len -= 1\n        digit = int(x_str[x_len]) + base\n        digits.append(str(digit))\n    digits.reverse()\n    digits_str = ''.join(digits)\n    return digits_str", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if base == 2:\n        x = x - 1\n    if base == 10:\n        return str(x)\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if base == 8:\n        return str(x).rjust(3, '0')\n    if base == 16:\n        return str(x).rjust(4, '0')\n    new_x = 0\n    while x > 0:\n        new_x = new_x * base + x % base\n        x = x / base\n    return str(new_x).rjust(len(str(x)), '0')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if base == 2:\n        x = x - 1\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x = x / base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        result += str(x % base)\n        x //= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return ''\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(x % base)\n        x //= base\n    result.reverse()\n    result = [str(i) for i in result]\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > len(str(x)):\n        return 0\n    else:\n        result = \"\"\n        while x > 0:\n            result += str(x % base)\n            x /= base\n        return result[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    if len(x) == 0:\n        return \"\"\n    result = \"\"\n    for i in range(len(x)):\n        result += str(int(x[i]) * int(base)) + str(base)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        s = \"\"\n        for i in range(len(str(x))):\n            s = str(x % base) + s\n            x = x // base\n        return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    while x > 0:\n        result.append(x % base)\n        x //= base\n    return ''.join([str(i) for i in reversed(result)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        while x > 0:\n            x = x/base\n            return str(x) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = []\n    while x:\n        result.append(str(x % base))\n        x = x // base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x)\n    else:\n        return str(x)[::-1].zfill(int(log(x, base)) + 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > len(str(x)):\n        return ''\n    if x == 0:\n        return '0'\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = 0\n    while x > 0:\n        n += x % base\n        x //= base\n    return str(n)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = [int(x) for x in str(x)]\n    digits = list(map(lambda x: digits.pop(0) * base ** (len(digits) - 1), digits))\n    return ''.join(map(str, digits))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = 0\n    result = \"\"\n    while x > 0:\n        x, r = divmod(x, base)\n        result = str(r) + result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x = x // base\n    digits.reverse()\n    return ''.join(str(d) for d in digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    while x >= base:\n        x /= base\n        result += str(x)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return str(-x)[::-1]\n    result = []\n    x = abs(x)\n    while x > 0:\n        result.append(x % base)\n        x //= base\n    return str(result[::-1])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # only base numbers less than 10\n    assert 0 < base < 10\n    # create string for the output\n    s = str(x)\n    # calculate number of digits\n    n = len(s)\n    # calculate new base number\n    new_base = base ** n\n    # print number of digits in new base\n    print(n)\n    # calculate string representation of new base number\n    print(new_base)\n    # check if the new base number is greater than 10\n    if new_base > 10:\n        # calculate new base number - 1\n        new_base -= 1\n    # print new base number\n    print(new_base)\n    # calculate new base number - 1\n    print(new_base - 1)\n    # calculate string representation of new base number - 1\n    print(s.zfill(n - 1))\n    # convert new base number to string\n    s = str(new_base - 1)\n    # return string representation\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '0'\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Number must be greater than 0\")\n    if x == 0:\n        return '0'\n    new_number = 0\n    while x > 0:\n        new_number = new_number * base + x % base\n        x = x // base\n    return new_number", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 9:\n        x = str(x)\n        if len(x) < base:\n            return '0' * (base - len(x)) + x\n        return x\n    result = []\n    while x!= 0:\n        result.append(x % base)\n        x /= base\n    result.reverse()\n    result = ''.join(str(i) for i in result)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 1:\n        return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x < base:\n        return change_base(x, base) + change_base(x - base, base)\n    else:\n        return change_base(x // base, base) + change_base(x % base, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    num = 0\n    while x > 0:\n        x, rem = divmod(x, base)\n        num += rem\n    return str(num)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    while x!= 0:\n        result.append(str(x % base))\n        x /= base\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    x_str = str(x)\n    if len(x_str) > 1:\n        x_str = x_str[0]\n    x_str = '0' * (len(x_str) - 1)\n    if x < 0:\n        x_str = '-' + x_str\n    result = []\n    while x!= 0:\n        x_str = str(x % base) + x_str\n        x //= base\n    result.append(x_str)\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(int(x) // int(base)) + str(int(x) % int(base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    base = 10 if base > 10 else base\n    digits = []\n    while x!= 0:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Can't convert negative numbers.\")\n\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n\n    result = []\n    while x!= 0:\n        result.append(x % base)\n        x //= base\n\n    result.reverse()\n    return ''.join(str(i) for i in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return \"-1\"\n    num = []\n    while x > 0:\n        num.append(x % base)\n        x //= base\n    res = \"\"\n    for n in num:\n        res += str(n)\n    return res", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('Base must be less than 10')\n    new_str = ''\n    while x > 0:\n        new_str = str(base) + new_str\n        x /= base\n    return new_str[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"negative numbers are not allowed\")\n    x = str(x)\n    r = []\n    while x!= '0':\n        r.append(x[-1])\n        x = x[:-1]\n    r.reverse()\n    y = 0\n    for i in range(len(r)):\n        y += int(r[i]) * (base ** (len(r) - i - 1))\n    return str(y)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n\n    x_str = str(x)\n    x_len = len(x_str)\n    x_digits = 0\n    x_base = 0\n    while x_len > 0:\n        x_digit = int(x_str[-1])\n        x_base += x_digit\n        x_len -= 1\n\n    result = ''\n    for i in range(x_len):\n        digit = int(x_str[i])\n        result += str(digit + x_base * (10 ** (x_len - i - 1)))\n        x_base -= 1\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        result += str(x % base)\n        x //= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    if len(x) > 1:\n        return change_base(int(x[0]), base) + change_base(int(x[1:]), base)\n    return int(x) * 10 ** (len(x) - 1) % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not supported.')\n    if base < 2:\n        raise ValueError('Base must be greater than or equal to 2.')\n    return str(x) if base == 10 else str(int(x) // (base ** len(str(x))) % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = 0\n    while x!= 0:\n        result = result * base + x % base\n        x = x // base\n    return str(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    while x!= 0:\n        result = str(x % base) + result\n        x /= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Base number must be greater than 1\")\n    if x < 0:\n        raise ValueError(\"Number must be greater than 0\")\n    if base == 2:\n        return bin(x).replace('0b', '')\n    elif base == 8:\n        return hex(x).replace('0x', '')\n    elif base == 10:\n        return str(x)\n    elif base == 16:\n        return bin(x, base=2).zfill(len(str(x))+2)\n    elif base == 32:\n        return bin(x, base=2).zfill(len(str(x))+8)\n    else:\n        return bin(x, base=2).zfill(len(str(x))+base-2)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    if base > len(str(x)):\n        return '0'\n    if base == 2:\n        return str(int(x, 2))\n    if base == 3:\n        return str(int(x, 3))\n    if base == 4:\n        return str(int(x, 4))\n    if base == 5:\n        return str(int(x, 5))\n    if base == 6:\n        return str(int(x, 6))\n    if base == 7:\n        return str(int(x, 7))\n    if base == 8:\n        return str(int(x, 8))\n    if base == 9:\n        return str(int(x, 9))\n    if base == 10:\n        return x\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    num = str(x)\n    if num[0] in (\"0\", \"1\"):\n        if num[1] in (\"0\", \"1\"):\n            return \"0\"\n        else:\n            return num\n    if num[0] == \"0\":\n        return \"0\"\n    else:\n        num = num.replace(\"0\", \"\")\n        result = \"\"\n        while num:\n            result += num[0]\n            num = num[1:]\n        return result[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than or equal to 2')\n    if base > len(str(x)):\n        return '0'\n    new_base = len(str(x)) + 1\n    result = 0\n    for i in range(len(str(x))):\n        result += int(str(x)[i]) * (base ** i)\n    result = str(result)\n    while len(result) < new_base:\n        result = '0' + result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    x = str(x)\n    for i in range(len(x)):\n        result.append(x[i] + str(x[len(x) - 1 - i])[-2:])\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    if len(x) == 0:\n        return '0'\n    if x[0].isdigit():\n        x = '0' + x\n    x = x[::-1]\n    result = []\n    for i in range(len(x) - 1, -1, -1):\n        result.append(int(x[i]) * base + int(x[i - 1]))\n    return ''.join([str(i) for i in result])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x >= base:\n        return '0'\n    if x < 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    result = ''\n    while x > 0:\n        if x % base == 0:\n            result = str(x // base) + result\n            break\n        result = str(x // base) + result + str(x % base)\n        x = x // base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    num = 0\n    if x < 0:\n        x = abs(x)\n    while x > 0:\n        num += x % base\n        x //= base\n    return str(num)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return change_base(-x, base)\n    if base <= 2:\n        return str(x)\n    result = []\n    while x!= 0:\n        result.append(str(x % base))\n        x = x // base\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    while x > 0:\n        result.append(x % base)\n        x //= base\n    return \"\".join(str(x) for x in reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Convert x to string\n    x_str = str(x)\n    # Get length of x_str\n    x_len = len(x_str)\n    # If x is 0, return 0\n    if x == 0:\n        return '0'\n    # If x is 1, return 1\n    if x == 1:\n        return '1'\n    # If base is 0, return 0\n    if base == 0:\n        return '0'\n    # If base is 1, return 1\n    if base == 1:\n        return '1'\n    # If base is 2, return 0\n    if base == 2:\n        return '0'\n    # If base is 10, return x_str\n    if base == 10:\n        return x_str\n    # If base is 3, return x_str + '22'\n    if base == 3:\n        return '22' + x_str\n    # If base is 4, return '00' + x_str\n    if base == 4:\n        return '00' + x_str\n    # If base is 5, return '000' + x_str\n    if base == 5:\n        return '000' + x_str\n    # If base is 6, return '0000' + x_str\n    if base == 6:\n        return '0000' + x_str\n    # If base is 7, return '00000' + x_str\n    if base ==", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x)\n    # convert to int\n    x = int(x)\n    if x < 0:\n        raise ValueError(\"x cannot be negative\")\n    # find the length of the string\n    n = 0\n    while x!= 0:\n        x, r = divmod(x, base)\n        n += 1\n    s = []\n    # convert the int to a string\n    while n > 0:\n        s.append(str(x % base))\n        x, r = divmod(x, base)\n        n -= 1\n    # convert the string to a list of digits\n    s = [int(c) for c in reversed(''.join(s))]\n    # convert the digits to the new base\n    while len(s) > 0:\n        n = 0\n        while n < len(s):\n            s[n] *= base\n            n += 1\n    s = [str(x) for x in s]\n    # reverse the digits and join them together\n    return ''.join(reversed(s))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x // (10 ** (len(str(x)) - 1)) + \\\n        10 ** (len(str(x)) - 1) - 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x)\n    else:\n        x = str(x)\n        if len(x) > 1:\n            if base == 2:\n                return x[1:]\n            elif base == 8:\n                return x[1:].replace('0', '1').replace('1', '7').replace('2', '6').replace('3', '5').replace('4', '4').replace('5', '3').replace('6', '2').replace('7', '1').replace('8', '0')\n            elif base == 16:\n                return x[1:].replace('0', '10').replace('1', '11').replace('2', '12').replace('3', '13').replace('4', '14').replace('5', '15').replace('6', '10').replace('7', '9').replace('8', '8').replace('9', '7').replace('10', '6').replace('11', '5').replace('12', '4').replace('13', '3').replace('14', '2').replace('15', '1').replace('16", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed.')\n    if base < 2 or base > 9:\n        raise ValueError('Base number must be in the range [2, 9].')\n    digits = []\n    while x!= 0:\n        x, digit = divmod(x, base)\n        digits.append(digit)\n    digits.reverse()\n    return ''.join(str(digit) for digit in digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x)\n    result = []\n    while x > 0:\n        result.append(x % base)\n        x //= base\n    result.reverse()\n    result = [str(i) for i in result]\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > len(str(x)):\n        raise ValueError(\"base must be less than or equal to len(x)\")\n    if x < 0:\n        raise ValueError(\"x must be greater than 0\")\n    if base == len(str(x)):\n        return str(x)\n    else:\n        return \"\".join(str(x // base**i) for i in range(1, base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return hex(x)[2:]\n    new_num = 0\n    while x > 0:\n        new_num = new_num * base + x % base\n        x = x // base\n    return new_num", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number can't be negative\")\n    if base <= 0:\n        raise ValueError(\"Base number can't be negative\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number can't be bigger than input number\")\n\n    new_str = \"\"\n    while x!= 0:\n        new_str += str(x % base)\n        x /= base\n    return new_str[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = \"\"\n    while x > 0:\n        n = str(x % base) + n\n        x //= base\n    return n", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    while x:\n        result.append(x % base)\n        x /= base\n    return \"\".join(str(int(digit)) for digit in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    string = str(x)\n    for i in range(len(string)):\n        string[i] = str(ord(string[i]) - ord('0') + base)\n    return string", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    result = []\n    while x!= \"0\":\n        result.append(x[-1])\n        x = x[:-1]\n    result.reverse()\n    result = \"\".join(str(x) for x in result)\n    result = result.zfill(base)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    digits = []\n    while x:\n        x, rem = divmod(x, base)\n        digits.append(rem)\n    digits.reverse()\n    return ''.join(map(str, digits))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return x\n    else:\n        return \"\".join([str(x % base) for x in range(1, base + 1)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        x, remainder = divmod(x, base)\n        return change_base(remainder, base) + str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = [str(x) for x in range(1, base + 1)]\n    if x < base:\n        return '0' + digits[x - 1]\n    else:\n        return digits[(x // base) - 1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert base < 10\n    n = 0\n    while x!= 0:\n        n += base\n        x //= base\n    return str(n)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x = x // base\n    return ''.join(result[::-1])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not base >= 2:\n        raise ValueError('base must be greater or equal to 2')\n    return str(x).zfill(len(str(x))//(base//10))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    if base > len(x):\n        return '0'\n    result = ''\n    for i in range(len(x)):\n        result += str(x[i]) * (base ** (len(x) - i - 1))\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    num_str = str(x)\n    new_str = ''\n    for i in num_str:\n        new_str = new_str + str(ord(i) - ord('0') + 1) + str(base)\n    return new_str", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n\n    base = 10\n    x = x - base * (x // base)\n    x = x % base\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    while x!= 0:\n        x, r = divmod(x, base)\n        result = str(r) + result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join([str(x % base) for x in range(0, x, base)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert base < 10\n    if x == 0:\n        return '0'\n    if x < 0:\n        raise ValueError('Negative number is not allowed')\n    digits = []\n    while x:\n        digits.append(x % base)\n        x //= base\n    digits.reverse()\n    return ''.join([str(d) for d in digits])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x_str = str(x)\n    if len(x_str) > 1:\n        x_str = '0' * (len(x_str) - 1) + x_str\n    return x_str.zfill(len(str(base)) + 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = 0\n    while x >= base:\n        result += 1\n        x -= base\n    result += x\n    return str(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        x = abs(x)\n        base = -base\n    if base == 10:\n        return str(x)\n    result = []\n    while x!= 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    while x > 0:\n        x, i = divmod(x, base)\n        result.append(str(i))\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not base in range(2, 11):\n        raise ValueError('Invalid base')\n    new_value = 0\n    for i in range(len(x) - 1, -1, -1):\n        new_value = new_value * base + x[i]\n    return str(new_value)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    x = x\n    while x!= 0:\n        x, r = divmod(x, base)\n        result.append(str(r))\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        return x\n    if base == 2:\n        return '{:02b}'.format(x)\n    return '{:0{:d}b}'.format(x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('Negative numbers not allowed')\n    x = abs(x)\n    if x == 0:\n        return '0'\n    ret = ''\n    while x > 0:\n        x, r = divmod(x, base)\n        ret = str(r) + ret\n    return ret", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 2:\n        digits = ['0', '1', '01']\n    elif base == 3:\n        digits = ['0', '1', '11']\n    elif base == 4:\n        digits = ['0', '1', '11', '111']\n    elif base == 5:\n        digits = ['0', '1', '11', '111', '1111']\n    elif base == 6:\n        digits = ['0', '1', '11', '111', '1111', '11111']\n    elif base == 7:\n        digits = ['0', '1', '11', '111', '1111', '11111', '111111']\n    elif base == 8:\n        digits = ['0', '1', '11', '111', '1111', '11111', '111111', '11111111']\n    elif base == 9:\n        digits = ['0', '1', '11', '111', '1111', '11111', '111111', '11111111', '99999999']\n    elif base == 10:\n        digits = ['0', '1', '11', '111', '1111', '11111', '111111', '11111111', '99999999', '']", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('x must be greater than 0.')\n    if x == 0:\n        return '0'\n    result = []\n    while x:\n        x, remainder = divmod(x, base)\n        result.append(str(remainder))\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    i = 0\n    while x > 0:\n        result += str(x % base)\n        x //= base\n        i += 1\n    return result[0:i]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # step 1: convert to string\n    s = str(x)\n\n    # step 2: iterate over digits, convert to new base\n    result = ''\n    i = 0\n    while i < len(s):\n        digit = int(s[i])\n        result += str(digit // base)\n        digit = digit % base\n        result += str(digit)\n        i += 1\n\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x /= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 9:\n        return '{:}'.format(x)\n    else:\n        result = []\n        while x!= 0:\n            result.append(str(x % base))\n            x /= base\n        return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 0 < base < 10\n    result = \"\"\n    while x!= 0:\n        result = str(base % x) + result\n        x //= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"base must be bigger than 1\")\n    if base == 2:\n        if x < 0:\n            x += 1\n    result = \"\"\n    while x!= 0:\n        result = str(x % base) + result\n        x /= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x).zfill(len(str(x))//len(str(base))+1)[::-1].replace('0', '')[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 1 <= base <= 10\n    if x == 0:\n        return '0'\n    result = []\n    while x:\n        x, rem = divmod(x, base)\n        result.append(rem)\n    return ''.join(str(x) for x in reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # TODO(hzeller): this is not working properly\n    # if base is not 2, 3 or 10\n    # if base is not 2, 3 or 10\n    if base not in [2, 3, 10]:\n        print('Invalid base.')\n    # TODO(hzeller): this is not working properly\n    # if x is not 0\n    # if x is not 0\n    if x == 0:\n        return '0'\n    # TODO(hzeller): this is not working properly\n    # if base is not 2, 3 or 10\n    # if base is not 2, 3 or 10\n    if base not in [2, 3, 10]:\n        print('Invalid base.')\n    if base == 2:\n        # TODO(hzeller): this is not working properly\n        # if x is not 0\n        # if x is not 0\n        if x == 0:\n            return '0'\n        return str(bin(int(x))[2:])\n    elif base == 3:\n        # TODO(hzeller): this is not working properly\n        # if x is not 0\n        # if x is not 0\n        if x == 0:\n            return '0'\n        return str(bin(int(x))[3:])\n    elif", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    for _ in range(x):\n        result = str(base) + result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"base number must be less than 10\")\n    if base < 2:\n        raise ValueError(\"base number must be greater than 1\")\n\n    x = str(x)\n    digits = []\n    while x!= \"0\":\n        digits.insert(0, x[-1])\n        x = x[:-1]\n\n    digits.insert(0, base)\n    return \"\".join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('x must be non-negative')\n    if base < 2:\n        raise ValueError('base must be 2 or higher')\n    if base == 2:\n        return bin(x)[2:]\n    else:\n        return str(x).zfill(int(log(x, base)) + 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = 10\n    result = []\n    while x!= 0:\n        result.insert(0, str(x % base))\n        x /= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if x < 0:\n        raise ValueError('base must be greater than 0')\n    if base < 10:\n        return str(x) + '0'\n    if base < 16:\n        if x >= base:\n            raise ValueError('base must be greater than 10')\n        return str(x) + '1'\n    result = []\n    while x > 0:\n        x, r = divmod(x, base)\n        result.append(str(r))\n    result.reverse()\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(x % base)\n        x /= base\n    digits.reverse()\n    return ''.join(map(str, digits))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    return \"\".join([str(d) for d in digits])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    base = base\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    for i in range(x, 0, -1):\n        result.append(str(i % base) + str(i / base))\n    return ''.join(result[::-1])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not 0 < base < 10:\n        raise ValueError(\"Invalid base number.\")\n    if base == 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    result = []\n    while x!= 0:\n        result.append(str(x % base))\n        x /= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('base must be >= 2')\n\n    if base == 2:\n        return bin(x).lstrip('0b')\n    elif base == 8:\n        return bin(x).lstrip('0b')\n    elif base == 10:\n        return str(x)\n\n    if x < 0:\n        x = abs(x)\n        base = -base\n\n    while x >= base:\n        x, r = divmod(x, base)\n        s = str(r) + s\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 0 < x and 0 < base\n    result = 0\n    while x!= 0:\n        result = result * base + x % base\n        x = x // base\n    return str(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('x must be greater than 0')\n    x_str = str(x)\n    if x_str[-1]!= '0':\n        x_str = '0' + x_str\n    if base < 2:\n        raise ValueError('base must be greater than 0')\n    base_str = str(base)\n    if base_str[-1]!= '0':\n        base_str = '0' + base_str\n    digits = []\n    while x_str:\n        num = int(x_str[:-1])\n        digits.append(num)\n        x_str = x_str[-1]\n    result = []\n    while digits:\n        result.append(digits.pop(0) * int(base_str[:-1]))\n        base_str = base_str[-1]\n    result = [int(i) for i in result]\n    return ''.join(str(i) for i in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be >= 0\")\n    if x == 0:\n        return \"0\"\n    if base < 2:\n        raise ValueError(\"base must be >= 2\")\n    if base == 2:\n        return str(int(x))\n    if base == 8:\n        return str(int(x) % 256)\n    digits = []\n    while x:\n        digits.append(x % base)\n        x //= base\n    digits.reverse()\n    return \"\".join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return str(x)\n    if x == 0:\n        return '0'\n    result = []\n    while x!= 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number cannot be negative\")\n    result = []\n    if x == 0:\n        return \"0\"\n    while x > 0:\n        x, r = divmod(x, base)\n        result.append(str(r))\n    result.reverse()\n    return \"\".join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not (0 < x < 10):\n        raise ValueError(\"number should be less than 10.\")\n\n    result = []\n    while x!= 0:\n        result.append(x % base)\n        x //= base\n    result.reverse()\n    return \"\".join([str(i) for i in result])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = []\n    while x!= 0:\n        digits.append(x % base)\n        x /= base\n    digits.reverse()\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Number must be positive\")\n    x = str(x)\n    if base < 2:\n        raise ValueError(\"Base number must be 2 or more\")\n    if base > len(str(x)):\n        raise ValueError(\"Base number must be less than the length of input number\")\n    result = []\n    while x!= \"\":\n        x, r = divmod(int(x), base)\n        result.append(str(r))\n    result = \"\".join(result)\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('x must be positive')\n\n    new_num = 0\n    for i in range(len(str(x))):\n        new_num += int(str(x)[i]) * int(str(base)[len(str(x)) - 1 - i])\n\n    return new_num", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = int(x)\n    base = int(base)\n\n    x = str(x)\n    base = str(base)\n\n    if base < 10:\n        x = '0' + x\n\n    x = x[::-1]\n    base = base[::-1]\n\n    base = int(base)\n    x = int(x)\n\n    if base == 0:\n        return '0'\n\n    while x > 0:\n        x, rem = divmod(x, base)\n        result = str(rem) + result\n\n    return result[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive\")\n    if base <= 1:\n        raise ValueError(\"Base number must be greater than 1\")\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    result = []\n    while x:\n        x, r = divmod(x, base)\n        result.append(r)\n    result.reverse()\n    return ''.join(str(r) for r in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x /= base\n    return ''.join(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return \"\".join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base_list = []\n    while x >= base:\n        x -= base\n        base_list.append(base)\n    base_list.append(x)\n    return \"\".join(str(x) for x in base_list)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        return \"0\"\n    if base > len(str(x)):\n        return \"0\"\n    if base < len(str(x)):\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return bin(x)[3:]\n    if base == 10:\n        return str(x)\n    return \"0\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    while x!= 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(result[::-1])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    s = str(x)\n    if len(s) > 1:\n        return change_base(int(s[1:]), base) + '0' * (len(s) - 1)\n    else:\n        return '0' * (len(s) - 1) + change_base(int(s), base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # convert x to string\n    x = str(x)\n    # find out digits in x\n    l = len(x)\n    # create new string with digits in base base\n    y = ''\n    for i in range(l):\n        y = y + str(int(x[i]) * (base ** (l - 1 - i)))\n    return y", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return \"\".join([str(x // base**i) for i in range(len(str(x)))])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x)\n    elif base == 2:\n        return bin(x)\n    elif base == 8:\n        return oct(x)\n    elif base == 16:\n        return hex(x)\n    else:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    new_x = ''\n    while x!= '':\n        x = int(x) % base\n        new_x = str(x) + new_x\n    return new_x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not (0 < base < 10):\n        raise ValueError(\"Invalid base number\")\n\n    if x == 0:\n        return '0'\n\n    digits = []\n    while x!= 0:\n        x, r = divmod(x, base)\n        digits.append(str(r))\n\n    result = ''.join(digits[::-1])\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return x\n    result = []\n    while x!= 0:\n        result.insert(0, x % base)\n        x //= base\n    return \"\".join([str(x) for x in reversed(result)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    x = x - base\n    while x > 0:\n        x = x // base\n        result.append(str(x))\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # x = x * base ** (len(str(x)) - 1)\n    return str(x)[::-1].zfill(len(str(x))).zfill(len(str(base)))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        return None\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[1:]\n    if base == 10:\n        return str(x)\n    new_num = 0\n    for i in range(len(str(x))):\n        new_num += int(str(x)[i]) * (base ** (len(str(x)) - i - 1))\n    return str(new_num)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    while x > 0:\n        if x % base == 0:\n            result = str(x // base) + result\n        x //= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    return str(x // base) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n        new_str = []\n        while x > 0:\n            new_str.append(str(x % base))\n            x = x // base\n        return ''.join(reversed(new_str))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return '0'\n    elif x == base:\n        return ''\n    else:\n        result = []\n        while x > 0:\n            result.append(str(x % base))\n            x //= base\n        return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 0 < base < 10, \"Base should be less than 10.\"\n\n    s = str(x)\n    num_str = []\n    while s:\n        num_str.append(s[-1])\n        s = s[:-1]\n    num_str.reverse()\n    return ''.join([str(num_str[i]) for i in range(len(num_str)) if num_str[i]!= 0]) + str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 0 <= x <= 9\n    assert 0 <= base <= 10\n    assert 10**base == 2**base + 2**(base - 1) +... + 2**1 + 2**0\n    x = str(x)\n    if base == 2:\n        return ''.join(map(lambda i: chr(int(i)), x))\n    elif base == 8:\n        return ''.join(map(lambda i: chr(int(i, 2)), x))\n    elif base == 10:\n        return x\n    else:\n        return ''.join(map(lambda i: chr(int(i, 2)), x))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    num = str(x)\n    if num[-1] == '0':\n        num = num[:-1]\n    return num[::-1].zfill(len(num) + (base - len(str(x))) % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = list(str(x))\n    for i in range(len(digits)):\n        digits[i] = str(base)[int(digits[i])]\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    if base < 2:\n        return x\n    if base == 2:\n        return \"0\" + x\n    return x[::-1].zfill(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = []\n    while x > 0:\n        result.append(x % base)\n        x //= base\n    return ''.join([str(r) for r in reversed(result)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return None\n    if x == 0:\n        return '0'\n    if base < 2:\n        return None\n    if base > len(str(x)):\n        return None\n    new_str = ''\n    while x:\n        new_str += str(x % base)\n        x /= base\n    return new_str[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    for digit in str(x):\n        result = str(int(digit) * base) + result\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"number must be positive\")\n    digits = []\n    while x!= 0:\n        x, r = divmod(x, base)\n        digits.append(r)\n    return ''.join(str(d) for d in digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    num = 0\n    while x > 0:\n        num = num * base + x % base\n        x //= base\n    return str(num)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    while x!= 0:\n        result.insert(0, x % base)\n        x /= base\n    result.insert(0, base)\n    return \"\".join(str(x) for x in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not x or not base:\n        return \"0\"\n    if x < base:\n        return \"0\"\n    if x == 0:\n        return \"0\"\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return \"\".join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = 0\n    if x < base:\n        return '0'\n    while x!= 0:\n        result = result + (x % base)\n        x = x // base\n    return str(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x)[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    while x > 0:\n        result.append(x % base)\n        x = x // base\n    result.reverse()\n    return ''.join([str(i) for i in result])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-1'\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    digits.reverse()\n    return ''.join(str(d) for d in digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = int(x)\n    if x < 0:\n        raise ValueError(\"x should be positive\")\n    if base < 2:\n        raise ValueError(\"base should be 2 or greater\")\n    if x == 0:\n        return \"0\"\n    return str(x).zfill(len(str(x).zfill(1)) + base - 2)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = 0\n    while x > 0:\n        result += x % base\n        x //= base\n    result += x\n    return str(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = 0\n    while x > 0:\n        result += x % base\n        x //= base\n    return str(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 0 <= x <= 9\n    assert 2 <= base <= 10\n    n = len(str(x))\n    num = \"\"\n    for i in range(n):\n        num += str(x % base)\n        x = x // base\n    return num", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    elif x == 1:\n        return '1'\n    elif x < 0:\n        return '-' + change_base(-x, base)\n    else:\n        return change_base(x // base, base) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        return ''\n    if base == 2:\n        return str(x)\n    result = []\n    while x > 0:\n        x, digit = divmod(x, base)\n        result.append(str(digit))\n    return ''.join(reversed(result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not (0 < x < base):\n        raise ValueError(\"Value of x should be between 0 and base\")\n    result = 0\n    while x > 0:\n        result = result * base + x % base\n        x //= base\n    return str(result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join([str(x // base**i) for i in range(int(math.log(x, base)))])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    s = str(x)\n    while len(s) < len(str(base)):\n        s = '0' + s\n    return s[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > len(str(x)):\n        return str(x)\n    if base < 2:\n        return str(x)\n    return str(x)[::-1].zfill(base)[::-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        result += str(x % base)\n        x //= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    new_str = \"\"\n    base = str(base)\n    for i in x:\n        new_str += str(int(i) // int(base) % 10) + base[i]\n    return new_str", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = []\n    while x:\n        result.append(x % base)\n        x //= base\n    return \"\".join([str(n) for n in reversed(result)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    while x!= 0:\n        result += str(x % base)\n        x /= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = int(x)\n    result = []\n    while x > 0:\n        result.append(x % base)\n        x /= base\n    result.reverse()\n    return \"\".join(str(i) for i in result)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    string = str(x)\n    result = []\n    for i, char in enumerate(string):\n        if char == '0':\n            result.append(0)\n        else:\n            result.append(int(char) * (10 ** (len(string) - i - 1)))\n\n    return ''.join(map(str, result))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n        result += str(x % base)\n        x //= base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        raise ValueError('Number cannot be less than base.')\n    if x == 0:\n        return '0'\n    if x < base:\n        return str(x) + change_base(x // base, base)\n    else:\n        return '0' * (base - 1) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if x >= base:\n        x = x % base\n    if x < base:\n        return str(x)\n    return str(x) + change_base(x - base, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"Base must be less than 10.\")\n    if x < 0:\n        raise ValueError(\"Input must be non-negative.\")\n    new_str = \"\"\n    for _ in range(len(str(x))):\n        new_str = new_str + str(x % base)\n        x //= base\n    return new_str", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    base_numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    base = len(base_numbers)\n    if base < 10:\n        return '0'\n    new_x = ''\n    for i in range(0, x):\n        new_x += base_numbers[(x - i) % base]\n    return new_x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return str(-x)[::-1]\n    if base == 2:\n        return bin(x).lstrip('0b')\n    elif base == 8:\n        return bin(x).lstrip('0b').zfill(8)\n    elif base == 16:\n        return hex(x)\n    elif base == 10:\n        return str(x)\n    else:\n        raise ValueError('Invalid base')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x = x // base\n    digits.reverse()\n    return ''.join(str(d) for d in digits)"]]