[["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Init list of factors\n    factors = []\n\n    # Begin from 2 and search up to sqrt of n\n    for i in range(2, int(n ** 0.5) + 1):\n        # Check if n is divisible by i\n        if not n % i:\n            # If it is, then n is product of i and some number\n            # So add i to list of factors and multiply i by this number\n            factors.append(i * n // i)\n            n = n // i\n\n    # Check if remainder is 0\n    if n!= 0:\n        # If n is not 0, then n is prime\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Create a list to store factors\n    factor_list = []\n\n    # Get factors from 2 to sqrt(n)\n    for factor in range(2, int(n**0.5) + 1):\n        if n % factor == 0:\n            # We have a factor\n            factor_list.append(factor)\n            # Remove the factor from the number\n            n //= factor\n\n    # If the number is not zero at this point, then it is not\n    # possible to find factors\n    if n!= 0:\n        raise ValueError('{0} is not prime'.format(n))\n\n    # Return list of factors\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return factorize(n // 2) + [2]\n    n = int(n ** 0.5)\n    factors = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n!= 1:\n        factors.append(n)\n        n //= n - 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    if n < 2:\n        return factors\n\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n            while n > 1:\n                factors.append(n)\n                n = n // i\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    l = [2]\n    for i in range(3, n + 1):\n        if n % i == 0:\n            for j in l:\n                n /= j\n                n *= i\n            l += [i]\n    return l", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    factors = [n]\n    while factors[-1] < n:\n        factors.append(1)\n    for x in range(2, int(n**0.5) + 1):\n        if n % x == 0:\n            factors[-1] *= x\n            factors.append(1)\n            n /= x\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            factors.append(factor)\n            n //= factor\n        else:\n            factor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not n:\n        return []\n    # if number is not prime, then it is divisible by some of its factors\n    # We start from prime factors and go down to numbers and count how many times each factor appears.\n    # I hope I got that right... :)\n    factors = factorize(n)\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # TODO remove local variables\n    fact_list: List[int] = []\n    fact_ind: int = 1\n    while n > 1:\n        for i in range(1, n):\n            if n % i == 0:\n                fact_list.append(i)\n                fact_ind += 1\n                n /= i\n                break\n        else:\n            fact_list.append(n)\n            fact_ind += 1\n            n = 1\n    return fact_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [1]\n    while n > 1:\n        factors.append(n % 10)\n        n //= 10\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n //= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n //= 3\n        else:\n            while n % 5!= 0:\n                n //= 5\n            factors.append(5)\n            n //= 5\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n\n    factors = [1]\n    for f in factorize(n - 1):\n        if f * f > n:\n            factors.append(f)\n        else:\n            n //= f\n            factors.append(f)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n\n    while n!= 1:\n        for i in range(2, n):\n            if n % i == 0:\n                factors.append(i)\n                n = n // i\n                break\n        else:\n            factors.append(n)\n            n = 1\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    result = []\n    factors = [i for i in range(2, int(n ** 0.5) + 1) if n % i == 0]\n\n    for factor in factors:\n        if factor > 1:\n            result.append(factor)\n\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    assert n > 1, \"Invalid input\"\n\n    # if n = 1 then 1 is its own prime factorization\n    if n == 1:\n        return []\n\n    prime_factors = []\n    # prime numbers\n    for p in prime_numbers:\n        if n % p == 0:\n            prime_factors.append(p)\n            n //= p\n            continue\n        else:\n            break\n    # append 1, n will be the product of factors\n    prime_factors.append(1)\n\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    result = []\n    current_prime = 2\n    while True:\n        if n % current_prime == 0:\n            result.append(current_prime)\n            n //= current_prime\n        else:\n            current_prime += 1\n        if n == 1:\n            break\n    result.append(n)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = [1]\n    for i in range(2, n + 1):\n        if not n % i:\n            factors.append(i)\n            n //= i\n        else:\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            factors.append(factor)\n            n //= factor\n        else:\n            factor += 1\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            factors[-1] *= i\n            factors.append(i)\n            n //= i\n        else:\n            break\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = []\n    if n % 2 == 0:\n        if n == 2:\n            return [2]\n        else:\n            return []\n    for i in range(3, n + 1, 2):\n        if n % i == 0:\n            k = n // i\n            primes.append(i)\n            while k % i!= 0:\n                primes.append(i)\n                k //= i\n    return primes", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    current = 2\n    while current * current <= n:\n        factors.append(current)\n        current += 1\n    factors.append(n)\n    factors.sort(key=lambda factor: factor)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    x = 2\n    while x * x <= n:\n        if n % x == 0:\n            factors.append(x)\n            n //= x\n        else:\n            x += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 2:\n        return []\n\n    factors = []\n\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n //= 2\n        else:\n            factors.append(n)\n            n //= n - 1\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    prime_list = range(2, n + 1)\n    prime_list.remove(2)\n\n    for p in prime_list:\n        if n % p == 0:\n            factors.append(p)\n            n //= p\n            while n % p == 0:\n                n //= p\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not n:\n        return []\n\n    #  try to use Sieve of Eratosthenes\n    if n > 20:\n        return factorize_eratosthenes(n)\n\n    #  check if number is a prime\n    if n % 2 == 0 or n == 1:\n        return [n,]\n\n    #  2 is a special case\n    if n == 2:\n        return [2]\n\n    #  continue recursively\n    factors = factorize(n // 2)\n    factors.extend([n,])\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    factors = []\n    if n % 2:\n        factors.append(2)\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                n /= i\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n == 1:\n        return [1]\n\n    if n == 2:\n        return [2]\n\n    factors = []\n    for i in range(3, n, 2):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n            factors.append(n)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        prime = prime_factorize(n)\n        factors.append(prime)\n        n //= prime\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    assert n > 1\n\n    f = []\n    # Find the prime factors of n and their multiplicities\n    for i in range(1, n + 1):\n        if n % i == 0:\n            f.append(i)\n            n //= i\n    # Append 1 to the list of factors\n    f.append(1)\n    # If n is odd, append it and 1 as factors to the list\n    if n > 1:\n        f.append(n)\n        f.append(1)\n    # Return the list of factors\n    return f", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Value of n should be non-negative integer.\")\n    factors = []\n    # check if n is a prime number\n    if n == 1:\n        return factors\n    elif n == 0:\n        return factors\n    elif n == 2:\n        factors.append(2)\n        return factors\n    # check if n is a prime number\n    elif n % 2 == 0:\n        factors.append(2)\n        n = n / 2\n        while n > 1:\n            if n % 2 == 0:\n                factors.append(2)\n                n = n / 2\n            else:\n                factors.append(n)\n                n = n / 2\n    else:\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [1]\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(f\"Expected integer, {type(n)} given\")\n    if n == 1:\n        return []\n    factors = []\n    if n < 0:\n        n *= -1\n        factors = reversed(factors)\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n            factors += factorize(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [n]\n    factors = [2]\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            factors.append(2)\n        else:\n            factors.append(n)\n            break\n\n    factors = [int(i) for i in factors]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # initialising factors list to empty\n    factor_list = []\n    # initialising list of prime numbers in range (2, n) that are not factors of n\n    primes = []\n    for prime in range(2, n + 1):\n        if n % prime == 0:\n            # if n is divisible by some prime number, it should not be added to the list of primes\n            continue\n        else:\n            # if n is not divisible by any of the prime numbers in range(2, n) it should be added to the list of primes\n            primes.append(prime)\n    for prime in primes:\n        if n % prime == 0:\n            # if n is divisible by some prime number, it should not be added to the list of primes\n            continue\n        else:\n            factor_list.append(prime)\n\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # n = 4\n    # 2 * 2 * 2 * 2\n    # for 4 to infinity\n    factors = []\n    counter = 1\n    while counter <= n:\n        counter += 1\n        if n % counter == 0:\n            factors.append(counter)\n            n = n / counter\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    while n > 1:\n        factor = n\n        while factor % 2 == 0:\n            factor /= 2\n        factors.append(factor)\n        n /= factor\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    factors = []\n    n = n - 1\n    # Generate all divisors of n\n    divisors = []\n    while n % 2 == 0:\n        divisors.append(2)\n        n /= 2\n    divisors.append(n)\n    while n > 1:\n        for factor in divisors:\n            if n % factor == 0:\n                factors.append(factor)\n                n /= factor\n                break\n        else:\n            factors.append(n)\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Finds prime factors of n, returns list of factors.\n    # n is the number to factor\n    # e.g. for n = 25, the function returns a list of [5, 5], because 25 = 5*5\n    # When number is prime, the list returned will contain that number only\n    # e.g. for n = 5, the function returns a list of [5], because 5 is prime\n    # When number is not prime, the function uses the following formula to find prime factors\n    # n = n1*n1 + n2*n2 +... + nn*n\n    # where n1, n2,..., nn are prime factors\n    # e.g. for n = 8, the function returns a list of [2, 2, 2], because 8 = 2*2*2\n    if n <= 1:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return []\n    else:\n        n1 = 2\n        while n1 * n1 <= n:\n            if n % n1 == 0:\n                factors = factorize(n // n1)\n                factors.append(n1)\n                return factors\n            n1 += 1\n        return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    number = 1\n    while number < n:\n        if n % number == 0:\n            factors.append(number)\n            n = n // number\n        else:\n            number = number + 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        factors.append(n)\n        n //= n.bit_length()\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    if n < 0:\n        raise ValueError(\"n must be non-negative integer\")\n    while n % 2 == 0:\n        n //= 2\n        factors.append(2)\n    while n % 3 == 0:\n        n //= 3\n        factors.append(3)\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = abs(n)\n    factors = [2] * (n // 2)\n    prime_factors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            n //= i\n            factors.append(i)\n        else:\n            if i < n:\n                factors[-1] *= i\n                n -= i\n                break\n            else:\n                prime_factors.append(factors)\n                factors = [i for i in range(1, int(n ** 0.5) + 1) if n % i == 0]\n                n -= i\n    prime_factors.append(factors)\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if not n % i:\n            factors.append(i)\n            n //= i\n        else:\n            break\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if not n > 1:\n        return []\n\n    factors = []\n    prime_factors = []\n    for p in range(2, n + 1):\n        if n % p == 0:\n            prime_factors.append(p)\n            n //= p\n    factors.append(prime_factors)\n    factors.append(p for p in range(2, n + 1) if n % p == 0)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n\n    while n > 1:\n        for factor in factors:\n            if n % factor == 0:\n                n /= factor\n                break\n        else:\n            if n == 1:\n                return factors\n            else:\n                factors.append(n)\n    else:\n        raise Exception(\"Invalid input\")\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Argument should be positive.\")\n    factors = []\n    while n > 1:\n        p = int(n ** 0.5)\n        if p > 1:\n            n //= p\n            factors.append(p)\n        else:\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n\n    n_squared = n*n\n    if n_squared == 1:\n        return [1]\n\n    factors.append(n)\n    while n_squared > 1:\n        for i in range(2, int(n_squared ** 0.5) + 1):\n            if n_squared % i == 0:\n                factors.append(i)\n                n_squared = n_squared / i\n                break\n        else:\n            break\n\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    factors = []\n    while True:\n        if n % 2 == 0:\n            factors.append(2)\n            n //= 2\n            continue\n        if n % 3 == 0:\n            factors.append(3)\n            n //= 3\n            continue\n        if n % 5 == 0:\n            factors.append(5)\n            n //= 5\n            continue\n        if n % 7 == 0:\n            factors.append(7)\n            n //= 7\n            continue\n        if n > 1:\n            factors.append(n)\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # Computing square root of n\n    s = int(n**.5)\n\n    # Taking the first factor from the list of prime numbers\n    s_p = [2] + [2 for p in range(3, n + 1) if n % p == 0]\n\n    # Computing power of s to obtain the number n\n    s_p.append(n / s)\n\n    return s_p", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not n:\n        return []\n\n    factors = []\n    prim = 2\n    while n:\n        if n % prim:\n            factors.append(prim)\n            n //= prim\n            continue\n        else:\n            prim += 1\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    result = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            result.append(i)\n            n //= i\n    if n!= 1:\n        result.append(n)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Step 1\n    factors = []\n    # Step 2\n    while n!= 1:\n        # Step 3\n        if n % 2 == 0:\n            n = n // 2\n            factors.append(2)\n        else:\n            if n % 3 == 0:\n                n = n // 3\n                factors.append(3)\n            else:\n                if n % 5 == 0:\n                    n = n // 5\n                    factors.append(5)\n                else:\n                    if n % 7 == 0:\n                        n = n // 7\n                        factors.append(7)\n                    else:\n                        if n % 11 == 0:\n                            n = n // 11\n                            factors.append(11)\n                        else:\n                            if n % 13 == 0:\n                                n = n // 13\n                                factors.append(13)\n                            else:\n                                if n % 17 == 0:\n                                    n = n // 17\n                                    factors.append(17)\n                                else:\n                                    if n % 19 == 0:\n                                        n = n // 19\n                                        factors.append(19)\n                                    else:\n                                        if n % 23 == 0:\n                                            n = n // 23\n                                            factors.append(23)\n                                        else:\n                                            if n % 29 == 0:\n                                                n = n // 29\n                                                factors.append(29)\n                                        else:\n                                            if n % 31 == 0:\n                                                n = n // 31\n                                                factors.append(31)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        for i in range(2, n // 2 + 1):\n            if n % i == 0:\n                factors.append(i)\n                n = n // i\n        if n == 1:\n            factors.append(n)\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    number = n\n\n    while number!= 1:\n        if number % 2 == 0:\n            factors.append(2)\n            number /= 2\n        else:\n            factors.append(number)\n            number /= number - 1\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    num = n\n    res = []\n    while num > 1:\n        res.append(num % 10)\n        num //= 10\n    res.reverse()\n    return res", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n\n    factors = []\n    if n < 0:\n        raise Exception(\"Input number should be positive\")\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n            while n % i == 0:\n                n //= i\n    if n > 1:\n        factors.append(n)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import time\n    st = time.time()\n\n    factors = []\n    num = 1\n    while n!= 1:\n        factors.append(n)\n        n = n / factors[-1]\n        if n == 0:\n            break\n    if n!= 1:\n        print('WARNING: num not prime')\n    factors.sort(reverse=True)\n    factors = factors[:-1]\n    print('WARNING: sort')\n    print(time.time() - st)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return factorize_rec(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [2, n // 2]\n    prime = 2\n    factors = []\n    while n > 1:\n        while n % prime == 0:\n            n //= prime\n            factors.append(prime)\n        if n > 1:\n            prime += 1\n        else:\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    factors = []\n    prime_factors = []\n    while n > 1:\n        prime, i = get_factor(n)\n        prime_factors.append(prime)\n        if prime_factors[0] == prime:\n            prime_factors.pop(0)\n        for i in range(prime, 1, -1):\n            if n % i == 0:\n                prime_factors.append(i)\n                factors.append(i)\n                n //= i\n            else:\n                break\n    factors.extend(prime_factors)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    assert n > 0, \"Input number should be greater than 0\"\n    # Edge case\n    if n == 1:\n        return [1]\n\n    # If number is even - it is not prime, so we return a empty list\n    if n % 2 == 0:\n        return []\n\n    # Initial list to store factors\n    factors = []\n\n    # Number of iterations in loop\n    limit = int(n**0.5)\n\n    # Loop control variable\n    count = 1\n\n    while count <= limit:\n        # Even number can't be a prime factor\n        if count % 2 == 0:\n            break\n\n        # For every prime number p in range we check whether n % p == 0\n        # if the result is 0 - p is a factor of n, we add p to the list\n        # and increase the count by 1.\n        for p in range(2, count + 1):\n            if n % p == 0:\n                factors.append(p)\n                n //= p\n                break\n\n        count += 1\n\n    # If number is not divisible by any of the prime factors - it is not a prime number\n    if n > 1:\n        factors.append(n)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    n -= 1\n    f = [2]\n    while True:\n        if n % 2 == 0:\n            n //= 2\n            f.append(2)\n        else:\n            break\n    l = []\n    for i in range(len(f)):\n        if n % f[i] == 0:\n            n //= f[i]\n            l.append(f[i])\n            f[i] *= f[i]\n        else:\n            f[i] += 1\n    return f + l", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n should be integer.\")\n\n    factors = []\n    factors_f = []\n    gcd = n\n    while gcd!= 1:\n        gcd, x = divmod(gcd, n)\n        factors.append(x)\n        factors_f.append(gcd)\n\n    factors.sort()\n    factors_f.sort()\n    factors = [f for f in factors if f > 1]\n    factors_f = [f for f in factors_f if f > 1]\n    factors = [f for f in factors if f <= n]\n\n    result = []\n    for f in factors:\n        i = 0\n        while f * i <= n:\n            i += 1\n        result.append(f * i)\n    result = [f for f in result if f <= n]\n\n    return result\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    num = 1\n    while num <= n:\n        if n % num == 0:\n            factors.append(num)\n            n //= num\n        else:\n            break\n    if n == 1:\n        factors.append(1)\n    else:\n        factors.append(n)\n\n    return sorted(factors)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    prime = 2\n    while prime * prime <= n:\n        while n % prime == 0:\n            factors.append(prime)\n            n //= prime\n        prime += 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    prime_factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            prime_factors.append(2)\n        else:\n            prime_factors.append(n)\n            n //= 2\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    if n < 1:\n        raise ValueError(\"Argument to factorize should be positive integer\")\n    primes = []\n    while n > 1:\n        for prime in primes:\n            if n % prime == 0:\n                n //= prime\n                primes.append(prime)\n                break\n        if n!= 1:\n            primes.append(n)\n    return primes", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    if n <= 1:\n        return factors\n    factors.append(n)\n    # Loop stops when n is 1 or the product of current factors is greater than n\n    while True:\n        for i in range(1, n):\n            n //= i\n            if n == 1:\n                break\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    primes = sieve_arithmetic(n)\n    if not primes:\n        return []\n    factors = []\n    for i in range(2, len(primes)):\n        while n % primes[i] == 0:\n            factors.append(primes[i])\n            n /= primes[i]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = abs(n)  # convert to positive\n    if n <= 1:\n        return []\n\n    # find factor with odd exponent\n    for i in range(2, int(n**0.5) + 1):\n        if n % i:\n            break\n    else:\n        # n is prime\n        return [i if i > 1 else 1] + factorize(n // i)\n\n    # factorize current number\n    factors = []\n    while n > 1:\n        factors.append(n % i)\n        n //= i\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # prime numbers less than given number\n    prime_numbers: List[int] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    assert n > 0, \"Input number should be positive\"\n\n    factors = []\n\n    while n > 1:\n        for divisor in factors:\n            if n % divisor == 0:\n                n //= divisor\n                break\n        else:\n            factors.append(n)\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    if n == 1:\n        return []\n    while n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                n /= i\n                break\n        else:\n            break\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    else:\n        prime_factors = []\n        while n > 1:\n            for i in range(2, n // 2 + 1):\n                if n % i == 0:\n                    prime_factors.append(i)\n                    n //= i\n        prime_factors.append(n)\n        return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # check validity of input number\n    assert n > 0, 'Input number cannot be 0'\n    # check if number is even\n    if n % 2 == 0:\n        return factorize(n // 2)\n    # check if number is odd\n    elif n % 2!= 0:\n        # check if number is prime\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                if i == n:\n                    return [i, 1]\n                else:\n                    return [i, factorize(n // i)]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n\n    factors = []\n\n    def _find(remainder: int):\n        global factors\n        if not remainder:\n            return\n        if remainder in factors:\n            factors[factors.index(remainder)] += 1\n        else:\n            factors.append(1)\n            _find(remainder // remainder)\n\n    _find(n)\n    factors.reverse()\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    factor, rem = n, 0\n    while rem > 0:\n        while rem % factor == 0:\n            factors.append(factor)\n            rem /= factor\n        factor += 1\n    factors.append(factor)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [2]\n    while n > 1:\n        m = n\n        while m % 2 == 0:\n            m //= 2\n            factors.append(2)\n        if m > 1:\n            factors.append(m)\n            n //= m\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = 2\n    prime_factors = []\n    while n % factor == 0:\n        factor *= factor\n        prime_factors.append(factor)\n    prime_factors.append(factor)\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = abs(n)\n    if n <= 1:\n        return []\n    factors = []\n    if n % 2 == 0:\n        factors.append(2)\n    while n % 2 == 0:\n        n = n / 2\n        factors.append(2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            n = n / i\n            factors.append(i)\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    prime = 2\n    while prime * prime <= n:\n        if n % prime == 0:\n            factors.append(prime)\n            n //= prime\n        else:\n            prime += 1\n    if n!= 1:\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Number should be greater than 1\")\n\n    if n == 1:\n        return [1]\n\n    factors = []\n    if n <= 2:\n        return [2] + factors\n\n    for p in range(3, n, 2):\n        if n % p == 0:\n            factors.append(p)\n            factors.append(n // p)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Argument should be a positive integer\")\n\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 1:\n        return []\n\n    # Find prime factors in range 2...sqrt(n)\n    sieve = [1] * n\n    # mark multiples of 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if sieve[i] > 0:\n            sieve[i * 2] = 0\n            sieve[i * 2 + 1] = 0\n\n    # mark multiples of 3\n    for i in range(3, n, 3):\n        sieve[i] = 0\n\n    # mark multiples of 5\n    for i in range(5, n + 1, 5):\n        sieve[i] = 0\n\n    prime_factors = []\n    current_factor = 2\n    while True:\n        if sieve[current_factor]:\n            prime_factors.append(current_factor)\n        else:\n            break\n        current_factor += 1\n\n    if n % current_factor == 0:\n        prime_factors.append(n / current_factor)\n\n    return prime_factors\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    elif n == 0:\n        raise ValueError('Factorization of 0 is not defined')\n    elif n == 2:\n        return [2]\n    elif n % 2 == 0:\n        return factorize(n // 2) + [int(n % 2)]\n    else:\n        factors = []\n        while n > 1:\n            if n % 2 == 0:\n                n //= 2\n                factors.append(int(n % 2))\n            else:\n                n //= 3\n                factors.append(3)\n                if n % 3 == 0:\n                    n //= 3\n                    factors.append(int(n % 3))\n                    if n % 6 == 0:\n                        n //= 3\n                        factors.append(int(n % 6))\n                else:\n                    if n % 5 == 0:\n                        n //= 5\n                        factors.append(int(n % 5))\n                    elif n % 7 == 0:\n                        n //= 7\n                        factors.append(int(n % 7))\n        factors.sort()\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not n:\n        return []\n    factors = []\n    divisor = 2\n    while n % divisor!= 0:\n        factors.append(divisor)\n        n //= divisor\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = []\n    while n > 1:\n        p = n\n        for _ in range(n - 1):\n            if n % p == 0:\n                prime_factors.append(p)\n                n //= p\n                break\n            p += 1\n    prime_factors.append(n)\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    n = abs(n)\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n        else:\n            factors.append(3)\n            n = n - 1\n        n = n >> 1\n    if n == 1:\n        factors.append(1)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 1:\n        return []\n\n    factors = []\n    k = 2\n    while k * k <= n:\n        if n % k == 0:\n            factors.append(k)\n            n //= k\n        else:\n            k += 1\n\n    if n > 1:\n        factors.append(n)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # TODO: Test this function\n    factorizations = []\n    factor = 2\n    while True:\n        if n % factor == 0:\n            factorizations.append(factor)\n            n = n // factor\n            factor = 2\n        else:\n            factor += 1\n    return factorizations", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    factors = []\n    prime_factors = factorize(n - 1)\n    for factor in prime_factors:\n        if n % factor == 0:\n            factors.append(factor)\n            factors.extend(prime_factors)\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # 'prime' list contains prime numbers less than N\n    prime: List[int] = []\n    for i in range(2, n):\n        if n % i == 0:\n            prime.append(i)\n            n //= i\n\n    # 'factors' contains factorization of N\n    factors: List[int] = []\n    for i in prime:\n        if i!= prime[0]:\n            factors.append(prime[0])\n            prime.pop(0)\n        factors.append(i)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 1:\n        return []\n    if n < 0:\n        raise ValueError(f\"factorize(n) - n should be >= 0: {n}.\")\n\n    if n == 1:\n        return [1]\n\n    factors = []\n    factor = 2\n    while factor <= n:\n        while n % factor == 0:\n            factors.append(factor)\n            n /= factor\n\n        factor += 1\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n\n    primes = []\n    for factor in range(2, n // 2 + 1):\n        if n % factor == 0:\n            num = factor\n            while n % num == 0:\n                n //= num\n                primes.append(num)\n\n    return primes", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n <= 1:\n        return []\n\n    factors = [n]\n\n    if n > 1:\n        factors += factorize(n // 2)\n\n    while True:\n        for factor in factors:\n            if n % factor == 0:\n                n //= factor\n                factors.append(factor)\n                break\n        else:\n            break\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    count = 1\n    current_factor = 2\n    while current_factor * current_factor <= n:\n        if n % current_factor == 0:\n            factors.append(current_factor)\n            n //= current_factor\n            count += 1\n            if n == 1:\n                break\n        current_factor += 1\n\n    if n > 1:\n        factors.append(n)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Add 1 to n, since if n is even, it is not the product of prime factors\n    factors = []\n    while n % 2 == 0:\n        n = n // 2\n        factors.append(2)\n    if n == 1:\n        return factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            n = n // i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not n:\n        return []\n    factors = []\n    while True:\n        factors.append(n)\n        n //= 2\n        if not n:\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    prime_list = [x for x in range(2, n // 2 + 1) if x > n // 2]\n    if n % 2 == 0:\n        factors.append(2)\n        n //= 2\n        while n > 1:\n            prime = prime_list.pop(0)\n            while n % prime == 0:\n                n //= prime\n                factors.append(prime)\n            if n == 1:\n                break\n\n    # print(n, factors)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    res = []\n    for i in range(2, n):\n        if n % i == 0:\n            res.append(i)\n            res.extend(factorize(n // i))\n    return res", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    if n % 2 == 0:\n        return [n / 2]\n\n    factors = [1]\n\n    if n < 3:\n        return factors\n\n    # Base Case\n    for i in range(3, n + 1, 2):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    i = 2\n\n    while i < n:\n        if n % i == 0:\n            result.append(i)\n            n //= i\n            i = 2\n        else:\n            i += 1\n\n    if n > 1:\n        result.append(n)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n            continue\n        factors.append(i)\n        n //= i\n        i += 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    result = []\n    factor = n\n    while factor:\n        result.append(factor)\n        factor //= factor\n\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    n = abs(n)\n    factors = []\n    if n == 1:\n        return factors\n    elif n % 2 == 0:\n        factors.append(2)\n    else:\n        factors.append(3)\n        while n % 6!= 0:\n            n /= 6\n            factors.append(2)\n    while n!= 1:\n        factors.append(n)\n        n /= n - 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 2:\n        return []\n    factors = []\n    while n!= 1:\n        factors.append(n % 10)\n        n //= 10\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    prime_factors = list(factor(n))  # type: List[int]\n\n    for factor in prime_factors:\n        if factor not in factors:\n            factors.append(factor)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if not n:\n        return []\n    factors = []\n    while n:\n        f = n\n        n //= f\n        factors.append(f)\n\n    if len(factors) > 1:\n        return sorted(factors)\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    if n < 2:\n        return [n]\n    if n < 4:\n        return []\n    l = []\n    if n % 2 == 0:\n        l.append(2)\n        n //= 2\n    if n % 3 == 0:\n        l.append(3)\n        n //= 3\n    if n > 1:\n        l += factorize(n // 2)\n    return l", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        raise ValueError('number should be greater than 1')\n\n    # recursion\n    if n == 1:\n        return [1]\n\n    # base case\n    if n == 2:\n        return [2]\n\n    # number of factors\n    m = len(factorize(n // 2)) + 1\n\n    # recursion\n    for i in range(m):\n        factor = n // factorize(n // 2)[i]\n        if factorize(factor):\n            factorize(factor)\n        else:\n            factorize(n - factor * factorize(n // 2)[i])\n\n    return factorize(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # print(n)\n    factors = []\n    i = 2\n    while True:\n        if n % i == 0:\n            factors.append(i)\n            n /= i\n        else:\n            factors.append(i)\n            break\n        i += 1\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    assert n >= 0, 'Number should be positive, but was {}'.format(n)\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if not n % i:\n            factors.append(i)\n            n //= i\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n == 1:\n        return [1]\n\n    factors = []\n\n    while n > 1:\n        num = 2\n        while n % num == 0:\n            factors.append(num)\n            n //= num\n        num += 1\n\n    if n == 1:\n        factors.append(1)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # first find all prime factors of the number\n    prime_factors = []\n    while n!= 1:\n        prime = n % 2\n        if prime!= 0:\n            prime_factors.append(prime)\n            n = n // 2\n        else:\n            return prime_factors\n\n    # if number is not a power of 2, add 1 to it\n    if n!= 1:\n        prime_factors.append(1)\n\n    # since number is a product of all it's prime factors, so reverse the list\n    # and multiply each number in the list by it's position index\n    return prime_factors[::-1] * [i] for i in range(len(prime_factors))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # https://en.wikipedia.org/wiki/Factorization_(mathematics)\n    f = []\n    if n == 1:\n        return []\n    if n == 0:\n        return []\n    if n < 1:\n        return []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            f.append(i)\n            n //= i\n    return f", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    n = abs(n)  # abs because negative numbers cant be divided\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            while n % 2 == 0:\n                n /= 2\n            factors.append(n)\n            n /= n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n\n    factors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n /= i\n            continue\n        break\n\n    for i in range(len(factors)):\n        factors[i] *= n // factors[i]\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # Ignore numbers less than 2\n    if n < 2:\n        return []\n    # Try to divide the number by all primes smaller than it and\n    # use those factors to build a list of all potential factors of the number.\n    potential_factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            potential_factors.append(i)\n\n    return sorted(potential_factors)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n        i += 1\n    if n > 1:\n        factors.append(n)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [1]\n    factors = []\n    factors_of_factor = factorize(n // 2)\n    while len(factors_of_factor) > 1:\n        factors.append(factors_of_factor.pop())\n        factors_of_factor.append(factors_of_factor.pop())\n    return factors + factors_of_factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    if n < 1:\n        return []\n    res = []\n    while True:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                res.append(i)\n                n //= i\n                break\n        else:\n            res.append(n)\n            break\n    return res", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    if n == 1:\n        return factors\n    factors.append(1)\n    factors.append(2)\n    for i in range(3, n // 2 + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n            n = n // i\n            if n == 1:\n                return factors\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [2] * n\n    while True:\n        factor = factors[0]\n        factors[0] = factors[0] * factors[1]\n        factors = factors[1:]\n        if factors:\n            factors.insert(0, factor)\n        else:\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n == 1:\n        return [1]\n    else:\n        return [n] + [factorize(n // i) for i in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not n:\n        return []\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n!= 1:\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = abs(n)  # coprime to 0\n    factors = []\n    factors.append(2)\n    while True:\n        for i in range(3, n//2 + 1):\n            if n % i == 0:\n                factors.append(i)\n                break\n        else:\n            return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    if n == 1:\n        return factors\n    if n < 2:\n        return []\n    factors.append(2)\n    if n % 2 == 0:\n        return factors\n    num = 2\n    while n!= 1:\n        num += 1\n        if n % num == 0:\n            factors.append(num)\n        n /= num\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n\n    # Divide and conquer approach\n    if n < 2:\n        return result\n\n    n = n - 1\n    q = n\n    while q > 1:\n        if q % 2:\n            result.append(q)\n            q /= 2\n        else:\n            q /= 3\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # check if number is prime\n    if not n % 2:\n        factors = [2]\n    # else:\n    #     factors = [1]\n    # do the magic\n    while n!= 1:\n        factors.insert(0, n % 10)\n        n //= 10\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # check if n is prime\n    if n < 2:\n        return []\n    # for starters, just return itself, if it's a prime\n    if n > 1:\n        return [n, ]\n    # we don't want to check the same number twice\n    n = n - 1\n    # list of all factors\n    factors = []\n    # while the number is bigger than 1\n    while n > 1:\n        # check if n is a factor of n\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                # if so, push it to the list and divide the number by i\n                factors.append(i)\n                n //= i\n            i += 1\n        # for each factor, multiply it by the number of times it appears in the factorization\n        for i in factors:\n            factors[i] *= i\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"Input number should be at least 2.\")\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    if n < 2:\n        raise ValueError(\"Input number should be at least 2.\")\n    if n == 2:\n        return factors\n    factors.append(n)\n    while n % 3 == 0:\n        n //= 3\n        factors.append(3)\n    if n == 3:\n        return factors\n    factors.append(n)\n    while n % 5 == 0:\n        n //= 5\n        factors.append(5)\n    if n == 5:\n        return factors\n    factors.append(n)\n    while n % 7 == 0:\n        n //= 7\n        factors.append(7)\n    if n == 7:\n        return factors\n    factors.append(n)\n    while n % 11 == 0:\n        n //= 11\n        factors.append(11)\n    if n == 11:\n        return factors\n    factors.append(n)\n    while n % 13 == 0:\n        n //= 13\n        factors.append(13)\n    if n == 13:\n        return factors\n    factors.append(n)\n    while n % 17 == 0:\n        n //= 17\n        factors.append(17)\n    if n ==", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        elif i * i > n:\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [1]\n    for i in range(2, n - 1):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    factors = []\n    for i in range(2, n // 2):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return factorize_prime(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n\n    while True:\n        if n < 2:\n            break\n\n        prime = 2\n        while prime < n:\n            if n % prime == 0:\n                factors.append(prime)\n                n //= prime\n            else:\n                prime += 1\n        else:\n            factors.append(n)\n            break\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = abs(n)\n    if n < 2:\n        return []\n\n    prime = []\n    for p in [2, 3, 5, 7, 11, 13, 17, 19]:\n        if n % p == 0:\n            prime.append(p)\n            n //= p\n            prime.extend(factorize(n))\n\n    return prime", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    primes = [2, 3]\n    factors = set()\n    n = abs(n)  # make sure the input is positive\n    while n > 1:\n        m = n // primes[-1]\n        if m > 1:\n            factors.add(primes[-1])\n        n = m\n    return sorted(factors)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 0:\n        return []\n    factors = []\n    primes = factorize(n // 2)\n    for p in primes:\n        if n % p == 0:\n            factors.append(p)\n            n //= p\n    if n!= 1:\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    assert n > 0\n    if n == 1:\n        return [1]\n    factors = [1]\n    while True:\n        factors.append(2 * factors[-1])\n        if n % factors[-1] == 0:\n            n //= factors[-1]\n            if n == 1:\n                break\n        else:\n            factors[-1] += 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    factors = []\n    div = 2\n    while n > 1:\n        if n % div == 0:\n            factors.append(div)\n            n //= div\n        else:\n            div += 1\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    if not n % 2:\n        factors.append(2)\n        n //= 2\n    while n!= 1:\n        if n % 2:\n            factors.append(2)\n            n //= 2\n        else:\n            while n % 6 == 0:\n                factors.append(3)\n                n //= 6\n            while n % 5 == 0:\n                factors.append(5)\n                n //= 5\n            while n % 7 == 0:\n                factors.append(7)\n                n //= 7\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = []\n    for _ in range(n // 2):\n        if n % 2 == 0:\n            prime_factors.append(2)\n            n //= 2\n        else:\n            prime_factors.append(n)\n            n //= n - 1\n    if n!= 1:\n        prime_factors.append(n)\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    elif n == 2:\n        return [2]\n    factors = []\n    for i in range(3, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    factor = 2\n    while n % factor!= 0:\n        factors.append(factor)\n        n /= factor\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = abs(n)\n    primes = []\n    result = []\n    if n < 4:\n        return result\n    i = 0\n    while n!= 1:\n        n /= i\n        result.append(i)\n        i += 1\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # if n is even then n/2 is the greatest possible factor of n so lets divide by 2\n    if n & 1:\n        return factorize(n // 2)\n    # if n is odd then n/3 is the greatest possible factor of n so lets divide by 3\n    else:\n        return factorize(n // 3)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n == 1:\n        return []\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    factors = []\n\n    while n > 1:\n        for prime in primes:\n            if n % prime == 0:\n                factors.append(prime)\n                n //= prime\n\n        if n == 1:\n            break\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # TODO: check if number is factorized correctly\n    factors = []\n    n = int(n) ** 0.5\n\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n\n    if n!= 1:\n        factors.append(n)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    elif n == 2:\n        return [2]\n\n    factors = [2]\n    for i in range(3, n - 1, 2):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    n = n - 1\n    while n % 2 == 0:\n        n //= 2\n        factors.append(2)\n    while n % 3 == 0:\n        n //= 3\n        factors.append(3)\n    if n == 1:\n        return factors\n    factors.append(n)\n    factors.reverse()\n    for factor in factors:\n        if n % factor == 0:\n            while n % factor == 0:\n                n //= factor\n                factors.append(factor)\n            factors.pop()\n            factors.reverse()\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 0:\n        return []\n    prime_factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factorization = []\n    p = 2\n    while n > 1:\n        if n % p == 0:\n            n //= p\n            prime_factorization.append(p)\n        else:\n            p += 1\n    prime_factorization.append(n)\n    return prime_factorization", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    factors = []\n    divisor = 2\n    while n > 1:\n        while divisor * divisor <= n:\n            n //= divisor\n            if n < 1:\n                factors.append(divisor)\n                break\n            divisor += 1\n        else:\n            factors.append(n)\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            prime_factors.append(2)\n        else:\n            prime = 3\n            while n % prime == 0:\n                n //= prime\n                prime_factors.append(prime)\n                prime += 1\n            if n!= 1:\n                prime_factors.append(n)\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # Find first multiple of 2 that is greater than n\n    if n & 1:\n        return [2] * n // 2\n    # Finding factors\n    factors = []\n    d = n\n    while d % 2 == 0:\n        factors.append(2)\n        d //= 2\n    d = n\n    while d % 3 == 0:\n        factors.append(3)\n        d //= 3\n    d = n\n    while d % 5 == 0:\n        factors.append(5)\n        d //= 5\n    d = n\n    while d % 7 == 0:\n        factors.append(7)\n        d //= 7\n    if d >= 9:\n        while d % 11 == 0:\n            factors.append(11)\n            d //= 11\n        while d % 13 == 0:\n            factors.append(13)\n            d //= 13\n        while d % 17 == 0:\n            factors.append(17)\n            d //= 17\n        while d % 19 == 0:\n            factors.append(19)\n            d //= 19\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = [1]\n    number = n\n    while number > 1:\n        for p in primes:\n            if number % p == 0:\n                primes.append(p)\n                number //= p\n        else:\n            primes.append(number)\n            number = 1\n    return [int(p) for p in primes]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    if n % 2 == 0:\n        factors.append(2)\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n\n    if n > 1:\n        factors.append(n)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 2:\n        return []\n\n    if n == 2:\n        return [2]\n\n    primes = [2]\n    for i in range(2, int(n **.5) + 1):\n        if n % i == 0:\n            if i in primes:\n                primes[primes.index(i)] += 1\n            else:\n                primes.append(i)\n\n    return primes", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 1:\n        return []\n\n    if n == 1:\n        return [1]\n\n    factors = []\n\n    while n!= 1:\n        n = n // 2\n        factors.append(n)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n == 0:\n        return [0]\n\n    factors = []\n\n    if n == 1:\n        return [1]\n\n    if n == 2:\n        return [2]\n\n    # Starting from smallest prime number\n    for p in range(2, n + 1):\n        if n % p == 0:\n            n //= p\n            factors.append(p)\n\n    # Considering all the remaining numbers as factors\n    while n!= 1:\n        n = n // 2\n        factors.append(n)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    if n == 1:\n        return []\n    while n % 2 == 0:\n        n //= 2\n        factors.append(2)\n    for i in range(3, n + 1, 2):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n!= 1:\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    n = n - 1\n    i = 2\n    while i <= n:\n        while i * i <= n:\n            factors.append(i)\n            n = n - (i * i)\n            i += 1\n        i += 1\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 0:\n        raise ValueError('Input number should be positive')\n\n    factors = []\n    factor = 2\n    while n > 1:\n        while factor * factor <= n:\n            if n % factor == 0:\n                factors.append(factor)\n                n //= factor\n            else:\n                factor = factor * 2\n        factor = factor * 2\n\n    if n!= 1:\n        factors.append(n)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n == 1:\n        return []\n    if n <= 1:\n        return [1]\n\n    lst = []\n    while n!= 1:\n        d = n\n        n = n // d\n        lst.append(d)\n\n    return lst", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n - 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    factors = []\n    if n % 2 == 0:\n        n //= 2\n        factors.append(2)\n    for i in range(3, int(n **.5) + 1, 2):\n        if n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = []\n    m = n  # m = number to factorize\n    while m > 1:\n        if m % 2 == 0:\n            m /= 2\n        else:\n            primes.append(2)\n            m -= 1\n    while m > 1:\n        if m % primes[-1] == 0:\n            primes[-1] *= m / primes[-1]\n            m -= 1\n        else:\n            primes.append(m)\n            m -= 1\n    return primes", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    current = n\n    while True:\n        if current % 2 == 0:\n            result.append(2)\n            current //= 2\n        elif current % 3 == 0:\n            result.append(3)\n            current //= 3\n        elif current % 5 == 0:\n            result.append(5)\n            current //= 5\n        elif current % 7 == 0:\n            result.append(7)\n            current //= 7\n        else:\n            break\n\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = [1]\n    while n > 1:\n        n, x = n // 2, result.pop()\n        if n == 1:\n            break\n        result.append(x)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n == 1:\n        return []\n\n    if n % 2 == 0:\n        return factorize(n // 2)\n\n    return [2] + factorize(n // 2)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    prime_factors = [2, 3]\n    # for each number starting from the biggest one\n    for factor in prime_factors:\n        # we can stop the loop when we reach the given number\n        if n % factor == 0:\n            n //= factor\n            result.append(factor)\n            # when we reach the given number we can start from the smallest one\n            prime_factors.remove(factor)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n            factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    elif n == 2:\n        return [1]\n    elif n == 3:\n        return [2]\n    factors = []\n    q = 2\n    while q * q <= n:\n        while n % q == 0:\n            n //= q\n            factors.append(q)\n        q += 1\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = abs(n)\n    factors = []\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # TODO: Write your implementation here\n\n    # quick check, first if n is not a product of primes return empty list\n    if n not in factored_list:\n        return []\n\n    # n = product of factors\n    prime_factor_list = []\n\n    for prime in factored_list:\n        if n % prime == 0:\n            # product is not prime, factor\n            n //= prime\n            prime_factor_list.append(prime)\n            prime_factor_list.append(n)\n            break\n        if n % prime == 1:\n            # product is prime, store it in result\n            prime_factor_list.append(prime)\n    return prime_factor_list\n\n\nfactored_list = [2, 3, 5, 7]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    f_list: List[int] = []\n    while n > 1:\n        if n % 2 == 0:\n            f_list.append(2)\n            n //= 2\n        else:\n            f_list.append(n)\n            n //= n - 1\n    if n > 1:\n        f_list.append(n)\n    return f_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [n]\n    while True:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                break\n        else:\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    while n > 1:\n        for i in range(2, n // 2 + 1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n\n    result = []\n\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            for _ in range(n // i):\n                result.append(i)\n                n //= i\n        i += 1\n\n    result.append(n)\n\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    else:\n        factors = []\n        if n % 2 == 0:\n            factors.append(2)\n            n //= 2\n        while n > 1:\n            factors.append(n)\n            n = n // 2\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factor_list = []\n    product = 1\n    for i in range(2, n):\n        if n % i == 0:\n            factor_list.append(i)\n            n /= i\n            product *= i\n    if n == 1:\n        factor_list.append(1)\n\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = []\n    factors = 2\n    while factors <= n:\n        if factors == n:\n            prime_factors.append(factors)\n            break\n        if factors % 2 == 0:\n            factors += 1\n            continue\n        if factors > n:\n            break\n        if n % factors == 0:\n            n /= factors\n            factors += 1\n        else:\n            prime_factors.append(factors)\n            factors += 1\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    res = []\n    while n > 1:\n        n /= 2\n        res.append(n)\n    return res", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input number should be greater than zero\")\n    factors = []\n    while n > 1:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                factors.append(i)\n                n = n / i\n                break\n        else:\n            if n!= 1:\n                factors.append(n)\n                break\n    if n!= 1:\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        primes = [2]\n        for i in range(3, n + 1):\n            if n % i == 0:\n                primes.append(i)\n                n //= i\n                continue\n        return primes", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors: List[int] = []\n    while n > 1:\n        factors.insert(0, n)\n        n //= n - 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    p = 2\n    while p * p <= n:\n        if n % p == 0:\n            factors.append(p)\n            n //= p\n        else:\n            p += 1\n    if n!= 1:\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 1\n    n = abs(n)\n    while True:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            break\n        i += 1\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # Try to find prime factors of number\n    factors = []\n    while n:\n        n, factor = divmod(n, 2)\n        if factor == 1:\n            # This number is prime\n            factors.append(factor)\n        elif n == 1:\n            break  # All the factors are found\n    # Don't forget to return the list in the right order\n    return factors[::-1]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = []\n\n    if n == 1:\n        return prime_factors\n\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            n //= i\n            prime_factors.append(i)\n        else:\n            i += 1\n\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    d = n\n    while d % 2 == 0:\n        d //= 2\n        factors.append(2)\n    for i in range(3, int(math.sqrt(d)) + 1, 2):\n        if d % i == 0:\n            d //= i\n            factors.append(i)\n    if d!= 1:\n        factors.append(d)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    assert n > 1\n    if n <= 1:\n        return []\n\n    factors = [1]\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Find all prime factors of n\n    factors = []\n    for f in range(2, n + 1):\n        if n % f == 0:\n            factors.append(f)\n            n //= f\n    factors.append(n)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = [1]\n    while n > 1:\n        for i in range(2, n // 2 + 1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                break\n        if n == 1:\n            break\n    return factors"]]