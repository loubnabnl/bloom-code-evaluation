[["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# You should implement this function\n    return 0", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" result = []\n    cur_end = 0  # this points to last char in current note\n    cur_beat = 0  # this is how many beats does current note lasts\n    for i in music_string:\n        if i == '|':\n            cur_beat += 1\n            if cur_beat == 1:\n                cur_end += 1\n            cur_beat = 1\n        elif i == '.':\n            if cur_beat!= 1:\n                cur_beat += 1\n            else:\n                result.append(cur_end - cur_start + 1)\n                cur_start = cur_end\n                cur_end = i\n                cur_beat = 1\n        else:\n            cur_beat = 1\n            cur_end += 1\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_list = music_string.split()\n    beat_list = []\n\n    for note in music_list:\n        if note == 'o':\n            beat_list.append(4)\n        elif note == 'o|':\n            beat_list.append(2)\n        elif note == '.|':\n            beat_list.append(1)\n\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for c in music_string:\n        if c == '|':\n            result.append(1)\n        elif c == 'o':\n            result.append(4)\n        else:\n            result.append(2)\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" beats = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            beats.append(4)\n        elif music_string[i] == 'o|':\n            beats.append(2)\n        elif music_string[i] == '.|':\n            beats.append(1)\n        else:\n            raise ValueError(f'Invalid input: {music_string[i]}.')\n\n    return beats\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"def is_note(note: str) -> bool:\n        \"\"\" Returns True if the given string is a valid note ('o', 'o', 'o|', '.' or '|') otherwise returns False.\n        \"\"\"\n        return note in ['o', 'o', 'o|', '.', '|']\n\n    def is_bar_line(line: str) -> bool:\n        \"\"\" Returns True if the given string is a bar line ('|' or 'o'), otherwise returns False.\n        \"\"\"\n        return line in ['|', 'o']\n\n    def note_duration(note: str) -> int:\n        \"\"\" Returns duration of a note in beats. Note can be either 'o', 'o|', '.|' or '|'.\n        \"\"\"\n        return 4 if note == 'o' else 2 if note == 'o|' else 1 if note == '.|' else 0\n\n    def beat_duration(line: str) -> int:\n        \"\"\" Returns duration of a beat in beats. Line can be either 'o', 'o|', '.|' or '|'.\n        \"\"\"\n        return 4 if line == 'o' else 2 if line == 'o|' else 1 if line", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n\n    for note in music_string.split('|'):\n        beats.append(note[0].count('o'))\n        beats.append(note[1].count('.'))\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for symbol in music_string:\n        if symbol == \"o\":\n            beats.append(4)\n        elif symbol == \"o|\":\n            beats.append(2)\n        elif symbol == \".|\":\n            beats.append(1)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"whole_division = 'o'\n    half_division = 'o|'\n    quater_division = '.|'\n\n    return [sum([count / 4 for count in occurrences]) for occurrences in [counted_divisions(note, whole_division),\n             counted_divisions(note, half_division),\n             counted_divisions(note, quater_division)] if note]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o' or music_string[i] == 'o|':\n            notes.append(4)\n            i += 1\n        elif music_string[i] == '.|':\n            notes.append(1)\n            i += 1\n        else:\n            notes.append(0)\n            i += 1\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return [int(note[0]) if note[0].isalpha() else note[0] for note in music_string.split()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for m in music_string:\n        if m == 'o':\n            result.append(4)\n        elif m == 'o|':\n            result.append(2)\n        elif m == '.|':\n            result.append(1)\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" input_string = str(music_string)  # type: str\n    notes = []  # type: List[int]\n\n    if len(input_string) == 0:\n        return []\n\n    # Counting how many notes are in the string\n    count = 0\n    while input_string[count]!= 'o':\n        count += 1\n    count += 1\n    notes.append(count)\n\n    # The previous loop counted how many notes are in the string\n    # The next loop will store them in the list of integers\n    for i in range(count):\n        if input_string[i] == 'o':\n            notes.append(4)\n        elif input_string[i] == 'o|':\n            notes.append(2)\n        elif input_string[i] == '.|':\n            notes.append(1)\n\n    return notes\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"output = []\n\n    for part in music_string.split('|'):\n        part = part.split(' ')\n        beats = []\n\n        for i in part:\n            if i == 'o':\n                beats.append(4)\n            elif i == 'o|':\n                beats.append(2)\n            elif i == '.|':\n                beats.append(1)\n\n        output.extend(beats)\n\n    return output", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" def validate_note(note: str) -> int:\n        \"\"\" A note can be 'o', 'o|' or '.|'. Return length of the note in beats.\n        \"\"\"\n\n        if note == 'o' or note == 'o|':\n            return 4\n        elif note == '.':\n            return 1\n\n        return -1\n\n    def process_note(note: str, current_time: int) -> int:\n        \"\"\" If the current time is already at the same position as the note, return the current time.\n        If not, increment the time by the length of the note and return the new time.\n        \"\"\"\n\n        if current_time == note.count('|'):\n            return current_time\n        else:\n            return current_time + validate_note(note)\n\n    current_time = 0\n    result = []\n    for note in music_string:\n        result.append(process_note(note, current_time))\n        current_time += validate_note(note)\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" result = []\n\n    for line in music_string.split('\\n'):\n        result += [line.count('o')] + [line.count('o|')] + [line.count('.|')]\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [beat_map[char] for char in music_string]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    if music_string is None:\n        return result\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            result.append(4)\n            i += 1\n        elif music_string[i] == '|':\n            result.append(2)\n            i += 1\n        elif music_string[i] == '.':\n            result.append(1)\n            i += 1\n        elif music_string[i] == 'o':\n            result.append(2)\n            i += 1\n        elif music_string[i] == '|':\n            result.append(1)\n            i += 1\n        elif music_string[i] == '.':\n            result.append(1)\n            i += 1\n        else:\n            i += 1\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # You can choose to use strip() or replace() for the below lines.\n    music_string = music_string.replace('o|', 'o')\n    music_string = music_string.replace('.|', 'o')\n\n    # Split the string into single notes and whole bars.\n    single_notes = music_string.split('o')\n    whole_bars = single_notes[0].split('|')\n    single_notes = [s.strip() for s in single_notes[1:]]\n\n    # Convert whole bars to array of integers.\n    whole_bars = [int(bar) for bar in whole_bars]\n\n    # Convert single notes to array of integers.\n    return [int(s) for s in single_notes] + whole_bars</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" time = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    }\n\n    ret = []\n\n    for i in music_string:\n        if i == \"|\":\n            if len(ret) > 0:\n                ret.append(sum(time.get(t, 0) for t in ret[-1]))\n            ret.append(time[i + \"|\"])\n        else:\n            ret.append(time[i])\n\n    return ret", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(note) for note in music_string.split() if note]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# first we split the string into individual notes\n    # note that note can be either 'o', 'o|' or '.|'\n    notes = music_string.replace('o|', 'o').replace('.|', 'o').split()\n\n    # next we calculate how many beats each note last\n    beat_count = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    result = [beat_count[i - 1] for i in range(len(notes))]\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n    result = []\n    for note in notes:\n        notes = note.split('|')\n        if notes[0] == \"o\":\n            result.append(4)\n        elif notes[0] == \"o|\":\n            result.append(2)\n        elif notes[0] == \"|\":\n            result.append(1)\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    # input:\n    #   o o|.| o| o|.|.|.|.| o o\n    # output:\n    #   [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    # step:\n    #   split input string on '|' symbol\n    #   for each part calculate how many beats it lasts and add it to result\n    music_string = music_string.replace('|', '. ')\n    parts = music_string.split('|')\n\n    for part in parts:\n        duration = len(part)\n        result.append(duration)\n        # input:\n        #   o o|.| o| o|.|.|.|.| o o\n        # output:\n        #   [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes: List[int] = []\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        elif note == '.|':\n            notes.append(1)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split()\n    return [note[0].count('o') + note[1].count('o') for note in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# TODO: implement your code here\n    return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" assert isinstance(music_string, str), \"Expected string, got {} instead\".format(type(music_string))\n\n    music_string = music_string.replace('|', '')  # remove bars\n\n    def count_beats(string: str) -> int:\n        for s in string:\n            if s == 'o':\n                return 4\n            elif s == '|':\n                return 2\n        return 0\n\n    return [count_beats(s) for s in music_string]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for s in music_string:\n        if s == \"o\":\n            result.append(4)\n        elif s == \"o|\":\n            result.append(2)\n        elif s == \".|\":\n            result.append(1)\n        else:\n            raise ValueError(\"Unrecognized symbol\")\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"input_music = list(music_string)\n\n    result = []\n    if not input_music:\n        return result\n    beat = 0\n    for _ in input_music:\n        if _ == 'o':\n            beat += 4\n        elif _ == '|':\n            beat += 2\n        elif _ == '.':\n            beat += 1\n        result.append(beat)\n        beat = 0\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"def longest_len(string: str) -> int:\n        \"\"\" Returns longest string in the given list of strings.\n        >>> longest_len(['o', 'o|'])\n        2\n        \"\"\"\n        longest_len = len(string[0])\n        for i in range(1, len(string)):\n            if len(string[i]) > longest_len:\n                longest_len = len(string[i])\n        return longest_len\n\n    def sub(string: str, len: int) -> str:\n        \"\"\" Returns a substring of given string with the length of len\n        >>> sub('o o|.| o| o|.|.|.|.| o o', 2)\n        'o| '\n        \"\"\"\n        return ''.join(string[i:i + len] for i in range(len(string) - len + 1))\n\n    def half(string: str) -> str:\n        \"\"\" Changes a given string to a string of half notes.\n        >>> half('o o|.| o| o|.|.|.|.| o o')\n        'o|o|.|o|o|.|.|.|.| o|o|'\n        \"\"\"\n        return ''.join(sub(string, 2) for i in", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" assert isinstance(music_string, str), \"Please input a string!\"\n\n    music_string = music_string.replace('|', '.')  # replace vertical lines with full dots to simplify input\n\n    notes = list()\n    for i, char in enumerate(music_string):\n        if char == 'o':\n            notes.append(4)\n        elif char == 'o|':\n            notes.append(2)\n        elif char == '.|':\n            notes.append(1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = list(map(int, music_string.split()))\n    return [len(notes_i) for notes_i in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" notes = []\n    for ch in music_string:\n        if ch == 'o':\n            notes.append(4)\n        elif ch == 'o|':\n            notes.append(2)\n        elif ch == '.|':\n            notes.append(1)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for char in music_string:\n        if char == \"o\" or char == \"o|\":\n            beats.append(4)\n        elif char == \".\":\n            beats.append(1)\n        elif char == \"|\":\n            beats.append(2)\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n\n    for note in music_string:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # all notes are separated by one or more spaces\n    notes = music_string.split()\n\n    # there can be as many notes as you like\n    return [len(note.split('|')) for note in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [int(c) for c in music_string]\n    note_duration = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1}\n    return [note_duration[c] for c in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" notes = []\n    for i, char in enumerate(music_string):\n        if char == 'o':\n            notes.append(4)\n        elif char == 'o|':\n            notes.append(2)\n        elif char == '.|':\n            notes.append(1)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"data = list(music_string)\n    notes = []\n    notes_times = []\n    for note in data:\n        if note == 'o':\n            notes.append(4)\n            notes_times.append(4)\n        elif note == '|':\n            notes.append(2)\n            notes_times.append(2)\n        elif note == '.':\n            notes.append(1)\n            notes_times.append(1)\n    return notes, notes_times", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"d = []\n    for n in music_string.split(\"|\"):\n        b = n[0]\n        n = n[1:]\n        if b == \"o\":\n            d.append(4)\n        elif b == \"o|\":\n            d.append(2)\n        elif b == \".|\":\n            d.append(1)\n    return d", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for ch in music_string:\n        if ch == 'o':\n            notes.append(4)\n        elif ch == 'o|':\n            notes.append(2)\n        elif ch == '.|':\n            notes.append(1)\n        else:\n            print('Unsupported char', ch)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [len(s) for s in re.split('([|o.])', music_string)]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    last_note = 0\n\n    for i, character in enumerate(music_string):\n        if character == 'o':\n            notes.append(4)\n            last_note += 4\n        elif character == 'o|':\n            notes.append(2)\n            last_note += 2\n        elif character == '.|':\n            notes.append(1)\n            last_note += 1\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    if music_string is not None:\n        for i, c in enumerate(music_string):\n            if c == 'o':\n                notes.append(4)\n                i += 1\n            elif c == 'o|':\n                notes.append(2)\n                i += 1\n            elif c == '.|':\n                notes.append(1)\n                i += 1\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    # We will use list of tuples for note, index as a data structure.\n    # This is a tuple (note, index) which represents note at given index in the music string.\n    note_idx = []\n\n    for i, c in enumerate(music_string):\n        # We only take into account notes: o, o| and.|.\n        # o - whole note, lasts four beats\n        # o| - half note, lasts two beats\n        #.| - quater note, lasts one beat\n        if c in ('o', 'o|', '.|'):\n            # We remove the note from the list of notes so it won't be counted twice.\n            note_idx.pop(note_idx.index(c, 0) if c in note_idx else None)\n            # We add the note to the list of notes to be processed.\n            notes.append((c, i))\n        elif c in ('|', 'o'):\n            if len(note_idx) == 0:\n                # We only take note if we are at the beginning of the music string.\n                pass\n            elif note_idx[0] == 'o':\n                # Whole note, length of whole note is 4 beats.\n                # We take note and", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" notes = [int(note) for note in music_string.split('|') if note]\n    return [len(notes[i:]) for i in range(len(notes))]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for x in music_string:\n        if x == \"o\":\n            notes.append(4)\n        elif x == \"o|\":\n            notes.append(2)\n        elif x == \".|\":\n            notes.append(1)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Example output\n    # [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n    # Parse the notes\n    notes = music_string.replace('.|', '.').replace('|', 'o').split(' ')\n\n    # Let the notes be in list\n    notes = [int(note) for note in notes]\n\n    # Let notes be dictionary with keys corresponding to notes and values corresponding to duration of the notes\n    notes = {note: notes.count(note) for note in notes}\n\n    # Now return the list of durations of each notes\n    return [notes[note] for note in notes]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if not music_string:\n        return []\n\n    notes: List[int] = []\n    for note in music_string:\n        if note == \"|\":\n            notes.append(1)\n        elif note == \"o\":\n            notes.append(4)\n        else:\n            notes.append(2)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == 'o|':\n            result.append(2)\n        elif char == '.|':\n            result.append(1)\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Long story short, we are parsing whole/half/quarter notes with the following rules:\n    # * The first symbol is always a whole note, but we need to count it only once.\n    # * The rest of symbols are separated by dots, but we need to count them all.\n    # * Dots do not have to be after each other, they can be separated by any number of notes.\n    # * Notes can be of any duration (whole, half, quarter, eighth, etc.).\n\n    # To parse the whole note, we are going to use the following regex:\n    #   o (?P<whole>\\d)\n    # Here:\n    #   o - is a literal character (you can think of it as a 'whole note' symbol)\n    #   \\d - is a whole number that is at least one, and at most four\n\n    # To parse the rest of notes, we are going to use the following regex:\n    #   (?P<empty>[.|])(?P<note>\\d)\n    # Here:\n    #   (?P<empty>[.|]) - we need to capture an empty space or a dot (note we will always\n    #                            have an empty space or a dot, but not both)\n    #", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [\n        sum(1 for _ in music_string if 'o' in music_string),\n        sum(1 for _ in music_string if 'o|' in music_string),\n        sum(1 for _ in music_string if '.' in music_string),\n    ]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    note_count = 0\n    for i, c in enumerate(music_string):\n        if c == 'o':\n            notes.append(4)\n            note_count += 1\n        elif c == 'o|':\n            notes.append(2)\n            note_count += 1\n        elif c == '|':\n            notes.append(1)\n            note_count += 1\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for m in music_string.split('|'):\n        if m == '.':\n            result.append(1)\n        elif m == 'o':\n            result.append(4)\n        else:\n            result.append(int(m[:-1]))\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return [len(note) for note in music_string]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if not music_string:\n        return []\n\n    o_s: str = 'o'\n    q_s: str = '.|'\n    h_s: str = 'o|'\n    beats: List[int] = []\n\n    for c in music_string:\n        if c == o_s:\n            beats.append(4)\n        elif c == h_s:\n            beats.append(2)\n        elif c == q_s:\n            beats.append(1)\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"lines = music_string.split(\"\\n\")\n    notes = [line.strip() for line in lines]\n\n    return [int(i) for i in notes if i.strip()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        elif note == '.|':\n            notes.append(1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = ['o', 'o|', '.|']\n    notes_idx = 0\n    note_counts = [0] * (len(notes) - 1)\n\n    while notes_idx < len(music_string):\n        if music_string[notes_idx + 0] == 'o':\n            if music_string[notes_idx + 1] == 'o':\n                note_counts[notes_idx + 1] = 4\n            else:\n                note_counts[notes_idx + 1] = 2\n        elif music_string[notes_idx + 0] == 'o|':\n            note_counts[notes_idx + 1] = 2\n        elif music_string[notes_idx + 0] == '.|':\n            note_counts[notes_idx + 1] = 1\n        else:\n            raise ValueError(f\"Invalid note {music_string[notes_idx + 0]} at {notes_idx}\")\n\n        notes_idx += 1\n\n    return note_counts\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"def parse_note(notes: str) -> int:\n        return sum([note == 'o' or note == '|' for note in notes])\n\n    def parse_beat(notes: str) -> int:\n        return sum([note == '.' for note in notes])\n\n    notes = music_string.split()\n    return [parse_note(note) for note in notes] + [parse_beat(note) for note in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"parse_music_list = []\n\n    # Example: input = '. o|.| o| o|.|.|.|.| o o'\n    # Start parsing from left to right, each character in the string represents one note.\n    for character in music_string:\n        if character == '|':\n            # If we encounter a vertical bar, it means the previous note has finished and we should add 1\n            # to the last value in the list.\n            parse_music_list[-1] += 1\n        elif character == 'o':\n            # If we encounter a 'o', it means the current note lasts four beats. So add 4 to the current\n            # value in the list.\n            parse_music_list[-1] += 4\n        else:\n            # If we encounter anything else, it means the current note lasts one beat. So add 1 to the\n            # current value in the list.\n            parse_music_list[-1] += 1\n\n    return parse_music_list</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"ans = []\n    string = music_string.replace('||', '|.|')\n    for char in string:\n        if char == '|':\n            ans.append(1)\n        elif char == '.':\n            ans.append(1)\n        elif char == 'o':\n            ans.append(4)\n    return ans", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n\n    for i in music_string:\n        if i == '|':\n            if result[-1] == 4:\n                result[-1] = 2\n            else:\n                result.append(2)\n        elif i == 'o':\n            if result[-1] == 2:\n                result[-1] = 4\n            else:\n                result.append(4)\n        else:\n            result.append(1)\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" def parse_octave(note: str) -> int:\n        note = note.split(\"o\")[-1].split(\"|\")[0]\n        return int(note[0])\n\n    def parse_duration(note: str) -> int:\n        note = note.split(\"o\")[-1].split(\"|\")[0]\n        return int(note[1])\n\n    def parse_music(note: str) -> int:\n        octave = parse_octave(note)\n        duration = parse_duration(note)\n        return duration * 4 * (octave + 1)\n\n    return [parse_music(note) for note in music_string.split(\"o\")]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" def parse_note(notes: str) -> int:\n        \"\"\" Returns number of beats for given note. \"\"\"\n        beats = 4\n        if notes[0] == 'o':\n            beats = 4\n        elif notes[0] == 'o|':\n            beats = 2\n        elif notes[0] == '|':\n            beats = 1\n        return beats\n\n    def parse_music(music: str) -> List[int]:\n        \"\"\" Returns list of beat counts for given musical string. \"\"\"\n        result = []\n        for n in music.split('|'):\n            if len(n) > 0:\n                result.append(parse_note(n))\n        return result\n\n    return parse_music(music_string)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return list(map(int, music_string.split()))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for s in music_string:\n        if s == 'o':\n            result.append(4)\n        elif s == 'o|':\n            result.append(2)\n        elif s == '|':\n            result.append(1)\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == 'o|':\n            result.append(2)\n        elif music_string[i] == '.|':\n            result.append(1)\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for char in music_string:\n        if char == 'o':\n            beats.append(4)\n        elif char == 'o|':\n            beats.append(2)\n        elif char == '.|':\n            beats.append(1)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = [int(note) for note in music_string.split('|')]\n    return music", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beat = 0\n    for char in music_string:\n        if char == 'o':\n            notes.append(4)\n        elif char == '|':\n            if beat > 0:\n                notes[-1] -= 1\n            beat += 1\n        elif char == '.':\n            if beat > 0:\n                notes[-1] -= 1\n            beat = 0\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    beats = []\n\n    for n in notes:\n        if n == 'o':\n            beats.append(4)\n        elif n == 'o|':\n            beats.append(2)\n        else:\n            beats.append(1)\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" def parse_music_notes(music_string: str) -> List[int]:\n        beats = []\n        string = music_string.replace('o', 'o|').replace('o|', '.|').replace('.|', 'o')\n\n        for ch in string:\n            if ch == 'o':\n                beats.append(4)\n            elif ch == 'o|':\n                beats.append(2)\n            else:\n                beats.append(1)\n        return beats\n\n    return parse_music_notes(music_string)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for character in music_string:\n        if character == 'o':\n            notes.append(4)\n        elif character == '|':\n            notes.append(2)\n        elif character == '.':\n            notes.append(1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    current_beat = 0\n    for i, note in enumerate(music_string):\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        elif note == '.|':\n            notes.append(1)\n        else:\n            raise ValueError('Invalid note symbol')\n\n        if i!= len(music_string) - 1:\n            if music_string[i + 1] == '|':\n                current_beat += notes[len(notes) - 1]\n                notes = notes[:-1]\n            elif music_string[i + 1] == 'o':\n                current_beat += notes[len(notes) - 1] * 2\n                notes = notes[:-1]\n            elif music_string[i + 1] == '|':\n                current_beat += notes[len(notes) - 1] * 4\n                notes = notes[:-1]\n            else:\n                raise ValueError('Invalid note symbol')\n    return current_beat", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" def try_int(s: str):\n        try:\n            return int(s)\n        except ValueError:\n            return 0\n\n    result = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            result.append(4)\n            continue\n        elif music_string[i] == 'o|':\n            result.append(2)\n            continue\n        elif music_string[i] == '.|':\n            result.append(1)\n            continue\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"res = 0\n    last_beat = 0\n    for i, c in enumerate(music_string):\n        if c == 'o':\n            res += 4\n            last_beat += 4\n        elif c == '|':\n            res += 2\n            last_beat += 2\n        elif c == '.':\n            res += 1\n            last_beat += 1\n    return [res - last_beat]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Here is a description of what the first line means:\n    # o = whole note, 4 beats\n    # o| = half note, 2 beats\n    # |. = quater note, 1 beat\n\n    beats = 0\n    last_beat = 0\n\n    for i, char in enumerate(music_string):\n        # A note lasts 2 beats if it is a half note,\n        # 1 beat if it is a quater note,\n        # or 4 beats if it is a whole note\n        beats = 4 - last_beat\n        if char == 'o':\n            last_beat = last_beat + beats\n            beats = 4\n        elif char == '|':\n            last_beat = last_beat + beats\n            beats = 2\n        elif char == '.':\n            last_beat = last_beat + beats\n            beats = 1\n\n        # If the note is the last one in the music_string\n        if i == len(music_string) - 1:\n            # The last note should be counted only as long as it lasts\n            beats = beats - 1\n\n        return [beats] * last_beat\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"whole_notes = 0\n    half_notes = 0\n    quarter_notes = 0\n    notes = list()\n\n    for char in music_string:\n        if char == \"o\":\n            whole_notes += 1\n        elif char == \"o|\":\n            half_notes += 1\n        elif char == \".|\":\n            quarter_notes += 1\n\n    return [whole_notes, half_notes, quarter_notes, quarter_notes, quarter_notes, quarter_notes, quarter_notes,\n            half_notes, half_notes, half_notes, half_notes, whole_notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"duration = []\n    for char in music_string:\n        if char == 'o':\n            duration.append(4)\n        elif char == 'o|':\n            duration.append(2)\n        elif char == '.|':\n            duration.append(1)\n\n    return duration", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes: List[int] = []\n    current_beat = 0\n    for i in range(0, len(music_string)):\n        current_beat = current_beat + 1\n        if music_string[i] == '|':\n            if current_beat % 2 == 0:\n                notes.append(4)\n            else:\n                notes.append(2)\n        elif music_string[i] == '.':\n            if current_beat % 2 == 0:\n                notes.append(2)\n            else:\n                notes.append(1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" if not music_string:\n        return []\n\n    music_string = music_string.replace('|', '')\n    music_string = music_string.replace('o', 'o')\n\n    while 'o' in music_string:\n        start = music_string.find('o')\n        end = start + 1\n        if music_string[end] == '|':\n            end += 1\n        note = music_string[start:end]\n        duration = note.count('o') + 1\n        music_string = music_string.replace(note, '', 1)\n        result.append(duration)\n\n    result = [int(item) for item in result]\n    return result\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # `last_beat` is not used. It is here just to make a code look neater.\n    last_beat = 0\n\n    result = [last_beat]\n\n    for char in music_string:\n        if char == \"o\":\n            result.append(4)\n        elif char == \"o|\":\n            result.append(2)\n        elif char == \".|\":\n            result.append(1)\n        else:\n            raise ValueError(f\"Incorrect char {char} in music string\")\n\n    # Check if number of beats is valid. If not, just return 0.\n    for i in range(len(result)):\n        if result[i] < 1:\n            result[i] = 0\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    note = ''\n    for i, c in enumerate(music_string):\n        if c == '|':\n            result.append(4)\n            if note:\n                result.append(note)\n            note = ''\n        else:\n            note += c\n\n    if note:\n        result.append(note)\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = [0] * 13\n    for char in music_string:\n        if char == 'o':\n            result[4] += 1\n        elif char == 'o|':\n            result[2] += 1\n        elif char == '.|':\n            result[1] += 1\n        else:\n            raise ValueError(f\"{char} is not a valid symbol\")\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for c in music_string:\n        if c == 'o':\n            result.append(4)\n        elif c == 'o|':\n            result.append(2)\n        elif c == '.|':\n            result.append(1)\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"assert isinstance(music_string, str)\n\n    beat_count = 0\n    beats = []\n\n    # split the string on the \"|\" character\n    list_of_numbers = music_string.split(\"|\")\n\n    # if there is more than one number in the list, then the first is the number of beats in the entire music\n    if len(list_of_numbers) > 1:\n        beat_count = int(list_of_numbers[0])\n\n    # if there is only one number, then it's a note that lasts the number of beats in the entire music\n    elif len(list_of_numbers) == 1:\n        beats.append(beat_count)\n\n    # if there are several numbers, then the first is the number of beats of the first note, the second is\n    # the number of beats of the second note, etc.\n    else:\n        for i in list_of_numbers:\n            beats.append(int(i))\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"res = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    if not music_string:\n        return res\n    while music_string:\n        if music_string.startswith('o|') or music_string.startswith('o'):\n            res[0] += 1\n        if music_string.startswith('.|') or music_string.startswith('.'):\n            res[1] += 1\n        if music_string.startswith('||'):\n            res[2] += 1\n        if music_string.startswith('||'):\n            res[3] += 1\n        if music_string.startswith('||'):\n            res[4] += 1\n        if music_string.startswith('||'):\n            res[5] += 1\n        if music_string.startswith('||'):\n            res[6] += 1\n        if music_string.startswith('||'):\n            res[7] += 1\n        if music_string.startswith('||'):\n            res[8] += 1\n        if music_string.startswith('||'):\n            res[9] += 1\n        if music_string.startswith('o|'):\n            res[10] += 1\n        if music_string.startswith('.|'):", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list: List[int] = []\n\n    for c in music_string:\n        if c == \"o\":\n            beat_list.append(4)\n        elif c == \"o|\":\n            beat_list.append(2)\n        elif c == \"|\":\n            beat_list.append(1)\n\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"current_beats = 0\n    result = []\n    for char in music_string:\n        if char == 'o':\n            current_beats = current_beats + 4\n        elif char == 'o|':\n            current_beats = current_beats + 2\n        elif char == '.|':\n            current_beats = current_beats + 1\n\n        result.append(current_beats)\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"def get_notes(music_string: str) -> List[int]:\n        notes = []\n        for i in music_string:\n            if i == '|':\n                notes.append(1)\n            elif i == '.':\n                notes.append(0.25)\n            elif i == 'o':\n                notes.append(4)\n        return notes\n\n    return [get_notes(music_string[:i]) + get_notes(music_string[i + 1:]) for i in range(0, len(music_string), 2)]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# It is not needed to explicitly call List.__init__\n    # because it is called implicitly when you add items\n    # https://stackoverflow.com/a/16785204/5548316\n\n    notes = []\n    for i in music_string:\n        if i == 'o':\n            notes.append(4)\n        elif i == 'o|':\n            notes.append(2)\n        elif i == '.|':\n            notes.append(1)\n        else:\n            raise ValueError('Invalid input')\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # In case you want to try it out yourself:\n    #\n    # print(parse_music('..o.|..o.|..o.|..o.|..o.|..o.|..o.|..o.|..o.|'))\n    # print(parse_music('o o|o o|o o|o o|o o|o o|o o|o o|o o|'))\n\n    # This is a hint, don't use it as a solution\n    #\n    # A possible solution would be using a regex to match the whole notes and then work from there, but\n    # using a loop is usually the simplest way.\n\n    return [\n        sum(1 for b in music_string if b == 'o') // 4, # Whole notes\n        sum(1 for b in music_string if b == 'o|') // 2, # Half notes\n        sum(1 for b in music_string if b == '.|') // 1  # Quarter notes\n    ]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"def test(s):\n        if s == 'o':\n            return 4\n        elif s == 'o|':\n            return 2\n        elif s == '.|':\n            return 1\n        else:\n            return -1\n\n    return [test(c) for c in music_string]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"assert music_string\n    def is_note(ch):\n        return ch in 'o|.|'\n\n    return [len(x) - 1 for x in music_string.split('|') if is_note(x[0])]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for char in music_string:\n        if char == 'o':\n            beats.append(4)\n        elif char == '|':\n            beats.append(2)\n        elif char == '.':\n            beats.append(1)\n\n    return beats\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    split = music_string.split('|')\n    for i in range(0, len(split)):\n        if split[i] == 'o' or split[i] == 'o|':\n            notes.append(4)\n        elif split[i] == '.|':\n            notes.append(1)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n\n    for symbol in music_string:\n        if symbol == \"o\" or symbol == \"o|\" or symbol == \".|\":\n            if len(result) > 0:\n                if symbol == \"o|\":\n                    result[-1] = result[-1] // 2\n                else:\n                    result[-1] += 1\n            else:\n                result.append(symbol)\n        elif symbol!= \"o\" and symbol!= \"o|\" and symbol!= \".|\":\n            print(f\"{symbol} not supported\")\n            result.append(0)\n            continue\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return parse_music_helper(music_string.strip())", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n\n    for i, c in enumerate(music_string):\n        if c == 'o':\n            beats.append(4)\n        elif c == '|':\n            beats.append(2)\n        elif c == '.':\n            beats.append(1)\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for line in music_string.split('\\n'):\n        for m in line.split(' '):\n            if m == '.':\n                result.append(1)\n            elif m == '|':\n                result.append(2)\n            elif m == 'o':\n                result.append(4)\n            else:\n                raise ValueError(f'Invalid musical not {m}')\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for line in music_string.splitlines():\n        line = line.strip()\n        if line.startswith('o'):\n            result.append(4)\n            continue\n        if line.startswith('o|'):\n            result.append(2)\n            continue\n        if line.startswith('.|'):\n            result.append(1)\n            continue\n        result.append(4)\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" notes = []\n    for character in music_string:\n        if character == \"o\":\n            notes.append(4)\n        elif character == \"o|\":\n            notes.append(2)\n        elif character == \".|\":\n            notes.append(1)\n        else:\n            return []\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" out = []\n    for i, c in enumerate(music_string):\n        if c == 'o':\n            out.append(4)\n        elif c == '|':\n            out.append(2)\n        elif c == '.':\n            out.append(1)\n    return out", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # first we remove all newlines\n    music_string = music_string.replace('\\n', '')\n\n    # then we get rid of spaces\n    music_string = music_string.replace(' ', '')\n\n    # split the string using | sign\n    notes_list = music_string.split('|')\n\n    # we now have a list of notes, so lets convert them to integers\n    notes = []\n    for note in notes_list:\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        elif note == '.|':\n            notes.append(1)\n\n    return notes\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = [int(note) for note in music_string.split()]\n    return music", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n\n    # Whole notes have length 4\n    index = 0\n    while index < len(music_string) - 1:\n        if music_string[index] == 'o':\n            result.append(4)\n            index += 1\n        else:\n            index += 1\n\n    # The rest of the notes have length 2 or 1\n    index = 0\n    while index < len(music_string) - 1:\n        if music_string[index] == 'o':\n            result.append(4)\n        elif music_string[index] == '|':\n            result.append(2)\n        elif music_string[index] == '.':\n            result.append(1)\n        index += 1\n\n    return result\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    music = [int(note) for note in music_string]\n\n    if '|' not in music_string:\n        return music\n\n    for i in range(0, len(music) - 1):\n        if music[i] == 1 and music[i + 1] == '|':\n            result.append(4)\n        elif music[i] == '|' and music[i + 1] == 1:\n            result.append(2)\n        elif music[i] == 1 and music[i + 1] == '|':\n            result.append(1)\n        elif music[i] == '|' and music[i + 1] == '|':\n            result.append(2)\n        elif music[i] == '|' and music[i + 1] == '|':\n            result.append(2)\n        elif music[i] == '|' and music[i + 1] == '|':\n            result.append(2)\n        elif music[i] == '|' and music[i + 1] == 1:\n            result.append(2)\n        elif music[i] == '|' and music[i + 1] == '|':\n            result.append(2)\n        elif music[i] == '|' and music[i + 1] == '|':\n            result.append(2)\n        elif music[i] == '|' and music", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Base case: empty string\n    if not music_string:\n        return []\n\n    # Get all the notes\n    notes = music_string.split('|')\n\n    # Exceptions to the rule\n    if len(notes) == 1:\n        return [2] * len(notes[0])\n\n    # We need the last one to be the same as the first\n    if notes[-1]!= notes[0]:\n        raise ValueError(f\"{music_string} is not a valid music string\")\n\n    result = []\n\n    # For each note\n    for n in notes[:-1]:\n        # Get the note length\n        length = n[0]\n        # If the note is a whole note\n        if length == 'o':\n            result += [4] * (len(n) - 1)\n\n        # If the note is a half note\n        elif length == 'o|':\n            result += [2] * (len(n) - 1)\n\n        # If the note is a quater note\n        elif length == '.|':\n            result += [1] * (len(n) - 1)\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Print the legend for note symbols\n    print(\"o - whole note, lasts four beats\\n\"\n          \"o| - half note, lasts two beats\\n\"\n          \".| - quater note, lasts one beat\")\n\n    # Initialize an empty list to store notes in\n    notes = []\n\n    # Loop through all characters in the string\n    for letter in music_string:\n        # If the letter is a note, append the note's duration to the list\n        if letter == \"o\":\n            notes.append(4)\n        elif letter == \"o|\":\n            notes.append(2)\n        elif letter == \".|\":\n            notes.append(1)\n        else:\n            # If the letter is not a note, print an error message\n            print(\"Letter {} is not a note\".format(letter))\n\n    # Return the list of note durations\n    return notes</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"res = []\n    for i in music_string:\n        if i == 'o':\n            res.append(4)\n        elif i == 'o|':\n            res.append(2)\n        elif i == '.|':\n            res.append(1)\n    return res", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\"\"\"\n    You can assume that this function will never be passed a string like\n    'o| o|.| o| o| o| o| o|.| o| o|.|.|.|.|.|.|.|.|.|.| o|'\n\n    >>> parse_music('||.| o|.|.| o| o| o|.|.|.|.|.|.| o|.| o| o|.| o| o|.|.| o|.| o| o| o| o|')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4, 2, 2, 1, 1, 1, 4, 4, 4, 2, 2, 4, 4]\n\n    >>> parse_music('o o| o| o|.|.| o|.|.| o| o|.|.| o|.| o|.|.|.|.|.|.|.| o| o| o| o|.|.| o| o|.| o| o|.| o|.| o| o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if not music_string:\n        return []\n    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n            continue\n        if char == 'o|':\n            result.append(2)\n            continue\n        if char == '.|':\n            result.append(1)\n            continue\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"note_division = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1,\n    }\n\n    notes = music_string.strip().split(' ')\n\n    beats = []\n    for note in notes:\n        if note in note_division:\n            beats.append(note_division[note])\n        else:\n            print(f'Invalid note: {note}')\n    return list(map(sum, zip(beats, notes)))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats: List[int] = []\n    for beat in music_string:\n        if beat == 'o':\n            beats.append(4)\n        elif beat == 'o|':\n            beats.append(2)\n        elif beat == '.|':\n            beats.append(1)\n        else:\n            print('Invalid character {}'.format(beat))\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = list(map(int, music_string.split('|')))\n\n    whole_notes = notes[:-1]\n    half_notes = notes[1:]\n    quater_notes = half_notes[:-1]\n\n    return whole_notes + half_notes + quater_notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"note_duration: List[int] = []\n    for char in music_string:\n        if char == 'o':\n            note_duration.append(4)\n        elif char == 'o|':\n            note_duration.append(2)\n        elif char == '.|':\n            note_duration.append(1)\n    return note_duration", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"assert len(music_string) > 0\n\n    beats = [-1 for _ in range(len(music_string))]\n\n    # need to go from right to left\n    # so 'o' is first, 'o'| is second, etc.\n    for i in range(len(music_string) - 1, -1, -1):\n        if music_string[i] == 'o':\n            beats[i] = 4\n            continue\n        elif music_string[i] == 'o|':\n            beats[i] = 2\n            continue\n        elif music_string[i] == '|':\n            beats[i] = 1\n            continue\n    return beats\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n\n    for note in music_string:\n        if note == 'o' or note == 'o|' or note == '.|':\n            beat_count += 1\n        elif note == 'o|':\n            beat_count += 2\n        elif note == '.|':\n            beat_count += 1\n\n    return [beat_count] * len(music_string)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" notes = []\n    notes = music_string.split()\n    beats = 0\n    for note in notes:\n        if note == 'o':\n            beats = beats + 4\n        elif note == 'o|':\n            beats = beats + 2\n        elif note == '.|':\n            beats = beats + 1\n\n    return [beats] * len(notes)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"ret = []\n\n    # split the string and go through each character\n    for i in music_string:\n        if i == 'o':\n            ret.append(4)\n        elif i == 'o|':\n            ret.append(2)\n        elif i == '.|':\n            ret.append(1)\n        else:\n            raise ValueError(f'Non valid note character: {i}')\n\n    return ret", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"assert isinstance(music_string, str)\n\n    total_beats = 0\n    music_list = []\n\n    for char in music_string:\n        if char == 'o':\n            music_list.append(4)\n            total_beats += 4\n        elif char == 'o|':\n            music_list.append(2)\n            total_beats += 2\n        elif char == '.|':\n            music_list.append(1)\n            total_beats += 1\n\n    if total_beats % 4!= 0:\n        total_beats += 4 - (total_beats % 4)\n\n    return music_list\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i, note in enumerate(music_string):\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        elif note == '.|':\n            notes.append(1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [int(note) for note in music_string.split('|') if note!= '']\n    notes = sum(notes)\n    beats = [(i + 1) * 4 for i in notes]\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [sum(1 for char in music_string if char == 'o') * 4,\n            sum(1 for char in music_string if char == 'o|') * 2,\n            sum(1 for char in music_string if char == '.|') * 1]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_nums = []\n    pos = 0\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            beat_nums.append(4)\n        elif music_string[i] == 'o|':\n            beat_nums.append(2)\n        elif music_string[i] == '.|':\n            beat_nums.append(1)\n        pos += 1\n    return beat_nums", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for character in music_string:\n        if character == 'o':\n            beats.append(4)\n        elif character == 'o|':\n            beats.append(2)\n        elif character == '.|':\n            beats.append(1)\n        else:\n            raise Exception(\"character was not recognized\")\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"num_notes: int = 0\n    beats: List[int] = []\n    for c in music_string:\n        if c == 'o':\n            num_notes += 1\n        elif c == '|':\n            beats.append(num_notes)\n            num_notes = 0\n        else:\n            num_notes += 1\n    if num_notes > 0:\n        beats.append(num_notes)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"def parse(music_string):\n        \"\"\"\n        This function calls itself recursively to find and parse every note.\n        When a note is found, it is removed from the string and the length of the note is appended to\n        `beat` list.\n\n        This function returns number of beats in the whole song.\n        \"\"\"\n        if music_string == '':\n            return 0\n        elif music_string[0] == '|':\n            length = 0\n            for i in range(1, len(music_string)):\n                if music_string[i] == '|':\n                    length += 1\n                else:\n                    break\n            return length\n        else:\n            return parse(music_string[1:]) + parse(music_string[2:])\n\n    return parse(music_string)\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return parse_music_helper(music_string, 0, 0, len(music_string) - 1)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            beat_list.append(4)\n        elif music_string[i] == 'o|':\n            beat_list.append(2)\n        elif music_string[i] == '|':\n            beat_list.append(1)\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return parse_music_inner(music_string, 0)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return _parse_music(music_string)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" beat_counts = []\n    for note in music_string.replace('o', 'o|').replace('o|', 'o').replace('.|', 'o').split():\n        beat_counts.append(note.count('o') * 4)\n        beat_counts.append(note.count('o|') * 2)\n        beat_counts.append(note.count('.') * 1)\n\n    return beat_counts\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"note_list: List[int] = []\n    for note in music_string:\n        if note == 'o':\n            note_list.append(4)\n        elif note == 'o|':\n            note_list.append(2)\n        elif note == '.|':\n            note_list.append(1)\n    return note_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == '|':\n            result.append(2)\n        else:\n            result.append(1)\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n\n    def parse_note(note):\n        if note == 'o' or note == 'o|':\n            beat_count += 4\n        elif note == '.|':\n            beat_count += 1\n        return beat_count\n\n    notes = []\n    for i, c in enumerate(music_string):\n        notes.append(parse_note(c))\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for i, char in enumerate(music_string):\n        if char == 'o' or char == 'o|':\n            result.append(4)\n        elif char == '.':\n            result.append(1)\n        elif char == '|':\n            result.append(2)\n        else:\n            return result\n\n    return result\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    music_string = music_string.replace('o|', 'o')\n    for note in music_string.split('|'):\n        result.append(len(note))\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"def parse_quater_note(music_string: str) -> int:\n        \"\"\" This function parses quater note and returns how many beats does it last.\n        \"\"\"\n        if music_string == '.':\n            return 1\n        if music_string == '..':\n            return 2\n        raise ValueError(f'Unexpected music string: {music_string}')\n\n    def parse_half_note(music_string: str) -> int:\n        \"\"\" This function parses half note and returns how many beats does it last.\n        \"\"\"\n        if music_string == 'o|':\n            return 2\n        if music_string == 'o|.|':\n            return 1\n        raise ValueError(f'Unexpected music string: {music_string}')\n\n    def parse_whole_note(music_string: str) -> int:\n        \"\"\" This function parses whole note and returns how many beats does it last.\n        \"\"\"\n        if music_string == 'o':\n            return 4\n        raise ValueError(f'Unexpected music string: {music_string}')\n\n    def parse_complete_note(music_string: str) -> int:\n        \"\"\" This function parses complete note (e.g. whole note, half note or quater note).\n        It returns integer equal to number of beats which this note lasts.\n        \"\"\"\n        if music_string ==", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" beats = []\n    for i, char in enumerate(music_string):\n        if char == 'o':\n            beats.append(4)\n        elif char == 'o|':\n            beats.append(2)\n        elif char == '.|':\n            beats.append(1)\n        else:\n            print(\"invalid char:\", char)\n            return None\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [\n        sum(note[-1] == '|' for note in beat.split('|')) + 1\n        for beat in music_string.split()\n    ]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"res = []\n    for i, n in enumerate(music_string):\n        if n == 'o':\n            res.append(4)\n        elif n == 'o|':\n            res.append(2)\n        elif n == '.|':\n            res.append(1)\n    return res", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" notes = music_string.split(\" \")\n\n    result = []\n\n    for note in notes:\n        if note.strip() == \"o\":\n            result.append(4)\n        elif note.strip() == \"o|\":\n            result.append(2)\n        elif note.strip() == \".|\":\n            result.append(1)\n        else:\n            raise ValueError(f\"{note} is not a recognized note\")\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return parse_music_1(music_string)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"assert len(music_string) > 0\n    result = []\n    notes = music_string.split(' ')  # ['o', 'o', '|', '.', '|', 'o', '|', '.', '.', '.', '.', 'o', 'o']\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    current_duration = 4\n    for char in music_string:\n        if char == \"o\":\n            current_duration = 4\n            result.append(current_duration)\n            continue\n        if char == \"|\":\n            current_duration = 2\n            result.append(current_duration)\n            continue\n        if char == \".\":\n            current_duration = 1\n            result.append(current_duration)\n            continue\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = 0\n    for i, letter in enumerate(music_string):\n        if letter == \"|\":\n            result += 1\n        else:\n            result *= 4\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# always return [] if given empty string\n    if music_string == \"\":\n        return []\n\n    whole_notes = []\n    half_notes = []\n    quater_notes = []\n\n    for char in music_string:\n        if char == \"o\":\n            whole_notes.append(4)\n        elif char == \"o|\":\n            half_notes.append(2)\n        elif char == \".|\":\n            quater_notes.append(1)\n\n    return [sum(note) for note in zip(whole_notes, half_notes, quater_notes)]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = ['o'] * 10\n    for i, char in enumerate(music_string):\n        if char == '|':\n            notes[i] += 'o'\n        else:\n            notes[i] += char\n\n    return [sum(notes[i:i + 2]) for i in range(0, len(notes), 2)]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # let's create a dictionary with beats\n    beats: dict[str, int] = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    # create a string with all notes and spaces\n    all_notes: str = music_string\n\n    # print(all_notes)\n\n    # we need to create a list of notes and spaces and then separate it\n    notes_and_spaces = all_notes.split()\n\n    # print(notes_and_spaces)\n\n    # now let's create a list with notes in it\n    notes: List[str] = []\n\n    # for each note we can find the number of beats it lasts\n    for each in notes_and_spaces:\n        if each == 'o':\n            notes.append('o')\n        elif each == 'o|':\n            notes.append('o|')\n        elif each == '.|':\n            notes.append('.')\n\n    # print(notes)\n\n    # for each note we need to find how many beats it lasts\n    current_beat = 0\n    new_list: List[int] = []\n\n    # for each note we need to find how many beats it lasts\n    for each in notes:\n        new_list.append(beats[each])\n        current", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" beats: List[int] = []\n\n    for character in music_string:\n        if character == 'o':\n            beats.append(4)\n        elif character == 'o|':\n            beats.append(2)\n        elif character == '.|':\n            beats.append(1)\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Data structure for the result\n    duration_list = []\n\n    # Tokenize the input\n    tokenized_input = music_string.split(' ')\n    for token in tokenized_input:\n        if token == 'o':\n            duration_list.append(4)\n        elif token == 'o|':\n            duration_list.append(2)\n        elif token == '.|':\n            duration_list.append(1)\n\n    return duration_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# First define the mapping of chars to the integer values for whole, half and quater note\n    mapping: Dict[str, int] = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    # Split the string into words using \" \" as separator\n    words = music_string.split(' ')\n\n    # Initialize the result variable\n    result = []\n\n    # Iterate through the words\n    for word in words:\n        # For each word check how many chars it has and insert it to the result\n        result.append(sum([mapping.get(char) for char in word]))\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" notes = []\n    for _ in range(len(music_string)):\n        char = music_string[_]\n        if char == 'o':\n            notes.append(4)\n        elif char == '|':\n            notes.append(2)\n        elif char == '.':\n            notes.append(1)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# split the string into lines\n    lines = music_string.splitlines()\n    # find the starting note\n    starting_note = lines[0].strip()\n    # create a list of notes\n    note_list = []\n    # loop over all lines except the first\n    for line in lines[1:]:\n        # skip blank lines and comment lines\n        if not line or line.startswith('#'):\n            continue\n        # skip line if it is not starting with a note\n        elif not line.startswith(starting_note):\n            # but keep it if it is part of the same whole note as the starting note\n            if starting_note == 'o':\n                note_list[-1] += 1\n            # if not, add it to the list\n            else:\n                note_list.append(int(line.strip()))\n    # print(note_list)\n    return note_list\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Remove newlines\n    music_string = music_string.replace('\\n','')\n\n    # Remove beginning and ending \"o\"\n    music_string = music_string[1:-1]\n\n    # Remove empty spaces\n    music_string =''.join(music_string.split())\n\n    # Remove newlines\n    music_string = music_string.replace(' ', '')\n\n    # Split string into chunks of one or more characters\n    chunks = music_string.split(' ')\n\n    # For every character in the string, we want to\n    # return a tuple of how many beats it last for,\n    # and how many rests it is between two notes.\n    # For instance, the note 'o' lasts for four beats, but we need to rest one beat before it.\n    rest_counts = []\n    notes = []\n    for chunk in chunks:\n        if chunk == 'o':\n            notes.append(4)\n        elif chunk == 'o|':\n            notes.append(2)\n            rest_counts.append(1)\n        elif chunk == '.|':\n            notes.append(1)\n            rest_counts.append(0)\n        else:\n            raise ValueError('Unknown note type: %s' % chunk)\n\n    # We want to make sure that rests that don't have notes after them\n    # are accounted for", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.strip().split(' ')\n    return [int(c) for c in music]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" def strip_comment(music_string: str) -> str:\n        while music_string.startswith('//'):\n            music_string = music_string[2:]\n        return music_string\n\n    def strip_staff_line(music_string: str) -> str:\n        while music_string.startswith('|'):\n            music_string = music_string[1:]\n        return music_string\n\n    def strip_staff(music_string: str) -> str:\n        music_string = strip_staff_line(music_string)\n        music_string = strip_staff_line(music_string)\n        return music_string\n\n    def parse_note(music_string: str) -> int:\n        if music_string[0] == 'o':\n            return 4\n        elif music_string[0] == '|':\n            return 2\n        elif music_string[0] == '.':\n            return 1\n        else:\n            return 0\n\n    def parse_music_string(music_string: str) -> List[int]:\n        music_string = strip_comment(music_string)\n        music_string = strip_staff(music_string)\n        return [parse_note(music_string) for music_string in music_string]\n\n    return parse_music_string(music_string)\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Strips the input to remove spaces and empty characters\n    music_string = music_string.strip()\n\n    # Splits the input into a list of notes\n    notes = music_string.split()\n\n    # Resets the list to store the list of beats\n    beats = []\n\n    # Iterates over the notes list and for each note in the list,\n    # it counts the number of times \"|\" character appears\n    # and stores it in the variable number_of_|\n    for note in notes:\n        number_of_| = note.count(\"|\")\n        beats.append(number_of_|)\n\n    # Returns the list of beats\n    return beats\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" beat_duration = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    result = []\n    for i in music_string:\n        if i == \"o\":\n            result.append(beat_duration[0])\n        elif i == \"o|\":\n            result.append(beat_duration[1])\n        elif i == \".|\":\n            result.append(beat_duration[2])\n        else:\n            raise Exception(\"Not a valid character\")\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"current_note = 0\n    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == 'o|':\n            result.append(2)\n        elif char == '.|':\n            result.append(1)\n        else:\n            print('Error')\n            print('Character {} is not a valid note'.format(char))\n    return result\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for c in music_string:\n        if c == 'o':\n            result.append(4)\n        elif c == 'o|':\n            result.append(2)\n        elif c == '.|':\n            result.append(1)\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = [0] * 16\n    for n in music_string:\n        # whole note lasts for 4 beats\n        if n == 'o':\n            result[0] += 4\n        # half note lasts for 2 beats\n        elif n == '|':\n            result[1] += 2\n        # quater note lasts for 1 beat\n        elif n == '.':\n            result[2] += 1\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    result = []\n    for i in range(0, len(music_string), 2):\n        x = music_string[i]\n        if x == 'o':\n            notes.append(4)\n        elif x == 'o|':\n            notes.append(2)\n        elif x == '.|':\n            notes.append(1)\n        else:\n            pass\n    for i in range(len(music_string) - 1):\n        if music_string[i] == 'o':\n            for x in range(len(notes) - 1):\n                result.append(notes.pop(0))\n        elif music_string[i] == 'o|':\n            for x in range(len(notes) - 1):\n                result.append(notes.pop(0))\n        elif music_string[i] == '.|':\n            result.append(1)\n        else:\n            pass\n    result.extend(notes)\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = [0] * (len(music_string) // 4)  # number of beats in each row\n    for i in range(0, len(music_string), 4):\n        result[int(music_string[i:i + 2])] += int(music_string[i + 2:i + 4])\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" def parse_note(note: str):\n        if note == \"o\" or note == \"o|\":\n            return 4\n        elif note == \".|\":\n            return 1\n\n    note_list = [parse_note(note) for note in music_string]\n    return sum(note_list)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return [len(musical_note) for musical_note in music_string.split('|') if musical_note!= '']", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"whole_notes: List[int] = []\n    half_notes: List[int] = []\n    quater_notes: List[int] = []\n    for note in music_string.split('o|'):\n        if note == '':\n            pass\n        else:\n            if note[0] == '|':\n                if note[1:] == '':\n                    pass\n                else:\n                    half_notes.append(2)\n            elif note[0] == '.':\n                if note[1:] == '':\n                    pass\n                else:\n                    quater_notes.append(1)\n            else:\n                whole_notes.append(4)\n    return whole_notes + half_notes + quater_notes\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"last_beat: int = 0  # type: int\n    parts_of_notes: List[int] = []  # type: List[int]\n    for char in music_string:\n        if char == 'o':\n            parts_of_notes.append(last_beat + 4)\n        elif char == 'o|':\n            parts_of_notes.append(last_beat + 2)\n        elif char == '|':\n            parts_of_notes.append(last_beat + 1)\n        elif char == '.':\n            parts_of_notes.append(last_beat)\n        else:\n            raise Exception(f\"Unknown character '{char}'\")\n        last_beat += parts_of_notes[-1]\n\n    return parts_of_notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# See notes here https://docs.python.org/3/library/typing.html\n    result = []\n    # Use list comprehension to parse music string and append each note duration to the result list\n    for note in music_string.replace('|', 'o').split('o'):\n        result.append(len(note) // 4)\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.strip()\n    result = [int(notepart) for notepart in notes.split('|') if notepart]\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# 1. Remove all whitespaces and splits on 'o'\n    music_string = music_string.replace(' ', '')        # 1\n    music_string = music_string.replace('|', '')        # 2\n    music_string = music_string.replace('o', '')        # 3\n    music_string = music_string.replace('o|', '')       # 4\n    music_string = music_string.replace('.|', '')       # 5\n    # 6. You get a list of strings - now it's time to parse it\n    # Now - a task is to parse a string as a list of 'o' and '|', then to convert them to beats\n    # and return them in a list of integers\n    # It's better to use a regular expression for that. Read more about it at\n    # https://docs.python.org/3/library/re.html\n    # You can use a positive lookahead and a negative lookahead in regular expression\n    # to match an o or | and not at the same time\n    # Here is a positive lookahead\n    # (?![ ]): match a character not followed by whitespace\n    # Here is a negative lookahead\n    # (?<![|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" def get_value(raw: str):\n        if raw == 'o':\n            return 4\n        elif raw == 'o|':\n            return 2\n        elif raw == '.|':\n            return 1\n\n    return [get_value(note) for note in music_string]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" def _make_note(note: str) -> int:\n        \"\"\" Convert note to number of beats \"\"\"\n        if note == 'o':\n            return 4\n        elif note == 'o|':\n            return 2\n        elif note == '.|':\n            return 1\n        else:\n            raise ValueError(f'Invalid note: {note}')\n\n    def _parse_beat(note: str) -> List[int]:\n        \"\"\" Convert a single line of music to list of notes \"\"\"\n        return [_make_note(note) for note in note.split('|')]\n\n    def _parse_line(line: str) -> List[int]:\n        \"\"\" Convert a single line of music to list of notes \"\"\"\n        return _parse_beat(line)\n\n    return [_parse_line(line) for line in music_string.split('\\n')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    i = 0\n    prev_bp =''\n    for bp in music_string:\n        if prev_bp == '|':\n            i += 1\n        if prev_bp == 'o':\n            i -= 1\n        result.append(beats[bp])\n        prev_bp = bp\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" if not music_string:\n        return []\n\n    notes = music_string.strip()\n    if not notes:\n        return []\n\n    notes = notes.replace(' ', '')\n    notes = notes.replace('|','')\n    notes = notes.replace('o', '4')\n    notes = notes.replace('O', '4')\n\n    notes = notes.split()\n\n    beat_times = []\n    for note in notes:\n        if note == '.':\n            beat_times.append(1)\n        elif note == 'o':\n            beat_times.append(4)\n        elif note == 'o|':\n            beat_times.append(2)\n        elif note == '.|':\n            beat_times.append(1)\n    return beat_times", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return [len(s) for s in music_string.split('|') if s!= '']", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" def parse_note(note: str) -> int:\n        \"\"\" Parse a single note and return it's length in beats.\n\n        >>> parse_note('o')\n        4\n        >>> parse_note('o|')\n        2\n        >>> parse_note('.|')\n        1\n        \"\"\"\n        if note == 'o':\n            return 4\n        elif note == 'o|':\n            return 2\n        else:\n            return 1\n\n    return [parse_note(note) for note in music_string]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [len([i for i in music_string if i == \"o\"])] + [len([i for i in music_string if i == \"o|\"])] \\\n           + [len([i for i in music_string if i == \".\"])]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"from itertools import groupby\n\n    # Parse the string and convert it to list of notes\n    notes = list(map(lambda x: int(x), music_string))\n\n    # Split notes to groups of same length\n    notes_by_len = [list(g) for _, g in groupby(notes, key=lambda x: x[0])]\n\n    # Calculate the length of each group\n    len_of_group = [sum(map(lambda x: int(x), n)) for n in notes_by_len]\n\n    return [len_of_group[i] / 4 for i in range(len(len_of_group))]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    whole_notes = 0\n    half_notes = 0\n    quater_notes = 0\n\n    for char in music_string:\n        if char == 'o':\n            whole_notes += 1\n            notes.append(4)\n        elif char == 'o|':\n            half_notes += 1\n            notes.append(2)\n        elif char == '.|':\n            quater_notes += 1\n            notes.append(1)\n        else:\n            notes.append(1)\n\n    return notes\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == 'o|':\n            result.append(2)\n        elif char == '.|':\n            result.append(1)\n        else:\n            raise ValueError(f\"Something went wrong parsing {music_string}\")\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split()\n    count = 0\n    result = []\n    for note in notes:\n        if note == \"o|\":\n            count += 1\n            result.append(1)\n        elif note == \"o\":\n            count += 1\n            result.append(4)\n        elif note == \".\":\n            count += 1\n            result.append(2)\n        else:\n            count += 1\n            result.append(1)\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for _ in range(len(music_string)):\n        if music_string[_] == 'o':\n            result.append(4)\n        elif music_string[_] == 'o|':\n            result.append(2)\n        elif music_string[_] == '.|':\n            result.append(1)\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"o = 'o'\n    oo = 'o|'\n    period = '.'\n    return sum(4 * [len(i) for i in i.split(o)] for i in music_string.split(oo) if i!= period)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    current_beat = 0\n\n    for c in music_string:\n        if c == 'o':\n            result.append(4)\n            current_beat += 1\n        elif c == 'o|':\n            result.append(2)\n            current_beat += 1\n        elif c == '.|':\n            result.append(1)\n            current_beat += 1\n        else:\n            print('Unexpected character {}'.format(c))\n\n    return result\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    last_beat = 0\n    for letter in music_string:\n        if letter == '.':\n            last_beat += 1\n        elif letter == '|':\n            last_beat -= 1\n            notes.append(last_beat)\n        elif letter == 'o':\n            last_beat += 4\n            notes.append(last_beat)\n        elif letter == 'o|':\n            last_beat += 2\n            notes.append(last_beat)\n        else:\n            raise ValueError(f'Invalid input in parse_music: \"{letter}\"')\n    return notes\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" res = []\n    current_beat = 0\n\n    for char in music_string:\n        if char == \"o\" or char == \"o|\":\n            res.append(4)\n            current_beat += 1\n        elif char == \".\":\n            res.append(1)\n            current_beat += 1\n        else:\n            res.append(0)\n\n    return res", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"res = []\n    for i in range(0, len(music_string), 2):\n        res.append(len(music_string[i:i + 2]))\n    return res", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"input_string = music_string\n    output_list = []\n\n    while input_string!= '':\n        if input_string[0] == 'o':\n            output_list.append(4)\n            input_string = input_string[1:]\n        elif input_string[0] == 'o|':\n            output_list.append(2)\n            input_string = input_string[1:]\n        elif input_string[0] == '.|':\n            output_list.append(1)\n            input_string = input_string[1:]\n        else:\n            output_list.append(0)\n            break\n\n    return output_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# You can use `music_string` object as ```string```\n    #  and then split it by ```.```,\n    #  but it would be easier and more readable\n    #  to use ```music_string.split()```\n    #  and ```.split('.')```\n    #  which will split the string by every\n    #  occurrence of the character ```.```\n    #  and will return an empty list if\n    #  there are no more characters to split.\n    #  You can think of it as a ```while``` loop\n    #  splitting the string until there are no more\n    #  characters to split.\n    notes = music_string.split('.')\n    # print('notes:', notes)\n\n    # since 'o' and 'o|' last four beats\n    #  it is necessary to find the longest note\n    #  and divide it by four to get the length of the shortest note\n    #  and then subtract it from all of the notes\n    shortest = 4\n    for note in notes:\n        if note == 'o':\n            shortest = shortest - 1\n        elif note == 'o|':\n            shortest = shortest - 2\n        else:", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    notes = []\n    for i in music_string:\n        if i == \"o\" or i == \"o|\" or i == \".|\":\n            notes.append(i)\n        else:\n            result.append(sum([len(notes) for note in notes if note == i]))\n            notes.clear()\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for i in music_string:\n        if i == '|':\n            beats.append(1)\n        elif i == 'o':\n            beats.append(4)\n        elif i == 'o|':\n            beats.append(2)\n        else:\n            beats.append(1)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('o|')\n    beats = []\n    for note in notes:\n        if note[0] == '.':\n            beats.append(1)\n        else:\n            beats.append(4)\n    return [sum(beats[i:]) for i in range(0, len(beats), 2)]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n    assert len(notes) % 2 == 0\n    return [int(note.replace('o', '4').replace('o|', '3').replace('.|', '2')) for note in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    current_beat = 0\n    for character in music_string:\n        if character == \"|\":\n            current_beat += 1\n            result.append(current_beat)\n        elif character == \"o\":\n            result.append(4)\n            current_beat += 1\n        elif character == \"o|\":\n            result.append(2)\n            current_beat += 1\n        elif character == \".|\":\n            result.append(1)\n            current_beat += 1\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" music = music_string.replace('o|', 'o').split('|')\n    beats = [len(music) - i for i in range(len(music))]\n    for i, s in enumerate(music):\n        if s == 'o':\n            beats[i] = 4\n        elif s == '.|':\n            beats[i] = 1\n\n    return beats"]]