[["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # write your code here\n    s = s.lower()\n    result = []\n    for i, j in zip(range(len(s)), range(len(s))):\n        if s[j] =='' and (s[i - 1] =='' or i == 0):\n            result.append(s[:i - 1])\n    return result</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    return [w for w in s.split() if len(w)==n and w.split(\"\")[0].isalpha()]</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def first_three_consonants(word):\n        return [c for c in word if c.isalpha()][:3]\n\n    def words_with_n_consonants(s):\n        return (word for word in s.split() if len(first_three_consonants(word)) == n)\n\n    return words_with_n_consonants(s)\n\ntest = [\"Mary had a little lamb\", \"simple white space\", \"Hello world\", \"Uncle sam\"]\n\nfor s in test:\n    print(\"select_words(%s, 4) ==> %s\" % (s, select_words(s, 4)))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def helper(x):\n        if len(x) == n:\n            return x\n        else:\n            return helper(x + \" \" + s)\n\n    return filter(None, helper(\"\").split(\" \"))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Write your code here\n    result = []\n    n = int(n)\n    for i in s:\n        if len(i) >= n:\n            result.append(i)\n            if len(i) > n:\n                result.append(i[n:])\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for word in s.split():\n        if len(word) >= n and s.count(word) == n:\n            words.append(word)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    if s == \"\":\n        return words\n    for w in s:\n        for c in w.lower():\n            if c.isalpha() and c not in \"aeiouAEIOU\":\n                n -= 1\n                if n == 0:\n                    words.append(w)\n    return words</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n\n    for i in range(len(s)):\n        if s[i] == \" \":\n            words.append(s[(i - 1):i])\n\n    for i in range(len(s)):\n        if s[i] == \" \":\n            words.append(\"\")\n\n    words = list(filter(lambda x: len(x) == n, words))\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    from collections import defaultdict\n    s = s.lower()\n    n = len(s) - n - 1\n    d = defaultdict(int)\n    for l in s.split():\n        d[l] += 1\n    return [w for w in d.keys() if d[w] == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def is_consonant(c):\n        \"\"\"Given a letter, returns True if the letter is a consonant,\n        and False otherwise.\n        \"\"\"\n        if c in 'bcdfghjklmnpqrstvwxyz':\n            return True\n        else:\n            return False\n    def count_consonants(s):\n        \"\"\"Counts the number of consonants in the string.\n        \"\"\"\n        i = 0\n        while i < len(s):\n            if is_consonant(s[i]):\n                i += 1\n            else:\n                return i\n    return [word for word in s.split(' ') if count_consonants(word) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    from collections import defaultdict\n    \n    def get_consonants(s):\n        \"\"\"returns a list of all consonants in a string\"\"\"\n        return list(filter(lambda x: x not in \"abcdefghijklmnopqrstuvwxyz\", s))    \n\n    if s == \"\":\n        return []\n\n    words = [word for word in s.split(\" \") if word]\n    cons = defaultdict(int)\n    for word in words:\n        cons[word] += 1\n\n    #compose a list of strings where the count of consonants is at most n\n    result = [word for word in words if cons[word] <= n]\n\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    def sub(s, n):\n        words = []\n        res = []\n        for i in range(len(s) - n + 1):\n            sub_string = s[i:i+n]\n            if sub_string not in res:\n                res.append(sub_string)\n                words.append(s[i:i+n])\n        return words\n    return sub(s, n)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    import re\n    letters = re.findall('[a-z]', s)\n\n    # letters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    # print letters\n\n    consonant_index = 0\n    vowel_index = 1\n\n    result = []\n    last_consonant_index = None\n    count = 0\n\n    for i in range(len(s)):\n        if s[i] in vowels:\n            # print last_consonant_index\n            if last_consonant_index!= None:\n                result.append(s[last_consonant_index:i+1])\n                last_consonant_index = None\n                count += 1\n                if count == n:\n                    break\n            else:\n                break\n        else:\n            last_consonant_index = i\n\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for w in s:\n        if len(set(w)) == 4:\n            result.append(w)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Write your code here\n    \n    # Build the dictionary of consonants\n    consonants = {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, \n                'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1,\n                'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1,\n                'y': 1, 'z': 1,'': 1}\n    # Build the dictionary of words\n    words = {}\n    for word in s.split(\" \"):\n        if len(word) > 0:\n            if word not in words:\n                words[word] = 0\n            words[word] += consonants.get(word[0], 0)\n    # Build the array of consonants\n    consonants = []\n    for c in consonants:\n        if c == \" \":\n            consonants.append(c)\n        else:\n            consonants.append(0)\n    # Build the array of words\n    words = []\n    for word in words:\n        if words[word]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    if n <= 0 or n > len(s):\n        return []\n    count_cons = 0\n    for i in range(len(s)):\n        if s[i].lower() in \"cfptkl\":\n            count_cons += 1\n    words = []\n    for i in range(len(s) - n + 1):\n        for j in range(n):\n            if s[i+j:i+j].lower() in \"cfptkl\":\n                count_cons -= 1\n                if count_cons == 0:\n                    words.append(s[i+j])\n                if count_cons > 0:\n                    break\n    return words\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return list()", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # write your code here\n    myList = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            myList.append(s[i])\n        elif s[i] =='':\n            myList.append(s[i])\n            myList = myList[0:len(myList) - 1]\n    myList = [x for x in myList if x!='']\n    lst = []\n    for x in myList:\n        myList = list(s)\n        myList.remove(x)\n        lst.append(myList)\n    return lst", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = list(s)\n    results = []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        for consonant in consonants:\n            if s[0] == consonant:\n                results.append(s[0])\n        return results\n    else:\n        for i in range(len(s)):\n            for consonant in consonants:\n                if s[i] == consonant:\n                    for j in range(1,len(s)+1):\n                        if s[i:j+1] == consonants:\n                            results.append(s[i:j+1])\n                            if len(results) == n:\n                                break\n    return results", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    \n    def select_n_consonant_words(s, n):\n        words = []\n        for i in range(len(s)):\n            w = s[:i]\n            if select_n_consonant_words(w, n):\n                words.append(w)\n        return words\n    \n    def select_n_consonant_word(w, n):\n        return select_n_consonant_words(w, n) and len(w) == n\n    \n    if s == '':\n        return []\n    elif len(s) == 0:\n        return ['']\n    else:\n        for i in range(len(s)+1):\n            words = select_n_consonant_word(s[:i], n)\n            if words:\n                return words\n        return []\n        \n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Not right for now. But let's use it to start.\n    # Idea: get all consonants. If the consonants length is 0, then return []\n    # Otherwise go through the string and extract all substrings.\n    # If the length of the substring is equal to n, then push them to a new list\n    # For the last character, if it's a consonant, remove it from the list\n    # If it's a vowel, add it to the list and get the new consonant list.\n    consonants = []\n    for c in s:\n        if c.lower() in \"az\":\n            consonants.append(c)\n    if len(consonants) == 0:\n        return []\n    else:\n        result = []\n        for i in range(len(s)):\n            if len(consonants) == n:\n                result.append(s[i-n:i])\n        if s[-1:].lower() in \"az\":\n            consonants.pop()\n        if s[-1:].lower() in \"aeiou\":\n            result.append(s[-1:])\n        return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def print_words(words):\n        for word in words:\n            print(word)\n\n    words = []\n\n    if s == \"\":\n        return words\n\n    # the word list\n    for i in range(len(s) - n + 1):\n        for j in range(n):\n            if s[i + j] =='' or s[i + j] == '\\'':\n                continue\n            else:\n                words.append(s[i: i + j])\n\n    print_words(words)\n    return words\n\nselect_words(\"Mary had a little lamb\", 3)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def count(s):\n        \"\"\"Counts the number of consonants in a string\"\"\"\n        return sum(c==c.lower() for c in s)\n\n    def select_consonants(s):\n        \"\"\"Returns a list of all consonants in a string\"\"\"\n        consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n        if not s:\n            return []\n        return [consonant for consonant in consonants if consonant in s]\n\n    return [word for word in s.split() if count(word)==n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    result = []\n    word_list = []\n    for w in s:\n        if w not in word_list:\n            word_list.append(w)\n    for i in range(len(s) + 1):\n        for j in range(n):\n            if s[i] in (\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"):\n                result.append(word_list[int(s[i])])\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    word_list = []\n    if len(s) == 0:\n        return []\n    for i in range(len(s)):\n        if s[i].isalpha() and s[i].lower() in 'aeiou':\n            if not s[i+1].isalpha() or s[i+1].lower() not in 'aeiou':\n                word_list.append(s[:i+1])\n                i += 1\n            else:\n                word_list.append(s[:i])\n        elif s[i].isalpha() and s[i].lower() in 'bcdfghjklmnpqrstvwxyz':\n            if s[i+1].isalpha() and s[i+1].lower() not in 'abcdefghijklmnopqrstuvwxyz':\n                word_list.append(s[:i])\n                i += 1\n            else:\n                word_list.append(s[:i+1])\n\n    return word_list", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def remove_non_vowels(s):\n        for letter in s:\n            if letter.lower() not in \"aeiou\":\n                s = s.replace(letter, \"\")\n        return s\n        \n    s = s.lower()\n    s = remove_non_vowels(s)\n    result = []\n    i = 0\n    for letter in s:\n        if len(s) == i + 1:\n            result.append(s)\n        if letter == \" \" and len(s) == i + 1:\n            result.append(s)\n        if len(s) == i + 1:\n            result.append(s)\n        if letter == \" \":\n            result.append(s)\n        i += 1\n    if len(s) > i + 1 and s[-1] == \" \":\n        result.append(s)\n    return result\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def consonant_count(word):\n        \"\"\"\n        Given a string word, return the number of consonants in that word.\n        \"\"\"\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n        count = 0\n        for char in word:\n            if char not in vowels:\n                count += 1\n        return count\n\n    def get_words(str):\n        \"\"\"Given a string str, return a list of all words in the string.\"\"\"\n        if str == \"\":\n            return []\n        else:\n            str = str.lower()\n            str = str.split()\n            str = [word for word in str if word not in [\",\", \":\", \" \", \".\", \"'\"]]\n            return str\n\n    words = get_words(s)\n    answer = []\n    for word in words:\n        if consonant_count(word) == n:\n            answer.append(word)\n    return answer\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    c = len([x for x in s if x in \"abcdefghijklmnopqrstuvwxyz\"])\n    if c < n:\n        return []\n    l = []\n    for i in range(0, len(s) - n + 1):\n        word = s[i:i + n]\n        if any([x in word for x in \"?!.\" and word!= \"?\" and word!= \"!\"]):\n            continue\n        l.append(word)\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < 3:\n        return []\n    arr = []\n    l = []\n    for x in s.split():\n        if x == \" \" or not x.islower():\n            if len(l) > 0:\n                arr.append(l)\n                l = []\n            arr.append(x)\n    return arr[len(l):] + arr[:len(l)]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def _consonant_count(s):\n        count = 0\n        for char in s:\n            if char.isalpha():\n                if char.islower():\n                    if char.isalpha():\n                        count += 1\n        return count\n\n    if len(s) == 0:\n        return []\n    else:\n        n_consonants = _consonant_count(s)\n        count = 0\n        words = []\n        for word in s.split():\n            if word:\n                if n_consonants == _consonant_count(word):\n                    count += 1\n                    words.append(word)\n        if count == n:\n            return words\n        else:\n            return select_words(s, n)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n\n    def consonant_count(word):\n        \"\"\"Returns the number of consonants in the word.\"\"\"\n        consonants = 0\n        for i in word:\n            if i in 'bcdfghjklmnpqrstvwxyz':\n                consonants += 1\n        return consonants\n\n    words = []\n    for word in s.split():\n        if len(word) > 0 and consonant_count(word) == n:\n            words.append(word)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    for i,c in enumerate(s):\n        if c.isupper() and s[i+1].isupper():\n            return [s[:i]+s[i+1:] for i in range(len(s)-1)]\n    return [s[:i] for i in range(len(s)-1)]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def word_contains(w, c):\n        \"\"\"Given a word w and a consonant c, this function returns True if word w \n        contains the consonant c, and False otherwise.\n        \"\"\"\n        return any(c in i for i in w)\n\n    return [i for i in s.split() if word_contains(i, c) == True for c in \"abcdefghijklmnopqrstuvwxyz\"]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # https://leetcode.com/problems/select-words/\n    return list(filter(lambda w: len(filter(lambda c: c in w, \"abcdefghijklmnopqrstuvwxyz\")) == n, s))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    else:\n        words = []\n        for w in s.split():\n            if len(set(w)) == 3:\n                words.append(w)\n        return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    if n < 1 or n > len(s):\n        return []\n    words = []\n    for i in range(len(s)):\n        if s[i] in \"aeiouAEIOU\":\n            words.append(s[0:i])\n        elif s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            words.append(s[0:i] + s[i].lower())\n        elif s[i] == \" \":\n            words.append(s[0:i])\n        else:\n            break\n    return words\n\ns = input()", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    if s == \"\":\n        return words\n    for i in range(len(s)):\n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            if select_words(s[i+1:], n)!= []:\n                words.append(s[i] + \" \" + select_words(s[i+1:], n)[0])\n                select_words(s[i+1:], n) = []\n        elif s[i] == \" \":\n            select_words(s[i+1:], n)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    import copy\n    if len(s) == 0:\n        return []\n    else:\n        l = []\n        for i in s:\n            if i =='':\n                if len(l) == n - 1:\n                    l.append(i)\n                elif len(l) < n - 1:\n                    l.append(i)\n            else:\n                if len(l) == n:\n                    l.append(i)\n                elif len(l) < n:\n                    l.append(i)\n        return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def get_consonant_count(word):\n        \"\"\"\n        This function takes a word as an argument and returns the number of consonants \n        in the word as an integer.\n        \"\"\"\n        return len(filter(lambda x: x.islower() and x!= 'w', word))\n\n    word_list = list(s.split())\n    result = []\n    for word in word_list:\n        if get_consonant_count(word) == n:\n            result.append(word)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    letters = list(s)\n    consonants = \"\"\n    for i in range(0, len(letters)):\n        if letters[i].islower():\n            consonants += letters[i]\n    if consonants == \"\":\n        return []\n    l = len(consonants)\n    return [x for x in s.split() if len(x) == l and x.count(consonants) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def find_consonants(s):\n        \"\"\"This function will return a list of all consonants in the string s\"\"\"\n        consonants = []\n        for c in s:\n            if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u':\n                continue\n            consonants.append(c)\n        return consonants\n\n    consonants = find_consonants(s)\n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(len(s)):\n        while i < len(s) - 1 and s[i] == s[i+1]:\n            words.append(s[i])\n            i += 1\n        if len(words) == n:\n            return words\n    return []</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    else:\n        return [word for word in s.split() if len([c for c in word if c.lower() in set([\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"])]) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # base case\n    if s == \"\":\n        return []\n\n    # extracting list of characters from the string\n    characters = [character for character in s]\n    # extracting the words from the string\n    words = [word for word in s.split(\" \") if len(word) > 0]\n    # extracting the list of consonants from the string\n    consonants = [c for c in characters if c.lower() in \"bdfghjklmnpqrstvwxz\"]\n    # converting the words to lower case\n    words_lower = [word.lower() for word in words]\n\n    # getting the list of words that contain exactly 4 consonants\n    words_exactly_4_consonants = []\n    for word in words_lower:\n        if len([c for c in word if c in consonants]) == 4:\n            words_exactly_4_consonants.append(word)\n\n    # getting the list of words that contain exactly 3 consonants\n    words_exactly_3_consonants = []\n    for word in words_lower:\n        if len([c for c in word if c in consonants]) == 3:\n            words_exactly_3_consonants.append(word)\n\n    # returning the result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def _cons(s):\n        return [c for c in s if c in \"bcdfghjklmnpqrstvwxz\"]\n    def _contains(s1, s2):\n        for c in s2:\n            if c not in s1 or s1.index(c) > len(s1) - 1:\n                return False\n        return True\n    s = s.lower()\n    result = []\n    for w in s.split(\" \"):\n        if len(_cons(w)) == n:\n            result.append(w)\n    return result if result else []\n\nselect_words(\"Hello world\", 4)\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def word_length(w):\n        return len(set(w))\n    def select_words_helper(s):\n        # create a dictionary that holds the length of each word\n        d = {}\n        for w in s:\n            d[word_length(w)] = d.get(word_length(w), 0) + 1\n        # create a list of words that contain exactly 3 consonants, in order they appear in the string\n        selected_words = []\n        for i in range(3):\n            # find all words with exactly 3 consonants\n            for n, k in d.items():\n                if n == i:\n                    # append these words to the result\n                    selected_words.append(s[k:k+d[k]])\n        return selected_words\n    # return the result\n    return select_words_helper(s)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    if not s:\n        return []\n    for word in s.split():\n        if len(word) <= n:\n            continue\n        if len([c for c in word if c.isalpha()]) == n:\n            result.append(word)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # write code here\n\n\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for w in s.split():\n        c = 0\n        for i in w:\n            if i.isupper():\n                c += 1\n        if c == n:\n            words.append(w)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    import re\n    \n    if not s:\n        return []\n    results = []\n    for word in s.split():\n        if len(re.findall(r'[^\\w\\s]', word)) == n:\n            results.append(word)\n    return results</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def find_consonants(s):\n        count = 0\n        for i in s:\n            if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y' or i =='':\n                continue\n            else:\n                count += 1\n        return count\n\n    consonants = find_consonants(s)\n    words = []\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] =='':\n            if i!= 0 and i < len(s) - 1 and (s[i-1]!='' or s[i+1]!=''):\n                count += 1\n            elif i == 0 and s[i+1]!='':\n                count += 1\n            elif i == len(s) - 1 and s[i-1]!='':\n                count += 1\n            if count == consonants:\n                words.append(s[:i])\n        elif s[i] == s[i+1]:\n            words.append(s[:i])\n        elif s[i] == s[i+1] == s[i+2]:\n            words.append(s[:i])\n    return words\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Write your code here\n    # i think you should save all consonants and make a str and len of it for checking if equal to n\n    # then you should make a list of words and save each word in the list for checking if equal to s\n    # if so add it to the list of words and also make a list of all letters in the word\n    # then go through s and if it matches one of the words then add it to the new list\n    # then make a new str of the new list and len of it for checking if equal to n\n    # if so print the list of words\n    # you need a list of consonants for checking if the word contains all the consonants you need\n    # maybe you should save all the letters in s for checking if the word is made from them\n\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    import re\n    import operator\n    import itertools\n\n    def split(s):\n        return re.split(\"\\s+\", s)\n\n    def count_consonants(word):\n        cons = 0\n        for c in word:\n            if c.lower() in \"bcdfghjklmnpqrstvwxyz\":\n                cons += 1\n        return cons\n\n    def select_words_helper(s, i, n):\n        if i >= len(s):\n            yield \"\"\n            return\n        for j in range(len(s) - i):\n            word = s[i:i + j]\n            if count_consonants(word) == n:\n                yield word\n        for c in s[i + 1:]:\n            for j in range(len(s) - i - 1):\n                word = s[i:i + j] + c\n                if count_consonants(word) == n:\n                    yield word\n            for j in range(i, len(s)):\n                word = s[i:i + j] + c\n                if count_consonants(word) == n:\n                    yield word\n    return list(itertools.islice(select_words_helper(s, 0, n), 0, None))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    res = []\n    for w in s.split(\" \"):\n        if len(w) > n:\n            res.append(w)\n        elif len(w) == n:\n            for c in w:\n                if c.islower() and c not in \"aeiou\":\n                    res.append(w)\n    return res", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def count_consonants(word):\n        consonants = []\n        for i in word:\n            if i.isupper():\n                if i in consonants:\n                    consonants.append(i)\n            else:\n                consonants.append(i)\n\n        return len(consonants)\n\n    words = s.split()\n    return [w for w in words if count_consonants(w) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s) + 1):\n        if s[i:i+2] == \" \":\n            words.append(s[i])\n        if len(s[i:i+2]) == 2:\n            if s[i:i+2][0].isupper() == True:\n                if s[i:i+2][1].islower() == True:\n                    if s[i:i+2][1].isupper() == False:\n                        if len(s[i]) == n:\n                            words.append(s[i])\n            if s[i:i+2][0].islower() == True:\n                if s[i:i+2][1].isupper() == True:\n                    if s[i:i+2][1].islower() == False:\n                        if len(s[i]) == n:\n                            words.append(s[i])\n            if s[i:i+2][0].isupper() == True:\n                if s[i:i+2][1].isupper() == True:\n                    if s[i:i+2][1].islower() == False:\n                        if len(s[i]) == n:\n                            words.append(s[i])\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    word_list = []\n    if s == \"\":\n        return []\n    word_list = s.split()\n    word_list = [word for word in word_list if len(word) <= n and len(word) > 0]\n    return word_list", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    pass", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    else:\n        #return all words with the given number of consonants from the string\n        words = []\n        for i in range(len(s)):\n            if len(set(s) - set(list(' '))) <= n:\n                words.append(s[:i+1])\n        return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    cons = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n    result = []\n    for word in s.split(\" \"):\n        if len(set(cons) & set(word)) == n:\n            result.append(word)\n    return result\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    word_list = []\n\n    # Get rid of all characters that are not letters or space\n    s = \"\".join(char for char in s if char in string.ascii_lowercase + string.ascii_uppercase)\n\n    # Split s into words, and then filter them based on their length\n    words = s.split()\n    word_list = [word for word in words if len(word) == n]\n\n    return word_list", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return list(filter(lambda w: len(filter(lambda c: c.lower() in \"cdghjklmnpqrstvwxyz\", w)) == n, s))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    word = \"\"\n    result = []\n    for i in range(len(s)):\n        if s[i] in [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"]:\n            if len(word) == n:\n                result.append(word)\n                word = \"\"\n            elif len(word) > n:\n                word = \"\"\n        else:\n            if len(word) == n:\n                result.append(word)\n                word = \"\"\n            elif len(word) > n:\n                word = \"\"\n            word += s[i]\n    if len(word) == n:\n        result.append(word)\n        return result\n    return result\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    list_of_words=[]\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                if s[i].islower():\n                    if s[i].isupper():\n                        list_of_words.append(s[i])\n            elif s[i].isupper():\n                if s[i].islower():\n                    if s[i].isupper():\n                        list_of_words.append(s[i])\n            else:\n                if s[i].islower():\n                    if s[i].isupper():\n                        list_of_words.append(s[i])\n        else:\n            if s[i].isalpha():\n                if s[i].isupper():\n                    if s[i].islower():\n                        if s[i].isupper():\n                            list_of_words.append(s[i])\n                elif s[i].isupper():\n                    if s[i].islower():\n                        if s[i].isupper():\n                            list_of_words.append(s[i])\n                else:\n                    if s[i].islower():\n                        if s[i].isupper():\n                            list_of_words.append(s[i])\n            else:\n                if s[i].isupper():\n                    if s[i].islower():\n                        if s[i]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Remember to indent your code properly!\n    if s == \"\":\n        return []\n    words = s.split()\n    if len(s) == 1:\n        # This is easy, just add the one word to the list\n        return [s]\n    else:\n        # Keep in mind that you have to check all the strings in the list\n        # if you want to get all the words that contain exactly n consonants\n        # So, let's start with the first string in the list\n        word1 = words[0]\n        if len(word1) >= n:\n            # Here we know that we have to check the rest of the strings\n            # to find out if they contain exactly n consonants, so\n            # we are adding the current word to the list\n            return [word1]\n        else:\n            # Remember to check all the strings in the list\n            # so, let's start with the second string in the list\n            word2 = words[1]\n            if len(word2) >= n:\n                # Here we know that we have to check the rest of the strings\n                # to find out if they contain exactly n consonants, so\n                # we are adding the current word to the list\n                return [word1, word2]\n            else:\n                # We know that the first", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # Write your code here\n    print(\"Your code should look like this!\")\n    s = input(\"Please enter a string\")\n    n = input(\"Please enter a number\")\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    # words = list()\n    if not s == \"\":\n        words = list()\n        for x in s:\n            if x not in consonants:\n                words.append(x)\n            elif x == consonants[-1]:\n                words.append(x)\n            else:\n                for i in consonants:\n                    if x == i:\n                        words.append(x)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def remove_consonants(word):\n        '''\n        @param word: The word to remove the consonants from.\n        @return: The word with all the consonants removed.\n        '''\n        return word.replace('w', '').replace('y', '').replace('z', '').replace('s', '').replace('t', '').replace('ch', '').replace('qu', '').replace('ck', '').replace('ng', '').replace('gu', '').replace('wh', '').replace('ph', '').replace('rh', '').replace('th', '').replace('gh', '').replace('dh', '').replace('rh', '').replace('ph', '').replace('th', '').replace('ng', '').replace('gh', '').replace('dh', '').replace('rh', '').replace('ph', '').replace('th', '').replace('ng', '').replace('gh', '').replace('dh', '').", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    if len(s) == 0:\n        return []\n    result = []\n    for w in s:\n        if len(w) == n:\n            result.append(w)\n    return result\n\ninput_string = input(\"enter a string: \")\nword_list = select_words(input_string, int(input(\"enter a number:\")))\n\nfor w in word_list:\n    print(w)\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for w in s.split(\" \"):\n        if len(w) == n:\n            words.append(w)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        if len(filter(lambda x: x.lower() not in ['a','e','i','o','u'], word)) == n:\n            result.append(word)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == \"\":\n        return []\n    words = []\n    word = \"\"\n    for i in range(len(s)):\n        if s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            word += s[i]\n        else:\n            if len(word) == n:\n                words.append(word)\n                word = \"\"\n            else:\n                word += s[i]\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # code here\n    return []\n\nI wrote this code for the problem above. I think I'm getting a runtime error somewhere and I don't know how to fix it. Any help would be greatly appreciated. Thank you!\n\nA:\n\nThe main problem with your code is that you use return inside the loop. This will cause your program to return after the first iteration of the loop, so it will only return a single word (the first one) for the first two inputs. You could change the return to if x == s: break, but it would be better to use a while loop instead, since the return is not needed at all.\nIn addition, the problem also states that the input string contains only letters and spaces, and you are currently ignoring them. You can fix this by replacing s.count(x) with s.count(x) == 1.\nHere is the corrected code:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def word_in_string(s, word):\n        \"\"\"Returns True if word is present in string s, otherwise False\"\"\"\n        return any(s.lower().startswith(x.lower()) for x in word)\n\n    def get_words(s):\n        \"\"\"Returns a list of all words in string s\"\"\"\n        return re.findall(\"\\w+\", s.lower())\n\n    def consonant_count(word):\n        \"\"\"Returns the count of consonants in a word\"\"\"\n        return len([x for x in word if x in \"rtmnp\"])\n\n    return [x for x in get_words(s) if consonant_count(x) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    i = 0\n    while i < len(s):\n        if s[i]!='':\n            words.append(s[i])\n            j = i + 1\n            while j < len(s):\n                if s[j] =='' and j == i + 1:\n                    j += 1\n                    break\n                elif s[j] =='':\n                    j += 1\n                elif s[j] == s[i]:\n                    j += 1\n                else:\n                    words.append(s[i])\n                    i = j\n                    break\n        else:\n            i += 1\n    for w in words:\n        if len(w) == n:\n            yield w\n\nn = int(input())\nfor w in select_words(input(), n):\n    print(w)\n\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Count the number of consonants in the string\n    # as it is the main part of this task.\n    num_cons = 0\n    for ch in s:\n        if ch in \"BCDFGHJKLMNPQRSTVWXYZ\":\n            num_cons += 1\n\n    # Initialize the empty word list\n    word_list = []\n\n    # Loop through all possible combinations of consonants\n    # to generate all possible words with exactly n consonants.\n    for i in range(1, num_cons + 1):\n        for j in range(1, num_cons + 1):\n            if (i + j) == n:\n                word_list.append(''.join([s[k - 1] for k in range(i, i + j)]))\n\n    return word_list", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n\n    # loop over the characters in the string\n    for char in s:\n        if char.islower():\n            # if we are currently on a lowercase character, we keep moving\n            # to the next character while counting the number of consonants\n            count = 0\n            while char.islower():\n                count += 1\n                char = s[char.index(char) + 1]\n\n            # if the current character is a space and we are looking for only\n            # the last word in the string, then we return the result\n            if char == \" \" and s.index(char) == len(s) - 1:\n                result.append(s[s.index(char):])\n            # if the current character is a space and we are looking for more than\n            # one word in the string, we count the number of consonants and add\n            # it to the word list\n            elif char == \" \" and s.index(char) < len(s) - 1:\n                count += 1\n                result.append(s[s.index(char):])\n                result.append(s[s.index(char) + 1 : s.index(char) + count])\n            # otherwise we count the number of consonants and", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1] and s[i].lower() not in words and s[i].lower() not in'\":\n            words.append(s[i].lower())\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    import re\n    import string\n    if s == '': return []\n    words = re.findall(\"[\\w]+\", s.lower())\n    words = list(filter(lambda x: len(re.findall(\"[a-z]\",x))==n, words))\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Write your code here", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def find_consonants(s):\n        \"\"\"Returns a list of all consonants in a given string s.\"\"\"\n        return [c for c in s if c in 'bcdfghjklmnpqrstvwxz']\n    \n    def clean_str(s):\n        \"\"\"Returns a string with all non letter and non digit characters replaced with space.\"\"\"\n        return ''.join(c for c in s if c.isalnum())\n        \n    consonants = find_consonants(clean_str(s))\n    \n    if consonants is None:\n        return []\n    \n    words = []\n    i = 0\n    while i < len(s):\n        word = s[i:i + len(consonants)]\n        if not word or word[-1].isspace():\n            return []\n        words.append(word)\n        i += len(word)\n    return sorted(words, key=len)</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s: return []\n    if not n: return s\n    r = []\n    for w in s.split():\n        if len(w) >= n and not w.isdigit():\n            r.append(w)\n    return r", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == \"\":\n        return []\n    consonants = list('bcdfghjklmnpqrstvwxyz')\n    word_list = []\n    word = \"\"\n    for c in s:\n        if c not in consonants:\n            word = c + word\n        elif len(word) == n:\n            word_list.append(word)\n            word = \"\"\n    return word_list\n\ns = input()\nn = int(input())", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    if n > len(s):\n        return []\n    consonants = []\n    for letter in s:\n        if letter.islower():\n            consonants.append(letter.lower())\n    return [word for word in s.split() if len(set(consonants).intersection(set(word))) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for word in s.split():\n        if len(word) == n:\n            words.append(word)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # return the empty list if the string s is empty\n    if not s:\n        return []\n\n    # count the number of consonants in the string s\n    k = 0\n    for i in s.lower():\n        if i in \"bcdfghjklmnpqrstvwxyz\":\n            k += 1\n\n    # create a list of words from string s that contain exactly k consonants\n    result = []\n    for i in s.lower():\n        if i in \"bcdfghjklmnpqrstvwxyz\":\n            result.append(i)\n            if k == n:\n                break\n\n    return result\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    words = []\n    for word in s:\n        if word[0].isalpha():\n            words.append(word)\n\n    for word in words:\n        if len(word) > n:\n            word = word[:n]\n            if word not in result:\n                result.append(word)\n\n    if len(s) == 0:\n        return result\n    return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # you should not use any built-in library function\n    # to solve this task, you are only allowed to use the functions \n    # defined in the functors, strings and numbers modules\n    \n    # write a function to split the string into words \n    def split_string(s):\n        words = []\n        for word in s.split():\n            if word.isalpha():\n                words.append(word)\n        return words\n    \n    def get_words_count(words):\n        word_count = {}\n        for word in words:\n            if word in word_count:\n                word_count[word] += 1\n            else:\n                word_count[word] = 1\n        return word_count\n    \n    def get_count(word):\n        word = word.lower()\n        return sum(c.isalpha() for c in word)\n    \n    def get_consonants_count(word):\n        word = word.lower()\n        consonants = 0\n        for c in word:\n            if c.isalpha():\n                if c.lower() not in \"aeiouAEIOU\":\n                    consonants += 1\n        return consonants\n    \n    def has_n_consonants(word):\n        word = word.lower()\n        return get_consonants_count(word) == n\n    \n    def filter", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    n = n - 1\n    if n < 1:\n        return []\n    elif not s:\n        return []\n    else:\n        result = []\n        while s!= \"\":\n            words = s.split(' ')\n            for word in words:\n                if len(word) <= n:\n                    result.append(word)\n                elif len(word) == n + 1:\n                    result.append(word)\n                elif len(word) == n + 2:\n                    result.append(word)\n            s = s.replace(\" \", \"\")\n        return result\n\ns = input(\"Enter the string to parse: \")\nn = int(input(\"Enter the number of consonants: \"))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    word_list = []\n    s = s.lower()\n    for word in s.split():\n        if len(word) == n:\n            word_list.append(word)\n    return word_list", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            words.append(s[:i])\n            s = s[i+1:]\n        elif s[i] not in \"abcdefghijklmnopqrstuvwxyz\":\n            continue\n        else:\n            for j in range(i+1, len(s)):\n                if s[j] not in \"abcdefghijklmnopqrstuvwxyz\":\n                    break\n            words.append(s[:j] + s[j+1:])\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == \"\":\n        return []\n    ch, chs = list(s), []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            if len(chs) == n:\n                yield ''.join(chs)\n                chs = []\n        else:\n            chs.append(s[i])\n    if len(chs) == n:\n        yield ''.join(chs)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for i in range(len(s)):\n        if s[i].lower() in \"abcdefghijklmnopqrstuvwxyz\":\n            if s[i:i+2].lower() in \"abcdefghijklmnopqrstuvwxyz\":\n                if len(word) == n:\n                    words.append(word)\n                    word = \"\"\n                else:\n                    word += s[i]\n            else:\n                word += s[i]\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    import re\n    def search(s, n):\n        return re.findall(\"[\\w']*([{}]){,n}\".format('w' if n == 0 else '|', '|'.join(map(lambda x: '\\\\b' + x + '\\\\b', map(str.lower, 'abcdefghijklmnopqrstuvwxyz'))[::-1])), s)\n    return [s for s in search(s, n)]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def reverse_words(s):\n        \"\"\"This is a helper function that reverses a string and returns it \n        reversed: \n        For example: \n        reverse_words(\"Hello world\") ==> \"orldHello\"\n        \"\"\"\n        return s[::-1]\n        \n    def reverse_all_words(s):\n        \"\"\"This function returns a list of all the words in a string s. The list is \n        generated by reversing the string and splitting the result at the spaces:\n        For example: \n        reverse_all_words(\"Hello world\") ==> [\"orldHello\", \"orld\", \"hello\"]\n        \"\"\"\n        return s.split()[::-1]\n        \n    def get_words_with_n_consonants(s, n):\n        \"\"\"This function returns a list of all words from string s that contain \n        exactly n consonants, in order these words appear in the string s.\n        For example: \n        get_words_with_n_consonants(\"Hello world\", 3) ==> [\"world\", \"hello\"]\n        \"\"\"\n        return [i for i in reverse_all_words(s) if len(i) == n and i.count(c) == n for c in \"aeiouAEIOU\"]\n            \n    words = get_words_with", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.lower()\n    if s == \"\":\n        return []\n    else:\n        n = int(n)\n        if n < 1:\n            raise ValueError(\"n must be > 0\")\n        word_list = []\n        for word in s.split():\n            if len(word) <= n:\n                word_list.append(word)\n        return word_list\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def _is_all_letters(s):\n        for i in s:\n            if i not in 'abcdefghijklmnopqrstuvwxyz':\n                return False\n        return True\n\n    def _is_only_letters(s):\n        if not _is_all_letters(s):\n            return False\n        for i in s:\n            if i not in 'abcdefghijklmnopqrstuvwxyz':\n                return False\n        return True\n\n    def _count_consonants(s):\n        consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n        count = 0\n        for i in s:\n            if i in consonants:\n                count += 1\n        return count\n\n    def _select(s, n):\n        results = []\n        if not s:\n            return results\n        elif _count_consonants(s) == n:\n            results.append(s)\n        else:\n            for i in range(len(s)):\n                s0 = s[:i] + s[i", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    all_words = list(filter(lambda x: len(x) == 0 or x.isspace(), s.split()))\n    all_consonants = list(filter(lambda x: x.islower() and not x.isdigit(), s.lower()))\n    if n > len(all_words):\n        return []\n    return [x for x in all_words if len(filter(lambda x: x.lower() in all_consonants, x)) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def char_ord(c):\n        \"\"\"Given a char c, return its unicode ordinal value\"\"\"\n        return ord(c)\n    \n    def char_ord_hash(s):\n        \"\"\"Given a string s, returns a dict where key is the char ordinal value and the value \n        is the char\"\"\"\n        d = {}\n        for c in s:\n            d[char_ord(c)] = c\n        return d\n\n    def clean(s):\n        \"\"\"Given a string s, returns a list of chars of s without spaces\"\"\"\n        return [c for c in s if c not in \" \\n\\t\"]\n\n    def build_word_hash(s):\n        \"\"\"Given a string s, builds a hash dict where the key is a word and the value is the \n        count of the number of times that word occurs in s\"\"\"\n        d = {}\n        for word in clean(s):\n            d[word] = d.get(word, 0) + 1\n        return d\n\n    def find_consonants(s):\n        \"\"\"Given a string s, returns a list of consonants of s\"\"\"\n        l = []\n        for c in clean(s):\n            if char_ord(c) > char_ord(\"z\")", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Complete this function\n    return None", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    if s == \"\":\n        return []\n\n    new_string = \"\"\n    n = n-1\n    s = s.lower()\n    for letter in s:\n        if letter in \"aeiouAEIOU\":\n            new_string += letter\n        else:\n            if len(new_string) >= n:\n                yield new_string\n                new_string = \"\"\n            else:\n                new_string += letter\n    if len(new_string) > 0:\n        yield new_string\n\ns = input(\"Enter the string: \")\n\nfor i in select_words(s, int(input(\"Enter the letter count: \"))):\n    print(i)</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    if len(s) == 0:\n        return []\n    for word in s.split(\" \"):\n        if len(word) == 0:\n            continue\n        if len(set(word)) == 3:\n            words.append(word)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    elif n == 1:\n        return [s[i:i+2] for i in range(len(s)-1)]\n    else:\n        last_cons = \"\"\n        words = []\n        for i in range(len(s)-1):\n            if s[i] not in consonants:\n                last_cons += s[i]\n                if last_cons.count(s[i+1]) == n-1:\n                    last_cons += s[i+1]\n                    words.append(last_cons)\n        return words</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return([])", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = s.split()\n    if len(words) == 0:\n        return []\n    else:\n        consonants = []\n        for word in words:\n            if len(set(word) - set(' ')) == 3:\n                consonants.append(word)\n        return consonants\n\ns = input(\"Enter string:\")\nn = input(\"Enter number of consonants:\")", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def rec(s):\n        if s == \"\":\n            return []\n        if s[0] in [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \" \"] and len(s) >= 2:\n            for x in rec(s[1:]):\n                if x[-1] in [\"C\", \"G\", \"L\", \"R\", \"B\", \"D\"]:\n                    if len(x) == 2:\n                        return x + [s[0]]\n                    return x\n        elif s[0] in [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \" \"] and len(s) < 2:\n            return []\n        else:\n            return [s]\n\n    return [rec(x) for x in s.split()]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    \n    def split_at_whitespace(s):\n        return s.split(\" \")\n        \n    if len(s) == 0:\n        return []\n    \n    valid_words = []\n    for word in split_at_whitespace(s):\n        if len(select_consonants(word)) == n:\n            valid_words.append(word)\n    return valid_words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    elif n < len(s):\n        return []\n    else:\n        words = []\n        for w in s.split():\n            if len(w) == n and w.count(c) == n for c in 'BCDFGHJKLMNPQRSTVWXYZ':\n                words.append(w)\n        return words\n\ns = input(\"Enter the string: \")\nn = int(input(\"Enter the number of consonants in the word: \"))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    consonants = \" b d f g h j k l m n p q r s t v w x z\"\n    found = []\n    for i, c in enumerate(s):\n        if c.upper() not in consonants:\n            found.append(s[i:])\n            break\n    if found == []:\n        return []\n    words = found[:]\n    for w in words:\n        for i, c in enumerate(w):\n            if c.upper() not in consonants:\n                break\n        else:\n            found.append(w[i:])\n    return found\n        \n\nimport unittest\nimport sys\nsys.path.append(\"../\")\nimport test_helper", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    if not s or len(s) == 0:\n        return []\n    else:\n        return [w for w in s.split() if len([c for c in w if c in \"abcdefghijklmnopqrstuvwxyz\"]) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    import re\n\n    # split the string on space and remove empty elements\n    words = re.split(r'\\s', s.lower())\n    words = list(filter(lambda x: x, words))\n\n    # only keep words that have n consonants\n    words = [w for w in words if len(set(w) - set('vowels')) == n]\n\n    # sort the words by how frequent they are\n    words = sorted(words, key=len, reverse=True)\n\n    return words\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\nMy solution:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    word = \"\"\n    alist = []\n    for i in range(len(s)):\n        if s[i] =='':\n            word += s[i]\n            if len(word) == n:\n                alist.append(word)\n                word = \"\"\n            continue\n        if s[i] not in \"abcdefghijklmnopqrstuvwxyz\":\n            word += s[i]\n        elif i == len(s) - 1:\n            word += s[i]\n    if len(word) == n:\n        alist.append(word)\n    return alist</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    word = []\n    for i in range(len(s)):\n        if s[i] not in \" \":\n            word.append(s[i])\n    if len(word) > n:\n        return select_words(s[:n-1], n)\n    else:\n        return [word]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Recursion is ineffective, make a list of all consonants\n    all_cons = 'BCDFGHJKLMNPQRSTVXZ'\n    # Obtain all possible words\n    words = []\n    for w in s.lower().split():\n        if w == '':\n            continue\n        if w.count(' ') == 1:\n            # Get all possible word permutations\n            perm = list(itertools.permutations(w.lower().split()))\n            # Recursively get all words for each permutation\n            for p in perm:\n                words += select_words(\" \".join(p), n)\n        else:\n            # Only one word, make sure it has exactly n consonants\n            if len([char for char in w if char in all_cons]) == n:\n                words.append(w)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    \n    ans=[]\n    for i in range(len(s)-1):\n        if s[i].isalpha() and s[i+1].isalpha() and s[i+2].isalpha() and s[i+3].isalpha():\n            if s[i].islower() or s[i].isupper():\n                if s[i+1].islower() or s[i+1].isupper():\n                    if s[i+2].islower() or s[i+2].isupper():\n                        if s[i+3].islower() or s[i+3].isupper():\n                            ans.append(s[i]+s[i+1]+s[i+2]+s[i+3])\n                    \n    return ans", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return list() if not s else s.split() if n < 0 else [word for word in s.split() if len(word) == n and word.lower().replace(\" \", \"\").isalpha()]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    import string\n    def has_consonants(w):\n        \"\"\"Returns true if the word w contains at least 1 consonant.\"\"\"\n        return any(c in string.ascii_letters and c not in string.ascii_uppercase for c in w)\n    def has_n_consonants(w, n):\n        \"\"\"Returns true if the word w contains exactly n consonants.\"\"\"\n        return sum(1 for c in w if c not in string.ascii_uppercase) == n\n    if s == \"\":\n        return []\n    return [w for w in s.split() if has_consonants(w) and has_n_consonants(w, n)]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    if not s:\n        return []\n\n    n = len(s)\n\n    words = []\n    if n == 1:\n        words = [s]\n    elif n == 2:\n        words = [s] + list(set(s.split()) - set(\" \"))\n    elif n == 3:\n        words = [s] + list(set(s.split()) - set(\" \")) + [s[0]]\n        for i in range(1, len(s)):\n            words += [s[i], s[0:i]+s[i+1]]\n    elif n == 4:\n        words = [s] + list(set(s.split()) - set(\" \")) + [s[0]] + list(s.replace(s[0], \" \").split())\n        for i in range(1, len(s)):\n            words += [s[i], s[0:i]+s[i+1]]\n\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Get a list of all letters\n    all_letters = list(s)\n    # Generate all possible words from the letters\n    words = [\"\".join(letter) for letter in itertools.product(all_letters, repeat=n)]\n    # Get all letters in each word, in order\n    word_letters = [letter for word in words for letter in word]\n    # Sort the letters and words by the number of consonants\n    word_letters = sorted(word_letters, key=lambda x: len([x for x in x if x in \"cdfgptsz\"]))\n    words = sorted(words, key=lambda x: len([x for x in x if x in \"cdfgptsz\"]))\n    return [word for word in words if word_letters == [\"\".join(letter) for letter in word]]\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    l = []\n    if len(s) == 0:\n        return l\n    elif len(s) == 1:\n        for i in range(len(s)):\n            if s[i] not in l:\n                l.append(s[i])\n    else:\n        for i in range(len(s)):\n            if s[i] not in l:\n                l.append(s[i])\n        for i in range(len(s)):\n            for j in range(i+1,len(s)):\n                if s[j] not in l:\n                    l.append(s[j])\n        for i in range(len(s)):\n            for j in range(i+1,len(s)):\n                for k in range(j+1,len(s)):\n                    if s[k] not in l:\n                        l.append(s[k])\n    if n > len(l):\n        print(\"error. n is greater than list length\")\n    return l</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    s = s.lower()\n    if not isinstance(n, int) or n < 0:\n        raise ValueError\n    word_list = []\n    if n == 0:\n        return [s[0]]\n    for i in range(len(s) - n + 1):\n        word_list.append(s[:n+i].lower())\n    return word_list", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == \"\":\n        return []\n    words = s.split()\n    r = []\n    for word in words:\n        for i in range(len(word)):\n            if word[i].isupper():\n                if word[i:i+1].isalpha():\n                    r.append(word)\n                    break\n    r.sort()\n    return r", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    list_of_cons = []\n    for x in range(len(s)):\n        if s[x].islower():\n            list_of_cons.append(s)\n    return [x.lower() for x in list_of_cons if len(x) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    import re\n    words = re.findall(\"\\w+\", s.lower())\n    result = [word for word in words if len(word) == n and word.count('b') == 0 and word.count('d') == 0 and word.count('g') == 0 and word.count('j') == 0 and word.count('k') == 0 and word.count('l') == 0 and word.count('m') == 0 and word.count('n') == 0 and word.count('p') == 0 and word.count('q') == 0 and word.count('r') == 0 and word.count('s') == 0 and word.count('t') == 0 and word.count('v') == 0 and word.count('w') == 0 and word.count('x') == 0 and word.count('y') == 0 and word.count('z') == 0 and word.count(' ') == n]\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    res = []\n    for i in s:\n        if i.isalpha():\n            res.append(i)\n    return [i for i in res if i.isalpha() and len([i for i in res if i == i and i.isalpha()]) == n]\n\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    \n    # write your code here\n    print(s)\n    consonants = [\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"r\",\"s\",\"t\",\"v\",\"w\",\"z\",\"z\"]\n    for letter in s:\n        if letter not in consonants:\n            print(s, letter)\n            return consonants\n        else:\n            print(s, letter)\n            \n    return consonants\n    </s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def is_consonant(c):\n        \"\"\"Return True if c is a consonant, otherwise return False.\"\"\"\n        return c in \"aeiou\"\n    \n    result = []\n    word = \"\"\n    for c in s:\n        if c in \"aeiou\":\n            if word:\n                if is_consonant(word[-1]):\n                    word += c\n                else:\n                    result.append(word)\n                    word = \"\"\n            else:\n                word += c\n        else:\n            word += c\n    if word:\n        result.append(word)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def select(s,n):\n        words=[]\n        for i in s:\n            if i==\" \" or i==\".\":\n                continue\n            else:\n                words.append(i)\n        count=0\n        for word in words:\n            if n-count==0:\n                words.append(word)\n                count+=1\n        return words\n    return select(s,n)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    res = []\n    if len(s) == 0:\n        return res\n    for i in range(len(s)):\n        if s[i] not in [' ', \"'\", '\"', '\\'', ',', ';', '.', ':', '-', '(', ')']:\n            break\n    else:\n        if s[i] not in [' ', \"'\", '\"', '\\'', ',', ';', '.', ':', '-', '(', ')']:\n            res.append(s[i])\n        if len(s) - i < n:\n            return res\n        for j in range(i + 1, len(s)):\n            if s[j] not in [' ', \"'\", '\"', '\\'', ',', ';', '.', ':', '-', '(', ')']:\n                res.append(s[j - i + 1:j])\n    return res", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if n == 0:\n        return []\n    # print(s.replace(' ', '').replace('.', '').replace(',', '').replace(':', '').replace(';', '').replace('?', '').replace('!', '').replace('(', '').replace(')', '').replace('\"', '').replace(\"'\", '').replace('/', ''))\n    if s == '':\n        return []\n    words = []\n    for char in s.split():\n        if char.lower() in 'abdefghiklmnopqrstuvwxyz' and len(char) > 0:\n            words.append(char)\n    return [word for word in words if len(word) == n and len(set(word)) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def is_consonant(char):\n        if char.isalpha():\n            if char.isupper():\n                return char == char.lower()\n            else:\n                return char in 'bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ'\n        else:\n            return False\n\n    return [word for word in s.split() if len([c for c in word if is_consonant(c)]) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for x in s:\n        if x in \"abcdefghijklmnopqrstuvwxyz\":\n            x = x.lower()\n        if len(x) > 1 and x[0]!= x[-1] and not x.isalpha():\n            words.append(x)\n    return [word for word in words if len(set(word)) == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    l = []\n    c = s[0]\n    for i in range(0, len(s)):\n        if s[i]!= \" \" and s[i]!= c:\n            if s[i]!= c and (i + 1) < len(s) and s[i+1] == c:\n                l.append(s[i])\n                c = s[i]\n                i += 1\n            elif s[i] == c and (i + 1) < len(s) and s[i+1]!= c:\n                l.append(s[i])\n                c = s[i+1]\n                i += 1\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for word in s.split():\n        if word.count(\" \") == 0:\n            word = word.upper()\n            num_consonants = 0\n            for letter in word:\n                if letter.isupper():\n                    num_consonants += 1\n            if num_consonants == n:\n                words.append(word)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    #solve this one", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = s.split()\n    \n    def letter_count(w):\n        return len(set(w))\n    def remove_consonants(w):\n        return \"\".join([x for x in w if x.lower() not in 'bcdfghjklmnpqrstvwxyz'])\n    \n    word_count = {word: letter_count(remove_consonants(word)) for word in words}\n    return [word for word, count in word_count.items() if count == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i].islower() and s[i+1].isupper():\n            if len(s[i:i+2]) == 2:\n                if len(s[i:i+2]) == 2:\n                    words.append(s[i:i+2])\n    if len(s) < n:\n        return words\n    else:\n        for i in range(len(s)):\n            if s[i].islower() and s[i+1].isupper():\n                if len(s[i:i+2]) == 2:\n                    if len(s[i:i+2]) < n:\n                        words.append(s[i:i+2])\n    return words\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n\n    # Use regex to find all words\n    words = re.findall(r'\\w+', s)\n\n    # Use itertools.groupby to group all the words\n    grouped = [(w, list(g)) for w, g in itertools.groupby(words)]\n\n    # Use regex to count the consonants in the word and\n    # subtract the vowels from the number of letters in the word\n    # to get the number of consonants\n    def count_consonants(w):\n        vowels = 'aeiouy'\n        return len([ch for ch in w if ch not in vowels])\n\n    # use map to collect the words that have the correct number of consonants\n    return [g[0] for g in grouped if count_consonants(g[0]) == n]\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    results = []\n    for word in s.split():\n        if len(set(word) & set(c for c in s if c.isupper())) == n:\n            results.append(word)\n    return results", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def select_words_helper(s, n):\n        word = \"\"\n        result = []\n        for i, letter in enumerate(s):\n            if letter == \" \":\n                if len(word) == n:\n                    result.append(word.strip())\n                word = \"\"\n            elif letter == consonant:\n                word += letter\n            else:\n                word += letter\n                if len(word) == n:\n                    result.append(word.strip())\n        return result\n\n    return select_words_helper(s, n)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        if len(set(word) & set(\"bcdfghjklmnpqrstvwxz\")) == n:\n            result.append(word)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = s.split()\n    res = []\n    for word in words:\n        if len(set(word)) == n:\n            res.append(word)\n    return res\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s: return []\n    w = []\n    for i in range(len(s)):\n        if s[i] not in \"aeiouAEIOU\":\n            for j in range(i+1, len(s)):\n                if s[j] not in \"aeiouAEIOU\":\n                    if s[i] == s[j]:\n                        for k in range(j+1, len(s)):\n                            if s[k] not in \"aeiouAEIOU\":\n                                w.append(s[i]+s[j]+s[k])\n        else:\n            for j in range(i+1, len(s)):\n                if s[j] not in \"aeiouAEIOU\":\n                    w.append(s[i]+s[j])\n    return w\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\nThis was my first solution. It works fine for the given test cases, but I think there is a better way to do this.", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for word in s.split():\n        if len(set(word)) == 3:\n            words.append(word)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i].isalpha() and s[i-1].isalpha() and not s[i+1].isalpha() and not s[i+2].isalpha():\n            word = s[i:i+3]\n            if len(word) == n:\n                words.append(word)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\nThis is the function I came up with:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    if s[0].isupper():\n        words.append(s[:1])\n        s = s[1:]\n    if s[-1].isupper():\n        words.append(s[-1:])\n    for i in range(len(s)):\n        if s[i].isupper():\n            word = s[:i]\n            if len(word) == n:\n                if i == len(s) - 1:\n                    words.append(word)\n                else:\n                    words.append(word + s[i + 1:])\n            s = s[i + 1:]\n    return words</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    #TODO: implement your function here\n    pass</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    words = [w for w in s.split() if len(w)==n]\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    consonants = {\"b\":\"v\", \"d\":\"t\", \"f\":\"v\", \"g\":\"k\", \"h\":\"v\", \"j\":\"x\", \"k\":\"x\", \"l\":\"v\", \"m\":\"n\", \"n\":\"m\", \"p\":\"b\", \"q\":\"x\", \"r\":\"d\", \"s\":\"s\", \"t\":\"d\", \"v\":\"f\", \"w\":\"w\", \"x\":\"j\", \"y\":\"j\", \"z\":\"z\"}\n    if s == \"\":\n        return []\n    result = []\n    count = 0\n    for i in s.split():\n        if consonants.get(i) == None:\n            result.append(i)\n        else:\n            count += 1\n    if count == n:\n        result.append(s)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    import re\n    import itertools\n\n    def get_consonant_count(word):\n        \"\"\"A function that returns the number of consonants in a given word.\"\"\"\n        return sum(1 for c in word if c.lower() in \"bcdfghjklmnpqrstvwxyz\")\n\n    def get_n_consonant_words(word, n):\n        \"\"\"A function that returns all words from the word string with the given\n        number of consonants.\"\"\"\n        return filter(lambda w: get_consonant_count(w) == n, word.split())\n\n    if not s:\n        return []\n\n    else:\n        word = ''\n        consonants = 0\n\n        for c in s:\n            if c.lower() in \"bcdfghjklmnpqrstvwxyz\":\n                consonants += 1\n\n            if consonants == n:\n                word += c\n\n            elif consonants == n + 1:\n                word +='' + c\n\n            elif consonants > n + 1:\n                break\n\n        if not word:\n            return []\n\n        return get_n_consonant_words(word, n)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def count_consonants(word):\n        consonants = 0\n        for c in word:\n            if c in consonants_chars:\n                consonants += 1\n        return consonants\n    consonants_chars = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    if n > len(s) or n <= 0:\n        return []\n    result = []\n    for word in s.split():\n        if count_consonants(word) == n:\n            result.append(word)\n    return result</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Write your code here\n    if s == \"\":\n        return []\n    words = s.split(\" \")\n    res = []\n    for word in words:\n        if len(set(word)) == n:\n            res.append(word)\n    return res", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    res = []\n    if len(s) == 0:\n        return res\n    else:\n        for i, c in enumerate(s):\n            if c =='':\n                if i+1!= len(s):\n                    if s[i+1] =='' or s[i+1] in consonants:\n                        res.append(s[1:i])\n                        res.append(s[i+1:])\n            elif c in consonants:\n                res.append(s[1:i])\n                res.append(s[i+1:])\n    return res", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result=[]\n    for i in range(len(s) - n + 1):\n        for j in range(n):\n            if s[i+j][1:] not in '0123456789':\n                result.append(s[i+j][1:])\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    # This is what I have so far\n    def select_word(s):\n        results = []\n        if len(s) == 0:\n            return results\n        if s[0] in \"abcdefghijklmnopqrstuvwxyz\":\n            results.append(s)\n        for i in range(len(s) - 1):\n            if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n                results.append(s[i] + s[i+1])\n        if s[-1] in \"abcdefghijklmnopqrstuvwxyz\":\n            results.append(s[-1])\n        return results\n    s = input(\"Enter string: \")\n    n = int(input(\"Enter consonants: \"))\n    words = select_word(s)\n    if len(s) == 0:\n        return []\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # function(s,n) -> result\n    result = []\n    for x in s.split():\n        if len(x) < n:\n            result.append(x)\n        elif len(x) == n:\n            result.append(x)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def select_words_recursive(s, n, r=[]):\n        if len(s) <= 1:\n            return r\n        if s[0].isupper():\n            return select_words_recursive(s[1:], n, r)\n        if n == 0:\n            return r\n        if s[0].islower():\n            return select_words_recursive(s[1:], n - 1, r + [s[0]])\n        if n == 1:\n            return select_words_recursive(s[1:], n, r + [s[0]])\n        if s[-1].isupper():\n            return select_words_recursive(s[:-1], n, r)\n        if n == 2:\n            return select_words_recursive(s[:-1], n, r + [s[0]])\n        if s[-1].islower():\n            return select_words_recursive(s[:-1], n - 1, r + [s[0]])\n        if n > 2:\n            return select_words_recursive(s[:-1], n, r + [s[0]])\n\n    return list(map(str, select_words_recursive(s, n)))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == \"\":\n        return []\n    else:\n        words = []\n        for i in range(len(s)):\n            if s[i].isalpha():\n                if i == 0:\n                    pass\n                elif s[i - 1].isalpha() and not s[i - 1].isspace():\n                    if s[i].isupper() and not s[i] == \" \":\n                        words.append(s[1:i] + \" \" + s[i:])\n                elif s[i - 1].isalpha() and s[i - 1].isspace():\n                    if s[i].isupper() and not s[i] == \" \":\n                        words.append(s[1:i] + \" \" + s[i:])\n                else:\n                    words.append(s[1:i] + \" \" + s[i:])\n            else:\n                words.append(s[1:i] + \" \" + s[i:])\n        return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    else:\n        ret = []\n        i = 0\n        while i < len(s):\n            while i < len(s) and s[i]!= \" \" and s[i]!= \",\" and s[i]!= \"?\" and s[i]!= \"!\":\n                if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n                    ret.append(s[i])\n                i += 1\n            if s[i] == \" \":\n                i += 1\n        return ret", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    res = []\n    for i in range(len(s) - n):\n        cur = s[:i] + s[i + n:]\n        if all(x.isalpha() for x in cur):\n            res.append(s[i:i + n])\n    return res", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result=[]\n    if s == \"\":\n        return result\n    consonants = {\"b\": True, \"c\": True, \"d\": True, \"f\": True, \"g\": True, \"h\": True, \"j\": True, \"k\": True, \"l\": True, \"m\": True, \"n\": True, \"p\": True, \"q\": True, \"r\": True, \"s\": True, \"t\": True, \"v\": True, \"w\": True, \"x\": True, \"y\": True, \"z\": True}\n    for word in s.split():\n        if len(word) <= n:\n            result.append(word)\n        for char in word:\n            if char not in consonants:\n                consonants[char] = False\n    for c in consonants:\n        if consonants[c]:\n            result.append(c)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    c = 0\n    for word in s.split():\n        if c > len(word) - n:\n            break\n        c += len(word) - len(word.lower())\n        words.append(word)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # brute force\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    if not n:\n        return [s]\n    words = []\n    for i in range(len(s) - n + 1):\n        words += [s[i:i + n]]\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # Sorted alphabet with consonants only\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n\n    if s == \"\":\n        return []\n\n    w = ''\n\n    for c in consonants:\n        if s.count(c) == n:\n            w += c\n            w +=''\n            s = s.replace(c, '')\n\n    if w.count(' ') == 0:\n        return [w]\n    else:\n        return select_words(s, n) + select_words(w, n)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def has_consonants(word):\n        \"\"\"Given a word w, this function will return True if and only if the word \n        w contains exactly n consonants.\n        \"\"\"\n        consonants = set('bcdfghjklmnpqrstvwxyz')\n        return len(word.lower().split('')[::-1]) - consonants.intersection(word.lower().split('')[::-1]) == n\n\n    return [word for word in s.split() if has_consonants(word)]</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Write your code here\n    \"\"\"\n    You may use str.split() and str.join() to achieve the result but \n    please do not use any builtin methods.\n    \"\"\"\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    if not s:\n        return result\n\n    def is_consonant(letter):\n        \"\"\"Given a letter from string s, returns a bool indicating if the letter is \n        a consonant or not.\n        \"\"\"\n        if letter in \"aeiouAEIOU\":\n            return False\n        elif letter in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\":\n            return True\n        else:\n            return False\n\n    for w in s.split():\n        if len(w) == len(set(c for c in w if is_consonant(c))):\n            result.append(w)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    else:\n        words = []\n        for word in s.split():\n            if word.count(\"c\") == n:\n                words.append(word)\n        return words\n\ns = input(\"Enter string: \")\nn = int(input(\"Enter word length: \"))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    import re\n    def count_consonants(word):\n        count = 0\n        for letter in word:\n            if letter in \"aeiouy\":\n                continue\n            elif letter in \"bcdfghjklmnpqrstvwxyz\":\n                count += 1\n        return count\n\n    def is_consonant(word):\n        for letter in word:\n            if letter in \"aeiouy\":\n                continue\n            elif letter in \"bcdfghjklmnpqrstvwxyz\":\n                return True\n        return False\n\n    def is_word(word):\n        if re.search(r\"[^a-zA-Z]\", word):\n            return False\n        if not word:\n            return False\n        if len(word) == 0:\n            return False\n        return True\n\n    def words_with_n_consonants(n):\n        result = []\n        for i in range(len(s)):\n            word = s[0:i + 1]\n            if count_consonants(word) == n:\n                if is_word(word):\n                    result.append(word)\n        return result\n\n    return words_with_n_consonants(n)\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def search(w, n):\n        i = 0\n        while i < len(w) and len(w) - i > n:\n            if w[i] in 'BCDFGJKLMPTVWXZ':\n                return False\n            i += 1\n        return True\n\n    def select(s):\n        if not s:\n            return []\n        return [w for w in s.split() if search(w, n)]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def get_words(s):\n        l = []\n        for i in range(len(s)):\n            l.append(s[i])\n        return l\n\n    res = []\n\n    for i in get_words(s):\n        if len(res) == n:\n            break\n        if i not in res and len(res) < n:\n            res.append(i)\n\n    return res", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    list_of_words = []\n    i = 0\n    while i < len(s):\n        if s[i] == \" \":\n            if len(s) > i + 1:\n                if s[i + 1] == \" \" and i + 2 < len(s):\n                    if s[i + 2] == \" \":\n                        if len(s) > i + 3:\n                            if s[i + 3]!= \" \":\n                                if len(s) > i + 4:\n                                    if s[i + 4]!= \" \":\n                                        if len(s) > i + 5:\n                                            if s[i + 5]!= \" \":\n                                                if len(s) > i + 6:\n                                                    if s[i + 6]!= \" \":\n                                                        if len(s) > i + 7:\n                                                            if s[i + 7]!= \" \":\n                                                                list_of_words.append(s[i:i + 7])\n                                                                i = i + 7\n                                                            else:\n                                                        i = i + 6\n                                                        while s[i + 7] == \" \":\n                                                            i = i + 7\n                                                        list_of_words.append(s[i:i + 7])\n                                                            i = i + 7\n                                                        while s[i + 7]!= \" \":\n                                                            i = i + 7\n                                                            list_of_words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.lower()\n    words = [''.join(i) for i in zip(*[iter(s)]*2)]\n    word_set = set(words)\n    return [i for i in word_set if len(set(i)) == n]\n\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\nfrom collections import Counter", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def get_consonants(s):\n        \"\"\"Returns the list of all consonants from string s\"\"\"\n        consonants = [\"c\",\"c\",\"k\",\"k\",\"s\",\"z\",\"b\",\"b\",\"d\",\"d\",\"f\",\"f\",\"g\",\"v\",\"v\",\"h\",\"j\",\"j\",\"l\",\"m\",\"n\",\"ng\",\"p\",\"ph\",\"r\",\"r\",\"s\",\"sh\",\"x\",\"ch\",\"wh\",\"y\",\"q\",\"kw\",\"w\",\"zz\",\"r\",\"r\"]\n        return consonants\n    if not s:\n        return []\n    # Remove all spaces and split the string into list of words\n    words = s.replace(\" \", \"\").split(\" \")\n    # Create a list to store words that contain n consonants\n    # The list will be sorted in the order the words appear in the string s\n    result = []\n    # For each word in the list of words\n    for word in words:\n        # Calculate how many consonants are in the word\n        consonants_count =", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for w in s.split():\n        if len(w) >= n:\n            result.append(w)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def get_words(s):\n        word_list = []\n        for i in s:\n            if i == \" \":\n                word_list.append(\"\")\n            else:\n                word_list[-1] += i\n        return word_list\n    word_list = get_words(s)\n    results = []\n    for i in word_list:\n        if len(i) == n:\n            results.append(i)\n    return results</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def find_consonants(s):\n        res = []\n        for i in range(len(s)):\n            if s[i] in 'bcdfghjklmnpqrstvwxyz':\n                res.append(s[i])\n        return res\n    \n    res = []\n    if len(s) == 0:\n        return res\n    for word in s.split():\n        if len(find_consonants(word)) == n:\n            res.append(word)\n    return res\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    import string\n    words = s.split()\n    consonants = string.ascii_lowercase[26:]\n    words = [w for w in words if any(consonant in w for consonant in consonants)]\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # Note: This code is taken from here (https://www.hackerrank.com/challenges/select-words/problem)\n    # and the provided solution is accepted by Hackerrank (at the time of writing this challenge\n    # the solution was accepted in 5ms, on the Hackerrank site it is marked as \"Accepted in 31ms\").\n\n    # Definitions\n    # https://en.wikipedia.org/wiki/Word\n    # https://en.wikipedia.org/wiki/Alphabet\n    # https://en.wikipedia.org/wiki/Consonant\n    # https://en.wikipedia.org/wiki/Vowel\n    # https://en.wikipedia.org/wiki/Merge_sort\n    # https://en.wikipedia.org/wiki/Heap_(data_structure)\n    # https://en.wikipedia.org/wiki/Roaring_algorithm\n    # https://en.wikipedia.org/wiki/Trie\n\n    def is_vowel(char):\n        \"\"\"Return True if given character is a vowel, otherwise False.\"\"\"\n        return char in ['a', 'e', 'i', 'o', 'u']\n\n    def is_letter(char):\n        \"\"\"Return True if given character is a letter, otherwise False.\"\"\"\n        return char in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    if s == \"\":\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    res = []\n    for word in s.split():\n        if len(word) == 0:\n            continue\n        if len(word) >= n:\n            res.append(word)\n    return res", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    if s == \"\":\n        return result\n    elif len(s) > 0:\n        for word in s.split():\n            if len(word) > 0:\n                if len(word) == n:\n                    result.append(word)\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    assert n >= 0\n    if not s:\n        return []\n    if n == 0:\n        return ['']\n    else:\n        ret = []\n        for w in s.split():\n            if len(w) < n:\n                ret.append(w)\n            else:\n                for c in w[-n:].lower():\n                    if c not in 'aeiou':\n                        ret.append(w[:-(n + 1)] + c)\n        return ret\n</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def helper(s, n):\n        if s == '': return []\n        w = s.split(' ')\n        a = []\n        for i in w:\n            if len(i) == n: a.append(i)\n        return a\n    return helper(s, n)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    if len(s) == 0:\n        return []\n    for i in range(len(s)):\n        if s[i].isalpha() and i+1 <= len(s) and not s[i+1].isalpha():\n            words.append(s[i])\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return list(filter(lambda x: len(filter(lambda y: y not in \"cs\", x)) == n, s))"]]