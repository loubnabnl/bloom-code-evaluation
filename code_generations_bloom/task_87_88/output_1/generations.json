[["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if not lst[0][-1]:\n        return []\n    if not lst[0][-1][0]:\n        return []\n    if not lst[0][-1][0][0]:\n        return []\n    if not lst[0][-1][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][1]:\n        return []\n    if not lst[0][-1][0][0][0][1][0]:\n        return []\n    if not lst[0][-1][0][0][0][1][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][1][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][1][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][1][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][1][0][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][1][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][1][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][1][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][1][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][1][0][0][0][0][0][0][0][0][0][0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst[0]) - 1:\n        return [(1, 0)]\n    if x == len(lst[0]) - 2:\n        return [(1, 1)]\n    if x == len(lst[0]) - 3:\n        return [(1, 2)]\n    if x == len(lst[0]) - 4:\n        return [(1, 3)]\n    if x == len(lst[0]) - 5:\n        return [(1, 4)]\n    if x == len(lst[0]) - 6:\n        return [(1, 5)]\n    if x == len(lst[0]) - 7:\n        return [(1, 6)]\n    if x == len(lst[0]) - 8:\n        return [(1, 7)]\n    if x == len(lst[0]) - 9:\n        return [(1", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    res = []\n    for i in range(len(lst)):\n        res.append((i, lst[i][x]))\n    res.sort(key=lambda x: x[0])\n    for i in range(len(lst)):\n        res.sort(key=lambda x: x[1], reverse=True)\n    return res", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, len(lst[0]) - 1)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst must be a list of lists\")\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    if x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    result = []\n    for i in range(len(lst)):\n        if x < len(lst[i]):\n            result.append((i, x))\n            x -= len(lst[i])\n    for i in range(len(lst)):\n        if x < len(lst[i]):\n            result.append((i, x))\n            x -= len(lst[i])\n    result.sort(key=lambda x: x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Input must be a list of list of integers')\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError('Input must be a list of list of list of integers')\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0][0],", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == x:\n        return [(0, 0)]\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == x:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if len(lst) == 1:\n        return []\n    if len(lst[0]) == 1:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return []\n    if len(lst[0]) == 1:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return []\n    if len(lst[0]) == 1:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return []\n    if len(lst[0]) == 1:\n        return []\n    if len(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Input must be a list of list of integers')\n    if x < 0 or x >= len(lst):\n        return []\n    if x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, x)]\n    if len(lst[0]) == 1:\n        return [(x, 0)]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst[0]) - 1:\n        return [(len(lst) - 1, 0)]\n    if x == len(lst[0]) - 2:\n        return [(len(lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 2:\n        return [(0, 0), (1, len(lst[1]))]\n    row = []\n    for i in range(len(lst)):\n        if x < len(lst[i]):\n            row.append((i, x))\n            x -= len(lst[i])\n    row.sort(key=lambda x: x[1])\n    return [(i, x) for i, x in row]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if x not in lst:\n        return []\n    rows = []\n    for i in lst:\n        if i:\n            rows.append(get_row(i, x))\n    rows.sort(key=lambda x: x[0])\n    return [(r, c) for r, c in rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if x < 0 or x >= len(lst):\n        return []\n    if len(lst[x]) == 0:\n        return []\n    if len(lst[x]) == 1:\n        return [(x, 0)]\n    if len(lst[x]) == 2:\n        return [(x, 0), (x, 1)]\n    if len(lst[x]) == 3:\n        return [(x, 0), (x, 1), (x, 2)]\n    if len(lst[x]) == 4:\n        return [(x, 0), (x, 1), (x, 2), (x, 3)]\n    if len(lst[x]) == 5:\n        return [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4)]\n    if len(lst[x]) == 6:\n        return [(x, 0), (x, 1), (x, 2", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if x < 0 or x >= len(lst):\n        return []\n    if x >= len(lst[0]):\n        return []\n    row = []\n    for i in range(len(lst)):\n        if x < len(lst[i]):\n            row.append((i, x))\n            break\n    for i in range(len(lst)):\n        if x >= len(lst[i]):\n            row.append((i, x))\n            break\n    return sorted(row, key=lambda x: x[0])", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Expected list, got {}'.format(type(lst)))\n    if not isinstance(x, int):\n        raise TypeError('Expected int, got {}'.format(type(x)))\n    if not isinstance(lst[0], list):\n        raise TypeError('Expected list, got {}'.format(type(lst[0])))\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Expected int, got {}'.format(type(lst[0][0])))\n    if not isinstance(lst[0][-1], int):\n        raise TypeError('Expected int, got {}'.format(type(lst[0][-1])))\n    if not isinstance(lst[-1], list):\n        raise TypeError('Expected list, got {}'.format(type(lst[-1])))\n    if not isinstance(lst[-1][0], int):\n        raise TypeError('Expected int, got {}'.format(type(lst[-1][0])))\n    if not isinstance(lst[-1][-1], int):\n        raise TypeError('Expected int, got {}'.format(type(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst must be a list of lists\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of integers\")\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0][0]) == 0:\n        return []\n    if len(lst[0][0][0]) == 0:\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if x < 0 or x >= len(lst[0][0]):\n        return []\n    if x < 0 or x >= len(lst[0][0][0]):\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if x < 0 or x >= len(lst):\n        return []\n    if x >= len(lst[0]):\n        return []\n    return [(i, j) for i, row in enumerate(lst) for j, x in enumerate(row) if x == x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if not isinstance(lst[0][-1], int):\n        raise TypeError(\"lst[0][-1] must be an integer\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"lst[-1][0] must be an integer\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"lst[-1][0] must be an integer\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"lst[-1][0] must be an integer\")\n    if not isinstance(lst[-1][0], int)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if x not in lst:\n        return []\n    result = []\n    for row in lst:\n        for i in range(len(row)):\n            if row[i] == x:\n                result.append((i, len(row) - i - 1))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1])\n    return result", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst[0]) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst[0]) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst[0]) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst) == 5:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    if len(lst[0]) == 5:\n        return [", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('get_row: lst must be a list')\n    if not isinstance(x, int):\n        raise TypeError('get_row: x must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('get_row: lst must be a list of lists')\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    if x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    return [(x, y) for y in range(len(lst[0])) for x in range(len(lst)) if lst[x][y] == x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if len(lst) == 0:\n        return []\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, x)]\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, x)]\n    row = []\n    for i in range(len(lst)):\n        if lst[i][x]!= 0:\n            row.append((i, x))\n    row.sort(key=lambda x: x[0])\n    row.sort(key=lambda x: x[1])\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    result = []\n    for i in range(len(lst)):\n        if x < len(lst[i]):\n            result.append((i, x))\n            x -= 1\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst) == 5:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    if len(lst) == 6:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]\n    if len(lst) == 7:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]\n    if len(lst) == 8:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0][0], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst[0]) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst[0]) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst[0]) == 4:\n        return [(0, 0), (1, 0), (2,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if not isinstance(lst[0][-1], int):\n        raise TypeError(\"lst[0][-1] must be an integer\")\n    if not isinstance(lst[-1], list):\n        raise TypeError(\"lst[-1] must be a list\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"lst[-1][0] must be an integer\")\n    if not isinstance(lst[-1][-1], int):\n        raise TypeError(\"lst[-1][-1] must be an integer\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if not isinstance(lst[0][-1], int):\n        raise TypeError(\"lst[0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if not isinstance(lst[0][-1], int):\n        raise TypeError(\"lst[0][-1] must be an integer\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"lst[-1][0] must be an integer\")\n    if not isinstance(lst[-1][1], int):\n        raise TypeError(\"lst[-1][1] must be an integer\")\n    if not isinstance(lst[-1][-1], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst[0]) - 1:\n        return [(0, 0), (1, 0)]\n    if x == len(lst[0]) - 1:\n        return [(0, 0), (1, 0)]\n    if x == len(lst[0]) - 1:\n        return [(0, 0), (1, 0)]\n    if x == len(lst[0]) - 1:\n        return [(0, 0), (1, 0)]\n    if x == len(lst[0]) - 1:\n        return [(0, 0), (1, 0)]\n    if x == len(lst[0])", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if not lst[0][x]:\n        return []\n    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[0])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    res.sort(key=lambda x: x[0])\n    res.sort(key=lambda x: x[1], reverse=True)\n    return res", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    row = []\n    for i in lst:\n        if i:\n            row.append(i.index(x))\n    row.sort(key=lambda x: x[0])\n    for i in row:\n        i.sort(key=lambda x: x[1])\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if len(lst)!= len(lst[0]):\n        raise TypeError(\"lst must be a list of lists\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0] must be a list of integers\")\n    if x < 0 or x > len(lst):\n        raise ValueError(\"x must be in range\")\n    if x < 0:\n        x = len(lst) - x\n    row = []\n    for i in range(len(lst)):\n        if lst[i][x] == 0:\n            row.append((i, x))\n    row.sort(key=lambda x: x[0])\n    for i in row:\n        row[i] = (row[i][0], len(lst) - row[i][1])\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if not lst[0][x]:\n        return []\n    return [(i, j) for i, row in enumerate(lst) for j, item in enumerate(row) if item == x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    if x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 1)]\n    if len(lst[0]) == 2:\n        return [(0, 0), (1, 1)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 1), (2, 2)]\n    if len(lst[0]) == 3:\n        return [(0, 0), (", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if x not in lst:\n        return []\n    row = []\n    for i in range(len(lst)):\n        if lst[i]:\n            row.append((i, len(lst[i]) - 1))\n    row.sort(key=lambda x: x[0])\n    for i in range(len(row)):\n        row[i] = (row[i][0], row[i][1])\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Input must be a list of list of integers')\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError('Input must be a list of list of list of integers')\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0][0],", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst) == 5:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    if len(lst) == 6:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]\n    if len(lst) == 7:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]\n    if len(lst) == 8:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if x not in lst:\n        return []\n    rows = []\n    for row in lst:\n        if x in row:\n            rows.append((row.index(x), len(row) - row.index(x)))\n    rows.sort(key=lambda x: x[0])\n    for row in rows:\n        row.sort(key=lambda x: x[1])\n    return rows", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    if x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst[0]) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst[0]) == 3:\n        return [(0, 0), (", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x < 0 or x > len(lst[0]) - 1:\n        return []\n    res = []\n    for i in range(len(lst)):\n        res.append((i, 0))\n        for j in range(len(lst[i])):\n            if j == x:\n                res[-1] = (i, j + 1)\n                break\n            res.append((i, j + 1))\n    res.sort(key=lambda x: x[0])\n    res.sort(key=lambda x: x[1])\n    return res", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    if not lst[x]:\n        return []\n    return [(x, i) for i in range(len(lst[x]))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if x not in lst:\n        return []\n    row = []\n    for i in range(len(lst)):\n        if lst[i] == []:\n            continue\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                row.append((i, j))\n    row.sort(key=lambda x: x[0])\n    row.sort(key=lambda x: x[1], reverse=True)\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0][0], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('expected a list')\n    if not isinstance(x, int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('expected a list')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[0][-1], int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[-1][0], int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[-1][1], int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[-1][0], int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[-1][1], int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[-1][0], int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[-1][1], int):\n        raise TypeError('expected an integer')\n    if not isinstance(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('expected a list')\n    if not isinstance(x, int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('expected a list')\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    if x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, x)]\n    if len(lst[0]) == 1:\n        return [(x, 0)]\n    if len(lst[0]) == x:\n        return [(x, x)]\n    if len(lst[0]) == x + 1:\n        return [(x, 0)]\n    if len(lst[0]) == x + 2:\n        return [(x, 1)]\n    if len(lst[0]) == x + 3:\n        return [(x, 2)]\n    if len(lst[0]) == x + 4:\n        return [(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if not lst[0][x] or not lst[1]:\n        return []\n    if not lst[1][x]:\n        return []\n    if not lst[0][x]:\n        return []\n    return [(i, j) for i, row in enumerate(lst[0]) for j, col in enumerate(row) if col == x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Input must be a list of list of integers')\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError('Input must be a list of list of list of integers')\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0][0],", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0][0], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if not isinstance(lst[1][0], int):\n        raise TypeError(\"lst[1][0] must be an integer\")\n    if not isinstance(lst[2][0], int):\n        raise TypeError(\"lst[2][0] must be an integer\")\n    if not isinstance(lst[0][-1], int):\n        raise TypeError(\"lst[0][-1] must be an integer\")\n    if not isinstance(lst[1][-1], int):\n        raise TypeError(\"lst[1][-1] must be an integer\")\n    if not isinstance(lst[2][-1], int):\n        raise TypeError(\"lst[2][-1] must be an integer\")\n    if not isinstance(lst[0][-2], int):\n        raise TypeError(\"lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if x not in lst:\n        return []\n    row = []\n    for i in range(len(lst)):\n        if lst[i]:\n            row.append((i, lst[i].index(x)))\n    row.sort(key=lambda x: x[0])\n    for i in range(len(row)):\n        row[i] = (row[i][0], row[i][1])\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][-1], int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][-1], int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Input must be a list of list of integers')\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError('Input must be a list of list of list of integers')\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0][0],", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('expected list')\n    if not isinstance(x, int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0], list):\n        raise TypeError('expected list')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        raise TypeError('expected int')", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    if len(lst[x]) == 0:\n        return []\n    if len(lst[x]) == 0:\n        return []\n    return [(x, i) for i in range(len(lst[x]))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 0:", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if not isinstance(lst[1][0], int):\n        raise TypeError(\"lst[1][0] must be an integer\")\n    if not isinstance(lst[1][1], int):\n        raise TypeError(\"lst[1][1] must be an integer\")\n    if not isinstance(lst[1][2], int):\n        raise TypeError(\"lst[1][2] must be an integer\")\n    if not isinstance(lst[1][3], int):\n        raise TypeError(\"lst[1][3] must be an integer\")\n    if not isinstance(lst[1][4], int):\n        raise TypeError(\"lst[1][4] must be an integer\")\n    if not isinstance(lst[1][5], int):\n        raise TypeError(\"lst[1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Expected list')\n    if not isinstance(x, int):\n        raise TypeError('Expected integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Expected list')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Expected integer')\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError('Expected integer')\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError('Expected integer')\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError('Expected integer')\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError('Expected integer')\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        raise TypeError('Expected integer')\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        raise TypeError('Expected integer')\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        raise TypeError('Expected integer')\n    if not isinstance(lst[0][0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0][0], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Expected list')\n    if not isinstance(x, int):\n        raise TypeError('Expected integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Expected list')\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst[0]) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst[0]) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst must be a list of lists\")\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if x < 0 or x > len(lst):\n        raise ValueError(\"x must be in range 0 - len(lst)\")\n    if x < 0 or x > len(lst[0]):\n        raise ValueError(\"x must be in range 0 - len(lst[0])\")\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 1)]\n    if len(lst[0]) == 2:\n        return [(0, 0), (1, 1)]\n    if len(lst) == 3:\n        return [(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst must be a list of lists\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0][0][0], int", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if x not in lst:\n        return []\n    rows = []\n    for row in lst:\n        if row and x in row:\n            rows.append((row.index(x), len(row) - row.index(x) - 1))\n    rows.sort(key=lambda x: x[0])\n    for row in rows:\n        row.sort(key=lambda x: x[1])\n    return rows", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Input must be a list of list of integers')\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if x < 0 or x > len(lst[0]) - 1:\n        return []\n    if x < 0:\n        x += len(lst[0])\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst) == 4:\n        return [", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst) == 5:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    if len(lst) == 6:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]\n    if len(lst) == 7:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]\n    if len(lst) == 8:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if x not in lst:\n        return []\n    rows = []\n    for row in lst:\n        if x:\n            if x in row:\n                rows.append((row.index(x), len(row) - row.index(x) - 1))\n        else:\n            rows.append((0, len(row) - 1))\n    rows.sort(key=lambda x: x[0])\n    for row in rows:\n        row.sort(key=lambda x: x[1])\n    return rows", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Expected list, got {}'.format(type(lst)))\n    if not isinstance(x, int):\n        raise TypeError('Expected int, got {}'.format(type(x)))\n    if not isinstance(lst[0], list):\n        raise TypeError('Expected list, got {}'.format(type(lst[0])))\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Expected int, got {}'.format(type(lst[0][0])))\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError('Expected int, got {}'.format(type(lst[0][0][0])))\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError('Expected int, got {}'.format(type(lst[0][0][0][0])))\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError('Expected int, got {}'.format(type(lst[0][0][0][0][0])))\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError('Expected int, got {}'.format", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst[0]) - 1:\n        return [(1, 0)]\n    if x == len(lst[0]) - 1 and len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x == len(lst[0]) - 1 and len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if x == len(lst[0]) - 1 and len(lst) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if x == len(lst[0]) - 1 and len(lst) == 5:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    if x == len(lst[0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x >= len(lst[1]):\n        return []\n    if x < 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst[0]) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst[0]) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst[0]) == 5:\n        return [(0, 0), (1, 0), (2, 0), (3", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Input must be a list of list of integers')\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError('Input must be a list of list of list of integers')\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0][0],", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, len(lst[0])-1)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, len(lst[0])-1)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, len(lst[0])-1)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, len(lst[0])-1)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('expected a list')\n    if not isinstance(x, int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('expected a list')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[0][-1], int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[-1], list):\n        raise TypeError('expected a list')\n    if not isinstance(lst[-1][0], int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[-1][-1], int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[-1][-1], int):\n        raise TypeError('expected an integer')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('expected an integer')\n    if not isinstance", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if x not in lst:\n        return []\n    x = lst.index(x)\n    return [(x, i) for i in range(len(lst[x]))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if len(lst)!= len(lst[0]):\n        raise ValueError(\"lst must be a list of lists\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if x < 0 or x >= len(lst):\n        raise ValueError(\"x must be an integer between 0 and len(lst)-1\")\n    if x < 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == 1:\n        return [(1, 0)]\n    if x == len(lst):\n        return [(len(lst) - 1, 0)]\n    if x == len(lst) - 1:\n        return [(len(lst) - 1, len(lst[0]) - 1)]\n    if x == len", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst[0]) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst[0])", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if not isinstance(lst[0][-1], int):\n        raise TypeError(\"lst[0][-1] must be an integer\")\n    if not isinstance(lst[-1], list):\n        raise TypeError(\"lst[-1] must be a list\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"lst[-1][0] must be an integer\")\n    if not isinstance(lst[-1][-1], int):\n        raise TypeError(\"lst[-1][-1] must be an integer\")\n    if not isinstance(lst[-1][-2], int):\n        raise TypeError(\"lst[-1][-2] must be an integer\")\n    if not isinstance(lst[-1][-3], int)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if not lst[0][x] or not lst[1]:\n        return []\n    if not lst[1][x]:\n        return []\n    return [(i, j) for i, row in enumerate(lst[0]) for j, item in enumerate(row) if item == x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if not isinstance(lst[0][-1], int):\n        raise TypeError(\"lst[0][-1] must be an integer\")\n    if not isinstance(lst[-1], list):\n        raise TypeError(\"lst[-1] must be a list\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"lst[-1][0] must be an integer\")\n    if not isinstance(lst[-1][-1], int):\n        raise TypeError(\"lst[-1][-1] must be an integer\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if not isinstance(lst[0][-1], int):\n        raise TypeError(\"lst[0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    if not isinstance(lst[x], list):\n        return []\n    if len(lst[x]) == 0:\n        return []\n    if len(lst[x]) == 1:\n        return [(x, 0)]\n    if len(lst[x]) == 2:\n        return [(x, 0), (x, 1)]\n    if len(lst[x]) == 3:\n        return [(x, 0), (x, 1), (x, 2)]\n    if len(lst[x]) == 4:\n        return [(x, 0), (x, 1), (x, 2), (x, 3)]\n    if len(lst[x]) == 5:\n        return [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4)]\n    if len(lst[x]) == 6:\n        return [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4), (x, 5)]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if not isinstance(lst[1][0], int):\n        raise TypeError(\"lst[1][0] must be an integer\")\n    if not isinstance(lst[1][1], int):\n        raise TypeError(\"lst[1][1] must be an integer\")\n    if not isinstance(lst[1][2], int):\n        raise TypeError(\"lst[1][2] must be an integer\")\n    if not isinstance(lst[1][3], int):\n        raise TypeError(\"lst[1][3] must be an integer\")\n    if not isinstance(lst[1][4], int):\n        raise TypeError(\"lst[1][4] must be an integer\")\n    if not isinstance(lst[1][5], int):\n        raise TypeError(\"lst[1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst is not a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x is not an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] is not a list\")\n    if len(lst[0])!= len(lst):\n        raise ValueError(\"lst[0] is not the same length as lst\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] is not an integer\")\n    if not isinstance(lst[0][-1], int):\n        raise TypeError(\"lst[0][-1] is not an integer\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"lst[-1][0] is not an integer\")\n    if not isinstance(lst[-1][-1], int):\n        raise TypeError(\"lst[-1][-1] is not an integer\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] is not an integer\")\n    if not isinstance(lst[0][-1], int):\n        raise TypeError", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    res = []\n    for i in range(len(lst)):\n        res.append((i, x))\n        res.append((i, x + lst[i][x]))\n    res.sort(key=lambda x: x[0])\n    res.sort(key=lambda x: x[1], reverse=True)\n    return res", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if x not in lst:\n        return []\n    rows = []\n    for row in lst:\n        if x in row:\n            rows.append((row.index(x), len(row) - row.index(x) - 1))\n        else:\n            rows.append((row.index(x), len(row) - row.index(x)))\n    rows.sort(key=lambda x: x[0])\n    rows.sort(key=lambda x: x[1], reverse=True)\n    return rows", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], list):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], list):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], list):\n        return []\n    if not", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('get_row(): lst must be a list')\n    if not isinstance(x, int):\n        raise TypeError('get_row(): x must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('get_row(): lst must be a list of lists')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('get_row(): lst must be a list of list of integers')\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst[0]) - 1:\n        return [(1, 0)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0][0], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Input must be a list of list of integers')\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError('Input must be a list of list of list of integers')\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0][0],", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if not lst[0][x]:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == x:\n        return [(0, 0), (1, x)]\n    if len(lst[0]) > x:\n        return []\n    if len(lst[0]) < x:\n        return []\n    return [(0, 0), (1, x)] + [(i, x - len(lst[0][i])) for i in range(1, len(lst[0]))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Expected list, got {}'.format(type(lst)))\n    if not isinstance(x, int):\n        raise TypeError('Expected int, got {}'.format(type(x)))\n    if not isinstance(lst[0], list):\n        raise TypeError('Expected list, got {}'.format(type(lst[0])))\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Expected int, got {}'.format(type(lst[0][0])))\n    if not isinstance(lst[0][-1], int):\n        raise TypeError('Expected int, got {}'.format(type(lst[0][-1])))\n    if not isinstance(lst[-1][0], int):\n        raise TypeError('Expected int, got {}'.format(type(lst[-1][0])))\n    if not isinstance(lst[-1][1], int):\n        raise TypeError('Expected int, got {}'.format(type(lst[-1][1])))\n    if not isinstance(lst[-1][0][-1], int):\n        raise TypeError('Expected int, got {}'.format(type", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 1)]\n    if len(lst[0]) == 2:\n        return [(0, 0), (1, 1)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 1), (2, 2)]\n    if len(lst[0]) == 3:\n        return [(0, 0), (1, 1), (2, 2)]\n    if len(lst) == 4:\n        return [(0, 0), (1, 1), (2, 2), (3, 3)]\n    if len(lst[0]) == 4:\n        return [(0, 0), (1, 1", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0), (1, 0)]\n    if len(lst[0]) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst[0]) == len(lst[1]):\n        return [(0, 0), (1, 0)]\n    if len(lst[0]) == len(lst[1]) - 1:\n        return [(0, 0), (1, 0)]\n    if len(lst[0]) == len(lst[1]) - 2:\n        return [(0, 0), (1, 0)]\n    if len(lst[0]) == len(lst[1]) - 3:\n        return [(0, 0), (1,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0][0], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if not lst[0][x]:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == x:\n        return [(0, 0)]\n    if len(lst) == x:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == x:\n        return [(0, 0)]\n    if len(lst) == x:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == x:\n        return [(0, 0)]\n    if len(lst) == x:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if x < 0 or x >= len(lst):\n        return []\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    return [(x, y) for y in range(len(lst[0])) for x in range(len(lst)) if lst[x][y] == x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst) == 5:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    if len(lst) == 6:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]\n    if len(lst) == 7:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]\n    if len(lst) == 8:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0][0], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0][0], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, len(lst[0])-1)]\n    if len(lst) == 3:\n        return [(0, 0), (1, len(lst[0])-1), (2, len(lst[1])-1)]\n    if len(lst) == 4:\n        return [(0, 0), (1, len(lst[0])-1), (2, len(lst[1])-1), (3, len(lst[2])-1)]\n    if len(lst) == 5:\n        return [(0, 0), (1, len(lst[0])-1), (2, len(lst[1])-1), (3, len(lst[2])-1), (4, len(lst[3])-1)]\n    if len(lst) == 6:\n        return [(0, 0), (1, len(lst[0])-1), (2, len(lst[1])-1), (3, len(lst[2])-1), (4, len(lst[3])-1), (5, len(lst[4])-1)]\n    if len(lst) == 7:", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if x not in lst:\n        return []\n    # sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    rows = sorted(lst, key=lambda x: len(x))\n    rows = [sorted(row, key=lambda y: y.index(x), reverse=True) for row in rows]\n    return [(row, col) for row in rows for col in row]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 1)]\n    if len(lst[0]) == 2:\n        return [(0, 0), (1, 1)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 1), (2, 2)]\n    if len(lst[0]) == 3:\n        return [(0, 0), (1, 1), (2, 2)]\n    if len(lst) == 4:\n        return [(0, 0), (1, 1), (2, 2), (3, 3)]\n    if len(lst[0]) == 4:\n        return [(0, 0), (1, 1), (2, 2), (3, 3)]\n    if len(lst) == 5:\n        return [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]\n    if len(lst[0]) == 5:\n        return [", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if x not in lst:\n        return []\n    row = []\n    for i in range(len(lst)):\n        if lst[i] == []:\n            continue\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                row.append((i, j))\n    row.sort(key=lambda x: x[0])\n    row.sort(key=lambda x: x[1], reverse=True)\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if len(lst)!= len(lst[0]):\n        raise ValueError(\"lst must be a list of lists\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0] must be a list of integers\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0] must be a list of integers\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0] must be a list of integers\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0] must be a list of integers\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0] must be a list of integers\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('expected list')\n    if not isinstance(x, int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0], list):\n        raise TypeError('expected list')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        raise TypeError('expected int')\n    if not isinstance(lst[0][0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if x < 0 or x > len(lst[0]):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst[0]):\n        return [(0, len(lst[0]))]\n    if x == 1:\n        return [(0, 1)]\n    if x == len(lst[0]) - 1:\n        return [(0, len(lst[0]) - 1)]\n    if x == len(lst[0]) - 2:\n        return [(0, len(lst[0]) - 2)]\n    if x == len(lst[0]) - 3:\n        return [(0, len(lst[0]) - 3)]\n    if x == len(lst[0]) - 4:\n        return [(0, len(lst[0]) - 4)]\n    if x == len(lst[0]) - 5:\n        return [(0, len(lst[0]) - 5)]\n    if x == len(lst[0]) - 6:\n        return [(0, len", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if len(lst) == 0:\n        return []\n    if x not in lst:\n        return []\n    row = []\n    for i in range(len(lst)):\n        if lst[i] == []:\n            continue\n        if x in lst[i]:\n            row.append((i, lst[i].index(x)))\n    row.sort(key=lambda x: x[0])\n    row.sort(key=lambda x: x[1], reverse=True)\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst must be a list of lists\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0][0][0], int", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst must be a list of lists\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0][0][0], int", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst must be a list of lists\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of integers\")\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0][0]) == 0:\n        return []\n    if len(lst[0][0][0]) == 0:\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if x < 0 or x >= len(lst[0][0]):\n        return []\n    if x < 0 or x >= len(lst[0][0][0]):\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 2:\n        return [(0, 0), (1, len(lst[1]))]\n    row = []\n    for i in range(len(lst)):\n        if x < len(lst[i]):\n            row.append((i, x))\n            x -= len(lst[i])\n            if x < 0:\n                break\n    row.sort(key=lambda x: x[1])\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if x not in lst:\n        return []\n    row = []\n    for i in lst:\n        if x in i:\n            row.append((i.index(x), len(i)))\n            break\n    return sorted(row, key=lambda x: (x[0], -x[1]))", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if x not in lst[0]:\n        return []\n    row = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            row.append((i, lst[i].index(x)))\n    row.sort(key=lambda x: x[0])\n    row.sort(key=lambda x: x[1], reverse=True)\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if not lst[0][0]:\n        return []\n    if not lst[0][0][0]:\n        return []\n    if not lst[0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"lst[-1][0] must be an integer\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"lst[-1][0] must be an integer\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"lst[-1][0] must be an integer\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"lst[-1][0] must be an integer\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"lst[-1][0] must be an integer\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"lst[-1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if not isinstance(lst[0][-1], int):\n        raise TypeError(\"lst[0][-1] must be an integer\")\n    if not isinstance(lst[-1], list):\n        raise TypeError(\"lst[-1] must be a list\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"lst[-1][0] must be an integer\")\n    if not isinstance(lst[-1][-1], int):\n        raise TypeError(\"lst[-1][-1] must be an integer\")\n    if not isinstance(lst[0][-1], int):\n        raise TypeError(\"lst[0][-1] must be an integer\")\n    if not isinstance(lst[-1][0], int):\n        raise TypeError(\"", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst must be a list of lists\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of integers\")\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0][0]) == 0:\n        return []\n    if len(lst[0][0][0]) == 0:\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if x < 0 or x >= len(lst[0][0]):\n        return []\n    if x < 0 or x >= len(lst[0][0][0]):\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 2:\n        return [(0, 0)]\n    if len(lst[0]) == 3:\n        return [(0, 0)]\n    if len(lst[0]) == 4:\n        return [(0, 0)]\n    if len(lst[0]) == 5:\n        return [(0, 0)]\n    if len(lst[0]) == 6:\n        return [(0, 0)]\n    if len(lst[0]) == 7:\n        return [(0, 0)]\n    if len(lst[0]) == 8:\n        return [(0, 0)]\n    if len(lst[0]) == 9:\n        return [(0, 0)]\n    if len(lst[0]) == 10:\n        return [(0, 0)]\n    if len(lst[0]) == 11:\n        return [(0, 0)]\n    if len(lst[0]) == 12:\n        return [(0, 0)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0][0], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Input must be a list of list of integers')\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError('Input must be a list of list of list of integers')\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0][0],", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    result = []\n    for i in range(len(lst)):\n        if x < len(lst[i]):\n            result.append((i, x))\n            x -= len(lst[i])\n    result.sort(key=lambda x: x[0])\n    for i in range(len(lst)):\n        result.sort(key=lambda x: x[1], reverse=True)\n    return result", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst[0]) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst[0]) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst[0]) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst) == 5:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    if len(lst[0]) == 5:\n        return [", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('get_row(): lst must be a list')\n    if not isinstance(x, int):\n        raise TypeError('get_row(): x must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('get_row(): lst must be a list of lists')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('get_row(): lst must be a list of list of integers')\n    if x < 0 or x > len(lst):\n        raise ValueError('get_row(): x must be an integer between 0 and len(lst)')\n    if x == 0:\n        return [(0, 0)]\n    if x == 1:\n        return [(1, 0)]\n    if x == 2:\n        return [(1, 1), (2, 0)]\n    if x == 3:\n        return [(1, 2), (2, 0), (3, 0)]\n    if x == 4:\n        return [(1, 3), (2, 0), (3, 0), (4, 0)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1], list):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][-1], int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1], list):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][-1], int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1],", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst must be a list of lists\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst[0]) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst[0]) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst[0]) == 5:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    if len(lst[0]) == 6:\n        return [(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, len(lst[0]))]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if x < len(lst[0]):\n        return [(0, x)]\n    if x == len(lst[0]):\n        return [(1, 0)]\n    return [(0, x), (1, 0)] + get_row(lst[1:], x - len(lst[0]))", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if not lst[0][-1]:\n        return []\n    if not lst[0][-1][0]:\n        return []\n    if not lst[0][-1][0][0]:\n        return []\n    if not lst[0][-1][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][-1][0][0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0][0], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if not lst[0][x]:\n        return []\n    if not lst[0][x]:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if x not in lst[0]:\n        return []\n    return [(i, j) for i, row in enumerate(lst) for j, x in enumerate(row) if x == x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if x not in lst:\n        return []\n    rows = []\n    for row in lst:\n        if row and x in row:\n            rows.append((row.index(x), len(row) - row.index(x)))\n    rows.sort(key=lambda x: x[0])\n    return [(x, y) for x, y in rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if not lst[0][x]:\n        return []\n    return [(i, j) for i, row in enumerate(lst) for j, item in enumerate(row) if item == x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Input must be a list of list of integers')\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError('Input must be a list of list of list of integers')\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0][0],", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][-1], int):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][-1], int):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][-1], int):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if x not in lst:\n        return []\n    rows = []\n    for i in range(len(lst)):\n        if lst[i] == []:\n            continue\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                rows.append((i, j))\n    rows.sort(key=lambda x: x[0])\n    rows.sort(key=lambda x: x[1], reverse=True)\n    return rows", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if x not in lst:\n        return []\n    result = []\n    for i in range(len(lst)):\n        if lst[i] == []:\n            continue\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    for i in range(len(result)):\n        result[i] = (result[i][0], result[i][1])\n    return result", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst must be a list of lists\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if x < 0 or x >= len(lst):\n        return []\n    if x < 0 or x >= len(lst[0]):\n        return []\n    result = []\n    for i in range(len(lst)):\n        if x < len(lst[i]):\n            result.append((i, x))\n            x -= 1\n            if x < 0:\n                break\n    for i in range(len(lst)):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if x not in lst:\n        return []\n    return [(i, j) for i, row in enumerate(lst) for j, item in enumerate(row) if item == x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    row = []\n    for i in range(len(lst)):\n        row.append([])\n        for j in range(len(lst[0])):\n            if lst[i][j] == x:\n                row[i].append((i, j))\n    row.sort(key=lambda x: x[0])\n    row.sort(key=lambda x: x[1], reverse=True)\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0][0], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if x not in lst:\n        return []\n    row = []\n    for i in range(len(lst)):\n        if lst[i] == []:\n            continue\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                row.append((i, j))\n    row.sort(key=lambda x: x[0])\n    row.sort(key=lambda x: x[1], reverse=True)\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0][0], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if not lst[0][x]:\n        return []\n    if not lst[0][x][0]:\n        return []\n    if not lst[0][x][0][0]:\n        return []\n    if not lst[0][x][0][0][0]:\n        return []\n    return [(i, j) for i, row in enumerate(lst) for j, item in enumerate(row) if item == x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == 1:\n        return [(1, 0)]\n    if x == 2:\n        return [(1, 1)]\n    if x == 3:\n        return [(1, 2)]\n    if x == 4:\n        return [(1, 3)]\n    if x == 5:\n        return [(1, 4)]\n    if x == 6:\n        return [(1, 5)]\n    if x == 7:\n        return [(2, 0)]\n    if x == 8:\n        return [(2, 1)]\n    if x == 9:\n        return [(2, 2)]\n    if x == 10:\n        return [(2, 3)]\n    if x == 11:\n        return [(2, 4)]\n    if x == 12:\n        return [(2, 5)]\n    if x == 13:\n        return [(2, 6)]\n    if x == 14:\n        return [(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][1], int):\n        return []\n    if not isinstance(lst[-1][-1], int):\n        return []\n    if not isinstance(lst[0][-2], int):\n        return []\n    if not isinstance(lst[0][-3], int):\n        return []\n    if not isinstance(lst[0][-4], int):\n        return []\n    if not isinstance(lst[0][-5], int):\n        return []\n    if not isinstance(lst[0][-6], int):\n        return []\n    if not isinstance(lst[0][-7], int):\n        return []\n    if not isinstance(lst[0][-8], int):\n        return []\n    if not isinstance(lst[0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, len(lst[0]))]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, len(lst[0]))]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, len(lst[0]))]\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[0])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    row = []\n    for i in range(len(lst)):\n        if lst[i]:\n            row.append((i, len(lst[i]) - 1))\n    row.sort(key=lambda x: x[0])\n    for i in row:\n        i[1] = len(lst[i]) - 1 - i[1]\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0][0], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst) == 5:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    if len(lst) == 6:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]\n    if len(lst) == 7:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]\n    if len(lst) == 8:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if x < 0 or x >= len(lst):\n        return []\n    if not isinstance(lst[0][x], int):\n        raise TypeError(\"lst[0][x] must be an integer\")\n    if x == 0:\n        return [(0, 0)]\n    if x == 1:\n        return [(1, 0)]\n    if x == 2:\n        return [(1, 1), (2, 0)]\n    if x == 3:\n        return [(1, 2), (2, 1), (3, 0)]\n    if x == 4:\n        return [(1, 3), (2, 2), (", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    result = []\n    for i in range(len(lst)):\n        if lst[i] == []:\n            continue\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst[0]) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst[0]) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst[0]) == 5:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    if len(lst[0]) == 6:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]\n    if len(lst[0]) == 7:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]\n    if len(lst[0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    row = []\n    for i in range(len(lst)):\n        if lst[i] == []:\n            continue\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                row.append((i, j))\n    return sorted(row, key=lambda x: x[0])", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if len(lst[0]) < x:\n        return []\n    if len(lst) < x:\n        return []\n    if len(lst[0]) == x:\n        return [(0, 0)]\n    if len(lst) == x:\n        return [(0, 0)]\n    row = []\n    for i in range(len(lst)):\n        if len(lst[i]) > x:\n            row.append((i, x - len(lst[i])))\n        else:\n            row.append((i, len(lst[i])))\n    row.sort(key=lambda x: x[0])\n    row.sort(key=lambda x: x[1], reverse=True)\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, len(lst[0]))]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    result = []\n    for i in range(len(lst)):\n        if x < len(lst[i]):\n            result.append((i, x))\n            x -= len(lst[i])\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1])\n    return result", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Input must be a list of list of integers')\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError('Input must be a list of list of list of integers')\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0][0]) == 0:\n        return []\n    if len(lst[0][0][0]) == 0:\n        return []\n    if x < 0 or x > len(lst[0][0][0]):\n        return []\n    if len(lst) == 1:\n        return [(0, x)]\n    if len(lst[0]) == 1:\n        return [(0, x)]\n    if len(lst[0][0]) == 1:\n        return [(0", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if x < 0 or x > len(lst[0]):\n        raise ValueError('Invalid input')\n    if len(lst) == 1:\n        return [(0, x)]\n    if x == 0:\n        return [(0, x)]\n    if x == len(lst[0]):\n        return [(len(lst) - 1, x)]\n    if x == 1:\n        return [(1, x)]\n    if x == len(lst[0]) - 1:\n        return [(len(lst) - 1, x)]\n    if x == len(lst[0]) - 2:\n        return [(len(lst) - 1, x)]\n    if x == len(lst[0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, x)]\n    if len(lst[0]) == 1:\n        return [(0, x)]\n    if len(lst) == 2:\n        return [(0, x), (1, x)]\n    if len(lst[0]) == 2:\n        return [(0, x), (1, x)]\n    if len(lst) == 3:\n        return [(0, x), (1, x), (2, x)]\n    if len(lst[0])", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if x < 0 or x > len(lst[0]):\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == len(lst[0]):\n        return [(len(lst) - 1, 0)]\n    if x == 1:\n        return [(0, 1)]\n    if x == len(lst[0]) - 1:\n        return [(len(lst) - 1, 1)]\n    if x == len(lst[0]) - 2:\n        return [(len(lst) - 1, 0), (len(lst) - 1, 1)]\n    if x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Input must be a list of list of integers')\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError('Input must be a list of list of list of integers')\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError('Input must be a list of list of list of list of list of list of integers')\n    if not isinstance(lst[0][0][0][0][0][0][0],", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('Input must be a list of lists')\n    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if not isinstance(lst[0][0], int):\n        raise TypeError('Input must be a list of list of integers')\n    if x < 0 or x > len(lst[0]):\n        raise ValueError('Invalid input')\n    if x == 0:\n        return [(0, 0)]\n    if x == 1:\n        return [(1, 0)]\n    if x == len(lst[0]):\n        return [(len(lst), 0)]\n    if x == len(lst):\n        return [(len(lst), len(lst[0]))]\n    if x == len(lst[0]) - 1:\n        return [(len(lst), len(lst[0]) - 1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst[0] must be a list\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst[0][0] must be an integer\")\n    if not isinstance(lst[1][0], int):\n        raise TypeError(\"lst[1][0] must be an integer\")\n    if not isinstance(lst[1][1], int):\n        raise TypeError(\"lst[1][1] must be an integer\")\n    if not isinstance(lst[1][2], int):\n        raise TypeError(\"lst[1][2] must be an integer\")\n    if not isinstance(lst[1][3], int):\n        raise TypeError(\"lst[1][3] must be an integer\")\n    if not isinstance(lst[1][4], int):\n        raise TypeError(\"lst[1][4] must be an integer\")\n    if not isinstance(lst[1][5], int):\n        raise TypeError(\"lst[1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if x not in lst:\n        return []\n    row = []\n    for i in lst:\n        if i == x:\n            row.append((0, len(i)))\n        else:\n            row.append((len(i), len(i) - len(i.replace(x, ''))))\n    return sorted(row, key=lambda x: x[0])\n</s>", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    row = []\n    for i in lst:\n        if x in i:\n            row.append((i.index(x), len(i)))\n            break\n    return sorted(row, key=lambda x: (x[0], -x[1]))\n</s>", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if x not in lst:\n        return []\n    rows = []\n    for i in range(len(lst)):\n        if lst[i]:\n            rows.append([(i, j) for j in range(len(lst[i])) if lst[i][j] == x])\n    rows.sort(key=lambda x: x[0])\n    for i in range(len(lst)):\n        if lst[i]:\n            rows[i].sort(key=lambda x: x[1])\n    return rows", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if x not in lst:\n        return []\n    result = []\n    for i in lst:\n        if x in i:\n            result.append((0, len(i)))\n        for j in range(len(i)):\n            if i[j] == x:\n                result.append((j, len(i)))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][1], int):\n        return []\n    if not isinstance(lst[-1][-1], int):\n        return []\n    if not isinstance(lst[0][-2], int):\n        return []\n    if not isinstance(lst[0][-3], int):\n        return []\n    if not isinstance(lst[0][-4], int):\n        return []\n    if not isinstance(lst[0][-5], int):\n        return []\n    if not isinstance(lst[0][-6], int):\n        return []\n    if not isinstance(lst[0][-7], int):\n        return []\n    if not isinstance(lst[0][-8], int):\n        return []\n    if not isinstance(lst[0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    row = []\n    for i in lst:\n        if i:\n            row.append((i.index(x), len(i)))\n        else:\n            row.append((0, 0))\n    row.sort(key=lambda x: x[0])\n    return [(x[0], x[1]) for x in row]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if x < 0 or x >= len(lst):\n        return []\n    if len(lst[x]) == 0:\n        return []\n    if len(lst[x]) == 1:\n        return [(0, 0)]\n    row = []\n    for i in range(len(lst)):\n        if len(lst[i]) > 0:\n            row.append((i, len(lst[i]) - 1))\n    row.sort(key=lambda x: x[0])\n    for i in range(len(lst)):\n        if len(lst[i]) > 0:\n            row[i] = (row[i][0], len(lst[i]) - 1 - row[i][1])\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][-1], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1][0], int):\n        return []\n    if not isinstance(lst[-1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst must be a list of lists\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of list of list of list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0][0][0], int", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if not lst[0][x]:\n        return []\n    return [(i, j) for i, row in enumerate(lst) for j, x in enumerate(row) if x == x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst must be a list of lists\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst) == 5:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    if len(lst) == 6:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]\n    if len(lst) == 7:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]\n    if len(lst) == 8:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    if not isinstance(lst[0], list):\n        raise TypeError(\"lst must be a list of lists\")\n    if not isinstance(lst[0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        raise TypeError(\"lst must be a list of list of integers\")\n    if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, x)]\n    res = []\n    for i in range(len(lst)):\n        res.extend(get_row(lst[i], x))\n    res.sort(key=lambda x: (x[0], x[1]))\n    return res", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 2:\n        return [(0, 0), (1, len(lst[1]))]\n    result = []\n    for i in range(len(lst)):\n        result.append((i, len(lst[i])))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return [(x, y) for x, y in result if x == x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    row = []\n    for i in range(len(lst)):\n        row.append([])\n        for j in range(len(lst[0])):\n            if lst[i][j] == x:\n                row[i].append((i, j))\n    row.sort(key=lambda x: x[0])\n    row.sort(key=lambda x: x[1], reverse=True)\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst[0]) == 1:\n        return [(0, 0)]\n    if x < 0 or x >= len(lst):\n        return []\n    if x >= len(lst[0]):\n        return []\n    return [(x, y) for y in range(len(lst[0])) for x in range(len(lst)) if lst[x][y] == x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not lst[0]:\n        return []\n    if not lst[0][0]:\n        return []\n    if not lst[0][0][0]:\n        return []\n    if not lst[0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]:\n        return []\n    if not lst[0][0][0][0][0][0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if x < 0 or x >= len(lst):\n        return []\n    if lst[x] == []:\n        return []\n    return [(x, y) for y in range(len(lst[x]))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if x < 0 or x >= len(lst[0]):\n        return []\n    if len(lst) == 1:\n        return [(0, x)]\n    result = []\n    for i in range(len(lst)):\n        if x < len(lst[i]):\n            result.append((i, x))\n            x -= len(lst[i])\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1])\n    return result", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst) == 5:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    if len(lst) == 6:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]\n    if len(lst) == 7:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]\n    if len(lst) == 8:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7,", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0][0], int):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        raise TypeError('expected list')\n    if not isinstance(x, int):\n        raise TypeError('expected integer')\n    if not isinstance(lst[0], list):\n        raise TypeError('expected list')\n    if not isinstance(lst[0][0], int):\n        raise TypeError('expected integer')\n    if not isinstance(lst[0][-1], int):\n        raise TypeError('expected integer')\n    if not isinstance(lst[-1], list):\n        raise TypeError('expected list')\n    if not isinstance(lst[-1][0], int):\n        raise TypeError('expected integer')\n    if not isinstance(lst[-1][-1], int):\n        raise TypeError('expected integer')\n    if not isinstance(lst[0][-1], int):\n        raise TypeError('expected integer')\n    if not isinstance(lst[-1][-1], int):\n        raise TypeError('expected integer')\n    if not isinstance(lst[0][-1], int):\n        raise TypeError('expected integer')\n    if not isinstance(lst[-1][-1], int)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if not lst:\n        return []\n    if not x:\n        return []\n    if not isinstance(lst, list):\n        return []\n    if not isinstance(x, int):\n        return []\n    if not isinstance(lst[0], list):\n        return []\n    if not isinstance(lst[0][0], int):\n        return []\n    if not isinstance(lst[0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0], int):\n        return []\n    if not isinstance(lst[0][0][0][0][0][0][0][0][0][0][0][0], int):\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if x < 0 or x >= len(lst[0]):\n        return []\n    row = []\n    for i in range(len(lst)):\n        if lst[i][x]!= 0:\n            row.append((i, lst[i][x]))\n    row.sort(key=lambda x: x[0])\n    row.sort(key=lambda x: x[1], reverse=True)\n    return row", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(0, 0)]\n    if len(lst) == 2:\n        return [(0, 0), (1, 0)]\n    if len(lst) == 3:\n        return [(0, 0), (1, 0), (2, 0)]\n    if len(lst) == 4:\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    if len(lst) == 5:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    if len(lst) == 6:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]\n    if len(lst) == 7:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]\n    if len(lst) == 8:\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7,"]]