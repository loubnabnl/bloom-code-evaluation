[["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_numeral[i]\n            number -= i\n        if number == 0:\n            break\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_numeral[i]\n            number -= i\n        if number == 0:\n            break\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman = ''\n    for i in range(len(roman_numeral_map)):\n        while number >= roman_numeral_map[i]:\n            number -= roman_numeral_map[i]\n            roman += roman_numeral_map[i][i]\n\n    return roman.lower()\n\n\nroman_numeral_map = [\n    (1000, 'M'),\n    (900, 'CM'),\n    (500, 'D'),\n    (400, 'CD'),\n    (100, 'C'),\n    (90, 'XC'),\n    (50, 'L'),\n    (40, 'XL'),\n    (10, 'X'),\n    (9, 'IX'),\n    (5, 'V'),\n    (4, 'IV'),\n    (1, 'I'),\n]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n    if number > 1000:\n        raise ValueError('Number must be less than or equal to 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n\n    roman_numeral = ''\n\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += str(i)\n            number -= i\n        else:\n            break\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n\n    roman_numeral = ''\n\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(len(roman_numerals)):\n        while number >= roman_numerals[i]:\n            number -= roman_numerals[i]\n            roman_numeral += roman_numerals[i - 1]\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000\")\n\n    roman_numeral = \"\"\n    for i in range(len(roman_numerals)):\n        number -= roman_numerals[i]\n        if number < 0:\n            roman_numeral += roman_numerals[i]\n            number = 0\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n\n    roman = \"\"\n    for i in range(1000, number + 1, 100):\n        roman += \"m\"\n    for i in range(100, number + 1, 10):\n        roman += \"c\"\n    for i in range(10, number + 1, 1):\n        roman += \"i\"\n    return roman[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix',\n        20: 'xx',\n        21: 'xxi',\n        22: 'xxii',\n        23: 'xxiii',\n        24: 'xxiv',\n        25: 'xxv',\n        26: 'xxvi',\n        27: 'xxvii',\n        28: 'xxviii',\n        29: 'xxix',\n        30: 'xxx',\n        31: 'xxxi',\n        32: 'xxxii',\n        33: 'xxxiii',\n        34: 'xxxiv',\n        35: 'xxxv',\n        36: 'xxxvi',\n        37: 'xxxvii',\n        38: 'xxxviii',", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        number -= ROMAN_NUMERAL[i]\n        if number < 0:\n            roman_numeral += ROMAN_NUMERAL[i]\n            number = 0\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n\n    roman_numeral = ''\n    for i in range(0, len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000\")\n\n    roman_numeral = \"\"\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_numeral[i]\n            number -= i\n        else:\n            break\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0')\n\n    roman_numeral = ''\n\n    for i in range(len(roman_numeral)):\n        number -= 1\n        if number < 1:\n            roman_numeral += 'i'\n        elif number == 1:\n            roman_numeral += 'I'\n        elif number == 2:\n            roman_numeral += 'ii'\n        elif number == 3:\n            roman_numeral += 'iii'\n        elif number == 4:\n            roman_numeral += 'iv'\n        elif number == 5:\n            roman_numeral += 'v'\n        elif number == 6:\n            roman_numeral += 'vi'\n        elif number == 7:\n            roman_numeral += 'vii'\n        elif number == 8:\n            roman_numeral += 'viii'\n        elif number == 9:\n            roman_numeral += 'ix'\n        elif number == 10:\n            roman_numeral += 'x'\n        elif number == 11:\n            roman_numeral += 'xi'\n        elif number == 12:\n            roman_numeral += 'xii'\n        elif number == 13:\n            roman_numeral += 'xiii'\n        elif number == 14:\n            roman_numeral += 'xiv'\n        elif number == 15:\n            roman_numeral += 'xv'\n        elif number == 16:\n            roman_numeral += 'xvi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be <= 1000\")\n\n    roman_numeral = \"\"\n    for i in range(len(roman_numerals)):\n        number -= 1\n        while number >= roman_numerals[i]:\n            roman_numeral += roman_numerals[i]\n            number -= roman_numerals[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix',\n        20: 'xx',\n        21: 'xxi',\n        22: 'xxii',\n        23: 'xxiii',\n        24: 'xxiv',\n        25: 'xxv',\n        26: 'xxvi',\n        27: 'xxvii',\n        28: 'xxviii',\n        29: 'xxix',\n        30: 'xxx',\n        31: 'xxxi',\n        32: 'xxxii',\n        33: 'xxxiii',\n        34: 'xxxiv',\n        35: 'xxxv',\n        36: 'xxxvi',\n        37: 'xxxvii',\n        38: 'xxxviii',\n        39: 'xxxix',\n        40: 'xlx',\n        41: 'xlxi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numerals)):\n        number -= roman_numerals[i]\n        if number < 0:\n            roman_numeral += roman_numerals[i]\n            number = 0\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be > 0')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numerals)):\n        number -= 1\n        while number >= roman_numerals[i]:\n            roman_numeral += roman_numerals[i]\n            number -= roman_numerals[i]\n    return roman_numeral.lower()\n\n\nroman_numerals = (\n    (1000,'m'),\n    (900, 'cm'),\n    (500, 'd'),\n    (400, 'cdvs'),\n    (100, 'c'),\n    (90, 'xc'),\n    (50, 'l'),\n    (40, 'xl'),\n    (10, 'x'),\n    (9, 'ix'),\n    (5, 'v'),\n    (4, 'iv'),\n    (1, 'i'),\n)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman[i]\n            number -= i\n        if number == 0:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000\")\n\n    roman_numeral = \"\"\n    for i in range(0, number):\n        roman_numeral += roman_chars[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        roman_numeral += roman_numeral_map[i]\n\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_nums)):\n        while number >= roman_nums[i]:\n            number -= roman_nums[i]\n            roman_numeral += roman_letters[i]\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        number -= 1\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n    if number > 1000:\n        raise ValueError('Number must be less than or equal to 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman = ''\n    for i in range(len(ROMAN_NUMERALS)):\n        while number >= ROMAN_NUMERALS[i]:\n            number -= ROMAN_NUMERALS[i]\n            roman += ROMAN_LETTERS[i]\n\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        roman_numeral += roman_numeral_map[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(0, number):\n        roman_numeral += roman_numeral_map[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        roman_numeral += roman_numeral_map[i]\n    return roman_numeral.lower()\n\n\nroman_numeral_map = (\n    (1000,'m'),\n    (900, 'cm'),\n    (500, 'd'),\n    (400, 'cdm'),\n    (100, 'c'),\n    (90, 'xc'),\n    (50, 'l'),\n    (40, 'xl'),\n    (10, 'x'),\n    (9, 'ix'),\n    (5, 'v'),\n    (4, 'iv'),\n    (1, 'i'),\n)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix',\n        20: 'xx',\n        21: 'xxi',\n        22: 'xxii',\n        23: 'xxiii',\n        24: 'xxiv',\n        25: 'xxv',\n        26: 'xxvi',\n        27: 'xxvii',\n        28: 'xxviii',\n        29: 'xxix',\n        30: 'xxx',\n        31: 'xxxi',\n        32: 'xxxii',\n        33: 'xxxiii',\n        34: 'xxxiv',\n        35: 'xxxv',\n        36: 'xxxvi',\n        37: 'xxxvii',\n        38: 'xxxviii',\n        39: 'xxxix',\n        40: 'xlx',\n        41: 'x", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_LETTERS[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n\n    roman_numeral = ''\n    for numeral, integer in mini_roman_numerals.items():\n        while number >= integer:\n            number -= integer\n            roman_numeral += numeral\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix',\n        20: 'xx',\n        21: 'xxi',\n        22: 'xxii',\n        23: 'xxiii',\n        24: 'xxiv',\n        25: 'xxv',\n        26: 'xxvi',\n        27: 'xxvii',\n        28: 'xxviii',\n        29: 'xxix',\n        30: 'xxx',\n        31: 'xxxi',\n        32: 'xxxii',\n        33: 'xxxiii',\n        34: 'xxxiv',\n        35: 'xxxv',\n        36: 'xxxvi',\n        37: 'xxxvii',\n        38: 'xxxviii',\n        39: 'xxxix',\n        40: 'xlx',\n        41: 'xlxi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_numeral[i]\n            number -= i\n        else:\n            break\n\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        number -= 1\n        if number < 1:\n            roman_numeral += 'x'\n            number = 0\n        else:\n            roman_numeral += roman_numeral[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n    if number > 1000:\n        raise ValueError('Number must be less than or equal to 1000')\n\n    roman = ''\n    for i in range(1000):\n        if number >= 1000:\n            roman +='mmmm'\n            number -= 1000\n        elif number >= 900:\n            roman +='mm'\n            number -= 900\n        elif number >= 500:\n            roman += 'cm'\n            number -= 500\n        elif number >= 400:\n            roman += 'd'\n            number -= 400\n        elif number >= 100:\n            roman += 'x'\n            number -= 100\n        elif number >= 90:\n            roman += 'ix'\n            number -= 90\n        elif number >= 50:\n            roman += 'l'\n            number -= 50\n        elif number >= 40:\n            roman += 'iv'\n            number -= 40\n        elif number >= 10:\n            roman += 'i'\n            number -= 10\n        elif number >= 9:\n            roman += 'ix'\n            number -= 9\n        elif number >= 5:\n            roman += 'v'\n            number -= 5\n        elif number >= 4:\n            roman += 'iv'\n            number -= 4\n        elif number >= 1:\n            roman += 'i'\n            number -= 1\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(0, number):\n        roman_numeral += roman_numeral_map[number % 10]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_LETTERS[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be positive')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        if number % i == 0:\n            roman_numeral += str(i)\n        else:\n            roman_numeral += str(number % i)\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_numeral[i]\n            number -= i\n        else:\n            break\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_numeral[i]\n            number -= i\n        if number == 0:\n            break\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numerals)):\n        number -= 1\n        while number >= roman_numerals[i]:\n            roman_numeral += roman_numerals[i]\n            number -= roman_numerals[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += str(i)\n            number -= i\n        if number < 1:\n            break\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        number -= 1\n        if number < 1:\n            roman_numeral += 'i'\n        elif number == 1:\n            roman_numeral += 'I'\n        elif number == 5:\n            roman_numeral += 'v'\n        elif number == 9:\n            roman_numeral += 'x'\n        elif number == 40:\n            roman_numeral += 'l'\n        elif number == 90:\n            roman_numeral += 'c'\n        elif number == 400:\n            roman_numeral += 'd'\n        else:\n            roman_numeral += roman_numeral[i]\n\n    return roman_numeral.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be > 0')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_numeral[i]\n            number -= i\n        else:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n\n    roman_numeral = ''\n    for i in range(len(roman_numerals)):\n        while number >= roman_numerals[i]:\n            number -= roman_numerals[i]\n            roman_numeral += roman_numerals[i - 1]\n\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n    if number > 1000:\n        raise ValueError('Number must be less than or equal to 1000')\n\n    roman_numeral = ''\n    for i in range(0, len(ROMAN_NUMERAL)):\n        number -= 1\n        while number >= ROMAN_NUMERAL[i]:\n            roman_numeral += ROMAN_NUMERAL[i]\n            number -= ROMAN_NUMERAL[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        roman_numeral += roman_chars[(number - i) % 10]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix',\n        20: 'xx',\n        21: 'xxi',\n        22: 'xxii',\n        23: 'xxiii',\n        24: 'xxiv',\n        25: 'xxv',\n        26: 'xxvi',\n        27: 'xxvii',\n        28: 'xxviii',\n        29: 'xxix',\n        30: 'xxx',\n        31: 'xxxi',\n        32: 'xxxii',\n        33: 'xxxiii',\n        34: 'xxxiv',\n        35: 'xxxv',\n        36: 'xxxvi',\n        37: 'xxxvii',\n        38: 'xxxviii',\n        39: 'xxxix',\n        40: 'xlx',\n        41: 'xlxi", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_numeral[i]\n            number -= i\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        20: 'xx',\n        30: 'xxx',\n        40: 'xl',\n        50: 'l',\n        60: 'lx',\n        70: 'lxx',\n        80: 'lxxx',\n        90: 'xc',\n        100: 'c',\n        200: 'cc',\n        300: 'ccc',\n        400: 'cdx',\n        500: 'd',\n        600: 'dc',\n        700: 'dcc',\n        800: 'dcx',\n        900: 'cm',\n        1000:'m',\n    }\n\n    roman_numeral = ''\n    for i in range(0, number):\n        roman_numeral += roman_numeral_map[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(len(roman_numerals)):\n        while number >= roman_numerals[i]:\n            number -= roman_numerals[i]\n            roman_numeral += roman_numerals[i - 1]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        if number >= 1000:\n            roman_numeral +='mm'\n            number -= 1000\n        elif number >= 900:\n            roman_numeral += 'cm'\n            number -= 900\n        elif number >= 500:\n            roman_numeral += 'dd'\n            number -= 500\n        elif number >= 400:\n            roman_numeral += 'cc'\n            number -= 400\n        elif number >= 100:\n            roman_numeral += 'xx'\n            number -= 100\n        elif number >= 90:\n            roman_numeral += 'xc'\n            number -= 90\n        elif number >= 50:\n            roman_numeral += 'xx'\n            number -= 50\n        elif number >= 40:\n            roman_numeral += 'xc'\n            number -= 40\n        elif number >= 10:\n            roman_numeral += 'x'\n            number -= 10\n        elif number >= 9:\n            roman_numeral += 'ix'\n            number -= 9\n        elif number >= 5:\n            roman_numeral += 'v'\n            number -= 5\n        elif number >= 4:\n            roman_numeral += 'iv'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n\n    roman_numeral = ''\n    for numeral, integer in zip(ROMAN_NUMERAL, range(1000, 0, -1)):\n        while number >= integer:\n            number -= integer\n            roman_numeral += numeral\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n    if number > 1000:\n        raise ValueError('Number must be less than or equal to 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numerals)):\n        while number >= roman_numerals[i]:\n            number -= roman_numerals[i]\n            roman_numeral += roman_numerals[i - 1]\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_numeral[i]\n            number -= i\n        else:\n            break\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        if number >= 1000:\n            roman_numeral += 'cm'\n            number -= 1000\n        elif number >= 900:\n            roman_numeral += 'cdm'\n            number -= 900\n        elif number >= 500:\n            roman_numeral += 'dcm'\n            number -= 500\n        elif number >= 400:\n            roman_numeral += 'clm'\n            number -= 400\n        elif number >= 100:\n            roman_numeral += 'xcm'\n            number -= 100\n        elif number >= 90:\n            roman_numeral += 'xcd'\n            number -= 90\n        elif number >= 50:\n            roman_numeral += 'xdcm'\n            number -= 50\n        elif number >= 40:\n            roman_numeral += 'xlcm'\n            number -= 40\n        elif number >= 10:\n            roman_numeral += 'xc'\n            number -= 10\n        elif number >= 9:\n            roman_numeral += 'xd'\n            number -= 9\n        elif number >= 5:\n            roman_numeral += 'xl'\n            number -= 5\n        elif number >= 4:\n            roman_num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += str(i)\n            number -= i\n        else:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        20: 'xx',\n        30: 'xxx',\n        40: 'xl',\n        50: 'lx',\n        60: 'l',\n        70: 'lxx',\n        80: 'lxxx',\n        90: 'xc',\n        100: 'c',\n        200: 'cc',\n        300: 'ccc',\n        400: 'cdx',\n        500: 'dxx',\n        600: 'dxxx',\n        700: 'dxc',\n        800: 'dcx',\n        900: 'cdc',\n        1000:'m'\n    }\n\n    roman_numeral = ''\n    while number > 0:\n        number, remainder = divmod(number, 10)\n        roman_numeral += roman_numeral_map[remainder]\n\n    return roman_numeral.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n    if number > 1000:\n        raise ValueError('Number must be less than or equal to 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be positive')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        20: 'xx',\n        30: 'xxx',\n        40: 'xl',\n        50: 'l',\n        60: 'lx',\n        70: 'lxx',\n        80: 'lxxx',\n        90: 'cl',\n        100: 'c',\n        200: 'cc',\n        300: 'ccc',\n        400: 'cd0',\n        500: 'd',\n        600: 'dc',\n        700: 'dcc',\n        800: 'dcd',\n        900: 'cm',\n        1000:'m',\n    }\n\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        roman_numeral += roman_numeral_map[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        number -= 1\n        if number < 1:\n            roman_numeral += 'i'\n            number += 4\n        elif number == 1:\n            roman_numeral += 'i'\n        elif number == 2:\n            roman_numeral += 'ii'\n        elif number == 3:\n            roman_numeral += 'iii'\n        elif number == 4:\n            roman_numeral += 'iv'\n        elif number == 5:\n            roman_numeral += 'v'\n        elif number == 6:\n            roman_numeral += 'vi'\n        elif number == 7:\n            roman_numeral += 'vii'\n        elif number == 8:\n            roman_numeral += 'viii'\n        elif number == 9:\n            roman_numeral += 'ix'\n        elif number == 10:\n            roman_numeral += 'x'\n        elif number == 11:\n            roman_numeral += 'xi'\n        elif number == 12:\n            roman_numeral += 'xii'\n        elif number == 13:\n            roman_numeral += 'xiii'\n        elif number == 14:\n            roman_numeral += 'xiv'\n        elif number == 15:\n            roman_numeral += 'xv'\n        elif number == 16:\n            roman_num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(0, len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_numeral[i]\n            number -= i\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(0, 10):\n        roman_numeral += chr(int(number / (10 ** i)))\n        number %= (10 ** i)\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman = ''\n    for i in range(1000, number + 1, 100):\n        roman += 'cm'[i // 100]\n        roman += 'd'[i % 100]\n    roman += 'i' * (number - (i * 100))\n\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(0, 3):\n        number -= 1\n        if number % 10 == 1:\n            roman_numeral += 'i'\n        elif number % 10 == 2:\n            roman_numeral += 'ii'\n        elif number % 10 == 3:\n            roman_numeral += 'iii'\n        elif number % 10 == 4:\n            roman_numeral += 'iv'\n        elif number % 10 == 5:\n            roman_numeral += 'v'\n        elif number % 10 == 6:\n            roman_numeral += 'vi'\n        elif number % 10 == 7:\n            roman_numeral += 'vii'\n        elif number % 10 == 8:\n            roman_numeral += 'viii'\n        elif number % 10 == 9:\n            roman_numeral += 'ix'\n        else:\n            roman_numeral += 'x'\n    return roman_numeral.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numerals)):\n        number -= 1\n        while number >= roman_numerals[i]:\n            roman_numeral += roman_numerals[i]\n            number -= roman_numerals[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        number -= 1\n        if number < 1:\n            roman_numeral += 'i'\n            number += 4\n        elif number == 1:\n            roman_numeral += 'i'\n        elif number == 2:\n            roman_numeral += 'ii'\n        elif number == 3:\n            roman_numeral += 'iii'\n        elif number == 4:\n            roman_numeral += 'iv'\n        elif number == 5:\n            roman_numeral += 'v'\n        elif number == 6:\n            roman_numeral += 'vi'\n        elif number == 7:\n            roman_numeral += 'vii'\n        elif number == 8:\n            roman_numeral += 'viii'\n        elif number == 9:\n            roman_numeral += 'ix'\n        elif number == 10:\n            roman_numeral += 'x'\n        elif number == 11:\n            roman_numeral += 'xi'\n        elif number == 12:\n            roman_numeral += 'xii'\n        elif number == 13:\n            roman_numeral += 'xiii'\n        elif number == 14:\n            roman_numeral += 'xiv'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be positive')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman += roman[i]\n            number -= i\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        if number == 0:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n\n    roman_numeral = ''\n    for i in range(0, number):\n        roman_numeral += roman_digits[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be positive')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral_map = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd'}\n\n    roman_numeral = ''\n    for i in range(0, number):\n        roman_numeral += roman_numeral_map[number % 10]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        number -= 1\n        while number >= ROMAN_NUMERAL[i]:\n            roman_numeral += ROMAN_NUMERAL[i]\n            number -= ROMAN_NUMERAL[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        if number >= 1000:\n            roman_numeral += 'cm'\n            number -= 1000\n        elif number >= 900:\n            roman_numeral += 'cdm'\n            number -= 900\n        elif number >= 500:\n            roman_numeral += 'dcm'\n            number -= 500\n        elif number >= 400:\n            roman_numeral += 'clm'\n            number -= 400\n        elif number >= 100:\n            roman_numeral += 'xcm'\n            number -= 100\n        elif number >= 90:\n            roman_numeral += 'xcd'\n            number -= 90\n        elif number >= 50:\n            roman_numeral += 'xdcm'\n            number -= 50\n        elif number >= 40:\n            roman_numeral += 'xlcm'\n            number -= 40\n        elif number >= 10:\n            roman_numeral += 'xc'\n            number -= 10\n        elif number >= 9:\n            roman_numeral += 'xd'\n            number -= 9\n        elif number >= 5:\n            roman_numeral += 'xl'\n            number -= 5\n        elif number >= 4:\n            roman_numeral +=", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        number -= ROMAN_NUMERAL[i]\n        if number < 0:\n            roman_numeral += ROMAN_NUMERAL[i]\n            number = 0\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0')\n\n    roman_numeral = ''\n    for numeral, integer in mini_roman_numerals:\n        while number >= integer:\n            number -= integer\n            roman_numeral += numeral\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral_map = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd'}\n\n    roman_numeral = ''\n    for i in range(0, number):\n        roman_numeral += roman_numeral_map[number % 100]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be positive')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman += roman[i]\n            number -= i\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix',\n        20: 'xx',\n        21: 'xxi',\n        22: 'xxii',\n        23: 'xxiii',\n        24: 'xxiv',\n        25: 'xxv',\n        26: 'xxvi',\n        27: 'xxvii',\n        28: 'xxviii',\n        29: 'xxix',\n        30: 'xxx',\n        31: 'xxxi',\n        32: 'xxxii',\n        33: 'xxxiii',\n        34: 'xxxiv',\n        35: 'xxxv',\n        36: 'xxxvi',\n        37: 'xxxvii',\n        38: 'xxxviii',", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        if number >= 1000:\n            roman_numeral += 'cm'\n            number -= 1000\n        elif number >= 900:\n            roman_numeral += 'cdm'\n            number -= 900\n        elif number >= 500:\n            roman_numeral += 'dcm'\n            number -= 500\n        elif number >= 400:\n            roman_numeral += 'clm'\n            number -= 400\n        elif number >= 100:\n            roman_numeral += 'xcm'\n            number -= 100\n        elif number >= 90:\n            roman_numeral += 'xcd'\n            number -= 90\n        elif number >= 50:\n            roman_numeral += 'xdcm'\n            number -= 50\n        elif number >= 40:\n            roman_numeral += 'xcl'\n            number -= 40\n        elif number >= 10:\n            roman_numeral += 'xc'\n            number -= 10\n        elif number >= 9:\n            roman_numeral += 'xcd'\n            number -= 9\n        elif number >= 5:\n            roman_numeral += 'xd'\n            number -= 5\n        elif number >= 4:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_numeral[i]\n            number -= i\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be <= 1000\")\n\n    roman_numeral = \"\"\n    for i in range(len(roman_numerals)):\n        number -= roman_numerals[i]\n        if number < 0:\n            roman_numeral += roman_numerals[i]\n            number = 0\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        number -= 1\n        if number < 1:\n            roman_numeral += 'i'\n        elif number == 1:\n            roman_numeral += 'I'\n        elif number == 5:\n            roman_numeral += 'v'\n        elif number == 9:\n            roman_numeral += 'x'\n        elif number == 40:\n            roman_numeral += 'l'\n        elif number == 90:\n            roman_numeral += 'c'\n        elif number == 400:\n            roman_numeral += 'd'\n        elif number == 900:\n            roman_numeral +='m'\n        else:\n            raise ValueError('Number must be <= 1000')\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        if number < 1:\n            break\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000\")\n\n    roman_numeral = \"\"\n    for i in range(0, number):\n        roman_numeral += roman_numeral_map[number % 10]\n\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be greater than 0.\")\n\n    roman_numeral = \"\"\n\n    for i in range(len(ROMAN_NUMERALS)):\n        while number >= ROMAN_NUMERALS[i]:\n            number -= ROMAN_NUMERALS[i]\n            roman_numeral += ROMAN_LETTERS[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        number -= 1\n        if number < 1:\n            roman_numeral += 'i'\n        elif number == 1:\n            roman_numeral += 'I'\n        elif number == 2:\n            roman_numeral += 'ii'\n        elif number == 3:\n            roman_numeral += 'iii'\n        elif number == 4:\n            roman_numeral += 'iv'\n        elif number == 5:\n            roman_numeral += 'v'\n        elif number == 6:\n            roman_numeral += 'vi'\n        elif number == 7:\n            roman_numeral += 'vii'\n        elif number == 8:\n            roman_numeral += 'viii'\n        elif number == 9:\n            roman_numeral += 'ix'\n        elif number == 10:\n            roman_numeral += 'x'\n        elif number == 11:\n            roman_numeral += 'xi'\n        elif number == 12:\n            roman_numeral += 'xii'\n        elif number == 13:\n            roman_numeral += 'xiii'\n        elif number == 14:\n            roman_numeral += 'xiv'\n        elif number == 15:\n            roman_numeral += 'xv'\n        elif number == 16:\n            roman_numeral += 'xvi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        number -= 1\n        if number < 1:\n            roman_numeral += 'i'\n            number += 4\n        elif number < 5:\n            roman_numeral += 'iv'\n            number += 4\n        elif number < 9:\n            roman_numeral += 'ix'\n            number += 8\n        elif number < 14:\n            roman_numeral += 'x'\n            number += 10\n        elif number < 19:\n            roman_numeral += 'l'\n            number += 50\n        elif number < 99:\n            roman_numeral += 'cl'\n            number += 90\n        elif number < 149:\n            roman_numeral += 'cc'\n            number += 100\n        elif number < 199:\n            roman_numeral += 'cdc'\n            number += 200\n        elif number < 299:\n            roman_numeral += 'cdx'\n            number += 300\n        elif number < 399:\n            roman_numeral += 'cdxx'\n            number += 400\n        elif number < 499:\n            roman_numeral += 'cdxxx'\n            number += 500\n        elif number <", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        20: 'xx',\n        30: 'xxx',\n        40: 'xl',\n        50: 'l',\n        60: 'lx',\n        70: 'lxx',\n        80: 'lxxx',\n        90: 'cl',\n        100: 'c',\n        200: 'cc',\n        300: 'ccc',\n        400: 'cd'}\n\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        roman_numeral += roman_numeral_map[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numerals)):\n        while number >= roman_numerals[i]:\n            number -= roman_numerals[i]\n            roman_numeral += roman_numerals[i - 1]\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n    if number > 1000:\n        raise ValueError('Number must be less than or equal to 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        number -= 1\n        if number < 1:\n            roman_numeral += 'i'\n        elif number < 5:\n            roman_numeral += 'ix'\n        elif number < 9:\n            roman_numeral += 'x'\n        elif number < 14:\n            roman_numeral += 'l'\n        elif number < 19:\n            roman_numeral += 'l'\n        elif number < 28:\n            roman_numeral += 'c'\n        elif number < 40:\n            roman_numeral += 'd'\n        elif number < 55:\n            roman_numeral += 'cm'\n        elif number < 90:\n            roman_numeral += 'cdx'\n        elif number < 140:\n            roman_numeral += 'cd'\n        elif number < 190:\n            roman_numeral += 'ccx'\n        elif number < 240:\n            roman_numeral += 'cc'\n        elif number < 300:\n            roman_numeral += 'cm'\n        elif number < 350:\n            roman_numeral += 'cdm'\n        elif number < 400:\n            roman_numeral += 'cd", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman = []\n    for i in range(1000):\n        roman.append('M' + str(i % 10) + 'CM')\n        i /= 10\n    roman.append(str(number))\n    return ''.join(roman[::-1])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be <= 1000\")\n\n    roman_numeral = \"\"\n    for i in range(len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be > 0')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_numeral[i]\n            number -= i\n        else:\n            break\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        number -= 1\n        if number < 1:\n            roman_numeral += 'i'\n        elif number < 5:\n            roman_numeral += 'iv'\n        elif number < 9:\n            roman_numeral += 'ix'\n        elif number < 14:\n            roman_numeral += 'x'\n        elif number < 19:\n            roman_numeral += 'l'\n        elif number < 28:\n            roman_numeral += 'l'\n        elif number < 40:\n            roman_numeral += 'c'\n        elif number < 55:\n            roman_numeral += 'd'\n        elif number < 70:\n            roman_numeral +='m'\n        elif number < 84:\n            roman_numeral +='mm'\n        elif number < 91:\n            roman_numeral += 'cm'\n        elif number < 98:\n            roman_numeral += 'd'\n        elif number < 105:\n            roman_numeral += 'cdm'\n        elif number < 119:\n            roman_numeral += 'cm'\n        elif number < 134:\n            roman_numeral += 'cdc'\n        elif", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be <= 1000\")\n\n    roman_numeral = \"\"\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_numeral[i]\n            number -= i\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_numeral[i]\n            number -= i\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000\")\n\n    roman_numeral = \"\"\n    for i in range(len(roman_numerals)):\n        while number >= roman_numerals[i]:\n            number -= roman_numerals[i]\n            roman_numeral += roman_numerals[i - 1]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman = ''\n    for i in range(1000):\n        if number >= 1000:\n            roman +='m'\n            number -= 1000\n        elif number >= 900:\n            roman += 'cm'\n            number -= 900\n        elif number >= 500:\n            roman += 'd'\n            number -= 500\n        elif number >= 400:\n            roman += 'cd':\n            number -= 400\n        elif number >= 100:\n            roman += 'c'\n            number -= 100\n        elif number >= 90:\n            roman += 'xc'\n            number -= 90\n        elif number >= 50:\n            roman += 'l'\n            number -= 50\n        elif number >= 40:\n            roman += 'xl'\n            number -= 40\n        elif number >= 10:\n            roman += 'x'\n            number -= 10\n        elif number >= 9:\n            roman += 'ix'\n            number -= 9\n        elif number >= 5:\n            roman += 'v'\n            number -= 5\n        elif number >= 4:\n            roman += 'iv'\n            number -= 4\n        elif number >= 1:\n            roman += 'i'\n            number -= 1\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n\n    roman_numeral = ''\n    for i in range(len(roman_numerals)):\n        number, remainder = divmod(number, roman_numerals[i])\n        roman_numeral += roman_numerals[remainder]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n    if number > 1000:\n        raise ValueError('Number must be less than or equal to 1000')\n\n    roman = ''\n    for i in range(len(roman)):\n        number -= 1\n        if number < 1:\n            roman += 'x'\n        elif number == 1:\n            roman += 'i'\n        elif number == 5:\n            roman += 'v'\n        elif number == 9:\n            roman += 'x'\n        elif number == 14:\n            roman += 'l'\n        elif number == 19:\n            roman += 'x'\n        elif number == 24:\n            roman += 'x'\n        elif number == 29:\n            roman += 'x'\n        elif number == 34:\n            roman += 'x'\n        elif number == 39:\n            roman += 'x'\n        elif number == 44:\n            roman += 'x'\n        elif number == 49:\n            roman += 'x'\n        elif number == 54:\n            roman += 'x'\n        elif number == 59:\n            roman += 'x'\n        elif number == 64:\n            roman += 'x'\n        elif number == 69:\n            roman += 'x'\n        elif number == 74:\n            roman += 'x'\n        elif number == 79:\n            roman += 'x'\n        elif number == 84:\n            roman += 'x'\n        elif number == 89:\n            roman +=", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        if number >= 1000:\n            roman_numeral +='mmmm'\n            number -= 1000\n        elif number >= 900:\n            roman_numeral +='mm'\n            number -= 900\n        elif number >= 500:\n            roman_numeral +='m'\n            number -= 500\n        elif number >= 400:\n            roman_numeral += 'cm'\n            number -= 400\n        elif number >= 100:\n            roman_numeral += 'x'\n            number -= 100\n        elif number >= 90:\n            roman_numeral += 'ix'\n            number -= 90\n        elif number >= 50:\n            roman_numeral += 'l'\n            number -= 50\n        elif number >= 40:\n            roman_numeral += 'xi'\n            number -= 40\n        elif number >= 10:\n            roman_numeral += 'x'\n            number -= 10\n        elif number >= 9:\n            roman_numeral += 'ix'\n            number -= 9\n        elif number >= 5:\n            roman_numeral += 'v'\n            number -= 5\n        elif number >= 4:\n            roman_numeral +=", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        20: 'xx',\n        30: 'xxx',\n        40: 'xl',\n        50: 'l',\n        60: 'lx',\n        70: 'lxx',\n        80: 'lxxx',\n        90: 'cl',\n        100: 'c',\n        200: 'cc',\n        300: 'ccc',\n        400: 'cdx',\n        500: 'd',\n        600: 'dc',\n        700: 'dcc',\n        800: 'dcx',\n        900: 'cm',\n        1000:'m',\n    }\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_numeral_map[i]\n            number -= i\n        else:\n            break\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix',\n        20: 'xx',\n        21: 'xxi',\n        22: 'xxii',\n        23: 'xxiii',\n        24: 'xxiv',\n        25: 'xxv',\n        26: 'xxvi',\n        27: 'xxvii',\n        28: 'xxviii',\n        29: 'xxix',\n        30: 'xxx',\n        31: 'xxxi',\n        32: 'xxxii',\n        33: 'xxxiii',\n        34: 'xxxiv',\n        35: 'xxxv',\n        36: 'xxxvi',\n        37: 'xxxvii',\n        38: 'xxxviii',\n        39: 'xxxix',\n        40: 'xlx',\n        41: 'xl", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += str(i)\n            number -= i\n        if number == 0:\n            break\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(0, number):\n        roman_numeral += roman_numeral_map[i]\n    return roman_numeral.lower()\n\n\nroman_numeral_map = (\n    (1000,'m'),\n    (900, 'cm'),\n    (500, 'd'),\n    (400, 'cdvs'),\n    (100, 'c'),\n    (90, 'xc'),\n    (50, 'l'),\n    (40, 'xl'),\n    (10, 'x'),\n    (9, 'ix'),\n    (5, 'v'),\n    (4, 'iv'),\n    (1, 'i'),\n)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numerals)):\n        number -= 1\n        while number >= roman_numerals[i]:\n            roman_numeral += roman_numerals[i]\n            number -= roman_numerals[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000, 3):\n        if number >= i:\n            roman_numeral += 'i'\n            number -= i\n        elif number >= 1000 - i:\n            roman_numeral += 'ix'\n            number -= 1000 - i\n        elif number >= 900 - i:\n            roman_numeral += 'x'\n            number -= 900 - i\n        elif number >= 500 - i:\n            roman_numeral += 'l'\n            number -= 500 - i\n        elif number >= 400 - i:\n            roman_numeral += 'l'\n            number -= 400 - i\n        elif number >= 100 - i:\n            roman_numeral += 'c'\n            number -= 100 - i\n        elif number >= 90 - i:\n            roman_numeral += 'cc'\n            number -= 90 - i\n        elif number >= 50 - i:\n            roman_numeral += 'd'\n            number -= 50 - i\n        elif number >= 40 - i:\n            roman_numeral += 'd'\n            number -= 40 - i\n        elif number >= 10 - i:\n            roman_numeral +='m'\n            number -= 10 -", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000, 3):\n        if number >= i:\n            roman_numeral += 'i'\n            number -= i\n        if number >= 1000:\n            roman_numeral +='m'\n            number -= 1000\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n    if number > 1000:\n        raise ValueError('Number must be less than or equal to 1000')\n\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        roman_numeral += roman_numeral_map[i]\n\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be positive')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        number -= 1\n        while number >= ROMAN_NUMERAL[i]:\n            roman_numeral += ROMAN_NUMERAL[i]\n            number -= ROMAN_NUMERAL[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numerals)):\n        number -= 1\n        while number >= roman_numerals[i]:\n            roman_numeral += roman_numerals[i]\n            number -= roman_numerals[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000\")\n\n    roman_numeral = \"\"\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        number -= 1\n        while number >= ROMAN_NUMERAL[i]:\n            roman_numeral += ROMAN_NUMERAL[i]\n            number -= ROMAN_NUMERAL[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be > 0')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number < i:\n            roman_numeral += 'i'\n            number -= i\n        else:\n            roman_numeral += roman_numeral[i]\n            number -= i\n            i -= 1\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numerals)):\n        while number >= roman_numerals[i]:\n            number -= roman_numerals[i]\n            roman_numeral += roman_numerals[i - 1]\n\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be positive')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman = ''\n    for i in range(1000, 0, -1):\n        if number >= i:\n            roman += roman[i]\n            number -= i\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        number -= 1\n        if number < 0:\n            number += 1000\n            roman_numeral +='m'\n        else:\n            roman_numeral += roman_numeral[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman = []\n    for i in range(1000):\n        roman.append('M' + str(i % 10) + 'CM')\n    roman.append('M' + str(number % 10) + 'D' + str(number // 10) + 'CM')\n\n    return ''.join(roman).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n\n    roman_numeral = ''\n    for numeral, integer in zip(ROMAN_NUMERAL, range(1000, 0, -1)):\n        while number >= integer:\n            number -= integer\n            roman_numeral += numeral\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        number -= 1\n        if number < 1:\n            roman_numeral += 'i'\n            number += 4\n        elif number == 1:\n            roman_numeral += 'i'\n        elif number == 2:\n            roman_numeral += 'ii'\n        elif number == 3:\n            roman_numeral += 'iii'\n        elif number == 4:\n            roman_numeral += 'iv'\n        elif number == 5:\n            roman_numeral += 'v'\n        elif number == 6:\n            roman_numeral += 'vi'\n        elif number == 7:\n            roman_numeral += 'vii'\n        elif number == 8:\n            roman_numeral += 'viii'\n        elif number == 9:\n            roman_numeral += 'ix'\n        elif number == 10:\n            roman_numeral += 'x'\n        elif number == 11:\n            roman_numeral += 'xi'\n        elif number == 12:\n            roman_numeral += 'xii'\n        elif number == 13:\n            roman_numeral += 'xiii'\n        elif number == 14:\n            roman_numeral += 'xiv'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        number -= 1\n        if number < 1:\n            roman_numeral += 'i'\n            number += 4\n        elif number == 1:\n            roman_numeral += 'i'\n        elif number == 2:\n            roman_numeral += 'ii'\n        elif number == 3:\n            roman_numeral += 'iii'\n        elif number == 4:\n            roman_numeral += 'iv'\n        elif number == 5:\n            roman_numeral += 'v'\n        elif number == 6:\n            roman_numeral += 'vi'\n        elif number == 7:\n            roman_numeral += 'vii'\n        elif number == 8:\n            roman_numeral += 'viii'\n        elif number == 9:\n            roman_numeral += 'ix'\n        elif number == 10:\n            roman_numeral += 'x'\n        elif number == 11:\n            roman_numeral += 'xi'\n        elif number == 12:\n            roman_numeral += 'xii'\n        elif number == 13:\n            roman_numeral += 'xiii'\n        elif number == 14:\n            roman_numeral += 'xiv'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        number -= 1\n        if number < 0:\n            number += len(ROMAN_NUMERAL)\n            roman_numeral += ROMAN_NUMERAL[i]\n        else:\n            roman_numeral += ROMAN_NUMERAL[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        if number >= 1000:\n            roman_numeral += 'cm'\n            number -= 1000\n        elif number >= 900:\n            roman_numeral += 'cdx'\n            number -= 900\n        elif number >= 500:\n            roman_numeral += 'dc'\n            number -= 500\n        elif number >= 400:\n            roman_numeral += 'cc'\n            number -= 400\n        elif number >= 100:\n            roman_numeral += 'cl'\n            number -= 100\n        elif number >= 90:\n            roman_numeral += 'xcd'\n            number -= 90\n        elif number >= 50:\n            roman_numeral += 'cc'\n            number -= 50\n        elif number >= 40:\n            roman_numeral += 'xc'\n            number -= 40\n        elif number >= 10:\n            roman_numeral += 'x'\n            number -= 10\n        elif number >= 9:\n            roman_numeral += 'ix'\n            number -= 9\n        elif number >= 5:\n            roman_numeral += 'vi'\n            number -= 5\n        elif number >= 4:\n            roman_num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        if number % i == 0:\n            roman_numeral += str(i)\n        else:\n            roman_numeral += str(number % i)\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        roman_numeral += roman_numeral_map[i]\n    return roman_numeral.lower()\n\n\nroman_numeral_map = {\n    1: 'I',\n    2: 'II',\n    3: 'III',\n    4: 'IV',\n    5: 'V',\n    6: 'VI',\n    7: 'VII',\n    8: 'VIII',\n    9: 'IX',\n    10: 'X',\n    20: 'XX',\n    30: 'XXX',\n    40: 'XL',\n    50: 'L',\n    60: 'LX',\n    70: 'LXX',\n    80: 'LXXX',\n    90: 'XC',\n    100: 'C',\n    500: 'D',\n    1000: 'M'\n}", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n\n    roman_numeral = \"\"\n    for i in range(len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"num must be >= 1\")\n    if number > 1000:\n        raise ValueError(\"num must be <= 1000\")\n\n    roman_numeral = \"\"\n    for i in range(0, number):\n        roman_numeral += roman_numeral_map[i]\n    return roman_numeral.lower()\n\n\nroman_numeral_map = (\n    (1000, \"m\"),\n    (900, \"cm\"),\n    (500, \"d\"),\n    (400, \"cd\"),\n    (100, \"c\"),\n    (90, \"xc\"),\n    (50, \"l\"),\n    (40, \"xl\"),\n    (10, \"x\"),\n    (9, \"ix\"),\n    (5, \"v\"),\n    (4, \"iv\"),\n    (1, \"i\"),\n)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        if number >= 1000:\n            number -= 1000\n            roman_numeral +='m'\n        elif number >= 900:\n            number -= 900\n            roman_numeral += 'cm'\n        elif number >= 500:\n            number -= 500\n            roman_numeral += 'd'\n        elif number >= 400:\n            number -= 400\n            roman_numeral += 'cdvs'\n        elif number >= 100:\n            number -= 100\n            roman_numeral += 'x'\n        elif number >= 90:\n            number -= 90\n            roman_numeral += 'xcix'\n        elif number >= 50:\n            number -= 50\n            roman_numeral += 'l'\n        elif number >= 40:\n            number -= 40\n            roman_numeral += 'cl'\n        elif number >= 10:\n            number -= 10\n            roman_numeral += 'x'\n        elif number >= 9:\n            number -= 9\n            roman_numeral += 'ix'\n        elif number >= 5:\n            number -= 5\n            roman_numeral += 'v'\n        elif number >= 4:\n            number -= 4\n            roman_num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman += roman[i]\n            number -= i\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n\n    roman_numerals = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        20: 'xx',\n        30: 'xxx',\n        40: 'xl',\n        50: 'l',\n        60: 'lx',\n        70: 'lxx',\n        80: 'lxxx',\n        90: 'cl',\n        100: 'c',\n        200: 'cc',\n        300: 'ccc',\n        400: 'cdx',\n        500: 'd',\n        600: 'dc',\n        700: 'dcc',\n        800: 'dcx',\n        900: 'cm',\n        1000:'m',\n    }\n\n    result = ''\n    for i in range(1, 1000, 100):\n        if number >= i:\n            result += roman_numerals[i]\n            number -= i\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix',\n        20: 'xx',\n        21: 'xxi',\n        22: 'xxii',\n        23: 'xxiii',\n        24: 'xxiv',\n        25: 'xxv',\n        26: 'xxvi',\n        27: 'xxvii',\n        28: 'xxviii',\n        29: 'xxix',\n        30: 'xxx',\n        31: 'xxxi',\n        32: 'xxxii',\n        33: 'xxxiii',\n        34: 'xxxiv',\n        35: 'xxxv',\n        36: 'xxxvi',\n        37: 'xxxvii',\n        38: 'xxxviii',\n        39: 'xxxix',\n        40: 'xlx',\n        41: 'xl", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        number -= ROMAN_NUMERAL[i]\n        if number < 0:\n            roman_numeral += ROMAN_NUMERAL[i]\n            number = 0\n        else:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        number -= 1\n        if number < 1:\n            roman_numeral += 'i'\n            number += 4\n        elif number == 1:\n            roman_numeral += 'i'\n        elif number == 2:\n            roman_numeral += 'ii'\n        elif number == 3:\n            roman_numeral += 'iii'\n        elif number == 4:\n            roman_numeral += 'iv'\n        elif number == 5:\n            roman_numeral += 'v'\n        elif number == 6:\n            roman_numeral += 'vi'\n        elif number == 7:\n            roman_numeral += 'vii'\n        elif number == 8:\n            roman_numeral += 'viii'\n        elif number == 9:\n            roman_numeral += 'ix'\n        elif number == 10:\n            roman_numeral += 'x'\n        elif number == 11:\n            roman_numeral += 'xi'\n        elif number == 12:\n            roman_numeral += 'xii'\n        elif number == 13:\n            roman_numeral += 'xiii'\n        elif number == 14:\n            roman_numeral += 'xiv'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman = []\n    for i in range(len(ROMAN_NUMERALS)):\n        while number >= ROMAN_NUMERALS[i]:\n            number -= ROMAN_NUMERALS[i]\n            roman.append(ROMAN_LETTERS[i])\n    return ''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman = ''\n    for i in range(len(roman_numeral_map)):\n        while number >= roman_numeral_map[i]:\n            number -= roman_numeral_map[i]\n            roman += roman_numeral_map[i]\n\n    return roman.lower()\n\n\nroman_numeral_map = (\n    (1000,'m'),\n    (900, 'cm'),\n    (500, 'd'),\n    (400, 'cdm'),\n    (100, 'c'),\n    (90, 'xc'),\n    (50, 'l'),\n    (40, 'xl'),\n    (10, 'x'),\n    (9, 'ix'),\n    (5, 'v'),\n    (4, 'iv'),\n    (1, 'i'),\n)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman = ''\n    for i in range(len(ROMAN_NUMERALS)):\n        while number >= ROMAN_NUMERALS[i]:\n            number -= ROMAN_NUMERALS[i]\n            roman += ROMAN_LETTERS[i]\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman = ''\n    for i in range(0, number):\n        roman += roman[i]\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        roman_numeral += roman_numeral_map[i]\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero')\n\n    roman_nums = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n    roman_numeral = ''\n    for numeral, integer in zip(roman_nums, range(len(roman_nums))):\n        while number >= integer:\n            number -= integer\n            roman_numeral += numeral\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"num must be >= 1\")\n\n    if number == 1:\n        return 'i'\n\n    roman = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman += chr(i + (ord('a') - 1))\n        number -= i\n\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n    if number > 1000:\n        raise ValueError('Number must be less than or equal to 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman[i]\n            number -= i\n        if number == 0:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be <= 1000\")\n\n    roman = \"\"\n    for i in range(len(roman)):\n        number -= 1\n        if number < 1:\n            roman += 'x'\n            number = 1\n        else:\n            roman += roman[i]\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix',\n        20: 'xx',\n        21: 'xxi',\n        22: 'xxii',\n        23: 'xxiii',\n        24: 'xxiv',\n        25: 'xxv',\n        26: 'xxvi',\n        27: 'xxvii',\n        28: 'xxviii',\n        29: 'xxix',\n        30: 'xxx',\n        31: 'xxxi',\n        32: 'xxxii',\n        33: 'xxxiii',\n        34: 'xxxiv',\n        35: 'xxxv',\n        36: 'xxxvi',\n        37: 'xxxvii',\n        38: 'xxxviii',\n        39: 'xxxix',\n        40: 'xlx',\n        41: 'xlxi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n\n    if number < 100:\n        return str(number) + 'i'\n\n    if number < 1000:\n        number -= 100\n        return str(number / 10) + 'l' + str(number % 10) + 'c'\n\n    number -= 1000\n    number /= 100\n    return str(number / 10) + 'x' + str(number % 10) + 'd'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000\")\n\n    roman = \"\"\n    for i in range(len(roman_numeral_map)):\n        number -= roman_numeral_map[i]\n        if number < 0:\n            number += roman_numeral_map[i + 1]\n            roman += roman_numeral_map[i]\n    return roman\n\n\nroman_numeral_map = (\n    (1000, \"m\"),\n    (900, \"cm\"),\n    (500, \"d\"),\n    (400, \"cd\"),\n    (100, \"c\"),\n    (90, \"xc\"),\n    (50, \"l\"),\n    (40, \"xl\"),\n    (10, \"x\"),\n    (9, \"ix\"),\n    (5, \"v\"),\n    (4, \"iv\"),\n    (1, \"i\"),\n)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n\n    roman_numeral = ''\n    for i in range(0, len(ROMAN_NUMERAL)):\n        number -= 1\n        while number >= ROMAN_NUMERAL[i]:\n            roman_numeral += ROMAN_NUMERAL[i]\n            number -= ROMAN_NUMERAL[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix',\n        20: 'xx',\n        21: 'xxi',\n        22: 'xxii',\n        23: 'xxiii',\n        24: 'xxiv',\n        25: 'xxv',\n        26: 'xxvi',\n        27: 'xxvii',\n        28: 'xxviii',\n        29: 'xxix',\n        30: 'xxx',\n        31: 'xxxi',\n        32: 'xxxii',\n        33: 'xxxiii',\n        34: 'xxxiv',\n        35: 'xxxv',\n        36: 'xxxvi',\n        37: 'xxxvii',\n        38: 'xxxviii',\n        39: 'xxxix',\n        40: 'xlx',\n        41: 'xlxi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(0, number):\n        roman_numeral += roman_numeral_map[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n    if number > 1000:\n        raise ValueError('Number must be less than or equal to 1000')\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        while number >= ROMAN_NUMERAL[i]:\n            number -= ROMAN_NUMERAL[i]\n            roman_numeral += ROMAN_NUMERAL[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be > 0')\n\n    if number < 100:\n        return chr(ord('a') + number - 1) + chr(ord('a') + number - 1)[::-1]\n    elif number < 1000:\n        return chr(ord('a') + number / 100 - 1) + chr(ord('a') + number % 100 - 1)[::-1]\n    else:\n        return chr(ord('a') + number / 1000 - 1) + chr(ord('a') + number % 1000 - 1) + chr(ord('a') + number % 1000 - 1)[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        if number >= 1000:\n            roman_numeral +='mmmm'\n            number -= 1000\n        elif number >= 900:\n            roman_numeral +='mm'\n            number -= 900\n        elif number >= 500:\n            roman_numeral +='m'\n            number -= 500\n        elif number >= 400:\n            roman_numeral += 'cm'\n            number -= 400\n        elif number >= 100:\n            roman_numeral += 'x'\n            number -= 100\n        elif number >= 90:\n            roman_numeral += 'ix'\n            number -= 90\n        elif number >= 50:\n            roman_numeral += 'l'\n            number -= 50\n        elif number >= 40:\n            roman_numeral += 'xi'\n            number -= 40\n        elif number >= 10:\n            roman_numeral += 'x'\n            number -= 10\n        elif number >= 9:\n            roman_numeral += 'ix'\n            number -= 9\n        elif number >= 5:\n            roman_numeral += 'v'\n            number -= 5\n        elif number >= 4:\n            roman_numeral +=", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numerals)):\n        while number >= roman_numerals[i]:\n            number -= roman_numerals[i]\n            roman_numeral += roman_numerals[i - 1]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n    if number > 1000:\n        raise ValueError('Number must be less than or equal to 1000')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n        number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        roman_numeral += roman_numeral_map[number % 10]\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_numeral = ''\n    for i in range(len(roman_numeral)):\n        number -= 1\n        if number < 1:\n            roman_numeral += 'x'\n            number = number * 10\n        else:\n            roman_numeral += roman_numeral[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n        else:\n            break\n    return roman_numeral.lower()"]]