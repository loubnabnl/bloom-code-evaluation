[["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Validate input\n    if not isinstance(number, int):\n        raise TypeError(\"Number must be an integer\")\n    elif number < 1:\n        raise ValueError(\"Number must be positive\")\n    elif number > 1000:\n        raise ValueError(\"Number must be less than 1000\")\n\n    result = \"\"\n    for digit in range(1, 1000, 3):\n        if number < digit:\n            break\n        result += mini_roman[number // digit]\n        number -= (number // digit) * digit\n\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('Number must be between 1 and 1000')\n\n    roman_numeral = ''\n    for digit in str(number):\n        if digit == '1':\n            roman_numeral += 'i'\n        elif digit == '2':\n            roman_numeral += 'ii'\n        elif digit == '3':\n            roman_numeral += 'iii'\n        elif digit == '4':\n            roman_numeral += 'iv'\n        elif digit == '5':\n            roman_numeral += 'v'\n        elif digit == '6':\n            roman_numeral += 'vi'\n        elif digit == '7':\n            roman_numeral += 'vii'\n        elif digit == '8':\n            roman_numeral += 'viii'\n        elif digit == '9':\n            roman_numeral += 'ix'\n        else:\n            roman_numeral += 'x'\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # convert to roman numerals\n    roman_numeral = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman_numeral += roman_number[i]\n            number -= i\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be greater than 0.\")\n\n    roman_numeral_map = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cdvd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i',\n    }\n\n    result = ''\n    for i in xrange(1, number + 1):\n        result += roman_numeral_map[i]\n\n    return result[:-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number <= 0:\n        return ''\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number >= 4 and number <= 12:\n        return str(number) + 'iv'\n    if number == 13:\n        return 'vi'\n    if number == 14:\n        return 'vii'\n    if number >= 15 and number <= 30:\n        return str(number) + 'ix'\n    if number == 31:\n        return 'x'\n    if number == 32:\n        return 'xx'\n    if number == 33:\n        return 'xxx'\n    if number >= 34 and number <= 60:\n        return str(number) + 'l'\n    if number == 61:\n        return 'lx'\n    if number == 62:\n        return 'lxx'\n    if number >= 63 and number <= 90:\n        return str(number) + 'c'\n    if number == 91:\n        return 'cl'\n    if number == 92:\n        return 'clx'\n    if number >= 93 and number <= 99:\n        return str(number) + 'ix'\n    if number == 100:\n        return 'cc'\n    if number == 101:\n        return 'ccx'\n    if number == 102:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = \"\"\n    for numeral, integer in ROMANS:\n        while number >= integer:\n            result += numeral\n            number -= integer\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = ''\n    for integer, numeral in enumerate(ROMAN_NUMERALS):\n        while number >= integer:\n            result += numeral\n            number -= integer\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Valid values of i, v, x, l, c, d, m, and n are 1, 5, 10, 50, 100, 500, 1000, and 5000 respectively.\n    if number <= 0:\n        raise ValueError('Number must be positive.')\n    if number >= 5000:\n        return str(number)\n    if number == 1:\n        return 'i'\n    if number == 5:\n        return 'v'\n    if number == 10:\n        return 'x'\n    if number == 50:\n        return 'l'\n    if number == 100:\n        return 'c'\n    if number == 500:\n        return 'd'\n    if number == 1000:\n        return'm'\n    if number == 5000:\n        return 'n'\n    # Now, we need to know how many thousands, hundreds, tens, etc, are in the number.\n    # The way to do that is to write the number in a certain form and then use the\n    # fact that roman numerals are additive, so we can add the exponents together.\n    # In this case, we'll use the form a^b * c^d * e^f * g^h * i^j * k^k, where the a's\n    # are the thousands, the c's are the hundreds, the e's are the tens", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        raise ValueError('num must be > 0, not %d' % number)\n    if number > 1000:\n        raise ValueError('num must be <= 1000, not %d' % number)\n\n    # An array of all the roman numerals up to 1000 in mini_roman\n    roman_numerals = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix', 'xx', 'xxi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii']\n\n    # Convert integer to roman numerals\n    result = ''\n    for numeral in roman_numerals:\n        if number >= numeral:\n            result += numeral\n            number -= numeral\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_nums = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cdvs',\n        100: 'c',\n        90: 'cc',\n        50: 'l',\n        40: 'cl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i',\n    }\n\n    if number < 1:\n        raise ValueError('Invalid input: number must be >= 1')\n\n    result = \"\"\n    for num in roman_nums.keys():\n        while number >= num:\n            result += roman_nums[num]\n            number -= num\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('invalid number:'+ str(number))\n    roman_numeral_map = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000:'m',\n    }\n    result = ''\n    for i in range(1, 1000, number % 100 + 1):\n        result += roman_numeral_map[i]\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral_map = {1:'i', 2:'ii', 3:'iii', 4:'iv', 5:'v', 6:'vi', 7:'vii', 8:'viii', 9:'ix', 10:'x', 11:'xi', 12:'xii', 13:'xiii', 14:'xiv', 15:'xv', 16:'xvi', 17:'xvii', 18:'xviii', 19:'xix', 20:'xx', 30:'xx', 40:'xl', 50:'xc', 60:'xc', 70:'xl', 80:'xc', 90:'xl', 100:'c'}\n    roman_numeral = ''\n    while number > 0:\n        roman_numeral += roman_numeral_map[number % 10]\n        number //= 10\n    return roman_numeral.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    if number == 1:\n        return 'i'\n\n    roman_numeral = ''\n\n    while number > 0:\n        number, i = divmod(number, 10)\n        roman_numeral += chr(i + ord('iv'))\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        raise ValueError('number must be positive')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number < 100:\n        return str(number) + (int_to_mini_roman(number // 10) or '')\n    if number < 1000:\n        return int_to_mini_roman(number // 100) + (int_to_mini_roman(number % 100) or '')\n    return int_to_mini_roman(number // 1000) + (int_to_mini_roman(number % 1000) or '')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    result = []\n    for i in range(len(roman_numeral_map)):\n        number -= roman_numeral_map[i]\n        if number < 0:\n            result.append(roman_numeral_map[i])\n            number = 0\n    return ''.join(result)\n\n\nroman_numeral_map = (\n    (1000,'m'),\n    (900, 'cm'),\n    (500, 'd'),\n    (400, 'cdm'),\n    (100, 'c'),\n    (90, 'xc'),\n    (50, 'l'),\n    (40, 'xl'),\n    (10, 'x'),\n    (9, 'ix'),\n    (5, 'v'),\n    (4, 'iv'),\n    (1, 'i'),\n)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be greater than 0.\")\n\n    roman = \"\"\n\n    for i in range(0, 3):\n        number, rem = divmod(number, 1000)\n        roman += chr(ord('m') + rem)\n\n    number, rem = divmod(number, 100)\n    roman += chr(ord('d') + rem)\n\n    number, rem = divmod(number, 10)\n    roman += chr(ord('x') + rem)\n\n    number, rem = divmod(number, 1)\n    roman += chr(ord('i') + rem)\n\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    result = \"\"\n    for i in range(1000, 0, -1):\n        if number >= i:\n            result += mini_roman[i]\n            number -= i\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be > 0')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n    if number == 1:\n        return 'i'\n    elif number == 2:\n        return 'ii'\n    elif number == 3:\n        return 'iii'\n    elif number < 7:\n        return str(number) + 'i'\n    elif number < 14:\n        return str(number) + 'ii'\n    elif number < 21:\n        return str(number) + 'iii'\n    elif number < 40:\n        return str(number) + 'iv'\n    elif number < 60:\n        return str(number) + 'v'\n    elif number < 80:\n        return str(number) + 'vi'\n    elif number < 100:\n        return str(number) + 'vii'\n    elif number < 140:\n        return str(number) + 'viii'\n    elif number < 180:\n        return str(number) + 'ix'\n    elif number < 220:\n        return str(number) + 'x'\n    elif number < 280:\n        return str(number) + 'xx'\n    elif number < 360:\n        return str(number) + 'xx'\n    elif number < 420:\n        return str(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError('number must be an integer between 1 and 1000')\n\n    roman = []\n    for i in range(1000):\n        roman.append(['M', 1000])\n        roman.append(['CM', 900])\n        roman.append(['D', 500])\n        roman.append(['CD', 400])\n        roman.append(['C', 100])\n        roman.append(['XC', 90])\n        roman.append(['L', 50])\n        roman.append(['XL', 40])\n        roman.append(['X', 10])\n        roman.append(['IX', 9])\n        roman.append(['V', 5])\n        roman.append(['IV', 4])\n        roman.append(['I', 1])\n\n    result = ''\n    for i in range(1, number + 1):\n        for j in roman:\n            while j[1] <= i:\n                result += j[0]\n                j = j[1]\n    return result.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def to_roman(num, roman):\n        \"\"\"\n        Given a roman numeral and a number, returns the roman numeral for that number.\n        \"\"\"\n        for i, v in enumerate(roman):\n            if v == roman[-1]:\n                roman = roman[:i] + str(num - sum(roman[i:]))\n                break\n            else:\n                num -= v - roman[i-1]\n        return roman\n\n    if number < 1:\n        return ''\n    roman = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii']\n    roman.extend(['ix', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii'])\n    roman.extend(['xviii', 'xix', 'xx', 'xxi', 'xxii', 'xxiii', 'xxiv', 'xxv'])\n    roman.extend(['xxvi', 'xxvii'])\n    roman.extend(['xxviii', 'xxix', 'xxx', 'xxxi', 'xxxii', 'xxxiii', 'xxxiv', 'xxxv'])\n    roman.", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1:\n        raise ValueError('Invalid input')\n    elif number == 1:\n        return 'i'\n    elif number == 2:\n        return 'ii'\n    elif number == 3:\n        return 'iii'\n    elif number < 7:\n        return str(number) + 'iv'\n    elif number == 7:\n        return 'vii';\n    elif number < 14:\n        return str(number) + 'vi'\n    elif number == 14:\n        return 'xxiv';\n    elif number < 21:\n        return str(number) + 'ix'\n    elif number == 21:\n        return 'xxxi';\n    elif number < 28:\n        return str(number) + 'x'\n    elif number == 28:\n        return 'xxxviii';\n    elif number < 40:\n        return str(number) + 'l'\n    elif number == 40:\n        return 'xl';\n    elif number < 48:\n        return str(number) + 'l'\n    elif number == 48:\n        return 'xli';\n    elif number < 56:\n        return str(number) + 'cl'\n    elif number == 56:\n        return 'clii';\n    elif number < 70:\n        return str(number) + 'xc'\n    elif number == 70:\n        return '", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('Invalid input')\n\n    roman_numeral = ''\n    while number!= 0:\n        number, remainder = divmod(number, 1000)\n        roman_numeral += roman_char[remainder]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        return ''\n\n    roman_nums = ['i','ii','iii','iv','v','vi','vii','viii','ix','x','xi','xii','xiii','xiv','xv','xvi','xvii']\n    roman_nums += ['xvii', 'xviii', 'xix', 'xx', 'xxi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii']\n    roman_nums += ['xxviii', 'xxix', 'xxx', 'xl', 'li', 'lxx', 'lxxx', 'xcx', 'cx', 'cc', 'cd']\n    roman_nums += ['cd', 'd', 'dc', 'dd', 'cm','mm','mmm','m','mmmm']\n\n    if number < len(roman_nums):\n        return roman_nums[number]\n    else:\n        return roman_nums[number - 1] + str(int(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Base case\n    if number == 1:\n        return 'i'\n\n    # Algorithm\n    result = ''\n    for i in range(1, 1000, 3):\n        if number >= i:\n            number -= i\n            result += 'cm'\n        else:\n            result += 'd'\n\n    result += chr(number + 100)\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 1:\n        return 'i'\n    if number < 1:\n        raise ValueError('number must be >= 1')\n    if number <= 19:\n        return roman_to_int(number)[1]\n    if number <= 99:\n        return roman_to_int(number)[2]\n    if number <= 199:\n        return roman_to_int(number)[3]\n    if number <= 999:\n        return roman_to_int(number)[4]\n    if number <= 1999:\n        return roman_to_int(number)[5]\n    if number <= 9999:\n        return roman_to_int(number)[6]\n    if number <= 19999:\n        return roman_to_int(number)[7]\n    if number <= 99999:\n        return roman_to_int(number)[8]\n    if number <= 199999:\n        return roman_to_int(number)[9]\n    if number <= 999999:\n        return roman_to_int(number)[10]\n    if number <= 1999999:\n        return roman_to_int(number)[11]\n    if number <= 9999999:\n        return roman_to_int(number)[12]\n    if number <= 19999999:\n        return roman_to_int(number)[13]\n    if number <= 999999999:\n        return roman_to_int(number)[14]\n    return roman_to_int(number)[15]\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"num must be >= 1\")\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix',\n        20: 'xx',\n        21: 'xxi',\n        22: 'xxii',\n        23: 'xxiii',\n        24: 'xxiv',\n        25: 'xxv',\n        26: 'xxvi',\n        27: 'xxvii',\n        28: 'xxviii',\n        29: 'xxix',\n        30: 'xxx',\n        31: 'xxxi',\n        32: 'xxxii',\n        33: 'xxxiii',\n        34: 'xxxiv',\n        35: 'xxxv',\n        36: 'xxxvi',\n        37: 'xxxvii',\n        38: 'xxxviii',\n        39: 'xxxix',\n        40: 'xlx',\n        41: 'xlxi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 0 < number <= 1000:\n        raise ValueError('Number must be between 1 and 1000')\n    result = ''\n    for i in range(len(roman_numeral_map)):\n        count = roman_numeral_map.get(str(number // i))\n        if count:\n            result += roman_numeral_map.get(str(count))\n            number %= i\n            break\n    return result\n\nroman_numeral_map = {\n    'M': 1000,\n   'm': 900,\n    'CM': 900,\n    'MC': 900,\n    'D': 500,\n    'd': 400,\n    'CD': 400,\n    'DC': 400,\n    'C': 100,\n    'c': 90,\n    'XC': 90,\n    'XL': 90,\n    'L': 50,\n    'l': 40,\n    'XL': 40,\n    'X': 10,\n    'x': 9,\n    'IX': 9,\n    'V': 5,\n    'v': 4,\n    'IV': 4,\n    'I': 1\n}\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0')\n\n    roman = []\n    for i in range(1, 1000):\n        roman.append(_roman_numerals[i])\n\n    number = str(number)\n    for i in range(len(number) - 1, 0, -1):\n        number = number[:i] + number[i - 1:]\n\n    return roman[int(number) - 1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(int(number))\n    result = \"\"\n    while number!= 0:\n        number, i = divmod(number, 1000)\n        result = str(i) + result\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    def to_roman(n):\n        retval = \"\"\n        for i in range(3, 0, -1):\n            retval = retval + roman[i] * (n // roman[i]) if n > 0 else \"\"\n            n = n % roman[i]\n        return retval\n\n    if number < 1:\n        raise ValueError('Invalid number')\n    if number > 1000:\n        raise ValueError('Invalid number')\n\n    retval = to_roman(number)\n    retval = retval.lower()\n    return retval", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('Input must be in the range 1 to 1000')\n\n    roman_numeral = \"\"\n    for numeral, integer in zip(ROMAN_NUMERAL, range(1000, 1, -1)):\n        while number >= integer:\n            roman_numeral += numeral\n            number -= integer\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert 1 <= number <= 1000, \"Error: number must be between 1 and 1000\"\n\n    # Find the largest power of ten that is less than or equal to the given number.\n    # If the number is less than ten, return the number unchanged.\n    tens = number / 10\n    ones = number % 10\n    if ones == 0:\n        return chr(tens + ord('a'))\n\n    # Find the largest power of five that is less than or equal to the given number.\n    # If the number is less than five, return the number unchanged.\n    fives = number / 5\n    if fives == 0:\n        return chr(tens + ord('a')) + chr(ones + ord('i'))\n\n    # Find the largest power of ten that is less than or equal to the given number.\n    # If the number is less than ten, return the number unchanged.\n    tens = number / 10\n    if tens == 0:\n        return chr(fives + ord('v'))\n\n    # Find the largest power of five that is less than or equal to the given number.\n    # If the number is less than five, return the number unchanged.\n    fives = number / 5\n    if fives == 0:\n        return chr(tens + ord('x')) + chr(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive.\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000.\")\n\n    roman = \"\"\n    for digit in str(number):\n        if digit == '1':\n            roman += 'i'\n        elif digit == '2':\n            roman += 'ii'\n        elif digit == '3':\n            roman += 'iii'\n        elif digit == '4':\n            roman += 'iv'\n        elif digit == '5':\n            roman += 'v'\n        elif digit == '6':\n            roman += 'vi'\n        elif digit == '7':\n            roman += 'vii'\n        elif digit == '8':\n            roman += 'viii'\n        elif digit == '9':\n            roman += 'ix'\n        elif digit == '0':\n            roman += 'x'\n        else:\n            raise ValueError(\"Number must be less than 1000.\")\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not (1 <= number <= 1000):\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n    if number == 1:\n        return 'i'\n    elif number == 2:\n        return 'ii'\n    elif number == 3:\n        return 'iii'\n    elif number == 4:\n        return 'iv'\n    elif number == 5:\n        return 'v'\n    elif number == 6:\n        return 'vi'\n    elif number == 7:\n        return 'vii'\n    elif number == 8:\n        return 'viii'\n    elif number == 9:\n        return 'ix'\n    elif number >= 10:\n        return str(number) + 'x'\n    elif number == 100:\n        return 'cc'\n    elif number == 200:\n        return 'cdc'\n    elif number == 300:\n        return 'dcc'\n    elif number == 400:\n        return 'cmc'\n    elif number == 500:\n        return 'd'\n    elif number == 600:\n        return 'dc'\n    elif number == 700:\n        return 'cm'\n    elif number == 800:\n        return 'd'\n    elif number == 900:\n        return 'cd'\n    else:\n        raise ValueError(\"Number must be between 1 and 1000\")\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix')\n    roman_numbers = dict(zip(roman_numerals, range(10)))\n    result = ''\n\n    def _convert(num):\n        \"\"\"\n        Convert a positive integer to its roman numeral equivalent.\n        \"\"\"\n        if num == 0:\n            return ''\n        if num < 0:\n            raise ValueError('num must be non-negative')\n        if num == 1:\n            return roman_numbers['i']\n        if num == 2:\n            return roman_numbers['ii']\n        if num == 3:\n            return roman_numbers['iii']\n        if num == 4:\n            return roman_numbers['iv']\n        if num == 5:\n            return roman_numbers['v']\n        if num == 6:\n            return roman_numbers['vi']\n        if num == 7:\n            return roman_numbers['vii']\n        if num == 8:\n            return roman_numbers['viii']\n        if num == 9:\n            return roman_numbers['ix']\n        return roman_numbers[str(num)]\n\n    result = ''\n    while num > 0:\n        result = _convert(num % 10) +", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # roman numerals\n    roman_numeral_map = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000:'m'}\n    roman_numeral = roman_numeral_map[number]\n    roman_numeral = roman_numeral.lower()\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        raise ValueError('number must be positive')\n    if number < 100:\n        return chr(ord('a') + number)\n    elif number < 1000:\n        return chr(ord('i') + (number / 100)) + chr(ord('v') + (number % 100))\n    elif number < 10000:\n        return chr(ord('x') + (number / 1000)) + chr(ord('i') + (number % 1000))\n    else:\n        return chr(ord('d') + (number / 10000)) + chr(ord('x') + (number % 10000)) + chr(ord('i') + (number % 1000))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    if number < 1 or number > 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n    roman = ['', 'i', 'v', 'x', 'l', 'c', 'd','m']\n    roman_numeral = []\n\n    for numeral, integer in zip(roman, range(len(roman))):\n        while number >= integer:\n            number -= integer\n            roman_numeral.append(numeral)\n\n    return ''.join(reversed(roman_numeral)).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def to_roman(number):\n        if number < 1000:\n            return roman_numerals[number]\n        result = \"\"\n        for i in range(1000, number + 1, 1000):\n            result += roman_numerals[i]\n        return result[::-1]\n\n    roman_numerals = ('M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I')\n    return to_roman(number)[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 1:\n        return 'i'\n    elif number == 2:\n        return 'ii'\n    elif number == 3:\n        return 'iii'\n    elif number < 10:\n        return str(number)\n    elif number < 100:\n        return str(number) + 'd'\n    elif number < 1000:\n        number -= 100\n        if number % 10 == 1:\n            return str(number) + 'c'\n        elif number % 10 == 2:\n            return str(number) + 'ci'\n        elif number % 10 == 3:\n            return str(number) + 'iii'\n        elif number % 10 == 4:\n            return str(number) + 'iv'\n        elif number % 10 == 5:\n            return str(number) + 'v'\n        elif number % 10 == 6:\n            return str(number) + 'vi'\n        elif number % 10 == 7:\n            return str(number) + 'vii'\n        elif number % 10 == 8:\n            return str(number) + 'viii'\n        elif number % 10 == 9:\n            return str(number) + 'ix'\n        else:\n            return str(number) + 'x'\n    else:\n        return str(number) + 'c'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('int_to_mini_roman() expects a positive integer')\n    if number >= 1000:\n        raise ValueError('int_to_mini_roman() expects a number <= 1000')\n\n    result = ''\n    for numeral, integer in mini_roman_numerals.items():\n        while number >= integer:\n            number -= integer\n            result += numeral\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # https://stackoverflow.com/questions/4989147/converting-decimal-to-roman-numerals\n\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n\n    if number == 1:\n        return 'i'\n\n    if number < 50:\n        return str(number) + 'i'\n\n    if number < 100:\n        return str(number // 10) + 'i' + str(number % 10)\n\n    if number < 500:\n        return str(number // 100) + 'x' + str(number % 100)\n\n    if number < 1000:\n        return str(number // 500) + 'l' + str(number % 500)\n\n    if number < 5000:\n        return str(number // 1000) + 'c' + str(number % 1000)\n\n    if number < 10000:\n        return str(number // 5000) + 'd' + str(number % 5000)\n\n    if number < 50000:\n        return str(number // 10000) +'m' + str(number % 10000)\n\n    if number < 100000:\n        return str(number // 50000) + 'cm' + str(number % 50000)\n\n    if number < 500000:\n        return str(number // 100000) + 'd' + str(number % 100000)\n\n    if number < 1000000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert 1 <= number <= 1000, \"Number must be between 1 and 1000\"\n\n    roman_nums = ['c', 'd', 'l', 'x', 'v', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix']\n\n    result = []\n    for numeral, integer in zip(roman_nums, range(1, 10)):\n        while number >= integer:\n            result.append(numeral)\n            number -= integer\n\n    return \"\".join(result).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000\")\n\n    result = \"\"\n    for i in range(len(roman_numerals)):\n        number -= roman_numerals[i]\n        if number < 0:\n            result += roman_numerals[i]\n            number += roman_numerals[i+1]\n\n    return result\n\n\nroman_numerals = (\n    (1000,'m'),\n    (900, 'cm'),\n    (500, 'd'),\n    (400, 'cdm'),\n    (100, 'c'),\n    (90, 'xc'),\n    (50, 'l'),\n    (40, 'xl'),\n    (10, 'x'),\n    (9, 'ix'),\n    (5, 'v'),\n    (4, 'iv'),\n    (1, 'i')\n)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"num must be >= 1\")\n\n    if number < 20:\n        return chr(ord('a') + number - 1)\n    elif number < 100:\n        return chr(ord('a') + 20 + (number - 20) / 10) + chr(ord('a') + (number - 20) % 10)\n    elif number < 1000:\n        return chr(ord('a') + 100 + (number - 100) / 100) + chr(ord('a') + (number - 100) % 100) + 'x'\n    else:\n        return chr(ord('a') + 900 + (number - 1000) / 1000) + chr(ord('a') + (number - 1000) % 1000) + 'xx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def to_roman(number):\n        roman = ''\n        for integer, numeral in mini_roman:\n            while number >= integer:\n                number -= integer\n                roman += numeral\n        return roman\n\n    def to_roman_lower(number):\n        roman = ''\n        for integer, numeral in mini_roman:\n            while number >= integer:\n                number -= integer\n                roman += numeral.lower()\n        return roman\n\n    if number < 1 or number > 1000:\n        raise ValueError('number must be between 1 and 1000')\n\n    roman = to_roman_lower(number)\n    roman = roman.replace('v', '').replace('i', '').replace('x', '')\n    return roman\n\n\nmini_roman = {\n    1000:'m',\n    900: 'cm',\n    500: 'd',\n    400: 'cd';\n    100: 'c',\n    90: 'cc',\n    50: 'x',\n    40: 'xx',\n    10: 'l',\n    9: 'ix',\n    5: 'v',\n    4: 'iv',\n    1: 'i',\n}", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1 or number > 1000:\n        raise ValueError('Only 1 <= num <= 1000')\n\n    roman_numeral = []\n    for i in xrange(0, 10):\n        roman_numeral.append(chr(65 + i))\n\n    for x in xrange(1, 10):\n        for i in xrange(0, 10):\n            if x == i:\n                roman_numeral[i] = chr(97 + x)\n            else:\n                roman_numeral[i] = roman_numeral[i - 1]\n\n    return ''.join(roman_numeral[number - 1] for number in xrange(1, 1000))\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be less than 1000')\n\n    # Roman numerals are represented using uppercase letters, so we will use\n    # lowercase letters for the roman numeral string.\n    roman_numeral = ''\n    for i in range(0, len(ROMAN_NUMERALS)):\n        if number >= ROMAN_NUMERALS[i]:\n            roman_numeral += ROMAN_LETTERS[i]\n            number -= ROMAN_NUMERALS[i]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # This function uses the same algorithm as the original function, but\n    # it generates a string instead of an integer.\n    # The algorithm is based on http://en.wikipedia.org/wiki/Roman_numerals\n\n    if number < 1:\n        raise ValueError(\"Argument must be positive integer.\")\n    elif number <= 1000:\n        return mini_roman(number)\n    else:\n        raise ValueError(\"Argument must be between 1 and 1000.\")", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Write your code here\n    if not isinstance(number, int):\n        raise TypeError('Expected an integer')\n    if not 1 <= number <= 1000:\n        raise ValueError('Expected an integer in range [1, 1000]')\n    if number < 50:\n        return chr(ord('i') + number)\n    if number < 100:\n        return chr(ord('v') + (number - 50))\n    if number < 500:\n        return chr(ord('x') + (number - 100))\n    if number < 1000:\n        return chr(ord('l') + (number - 500))\n    if number < 2000:\n        return chr(ord('c') + (number - 1000))\n    if number < 4000:\n        return chr(ord('d') + (number - 2000))\n    if number < 8000:\n        return chr(ord('m') + (number - 4000))\n    if number < 10000:\n        return chr(ord('x') + (number - 8000))\n    if number < 20000:\n        return chr(ord('v') + (number - 10000))\n    if number < 40000:\n        return chr(ord('l') + (number - 20000))\n    if number < 80000:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # the roman numeral system is a base-10 numbering system, where each digit\n    # represents a power of 10. the number of digits in the number is equal to\n    # the exponent of 10 in the number. the roman numerals that we use to\n    # represent the numbers are:\n    # i = 1\n    # v = 5\n    # x = 10\n    # l = 50\n    # c = 100\n    # d = 500\n    # m = 1000\n    # the roman numeral system has a few unique properties:\n    # 1. the roman numerals for i, v, x, l, c, d, and m are never used\n    # 2. the roman numerals for i, v, x, l, c, d, and m are never used\n    # 3. the roman numeral for 1 is always i\n    # 4. the roman numeral for 5 is always v\n    # 5. the roman numeral for 10 is always x\n    # 6. the roman numeral for 50 is always l\n    # 7. the roman numeral for 100 is always c\n    # 8. the roman numeral for 500 is always d\n    # 9. the roman numeral for 1000 is always m\n    # the roman numeral system is very efficient for representing large numbers", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Base case\n    if number <= 1:\n        return ''\n    if number <= 20:\n        return str(number)\n    roman = ''\n    # Convert each digit to roman\n    while number!= 0:\n        number, i = divmod(number, 10)\n        roman += roman_digits[i]\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return 'i'\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number < 15:\n        return str(number) + 'i'\n    if number < 100:\n        if number % 10 == 1:\n            return str(number) + 'i'\n        if number % 10 == 2:\n            return str(number) + 'ii'\n        if number % 10 == 3:\n            return str(number) + 'iii'\n        if number % 10 == 4:\n            return str(number) + 'iv'\n        if number % 10 == 5:\n            return str(number) + 'v'\n        if number % 10 == 6:\n            return str(number) + 'vi'\n        if number % 10 == 7:\n            return str(number) + 'vii'\n        if number % 10 == 8:\n            return str(number) + 'viii'\n        if number % 10 == 9:\n            return str(number) + 'ix'\n    if number < 1000:\n        if number % 100 == 11:\n            return str(number) + 'xc'\n        if number % 100 == 12:\n            return str(number) + 'cc'\n        if number % 100 == 13:\n            return str(number) + 'cd'\n        if", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Range of roman numerals\n    roman_numeral = ['i', 'v', 'x', 'l', 'c', 'd','m']\n\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Find the last digit in the number\n    last_digit = number_str[-1]\n\n    # Remove the last digit from the number\n    number_str = number_str[:-1]\n\n    # Convert the number to a roman numeral\n    roman_numeral_str = \"\"\n\n    for numeral in roman_numeral:\n        # If the last digit is in the range of 1-9, add it to the roman numeral\n        if numeral <= last_digit:\n            roman_numeral_str += numeral\n        # If the last digit is in the range of 10-19, add the roman numeral 'v'\n        elif last_digit >= 10 and last_digit <= 19:\n            roman_numeral_str += \"v\"\n        # If the last digit is in the range of 20-29, add the roman numeral 'x'\n        elif last_digit >= 20 and last_digit <= 29:\n            roman_numeral_str += \"x\"\n        # If the last digit is in the range of 30-39, add the roman numeral 'l'\n        elif last_digit >= 30 and last_digit <= 39:\n            roman_num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_nums = {\n        1000:'m',  900: 'cm', 500: 'd',  400: 'cd'}\n    roman_nums2 = {\n        1000: 'M',  900: 'CM', 500: 'D',  400: 'CD'}\n    roman_nums3 = {\n        1000: 'i',  900: 'ix', 500: 'x',  400: 'xc'}\n    roman_nums4 = {\n        1000: 'l',  900: 'l',  500: 'l',  400: 'l'}\n    roman_nums5 = {\n        1000: 'c',  900: 'cc', 500: 'd',  400: 'dc'}\n    roman_nums6 = {\n        1000: 'x',  900: 'xx', 500: 'd',  400: 'dx'}\n    roman_nums7 = {\n        1000: 'i',  900: 'xi', 500: 'x',  400: 'xci'}\n    roman_nums8 = {\n        1000: 'l',  900: 'l',  500: 'l',  400: 'l'}\n    roman_nums9 = {\n        1000: 'x',  900: 'xx', 500: 'd',  400: 'dx'}\n    roman_n", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_nums = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x',\n                 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii',\n                 'xix', 'xx', 'xxi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi',\n                 'xxvii']\n\n    roman_num = ''\n    if number < 4000:\n        for i in range(len(roman_nums)):\n            while number >= 1000:\n                number -= 1000\n                roman_num += roman_nums[len(roman_num) - 1]\n        roman_num += roman_nums[i]\n        number = number % 1000\n    else:\n        roman_num = roman_nums[len(roman_nums) - 1]\n\n    if number > 0:\n        roman_num += roman_nums[int(number / 1000)]\n        number = number % 1000\n\n    if number > 0:\n        roman_num += roman_nums[int(number / 100)]\n        number = number % 100\n\n    if number > 0:\n        roman_num += roman_nums[int", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('Number must be between 1 and 1000')\n\n    roman_numeral = \"\"\n\n    for numeral, integer in roman_numerals:\n        while number >= integer:\n            number -= integer\n            roman_numeral += numeral\n\n    return roman_numeral.lower()\n\nroman_numerals = (\n    (1000,'m'),\n    (900, 'cm'),\n    (500, 'd'),\n    (400, 'cdvs'),\n    (100, 'c'),\n    (90, 'xc'),\n    (50, 'l'),\n    (40, 'xl'),\n    (10, 'x'),\n    (9, 'ix'),\n    (5, 'v'),\n    (4, 'iv'),\n    (1, 'i'),\n)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError('Expected an integer.')\n\n    if not 1 <= number <= 1000:\n        raise ValueError('Expected a number between 1 and 1000.')\n\n    if number == 1:\n        return 'i'\n\n    if number == 2:\n        return 'ii'\n\n    if number == 3:\n        return 'iii'\n\n    if number == 4:\n        return 'iv'\n\n    if number == 5:\n        return 'v'\n\n    if number == 6:\n        return 'vi'\n\n    if number == 7:\n        return 'vii'\n\n    if number == 8:\n        return 'viii'\n\n    if number == 9:\n        return 'ix'\n\n    if number == 10:\n        return 'x'\n\n    if number == 11:\n        return 'xi'\n\n    if number == 12:\n        return 'xii'\n\n    if number == 13:\n        return 'xiii'\n\n    if number == 14:\n        return 'xiv'\n\n    if number == 15:\n        return 'xv'\n\n    if number == 16:\n        return 'xvi'\n\n    if number == 17:\n        return 'xvii'\n\n    if number == 18:\n        return 'xviii'\n\n    if number == 19:\n        return 'xix'\n\n    if number == 20:\n        return 'xx'\n\n    if number == 21:\n        return 'xxi'\n\n    if number == 22:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Initialize result to the empty string\n    result = ''\n\n    # Convert integer to string\n    number_str = str(number)\n\n    # Loop through the string, adding each character to the result\n    for char in number_str:\n\n        # Add the lowercase roman numeral equivalent of the character\n        # to the result\n        if char in ['i', 'v', 'x', 'l', 'c', 'd']:\n            result += char.lower()\n\n        # If the character is a 'j', add the lowercase roman numeral equivalent of\n        # the character and the letter 'i' to the result\n        elif char == 'j':\n            result += 'i' + char.lower()\n\n        # If the character is a 'iv', add the lowercase roman numeral equivalent of\n        # the character and the letters 'i' and 'v' to the result\n        elif char == 'iv':\n            result += 'iv'\n\n        # If the character is a 'ix', add the lowercase roman numeral equivalent of\n        # the character and the letters 'i' and 'x' to the result\n        elif char == 'ix':\n            result += 'ix'\n\n        # If the character is a 'l', add the lowercase roman numeral equivalent of\n        # the character and the letter 'l' to the result\n        elif char == 'l':", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    number = str(number)\n    if not (1 <= number <= 1000):\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n    if number == 1:\n        return 'i'\n    elif number == 2:\n        return 'ii'\n    elif number == 3:\n        return 'iii'\n    elif number == 4:\n        return 'iv'\n    elif number == 5:\n        return 'v'\n    elif number == 6:\n        return 'vi'\n    elif number == 7:\n        return 'vii'\n    elif number == 8:\n        return 'viii'\n    elif number == 9:\n        return 'ix'\n    elif number == 10:\n        return 'x'\n    elif number == 11:\n        return 'xi'\n    elif number == 12:\n        return 'xii'\n    elif number == 13:\n        return 'xiii'\n    elif number == 14:\n        return 'xiv'\n    elif number == 15:\n        return 'xv'\n    elif number == 16:\n        return 'xvi'\n    elif number == 17:\n        return 'xvii'\n    elif number == 18:\n        return 'xviii'\n    elif number == 19:\n        return 'xix'\n    elif number == 20:\n        return 'xx'\n    elif number == 21:\n        return 'xxi'\n    elif number == 22:\n        return 'xxi'\n    elif number == 23:\n        return 'xxi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral_map = {\n        1:'i',\n        2:'ii',\n        3:'iii',\n        4:'iv',\n        5:'v',\n        6:'vi',\n        7:'vii',\n        8:'viii',\n        9:'ix',\n        10:'x',\n        11:'xi',\n        12:'xii',\n        13:'xiii',\n        14:'xiv',\n        15:'xv',\n        16:'xvi',\n        17:'xvii',\n        18:'xviii',\n        19:'xix',\n        20:'xx',\n        30:'xx',\n        40:'xl',\n        50:'xl',\n        60:'xc',\n        70:'xc',\n        80:'xl',\n        90:'xl',\n        100:'c',\n        200:'cc',\n        300:'cc',\n        400:'cd',\n        500:'dd',\n        600:'dc',\n        700:'dd',\n        800:'dd',\n        900:'cx',\n        1000:'cm',\n        }\n    if number < 1 or number > 1000:\n        raise ValueError('Invalid number {}'.format(number))\n    if number == 1:\n        return ''\n    roman_numeral = roman_numeral_map[number]\n    roman_numeral = roman_numeral.replace('v','v'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Adapted from https://gist.github.com/anonymous/64a53cafd18a5c8e1f0ba\n    if number < 1:\n        return ''\n    result = ''\n    for num in range(1, number + 1):\n        result += roman_digits[num % 10]\n    return result[1:]\n\n\nroman_digits = {\n    1: 'I',\n    2: 'II',\n    3: 'III',\n    4: 'IV',\n    5: 'V',\n    6: 'VI',\n    7: 'VII',\n    8: 'VIII',\n    9: 'IX',\n    10: 'X',\n    20: 'X',\n    30: 'X',\n    40: 'X',\n    50: 'X',\n    60: 'X',\n    70: 'X',\n    80: 'X',\n    90: 'X',\n    100: 'C',\n    }", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_chars = (\n        'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'\n    )\n\n    result = ''\n    for i, v in enumerate(roman_chars):\n        number -= 1\n        while number >= 0:\n            if number < len(roman_chars):\n                result += v\n                break\n            number -= len(roman_chars)\n\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1:\n        raise ValueError(\"number must be 1 or more\")\n    if number > 1000:\n        raise ValueError(\"number must be less than 1000\")\n    if number == 1:\n        return \"i\"\n    elif number == 2:\n        return \"ii\"\n    elif number == 3:\n        return \"iii\"\n    elif number == 4:\n        return \"iv\"\n    elif number == 5:\n        return \"v\"\n    elif number == 6:\n        return \"vi\"\n    elif number == 7:\n        return \"vii\"\n    elif number == 8:\n        return \"viii\"\n    elif number == 9:\n        return \"ix\"\n    elif number == 10:\n        return \"x\"\n    elif number == 11:\n        return \"xi\"\n    elif number == 12:\n        return \"xii\"\n    elif number == 13:\n        return \"xiii\"\n    elif number == 14:\n        return \"xiv\"\n    elif number == 15:\n        return \"xv\"\n    elif number == 16:\n        return \"xvi\"\n    elif number == 17:\n        return \"xvii\"\n    elif number == 18:\n        return \"xviii\"\n    elif number == 19:\n        return \"xix\"\n    elif number == 20:\n        return \"xx\"\n    elif number == 21:\n        return \"xxi\"\n    elif number == 22:\n        return \"xxii", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = \"\"\n    for i in range(1, 1000, 3):\n        if number >= i:\n            result += str(number / i) + \"c\"\n            number %= i\n    result += str(number)\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 0 < number <= 1000:\n        raise ValueError('Number must be between 1 and 1000')\n    result = ''\n    for n in range(1, 1000, 100):\n        if number >= n:\n            result += roman_numeral(number // n)\n            number %= n\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n\n    roman = []\n    roman.append('M') # 1,000\n    roman.append('CM') # 900\n    roman.append('D') # 500\n    roman.append('CD') # 400\n    roman.append('C') # 100\n    roman.append('XC') # 90\n    roman.append('L') # 50\n    roman.append('XL') # 40\n    roman.append('X') # 10\n    roman.append('IX') # 9\n    roman.append('V') # 5\n    roman.append('IV') # 4\n    roman.append('I') # 1\n\n    roman_numeral = ''\n\n    for digit in str(number):\n        if digit == '1':\n            roman_numeral += roman[0]\n        elif digit == '2':\n            roman_numeral += roman[1]\n        elif digit == '3':\n            roman_numeral += roman[2]\n        elif digit == '4':\n            roman_numeral += roman[3]\n        elif digit == '5':\n            roman_numeral += roman[4]\n        elif digit == '6':\n            roman_numeral += roman[5]\n        elif", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # There are a few mini roman numbering systems around, but the one used here is the\n    # one specified by the standard library's `int_to_roman` function. The rules are\n    # as follows:\n    #\n    # - Every digit represents a number in the range 1 to 5, inclusive.\n    # - The first digit of a roman numeral represents the value of the number.\n    # - The second digit of a roman numeral represents the value of the number\n    #   divided by 10.\n    # - The third digit of a roman numeral represents the value of the number\n    #   divided by 100.\n    # - The fourth digit of a roman numeral represents the value of the number\n    #   divided by 1000.\n    #\n    # The mini roman numeral system used here is slightly different, in that the\n    # second digit represents the value of the number divided by 5, and the third\n    # digit represents the value of the number divided by 10.\n\n    # The roman numeral equivalents for the digits 1 through 5.\n    digits = ('i', 'ii', 'iii', 'iv', 'v')\n\n    # The roman numeral equivalents for the numbers 10 through 50.\n    tens = ('x', 'xx', 'xxx', 'xl', 'l'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Initialize the result string\n    result = ''\n\n    # Base case: If the number is less than or equal to 1, return an empty string\n    if number <= 1:\n        return result\n\n    # Start by dividing the number by 3 and rounding down\n    # This will give us the last digit of our roman numeral\n    number //= 3\n    last_digit = int(number)\n\n    # Now, divide our number by 3 again, but this time round up\n    # This will give us the second-last digit of our roman numeral\n    number //= 3\n    second_last_digit = int(number)\n\n    # Now, divide our number by 3 again, but this time round up\n    # This will give us the third-to-last digit of our roman numeral\n    number //= 3\n    third_last_digit = int(number)\n\n    # Now, divide our number by 3 again, but this time round up\n    # This will give us the fourth-to-last digit of our roman numeral\n    number //= 3\n    fourth_last_digit = int(number)\n\n    # Now, divide our number by 3 again, but this time round up\n    # This will give us the fifth-to-last digit of our roman numeral\n    number //= 3\n    fifth_last_digit = int", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('Invalid number')\n\n    roman_letters = 'i v x l c d m m'.split(' ')\n\n    roman_numeral = ''\n    for integer, letter in zip([(number // 1000) * 1000] + list(divmod(number % 1000, 1000)), roman_letters):\n        if integer == 0:\n            roman_numeral += letter\n        else:\n            roman_numeral += roman_letters[integer - 1]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be positive')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman = []\n    for i in range(1000):\n        roman.append([])\n\n    for i in range(1000):\n        if i < 100:\n            roman[i] = ['cm', 'd', 'cc', 'c','mm', 'l', 'x']\n        elif i < 1000:\n            roman[i] = ['m', 'd', 'xx', 'x', 'l', 'xc']\n        else:\n            roman[i] = ['cm', 'd', 'cc', 'c','mm', 'l', 'x']\n\n    roman_numeral = roman[number - 1]\n    roman_numeral = roman_numeral + roman[0][::-1]\n    roman_numeral = roman_numeral + roman[1][::-1]\n    roman_numeral = roman_numeral + roman[2][::-1]\n    roman_numeral = roman_numeral + roman[3][::-1]\n    roman_numeral = roman_numeral + roman[4][::-1]\n    roman_numeral = roman_numeral + roman[5][::-1]\n    roman_numeral = roman_numeral + roman[6][::", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('number must be positive')\n    if number > 1000:\n        raise ValueError('number must be <= 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return '", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('number must be at least 1')\n    if number > 1000:\n        raise ValueError('number must be at most 1000')\n\n    roman = ''\n    for num in range(1, number + 1, 3):\n        roman += (chr(num + 48))\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Use a dictionary to store the roman numeral to integer mappings\n    roman_numeral_map = {'i': 1, 'ii': 2, 'iii': 3, 'iv': 4, 'v': 5, 'vi': 6, 'vii': 7, 'viii': 8, 'ix': 9, 'x': 10, 'xi': 11, 'xii': 12, 'xiii': 13, 'xiv': 14, 'xv': 15, 'xvi': 16, 'xvii': 17, 'xviii': 18, 'xix': 19, 'xx': 20, 'xxi': 21, 'xxii': 22, 'xxiii': 23, 'xxiv': 24, 'xxv': 25, 'xxvi': 26, 'xxvii': 27, 'xxviii': 28, 'xxix': 29, 'xxx': 30, 'xxxi': 31, 'xxxii': 32, 'xxxiii': 33, 'xxxiv': 34, 'xxxv': 35, 'xxxvi': 36, 'xxxvii': 37, 'xxxviii': 38, 'xxxix': 39, 'xl': 40, 'xli': 41, 'xlii': 42, 'xliii': 43, 'xliv': 44,", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n\n    if number >= 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n    for i in range(0, number):\n        roman_numeral += roman_numerals[int(number % 10)]\n\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    if number < 1:\n        raise ValueError(\"Number must be greater than 0.\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000.\")\n\n    # roman numerals\n    roman_letters = ('i', 'v', 'x', 'l', 'c', 'd')\n    roman_numbers = (1000, 500, 100, 50, 10, 5)\n\n    if number < 100:\n        result = roman_letters[number]\n    elif number < 1000:\n        result = roman_numbers[number / 100] + roman_letters[number % 100]\n    else:\n        result = roman_numbers[number / 1000] + roman_numbers[number / 100 % 10] + roman_letters[number / 10 % 10] + roman_letters[number % 10]\n\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number <= 0:\n        raise ValueError('Invalid number')\n\n    if number <= 19:\n        return str(number) + 'i'\n\n    numerals = ['i', 'v', 'x', 'l', 'c', 'd','m']\n\n    roman = ''\n\n    for numeral, number in zip(numerals, range(10, 0, -1)):\n        while number > 0:\n            roman += numeral\n            number -= 1\n\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    result = \"\"\n    for integer, numeral in mini_roman_numerals.items():\n        while number >= integer:\n            number -= integer\n            result += numeral\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    result = \"\"\n    for i in range(0, 3):\n        if number >= 1000:\n            number -= 1000\n            result += \"m\"\n        elif number >= 900:\n            number -= 900\n            result += \"cm\"\n        elif number >= 500:\n            number -= 500\n            result += \"d\"\n        elif number >= 400:\n            number -= 400\n            result += \"cd\"\n        elif number >= 100:\n            number -= 100\n            result += \"c\"\n        elif number >= 90:\n            number -= 90\n            result += \"cc\"\n        elif number >= 50:\n            number -= 50\n            result += \"l\"\n        elif number >= 40:\n            number -= 40\n            result += \"xl\"\n        elif number >= 10:\n            number -= 10\n            result += \"x\"\n        elif number >= 9:\n            number -= 9\n            result += \"xx\"\n        elif number >= 5:\n            number -= 5\n            result += \"v\"\n        elif number >= 4:\n            number -= 4\n            result += \"iv\"\n        elif number >= 1:\n            number -= 1\n            result += \"i\"\n        else:\n            result += \"i\"\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    def to_roman(n):\n        result = \"\"\n        for i in range(3):\n            if n >= 1000:\n                result += \"m\" * (n // 1000)\n                n %= 1000\n            elif n >= 500:\n                result += \"cm\" * (n // 500)\n                n %= 500\n            elif n >= 100:\n                result += \"d\" * (n // 100)\n                n %= 100\n            else:\n                result += \"c\" * (n // 10)\n                n %= 10\n        return result\n\n    def to_mini_roman(n):\n        if n == 0:\n            return \"\"\n        elif n == 1:\n            return \"i\"\n        else:\n            return to_roman(n)[1:]\n\n    return to_mini_roman(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 0 < number <= 1000:\n        raise ValueError('Invalid number')\n\n    roman = ''\n    for i in range(number // 100):\n        roman += 'cc'\n    number -= 100 * (number // 100)\n\n    for i in range(number // 10):\n        roman += 'xx'\n    number -= 10 * (number // 10)\n\n    for i in range(number):\n        roman += 'i'\n\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral_map = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'l',\n        50: 'l',\n        90: 'x',\n        100: 'c',\n        500: 'd',\n        1000:'m',\n    }\n\n    if number == 1:\n        return 'i'\n\n    if number < 0:\n        raise ValueError('num must be positive')\n\n    roman_numeral = ''\n    for numeral, integer in roman_numeral_map.items():\n        while number >= integer:\n            number -= integer\n            roman_numeral += numeral\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral_map = {\n        1000:'m',  900: 'cm', 500: 'd', 400: 'cd': 400, 100: 'c',\n        90: 'cc',  50: 'l', 40: 'xl', 10: 'x', 9:  'ix', 5:  'v',\n        4:  'iv',  1:  'i'\n    }\n\n    if number < 1:\n        return ''\n\n    result = []\n    for i in range(0, 3):\n        if number >= 1000:\n            number -= 1000\n            result.append(roman_numeral_map[1000])\n        elif number >= 900:\n            number -= 900\n            result.append(roman_numeral_map[900])\n        elif number >= 500:\n            number -= 500\n            result.append(roman_numeral_map[500])\n        elif number >= 400:\n            number -= 400\n            result.append(roman_numeral_map[400])\n        elif number >= 100:\n            number -= 100\n            result.append(roman_numeral_map[100])\n        elif number >= 90:\n            number -= 90\n            result.append(roman_numeral_map[90])\n        elif number >= 50:\n            number -= 50\n            result.append(roman_num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"num must be positive\")\n    if number > 1000:\n        raise ValueError(\"num must be <= 1000\")\n\n    roman_numeral = \"\"\n    for i in range(len(roman_nums)):\n        number_to_use = roman_nums[i]\n        if number >= number_to_use:\n            roman_numeral += roman_nums[i-number_to_use]\n            number -= number_to_use\n    return roman_numeral\n\nroman_nums = [\n    (1000,'m'),\n    (900, 'cm'),\n    (500, 'd'),\n    (400, 'cdl'),\n    (100, 'c'),\n    (90, 'xcd'),\n    (50, 'x'),\n    (40, 'xlc'),\n    (10, 'x'),\n    (9, 'xcc'),\n    (5, 'l'),\n    (4, 'xcd'),\n    (1, 'i')\n]\n\nA:\n\nYou could use the fact that in the Roman numeral system, each digit is repeated as many times as necessary to get the desired value.", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman_numeral = ''\n\n    # Roman numerals are denoted by the following characters:\n    # l = 50, c = 100, d = 500, m = 1000\n    for numeral, integer in [('l', 50), ('c', 100), ('d', 500), ('m', 1000)]:\n        for i in range(0, number // integer):\n            roman_numeral += numeral\n\n    # If the number is not evenly divisible by the largest numeral, add the\n    # remainder to the end:\n    if number % integer!= 0:\n        roman_numeral += str(number % integer)\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = \"\"\n    for i in range(1000):\n        if number < i:\n            roman += chr(i + ord('a'))\n        else:\n            number -= i\n            roman += chr(i + ord('i'))\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    result = \"\"\n    for i in range(0, 10):\n        number -= 1\n        result += roman_characters[i] * (number // roman_values[i])\n    return result[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # roman numbering system:\n    # M = 1000\n    # CM = 900\n    # D = 500\n    # CD = 400\n    # C = 100\n    # XC = 90\n    # L = 50\n    # XL = 40\n    # X = 10\n    # IX = 9\n    # V = 5\n    # IV = 4\n    # I = 1\n\n    roman_numeral = ''\n    number = int(number)\n\n    if number >= 1000:\n        roman_numeral += 'M'\n    if number >= 900:\n        roman_numeral += 'CM'\n    if number >= 500:\n        roman_numeral += 'D'\n    if number >= 400:\n        roman_numeral += 'CD'\n    if number >= 100:\n        roman_numeral += 'C'\n    if number >= 90:\n        roman_numeral += 'XC'\n    if number >= 50:\n        roman_numeral += 'L'\n    if number >= 40:\n        roman_numeral += 'XL'\n    if number >= 10:\n        roman_numeral += 'X'\n    if number >= 9:\n        roman_numeral += 'IX'\n    if number >= 5:\n        roman_numeral += 'V'\n    if number >= 4:\n        roman_numeral += 'IV'\n    if number >= 1:\n        roman_numeral += 'I'\n\n    return roman_num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = ''\n    for i in range(1, number + 1):\n        result += roman_number(i)\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = []\n    for numeral, integer in ROMAN_NUMERALS:\n        while number >= integer:\n            result.append(numeral)\n            number -= integer\n    return ''.join(result)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # This function is based on code from:\n    # http://stackoverflow.com/questions/882987/how-to-print-a-roman-numeral-in-python\n\n    if number < 1:\n        return ''\n    if number < 50:\n        return chr(65 + number)\n    if number < 100:\n        return chr(97 + (number / 10)) + chr(65 + (number % 10))\n    if number < 1000:\n        return chr(103 + (number / 100)) + chr(97 + (number / 10)) + chr(65 + (number % 10))\n    if number < 2000:\n        return chr(109 + (number / 1000)) + chr(103 + (number / 100)) + chr(97 + (number / 10)) + chr(65 + (number % 10))\n    if number < 5000:\n        return chr(117 + (number / 2000)) + chr(109 + (number / 1000)) + chr(103 + (number / 100)) + chr(97 + (number / 10)) + chr(65 + (number % 10))\n    if number < 10000:\n        return chr(121 + (number / 5000)) + chr(117 + (number / 2000)) + chr(109 + (number / 1000)) +", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('number must be positive')\n    if number > 1000:\n        raise ValueError('number must be less than 1000')\n    roman_numeral = \"\"\n    number = abs(number)\n    for i in range(1000, 0, -1):\n        if number >= 1000:\n            roman_numeral = roman_numeral + 'M'\n            number = number - 1000\n        if number >= 900:\n            roman_numeral = roman_numeral + 'CM'\n            number = number - 900\n        if number >= 500:\n            roman_numeral = roman_numeral + 'D'\n            number = number - 500\n        if number >= 400:\n            roman_numeral = roman_numeral + 'CD'\n            number = number - 400\n        if number >= 100:\n            roman_numeral = roman_numeral + 'C'\n            number = number - 100\n        if number >= 90:\n            roman_numeral = roman_numeral + 'XC'\n            number = number - 90\n        if number >= 50:\n            roman_numeral = roman_numeral + 'L'\n            number = number - 50\n        if number >= 40:\n            roman_numeral = roman_numeral + 'XL'\n            number = number - 40\n        if number >= 10:\n            roman_numeral = roman_num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than zero.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n\n    roman = []\n    for i in range(len(roman_numeral_map)):\n        count = int(number / roman_numeral_map[i])\n        if count > 0:\n            roman.append(roman_numeral_map[i])\n            number -= roman_numeral_map[i] * count\n    if number > 0:\n        roman.append(roman_numeral_map[i] * int(number))\n    roman = ''.join(roman)\n    return roman.lower()\n\n\nroman_numeral_map = (\n    (1000,'m'),\n    (900, 'cm'),\n    (500, 'd'),\n    (400, 'cdm'),\n    (100, 'c'),\n    (90, 'xcd'),\n    (50, 'x'),\n    (40, 'xcx'),\n    (10, 'x'),\n    (9, 'xc'),\n    (5, 'v'),\n    (4, 'iv'),\n    (1, 'i')\n)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_letters = ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x',\n                    'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii',\n                    'xix', 'xx', 'xxi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi',\n                    'xxvii', 'xxviii', 'xxix', 'xxx', 'xxxi', 'xxxii', 'xxxiii',\n                    'xxxiv', 'xxxv', 'xxxvi', 'xxxvii', 'xxxviii', 'xxxix',\n                    'xlx', 'xlxi', 'xlxii', 'xlxiii', 'xlxiv', 'xlv', 'xlv',\n                    'xlv', 'xlv', 'xlv', 'xlv', 'xlv', 'xlv', 'xlv', 'xlv',\n                    'xlv', 'xlv', 'xlv', 'xlv', 'x", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1:\n        raise ValueError('num must be >= 1')\n\n    roman_numeral_map = {1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix', 10: 'x', 11: 'xi', 12: 'xii', 13: 'xiii', 14: 'xiv', 15: 'xv', 16: 'xvi', 17: 'xvii', 18: 'xviii', 19: 'xix', 20: 'xx', 30: 'xx', 40: 'xc', 50: 'cl', 60: 'cc', 70: 'cdx', 80: 'cdxx', 90: 'cdxxx', 100: 'cd'}\n\n    if number == 1:\n        return roman_numeral_map[1]\n    roman_numeral = roman_numeral_map[number]\n    if number > 100:\n        roman_numeral = roman_numeral.replace('x', 'x'*(number//10))\n        number = number % 10\n        if number == 1:\n            return roman_numeral + roman_numeral_map[1]\n        return roman_numeral + roman_numeral_map[number]\n    if number > 20:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = str(number)\n    result = []\n    for i in range(len(number)):\n        number[i] = str(ord(number[i]) - 55)\n        if len(number) - i == 1:\n            result.append(number[i])\n        elif len(number) - i > 1:\n            result.append(number[i] + number[i - 1])\n    return ''.join(result)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 0 < number <= 1000:\n        raise ValueError('Number must be between 1 and 1000 inclusive.')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number < 20:\n        result = []\n        for numeral, integer in mini_roman_numerals.items():\n            while number >= integer:\n                result.append(numeral)\n                number -= integer\n        return ''.join(result)\n    if number == 20:\n        return 'xx'\n    if number == 40:\n        return 'xc'\n    if number == 60:\n        return 'cl'\n    if number == 80:\n        return 'cc'\n    if number == 100:\n        return 'xcix'\n    if number < 100:\n        result = []\n        for numeral, integer in mini_roman_numerals.items():\n            while number >= integer:\n                result.append(numeral)\n                number -= integer\n        result.append('x')\n        return ''.join(result)\n    if number == 500:\n        return 'cdl'\n    if number == 600:\n        return 'cdc'\n    if number == 700:\n        return 'cd'\n    if number == 800:\n        return 'c", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Valid roman numeral characters are I, V, X, L, C, D and M\n    roman = \"\"\n\n    for numeral in roman_numerals:\n        # Multiply the number by the roman numeral's power\n        # and add that to the roman numeral's value\n        roman += roman_numerals[numeral] * (number // roman_numerals[numeral])\n\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"num must be 1 or greater\")\n\n    result = \"\"\n\n    for i in range(1, 1000):\n        if number >= i:\n            result = result + roman[i]\n            number -= i\n        else:\n            break\n\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number >= 1000:\n        raise ValueError('Number must be less than 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ''\n    for numeral, integer in ROMAN_NUMERALS:\n        while number >= integer:\n            number -= integer\n            roman_numeral += numeral\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not (1 <= number <= 1000):\n        raise ValueError('num must be 1 <= num <= 1000')\n\n    roman_list = [(1000,'m'), (900, 'cm'), (500, 'd'), (400, 'cd']\n    roman_list += [(100, 'c'), (90, 'cc'), (50, 'x'), (40, 'xx']\n    roman_list += [(10, 'l'), (9, 'cl'), (5, 'v'), (4, 'iv']\n    roman_list += [(1, 'i')]\n\n    result = ''\n\n    for integer, numeral in roman_list:\n        while number >= integer:\n            result += numeral\n            number -= integer\n\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Roman numerals only contain the characters 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'.\n    # We also use the lowercase versions of these letters.\n    roman_chars = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x']\n\n    # If the number is 0 or less, then the roman numeral will be the empty string.\n    if number <= 0:\n        return ''\n\n    # Determine the number of digits in the number. The number of digits will always be\n    # even.\n    number_of_digits = len(str(number))\n    number_of_roman_chars = number_of_digits // 2\n\n    # Begin building the roman numeral. We start with the largest possible roman numeral\n    # that we could build with the number of digits that we have, and then we subtract from\n    # it one by one until we reach the number that we want.\n    roman_integer = roman_chars[-1] * number_of_roman_chars\n    while number > roman_integer:\n        number -= roman_integer\n        roman_integer", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_numeral_map = {\n        1:  'i',\n        5:  'v',\n        10: 'x',\n        90: 'l',\n        500: 'd',\n        900: 'c'\n    }\n\n    if number == 0:\n        return '0'\n\n    number = int(number)\n\n    result = []\n    while number:\n        number, remainder = divmod(number, 10)\n        result.insert(0, roman_numeral_map[remainder])\n\n    return ''.join(result)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        return None\n    roman_numeral = \"\"\n    for i in range(len(roman_numerals)):\n        number, remainder = divmod(number, roman_numerals[i])\n        roman_numeral += roman_numerals[remainder]\n    return roman_numeral.lower()\n\n\nroman_numerals = (\n    (1000,'m'),\n    (900, 'cm'),\n    (500, 'd'),\n    (400, 'cdm'),\n    (100, 'c'),\n    (90, 'xc'),\n    (50, 'l'),\n    (40, 'xl'),\n    (10, 'x'),\n    (9, 'ix'),\n    (5, 'v'),\n    (4, 'iv'),\n    (1, 'i'),\n)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = str(number)\n    # Base case: If the number is 1, return the string 'I'\n    if number == '1':\n        return 'I'\n    # Base case: If the number is 0, return the string 'zero'\n    elif number == '0':\n        return 'zero'\n    # The case where the number is less than 10\n    elif number < 10:\n        return number + 'i'\n    # The case where the number is greater than or equal to 10 and less than 100\n    elif number >= 10 and number <= 100:\n        # Find the last digit of the number\n        last_digit = number % 10\n        # Construct the roman numeral equivalent of the last digit\n        last_digit_roman = roman_digits[last_digit]\n        # Construct the roman numeral equivalent of the number without the last digit\n        number_without_last_digit = number // 10\n        number_without_last_digit_roman = int_to_mini_roman(number_without_last_digit)\n        # Concatenate the roman numeral equivalents of the last digit and the number without\n        # the last digit\n        return last_digit_roman + number_without_last_digit_roman\n    # The case where the number is greater than or equal to 100", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = []\n    for numeral, integer in zip(ROMAN_NUMERALS, range(1000)):\n        while number >= integer:\n            number -= integer\n            roman.append(numeral)\n    return ''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    def to_roman(n):\n        roman = ''\n        for digit in range(1, 10):\n            for i in range(int(n // digit)):\n                roman += digit\n\n        return roman\n\n    if number < 1:\n        raise ValueError('number must be positive')\n\n    if number > 1000:\n        raise ValueError('number must be less than 1000')\n\n    if number == 1:\n        return 'i'\n\n    roman = to_roman(number)\n    return roman[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('The number should be positive.')\n    if number > 1000:\n        raise ValueError('The number should not exceed 1000.')\n\n    roman_numerals = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix',\n        20: 'xx',\n        21: 'xxi',\n        22: 'xxii',\n        23: 'xxiii',\n        24: 'xxiv',\n        25: 'xxv',\n        26: 'xxvi',\n        27: 'xxvii',\n        28: 'xxviii',\n        29: 'xxix',\n        30: 'xxx',\n        40: 'l',\n        50: 'l',\n        100: 'c',\n        200: 'cc',\n        300: 'ccc',\n        400: 'cdx',\n        500: 'cdxx',\n        600: 'cdxxx',\n        700: 'cdxxxx',\n        800:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    number = int(number)\n    if number < 1 or number > 1000:\n        raise ValueError('Only integers 1 - 1000 are allowed.')\n\n    roman_numeral = ''\n\n    # Number of digits in the integer\n    num_digits = len(str(number))\n\n    # Start by generating the first part of the number\n    for _ in range(0, num_digits - 1):\n        roman_numeral += 'i'\n\n    # Now generate the last part of the number\n    for _ in range(0, int(num_digits / 3) - 1):\n        roman_numeral += 'iv'\n\n    # Generate the last two digits\n    if num_digits % 3:\n        roman_numeral += 'i'\n    if num_digits % 3:\n        roman_numeral += 'i'\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        return ''\n\n    roman_numerals = ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']\n    roman_numerals += ['ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen','sixteen','seventeen', 'eighteen', 'nineteen']\n    roman_numerals += ['twenty', 'thirty', 'forty', 'fifty','sixty','seventy', 'eighty', 'ninety']\n\n    roman_numerals += ['hundred', 'thousand','million', 'billion']\n\n    # there are 3 ways to represent 1000\n    if number < 1000:\n        return roman_numerals[number]\n    if number >= 1000 and number < 2000:\n        return roman_numerals[number // 1000] + roman_numerals[number % 1000]\n    if number >= 2000 and number < 3000:\n        return roman_numerals[number // 1000] + roman_numerals[", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError(\"num must be 1 <= num <= 1000\")\n\n    result = \"\"\n    for v, r in enumerate(ROMAN_NUMERALS):\n        while number >= v:\n            number -= v\n            result += r\n\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('The number must be positive')\n    if number > 1000:\n        raise ValueError('The number must be less than 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number < 7:\n        return str(number) + 'iv'\n    if number == 7:\n        return 'vii';\n    if number < 14:\n        return str(number) + 'viii'\n    if number == 14:\n        return 'xii';\n    if number < 21:\n        return str(number) + 'xiii'\n    if number == 21:\n        return 'xxiv';\n    if number < 28:\n        return str(number) + 'xv'\n    if number == 28:\n        return 'xxxv';\n    if number < 40:\n        return str(number) + 'xvi'\n    if number == 40:\n        return 'xxxvi';\n    if number < 48:\n        return str(number) + 'xix'\n    if number == 48:\n        return 'xxxviii';\n    if number < 56:\n        return str(number) + 'xx'\n    if number == 56:\n        return 'xlv';\n    if number < 72:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be a positive integer')\n    if number < 100:\n        return chr(65 + (number / 10)) + chr(65 + (number % 10))\n    elif number < 1000:\n        return chr(97 + (number / 100)) + chr(97 + (number % 100) / 10) + chr(97 + number % 10)\n    else:\n        return chr(99 + (number / 1000)) + chr(97 + (number % 1000) / 100) + chr(97 + (number % 100) / 10) + chr(97 + number % 10)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_chars = ['i', 'v', 'x', 'l', 'c', 'd']\n    roman_nums = [1000, 500, 100, 50, 10, 1]\n    result = ''\n    for num in roman_nums:\n        while number >= num:\n            result += roman_chars[number % num]\n            number //= num\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = (\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400), ('C', 100),\n        ('XC', 90), ('L', 50), ('XL', 40), ('X', 10),\n        ('IX', 9), ('V', 5), ('IV', 4), ('I', 1)\n    )\n    roman = \"\"\n    for numeral, integer in roman_numerals:\n        while number >= integer:\n            number -= integer\n            roman += numeral\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be positive')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n    roman_nums = ('M', 'D', 'C', 'L', 'X', 'V', 'I')\n    roman_lookup = dict(zip(roman_nums, range(len(roman_nums))))\n    result = ''\n    for digit in roman_lookup.get(str(number % 10), roman_lookup.get(str(10))):\n        result += roman_nums[digit]\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        roman_numeral += roman_chars[i]\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be greater than 0')\n\n    roman_numeral = \"\"\n    for i in range(1000, 0, -1):\n        if number >= i:\n            roman_numeral += roman_chars[i]\n            number -= i\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        raise ValueError('Number must be positive.')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        20: 'xx',\n        30: 'xxx',\n        40: 'xl',\n        50: 'l',\n        60: 'lx',\n        70: 'lxx',\n        80: 'lxxx',\n        90: 'xc',\n        100: 'c',\n        }\n\n    numeral = roman_numeral_map.get(number, '')\n\n    while numeral[-1] == 'x':\n        numeral = numeral[:-1] + 'xx'\n\n    return numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = []\n    for roman, integer in ROMANS:\n        while number >= integer:\n            result.append(roman)\n            number -= integer\n    result.reverse()\n    return ''.join(result).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be greater than 0, but is {}'.format(number))\n    elif number >= 1000:\n        raise ValueError('num must be less than 1000, but is {}'.format(number))\n\n    roman = ''\n    for numeral, integer in zip([1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1], range(len(roman) + 1)):\n        while number >= integer:\n            number -= integer\n            roman += numeral\n\n    return roman[1:].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('int_to_mini_roman takes only positive integers')\n\n    result = \"\"\n\n    for i in range(1, 1000, 3):\n        if number < i:\n            result += (number / i) + \" \" + (i - number % i) + \"i\"\n        else:\n            result += (number / i) + \" \" + (i - number % i) + \"c\"\n\n    return result.strip(\" \").lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not (1 <= number <= 1000):\n        raise ValueError('Number must be between 1 and 1000')\n\n    roman_numeral = \"\"\n\n    for i, digit in enumerate(str(number)):\n        if i % 4 == 0:\n            roman_numeral +='m'\n        elif i % 5 == 0:\n            roman_numeral += 'd'\n        elif i % 6 == 0:\n            roman_numeral += 'c'\n        elif i % 7 == 0:\n            roman_numeral += 'l'\n        else:\n            roman_numeral += digit\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_nums = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL',\n                  10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    result = ''\n    for integer, numeral in roman_nums.items():\n        while number >= integer:\n            result += numeral\n            number -= integer\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n\n    roman_numeral = ''\n    for i in range(len(ROMAN_NUMERAL)):\n        count = int(number / ROMAN_NUMERAL[i])\n        number -= count * ROMAN_NUMERAL[i]\n        if count == 1:\n            roman_numeral += ROMAN_NUMERAL[i]\n        else:\n            roman_numeral += ROMAN_NUMERAL[i] + 'x'\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_nums = ['i','ii','iii','iv','v','vi','vii','viii','ix']\n    roman_nums += ['x','xx','xxx','xxxi','lx','lxx','lxxx','xc']\n    roman_nums += ['c','cc','ccc','cd','dc','dcd','c']\n    roman_nums += ['m','mm','mmm']\n\n    result = ''\n    for numeral, integer in zip(roman_nums, range(1000)):\n        while number >= integer:\n            result += numeral\n            number -= integer\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be greater than or equal to 1')\n    if number > 1000:\n        raise ValueError('num must be less than or equal to 1000')\n\n    roman = ''\n    for i in range(1000, 0, -1):\n        if number >= i:\n            roman += roman[i]\n            number -= i\n        else:\n            break\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        return ''\n    roman_numeral_map = (('M', 1000), ('CM', 900), ('D', 500), ('CD', 400), ('C', 100),\n                      ('XC', 90), ('L', 50), ('XL', 40), ('X', 10), ('IX', 9), ('V', 5),\n                      ('IV', 4), ('I', 1))\n\n    result = ''\n    for numeral, integer in roman_numeral_map:\n        while number >= integer:\n            result += numeral\n            number -= integer\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be positive.')\n\n    if number == 1:\n        return 'i'\n\n    if number == 2:\n        return 'ii'\n\n    if number < 15:\n        return str(number) + 'i'\n\n    if number < 100:\n        return str(number / 10) + 'i' + str(number % 10)\n\n    if number < 1000:\n        return str(number / 100) + 'x' + str(number % 100)\n\n    if number < 10000:\n        return str(number / 1000) + 'c' + str(number % 1000)\n\n    if number < 100000:\n        return str(number / 10000) + 'd' + str(number % 10000)\n\n    raise ValueError('num too big.')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('Invalid number')\n\n    roman = ''\n\n    while number!= 0:\n        number, i = divmod(number, 1000)\n        roman = chr(i + 48) + roman\n\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = \"\"\n    if number < 1:\n        raise ValueError(\"The number must be greater than 0.\")\n    elif number >= 1000:\n        raise ValueError(\"The number must be less than 1000.\")\n    elif number >= 900:\n        result = 'cm' + int_to_mini_roman(number % 1000)\n    elif number >= 500:\n        result = 'd' + int_to_mini_roman(number % 1000)\n    elif number >= 400:\n        result = 'c' + int_to_mini_roman(number % 1000)\n    elif number >= 100:\n        result = 'cl' + int_to_mini_roman(number % 100)\n    elif number >= 90:\n        result = 'xc' + int_to_mini_roman(number % 100)\n    elif number >= 50:\n        result = 'l' + int_to_mini_roman(number % 100)\n    elif number >= 40:\n        result = 'xl' + int_to_mini_roman(number % 100)\n    elif number >= 10:\n        result = 'xl' + int_to_mini_roman(number % 10)\n    elif number >= 9:\n        result = 'ix' + int_to_mini_roman(number % 10)\n    elif number >= 5:\n        result = 'v' + int_to_mini_roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = ''\n    if not (1 <= number <= 1000):\n        raise ValueError('invalid argument: number must be 1 <= num <= 1000')\n\n    if number == 1:\n        return 'i'\n\n    for i in range(2, 10):\n        if number < i:\n            result += 'i'\n        else:\n            break\n\n    for i in range(10, 100):\n        result += chr(65 + (number / i))\n        number -= i * (i - 1)\n\n    result += chr(65 + (number / 10))\n    number -= 10 * (10 - 1)\n\n    result += chr(65 + (number / 100))\n    number -= 100 * (100 - 1)\n\n    result += chr(65 + (number / 1000))\n    number -= 1000 * (1000 - 1)\n\n    return result[:-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = \"\"\n    if number < 1:\n        return result\n    for i in range(1, 1000):\n        n = number % i\n        if n == 0:\n            result = result + str(i)\n            number = number / i\n            break\n    if number > 0:\n        result = result + str(number)\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"num must be >= 1\")\n\n    if number == 1:\n        return 'i'\n\n    if number < 100:\n        if number < 20:\n            return chr(ord('a') + number - 1)\n        else:\n            return chr(ord('a') + (number - 19) / 10) + chr(ord('a') + number % 10)\n\n    if number < 1000:\n        if number < 100:\n            return chr(ord('i') + (number - 99) / 10) + chr(ord('i') + number % 10)\n        if number < 500:\n            return chr(ord('v') + (number - 499) / 10) + chr(ord('i') + number % 10)\n        if number < 1000:\n            return chr(ord('x') + (number - 999) / 10) + chr(ord('i') + number % 10)\n\n    raise ValueError(\"num must be < 1000\")\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = str(number)\n    if number[0] not in ['i', 'v']:\n        raise ValueError('Input number must start with i or v')\n    if len(number) == 1:\n        return 'i'\n    if len(number) == 2:\n        if number[0] == 'v':\n            return 'iv'\n        else:\n            return 'i' + number\n    if number[-1] not in ['x', 'l', 'c', 'd']:\n        raise ValueError('Input number must end with x, l, c, or d')\n    if number[-2] == 'x':\n        return number[:-2] + 'xx'\n    if number[-2] == 'c':\n        return number[:-2] + 'cl'\n    if number[-2] == 'l':\n        return number[:-2] + 'li'\n    if number[-2] == 'd':\n        return number[:-2] + 'xx' + number[-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return 'i'\n    if number < 1:\n        raise ValueError(\"num must be a positive integer\")\n    if number > 1000:\n        raise ValueError(\"num must be <= 1000\")\n    roman_numeral = ''\n    for numeral, integer in mini_roman_numerals.items():\n        while number >= integer:\n            number -= integer\n            roman_numeral += numeral\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1:\n        raise ValueError('Invalid input: number must be >= 1')\n\n    if number > 1000:\n        raise ValueError('Invalid input: number must be <= 1000')\n\n    if number == 1:\n        return 'i'\n\n    result = ''\n    while number!= 0:\n        number, digit = divmod(number, 10)\n        result = str(digit) + result\n\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        return ''\n    roman = []\n    for i in range(1000, 1, -1):\n        if number < i:\n            roman.append(str(number))\n            number -= i\n            break\n        number //= i\n        roman.append(str(number))\n    return ''.join(reversed(roman))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('num must be between 1 and 1000')\n\n    roman_numeral = []\n\n    for i in range(1000):\n        roman_numeral.append([])\n\n    for number, numeral in zip([1000] + list(range(1, 1000)), roman_numeral):\n        while number > 0:\n            number -= 1\n            numeral.append(number % 10)\n            number //= 10\n\n    return ''.join([numeral[-1:][0] for numeral in roman_numeral])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Roman numeral conversion table\n    roman_numeral_map = (\n        (1000, 'M'),\n        (900, 'CM'),\n        (500, 'D'),\n        (400, 'CD'),\n        (100, 'C'),\n        (90, 'XC'),\n        (50, 'L'),\n        (40, 'XL'),\n        (10, 'X'),\n        (9, 'IX'),\n        (5, 'V'),\n        (4, 'IV'),\n        (1, 'I'),\n    )\n\n    roman_numeral = str(number)\n    result = \"\"\n    for numeral, integer in roman_numeral_map:\n        while roman_numeral.endswith(numeral):\n            result += integer\n            roman_numeral = roman_numeral[:-len(numeral)]\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('number must be at least 1')\n    if number > 1000:\n        raise ValueError('number must be at most 1000')\n\n    if number == 1:\n        return 'i'\n    elif number == 2:\n        return 'ii'\n    elif number == 3:\n        return 'iii'\n    elif number == 4:\n        return 'iv'\n    elif number == 5:\n        return 'v'\n    elif number == 6:\n        return 'vi'\n    elif number == 7:\n        return 'vii'\n    elif number == 8:\n        return 'viii'\n    elif number == 9:\n        return 'ix'\n    elif number == 10:\n        return 'x'\n    elif number == 11:\n        return 'xi'\n    elif number == 12:\n        return 'xii'\n    elif number == 13:\n        return 'xiii'\n    elif number == 14:\n        return 'xiv'\n    elif number == 15:\n        return 'xv'\n    elif number == 16:\n        return 'xvi'\n    elif number == 17:\n        return 'xvii'\n    elif number == 18:\n        return 'xviii'\n    elif number == 19:\n        return 'xix'\n    elif number == 20:\n        return 'xx'\n    elif number == 21:\n        return 'xxi'\n    elif number == 22:\n        return 'xxii'\n    elif number == 23:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    roman = \"\"\n    while number!= 0:\n        number, index = divmod(number, 1000)\n        roman += mini_roman[index]\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n\n    roman_nums = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500,'m': 1000}\n    roman_nums.update({k.lower(): v for k, v in roman_nums.items()})\n\n    result = []\n\n    while number!= 0:\n        number, digit = divmod(number, 1000)\n        result.append(roman_nums[digit.lower()])\n\n    return ''.join(result)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def to_roman(n):\n        if n <= 0:\n            return \"\"\n        numbers = [(1000, \"m\"), (900, \"cm\"), (500, \"d\"), (400, \"cd\"),\n                   (100, \"c\"), (90, \"cc\"), (50, \"l\"), (40, \"xl\"),\n                   (10, \"x\"), (9, \"xx\"), (5, \"v\"), (4, \"iv\"), (1, \"i\")]\n        for numeral, roman in numbers:\n            while n >= numeral:\n                n -= numeral\n                yield roman\n    return \"\".join(to_roman(number))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be > 0, not {}'.format(number))\n\n    roman_map = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n\n    result = ''\n\n    while number > 0:\n        result += roman_map[number % 100]\n        number //= 100\n\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1:\n        raise ValueError('num must be positive')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    # Algorithm from Wikipedia\n    roman_numeral = ''\n    for integer_part in str(number).split('.'):\n        integer_part = integer_part.lstrip('0')\n        if len(integer_part) == 0:\n            continue\n        integer_part = str(int(integer_part))\n        while len(integer_part) > 0:\n            number -= 1\n            if number % 10 == 1:\n                roman_numeral += 'i'\n            elif number % 10 == 2:\n                roman_numeral += 'ii'\n            elif number % 10 == 3:\n                roman_numeral += 'iii'\n            elif number % 10 == 4:\n                roman_numeral += 'iv'\n            elif number % 10 == 5:\n                roman_numeral += 'v'\n            elif number % 10 == 6:\n                roman_numeral += 'vi'\n            elif number % 10 == 7:\n                roman_numeral += 'vii'\n            elif number % 10 == 8:\n                roman_numeral += 'viii'\n            elif number % 10 == 9:\n                roman_numeral += 'ix'\n            else:\n                roman_numeral += 'x'\n            number //= 10\n    return roman_numeral.", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral_map = {'0': 'zero', '1': 'one', '2': 'two', '3': 'three', '4': 'four', '5': 'five', '6':'six', '7':'seven', '8': 'eight', '9': 'nine', 'a': 'ten', 'b': 'eleven', 'c': 'twelve', 'd': 'thirteen', 'e': 'fourteen', 'f': 'fifteen', 'g':'sixteen', 'h':'seventeen', 'i': 'eighteen', 'j': 'nineteen'}\n\n    result = ''\n    for i in range(len(str(number))):\n        number, digit = divmod(number, 10)\n        result = roman_numeral_map[digit] + result\n\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        return ''\n    roman_numeral = ''\n    for integer_part in str(number):\n        integer_part = str(integer_part)\n        while integer_part:\n            integer_part, roman_part = divmod(integer_part, 10)\n            roman_numeral = roman_part + roman_numeral\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, 1000, 100):\n        if number >= i:\n            roman += roman[-2:] + str(i)\n            number -= i\n        elif number > 0:\n            roman += str(i)\n            number -= i\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = []\n    for integer, numeral in zip(range(1, 1000), ROMAN_NUMERALS):\n        while number >= integer:\n            result.append(numeral)\n            number -= integer\n    return ''.join(result).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"Number must be positive\")\n    if number < 100:\n        return chr(65 + number) + chr(97 + number % 26)\n    elif number < 1000:\n        return chr(97 + number / 100 % 10) + \\\n               chr(65 + number / 10 % 10) + \\\n               chr(97 + number % 10)\n    else:\n        raise ValueError(\"Number too big\")", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('number must be >= 1')\n\n    if number > 1000:\n        raise ValueError('number must be <= 1000')\n\n    roman_numeral_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix',\n        20: 'xx',\n        21: 'xxi',\n        22: 'xxii',\n        23: 'xxiii',\n        24: 'xxiv',\n        25: 'xxv',\n        26: 'xxvi',\n        27: 'xxvii',\n        28: 'xxviii',\n        29: 'xxix',\n        30: 'xxx',\n        40: 'l',\n        50: 'l',\n        80: 'x',\n        90: 'x',\n        100: 'c',\n        500: 'd',\n        900: 'cm'\n    }\n\n    result = []\n    for _ in range(number):\n        result.append(roman_numeral_map", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    result = []\n    for i in range(1, 10):\n        result.append(chr(ord('a') + i - 1))\n    result.extend(['m'] * (number // 1000))\n    result.extend(['cm'] * (number % 1000 // 100))\n    result.extend(['cd'] * (number % 100 // 10))\n    result.extend(['d'] * (number % 10))\n    return ''.join(result).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def to_roman(n):\n        if n == 0:\n            return 'i'\n        if n < 1:\n            raise ValueError(\"n must be greater than zero\")\n\n        roman_numerals = [\n            (1000,'m'),\n            (900, 'cm'),\n            (500, 'd'),\n            (400, 'cdvs'),\n            (100, 'c'),\n            (90, 'xc'),\n            (50, 'l'),\n            (40, 'xl'),\n            (10, 'x'),\n            (9, 'ix'),\n            (5, 'v'),\n            (4, 'iv'),\n            (1, 'i'),\n        ]\n\n        for numeral, roman in roman_numerals:\n            while n >= numeral:\n                result += roman\n                n -= numeral\n        return result\n\n    result = to_roman(number)\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_nums = (\n        (1000,'m'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cdvd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i'),\n    )\n    result = []\n    for numeral, roman in roman_nums:\n        while number >= numeral:\n            result.append(roman)\n            number -= numeral\n    result.reverse()\n    return ''.join(result).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1 or number > 1000:\n        raise ValueError('Number must be between 1 and 1000.')\n\n    roman_numeral = ''\n    for i in range(1000):\n        if i < number:\n            roman_numeral += 'i'\n        else:\n            roman_numeral += str(number - i)\n        number -= 1\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('number must be positive')\n\n    roman = ''\n    for numeral, integer in zip('ivxlcdm', range(1, 10)):\n        while number >= integer:\n            number -= integer\n            roman += numeral\n\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    result = ''\n    for integer, numeral in zip([1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1], 'MDCLXVI'):\n        number -= integer\n        if number < 0:\n            result += numeral\n            number += 1000\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, 1000):\n        if number >= i:\n            roman += roman[i]\n            number -= i\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"num must be > 0, not {0}\".format(number))\n\n    roman_numeral = ''\n\n    # Calculate the number of digits in the integer\n    num_digits = len(str(number))\n\n    # Initialize a list of digits\n    digits = [str(number)[-num_digits:] for n in range(num_digits)]\n\n    # Iterate through the digits backwards, from the end to the beginning\n    for i in reversed(range(num_digits)):\n        # Multiply the digit by its order in the roman numeral system\n        # (i.e., I = 1, V = 5, X = 10, L = 50, C = 100, D = 500, M = 1000)\n        digit = digits[i]\n\n        # If the digit is greater than or equal to 4, then we need to move\n        # to the next column\n        if digit >= 'IVXL':\n            # If the digit is greater than or equal to 5, then we need to\n            # move to the next row\n            if digit >= 'V':\n                # Add a V to the roman numeral\n                roman_numeral += 'V'\n            else:\n                # Add a X to the roman numeral\n                roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be a positive integer.')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000.')\n    roman_chars = ['c', 'd', 'l','m', 'x', 'i']\n    roman_integers = {\n        1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix',\n        10: 'x', 20: 'xx', 30: 'xxx', 40: 'xl', 50: 'l', 60: 'lx', 70: 'lxx', 80: 'lxxx',\n        90: 'cl', 100: 'c', 200: 'cc', 300: 'ccc', 400: 'cl', 500: 'd', 600: 'dc', 700: 'dcc',\n        800: 'dcl', 900: 'cm', 1000:'m'\n    }\n    if number <= 100:\n        return roman_integers[number]\n    elif number > 100:\n        roman_numeral = roman_integers[number // 100] + roman_integers[number %", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than 0.')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000.')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 20:\n        return 'xx'\n    if number == 40:\n        return 'xxx'\n    if number == 50:\n        return 'xlx'\n    if number == 60:\n        return 'xlxx'\n    if number == 70:\n        return 'xclx'\n    if number == 80:\n        return 'xclxx'\n    if number == 90:\n        return 'xcclx'\n    if number == 100:\n        return 'cx'\n    if number == 200:\n        return 'cc'\n    if number == 300:\n        return 'cccx'\n    if number == 400:\n        return 'cccc'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not (0 < number <= 1000):\n        raise ValueError(\"num must be between 1 and 1000\")\n    roman = ''\n    for i in range(0, 1000, 400):\n        if number >= i:\n            roman +='m'\n        else:\n            roman +=''\n    for i in range(0, 1000, 100):\n        if number >= i:\n            roman += 'c'\n        else:\n            roman +=''\n    for i in range(0, 1000, 50):\n        if number >= i:\n            roman += 'l'\n        else:\n            roman +=''\n    for i in range(0, 1000, 10):\n        if number >= i:\n            roman += 'x'\n        else:\n            roman +=''\n    for i in range(0, 1000, 5):\n        if number >= i:\n            roman += 'd'\n        else:\n            roman +=''\n    for i in range(0, 1000, 1):\n        if number >= i:\n            roman += 'v'\n        else:\n            roman +=''\n    return roman.strip().lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be >= 1.\")\n\n    roman_numeral = \"\"\n    for numeral, integer in mini_roman_numerals.items():\n        while number >= integer:\n            number -= integer\n            roman_numeral += numeral\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be positive')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_numeral = ''\n    for integer_part in str(number):\n        integer_part = int(integer_part)\n        if integer_part < 50:\n            roman_numeral += 'i'\n        elif integer_part < 100:\n            roman_numeral += 'ii'\n        elif integer_part < 200:\n            roman_numeral += 'iii'\n        elif integer_part < 1000:\n            roman_numeral += 'iv'\n        elif integer_part < 2000:\n            roman_numeral += 'v'\n        elif integer_part < 4000:\n            roman_numeral += 'vi'\n        elif integer_part < 8000:\n            roman_numeral += 'vii'\n        elif integer_part < 10000:\n            roman_numeral += 'viii'\n        elif integer_part < 20000:\n            roman_numeral += 'ix'\n        elif integer_part < 40000:\n            roman_numeral += 'x'\n        elif integer_part < 80000:\n            roman_numeral += 'xi'\n        elif integer_part < 100000:\n            roman_numeral += 'xii'\n        elif integer_part < 200000:\n            roman_numeral += 'xiii'\n        elif integer_part < 400", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1:\n        raise ValueError('int_to_mini_roman() arg must be positive')\n    if number >= 1000:\n        raise ValueError('int_to_mini_roman() arg must be <= 1000')\n\n    roman_numeral = ''\n    for integer_part in str(number):\n        integer_part = integer_part.lstrip('0')\n        if len(integer_part) > 0:\n            roman_numeral += roman_numeral_map[integer_part[0]]\n    return roman_numeral.lower()\n\n\nroman_numeral_map = {\n    1000:'m',\n    900: 'cm',\n    500: 'd',\n    400: 'cd'}\n\nroman_numeral_map.update({\n    100: 'c',\n    90: 'cc',\n    50: 'l',\n    40: 'cl',\n    10: 'x',\n    9: 'xx',\n    5: 'v',\n    4: 'iv',\n    1: 'i',\n})\n\nroman_numeral_map.update({\n    0: '',\n})", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be > 0')\n\n    # Build a lookup table\n    lookup_table = [''] * (10**4)\n    lookup_table[0] = ''\n    lookup_table[1] = 'i'\n    lookup_table[2] = 'ii'\n    lookup_table[3] = 'iii'\n    lookup_table[4] = 'iv'\n    lookup_table[5] = 'v'\n    lookup_table[6] = 'vi'\n    lookup_table[7] = 'vii'\n    lookup_table[8] = 'viii'\n    lookup_table[9] = 'ix'\n\n    # Convert the integer into roman numerals\n    roman = []\n    while number!= 0:\n        remainder = number % 10\n        if remainder == 0:\n            roman.append(lookup_table[number // 10])\n        else:\n            roman.append(lookup_table[remainder])\n        number //= 10\n    return ''.join(roman).lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n    if number == 1:\n        return 'i'\n    if number < 1 or number > 1000:\n        raise ValueError('Invalid number.')\n\n    number_str = str(number)\n    roman_str = ''\n    for i in range(len(number_str)):\n        if number_str[i] in string.digits:\n            roman_str += number_str[i]\n        else:\n            roman_str += int_to_mini_roman(int(number_str[i]) - 1)\n    return roman_str.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('number must be at least 1')\n    if number > 1000:\n        raise ValueError('number must be at most 1000')\n\n    result = \"\"\n    for i in range(0, 3):\n        if number < 1000:\n            number = number // 10\n            result += chr(65 + number % 10)\n        else:\n            number = number // 1000\n            result += chr(97 + number % 100)\n\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be positive')\n    if number < 100:\n        return str(number) + 'i'\n    if number < 1000:\n        number -= 100\n        return str(number / 10) + 'l' + str(number % 10) + 'i'\n    if number < 10000:\n        number -= 1000\n        return str(number / 100) + 'c' + str(number % 100) + 'i'\n    if number < 100000:\n        number -= 10000\n        return str(number / 1000) + 'd' + str(number % 1000) + 'i'\n    if number < 1000000:\n        number -= 100000\n        return str(number / 10000) +'m' + str(number % 10000) + 'i'\n    if number < 10000000:\n        number -= 1000000\n        return str(number / 100000) + 'x' + str(number % 100000) + 'i'\n    if number < 100000000:\n        number -= 10000000\n        return str(number / 1000000) + 'c' + str(number % 1000000) + 'i'\n    if number < 1000000000:\n        number -= 100000000\n        return str(number / 10000000) +'m' + str(number % 10000000) + 'i'\n    if number < 1", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def to_roman(n):\n        digits = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n        roman = \"\"\n        for i in range(len(digits)):\n            while n >= digits[i]:\n                n -= digits[i]\n                roman += digits[i]\n        return roman\n\n    roman = to_roman(number)\n    roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    roman_chars = ('M', 'D', 'C', 'L', 'X', 'V', 'I')\n    roman_nums = (1000, 500, 100, 50, 10, 5, 1)\n    result = []\n    while number!= 0:\n        result.append(roman_chars[number % roman_nums])\n        number //= roman_nums\n    return ''.join(result).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number == 1:\n        return 'i'\n\n    if number < 1 or number > 1000:\n        raise ValueError('Invalid number')\n\n    roman_numeral = ''\n    for numeral, integer in roman_numerals.items():\n        while number >= integer:\n            roman_numeral += numeral\n            number -= integer\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Do we know the result?\n    if number <= 0 or number > 1000:\n        return ''\n\n    result = ''\n    for i in range(1, 1000):\n        if number >= i:\n            result += roman_to_int(i) * (number // i)\n            number %= i\n\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_chars = 'ivxlcdm'\n    num_chars = str(number)\n\n    roman = ''\n\n    while len(num_chars) > 0:\n        while num_chars[0] in roman_chars:\n            roman += roman_chars[num_chars[0]]\n            num_chars = num_chars[1:]\n\n        if num_chars[0] == 'x':\n            roman += roman_chars[num_chars[0] + 1]\n            num_chars = num_chars[1:]\n        elif num_chars[0] == 'L':\n            roman += roman_chars[num_chars[0] + 2]\n            num_chars = num_chars[1:]\n        elif num_chars[0] == 'c':\n            roman += roman_chars[num_chars[0] + 3]\n            num_chars = num_chars[1:]\n        elif num_chars[0] == 'd':\n            roman += roman_chars[num_chars[0] + 4]\n            num_chars = num_chars[1:]\n        elif num_chars[0] =='m':\n            roman += roman_chars[num_chars[0] + 5]\n            num_chars = num_chars[1:]\n\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Base case\n    if number == 0:\n        return 'i'\n\n    result = ''\n\n    # Convert the number into a string\n    number_str = str(number)\n\n    # Loop through each character in the number string, and perform the\n    # operations as we go\n    for i in range(len(number_str)):\n        # If the current digit is not equal to 1, then we are at the\n        # end of the number, so we can return the result\n        if number_str[i]!= '1':\n            return result\n\n        # Otherwise, we need to perform some operations\n        else:\n            # Multiply the current digit by 1000\n            number = int(number_str[i]) * 1000\n\n            # Convert the number to a string, and add it to the result\n            result += int_to_mini_roman(number)\n\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n\n    def to_roman(n):\n        vals = {1: 'i', 5: 'v', 10: 'x', 40: 'l', 50: 'c', 90: 'd'}\n        return vals[n]\n\n    result = []\n    for x, numeral in enumerate(str(number)):\n        result.append(to_roman(int(numeral)))\n    return ''.join(result)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Valid roman numeral ranges\n    nums = ['i', 'v', 'x', 'l', 'c', 'd']\n    vals = [1000, 500, 100, 50, 10, 1]\n    res = []\n    num = str(number)\n    for i in num:\n        if i in nums:\n            res.append(i)\n    res.reverse()\n    return res", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral_map = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'VIII',\n        9: 'IX',\n        10: 'X',\n        20: 'XX',\n        30: 'XXX',\n        40: 'XL',\n        50: 'L',\n        60: 'LX',\n        70: 'LXX',\n        80: 'LXXX',\n        90: 'XC',\n        100: 'C',\n        500: 'D',\n        1000: 'M'\n    }\n\n    result = ''\n    for i in range(len(str(number))):\n        result += roman_numeral_map[int(str(number)[i])]\n\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman_chars = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix', 'xx', 'xxi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii']\n    roman_numeral = ''\n    for char in roman_chars:\n        while number >= int(char):\n            roman_numeral += char\n            number -= int(char)\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    result = \"\"\n    for i in range(1000, 0, -1):\n        if number >= i:\n            number -= i\n            result += (chr(i + ord(\"I\")))\n        else:\n            break\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert 1 <= number <= 1000\n    if number < 40:\n        return chr(ord('a') + number)\n    elif number < 90:\n        return chr(ord('i') + number - 40)\n    elif number < 140:\n        return chr(ord('v') + number - 90)\n    elif number < 190:\n        return chr(ord('x') + number - 140)\n    elif number < 240:\n        return chr(ord('l') + number - 190)\n    elif number < 300:\n        return chr(ord('c') + number - 240)\n    elif number < 350:\n        return chr(ord('d') + number - 300)\n    elif number < 400:\n        return chr(ord('d') + number - 350)\n    elif number < 500:\n        return chr(ord('c') + number - 400)\n    elif number < 600:\n        return chr(ord('l') + number - 500)\n    elif number < 700:\n        return chr(ord('x') + number - 600)\n    elif number < 800:\n        return chr(ord('v') + number - 700)\n    elif number < 900:\n        return chr(ord('i') + number - 800)\n    elif number < 1000", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for numeral, integer in zip(ROMAN_NUMERALS, range(1000, 0, -1)):\n        while number >= integer:\n            roman += numeral\n            number -= integer\n\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    roman = []\n    for i in range(1000):\n        roman.append([])\n    for i in range(1, 1000):\n        for j in range(1000):\n            if number >= i:\n                roman[i].append(j)\n                number -= i\n                break\n    roman.reverse()\n    return \"\".join([roman[c] for c in ('M', 'D', 'C', 'L', 'X', 'V', 'I')])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    roman_nums = [(1000,'m'), (900, 'cm'), (500, 'd'), (400, 'cdvs'), (100, 'c'),\n                  (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'),\n                  (5, 'v'), (4, 'iv'), (1, 'i')]\n\n    result = ''\n    for numeral, numeral_roman in roman_nums:\n        while number >= numeral:\n            result += numeral_roman\n            number -= numeral\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"Number must be positive\")\n    if number > 3999:\n        raise ValueError(\"Number must be less than 4000\")\n    if number < 1000:\n        return str(number)\n    if number >= 1000 and number < 2000:\n        return str(number) + \"c\"\n    if number >= 2000 and number < 3000:\n        return str(number) + \"cd\"\n    if number >= 3000 and number < 4000:\n        return str(number) + \"dc\"\n    if number >= 4000 and number < 5000:\n        return str(number) + \"cm\"\n    if number >= 5000 and number < 6000:\n        return str(number) + \"mm\"\n    if number >= 6000 and number < 7000:\n        return str(number) + \"m\"\n    if number >= 7000 and number < 8000:\n        return str(number) + \"mm\"\n    if number >= 8000 and number < 9000:\n        return str(number) + \"m\"\n    if number >= 9000 and number < 10000:\n        return str(number) + \"m\"\n    if number >= 10000 and number < 11000:\n        return str(number) + \"m\"\n    if number >= 11000 and number < 12000:\n        return str(number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be >= 1')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    if number <= 9:\n        return str(number)\n    if number <= 40:\n        return str(number) + 'ix'\n    if number <= 90:\n        return str(number / 10) + 'l' + str(number % 10)\n    if number <= 140:\n        return str(number / 100) + 'c' + str(number % 100) + 'i'\n    if number <= 200:\n        return str(number / 1000) + 'd' + str(number % 1000) + 'xx'\n    if number <= 400:\n        return str(number / 10000) +'m' + str(number % 10000) + 'xxiv'\n    if number <= 1000:\n        return str(number / 100000) + 'cm' + str(number % 100000) + 'xxviii'\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = str(number)\n    if number == '':\n        return ''\n\n    num_str = str(number)\n    roman_numeral = ''\n    for i, digit in enumerate(num_str):\n        if digit in ('X', 'x'):\n            roman_numeral += 'xx'\n        elif digit in ('V', 'v'):\n            roman_numeral += 'vv'\n        elif digit in ('L', 'l'):\n            roman_numeral += 'll'\n        elif digit in ('C', 'c'):\n            roman_numeral += 'cc'\n        elif digit in ('D', 'd'):\n            roman_numeral += 'dd'\n        elif digit in ('M','m'):\n            roman_numeral +='mm'\n        else:\n            roman_numeral += digit\n\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    assert 1 <= number <= 1000\n    if number == 1:\n        return \"i\"\n    if number == 2:\n        return \"ii\"\n    if number == 3:\n        return \"iii\"\n    if number < 20:\n        return str(number) + \"i\"\n    if number < 100:\n        return str(number / 10) + str(number % 10) + \"i\"\n    if number < 1000:\n        return str(number / 100) + str(number % 100) + \"ii\"\n    if number < 10000:\n        return str(number / 1000) + str(number % 1000) + \"iii\"\n    if number < 100000:\n        return str(number / 10000) + str(number % 10000) + \"iv\"\n    if number < 1000000:\n        return str(number / 100000) + str(number % 100000) + \"vi\"\n    if number < 10000000:\n        return str(number / 1000000) + str(number % 1000000) + \"vii\"\n    if number < 100000000:\n        return str(number / 10000000) + str(number % 10000000) + \"viii\"\n    if number < 1000000000:\n        return str(number / 100000000) + str(number % 100000000) + \"ix\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('Value out of range. Must be between 1 and 1000.')\n\n    roman = ''\n\n    # Special cases\n    if number == 0:\n        return 'i'\n    if number == 1:\n        return 'i'\n    if number == 4:\n        return 'iv'\n\n    # Step 1: Divide number by 1000 and get quotient (q) and remainder (r)\n    q, r = divmod(number, 1000)\n\n    # Step 2: Divide r by 100 and get quotient (q) and remainder (r)\n    q2, r2 = divmod(r, 100)\n\n    # Step 3: Divide q2 by 10 and get quotient (q) and remainder (r)\n    q3, r3 = divmod(q2, 10)\n\n    # Step 4: Divide r3 by 10 and get quotient (q) and remainder (r)\n    q4, r4 = divmod(r3, 10)\n\n    # Step 5: Convert the remainders into roman numerals\n    roman += int_to_mini_roman(q4) + int_to_mini_roman(r4)\n    roman += int_to_mini_roman(q3) + int_to_mini_roman(r3)\n    roman += int_to_", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        raise ValueError('num must be positive')\n    result = \"\"\n    for i in range(len(ROMAN_NUMERAL)):\n        number -= ROMAN_NUMERAL[i]\n        if number < 0:\n            number += 1000\n        result += ROMAN_NUMERAL[i]\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_numeral_map = {1:'i', 5:'v', 10:'x', 50:'l', 100:'c', 500:'d', 1000:'m'}\n\n    roman_numeral = \"\"\n    number = str(number)\n    for digit in number:\n        if digit in roman_numeral_map:\n            roman_numeral += roman_numeral_map[int(digit)]\n        else:\n            roman_numeral += digit\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def to_roman(number):\n        \"\"\"\n        Convert integer to roman numeral.\n        \"\"\"\n        if not 0 < number < 4000:\n            raise ValueError('Out of range')\n        number = str(number)\n        if len(number) == 1:\n            return number\n        result = ''\n        for i, c in enumerate(number):\n            if c == 'x':\n                result += 'xx'\n            else:\n                result += roman_alphabet[c]\n        return result\n\n    roman_alphabet = ('i', 'v', 'x', 'l', 'c', 'd','m')\n    number = str(number)\n    result = ''\n    for i, c in enumerate(number):\n        if c == 'x':\n            result += to_roman(int(number[:i]) * 10 + int(number[i + 1:]))\n        else:\n            result += roman_alphabet[c]\n    return result.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"number must be positive\")\n    result = \"\"\n    for i in range(3, -1, -1):\n        result = \"{0}{1}\".format(result, roman_numeral(number // (10 ** i)))\n\n    return result[::-1].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError('`number` must be an integer')\n    if number < 1 or number > 1000:\n        raise ValueError('`number` must be between 1 and 1000')\n\n    roman_numerals = {\n        1000:'m',  900: 'cm',  500: 'd',  400: 'cd'}\n    roman_numerals_upper = {\n        1000: 'M',  900: 'CM',  500: 'D',  400: 'CD'}\n\n    if number > 4000:\n        raise ValueError('`number` cannot exceed 4000')\n\n    roman_numeral = ''\n\n    for i in range(1, number // 1000 + 1):\n        roman_numeral += roman_numerals[1000]\n\n    for i in range(1, number % 1000 // 100 + 1):\n        roman_numeral += roman_numerals[100]\n\n    for i in range(1, number % 100 // 10 + 1):\n        roman_numeral += roman_numerals[10]\n\n    for i in range(1, number % 10):\n        roman_numeral += roman_numerals[0]\n\n    roman_numeral = roman_numeral.lower()\n\n    if number >= 4000:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n\n    roman_numeral_map = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000:'m'\n    }\n\n    if number == 1:\n        return roman_numeral_map[1]\n\n    if number in roman_numeral_map.keys():\n        return roman_numeral_map[number]\n\n    result = []\n\n    for n in range(0, number):\n        index = number - n\n\n        if index < len(roman_numeral_map):\n            result.append(roman_numeral_map[index])\n        else:\n            result.append(roman_numeral_map[1000])\n\n    return ''.join(result)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        raise ValueError('Number must be positive')\n\n    # List of mini roman symbols\n    symbols = 'iivixcxdlmn'\n    roman_numeral = []\n\n    # Convert to string\n    string_number = str(number)\n\n    # Remove any leading zeros\n    while string_number[0] == '0':\n        string_number = string_number[1:]\n\n    # Convert the string to an integer\n    number = int(string_number)\n\n    # Convert the integer to a string of digits\n    digits = str(number).zfill(4)\n\n    # Convert each digit to a roman numeral symbol\n    for digit in digits:\n        roman_numeral.append(symbols[int(digit) - 1])\n\n    # Convert the roman numeral string to lowercase\n    roman_numeral = ''.join(roman_numeral).lower()\n\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be >= 1')\n    if number > 1000:\n        raise ValueError('Number must be <= 1000')\n\n    roman_numeral = \"\"\n    for digit in str(number):\n        if digit == '9':\n            roman_numeral += \"ix\"\n        elif digit == 'x':\n            roman_numeral += \"xx\"\n        elif digit == 'xx':\n            roman_numeral += \"lxx\"\n        elif digit == 'lx':\n            roman_numeral += \"clx\"\n        elif digit == 'cl':\n            roman_numeral += \"cd\"\n        elif digit == 'cd':\n            roman_numeral += \"dc\"\n        elif digit == 'dc':\n            roman_numeral += \"cc\"\n        elif digit == 'cc':\n            roman_numeral += \"xx\"\n        elif digit == 'xc':\n            roman_numeral += \"xc\"\n        elif digit == 'x':\n            roman_numeral += \"xx\"\n        else:\n            roman_numeral += digit\n\n    return roman_numeral.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('number must be positive')\n    if number > 1000:\n        raise ValueError('number must be <= 1000')\n    if number == 1:\n        return 'i'\n    elif number == 2:\n        return 'ii'\n    elif number < 5:\n        return str(number) + 'i'\n    elif number < 9:\n        return str(number) + 'ii'\n    elif number < 19:\n        return str(number) + 'iii'\n    elif number < 38:\n        return str(number) + 'iv'\n    elif number < 52:\n        return str(number) + 'v'\n    elif number < 71:\n        return str(number) + 'vi'\n    elif number < 101:\n        return str(number) + 'vii'\n    elif number < 191:\n        return str(number) + 'viii'\n    elif number < 381:\n        return str(number) + 'ix'\n    elif number < 851:\n        return str(number) + 'x'\n    elif number < 1231:\n        return str(number) + 'xi'\n    elif number < 2028:\n        return str(number) + 'xii'\n    elif number < 4099:\n        return str(number) + 'xiii'"]]