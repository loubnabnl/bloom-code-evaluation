[["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Validate input\n    if not isinstance(number, (int, long)):\n        raise TypeError('Invalid type')\n\n    if number < 1:\n        raise ValueError('Invalid number')\n    elif number == 1:\n        return 'i'\n    elif number == 2:\n        return 'ii'\n    elif number == 3:\n        return 'iii'\n    elif number == 4:\n        return 'iv'\n    elif number == 5:\n        return 'v'\n    elif number == 6:\n        return 'vi'\n    elif number == 7:\n        return 'vii'\n    elif number == 8:\n        return 'viii'\n    elif number == 9:\n        return 'ix'\n    elif number == 10:\n        return 'x'\n    elif number == 11:\n        return 'xi'\n    elif number == 12:\n        return 'xii'\n    elif number == 13:\n        return 'xiii'\n    elif number == 14:\n        return 'xiv'\n    elif number == 15:\n        return 'xv'\n    elif number == 16:\n        return 'xvi'\n    elif number == 17:\n        return 'xvii'\n    elif number == 18:\n        return 'xviii'\n    elif number == 19:\n        return 'xix'\n    elif number < 20:\n        return str(number) + '.'\n    elif number < 100:\n        roman_numeral = int_to_mini_roman(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return''\n    if number < 1:\n        return str(number)\n    result = ''\n    for i in range(1, 1000):\n        digit = number % 10\n        number = number / 10\n        if digit == 1:\n            result +='m'\n        elif digit == 3:\n            result += 'cm'\n        elif digit == 4:\n            result += 'd'\n        elif digit == 5:\n            result += 'dc'\n        elif digit == 6:\n            result += 'cm'\n        elif digit == 7:\n            result += 'd'\n        elif digit == 8:\n            result += 'cd'\n        elif digit == 9:\n            result += 'cm'\n        elif digit == 10:\n            result += 'x'\n        elif digit == 11:\n            result += 'xi'\n        elif digit == 12:\n            result += 'xl '\n        elif digit == 13:\n            result += 'xc'\n        elif digit == 14:\n            result += 'xx'\n        elif digit == 15:\n            result += 'xl'\n        elif digit == 16:\n            result += 'xv '\n        elif digit == 17:\n            result += 'xxc'\n        elif digit == 18:\n            result += 'xlv'\n        elif digit == 19:\n            result += 'xxx'\n        elif digit == 20:\n            result += 'xlix'\n        elif digit == 21:\n            result +=", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_nums = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd': 300: 'cc',\n        100: 'c',\n        90: 'cc',\n        50: 'x',\n        40: 'xx',\n        10: 'x',\n        9: 'xx',\n        5: 'l',\n        4: 'l',\n        1: 'i',\n    }\n    result = []\n    for numeral, roman in roman_nums.items():\n        while number >= numeral:\n            result.append(roman)\n            number -= numeral\n    return ''.join(reversed(result)).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not number >= 1 and number <= 1000:\n        raise ValueError(\"Value out of range\")\n\n    if number == 1:\n        return \"i\"\n\n    roman_numeral = \"\"\n    for i in range(1, 10):\n        while number >= i:\n            number -= i\n            roman_numeral += chr(i + ord(\"A\"))\n        if number == 0:\n            break\n\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # 1 = I; 10 = X; 100 = C; 1000 = M\n    MAX = 1000\n    result = ''\n    while number > 0:\n        number -= 1\n        digit = number % 10\n        result += roman_symbols[digit - 1]\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not (1 <= number <= 1000):\n        raise ValueError(f\"num should be an integer between 1 and 1000. It is {number}\")\n\n    if number == 1:\n        return 'i'\n\n    result = ''\n    for i in range(0, number):\n        result += roman_digits[i]\n\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    def _convert(n):\n        number = n\n        if number < 1:\n            raise ValueError(\"num must be greater than 0\")\n        elif number < 50:\n            return str(number)\n        elif number >= 50:\n            number -= 49\n            if number < 8:\n                return str(number+1) + 'l'\n            elif number < 20:\n                return str(number+1) + 'c'\n            elif number < 40:\n                return str(number+1) + 'd'\n            elif number < 80:\n                return str(number+1) + 'x'\n            else:\n                return str(number+1) + 'v'\n\n    if type(number)!= int or number <= 0:\n        raise ValueError(\"num must be an integer greater than 0\")\n    return _convert(number)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('must be 1 <= num <= 1000')\n\n    MAXIMUM_VALUE = 1000\n\n    num_tens = number / 100\n    num_ones = number % 100\n\n    mini_roman = ''\n\n    if num_tens == 0:\n        mini_roman += 'i'\n    else:\n        mini_roman += int_to_mini_roman(num_tens) + 'c'\n\n    if num_ones == 0:\n        mini_roman += 'i'\n    else:\n        mini_roman += int_to_mini_roman(num_ones) + 'x'\n\n    return mini_roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_chars = 'i iv vi ix lx cxl xc dxx lxxx xcxx m lm'.split()\n    return ''.join([ roman_chars[num % len(roman_chars)] for num in range(number) ])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = \"\"\n    for i in range(1000, 0, -1):\n        for numeral, integer in mini_roman_map.items():\n            while integer <= i:\n                result += numeral\n                i -= integer\n    return result[::-1].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('int_to_roman requires a positive integer.')\n\n    roman_numerals = (\n        ('M', 1000),\n        ('CM', 900),\n        ('D', 500),\n        ('CD', 400),\n        ('C', 100),\n        ('XC', 90),\n        ('L', 50),\n        ('XL', 40),\n        ('X', 10),\n        ('IX', 9),\n        ('V', 5),\n        ('IV', 4),\n        ('I', 1)\n    )\n    result = \"\"\n    for numeral, integer in roman_numerals:\n        while number >= integer:\n            result += numeral\n            number -= integer\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert 0 <= number <= 1000\n    assert isinstance(number, int)\n\n    roman_nums = ['m', 'cm', 'd', 'cd']\n    roman_nums += ['x', 'xx', 'l', 'lx']\n    roman_nums += ['', 'i', 'ii', 'iii']\n    roman_nums += ['v', 'vi', 'viii', 'ix']\n    roman_nums += ['x', 'xx', 'xi', 'xii']\n    roman_nums += ['l', 'lx', 'lxx']\n    roman_nums += ['', 'c', 'cc', 'ccc']\n    roman_nums += ['d', 'd', 'dc']\n    roman_nums += ['cm','mm']\n    roman_nums += ['m', '', '']\n\n    nums = []\n    for num in roman_nums:\n        while number >= 1000:\n            number -= 1000\n            nums.append(num[:-1] + 'i')\n\n    while number > 0:\n        if number < 50:\n            nums.append(roman_nums[-1] + roman_nums[-2])\n            number -= 50\n        elif number < 100:\n            nums.append(roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    nums = []\n\n    def to_roman(n):\n        roman = []\n        while n > 0:\n            for i in xrange(4, -1, -1):\n                mod = n % 10\n                if mod == 1: roman.append('x')\n                elif mod == 3: roman.append('v')\n                elif mod == 5: roman.append('l')\n                elif mod == 7: roman.append('c')\n                elif mod == 9: roman.append('d')\n                else: roman.append(str(mod))\n                n //= 10\n        return ''.join(roman)\n\n    i = to_roman(number)\n\n    while len(i) > 0:\n        nums.append(i[-1])\n        i = i[:-1]\n\n    return ''.join(nums)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not isinstance(number, int) or not number > 0 or number > 1000:\n        raise ValueError('Invalid number.')\n    if number <= 32:\n        return chr(number + 64)\n    result = ''\n    for numeral, integer in zip(MINSIC_NUMBERS, range(1, 1000)):\n        if number < integer:\n            result += chr(numeral)\n            break\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Input must be positive\")\n    if number < 40:\n        return chr(ord('a') + number - 1)\n    else:\n        mod = number % 100\n        number = number // 100\n        if mod > 40:\n            return chr(ord('a') + mod - 40) + chr(ord('i') + number - 1)\n        else:\n            return chr(ord('a') + mod - 1) + chr(ord('i') + number - 1)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # 1.- Shortcut for 1 to 19\n    if number <= 19:\n        return str(number) + 'o'\n    # 2.- Shortcut for 20 to 99\n    elif number >= 20 and number < 100:\n        return str(number) + 'x'\n    # 3.- Base case\n    else:\n        number = int(number)\n\n        i = 3\n        result = []\n        while number!= 0:\n            number, i = divmod(number, 10)\n            result.append(str(i))\n        result.reverse()\n        return ''.join(result) + 'cm'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_numerals = ('M','CM','D','CD','C','XC','L','XL','X','IX','V','IV','I')\n\n    def to_roman(n):\n        number = int(n)\n        result = \"\"\n\n        while number > 0:\n            result += roman_numerals[number % 10]\n            number = number / 10\n\n        return result\n\n    result = \"\"\n    while number > 0:\n        result += to_roman(number % 1000)\n        number = number / 1000\n\n    return result[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Find range\n    if number < 1 or number > 1000:\n        raise ValueError('Invalid number')\n\n    # Dictionary of roman numeral values\n    roman_numeral_dict = {\n        'ii': 2, 'iii': 3, 'iv': 4, 'v': 5, 'vi': 6,\n        'vii': 7, 'viii': 8, 'ix': 9,\n        'xi': 10, 'xii': 20, 'xiii': 30, 'xiv': 40, 'xv': 50, 'xvi': 60,\n        'xvii': 70, 'xviii': 80, 'xix': 90,\n        'xx': 100,\n        'xxi': 200, 'xxii': 300, 'xxiii': 400, 'xxiv': 500, 'xxv': 600,\n        'xxvi': 700, 'xxvii': 800, 'xxviii': 900, 'xxix': 1000\n    }\n\n    result = ''\n    for i in range(1, number + 1):\n        result += roman_numeral_dict[str(i)]\n\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    number_str = str(number)\n    res = []\n    if number_str[-1] == 0:\n        number_str = number_str[:-1]\n\n    if len(number_str) == 1:\n        res.append('v')\n    elif number_str[0] == 1:\n        res.append('i')\n    elif number_str[0] == 2:\n        res.append('ii')\n    elif number_str[0] == 3:\n        res.append('iii')\n    elif number_str[0] == 4:\n        res.append('iv')\n    elif number_str[0] == 5:\n        res.append('v')\n    elif number_str[0] == 6:\n        res.append('vi')\n    elif number_str[0] == 7:\n        res.append('vii')\n    elif number_str[0] == 8:\n        res.append('viii')\n    elif number_str[0] == 9:\n        res.append('ix')\n    elif number_str[0] == 0:\n        res.append('x')\n    else:\n        for digit in number_str:\n            if digit == 5:\n                res.append('v')\n            elif digit == 9:\n                res.append('x')\n            elif digit >= 8:\n                res.append(str(digit + 1))\n            else:\n                res.append(str(digit))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    def _convert_int(number):\n        number = str(number)\n        if len(number) == 1:\n            number = '0' + number\n        if number[-1] == 'x':\n            return number[:-1]\n        elif number[-1] == 'l' or number[-1] == 'L':\n            return number[:-1] + 'c'\n        elif number[-1] == 'c' or number[-1] == 'C':\n            return number[:-1] + 'd'\n        else:\n            return number\n\n    return ''.join(_convert_int(i) for i in str(number).split(''))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 0 < number < 1000:\n        raise ValueError('Invalid number.')\n    number = str(number).upper()\n    result = []\n    i = 3\n    while number[i]!='':\n        if number[i] == 'X':\n            result.append('xx')\n        elif number[i] == 'L':\n            result.append('x')\n        elif number[i] == 'C':\n            result.append('x')\n        elif number[i] == 'D':\n            result.append('xx')\n        i += 1\n    while number[i] =='':\n        i += 1\n    return ''.join(result)[:-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = ''\n    roman_numerals = ('M','CM','D','CD','C','XC','L','XL','X','IX','V','IV','I')\n    while number > 0:\n        for numeral, integer in zip(roman_numerals, range(10)):\n            while number >= integer:\n                result += numeral\n                number -= integer\n        if number < 1:\n            result += numeral\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Base 10 to base 3\n    number = number - (number % 10) # Remove the last digit\n    number = (number // 10) * 1000 # Split the number into groups of 3\n    result = ''\n    while number:\n        number, roman_numeral = divmod(number, 1000)\n        result = roman_numeral + result\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert number > 0 and number <= 1000\n    retval = \"\"\n    while number!= 0:\n        retval = retval + roman_symbols[number % 10]\n        number = number / 10\n    return retval", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # note: this function is provided as an example of an I/O-intensive task\n    # that might be appropriate to parallelize. The strategy here is to\n    # divide up the problem into \"chunks\" of 1000 numbers and then hand these\n    # chunks off to a thread pool.\n    #\n    # This may not actually be a good idea for a production-quality version\n    # of this function. For example, the `multiprocessing` module is more\n    # robust than the `threading` module, and provides more features and\n    # options. However, for the purposes of this example, `multiprocessing`\n    # is not available on the system for which this code is being written.\n    #\n    # In this case, it is better to use a for loop and a generator expression\n    # for the actual work, rather than use a list comprehension and\n    # `map`. This is because the list comprehension and `map` approach requires\n    # that the results be collected into a list, which incurs a significant\n    # overhead cost (at least when the input list is long). A generator\n    # expression is more efficient, because the work can be performed\n    # incrementally, and then the results can be yielded at the time of", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_words = (\n    ((1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'),\n     (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'),\n     (5, 'V'), (4, 'IV'), (1, 'I')),\n    ((1, 'I'), (2, 'II'), (3, 'III'), (4, 'IV'), (5, 'V'),\n     (6, 'VI'), (7, 'VII'), (8, 'VIII'), (9, 'IX'), (10, 'X'),\n     (11, 'XI'), (12, 'XII'), (13, 'XIII'), (14, 'XIV'),\n     (15, 'XV'), (16, 'XVI'), (17, 'XVII'), (18, 'XVIII'),\n     (19, 'XIX'), (20, 'XX'), (21, 'XXI'), (22, 'XXII'),\n     (23, 'XXIII'), (24, 'XXIV'), (25, 'XXV'), (26, 'XXVI'),\n     (27, 'XXVII'), (28, 'XX", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    digits = 'ivxlcdm'\n    nums = str(number)\n    res = ''\n    while len(nums) > 0:\n        res += digits[int(nums.pop(0)) - 1]\n    return res", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # The Romans had ten digits. The numerals for I to X and L to D are the same,\n    # so we can only need two characters to represent a number.\n\n    if number < 0:\n        raise ValueError(\"Negative integers not allowed.\")\n\n    # Here, we store all the roman numerals that we can use, starting with the\n    # larger ones.\n    numeral_list = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n\n    result = \"\"\n\n    while number > 0:\n        number, i = divmod(number, 10)\n\n        # Each of the roman numerals is ten times the previous number, so we\n        # just have to iterate through them until we get to the right number.\n        result += numeral_list[i]\n\n    # Remove any leading zeros and convert the result to lowercase.\n    return result.lstrip(\"0\").lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Do the conversion\n    numlist = list(str(number))\n    for i in range(len(numlist)):\n        if numlist[i] == '9':\n            numlist[i] = 'vi'\n        else:\n            numlist[i] = str(int(numlist[i]) + 1)\n\n    # Now check if the first number is not 1 or 2\n    if numlist[0] not in ['i', 'ii']:\n        return 'i' + ''.join(numlist)\n    else:\n        return ''.join(numlist)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return ''.join(int_to_mini_roman_letter(number // len(roman_numerals))\n                   for roman_numerals in roman_numerals_set)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def to_roman(num):\n        symbols = ('M', 'D', 'C', 'L', 'X', 'V', 'I')\n        roman = ''\n        for digit in str(num):\n            index = symbols.index(str(num)[-1])\n            roman += symbols[index - 1]\n        return roman\n    if number <= 0:\n        raise ValueError('Negative numbers are not supported')\n    if number > 3999:\n        return str(int(number))\n    if number > 1000:\n        return str(int(number // 1000)) + 'M' + int_to_mini_roman(number % 1000)\n    if number > 900:\n        return str(int(number // 100)) + 'C' + int_to_mini_roman(number % 100)\n    if number > 500:\n        return str(int(number // 50)) + 'D' + int_to_mini_roman(number % 50)\n    if number > 100:\n        return str(int(number // 10)) + 'X' + int_to_mini_roman(number % 10)\n    if number > 40:\n        return str(int(number // 5)) + 'V' + int_to_mini_roman(number % 5)\n    if number > 9:\n        return str(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        raise ValueError('Number must be positive')\n    result = ''\n    for i in range(len(roman_numeral_map)):\n        count = number % 10\n        number //= 10\n        result += roman_numeral_map[i] * (count == 1)\n    return result.lower()\n\nroman_numeral_map = (\n    ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400), ('C', 100),\n    ('XC', 90), ('L', 50), ('XL', 40), ('X', 10),\n    ('IX', 9), ('V', 5), ('IV', 4), ('I', 1)\n)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be >= 1')\n\n    if number < 20:\n        return str(number)\n\n    result = []\n\n    # Each \"word\" is either M, D, C, L, or X\n    for number in range(1, 1000, 4):\n        prefix = ''\n        if number % 10 == 1:\n            prefix += 'M'\n        elif number % 10 == 2:\n            prefix += 'D'\n        elif number % 10 == 3:\n            prefix += 'C'\n        elif number % 10 == 4:\n            prefix += 'L'\n        else:\n            prefix += 'X'\n\n        # Create the Roman numeral\n        numberString = str(number // 10)\n        if number % 10!= 0:\n            numberString += str(number % 10)\n\n        result.append(prefix + numberString)\n\n    return result[0] + result[1] + result[2] + result[3]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"The number must be greater than 0!\")\n    elif number > 1000:\n        raise ValueError(\"The number must be less than 1000!\")\n    else:\n        base = ['c', 'd','m', 'l', 'x']\n        roman = ''\n        number_str = str(number)\n        if number_str[-1] in base:\n            roman += number_str[-1]\n            number -= (int(number_str[-1]) * int(number_str[:-1]))\n            number_str = number_str[:-1]\n        while number_str:\n            for index, digit in enumerate(number_str):\n                if digit == 'x':\n                    roman += base[index]\n                    number -= 10 ** index\n                elif digit == number_str[index - 1]:\n                    roman += base[index]\n                else:\n                    roman += str(number)\n                    number -= int(digit)\n            number_str = number_str[:-1]\n        return roman.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number == 0:\n        return ''\n    elif number < 1 or number > 1000:\n        raise ValueError\n\n    roman_integers = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n\n    i = integer_to_roman(number)\n\n    return ''.join(str(roman_integer) for roman_integer in roman_integers[i-1::-1])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number <= 0:\n        raise ValueError(\"Num must be positive.\")\n\n    roman_number = \"\"\n    for i in range(1, 1000):\n        if number >= i:\n            roman_number += roman_chars[i] * (number / i)\n            number -= (number / i) * i\n\n    return roman_number.lower()\n\nroman_chars = (\n    ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n    ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n    ('X', 10), ('IX', 9), ('V', 5), ('IV', 4),\n    ('I', 1)\n)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError('number must be an integer')\n    if number <= 0:\n        raise ValueError('number must be positive')\n    if number <= 1000:\n        roman_string = _num_to_roman(number)\n    else:\n        raise ValueError('Number must be <= 1000')\n\n    return roman_string.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def toRoman(n):\n        if n < 1:\n            return ''\n        if n == 1:\n            return 'i'\n        else:\n            result = ''\n            while n > 0:\n                result += toRoman(n % 10)\n                n //= 10\n            return result.lower()\n    return toRoman(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Converts a given integer into a roman numeral\n    roman_numeral = \"\"\n\n    for i in range(1, 1000):\n        # Each time, the number is added to the roman numeral, unless it is the wrong\n        # number of digits, in which case we start again. e.g. if number is 100, it will\n        # add 'x' to roman_numeral, but if number is 101, it will add 'xx'. It will\n        # continue until number is 1000, in which case it will add'mm' and return.\n        if number >= i:\n            roman_numeral += str(number / i)\n            number %= i\n            if number == 0:\n                break\n        else:\n            break\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_numerals = (\n        ('M', 1000),\n        ('CM', 900),\n        ('D', 500),\n        ('CD', 400),\n        ('C', 100),\n        ('XC', 90),\n        ('L', 50),\n        ('XL', 40),\n        ('X', 10),\n        ('IX', 9),\n        ('V', 5),\n        ('IV', 4),\n        ('I', 1)\n    )\n\n    result = []\n    for numeral, integer in roman_numerals:\n        while number >= integer:\n            result.append(numeral)\n            number -= integer\n    return ''.join(reversed(result))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    roman = []\n    while number!= 0:\n        number, r = divmod(number, 1000)\n        roman.append(r)\n    roman.reverse()\n    return ''.join([chr(ord('a') + i) for i in roman])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # This works by changing a number to roman numeral in two steps:\n    # 1. Split the number into groups of 3 (xxx, xxx, xxx, xxx)\n    # 2. Convert each group to roman numerals (x, l, x, l, x, l,...)\n    result = \"\"\n    for i in range(0, len(str(number)), 3):\n        result += str(number[i:i+3]).lower()[0] + str(number[i+2:i+5]).lower()[0]\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = \"\"\n    if number < 1:\n        raise ValueError('The number must be greater than 0')\n    for number, i in zip(range(1, number + 1), [\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]):\n        while number % i > 0:\n            roman_numeral += 'x'\n            number //= i\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n\n    def to_roman(n):\n        for i in range(len(roman_nums)):\n            while n >= roman_nums[i]:\n                yield roman_nums[i]\n                n -= roman_nums[i]\n    result = \"\".join([to_roman(number // divisor) for divisor in roman_nums])\n\n    return result\n\n\nroman_nums = (\n    (1000, \"M\"),\n    (900, \"CM\"),\n    (500, \"D\"),\n    (400, \"CD\"),\n    (100, \"C\"),\n    (90, \"XC\"),\n    (50, \"L\"),\n    (40, \"XL\"),\n    (10, \"X\"),\n    (9, \"IX\"),\n    (5, \"V\"),\n    (4, \"IV\"),\n    (1, \"I\"),\n)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    roman = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'),\n             (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]\n    result = []\n    for numeral, roman_char in roman:\n        while number >= numeral:\n            result.append(roman_char)\n            number -= numeral\n    return ''.join(result).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Special cases\n    if number <= 0:\n        return \"\"\n    if number <= 19:\n        return str(number) + \"xx\"\n    # Calculate the equivalent roman numeral\n    roman = \"\"\n    while number!= 0:\n        number, remainder = divmod(number, 10)\n        roman = roman + roman_digits[remainder]\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be greater than or equal to 1')\n\n    symbols = 'iiixcxdlm'\n    number = abs(number)\n    roman_numeral = ''\n    for numeral, integer in zip(symbols, range(len(symbols))):\n        while number >= integer:\n            number -= integer\n            roman_numeral += numeral\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError(\"invalid value of number\")\n\n    roman_numerals = (\n       'm', 'cm', 'd', 'd', 'cd', 'ce', 'cf', 'cl', 'cl', 'cm', 'd', 'd',\n        'cd', 'ce', 'cf', 'cl', 'cl', 'cm', 'd', 'd', 'cd', 'ce', 'cf',\n        'cl', 'cl', 'cm', 'd', 'd', 'cd', 'ce', 'cf', 'cl', 'cl', 'cm',\n        'x', 'xx', 'l', 'lx', 'lxx', 'lxxx', 'c', 'cc', 'cdc', 'cdcc',\n        'd', 'dd', 'dcc', 'dc', 'cm','mm', 'cm','m')\n\n    result = \"\"\n\n    while number > 0:\n        number, rem = divmod(number, 10)\n\n        result = roman_numerals[rem] + result\n\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Argument num must be a positive integer')\n\n    # Base case\n    if number == 1:\n        return 'i'\n\n    result = []\n\n    # Create a suffix using the last two digits of the number\n    suffix = str(number // 1000 % 10) + str(number % 1000)\n\n    # Store the largest power of 5 that divides the number\n    power_of_5 = 0\n    while number % 5 == 0:\n        number /= 5\n        power_of_5 += 1\n\n    # Loop through all the different power of 5 suffixes\n    for power in range(1, power_of_5 + 1):\n        if number >= 5:\n            # Create a prefix using the last three digits of the number\n            prefix = str(number // 1000 % 10) + str(number // 100 % 10) + str(number // 10 % 10)\n            number %= 10\n\n            # Append the prefix and suffix\n            result.append(prefix + suffix)\n\n    # Loop through all the different power of 10 suffixes\n    while number > 0:\n        # Create a prefix using the last three digits of the number\n        prefix = str(number // 1000 % 10) + str(number // 100 % 10) + str(number // 10 % 10)\n        number %= 10\n\n        #", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(int(number))\n    result = ''\n    for roman, integer in roman_numerals.iteritems():\n        while number >= integer:\n            result = roman + result\n            number -= integer\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert(1 <= number <= 1000)\n\n    def _convert_numbers(n):\n        if (n < 10):\n            return chr(ord('a') + n - 1)\n        elif (n < 100):\n            return chr(ord('A') + n - 10)\n        elif (n < 1000):\n            return chr(ord('d') + n / 100 - 30)\n        else:\n            return chr(ord('d') + (n - 1000) / 100 - 30) + chr(ord('m') + (n - 1000) % 100)\n    return ''.join(_convert_numbers(n) for n in str(number))\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_numerals = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n\n    roman = ''\n    for numeral, integer in roman_numerals.items():\n        while number >= integer:\n            number -= integer\n            roman += numeral\n\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral_map = {'0': 'i',\n                        '1': 'i',\n                        '2': 'ii',\n                        '3': 'iii',\n                        '4': 'iv',\n                        '5': 'v',\n                        '6': 'vi',\n                        '7': 'vii',\n                        '8': 'viii',\n                        '9': 'ix',\n                        }\n    result = ''\n    while number > 0:\n        result = roman_numeral_map[number % 10] + result\n        number //= 10\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 1 <= number <= 1000:\n        raise ValueError('number must be between 1 and 1000')\n\n    roman_numeral_map = {1000:'mm',\n                        900: 'cm',\n                        500: 'd',\n                        400: 'c',\n                        100: 'x',\n                        90: 'ix',\n                        50: 'v',\n                        40: 'iv',\n                        10: 'i',\n                        9: 'ix',\n                        5: 'l',\n                        4: 'l',\n                        1: 'i'\n                        }\n    digits = str(number)\n    return ''.join(roman_numeral_map[d] for d in digits)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Only positive integers are allowed.\")\n    if number >= 1000:\n        raise ValueError(\"Roman numerals must be no longer than 3 characters.\")\n\n    roman_numerals = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii']\n    roman_numerals += ['xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix', 'xx', 'xxi', 'xxii']\n    roman_numerals += ['xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii', 'xxviii', 'xxix', 'xxx', 'xxxi']\n    roman_numerals += ['xxx', 'xlix', 'cl', 'cli', 'clii', 'cliii', 'cliv', 'clvi', 'clviii']\n    roman_numerals += ['cxc', 'cxcii', 'c", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must be >= 1\")\n    if number > 1000:\n        raise ValueError(\"number must be <= 1000\")\n\n    result = []\n    for i, n in enumerate(str(number)):\n        result.append(roman_letters.get(n, ''))\n\n    result = ''.join(result)\n    return result.lower()\n\n\nroman_letters = {\n   'm': 1000,\n    'cm': 900,\n    'd': 500,\n    'cd': 400,\n    'c': 100,\n    'x': 90,\n    'xc': 80,\n    'l': 50,\n    'xl' : 40,\n    'xll': 10,\n    'ix': 9,\n    'v': 5,\n    'iv': 4,\n    'i': 1,\n}", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    def to_roman(n):\n        roman = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n        roman.reverse()\n        result = []\n        limit = int(n / 1000)\n        for i in range(limit - 1, 0, -1):\n            result.append(roman[i] + roman[i - 1])\n        result.append(roman[0] + roman[-1])\n        return \"\".join(result[::-1])\n\n    return to_roman(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('num must be between 1 and 1000 inclusive')\n    if number >= 1000:\n        return str(number // 1000) + \"c\" + str(number % 1000)\n    result = \"\"\n    for num in range(1, number + 1):\n        result += get_roman_numerals()[num]\n    return result[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError(\"num must be between 1 and 1000\")\n    roman = []\n    while number!= 0:\n        roman.append(mini_roman[number % 10])\n        number /= 10\n    return \"\".join(reversed(roman))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = \"\"\n    for i in xrange(1, 1000, 97):\n        result += str((number // i) % 10 + 33)\n        number //= i\n    return result[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        raise ValueError('number must be <= 1000, got %d' % number)\n    if number < 1:\n        raise ValueError('number must be > 0, got %d' % number)\n\n    result = \"\"\n\n    tens = number // 100\n    ones = number % 100\n\n    if tens > 0:\n        result = result + ('c' * tens)\n\n    if ones > 9:\n        result = result + ('x{0:d}'.format(ones))\n\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError\n    if number > 1000:\n        raise ValueError\n    roman_numeral = ''\n    roman_numeral += chr(int(number / 1000))\n    number -= 1000 * int(roman_numeral[-1])\n    roman_numeral += chr(int(number / 100))\n    number -= 100 * int(roman_numeral[-1])\n    roman_numeral += chr(int(number / 10))\n    number -= 10 * int(roman_numeral[-1])\n    roman_numeral += chr(number % 10)\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 1 <= number <= 1000:\n        raise ValueError('Roman numbers must be between 1 and 1000.')\n\n    if number == 0:\n        return''\n\n    roman_numeral = \"\"\n\n    for num in range(0, 10):\n        multiple = 1000\n        if num!= 0:\n            multiple /= 10\n\n        while number > multiple:\n            number -= multiple\n            roman_numeral += num\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be at least 1')\n\n    if number < 500:\n        return str((number // 100) * 10 + (number % 100)) + 'xc'\n\n    elif number < 1000:\n        return str((number // 500) * 50 + (number % 500)) + 'd' + str((number // 100) * 10 + (number % 100)) + 'xc'\n\n    else:\n        return str((number // 1000) * 500 + (number % 1000)) + 'c' + str((number // 500) * 50 + (number % 500)) + 'd' + str((number // 100) * 10 + (number % 100)) + 'xc'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Ignore the need to validate the input; there's already a restriction in place.\n\n    if not (1 <= number <= 1000):\n        raise ValueError('Invalid number.')\n\n    # This function will be highly optimized, so using a generator is not an option.\n    return ''.join([ch for (i, ch) in enumerate(['', 'i', 'v', 'x', 'l',\n                                           'c', 'd','m', '']) if number % 10 == i])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral_map = {'1': 'i', '2': 'ii', '3': 'iii', '4': 'iv', '5': 'v',\n                        '6': 'vi', '7': 'vii', '8': 'viii', '9': 'ix',\n                        '0': 'x', '-': ''}\n    roman = ''\n    if number < 0:\n        number = abs(number)\n    for d in xrange(0, len(str(number))):\n        number, remainder = divmod(number, 10)\n        roman += roman_numeral_map[str(remainder)]\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1:\n        raise ValueError('num must be 1 or greater')\n    roman = ('M', 'D', 'C', 'L', 'X', 'V', 'I')\n    result = ''\n    for i in roman:\n        result += str(number % 10)\n        number //= 10\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_chars = ['k', 'c','m', 'd', 'l', 'x', 'i', 'v', 'e', 'u']\n    roman_nums = {'k': 1000,'m': 900, 'd': 500, 'c': 400, 'x': 10, 'l': 50, 'v': 5,\n                 'e': 1, 'u': 1}\n    result = ''\n    for num in roman_nums:\n        while number >= roman_nums[num]:\n            result += roman_chars[num]\n            number -= roman_nums[num]\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000 or number < 1:\n        raise ValueError('num must be between 1 and 1000')\n    return romanize(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(int(number))\n    result = []\n    for i in range(1000, 0, -1):\n        if number < i:\n            result.append(str(number))\n            number -= i\n    if number == 0:\n        result.append(str(number))\n    return \"\".join(result).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_nums = [\n        (1000,'m'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cdvd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i'),\n    ]\n\n    result = ''\n\n    for numeral, roman in roman_nums:\n        if number >= numeral:\n            result += roman\n            number -= numeral\n\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('number must be greater than zero')\n    if number > 3999:\n        raise ValueError('number must be smaller than 4000')\n\n    digits = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    result = \"\"\n    num = abs(number)\n\n    while num >= 1000:\n        result += 'M'\n        num -= 1000\n\n    while num >= 900:\n        result += 'CM'\n        num -= 900\n\n    while num >= 500:\n        result += 'D'\n        num -= 500\n\n    while num >= 400:\n        result += 'CD'\n        num -= 400\n\n    while num >= 100:\n        result += 'C'\n        num -= 100\n\n    while num >= 90:\n        result += 'XC'\n        num -= 90\n\n    while num >= 50:\n        result += 'L'\n        num -= 50\n\n    while num >= 40:\n        result += 'XL'\n        num -= 40\n\n    while num >= 10:\n        result += 'X'\n        num -= 10\n\n    while num >= 9:\n        result += 'IX'\n        num -= 9\n\n    while num >= 5:\n        result += 'V'\n        num -= 5\n\n    while num >= 4:\n        result += 'IV'\n        num -= 4", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 1 <= number <= 1000:\n        raise ValueError('Number must be 1 <= number <= 1000')\n\n    output = \"\"\n    for numeral, integer in zip(ROMAN_NUMERALS, range(10)):\n        number -= integer\n        if number < 0:\n            number += 10\n        while number:\n            output += numeral[number % 10]\n            number //= 10\n\n    return output.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Must be a positive integer\")\n\n    list_roman_nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    list_roman_nums = [roman_num for roman_num in list_roman_nums if roman_num > number]\n    if not list_roman_nums:\n        return False\n\n    list_roman_nums.sort(reverse=True)\n    roman = \"\"\n    for roman_num in list_roman_nums:\n        roman = roman + roman_nums[list_roman_nums.index(roman_num)]\n\n    roman = roman.lower()\n\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Numbers must be positive\")\n    if number >= 1000:\n        raise ValueError(\"Numbers must be <= 1000\")\n    result = \"\"\n    for roman_numeral, integer in ROMAN_NUMERALS.items():\n        while number >= integer:\n            result += roman_numeral\n            number -= integer\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = \"\"\n    last = 1000\n    for i in range(1, last+1):\n        if number >= i:\n            result += roman_chars[(number-i) % 10]\n            number -= i\n        if number < 10:\n            result += roman_chars[number]\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError(\"number must be in range 1 to 1000\")\n\n    roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n    roman_len = len(roman)\n\n    result = ''\n    while number!= 0:\n        number, index = divmod(number, roman_len)\n        result = roman[index] + result\n\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('number must be between 1 and 1000')\n\n    if number == 1:\n        return 'i'\n\n    # Base-10 -> Base-1000 conversion.\n    digits = []\n    while number:\n        digits.append(number % 10)\n        number //= 10\n\n    # This is a special case that doesn't follow the usual rules for roman numerals.\n    # See https://en.wikipedia.org/wiki/Roman_numerals\n    if digits[0] == 5:\n        return 'f' + int_to_mini_roman(number - 1)\n\n    digits.reverse()\n    return digits[0] + int_to_mini_roman(digits[1:])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = ''\n    for v, k in zip(range(1000, number + 1, -4), range(4)):\n        result += roman_chars[k]\n        if v == 3:\n            result += roman_chars[0]\n        elif v == 5:\n            result += roman_chars[1]\n        elif v == 7:\n            result += roman_chars[2]\n        elif v == 9:\n            result += roman_chars[3]\n    return result\n\nroman_chars = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1:\n        raise ValueError(\"num must be 1 or more\")\n\n    roman_number = \"\"\n    one_to_thirty = ['i','ii','iii','iv','v','vi','vii','viii','ix','x','xi','xii','xiii','xiv','xv','xvi','xvii','xviii','xix','xx','xxi','xxii','xxiii','xxiv','xxv','xxvi']\n    four_to_eleven = ['i','ii','iii','iv','v','vi','vii','viii','ix']\n    tens = ['','x','xx','xxx','xl','l','lx','lxx','lxxx']\n    three_to_eleven = ['','i','ii','iii','iv','v','vi','vii','viii','ix']", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = \"\"\n    roman_list = (('M',  1000),\n                   ('CM', 900),\n                   ('D',  500),\n                   ('CD', 400),\n                   ('C',  100),\n                   ('XC', 90),\n                   ('L',  50),\n                   ('XL', 40),\n                   ('X',  10),\n                   ('IX', 9),\n                   ('V',  5),\n                   ('IV', 4),\n                   ('I',  1))\n    for numeral, integer in roman_list:\n        while number >= integer:\n            result += numeral\n            number -= integer\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('Argument must be between 1 and 1000')\n    return roman_numeral(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    def _to_roman(n):\n        nums = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n        roman = \"\"\n        while n > 0:\n            num, rem = divmod(n, 1000)\n            if rem > 0:\n                roman = nums[num] + roman\n            n -= rem * 1000\n        return roman\n\n    return str(_to_roman(number))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1:\n        raise ValueError(\"num must be a positive integer\")\n\n    if number == 1:\n        return ''\n\n    result = ''\n    while number!= 0:\n        number, i = divmod(number, 1000)\n        result = chr(i + ord('m')) + result\n\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_letters = ('M', 'D', 'C', 'L', 'X', 'V', 'I', 'X')\n    roman_numbers = (1000, 500, 100, 50, 10, 5, 1)\n    roman = \"\"\n    for num in range(len(roman_numbers)):\n        while number >= roman_numbers[num]:\n            number -= roman_numbers[num]\n            roman += roman_letters[num]\n\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_letters = 'ivxlcdm'\n    roman_numbers = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    numerals = dict((c, i) for i, c in enumerate(roman_letters))\n    result = ''\n    for value in roman_numbers:\n        while number >= value:\n            result += numerals[roman_letters[number % 10]]\n            number //= 10\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    output = ''\n    def roman_int(n):\n        \"\"\"\n        Return the roman numeral equivalent of n.\n        \"\"\"\n        if n == 0:\n            return 'i'\n        else:\n            numeral_map = {'0': 'i', '1': 'i', '2': 'ii', '3': 'iii', '4': 'iv', '5': 'v', '6': 'vi', '7': 'vii', '8': 'viii', '9': 'ix'}\n            return numeral_map[n]\n\n    while number > 0:\n        output += roman_int(number % 100)\n        number //= 100\n\n    return output.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # First convert the input to roman numerals\n    roman_numeral = convert_to_roman(number)\n    # Next, cut off all trailing zeroes (we want to show the number, not 0)\n    while roman_numeral[-1:] == \"0\":\n        roman_numeral = roman_numeral[:-1]\n    # Finally, convert to lowercase and return\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    result = ''\n    for i in range(number // 1000 + 1):\n        result +='m'\n    for i in range(number % 1000 // 100 + 1):\n        result += 'cm'\n    for i in range(number % 100 // 10 + 1):\n        result += 'd'\n    for i in range(number % 10):\n        result += ('i' if number % 10 == i else 'v')\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('num must be a positive integer')\n    if number > 1000:\n        raise ValueError('num must be <= 1000')\n\n    roman = ''\n    for i in range(0, number):\n        roman = roman + _int_to_roman(i)\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Value must be positive')\n    if number > 1000:\n        raise ValueError('Value must be less than 1000')\n    if number == 0:\n        return 'ii'\n    # num = number + (number >> 1) + (number >> 2) + (number >> 3) + (number >> 4) + (number >> 5)\n    num = (number + 5 * (number >> 3) + 5 * (number >> 4)) // 10\n    s = []\n    while num!= 0:\n        s.append(num % 10)\n        num //= 10\n    return ''.join(s)[::-1]\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError(\"Value must be between 1 and 1000\")\n\n    rom_str = ''\n    digit = number % 10\n    number = int(number / 10)\n    while number > 0:\n        digit += 1\n        if digit > 4:\n            digit = 1\n        elif digit == 4 and number >= 50:\n            digit = 5\n        elif digit == 5 and number >= 90:\n            digit = 10\n        rom_str += roman_digits[digit]\n        number -= 1\n    return rom_str.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        raise ValueError('Number must be positive')\n\n    roman_numeral_map = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cdvd',\n        100: 'c',\n        90: 'xcd',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'xc',\n        5: 'v',\n        4: 'iv',\n        1: 'i',\n    }\n\n    roman_numeral = ''\n    i = int(number / 100)\n    j = (number % 100) / 10\n    k = number % 10\n\n    while i > 0:\n        roman_numeral += roman_numeral_map[i * 100]\n        i -= 1\n\n    if j == 10:\n        roman_numeral += roman_numeral_map[j]\n    else:\n        roman_numeral += roman_numeral_map[j] * 10\n        roman_numeral += roman_numeral_map[k]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = \"\"\n    number = int(number)\n    for numeral, integer in zip(range(1000, 998, -1), range(5, 0, -1)):\n        while number >= integer:\n            number -= integer\n            roman += numeral\n    roman += number\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    result = \"\"\n    for d in range(1000, 0, -1):\n        if number >= d:\n            result += roman_digits[number % d]\n            number //= d\n    result = result.lower()\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert number > 0\n    assert number <= 1000\n    if number <= 9:\n        return str(number) + 'i'\n    if number < 100:\n        return str(number) + 'ix'\n    if number < 1000:\n        return str(number // 100) + 'cl' + str(number % 100) + 'i'\n    # for any larger numbers, we don't know how to convert them\n\n    return str(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return '00'\n    if number < 1:\n        return '?'\n    roman_numeral = []\n    roman_numeral.append(str(number / 1000))\n    number -= (number // 1000) * 1000\n    roman_numeral.append(str(number / 100))\n    number -= (number // 100) * 100\n    roman_numeral.append(str(number / 10))\n    number -= (number // 10) * 10\n    if number >= 9:\n        roman_numeral.append(str(number))\n    elif number >= 5:\n        roman_numeral.append(str(number) + 'd')\n    elif number >= 4:\n        roman_numeral.append(str(number) + 'c')\n    elif number >= 3:\n        roman_numeral.append(str(number) + 'l')\n    elif number >= 2:\n        roman_numeral.append(str(number) + 'x')\n    else:\n        roman_numeral.append(str(number))\n    return ''.join(roman_numeral).lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # This method is based on the approach described at http://mathforum.org/library/drmath/view/52292.html\n\n    if number < 1:\n        raise ValueError('The number should be positive.')\n\n    if number < 15:\n        return chr(97 + int(number))\n    elif number < 100:\n        return chr(65 + int(number / 10)) + chr(97 + int(number % 10))\n    else:\n        roman_number = \"\"\n        number = abs(number)\n\n        while number:\n            number, multiple = divmod(number, 3)\n            if multiple == 0:\n                roman_number += \"iv\"\n            else:\n                roman_number += chr(97 + int(multiple))\n\n        return roman_number.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if 0 > number or number > 1000:\n        raise ValueError('number must be an integer greater than 0 and less than 1000.')\n\n    result = \"\"\n    for digit in str(number):\n        result += roman_digits[int(digit)]\n\n    return result\n\n\nroman_digits = {\n    1: 'i',\n    2: 'ii',\n    3: 'iii',\n    4: 'iv',\n    5: 'v',\n    6: 'vi',\n    7: 'vii',\n    8: 'viii',\n    9: 'ix',\n    10: 'x',\n    20: 'xx',\n    30: 'xxx',\n    40: 'xl',\n    50: 'lx',\n    60: 'l',\n    70: 'lxx',\n    80: 'lxxx',\n    90: 'xc',\n    100: 'cd',\n    500: 'd',\n    1000:'m',\n}", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # See http://en.wikipedia.org/wiki/Roman_numerals\n    assert 1 <= number <= 1000\n    if number == 0:\n        return ''\n    result = ''\n    while number!= 0:\n        number, i = divmod(number, 1000)\n        if number == 0:\n            result = str(i) + result\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('int_to_mini_roman: the number must be >= 1')\n    if number > 1000:\n        raise ValueError('int_to_mini_roman: the number must be <= 1000')\n    roman_numerals = [(1000,'m'), (900, 'cm'), (500, 'd'), (400, 'cdm'), (  100, 'c'),\n                  ( 90, 'cc'), ( 50, 'cl'), ( 40, 'cdcl'), (10, 'x'), ( 9, 'xc'),\n                  ( 5, 'd'), ( 4, 'dc'), ( 1, 'i')]\n    result = ''\n    for n in range(len(roman_numerals)):\n        while number >= roman_numerals[n][0]:\n            result += roman_numerals[n][-1]\n            number -= roman_numerals[n][0]\n    return result\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    retval = \"\"\n    if number < 1:\n        return retval\n\n    base = 1000\n    num = abs(number)\n    groups = []\n    while num > 0:\n        groups.append(num % base)\n        num = num // base\n    if number < 0:\n        groups.reverse()\n\n    for group in groups:\n        retval += roman_letters.get(group)\n\n    return retval", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number > 3999:\n        return ''\n\n    result = ''\n    for digit in str(number)[::-1]:\n        result += mini_roman_digits[int(digit)]\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"num must be >= 1, not {}\".format(number))\n\n    roman = []\n    rom = ['c', 'd', 'l','m', 'd', 'c', 'x']\n    number -= 1\n    while number > 0:\n        for _ in range(3):\n            if number % 10 == 1:\n                roman.append(rom[0])\n            elif number % 10 == 2:\n                roman.append(rom[1])\n            elif number % 10 == 3:\n                roman.append(rom[2])\n            elif number % 10 == 4:\n                roman.append(rom[3])\n            elif number % 10 == 5:\n                roman.append(rom[4])\n            elif number % 10 == 6:\n                roman.append(rom[5])\n            elif number % 10 == 7:\n                roman.append(rom[6])\n            elif number % 10 == 8:\n                roman.append(rom[7])\n            elif number % 10 == 9:\n                roman.append(rom[8])\n            number -= 1\n        roman.append(rom[9])\n\n    return ''.join(roman).lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # The algorithm for converting to roman numerals is taken from:\n    # https://stackoverflow.com/questions/26369058/python-converting-numbers-to-miniature-roman-numerals/26369194#26369194\n    result = []\n    for integer_part in str(number).split('.'):\n        for i in range(len(integer_part)):\n            if integer_part[i]!= '0':\n                result.append('M' if i == 0 else roman_digits[int(integer_part[i])])\n            else:\n                result.append('i')\n    return ''.join(result).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        return ''\n\n    roman_numerals = [\n        ['i', 'v'],\n        ['m', 'x', 'd', 'c'],\n        ['l', 'l', 'l', 'l'],\n        ['c', 'd', 'd', 'd'],\n        ['m','m','m','m'],\n        ['x', 'x', 'x', 'x'],\n    ]\n\n    result = []\n\n    while number!= 0:\n        for numeral, number in zip(roman_numerals, number):\n            if number == 0:\n                result.append(numeral.lower())\n                break\n\n        number -= 1\n\n    return ''.join(result)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be greater than 0\")\n    if number > 1000:\n        raise ValueError(\"Number must be smaller than 1000\")\n\n    number = str(number)\n    if number.isdigit():\n        return int_to_mini_roman(int(number))\n    if number[0].isalpha() and number[1].isdigit():\n        return int_to_mini_roman(int(number[:-1])) + number[-1]\n    if number[0].isdigit() and number[-1].isdigit():\n        return int_to_mini_roman(int(number[:-1])) + number[-1]\n    if number[0].isalpha() and number[-1].isalpha():\n        return int_to_mini_roman(int(number[:-2])) + number[-2] + number[-1]\n    return number[0] + int_to_mini_roman(int(number[1:]))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert number > 0 and number <= 1000, 'Number must be between 1 and 1000.'\n    mini_roman_nums = ('i','v', 'x', 'l', 'c', 'd','m', 'xx', 'xxx', 'l', 'xc', 'xcx', 'xcc', 'xcxx', 'xcxxx', 'xccx', 'xcccxx', 'xccxxx', 'xcccxxx', 'xccccxxx', 'xccxcxxx', 'xccxcccxx', 'xccxccxxx', 'xccxcxccxx', 'xccxcxccxxx', 'xccxcxcccxx', 'xccxcxccxccxx', 'xccxcxccxccxxx')\n    roman_numeral = ''\n    for i in range(len(mini_roman_nums)):\n        if number < mini_roman_nums[i]:\n            break\n    else:\n        return roman_numeral\n    roman_numeral += mini_roman_nums[6 - i]\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        return None\n\n    number_list = str(number).split('')\n\n    while len(number_list) > 3:\n        number_list.pop(0)\n\n    return ''.join([x if x in 'ijltcd' else 'cm' for x in number_list])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Convert number to string\n    num_str = str(number)\n\n    # Get the proper suffix based on the length of num_str\n    if len(num_str) <= 2:\n        suffix = 'i'\n    elif len(num_str) <= 4:\n        suffix = 'ii'\n    elif len(num_str) <= 6:\n        suffix = 'iii'\n    elif len(num_str) <= 8:\n        suffix = 'iv'\n    elif len(num_str) <= 10:\n        suffix = 'v'\n    elif len(num_str) <= 12:\n        suffix = 'vi'\n    elif len(num_str) <= 14:\n        suffix = 'viii'\n    elif len(num_str) <= 16:\n        suffix = 'ix'\n    elif len(num_str) <= 18:\n        suffix = 'x'\n    elif len(num_str) <= 20:\n        suffix = 'xi'\n    elif len(num_str) <= 22:\n        suffix = 'xii'\n    elif len(num_str) <= 24:\n        suffix = 'xiii'\n    elif len(num_str) <= 26:\n        suffix = 'xiv'\n    elif len(num_str) <= 28:\n        suffix = 'xv'\n    elif len(num_str) <= 30:\n        suffix = 'xvi'\n    elif len(num_str", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = []\n    check_bound = False\n    while True:\n        if not check_bound:\n            if number % 10 >= 5:\n                result.append('v')\n                number -= number % 10\n            else:\n                check_bound = True\n        if number % 100 == 11:\n            result.append('x')\n            number -= number % 100\n        elif number % 100 == 12:\n            result.append('l')\n            number -= number % 100\n        elif number % 100 == 13:\n            result.append('c')\n            number -= number % 100\n        elif number % 100 >= 15:\n            result.append('d')\n            number -= number % 100\n        else:\n            result.append('m')\n            number -= number % 10\n        if number == 0:\n            break\n    return ''.join(result)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not isinstance(number, int) or number < 1:\n        raise ValueError('IntToRomanNumeral expects an int >= 1')\n\n    if number <= 9:\n        return str(number)\n\n    result = ''\n\n    for i in range(1, 10):\n        while number % i == 0:\n            result += str(i)\n            number //= i\n\n    if number!= 1:\n        result += str(number)\n\n    return result[0].lower() + result[1:]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # mini roman letters\n    romans = {'i': 1, 'x': 10, 'l': 50, 'c': 100, 'd': 500,'m': 1000}\n    number = str(number)\n    roman = ''\n    for digit in number:\n        if digit in romans:\n            roman += roman_digit(digits, romans[digit])\n        else:\n            roman += roman_digit(digits, romans['d'])\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def to_roman(n):\n        if n == 0:\n            return ''\n        if n < 26:\n            return chr(n+64)\n        n //= 26\n        return to_roman(n) + to_roman(n%26-1)\n    if not (1 <= number <= 1000):\n        raise ValueError(\"Value must be between 1 and 1000\")\n\n    return to_roman(number)[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_values = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        20: 'xx',\n        30: 'xxx',\n        40: 'xl',\n        50: 'l',\n        60: 'lx',\n        71: 'xcx',\n        80: 'cl',\n        90: 'xcx',\n        100: 'c',\n        200: 'cc',\n        300: 'ccc',\n        400: 'clv',\n        500: 'clvi',\n        600: 'clvii',\n        700: 'clviii',\n        800: 'clix',\n        900: 'clx',\n        1000: 'cm',\n    }\n    result = \"\"\n    i = 1\n    while i <= number + 1:\n        for j in roman_values.keys():\n            if i <= j:\n                result += roman_values[j]\n                i -= j\n        result +='m'\n    return result.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    THOUSANDS = ['','m','mm','mn','mnn']\n    HUNDREDS = ['', 'c', 'cc', 'cn', 'cnn']\n    UNITS = ['', 'x', 'xx', 'xn', 'xn']\n    result = ''\n    if number < 4000:\n        number = number\n    for n in range(3, 0, -1):\n        if number >= n * 1000:\n            number -= n * 1000\n            result += THOUSANDS[n - 1]\n        if number >= n * 100:\n            number -= n * 100\n            result += HUNDREDS[n - 1]\n        if number >= n:\n            number -= n\n            result += UNITS[n - 1]\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        return \"\"\n\n    roman = list(\"iivixcxcdmmm\")\n\n    if number <= 4000:\n        return \"\".join([roman[number % 100], roman[number // 100 % 10], roman[number // 100 // 10 % 10], roman[number // 100 // 10 // 10 % 10], roman[number // 100 // 10 // 10 // 10 % 10]])\n\n    for digit in range(1000, number + 1, 900):\n        number -= digit\n        roman[digit % 10] += roman[digit // 10]\n\n    return \"\".join([roman[digit % 10], roman[digit // 10], roman[digit // 100 % 10], roman[digit // 100 // 10 % 10], roman[digit // 100 // 10 // 10 % 10], roman[digit // 100 // 10 // 10 // 10 % 10]])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    result = \"\"\n    for i, n in enumerate(str(number)):\n        if n == '1':\n            result += \"i\"\n        elif n == '2':\n            result += \"ii\"\n        elif n == '3':\n            result += \"iii\"\n        elif n == '4':\n            result += \"iv\"\n        elif n == '5':\n            result += \"v\"\n        elif n == '6':\n            result += \"vi\"\n        elif n == '7':\n            result += \"vii\"\n        elif n == '8':\n            result += \"viii\"\n        elif n == '9':\n            result += \"ix\"\n        elif n == '0':\n            result += \"x\"\n        elif n == '-':\n            result += \"l\"\n        elif n == '?':\n            result += \"c\"\n        else:\n            result += n\n\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError('number must be an integer')\n    if not 1 <= number <= 1000:\n        raise ValueError('number must be in range (1, 1000)')\n    if number == 1:\n        return \"i\"\n    result = \"\"\n    for numeral, integer in roman_numerals.items():\n        while number >= integer:\n            result += numeral\n            number -= integer\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Only positive numbers are valid\")\n\n    roman_numeral = \"\"\n    remainder = number\n\n    for i, numeral in enumerate(ROMAN_NUMERALS):\n        while remainder >= numeral:\n            remainder -= numeral\n            roman_numeral += ROMAN_NUMERALS[i]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Ignore this line, for now, it is just to make IPython not\n    # complain about the function name\n    # pylint: disable=g-bad-name\n    def _is_number(s):\n        \"\"\"\n        A small helper function to check if the input is a number\n        \"\"\"\n        try:\n            int(s)\n            return True\n        except ValueError:\n            return False\n\n    if _is_number(number):\n        roman_numeral_map = {\n            1: 'i',\n            4: 'iv',\n            5: 'v',\n            9: 'ix',\n            10: 'x',\n            40: 'l',\n            50: 'l',\n            90: 'x',\n            100: 'c',\n            400: 'cd'}\n\n        summand = roman_numeral_map.get(number % 100, '')\n        while summand:\n            number -= summand[-1]\n            if _is_number(number):\n                summand = roman_numeral_map.get(number % 100, '')\n            else:\n                summand = roman_numeral_map.get(number % 10, '')\n                number -= summand[-1]\n\n        result = ''\n        while number:\n            result += roman_numeral_map.get(number % 10, '')\n            number -= number % 10\n\n        return result\n    else:\n        return False", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"The given number must be at least 1.\")\n\n    roman_numeral = []\n    while number!= 0:\n        number, digit = divmod(number, 10)\n        roman_numeral.append(MINI_ROMAN_DIGITS[digit])\n\n    return ''.join(roman_numeral).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = ''\n    for i in range(1, 1001, 11):\n        number %= i\n        result = '%s%s' % (result, chr(i + (ord('a') - 1) - number))\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = str(number)\n    if number == '' or number == 'None':\n        return ''\n    number = str(number).lower()\n    number = number.replace(' ', '')\n    roman_numeral = []\n    for value in range(len(number) + 1):\n        roman_numeral.append(['m', 'cm', 'd', 'cd'][i == number.find('m')])\n    for idx, char in enumerate(reversed(number)):\n        number[idx] = roman_numeral[ord(char) - ord('a')]\n    return ''.join(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    num_list = list(str(number))\n    res = \"\"\n    for n in num_list:\n        value = numbers[n]\n        for i in range(value):\n            res += \"m\"\n        if n == 1:\n            res += \"i\"\n    return res.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('value must be between 1 and 1000')\n    roman_numeral = \"\"\n    for i, digit in enumerate(str(number)):\n        if digit == 1:\n            roman_numeral += 'i'\n        elif digit == 2:\n            roman_numeral += 'ii'\n        elif digit == 3:\n            roman_numeral += 'iii'\n        elif digit == 4:\n            roman_numeral += 'iv'\n        elif digit == 5:\n            roman_numeral += 'v'\n        elif digit == 6:\n            roman_numeral += 'vi'\n        elif digit == 7:\n            roman_numeral += 'vii'\n        elif digit == 8:\n            roman_numeral += 'viii'\n        elif digit == 9:\n            roman_numeral += 'ix'\n        elif digit == 0:\n            pass\n        else:\n            raise ValueError('value must be between 1 and 1000')\n    return roman_numeral.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def to_int_list(num_str):\n        return [int(num_str[-1]) for num_str in num_str.split('d')]\n\n    # Special cases\n    if number <= 1:\n        return ''\n    elif number == 2:\n        return 'ii'\n    elif number == 3:\n        return 'iii'\n    elif number == 9:\n        return 'ix'\n    elif number == 14:\n        return 'xiv'\n    elif number == 100:\n        return 'cc'\n    elif number == 400:\n        return 'cdxxx'\n\n    # Converting to list of digits\n    number = list(str(number))\n    while len(number) > 1:\n        number = [to_int_list(x) for x in number]\n\n    # Converting into roman numerals\n    return ''.join([\n        [str(x) for x in number[0]],\n        [str(x) for x in number[1]],\n        [str(x) for x in number[2]],\n        [str(x) for x in number[3]],\n        [str(x) for x in number[4]],\n    ])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('number out of bounds')\n\n    if number == 1:\n        return'm'\n\n    # it's an even number, so we just need to add 2 to the front.\n    if number % 2 == 0:\n        return int_to_mini_roman(number + 2)\n\n    # it's an odd number, so we need to add the front of the number\n    # we just need to add the front of the number\n    roman_nums = 'iivixcxdlcmvixcd'\n    roman_fronts = 'iivixcd'\n    if number >= 500:\n        roman_nums[:5] = roman_nums[5:7] = roman_fronts[:3]\n\n    return roman_nums[:number] + roman_fronts[number - 1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Convert the integer to a string to make the code below simpler\n    s = str(number)\n\n    # We use i as a loop variable, but it will take the value ii, iii, iv, v,...\n    for i in range(len(s)+1):\n        # Increment each time by one, for each digit\n        if s[i]!= '0':\n            s = s[:i] + str(int(s[i])+1) + s[i+1:]\n\n    # The result is in lowercase, so convert to lowercase\n    return s.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be at least 1.\")\n    if number > 1000:\n        raise ValueError(\"Number must be at most 1000.\")\n\n    number -= 1\n    # Number of thousands\n    if number > 900:\n        return 'ccc' + int_to_mini_roman(number // 1000)\n    # Number of hundreds\n    if number > 500:\n        return 'cc' + int_to_mini_roman(number // 100)\n    # Number of tens\n    if number > 40:\n        return 'c' + int_to_mini_roman(number // 10)\n    # Number of units\n    if number > 9:\n        return 'x' + int_to_mini_roman(number)\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = \"\"\n    i = 3\n    n = number\n    while n > 0:\n        while n % i == 0 and i >= 3:\n            result += str(i)\n            n /= i\n        i -= 1\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return 'zero'\n    elif number < 1:\n        return'minus one'\n\n    roman_numeral_map = {1: 'i', 5: 'v', 10: 'x', 20: 'l', 50: 'c', 100: 'd',\n                        500:'m', 1000:'mi'}\n    result = \"\"\n    for digit in str(number):\n        result += roman_numeral_map[int(digit)]\n    return result[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert(number >= 1 and number <= 1000)\n    if number < 100:\n        return _int_to_mini_roman[number]\n    numerals = ('i', 'iv', 'v', 'vi', 'vii', 'viii', 'ix')\n    tens = ('x', 'xx', 'xxx', 'xl', 'l')\n    hundreds = ('c', 'cc', 'ccc', 'cl', 'cli', 'clii', 'cliii', 'cliv', 'clv')\n    thousands = ('m','mm')\n\n    roman = ''\n    for numeral in _int_to_mini_roman[number % 100]:\n        roman += numeral\n    for n in range(number / 100):\n        roman += thousands[number % 100 // 10]\n        number //= 10\n    for n in range(number / 10):\n        roman += hundreds[number % 10]\n        number //= 10\n    for n in range(number):\n        roman += tens[number % 10]\n        number //= 10\n    roman += numerals[number]\n    return roman[::-1]\n\n_int_to_mini_roman = {\n    1:  '',", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    def to_roman(n):\n        from fractions import Fraction\n        return ''.join(c if n == i else 'i' for i, c in enumerate('cmnd'))\n\n    return to_roman(number).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    result = []\n    while number!= 0:\n        result.append(_convert_number_to_rome(number % 1000))\n        number //= 1000\n    result.reverse()\n    return ''.join(result) or 'ii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    result = \"\"\n    for i in range(1, 10):\n        number, remainder = divmod(number, 10)\n        result += str(remainder) + \" \" + chr(ord('a') + i - 1)\n    return result.strip(\" \").lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = str(number).upper()\n    roman_numeral = \"\"\n    while number!= 0:\n        number, i = divmod(number, 1000)\n        if number!= 0:\n            roman_numeral += \"cm\"[i]\n    return roman_numeral[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = []\n    tens = number / 10\n    units = number % 10\n\n    #Tens\n    if tens >= 100:\n        result.append('cm')\n        tens = tens - 100\n    elif tens >= 90:\n        result.append('cc')\n        tens = tens - 90\n    elif tens >= 80:\n        result.append('cb')\n        tens = tens - 80\n    elif tens >= 70:\n        result.append('ca')\n        tens = tens - 70\n    elif tens >= 60:\n        result.append('c')\n        tens = tens - 60\n    elif tens >= 50:\n        result.append('cl')\n        tens = tens - 50\n    elif tens >= 40:\n        result.append('xl')\n        tens = tens - 40\n    elif tens >= 30:\n        result.append('x')\n        tens = tens - 30\n    elif tens >= 20:\n        result.append('v')\n        tens = tens - 20\n    elif tens >= 10:\n        result.append('i')\n        tens = tens - 10\n    elif tens >= 1:\n        result.append('i')\n        tens = tens - 1\n    else:\n        result.append('i')\n\n    #Units\n    if units >= 10:\n        result.append('x')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be at least 1.')\n    if number > 1000:\n        raise ValueError('Number must be at most 1000.')\n\n    roman = ''\n\n    for _ in range(0, number // 1000):\n        roman +='m'\n\n    number %= 1000\n    if number < 100:\n        roman += (str(number) +'')\n\n    for _ in range(0, number // 100):\n        roman += (str(number // 10) +'')\n    number %= 100\n    if number < 10:\n        roman += (str(number) +'')\n\n    for _ in range(0, number):\n        roman += (str(number) +'')\n\n    return roman[:-1].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral_map = {1000:'M',  900:'CM', 500:'D', 400:'CD', 100:'C',  90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I'}\n\n    result = ''\n    current_value = roman_numeral_map.get(number)\n    if current_value:\n        result = current_value\n\n    while current_value:\n        result += roman_numeral_map.get(current_value // 10)\n        result += roman_numeral_map.get(current_value % 10)\n        current_value = current_value // 10\n\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Original code:\n    # https://gist.github.com/coolaj86/6513558\n\n    # Start with a string of zeros\n    result = '0' * (number - 1)\n\n    # Convert the integer to a string of digits and reverse it\n    digits = str(number)\n    digits = digits[::-1]\n\n    # Convert each digit to its roman numeral equivalent and prepend it to the string\n    for digit in digits:\n        if digit == '0':\n            result +=''\n        elif digit == '1':\n            result += 'i'\n        elif digit == '2':\n            result += 'ii'\n        elif digit == '3':\n            result += 'iii'\n        elif digit == '4':\n            result += 'iv'\n        elif digit == '5':\n            result += 'v'\n        elif digit == '6':\n            result += 'vi'\n        elif digit == '7':\n            result += 'vii'\n        elif digit == '8':\n            result += 'viii'\n        elif digit == '9':\n            result += 'ix'\n        else:\n            result += 'x'\n\n    # Remove all extra spaces\n    return result.strip()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Valid roman numerals are x, iv, v, l, xii, xiii, xiv, xv, xx, xxi, xxii, xxiii, xxiv, xxv, xxx, xlv\n    roman_digits = {'x': 1000, 'iv': 'iv', 'v': 'vi', 'l': 'l', 'xii': 'xi', 'xiii': 'xi', 'xiv': 'xii',\n                   'xv': 'xv', 'xx': 'xvi', 'xxi': 'xx', 'xxii': 'xxi', 'xxiii': 'xxii', 'xxiv': 'xxiii',\n                   'xxv': 'xxiv', 'xxx': 'xxv', 'xl': 'xl'}\n    roman_numbers = []\n    for number in range(1, 1000):\n        number_string = str(number)\n        if number_string[-1] == 'l':\n            roman_numbers.append(number_string[:-1])\n        else:\n            roman_numbers.append(number_string)\n    for number in roman_numbers:\n        roman_digits[str(number)] = roman_digits[str(number)] - 1\n    roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # https://www.wolframalpha.com/input/?i=roman-numeral+convert+%28n%29\n    if number == 0:\n        return \"0\"\n    elif number == 1:\n        return \"i\"\n    elif number == 2:\n        return \"ii\"\n    elif number == 3:\n        return \"iii\"\n    elif number == 4:\n        return \"iv\"\n    elif number == 5:\n        return \"v\"\n    elif number == 6:\n        return \"vi\"\n    elif number == 7:\n        return \"vii\"\n    elif number == 8:\n        return \"viii\"\n    elif number == 9:\n        return \"ix\"\n    elif number <= 19:\n        return chr(ord('a') + number - 1) + \"x\"}\n    else:\n        roman_numeral = \"\"\n        for j in range(0, number / 10):\n            roman_numeral += chr(ord('a') + j - 1) + \"x\"}\n        return roman_numeral + chr(ord('a') + number % 10 - 1) + \"i\"}", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = \"\"\n    if number < 1:\n        return None\n    number = abs(number)\n\n    for i, integer_part in enumerate(str(number).split(\".\") if \".\" in str(number) else [str(number)]):\n        integer, remainder = integer_part.split(\",\")\n        if \".\" in str(number):\n            if \",\" in str(number):\n                integer = int(integer)\n                remainder = int(remainder)\n        else:\n            integer = int(integer)\n\n        if integer == 1:\n            result += \"i\"\n        elif integer == 2:\n            result += \"ii\"\n        elif integer == 3:\n            result += \"iii\"\n        elif integer == 4:\n            result += \"iv\"\n        elif integer == 5:\n            result += \"v\"\n        elif integer == 6:\n            result += \"vi\"\n        elif integer == 7:\n            result += \"vii\"\n        elif integer == 8:\n            result += \"viii\"\n        elif integer == 9:\n            result += \"ix\"\n        elif integer == 10:\n            result += \"x\"\n        elif integer == 20:\n            result += \"lx\"\n        elif integer == 30:\n            result += \"xx\"\n        elif integer == 40:\n            result += \"lxx\"\n        elif integer ==", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_dict = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000:'m'}\n    roman_numeral = ''\n    for number in xrange(1, number + 1):\n        if number < 100:\n            roman_numeral += roman_dict[number]\n        else:\n            number -= 100\n            roman_numeral += roman_dict[number // 10] + roman_dict[number % 10]\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert number > 0 and number <= 1000\n    roman = \"\"\n\n    for i, v in enumerate(ROMANS):\n        while number >= v:\n            number -= v\n            roman += ROMAN[i]\n\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('Invalid input.')\n    elif number < 100:\n        return str(number) + (str(number / 10) + str(number % 10))\n    elif number < 1000:\n        return str(number / 100) + ('cl' + str(number % 100))\n    elif number < 2000:\n        return str(number / 1000) + ('cm' + str(number % 1000))\n    elif number < 3000:\n        return str(number / 2000) + ('d' + str(number % 2000))\n    elif number < 4000:\n        return str(number / 3000) + ('c' + str(number % 3000))\n    elif number < 5000:\n        return str(number / 4000) + ('b' + str(number % 4000))\n    elif number < 6000:\n        return str(number / 5000) + ('a' + str(number % 5000))\n    elif number < 7000:\n        return str(number / 6000) + ('i' + str(number % 6000))\n    elif number < 8000:\n        return str(number / 7000) + ('x' + str(number % 7000))\n    elif number < 9000:\n        return str(number / 8000) + ('v'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Note that we use our own mapping here, which is not the same as the one\n    # found in the original paper. The numbers in the original mapping that\n    # are not 1, 5, or 10 are apparently reserved for future use; I think\n    # we're ok here because the numbers we use for the bases are either 1, 5,\n    # or 10, so they are more likely to be useful.\n    mapping = {'i': 1, 'v': 5, 'x': 10}\n\n    # The way this works is, for each digit in the integer, we add its value\n    # to the total, and we shift the digits to the left, so that all the\n    # numbers we see are in the ranges we expect. For example, the number 21\n    # will have the digits 1 and 2. The value of 2 is 5, so we add 5 to the\n    # total. The digits we shifted to the left are the 1 and 2, and those\n    # digits are shifted one position to the right. The new digits are the 2\n    # and the 1. The value of the 2 is 5. We add 5 to the total. The digits we\n    # shifted are the 2 and the 1, and those digits are shifted one position", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # int to roman\n    nums = [(1000,'m'), (900, 'cm'), (500, 'd'), (400, 'cd']\n    t = (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl')\n    n = (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv')\n    units = (1, 'i')\n\n    def to_roman(n):\n        result = []\n        for numeral, integer in nums:\n            while n >= integer:\n                result.append(numeral)\n                n -= integer\n        return \"\".join(result)\n\n    def from_roman(s):\n        result = 0\n        for numeral, integer in reversed(nums):\n            result += integer * (s.find(numeral) + 1)\n        return result\n\n    # to roman\n    result = to_roman(number)\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = \"\"\n    for val, numeral, integer, multiple in _roman_numerals:\n        if number >= integer:\n            result += numeral * (number // integer)\n            number = number % integer\n            if not number:\n                break\n\n    result = result.lower()\n\n    return result\n\n\n_roman_numerals = [\n    (1000, 'M',  1000, 1),\n    (900,  'CM', 900, 1),\n    (500,  'D',  500, 1),\n    (400,  'CD', 400, 1),\n    (100,  'C',  100, 1),\n    (90,   'XC', 90, 1),\n    (50,   'L',  50, 1),\n    (40,   'XL', 40, 1),\n    (10,   'X',  10, 1),\n    (9,    'IX', 9, 1),\n    (5,    'V',  5, 1),\n    (4,    'IV', 4, 1),\n    (1,    'I',  1, 1),\n]\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    assert 1 <= number <= 1000\n    number = str(number)\n\n    roman_numerals = {\n        'M': 1000,\n       'm': 900,\n        'CM': 900,\n        'MC': 900,\n        'd': 500,\n        'CD': 500,\n        'dc': 500,\n        'C': 100,\n        'XC': 100,\n        'X': 10,\n        'IX': 9,\n        'v': 5,\n        'IV': 4,\n        'L': 50,\n        'x': 1\n    }\n\n    roman = ''\n    i = 0\n    while i < len(number):\n        if number[i] in roman_numerals:\n            roman += roman_numerals[number[i]]\n        else:\n            i += 1\n            continue\n        if len(number) >= i + 4:\n            number[i] = str(int(number[i]) - int(number[i + 1]))\n            number[i + 1] = str(int(number[i + 1]) + int(number[i + 2]))\n            number[i + 2] = str(int(number[i + 2]) - int(number[i + 3]))\n            number[i + 3] = str(int(number[i + 3]) + int(number[i + 4]))\n            i += 4\n        i += 1\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = \"\"\n    roman = (\"i \", \"ii \", \"iii \", \"iv \", \"v \", \"vi \", \"vii \", \"viii \", \"ix \")\n    t = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    for n in range(1, 1000, 4):\n        count = int(number / n)\n        result += roman[count] + t[int(number % n)]\n        number = n\n    return result[1:].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n\n    roman_numeral = ''\n    if number < 100:\n        roman_numeral += number\n        while len(roman_numeral) < 3:\n            roman_numeral +=''\n\n    if number < 1000:\n        roman_numeral += ('i', 'v', 'x', 'l')\n    if number < 2000:\n        roman_numeral += ('d','m', 'c', 'xx', 'l', 'xxx', 'l')\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not number.is_integer():\n        raise TypeError('Integer expected, got {}'.format(type(number)))\n    if not (1 <= number <= 1000):\n        raise ValueError('Only positive integers between 1 and 1000 are allowed')\n\n    if number == 1:\n        return'm'\n    elif number == 2:\n        return 'ii'\n    elif number >= 3 and number <= 19:\n        return str(number) + 'i'\n    elif number >= 21 and number <= 99:\n        return str(number % 10) + str(int_to_mini_roman((number // 10) - 1))\n    elif number >= 100 and number <= 399:\n        return str(number % 100) + str(int_to_mini_roman((number // 100) - 20))\n    elif number >= 400 and number <= 899:\n        return str(number % 100) + str(int_to_mini_roman((number // 100) - 40))\n    elif number >= 900 and number <= 9999:\n        return str(number % 100) + str(int_to_mini_roman((number // 1000) - 80))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert number >= 1 and number <= 1000, \"number must be greater than 0 and less than 1000\"\n\n    roman_to_int = dict(\n        m=1, mm=2, mmm=3,\n        c=4, cc=5, ccc=6,\n        d=7, dd=8, ddd=9,\n        x=10, xx=11, xxx=12,\n        l=50, ll=51, lx=52,\n        i=60, ii=61, iii=62,\n        v=100, vc=101, vc=102,\n        l=50, ll=51, lx=52)\n\n    roman_number = \"\"\n    while number:\n        number, roman_number = number // roman_to_int.get(letter, roman_to_int.get(ll, roman_to_int.get(lx, roman_to_int.get(i, roman_to_int.get(v, 0))))), roman_number + letter\n    return roman_number.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = \"\"\n    roman_numerals = (\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\")\n    roman_numeral_map = dict(zip(roman_numerals, range(len(roman_numerals))))\n\n    if number > 4000:\n        raise ValueError(\"Number too large to convert.\")\n\n    for digit in str(number):\n        value = int(digit)\n        if value >= 1000:\n            result += roman_numeral_map[roman_numerals[int(digit / 1000)]]\n            digit %= 1000\n        result += roman_numeral_map[roman_numerals[int(digit / 100)]]\n        digit %= 100\n        result += roman_numeral_map[roman_numerals[int(digit / 10)]]\n        digit %= 10\n        result += roman_numeral_map[roman_numerals[int(digit)]]\n    return result.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError('number must be an integer')\n    if not 1 <= number <= 1000:\n        raise ValueError('num must be between 1 and 1000')\n\n    if number == 1:\n        return 'i'\n    elif number == 2:\n        return 'ii'\n    elif number == 3:\n        return 'iii'\n    elif number == 4:\n        return 'iv'\n    elif number < 15:\n        return int_to_mini_roman(number) + 'i'\n    elif number < 100:\n        return int_to_mini_roman(number / 10) + int_to_mini_roman(number % 10)\n    elif number < 1000:\n        return int_to_mini_roman(number / 100) + int_to_mini_roman(number % 100)\n    else:\n        return int_to_mini_roman(number / 1000) + int_to_mini_roman(number % 1000)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number > 1000:\n        raise ValueError('Number too large')\n\n    roman_numbers = [''] * 5\n    roman_numbers[0] = 'i'\n    roman_numbers[1] = 'i'\n    roman_numbers[2] = 'x'\n    roman_numbers[4] = 'iv'\n    roman_numbers[5] = 'iv'\n    roman_numbers[8] = 'viii'\n    roman_numbers[9] = 'viii'\n\n    while number!= 0:\n        for i in range(len(roman_numbers)):\n            if number >= roman_numbers[i]:\n                roman_numbers[i] = roman_numbers[i] + roman_numbers[i + 1]\n                number -= roman_numbers[i]\n                break\n        else:\n            roman_numbers[i] = roman_numbers[i] + roman_numbers[i]\n            number -= roman_numbers[i]\n\n    return ''.join(roman_numbers).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        raise ValueError('Number must be between 1 and 1000.')\n    result = \"\"\n    for i in range(0, 3):\n        if number >= 1000:\n            number -= 1000\n            result += \"m\"\n        elif number >= 900:\n            number -= 900\n            result += \"cm\"\n        elif number >= 500:\n            number -= 500\n            result += \"d\"\n        elif number >= 400:\n            number -= 400\n            result += \"cd\"\n        elif number >= 100:\n            number -= 100\n            result += \"c\"\n        elif number >= 90:\n            number -= 90\n            result += \"xc\"\n        elif number >= 50:\n            number -= 50\n            result += \"l\"\n        elif number >= 40:\n            number -= 40\n            result += \"xl\"\n        elif number >= 10:\n            number -= 10\n            result += \"x\"\n        elif number >= 9:\n            number -= 9\n            result += \"ix\"\n        elif number >= 5:\n            number -= 5\n            result += \"v\"\n        elif number >= 4:\n            number -= 4\n            result += \"iv\"\n        else:\n            number -= 1\n            result += \"i\"\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1:\n        return None\n    if number >= 1000:\n        return None\n\n    roman_numeral = []\n    for i in range(0, number, 100):\n        roman_numeral.append(str(i) + \"c\")\n    remainder = number - (i*100 for i in range(0, number, 100))\n\n    for i in range(0, remainder, 10):\n        roman_numeral.append(str(i) + \"l\")\n    return \"\".join(roman_numeral).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    numbers = ('M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V',\n               'IV', 'I')\n    result = \"\"\n    for numeral, integer in zip(numbers, number):\n        while integer!= 0:\n            result += numeral\n            integer -= 1\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1:\n        raise ValueError('ValueError: The number should be greater than 0.')\n\n    numerals = ['i', 'v', 'x', 'l', 'c', 'd','m']\n    result = ''\n    for numeral in numerals:\n        if number >= numeral:\n            result += numeral\n            number -= numeral\n    if number == 0:\n        return result.lower()\n    else:\n        return result + 'x'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number -= 1\n    roman = ''\n    for i in range(0, 3):\n        number, mod = divmod(number, 1000)\n        roman += chr(mod + 65)\n    for i in range(0, 3):\n        number, mod = divmod(number, 100)\n        roman += chr(mod + 65)\n    for i in range(0, 2):\n        number, mod = divmod(number, 10)\n        roman += chr(mod + 65)\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_integers = ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix',\n                      'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii',\n                      'xviii', 'xix', 'xx', 'xxi', 'xxii', 'xxiii', 'xxiv',\n                      'xxv', 'xxvi', 'xxvii', 'xxviii', 'xxix', 'xxx', 'xi',\n                      'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii',\n                      'xix', 'xx', 'xxi', 'xxii', 'xxiii', 'xxiv', 'xxv',\n                      'xxvi', 'xxvii', 'xxviii', 'xxix', 'xxx', 'xlx', 'xcii',\n                      'xcc', 'xcx', 'xcv', 'xcd']\n    roman_integers += ('cl', 'clv', 'clii", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def to_roman(n):\n        if n == 0:\n            return '0'\n        return roman[int(n / 10)] + roman[(n % 10) - 1]\n\n    roman = ('M', 'D', 'C', 'L', 'X', 'V', 'I','')\n    if number < 1000:\n        return to_roman(number)\n    s = []\n    for k in range(0, int(number / 1000)):\n        s.append(to_roman(1000 * k + number % 1000))\n    return ''.join(s) or 'X'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('Number should be 1..1000')\n    roman = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    result = \"\"\n    for numeral, integer in zip(roman, range(len(roman))):\n        count = number / integer\n        result += roman[numeral] * count\n        number %= integer\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if 0 < number < 1000:\n        number = str(number)\n        number = list(number)\n        number = number[::-1]\n        number = \"\".join([roman_numeral(n) for n in number])\n        number = number[::-1]\n        return number.lower()\n    else:\n        print(\"numero invalido\")", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return \"\"\n    elif number < 50:\n        return str((number + (number / 10) * 10) - 1)\n    elif number < 100:\n        return str((number / 10) * 10 - 10)\n    elif number < 1000:\n        return str((number / 100) * 100 - 100)\n    else:\n        return \"\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # check for invalid values\n    assert 1 <= number <= 1000, \"Input must be between 1 and 1000.\"\n\n    # translate each digit into its roman numeral equivalent\n    digits = str(number)\n    result = ''\n    for i, digit in enumerate(digits):\n        if digit == '0':\n            # 0 is special case\n            result += 'zero'\n        elif digit == '1':\n            result += 'one'\n        elif digit == '2':\n            result += 'two'\n        elif digit == '3':\n            result += 'three'\n        elif digit == '4':\n            result += 'four'\n        elif digit == '5':\n            result += 'five'\n        elif digit == '6':\n            result +='six'\n        elif digit == '7':\n            result +='seven'\n        elif digit == '8':\n            result += 'eight'\n        elif digit == '9':\n            result += 'nine'\n        elif digit == '.':\n            result += 'ten'\n        elif digit == ',':\n            result += 'eleven'\n        elif digit == '-':\n            result += 'twelve'\n        elif digit == '?':\n            result += 'thirteen'\n        elif digit == 'V':\n            result += '20'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Argument must be an integer greater than 0\")\n    if number > 1000:\n        raise ValueError(\"Argument must be an integer between 1 and 1000\")\n\n    roman_numeral = ''\n    numbers = ['i', 'v', 'x', 'l', 'c', 'd','m']\n    for numeral, number in zip(numbers, range(len(numbers))):\n        digit = number if (number <= number) else 1000 - (number - number)\n        while digit >= number:\n            numeral += 'x'\n            digit -= number\n    result = \"\".join([numeral for numeral in roman_numeral.split(\"x\")])\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # https://en.wikipedia.org/wiki/Roman_numerals\n\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        return False\n    result = ''\n    for i, n in enumerate(str(number)):\n        if i == 0:\n            result += 'i'\n        elif n == '1':\n            result +='m'\n        elif n == '2':\n            result += 'ii'\n        elif n == '3':\n            result += 'iii'\n        elif n == '4':\n            result += 'iv'\n        elif n == '5':\n            result += 'v'\n        elif n == '6':\n            result += 'vi'\n        elif n == '7':\n            result += 'vii'\n        elif n == '8':\n            result += 'viii'\n        elif n == '9':\n            result += 'ix'\n        else:\n            result += 'x'\n\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('number must be between 1 and 1000')\n\n    result = []\n    for integer, numeral in mini_roman_map:\n        while number >= integer:\n            result.append(numeral)\n            number -= integer\n\n    return ''.join(result).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        raise ValueError('number must be <= 1000')\n\n    def _convert(number, list_):\n        if number == 0:\n            return ''\n        roman_digits = list_ + ['m'] * (number - len(list_) * (number // 10) - 1)\n        roman_digits.extend(['m'] * (number % 10))\n        return ''.join(roman_digits)\n\n    if number < 50:\n        list_ = 'iivix'\n    elif number < 100:\n        list_ = 'clxvii'\n    else:\n        list_ = 'cdxxiv'\n\n    return _convert(number, list_)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Argument must be a positive integer.')\n\n    roman_numeral_map = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500}\n    num_string = str(number)\n    if num_string[-1] == 'x':\n        num_string = num_string[:-1] + 'd'\n\n    while num_string[-1] in roman_numeral_map:\n        num_string = num_string[:-1] + roman_numeral_map[num_string[-1]]\n    return num_string[:-1].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number == 0:\n        return''\n    elif number < 0:\n        raise ValueError('number must be positive')\n\n    roman_letters = ('M', 'D', 'C', 'L', 'X', 'V', 'I','')\n    roman_numbers = (1000, 500, 100, 50, 10, 5, 1, 0)\n\n    roman = ''\n    for numeral, letter in zip(roman_numbers, roman_letters):\n        if number < numeral:\n            roman = letter\n            break\n        number -= numeral\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral_map = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cds',\n        100: 'c',\n        90: 'cc',\n        50: 'x',\n        40: 'xcd',\n        10: 'l',\n        9: 'cl',\n        5: 'v',\n        4: 'iv',\n        1: 'i',\n    }\n\n    result = ''\n    for i, j in roman_numeral_map.iteritems():\n        while number >= i:\n            result += j\n            number -= i\n\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n\n    if number > 3999:\n        raise ValueError(\"Number to big to be converted to roman numerals\")\n\n    if number < 1:\n        raise ValueError(\"Number to small to be converted to roman numerals\")\n\n    if number < 1000:\n        result = \"\"\n        for i in range(1, number + 1):\n            result += roman_numerals[i - 1]\n\n        return result\n\n    j = 1000\n    while j <= number:\n        j += 1000\n        result = \"\"\n        for i in range(1, number - j + 1):\n            result += roman_numerals[i - 1]\n\n        result += roman_numerals[j]\n        return result\n\nroman_numerals = {\n    1: 'I',\n    2: 'II',\n    3: 'III',\n    4: 'IV',\n    5: 'V',\n    6: 'VI',\n    7: 'VII',\n    8: 'VIII',\n    9: 'IX',\n    10: 'X',\n    20: 'XX',\n    30: 'XXX',\n    40: 'XL',\n    50: 'L',\n    60: 'LX',\n    70: 'XC',\n    80: 'CM',\n    90: 'CD',\n    100: 'C',\n    200: 'CC',\n    300: 'CCC',\n    400: '", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = str(number)\n    output = \"\"\n\n    while number!= '0':\n        number, digit = number[:-1], number[-1]\n\n        if digit == 'V':\n            output = 'V' + output\n        elif digit == 'X':\n            output = 'X' + output\n        elif digit == 'L':\n            output = 'L' + output\n        elif digit == 'C':\n            output = 'C' + output\n        elif digit == 'D':\n            output = 'D' + output\n        elif digit == 'M':\n            output = 'M' + output\n        elif digit == 'I':\n            output = 'I' + output\n\n    return output", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ''\n\n    if number == 0:\n        return '0'\n\n    if number < 0:\n        return '_%d' % number\n\n    number = abs(number)\n\n    # Sort the table below, as it will be faster for large numbers\n    # You may prefer to use the numeric value of the characters\n    # for speed, but this implementation is still efficient for small numbers\n    S = ('MM', 'MM', 'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I')\n\n    tens, n = divmod(number, 10)\n    hundreds, tens = divmod(tens, 10)\n\n    roman_numeral += S[tens]\n\n    if n!= 0:\n        roman_numeral += n\n\n    for h in range(1, 100):\n        hundreds, tens, n = divmod(hundreds, 10)\n        roman_numeral += S[tens] + S[n]\n\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n\n    if number < 1:\n        raise ValueError('num must be > 0.')\n\n    if number > 1000:\n        raise ValueError('num must be <= 1000.')\n\n    nums = 'ivxlcdm'\n    result = ''\n    for num in nums:\n        count = number // int(num)\n        number -= count * int(num)\n        result = '{} {}'.format(count, num) + result\n    return result.strip().lower()\n\nA:\n\nAvoid global variables. They are evil. If you need a global variable, assign it to a class.", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n\n    roman = \"\"\n    for numeral, integer in mini_roman:\n        while number >= integer:\n            number -= integer\n            roman += numeral\n\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_number = ''\n    for digit in str(number):\n        if digit == '1':\n            roman_number += 'i'\n        elif digit == '2':\n            roman_number += 'ii'\n        elif digit == '3':\n            roman_number += 'iii'\n        elif digit == '4':\n            roman_number += 'iv'\n        elif digit == '5':\n            roman_number += 'v'\n        elif digit == '6':\n            roman_number += 'vi'\n        elif digit == '7':\n            roman_number += 'vii'\n        elif digit == '8':\n            roman_number += 'viii'\n        elif digit == '9':\n            roman_number += 'ix'\n        elif digit == '0':\n            roman_number += 'x'\n        else:\n            raise Exception('Invalid digit')\n\n    return roman_number.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"can't convert negative number to roman numerals\")\n\n    if number == 1:\n        return \"i\"\n\n    tens = number // 10\n    ones = number % 10\n\n    # Number of different ways to make ten\n    # http://www.mathpages.com/home/kmath65/kmath65.htm#i120\n    if ones == 1:\n        return \"iii\" + str(tens)\n    elif ones == 2:\n        return \"iv\" + str(tens)\n    elif ones == 3:\n        return \"v\" + str(tens)\n    elif ones == 4:\n        return \"vi\" + str(tens)\n    elif ones == 5:\n        return \"vii\" + str(tens)\n    elif ones == 6:\n        return \"viii\" + str(tens)\n    elif ones == 7:\n        return \"ix\" + str(tens)\n    elif ones == 8:\n        return \"xi\" + str(tens)\n    elif ones == 9:\n        return \"xii\" + str(tens)\n    elif ones == 10:\n        return \"xiii\" + str(tens)\n\n    elif ones == 1:\n        return \"cc\" + str(tens)\n    elif ones == 2:\n        return \"cd\" + str(tens)\n    elif ones == 3:\n        return \"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('number must be a positive integer, not %d' % number)\n\n    # Convert to string for easier handling\n    number_str = str(number)\n\n    roman_str = \"\"\n\n    # Make roman numbers\n    roman_numbers = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n\n    # Convert the number to Roman\n    for num in range(len(roman_numbers), 0, -1):\n        count = int(number_str[-(num + 1):])\n        if count >= 1:\n            roman_str += roman_numbers[num] * count\n\n    return roman_str.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return \"\".join([chr(int(x)) for x in divmod(number, 1000)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Base cases\n    if number < 1:\n        return \"\"\n    if number == 1:\n        return \"i\"\n    # Convert number into a string\n    str_num = str(number)\n    # Translate each digit\n    for index, char in enumerate(str_num):\n        if char.isdigit():\n            # First digit is just i\n            if index == 0:\n                return \"i\"\n            # All other digits are calculated\n            digit = ord(char) - ord('0')\n            # Uppercase roman numerals\n            if index == 1:\n                if digit < 4:\n                    return chr(ord('a') + digit)\n                else:\n                    return chr(ord('A') + digit - 4)\n            # Lowercase roman numerals\n            else:\n                if digit < 4:\n                    return chr(ord('a') + digit + 4)\n                else:\n                    return chr(ord('a') + digit - 10 + 4)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = ''\n    for number_range in range(1000, 0, -1):\n        for digit in range(number_range // 100 % 10):\n            result += 'cl'\n        for digit in range(number_range // 10 % 10):\n            result += 'c'\n        for digit in range(number_range % 10):\n            result += 'd'\n        if number_range % 100 > 0:\n            result += 'xxx'\n    result += 'i'\n    return result[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    output = ''\n\n    # ensure input is positive\n    if number <= 0:\n        raise ValueError('input must be > 0')\n\n    # convert to string\n    number = str(number)\n\n    # iterate over number\n    while number:\n        # divide by 1000 until result is less than 1000\n        while number % 1000:\n            number = number // 1000\n            output = str(number % 10) + output\n\n        # divide by 100 until result is less than 100\n        while number % 100:\n            number = number // 100\n            output = str(number % 10) + output\n\n        # divide by 10 until result is less than 10\n        while number % 10:\n            number = number // 10\n            output = str(number % 10) + output\n\n        # number is now less than 10\n        output = str(number) + output\n\n    return output.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = abs(number)\n    roman_numeral = ''\n    for i, digit in enumerate(str(number)):\n        if i == 0:\n            roman_numeral += 'I'\n        elif i == 1:\n            roman_numeral += 'II'\n        elif i == 2:\n            roman_numeral += 'III'\n        elif i == 3:\n            roman_numeral += 'IV'\n        elif i == 4:\n            roman_numeral += 'V'\n        elif i == 5:\n            roman_numeral += 'VI'\n        elif i == 6:\n            roman_numeral += 'VII'\n        elif i == 7:\n            roman_numeral += 'VIII'\n        elif i == 8:\n            roman_numeral += 'IX'\n        elif i == 9:\n            roman_numeral += 'X'\n        elif i == 10:\n            roman_numeral += 'XI'\n        elif i == 11:\n            roman_numeral += 'XII'\n        elif i == 12:\n            roman_numeral += 'XIII'\n        elif i == 13:\n            roman_numeral += 'XIV'\n        elif i == 14:\n            roman_numeral += 'XV'\n        elif i == 15:\n            roman_numeral += 'XVI'\n        elif i == 16:\n            roman_numeral += 'XVII'\n        elif i == 17:\n            roman_numeral += 'XVIII'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 0 < number <= 1000:\n        raise ValueError(\"Number must be between 1 and 1000.\")\n\n    roman_numeral_map = {1000: \"M\", 900: \"CM\", 500: \"D\", 400: \"CD\",\n                        100: \"C\", 90: \"XC\", 50: \"L\", 40: \"XL\",\n                        10: \"X\", 9: \"IX\", 5: \"V\", 4: \"IV\",\n                        1: \"I\"}\n    result = \"\"\n    for multiple in range(10):\n        if (number // multiple) == 0:\n            result += roman_numeral_map[multiple]\n        else:\n            if multiple > 0:\n                result += roman_numeral_map[multiple] + roman_numeral_map[number % multiple]\n    return result.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return None\n    number = str(number)\n\n    if len(number) == 0:\n        return None\n\n    roman_numeral_map = {\n        1: 'i',  5: 'v',  9: 'x',\n        14: 'l',  19: 'ix', 24: 'xx',\n        29: 'xi', 34: 'xl', 39: 'xv',\n        45: 'xxiv', 49: 'xxxii', 54: 'xxxv',\n        59: 'cdxxvii', 64: 'cxlviii', 69: 'cxlv',\n        74: 'cxcix', 79: 'clx',\n        84: 'clxxv', 89: 'clxxix', 94: 'clxxxii',\n        99: 'cxciv', 104: 'cxcii', 109: 'cxcvi',\n        114: 'cxlviii', 119: 'cxlix', 124: 'ccl',\n        129: 'ccli', 134: 'ccliv', 139: 'cccli',\n        144: 'cccliv', 149: 'cxcviii', 154: 'clii',\n        159: 'cclvi', 164: 'ccclvi', 169: 'cliv", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_values = ('i','v', 'x', 'l', 'c', 'd','m')\n    roman_numbers = []\n    number = int(number)\n    while number > 0:\n        number, i = divmod(number, 1000)\n        roman_numbers.insert(0, roman_values[i])\n    result = roman_numbers[0]\n    for i in roman_numbers[1:]:\n        result += roman_values[i]\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = \"\"\n    for integer_part in str(number).split(\" \"):\n        integer_part = integer_part.lstrip(\"0\")\n        if len(integer_part) == 1:\n            roman_numeral += \"i\"\n        elif len(integer_part) == 2:\n            roman_numeral += \"ii\"\n        elif len(integer_part) == 3:\n            roman_numeral += \"iii\"\n        elif len(integer_part) == 4:\n            roman_numeral += \"iv\"\n        elif len(integer_part) == 5:\n            roman_numeral += \"v\"\n        elif len(integer_part) == 6:\n            roman_numeral += \"vi\"\n        elif len(integer_part) == 7:\n            roman_numeral += \"vii\"\n        elif len(integer_part) == 8:\n            roman_numeral += \"viii\"\n        elif len(integer_part) == 9:\n            roman_numeral += \"ix\"\n        elif len(integer_part) == 10:\n            roman_numeral += \"x\"\n        else:\n            roman_numeral += \"?\"\n    return roman_numeral.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def to_roman(num):\n        roman_numeral_map = (\n            ('M', 1000),\n            ('CM', 900),\n            ('D', 500),\n            ('CD', 400),\n            ('C', 100),\n            ('XC', 90),\n            ('L', 50),\n            ('XL', 40),\n            ('X', 10),\n            ('IX', 9),\n            ('V', 5),\n            ('IV', 4),\n            ('I', 1)\n        )\n        output = \"\"\n        for integer, numeral in roman_numeral_map:\n            while num >= integer:\n                output += numeral\n                num -= integer\n        return output\n\n    if number < 1:\n        raise ValueError('Only positive numbers are allowed')\n    roman_numeral = ''\n    while number!= 0:\n        number, i = divmod(number, 10)\n        roman_numeral += to_roman(i)\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Number must be positive')\n    if number >= 1000:\n        raise ValueError('Number must be between 1 and 1000')\n\n    mini_roman_numerals = ('', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv')\n    roman_numerals = ('', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xi', 'xii', 'xiii', 'xiv', 'xv')\n    digits = str(number).split('.')\n    if len(digits) == 1:\n        return mini_roman_numerals[int(digits[0])]\n    elif len(digits) == 2:\n        return roman_numerals[int(digits[0])] + mini_roman_numerals[int(digits", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_chars = {'x':1000, 'l':900, 'c':500, 'i':100, 'd':50, 'xv':40, 'li':9, 'ci':5, 'iv':4, 'ix':3, 'vii':2, 'vi':1}\n    roman_nums = {'xx':900, 'xc':500, 'xl':50, 'xlx':40, 'xci':9, 'xix':8, 'xvii':7, 'xxx':6, 'xi':5, 'xlvi':4, 'xlii':3, 'xl':2, 'xlix':1, 'xxv':4}\n    roman_num = roman_nums.get(str(number), 0)\n\n    res = []\n    for num in roman_nums[roman_num]:\n        res.append(roman_chars.get(str(num), ''))\n\n    res = ''.join(res)\n    return res.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError(\"Number out of range!\")\n\n    roman = \"\"\n    for digit in str(number):\n        if int(digit) >= 1:\n            roman += roman_digits[int(digit)]\n        else:\n            roman += \"o\"\n\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Example cases\n    if number == 1:\n        return 'i'\n    elif number == 2:\n        return 'ii'\n    elif number == 3:\n        return 'iii'\n    elif number == 4:\n        return 'iv'\n    elif number == 5:\n        return 'v'\n    elif number == 6:\n        return 'vi'\n    elif number == 7:\n        return 'vii'\n    elif number == 8:\n        return 'viii'\n    elif number == 9:\n        return 'ix'\n    elif number < 20:\n        return str(int_to_mini_roman(number // 10) + int_to_mini_roman(number % 10))\n    # Special case for 2, 3, 5, 7, 10, 14, 17, and 19\n    elif number == 20:\n        return 'xx'\n    elif number == 21:\n        return 'xxi'\n    elif number == 22:\n        return 'xii'\n    elif number == 23:\n        return 'xiii'\n    elif number == 24:\n        return 'xiv'\n    elif number == 25:\n        return 'xv'\n    elif number == 26:\n        return 'xvi'\n    elif number == 27:\n        return 'xvii'\n    elif number == 28:\n        return 'xviii'\n    elif number == 29:\n        return 'xix'\n    elif number == 30:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number <= 0:\n        return ''\n    result = []\n    for i in range(1, 1000, 3):\n        if number < i:\n            result.append(str(number))\n            break\n        number -= i\n        result.append(toRoman(i))\n    return ''.join(result)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def to_integer(roman_numeral):\n        \"\"\"\n        Given a roman numeral, return its integer value.\n        \"\"\"\n        if roman_numeral == 'i':\n            return 1\n        if roman_numeral == 'ii':\n            return 2\n        if roman_numeral == 'iii':\n            return 3\n        if roman_numeral == 'iv':\n            return 4\n        if roman_numeral == 'v':\n            return 5\n        if roman_numeral == 'vi':\n            return 6\n        if roman_numeral == 'vii':\n            return 7\n        if roman_numeral == 'viii':\n            return 8\n        if roman_numeral == 'ix':\n            return 9\n        if roman_numeral == 'x':\n            return 10\n        if roman_numeral == 'xi':\n            return 11\n        if roman_numeral == 'xii':\n            return 12\n        if roman_numeral == 'xiii':\n            return 13\n        if roman_numeral == 'xiv':\n            return 14\n        if roman_numeral == 'xv':\n            return 15\n        if roman_numeral == 'xvi':\n            return 16\n        if roman_numeral == 'xvii':\n            return 17\n        if roman_numeral == 'xviii':\n            return 18\n        if roman_numeral == 'xix':\n            return 19\n        if roman_num"]]