[["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n <= m:\n        avg = 0\n        for i in range(n, m+1):\n            avg += i\n        avg = avg / (m - n + 1)\n        return str(int(avg))\n    else:\n        return -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    a = (n + m) / 2\n    # Convert to binary string\n    binary = bin(a)\n    return binary[2:len(binary)]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return int(round(avg * 2**m)) // 2**m", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    while m - n > 1:\n        n += 1\n    n = n - 1\n    if n == m:\n        return 2 ** (m + 1)\n    elif n > m:\n        return -1\n    else:\n        total = 0\n        for i in range(n, m + 1):\n            total += i\n        return int(round(total / (m - n + 1)))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n >= m:\n        return -1\n    n = min(n, m)\n    if n == m:\n        return n\n    avg = (n + m) / 2\n    return str(int(avg))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    import math\n    if (n > m):\n        return -1\n\n    first = n\n    last = m\n\n    mid = (first + last) / 2\n    avg1 = round(math.ceil(first + last) / 2)\n    avg2 = round(math.ceil(mid) / 2)\n    avg3 = round(math.ceil(last) / 2)\n    avg4 = round(math.ceil(first) / 2)\n\n    avg = 0\n    avg = avg1 + avg3\n    avg = avg + avg2 + avg4\n    return int(avg, 2)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n>m:\n        return -1\n    count = 0\n    val = n\n    while val <= m:\n        count += 1\n        val = val + 1\n    average = count / float(val - n)\n    return str(int(average)).zfill(len(str(m-n+1)))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n    elif m == n:\n        return n\n    elif n == m - 1:\n        return n + 1\n\n    return round(n + (m - n) / 2, 1)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n, m = sorted([n, m])\n    if n > m:\n        return -1\n    return bin(int((m + n) / 2))[2:]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n\n    total = 0\n    for i in range(n, m + 1):\n        total += i\n        print(total)\n\n    print(total)\n\n    return total\n\ntest_input = input()\ntest_input = test_input.split()\ntest_input = [int(x) for x in test_input]\ntest_input = [str(x) for x in test_input]\ntest_input = test_input[::-1]\ntest_input = rounded_avg(*test_input)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    res = 0\n    for i in range(m+1):\n        res += 2**(m-i) * i\n    return str(int(res/2))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    # First I check if n is smaller than m\n    if n < m:\n        n, m = m, n\n\n    # Then I compute the average, add a bit to it, and then convert it to binary\n    avg = (m + n) / 2\n    avg += 1\n    return bin(avg).replace(\"0b\", \"\")", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    avg = float(total)/(m-n+1)\n    avg = int(round(avg))\n    bin_str = bin(avg)[2:]\n    bin_str = bin_str[len(bin_str)-len(str(m-n+1)):]\n    return bin_str", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    res = 0\n    if n < m:\n        for i in range(n, m + 1):\n            res += i\n            res = round(res / 2)\n    else:\n        res = -1\n    res = str(res)\n    res = res.zfill(len(res) + 1)\n    return res", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n < m:\n        n1 = m\n        n2 = n\n        m = n1\n    else:\n        n1 = n\n        n2 = m\n        n = n1\n    result = 0\n    if n2 == n1 + 1:\n        result += 2\n    for i in range(n1 + 1, n2 + 1):\n        result += 2 ** (i - n1)\n    return result", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    assert 0 < n <= m\n    assert n <= 2**32\n    assert m <= 2**32\n\n    # n = n1 * 2**i + n2 * 2**(i-1)\n    # m = m1 * 2**i + m2 * 2**(i-1)\n    # average = n1 / 2**i + n2 / 2**(i-1)\n    # average = (n1 + n2) / 2**i\n    # average = (n2 + 2 * n1 + m2) / 2**i\n    # average = (n2 + m2) / 2**(i - 1)\n    # average = (2 * n1 + m2) / 2**(i - 1)\n    # average = (n1 + m2) / 2**(i - 1)\n    # average = (n1 + n2) / 2**(i - 1)\n    # average = (2 * n1 + n2) / 2**(i - 1)\n    # average = (n1 + n2) / 2**i\n    # average = (n1 + n2) / 2**(i - 1)\n    # average = (2 * n1 + n2) / 2**(i - 1)\n    # average = (2 * n1 + n2) / 2**i\n\n    n1 = n & ((1 <<", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    assert(n <= m)\n    assert(m - n == 1 or m - n == 0)\n\n    # Memoize the current answer\n    if (n,m) in solved:\n        return solved[(n, m)]\n    if m - n == 1:\n        avg = m\n    else:\n        avg = (m + n) // 2\n\n    # Create a mask of the right size\n    mask = bin(avg).lstrip('-0b')\n    if m - n == 1:\n        mask = '0' * (mask.size + 1) + '1' + '0' * mask.size\n    # Find the integer value of each bit in mask\n    num_bits = mask.size\n    int_bits = []\n    for i in range(num_bits):\n        if (mask[i] == '1'):\n            int_bits.append(i + 1)\n    int_bits = sorted(set(int_bits))\n\n    # Compute the sum of the averages of the bits\n    # If we overflow, replace the last value with 0\n    if num_bits > m:\n        int_bits[-1] = 0\n        sum_avg = sum(int_bits[:-1]) // m\n    else:\n        sum_avg = sum(int_bits) // m\n\n    # Convert the sum into binary\n    str_sum", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n < m:\n        m += 1\n\n    if n == m:\n        return n\n\n    avg = 0\n    count = 0\n    for i in range(n, m):\n        avg += (i << count)\n        count += 1\n\n    avg = avg / (2 ** count)\n\n    if avg % 2 == 0:\n        avg += 1\n\n    return str(avg)[2:] + '-1'", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n < m:\n        average = (n + m) / 2\n    elif n > m:\n        average = -1\n    else:\n        average = m\n    return int(round(average))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    left = int(n) / 2\n    right = (m - int(n)) / 2\n    if left >= right:\n        left = left + 1\n    if left <= right:\n        right = right - 1\n    left = int(n) - left\n    right = m - right\n    if left <= right:\n        return (left * 2 ** (n - left)) + (right * 2 ** (m - right))\n    return -1\n\nn = int(input())\nm = int(input())", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m: return -1\n    a = (n + m)//2\n    return rounded_avg(n, a) + rounded_avg(a+1, m)//2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    count = 0\n    for i in range(n, m + 1):\n        if i % 10 == 0:\n            count += 1\n    return (count + 1) / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n>m:\n        return -1\n    a = 0\n    if n>0:\n        a+=1\n    if n<1:\n        return -1\n    for i in range(m-n):\n        a*=10\n    return int(a)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    k = n - m\n    while k < 0:\n        k += 2**32\n    return (k + int(k / 2**32)) / 2**32\n\nassert rounded_avg(1, 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\"\n\nwith open(\"data.in\") as f:\n    n, m = map(int, map(float, f.readline().strip().split()))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n, m = [int(x) for x in str(n)+str(m)]\n    if n > m:\n        return -1\n    avg = (n+m) / 2\n    rounded = int(avg)\n    bin = bin(rounded)\n    return bin[2:]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    avg = 0\n    for i in range(n, m+1):\n        avg += i\n    return round(avg/m)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    def quick_check(n, m):\n        if n < m:\n            return -1\n        return (n + m) / 2\n    # function body\n    n = int(n)\n    m = int(m)\n    if m < n:\n        return -1\n    if n == m:\n        return n\n    return quick_check(n, m) + (quick_check(m + 1, n) - quick_check(n, m)) / 2\n</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n = int(n)\n    m = int(m)\n    mid = (n + m) // 2\n    if mid!= n:\n        return -1\n    if n == m:\n        return n\n    return round(mid)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    if n == m:\n        return n\n    mid = (m + n) // 2\n    return rounded_avg(n, mid) + rounded_avg(mid, m)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        print(n, m)\n        avg = float(n + m) / 2\n        avg = round(avg, 0)\n        print(avg)\n        return int(\"\".join([str(2 ** b) for b in range(0, len(str(avg))))])\n\nn, m = int(input()), int(input())", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return int(0.5 + (n+m)/2)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    m = m - n\n    if m <= 0:\n        return -1\n    # Determine size of each number\n    size = [int(math.log(m, 2)) - 1,\n            int(math.log(n, 2)) - 1]\n\n    # Convert to binary\n    binary = [\"0\" * size[0], \"0\" * size[1]]\n    for i in range(0, size[0] + 1):\n        binary[0] = str(int(binary[0]) + 1)\n        binary[1] = str(int(binary[1]) + 1)\n\n    # Convert the binary back to integer\n    average = int(bin(int(binary[0]) + int(binary[1]))[2:], 2)\n    # Convert to binary again\n    average_binary = str(average)[2:]\n    # Determine where we need to start the printing\n    print_pos = 1\n    for i in range(0, size[0]):\n        if average_binary[print_pos - 1]!= '0':\n            print_pos = print_pos + 1\n    print_pos = print_pos + size[0]\n    for i in range(print_pos, size[0] + size[1]):\n        if average_binary[i]!= '1':\n            print_pos = print_pos + 1\n    print_pos = print_pos", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n <= m:\n        return (n + 1) / 2.0\n    else:\n        return -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    def avg(n, m):\n        return (n + m)/2\n\n    def bin(avg):\n        bits = bin(avg)[2:]\n        while len(bits) < 4:\n            bits = '0' + bits\n        return bits\n\n    if n > m:\n        return -1\n\n    return bin(avg(n, m))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    sum = 0\n    i = n\n    while i <= m:\n        sum += i\n        i += 1\n    if n > m:\n        return -1\n    return sum/2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    assert n <= m, \"n must be less or equal m\"\n    if n > m:\n        return -1\n    elif n == m:\n        return 0\n    else:\n        return int(n * 2**(m-n)) / 2**(m-n)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # 0b(binary representation)\n    # 0b11 represents decimal 11\n    if n > m:\n        return -1\n    return round(avg(n, m))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return int(bin(round(n + m) / 2)[2:], 2)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n, m = int(n), int(m)\n    if n > m: return -1\n    if n == m: return str(n)\n\n    avg = (n + m) / 2\n    avg = avg // 2\n    avg = (avg * 2) // 2\n    return str(avg)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m == n:\n        return \"0b0\"\n    return \"0b{:0>2}\".format((n+m-1) // 2 + 1)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n, m = int(n), int(m)\n    if n > m:\n        return -1\n    elif n == m:\n        return 0\n    else:\n        return round(sum(range(n, m+1)) / float(m - n + 1), 2)[::-1].zfill(8)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n = int(n)\n    m = int(m)\n    if n > m:\n        return -1\n    ans = 0\n    for i in range(n, m + 1):\n        ans += i\n    return str(ans / (m - n + 1) + 2).zfill(m - n + 1)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\ntestCases = [\n    (1, 5, 0b11),\n    (7, 5, -1),\n    (10, 20, 0b1111),\n    (20, 33, 0b11010)\n]\n\nfor case in testCases:\n    n, m, answer = case\n    assert rounded_avg(n, m) == answer\n\ntestCases = [\n    (1, 5, -1),\n    (7, 5, -1),\n    (10, 20, -1),\n    (20, 33, -1)\n]\n\nfor case in testCases:\n    n, m, answer = case\n    assert rounded_avg(n, m) == answer\n\ntestCases = [\n    (1, 5, -1),\n    (7, 5, -1),\n    (10, 20, -1),\n    (20, 33, -1),\n    (15, 33, -1)\n]\n\nfor case in testCases:\n    n, m, answer = case\n    assert rounded_avg(n, m) == answer\n\ntestCases = [\n    (1, 5, 0b11),\n    (7, 5, -1),\n    (10, 20, -1),\n    (20, 33, -1),\n    (15, 33, 0b11)\n]\n\nfor case in testCases:\n    n, m, answer = case\n    assert rounded_avg", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    result = n\n    if m > n:\n        return -1\n    while m > n:\n        result = (result + m) // 2\n        m = (m + n) // 2\n        n = m\n    if result % 2 == 0:\n        result = result + 1\n    return result\n\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(15, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\"\nassert rounded_avg(30, 33) == \"0b1001\"\nassert rounded_avg(40, 50) == \"0b1111\"\nassert rounded_avg(55, 100) == \"0b1010\"\nassert rounded_avg(100, 200) == \"0b1010\"\nassert rounded_avg(200, 300) == \"0b1010\"\nassert rounded_avg(10, 1) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(-1, 5) == -1\nassert rounded_avg(-5, -5) == -1\nassert rounded_avg(-2, -5) == -1\nassert rounded_avg(-1, -2) == -1\nassert round", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n    \n    if n == m:\n        return \"0b\"+str(n)\n\n    num = (m - n)/2\n    return \"0b\"+str(round(num, 0))+\"_\"+str(round(num + 1, 0))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n, m = int(n), int(m)\n    sum = 0\n    avg = 0\n    if m <= n:\n        avg = (m + n) // 2\n    else:\n        avg = (m + n - 1) // 2\n    for i in range(avg, m + 1):\n        sum += i\n    rounded_avg = str(sum // 2)\n    return rounded_avg", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    sum = 0\n    for x in range(n, m+1):\n        sum += x\n    return sum//(m-n)//2\nn, m = map(int, input().split())\n\nresult = rounded_avg(n, m)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n < m:\n        return (n + m + 1) // 2\n    return -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    def avg(a, b):\n        return ((b-a) * (a + b) // 2) + a\n    \n    def avg_bit(a, b):\n        if a < b:\n            return (b-a) * (a + b) // 2\n        else:\n            return -1\n        \n    def avg_bit_round(a, b):\n        if a < b:\n            return (b-a) * (a + b) // 2\n        else:\n            return -1\n        \n    if n > m:\n        return -1\n    elif n == m:\n        return 0\n    else:\n        return int(str(avg_bit(n, m)), 2)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    count = 1\n    res = 0\n    if (n > m):\n        return -1\n    elif (n == m):\n        return n\n    else:\n        while (n <= m):\n            if (n % 2 == 0):\n                res += count\n            count += 1\n            n += 1\n    print(\"Res:{0}\".format(res))\n    return res", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    # Compute the average\n    average = ((n + m) / 2) + 1\n    # Convert to binary\n    return bin(average)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return (n + m) // 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    total = 0\n    if n > m:\n        return -1\n    elif n == m:\n        return str(n)\n    else:\n        while n <= m:\n            total += n\n            n += 1\n        return str(int(total/2))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n <= m:\n        return n + round(float(m-n)/2)\n    return -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n>m:\n        return -1\n    sum=0\n    for i in range(n,m+1):\n        sum+=i\n    return sum/2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    def compute_average(start, end):\n        sum = 0\n        step = (end - start) // 2\n        for i in range(start, end, step):\n            sum += i\n        return sum // (end - start)\n\n    if n > m:\n        return -1\n    return bin(compute_average(n, m))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    a = 0\n    b = 0\n    while n <= m:\n        a += n\n        n += 1\n\n    while n <= m:\n        b += m\n        m -= 1\n\n    return round(a + b) % 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n, m = map(int, n), map(int, m)\n    res = n * (m - 1) // (m - n)\n    res = round(res)\n    if res < 0:\n        return -1\n    return bin(res)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m > n:\n        return -1\n    l = (m - n) / 2\n    if (m - n) % 2:\n        l += 1\n    return bin(round(n + l) - l)[2:]\n\nimport unittest\nfrom test import support", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    if n == m:\n        return n\n    total = 0\n    left = n\n    while left <= m:\n        total += left\n        left += 1\n    return int(math.ceil(total / (float(m) - float(n) + 1)))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    if n <= 0:\n        return 0\n    if m <= 0:\n        return 0\n    result = 1\n    for i in range(n, m):\n        result *= 2\n        result += i\n    return result", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n\n    n = int(n)\n    m = int(m)\n    avg = 0\n\n    for i in range(n, m):\n        avg += i\n\n    avg = round(avg / (m - n + 1))\n\n    binary = bin(avg)[2:]\n\n    return binary", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if (n > m):\n        return -1\n    if (m == n):\n        return m\n    n1 = (n + m)//2\n    m1 = (n + m)//2\n    return int(round(n1 + m1)/2)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    if n == m:\n        return str(int(n)/2)\n    lower = n\n    upper = m\n    avg = (lower + upper)//2\n    bit = 0\n    while lower > upper:\n        if lower % 2 == 1:\n            bit += 1\n        lower -= 1\n    if bit == 0:\n        return str(int(avg)/2)\n    else:\n        return str(int(avg)/2) + str(bit)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    def avg(n, m):\n        sum = 0\n        for i in range(n, m):\n            sum += i\n        return sum / float(m - n + 1)\n\n    def rounded_avg(n, m):\n        average = avg(n, m)\n        return int(average + 0.5)\n\n    return int(rounded_avg(n, m) + 0.5)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    if n == m:\n        return n\n    n += 1\n    m -= 1\n    num = 0\n    for i in range(m, n):\n        num += 1\n    average = num / (m - n)\n    return average", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    num = 0\n    for i in range(n, m+1):\n        num += i\n    return str(num).zfill(m-n+1).replace('0', '')[::-1]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if m < n:\n        return -1\n    else:\n        numbers = list(range(n, m + 1))\n        avg = sum(numbers) / len(numbers)\n        return bin(int(round(avg)))[2:]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m == 0:\n        return 0\n    if n == 0:\n        return 0\n    if n <= m:\n        return (n + m) / 2\n    else:\n        return -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n = int(n)\n    m = int(m)\n    if n > m:\n        return -1\n    s = 0\n    for i in range(m+1, n+1):\n        s += i\n    s = s % (2*m+1)\n    while s > 0:\n        if s % 2 == 1:\n            return str(1)\n        else:\n            return str(0)\n        s = s / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    def get_avg(first, last):\n        return (first + last) / 2\n\n    if n > m:\n        return -1\n    else:\n        if n == m:\n            return str(n)\n        else:\n            return ''.join((str(get_avg(n, m)), ('1' if n == m else '0')))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m <= n:\n        return -1\n    return bin(round(int(n) + (m - n)/2))[2:].zfill(m - n + 1)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        avg = (m + n) / 2\n        avg = round(avg, 0)\n        avg_bin = bin(avg)\n        avg_bin = avg_bin[2:]\n        return avg_bin", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    def average(from_n, to_m):\n        \"\"\"Compute the average of integers from n through m.\"\"\"\n        total = 0\n        for i in range(from_n, to_m):\n            total += i\n        return total // (to_m - from_n + 1)\n    \n    def average_to_bit(average):\n        \"\"\"Convert the integer average to binary.\"\"\"\n        return bin(int(average))[2:]\n    \n    def get_random_integer():\n        \"\"\"Generate a random integer and return it.\"\"\"\n        return random.randint(1, 100)\n    \n    def main():\n        \"\"\"The main function.\"\"\"\n        while True:\n            n = get_random_integer()\n            m = get_random_integer()\n            if n > m:\n                break\n            print(rounded_avg(n, m))\n    \n    main()\n</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    def binary(x):\n        result = []\n        for i in range(x, 0, -1):\n            result.append(str(i)[-2:])\n        return result\n\n    def binary_to_float(binary):\n        x = int(binary[0], 2)\n        x += int(binary[1], 2) * 1.0 / 2.0\n        x += int(binary[2], 2) * 1.0 / 4.0\n        x += int(binary[3], 2) * 1.0 / 8.0\n        x += int(binary[4], 2) * 1.0 / 16.0\n        x += int(binary[5], 2) * 1.0 / 32.0\n        x += int(binary[6], 2) * 1.0 / 64.0\n        x += int(binary[7], 2) * 1.0 / 128.0\n        x += int(binary[8], 2) * 1.0 / 256.0\n        x += int(binary[9], 2) * 1.0 / 512.0\n        x += int(binary[10], 2) * 1.0 / 1024.0\n        return x\n\n    n, m = map(int, [n, m])\n    if n", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    n = n + 1\n    m = m + 1\n    count = 0\n    i = n\n    while i <= m:\n        if i % 2 == 0:\n            count += 1\n        i += 1\n    avg = count / 2.0\n    return round(avg, 2)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    num = n + m\n    den = m\n    if num % 2 == 0:\n        return 0\n    if den % 2 == 0:\n        return -1\n    avg = num // 2\n    avg_str = bin(avg).split('0b')[1]\n    return avg_str[:len(avg_str)//2]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    s = 0\n    while (n <= m):\n        s += n\n        n += 1\n    return s/(m-n)*2**(m-n)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n    avg = (m + n)/2\n    avg_binary = bin(avg)[2:]\n    print(avg_binary[2:])\n    return avg_binary[2:]\n\nn = input(\"Enter first integer: \")\nm = input(\"Enter second integer: \")\n\nrounded_avg(n, m)\n\nA:\n\nIn addition to the other points made by @Bakuriu, I would note that your solution doesn't handle the case where the two numbers are the same.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return bin(round(sum(range(n, m+1))) - 2*n + 1)[2:]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    result = 0\n    for i in range(m, n):\n        result += (i + 1) // 2\n    return result", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # you can assume 0 <= n < m <= 1000\n    if n > m:\n        return -1\n    if n == m:\n        return n\n    total = 0\n    for i in range(n, m + 1):\n        total += i\n    return int(round(total / (m - n + 1)))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m: return -1\n    if n == m: return n\n    return (n + m) // 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    if m - n == 1:\n        return 2**((m + 1) - n)\n    half = (n + m)/2\n    a = half - 1\n    b = half\n    c = half + 1\n    if a == b:\n        return 2**((c + 1) - a)\n    if a == c:\n        return 2**((b + 1) - a)\n    if b == c:\n        return 2**((a + 1) - b)\n    if a > c:\n        return rounded_avg(a, b)\n    return rounded_avg(b, c)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # Algorithm:\n    if n > m:\n        return -1\n    arr = range(n, m+1)\n    avg = sum(arr)/len(arr)\n    # print(avg)\n    return bin(int(round(avg)))[2:]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n <= m:\n        a = 0\n        b = 0\n        while n < m:\n            a = a + 2 ** n\n            n = n + 1\n        return round(float(a) / float(m - n)) + \"0b{}\".format(a)\n    else:\n        return -1\n        \nn = int(input())\nm = int(input())", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n>m:\n        return -1\n    bin_list = []\n    total = 0\n    i = 0\n    while i<=m:\n        total += n\n        bin_list.append(str(total))\n        i+=1\n\n    bin_list.append('0')\n    bin_list.reverse()\n\n    first_three = bin_list[0:3]\n    middle_three = bin_list[3:6]\n    last_three = bin_list[6:9]\n    final_bin = first_three[0] + middle_three[0] + last_three[0]\n    print(final_bin)\n\nrounded_avg(1, 5)\nrounded_avg(7, 5)\nrounded_avg(10, 20)\nrounded_avg(20, 33)\n\nA:\n\nYou can use itertools.islice to simplify the code:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return ((n + m) // 2) if (m % 2) == 0 else (n + m // 2)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if (n > m):\n        return -1\n    if (n < m):\n        x = 0\n        for i in range(n, m):\n            x += i\n        x = x / (m - n + 1)\n        x = int(x + 0.5)\n        return bin(x).lstrip(\"0b\").zfill(m - n + 1)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    assert n <= m, \"n <= m\"\n    assert type(n) == int and type(m) == int, \"n and m are integers\"\n    assert n >= 0, \"n is non-negative\"\n    assert m >= 0, \"m is non-negative\"\n    assert n!= m, \"n!= m\"\n    assert n > 0, \"n is positive\"\n    assert m > 0, \"m is positive\"\n    assert n < m, \"n is less than m\"\n    assert n % 2 == 0, \"n is even\"\n    assert m % 2 == 0, \"m is even\"\n    assert n!= m, \"n!= m\"\n\n    if n > m:\n        return -1\n\n    v = 0\n    for i in range(n, m + 1, 2):\n        v += i\n\n    return str(v // 2) + \"0\" * (m - n - 1) + \"1\" * (m - n - 1)\n</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # Write your code here\n    if m - n > 1:\n        return -1\n    return ((n + m) / 2) #round((n + m) / 2) binary", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n1 = n\n    if n1 > m:\n        return -1\n    n2 = m+1\n    while n1 < n2:\n        print(\"{0:0>2}\".format(int(n1)))\n        n1 += 1\n    return n1+n2/2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # Calculate the average\n    avg = (n + m) / 2\n\n    # Calculate the binary representation of the average\n    return bin(avg).zfill(8)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = (n + m)//2\n    if (avg - n) % 2 == 0:\n        return \"0\" + bin(avg)\n    else:\n        return \"1\" + bin(avg)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    print(n,m)\n    if n > m:\n        return -1\n    sum = 0\n    i = n\n    while i <= m:\n        sum += i\n        i += 1\n    avg = sum / (m - n + 1)\n    avg = round(avg)\n    avg_bin = bin(avg)\n    print(avg_bin[2:])\n    return avg_bin[2:]\n\nn, m = input().split()\nn, m = int(n), int(m)\nres = rounded_avg(n, m)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n\n    if m - n == 1:\n        return bin(n + m)[2:].zfill(len(n + m))\n    elif m - n == 2:\n        return bin(m - 1)[2:] + bin(n + m)[2:].zfill(len(n + m))\n\n    elif m - n == 3:\n        return bin(m - 2)[2:] + bin(n + m)[2:].zfill(len(n + m))\n\n    elif m - n == 4:\n        return bin(m - 3)[2:] + bin(n + m)[2:].zfill(len(n + m))\n\n    elif m - n == 5:\n        return bin(m - 4)[2:] + bin(n + m)[2:].zfill(len(n + m))\n\n    elif m - n == 6:\n        return bin(m - 5)[2:] + bin(n + m)[2:].zfill(len(n + m))\n\n    elif m - n == 7:\n        return bin(m - 6)[2:] + bin(n + m)[2:].zfill(len(n", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n, m = int(n), int(m)\n    n = n-1\n    # print(n, m)\n    if m > n:\n        return \"-1\"\n    elif n == m:\n        return str(n) + \"0\"\n    else:\n        total = 0\n        while n <= m:\n            total += n\n            n += 1\n            # print(total)\n        return str(total) + \"1\"", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if (n > m):\n        return -1\n    n = int(n)\n    m = int(m)\n    sum = 0\n    i = n\n    while i <= m:\n        sum += i\n        i += 1\n    avg = round(sum / (m - n))\n    return int(str(avg), 2)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    num = 0\n    while n <= m:\n        num += n\n        n += 1\n    num /= m - n + 1\n    return num.to(base=2).rjust(m - n + 1, '0')", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\nn = int(input())\nm = int(input())", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    i = n\n    s = \"\"\n    while i <= m:\n        s += str(i)\n        i += 1\n\n    i = 0\n    t = 0\n    while i < len(s):\n        t = 2 * t + int(s[i])\n        i += 1\n\n    return -1 if t % 2!= 0 else t / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    print (n, m)\n\n    count = (m - n) / 2\n\n    if n > m:\n        return -1\n\n    if count % 2 == 0:\n        return int(n + count/2)\n    else:\n        return (int(n + count/2) + 1) / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    def avg(start, end):\n        total = 0\n        for i in range(start, end + 1):\n            total += i\n        return total / float(end - start + 1)\n\n    def round_to_nearest_int(number):\n        if number < 0:\n            return -1\n        return int(number + 0.5)\n\n    def convert_to_binary(number):\n        return ''.join(str((number >> i) & 1) for i in range(0, 32))[::-1]\n\n    number = avg(n, m)\n    if m >= n:\n        return -1\n    return round_to_nearest_int(number), convert_to_binary(number)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    return str(int(total)/2)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m <= n:\n        return -1\n    return ((n + m) // 2) + (n + m) % 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n <= m:\n        return bin(n+m)[2:].rjust(m-n, \"0\")[-m:]\n    return -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n <= m:\n        val = (n + m) // 2\n        if m - n >= 2:\n            val += 1\n            val %= 2\n        return val\n    return -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m: return -1\n    return (m + n) // 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    total = 0\n    for i in range(m, n+1):\n        total += i\n    return int(round(total/2.0))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if (n > m): return -1\n    if (n > 0 and m < n): return -1\n    if (n < 0 or m < 0): return -1\n    if (n == 0): return 0\n    if (m == 0): return 0\n    if (n == 1): return 1\n    if (m == 1): return 1\n    if (m - n == 1): return (n + 1) / 2\n    num = 0\n    count = 0\n    for i in range(1, int(m - n) + 1):\n        num += n + i\n        count += 1\n    if (count % 2 == 0):\n        return ((num - n) / 2) + (n / 2)\n    else:\n        return ((num - n) / 2)\n\n\nn = int(input())\nm = int(input())", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    if n == m:\n        return 0\n\n    res = 0\n    m = max(n, m)\n    for i in range(n+1, m+1):\n        res += i\n\n    res = res/(m - n + 1)\n\n    return res.__int__().to_binary(len(str(res)))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    assert n <= m, 'n cannot be greater than m'\n\n    while n <= m:\n        avg = (n + m) / 2\n        if avg % 2 == 0:\n            return format(avg, '0b')\n        m = avg - 1\n    return -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n = int(n)\n    m = int(m)\n    if m < n:\n        return \"-1\"\n    else:\n        if m % 2 == 0:\n            m = m + 1\n        return str(int(round(float(n + m)/2,0))).zfill(m + 1)[::-1]\n\nsolution = \"-1\"\nfor i in range(0,100):\n    solution = rounded_avg(i,100)\n    print(solution)\n\noutput:\n-1\n0b1111\n0b101\n0b11011\n0b10110\n0b10110\n0b101110\n0b101111\n0b01101000\n0b10100011\n0b01100011\n0b01100011\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b01101000\n0b", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    arr = []\n    i = n\n    while i <= m:\n        arr.append(bin(i)[2:])\n        i += 1\n    return \"\".join(arr)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    def rounded_avg(n, m):\n        #input validation\n        if not n >= m:\n            return -1\n\n        #return the average rounded to the nearest integer\n        total = 0\n        avg = 0\n        while (n <= m):\n            total = total + n\n            n = n + 1\n\n        avg = total / (m - n + 1)\n\n        #return the average as a binary string\n        return str(format(avg, '08b'))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    assert n < m, 'invalid input'\n    result = m - n\n    if result % 2 == 0:\n        return -1\n    if result <= 0:\n        return 0\n    result = 0\n    for i in range(m - n):\n        result += 2 ** i\n    return result // 2\n\nn = int(input())\nm = int(input())", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n <= m:\n        mid = (m + n) / 2\n        if mid == m:\n            return m\n        elif mid == n:\n            return n\n        else:\n            return round(mid)\n    else:\n        return -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # Special case when m = 0\n    if m == 0:\n        return int(int(n) / 2 + (1 if n & 1 else 0))\n    # Special case when m = 1\n    if m == 1:\n        return int(n)\n    # There are a maximum of 2^32 integers between n and m.\n    # Compute the average of these numbers, then round to the nearest integer.\n    # If there are an odd number of integers, round up.\n    n = n - m + 1\n    avg = n * (2**32 - n - m) / 2**32 + m\n    avg = int(round(avg))\n    return int(\"{0:b}\".format(avg))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    if n <= 0 or m <= 0:\n        return -1\n    total = 0\n    count = 0\n    count2 = 0\n    for i in range(n, m+1):\n        total += int(i)\n        count += 1\n        count2 += int(i)\n    total = round(total/count)\n    count = int(count / 2)\n    count2 = int(count2 / 2)\n    if count == 0:\n        if count2!= 0:\n            return \"0b0\" + str(count2)\n        else:\n            return -1\n    if count2 == 0:\n        if count!= 0:\n            return \"0b1\" + str(count)\n        else:\n            return -1\n    if count2 <= count:\n        return \"0b1\" + str(count) + \"0b0\" + str(count2)\n    else:\n        return \"0b0\" + str(count) + \"0b1\" + str(count2)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # get the average of all the numbers\n    average = (n + m) / 2.0\n    \n    # convert the decimal number to binary\n    bin_average = int_to_bin(average)\n    bin_average = bin_average[::-1]  # reverse the binary\n    \n    # calculate the rounded average and convert to binary\n    rounded_average = int((n + m) / 2)\n    rounded_average = bin_round(bin_average, rounded_average)\n    \n    # if n is greater than m, return -1\n    if n > m:\n        return \"-1\"\n    \n    # otherwise, return the rounded average as binary\n    return rounded_average[::-1]  # reverse the binary\n</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n    return 0.5 * (n + m) + round(0.5 * (n + m) + (n - m)/2, 0)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    avg = n + (m-n)/2\n    if m < n:\n        return -1\n    else:\n        return int(binary(avg))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n\n    i = 0\n    while n <= m:\n        n += 1\n        i += 1\n\n    if i % 2 == 0:\n        return \"0b0\" + \"0\" * (i / 2 - 1) + \"1\"\n    else:\n        return \"0b1\" + \"0\" * (i / 2 - 1) + \"1\"", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    m = int(m)\n    n = int(n)\n    if n >= m:\n        return -1\n    return int((n + m) / 2.0) + 2**((n + m) / 2.0) - 1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m >= n:\n        return round(float(sum(range(n, m + 1))) / (m - n + 1)) \n    return -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    average = 0\n    n = int(n)\n    m = int(m)\n    if n > m:\n        return -1\n    i = n\n    while i <= m:\n        average = average + i\n        i = i + 1\n    average = float(average) / (m - n + 1)\n    return int(round(average))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return sum(map(int, bin(n + m + 1).split('0b')[::2])) / (m - n + 1)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    def avg(x, y):\n        if x > y:\n            return (x + y) // 2\n        else:\n            return (x + y) // 2\n\n    return avg(n, m) if m <= n else -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    low = 0\n    high = n\n\n    while high <= m:\n        avg = low + high\n        avg = avg / 2\n        avg = round(avg, 0)\n        binary = bin(avg)[2:]\n        print(binary)\n        print(avg)\n        high += 1\n        low += 1\n\nn, m = input().split()\nn, m = int(n), int(m)\n\nrounded_avg(n, m)\n\nA:\n\nYour solution is correct. This is how I would have done it. I would have used range() instead of the while loop.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    digits = []\n    while n <= m:\n        n += 1\n        digits.append(str(n)[::-1])\n    return sum(digits)/2[::-1]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n    while n <= m:\n        total += n\n        n += 1\n        count += 1\n\n    avg = total / count\n    avg = round(avg)\n    binary = bin(avg)\n    return binary[2:]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    half = (m - n) // 2\n    avg = (n + half) // 2\n    return int(\"0b{:0>4}\".format(avg))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    def sum_to_sum(n, m):\n        sum = 0\n        for i in range(n, m + 1):\n            sum += i\n        return sum\n    def avg(n, m):\n        return round(sum_to_sum(n, m) / (m - n), 2)\n    return int(str(avg(n, m)).zfill(n))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m > n:\n        return -1\n    left = 0\n    right = 2**n\n    # find the average\n    while m > n:\n        mid = (n + m) // 2\n        if mid < n:\n            right = mid\n        else:\n            left = mid\n        m = m - mid\n    # rounded average\n    avg = int(right - left)\n    # convert to binary\n    return bin(avg)[2:]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n >= m:\n        return -1\n    n = int(n)\n    m = int(m)\n    range_sum = n + m\n    if range_sum % 2 == 1:\n        range_sum = range_sum + 1\n    range_sum = range_sum - n\n    range_sum = (m + 1) * range_sum / m\n    if range_sum % 2 == 1:\n        range_sum = range_sum + 1\n    range_sum = range_sum - n\n    return str(range_sum)[2:]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    l = []\n    if n > m:\n        return -1\n    for i in range(n, m+1):\n        l.append(i)\n    avg = sum(l)/len(l)\n    if n == m:\n        return int(avg)\n    return (2*avg-1) // 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n = n - 1\n    m = m - 1\n    i = n\n    a = [-1] * (m - n)\n    b = [-1] * (m - n)\n    while i < m:\n        a[i] += 1\n        b[i] += 1\n        i += 1\n    if a[-1] == 0 or b[-1] == 0:\n        return -1\n    return bin(round(sum(a) / (a[-1] + b[-1]) / 2))[2:]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    nums = range(n, m + 1)\n    avg = sum(nums) / len(nums)\n    avg = round(avg)\n    return str(avg).zfill(m - n + 1).replace(\"0b\", \"\")", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    def avg(n, m):\n        if n > m:\n            return -1\n        m -= n\n        return (n * (2**m)) // (2**m + 1)\n    return avg(n, m)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return 0", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    m = m - n\n    if n > m:\n        return -1\n    if n == m:\n        return n\n    if n % 2 == 0:\n        return n / 2\n    return (n + m) / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if (n >= m):\n        return -1\n    s = 0\n    i = 0\n    while (n + i) <= m:\n        s += n + i\n        i += 1\n    return bin(s)[2:].zfill(m - n + 1)[::-1]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    def _rounded_avg(n, m):\n        if n > m:\n            return -1\n        elif m == n:\n            return n\n        else:\n            return (n+m-1)/2\n\n    def _bits(n):\n        if n >= 2:\n            return [int(n - i) for i in range(1, 8)] + [-1]\n        elif n == 1:\n            return [1]\n        else:\n            return [-1]\n\n    def _rounded_avg(n, m):\n        avg = _rounded_avg(n, m)\n        return '0b%s' % (''.join([str(v) for v in _bits(avg)]))\n\n    return _rounded_avg(n, m)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    def rounded_avg_helper(n, m):\n        \"\"\"helper function to help rounded_avg\"\"\"\n\n        # number of bits in the result\n        width = log(m, 2)\n\n        # bit mask to get the digit in the correct position\n        mask = pow(2, width - 1)\n\n        avg = n + m - 1\n        avg = avg // 2\n        avg = avg // 2\n\n        avg = (avg + 1) // 2\n\n        # increment the result if needed\n        if avg % 2!= 0:\n            avg += 1\n\n        # binary to decimal\n        # s = sign bit\n        # d = digit to the left of the sign bit\n        # n = number of zeros on the left of the binary number\n        # h = number of zeros on the right of the binary number\n        # a = 1 if the number is odd\n        # c = carry bit\n        # e = 1 if the number is even\n        # n = width - 1, s = 0, d = 0, h = 0, a = 0, c = 0, e = 1\n        # c = (avg - (n << 1)) & 1\n        # c = (avg - ((n - 1) << 1)) & 1\n        # c = (avg - (", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n >= m:\n        return -1\n    l = list(range(n, m + 1))\n    avg = sum(l) / len(l)\n    return bin(avg)[2:]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n\n    if n == m:\n        return (n + 1) // 2\n\n    left = n\n    right = m\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if mid % 2 == 0:\n            right = mid\n        else:\n            left = mid + 1\n\n    return (left + 1) // 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    if n == m:\n        return str(n)\n    l = list(range(n, m))\n    if m - n == 1:\n        return \"0b0\" + str(l[0])\n    else:\n        return \"\".join([str(round(n + i / 2,0)) for i in l])", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n\n    if n == m:\n        return n\n\n    ans = 0\n    i = n\n    while i < m:\n        ans += i\n        i += 1\n\n    return str(int(round(ans / float(m - n) * 2.0)))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    print(\"With the given parameters n and m, the answer is\", n + m // 2)\n    print(\"The result has to be rounded to the nearest integer.\")\n    print(\"The answer is\", bin(int(n + m // 2) - 1)[2:])\n    return -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n, m = n - 1, m - 1\n    binary = bin(n + 1)[2:].zfill(m - n + 1)\n    binary = '0' * (m - n + 2 - len(binary)) + binary\n    return int(binary, 2)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n>m:\n        return -1\n    sum=0\n    count=0\n    for i in range(n,m+1):\n        sum+=i\n        count+=1\n    print(bin(sum/count))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    def avg(a, b):\n        \"\"\"Computes the average of the integers in the range [a, b], inclusive\"\"\"\n        return (a + b) // 2\n\n    def binary_avg(n, m):\n        \"\"\"\n        Creates a binary string representation of the average of integers from n\n        through m (inclusive).\n        \"\"\"\n        return \"{0:0{1}b}\".format(avg(n, m), m - n + 1)\n\n    return binary_avg(int(n), int(m))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n, m = int(n), int(m)\n    if n > m:\n        return -1\n\n    # Find the fraction part of the average and round it.\n    avg = (n + m) / 2\n    avg = (avg * 2) - (avg % 2)\n\n    # Convert the fraction part to binary.\n    bin = bin(avg)\n    return bin[len(bin) - 1]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n = int(n)\n    m = int(m)\n\n    # from https://en.wikipedia.org/wiki/Average#Algorithms\n    if n > m:\n        return -1\n\n    if m - n == 1:\n        return n\n    avg = n + (m - n) / 2.0\n    return int(round(avg))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n >= m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum += i - 1\n\n    if sum % 2 == 0:\n        return int(sum / 2)\n    else:\n        return int(sum / 2) + 1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    from math import ceil\n    return int(ceil(float(n + m - 1) / 2.0) * 2)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    #  if m - n >= 2:\n    #      print(round(n + (m - n)/2))\n    #      print(round(m - (m - n)/2))\n    #      print(\"\")\n    #  else:\n    #      print(-1)\n\n    if m - n >= 2:\n        m_sum = 0\n        n_sum = 0\n        for i in range(n, m):\n            m_sum += i\n            n_sum += n\n            print(m_sum)\n            print(n_sum)\n        print(\"\")\n        print(m_sum - n_sum)\n    else:\n        print(-1)\n\n    return n_sum - m_sum</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    def rounded_avg(n, m):\n        \"\"\"You are given two positive integers n and m, and your task is to compute the\n        average of the integers from n through m (including n and m). \n        Round the answer to the nearest integer and convert that to binary.\n        If n is greater than m, return -1.\n        Example:\n        rounded_avg(1, 5) => \"0b11\"\n        rounded_avg(7, 5) => -1\n        rounded_avg(10, 20) => \"0b1111\"\n        rounded_avg(20, 33) => \"0b11010\"\n        \"\"\"\n        if n > m:\n            return -1\n        elif n == m:\n            return n\n        else:\n            n = n * 2\n            m = m * 2\n            avg = 0\n            while n < m:\n                avg += n\n                n += 1\n            avg = avg // 2\n            return str(int(round(avg)))\n</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    elif n > 0:\n        return int(round(n/m * 2))\n    else:\n        return 0", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    result = 0\n    for i in range(n, m+1):\n        result += (i + 1) * 2**(n - i)\n    return int(result / float(m - n) + 0.5) * 2**(n - m)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    mid = (n + m) / 2\n    return int('{0:0{1}b}'.format(mid, m - n))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    if m - n == 1:\n        return str(n)\n    n_list = []\n    for i in range(n, m + 1):\n        n_list.append(str(i))\n    if len(n_list) % 2 == 0:\n        return str(sum(n_list) // 2)\n    return str((sum(n_list) // 2) + 1)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    a = (n + m) // 2\n    if n <= m:\n        if n < a:\n            return -1\n        else:\n            return int(round(a*(n-m+1)/(2*n)))-1\n    else:\n        return -1\n\nn, m = input().split()\nn, m = int(n), int(m)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n = int(n)\n    m = int(m)\n    if m < n:\n        return -1\n    average = (n + m) / 2\n    return str(int(round(average))).zfill(m - n)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = 0\n    if n == m:\n        return n\n    for x in range(n, m):\n        avg += x\n    avg /= (m - n)\n    avg = int(round(avg))\n    bin_avg = bin(avg)\n    if bin_avg[-1] == '0':\n        return bin_avg[:-1]\n    else:\n        return bin_avg + '1'", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    n_binary = bin(n)[2:]\n    m_binary = bin(m)[2:]\n    m_n = int(m_binary, 2)\n    if n > m_n:\n        return -1\n    avg = sum(map(int, n_binary[2:])) / len(n_binary[2:])\n    rounded_binary = bin(int(avg))[2:]\n    return rounded_binary", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if (m <= n):\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    if (total % 2!= 0):\n        total += 1\n    return bin(total)[2:].zfill(m-n+1)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        avg = sum(range(n, m+1)) // 2\n        return round(avg, 2)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    import math\n    if n > m:\n        return -1\n    res = 0\n    for i in range(n, m+1):\n        res += i\n    avg = res / (m - n + 1)\n    print(\"{} is {} in binary\".format(avg, bin(int(avg))[2:]))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    m = int(m)\n    n = int(n)\n    if n > m:\n        return -1\n    else:\n        n = n + 1\n        q = n + 1\n        m = m - 1\n        while q <= m:\n            s = 1\n            while n >= 2:\n                s = s * n\n                n = n / 2\n            n = q\n            q = q + 1\n            print(s % 2)\n            print(' ', end='')\n        print(' ', end='')\n        print(s % 2)\n        return s % 2\n\nn, m = map(int, input().split())", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        total = 0\n        for i in range(m, n+1):\n            total += i\n        avg = int(total/m)\n        return str(avg)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m: return -1\n\n    # convert n, m to binary\n    n_bin = bin(int(n)).replace(\"0b\", \"\")\n    m_bin = bin(int(m)).replace(\"0b\", \"\")\n\n    if n == m:\n        avg = bin(int((n + m) / 2)).replace(\"0b\", \"\")\n    else:\n        avg = (m_bin + bin(int((n + m) / 2)))[2:]\n        avg = str(int(avg, 2))[2:]\n\n    # return the rounded average\n    return round(avg, 1)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m + 1):\n        total += i\n    average = round(total / (m - n + 1), 1)\n    binary = bin(average)[2:]\n    return binary", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    if n == m:\n        return 1\n    return ((m - n + 1) * 2) // 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    low = 0\n    high = n\n    while high - low <= 1 or high - low > 10:\n        mid = (low + high) // 2\n        if mid == n:\n            return \"0b1\" + \"0b0\" * (m - n)\n        elif mid == m:\n            return \"0b0\" + \"0b1\" * (n - m)\n        elif mid == n or mid == m:\n            return \"0b0\" + \"0b0\" * (mid - n + 1)\n        else:\n            return \"0b0\" + \"0b1\" * (mid - n + 1)\n        low = mid\n        high = mid + 1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    result = 0\n    d = 1\n    while n < m:\n        n += d\n        result += d\n        d *= 2\n    result = int(round(result/2.0))\n    result = bin(result).zfill(int(math.ceil(math.log(result, 2))))[2:]\n    return result", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # avg = (m+n)/2\n    # rounded = avg + 1 if n>m else avg\n    # return str(int(rounded, 2))\n    return int(round(float(n) + float(m)/2, 0))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    sum = 0\n    for i in range(n, m):\n        sum += i\n    avg = sum / (m - n + 1)\n    result = round(avg)\n    result = bin(result)[2:]\n    result = result[::-1]\n    if n > m:\n        return result + '0' * len(result)\n    return result", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m > n:\n        return \"-1\"\n\n    # avg = ((n + m) / 2) + ((m - n) / 2) / 2\n    avg = ((n + m) / 2) + ((m - n) / 2) / 2\n    # print(\"avg = \", avg)\n    binary = bin(int(round(avg)))  # convert to binary\n    # print(\"binary = \", binary)\n    return binary", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n>m:\n        return -1\n    if n==m:\n        return \"0b\"+str(n)\n    num=(n*10+1)//2\n    rem=(n*10+1)//2\n    num=num*10+(m-n)\n    rem=rem*10+n\n    if rem>m:\n        return -1\n    return \"0b\"+str(num)+\".\"+str(rem)+\"b\"\n\nn=int(input())\nm=int(input())", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    if n == m:\n        return n\n    temp = m - n\n    if temp % 2 == 0:\n        return (n + m) / 2\n    else:\n        return (n + m + 1) / 2\n\nn = int(input())\nm = int(input())\n\nres = rounded_avg(n, m)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return sum(2**(x-y) for x in range(n,m+1) for y in range(x, m+1))//(m-n+1)\n\nn = int(input())\nm = int(input())", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = ((n+m) / 2)\n    avg = float(avg) + 0.5\n    return int(avg)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    low = n\n    high = m\n    avg = ((high + 1) / 2) - low\n    if (n > m):\n        return -1\n    else:\n        binary = str(int(avg)) + \"0\"\n        return binary[::-1]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n < m:\n        n = n - 1\n        m = m - 1\n    average = 0\n    while n <= m:\n        average = average + n\n        n = n + 1\n    # convert the answer to binary\n    binary_str = \"{0:0\" + str(int(len(str(m + 1))) - 1) + \"b}\".format(average)\n    return binary_str", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    n, m = int(n), int(m)\n    def rounded_avg(n, m):\n        \"\"\"You are given two positive integers n and m, and your task is to compute the\n        average of the integers from n through m (including n and m). \n        Round the answer to the nearest integer and convert that to binary.\n        If n is greater than m, return -1.\n        Example:\n        rounded_avg(1, 5) => \"0b11\"\n        rounded_avg(7, 5) => -1\n        rounded_avg(10, 20) => \"0b1111\"\n        rounded_avg(20, 33) => \"0b11010\"\n        \"\"\"\n        n, m = int(n), int(m)\n        if n > m:\n            return -1\n        average = n + (m - 1) // 2\n        return str(average).zfill(m // 2 + 1).zfill(1).replace('0b', '')\n    return rounded_avg(n, m)\n\n\n</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    def average(n, m):\n        return (m - n + 1) / 2\n    \n    if n > m:\n        return -1\n    elif n == m:\n        return n\n    elif n <= 0:\n        return 0\n    else:\n        return bin(average(n, m))[2:]\n\nfor x in range(1, 10):\n    print(rounded_avg(x, 5))\nfor x in range(20, 33):\n    print(rounded_avg(x, 20))\nfor x in range(33, 50):\n    print(rounded_avg(x, 50))\nfor x in range(1, 7):\n    print(rounded_avg(x, 7))\n\nOUTPUT\n0b11\n0b1111\n0b1101\n0b1101\n0b11\n0b11\n0b11\n0b11\n0b11\n\nNOTE\nYour score for this problem is the number of characters in the answer for the largest input value minus the number of characters in the answer for the smallest input value (including the 0b prefix).\n\nA:\n\nPython 2, 147 146 142 137 chars\nlambda n,m:[m-n+1]//2or-1*(-2**m<n<mand'%08b'%-mor'%", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    assert m >= n, \"Error: m must be greater than n\"\n    assert n <= m <= n + (m - n), \"Error: m must be greater than n and n must not exceed (m - 1)\"\n\n    if m == n + 1:\n        return \"0b0\" + str((m - n) % 2)\n    if m - n == 1:\n        return \"0b1\" + str(m - n)\n\n    avg = (m - n) // 2\n    avg_bin = \"\"\n\n    for _ in range(int(math.log(avg, 2))):\n        avg_bin += \"0\"\n    avg_bin += \"1\"\n\n    return avg_bin[::-1]\n</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    # return -1 if the input array is not sorted in ascending order\n    if n > m:\n        return -1\n\n    # calculate sum\n    sum = 0\n    for i in range(n, m + 1):\n        sum += i\n\n    # calculate average\n    average = sum / (m - n + 1)\n\n    # convert average to binary\n    return bin(int(average))[2:]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    arr = []\n    for i in range(n, m+1):\n        arr.append(str(i))\n\n    avg = sum(arr)/(m-n+1)\n    r_avg = round(avg)\n    b_avg = bin(r_avg)[2:]\n\n    if n > m:\n        return -1\n    else:\n        return b_avg", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    val = (m - n + 1) // 2\n    if val == 0:\n        return '0'\n    if val % 2 == 1:\n        return '1'\n    return str((val + 1) // 2)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return round(n/m + 1)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m <= n:\n        return -1\n    i = (m - 1) // 2\n    return (int(1 + int(1.0 / i) * ((n + 1) - i)) * 2) + 1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m > n:\n        return -1\n    bin_avg = n + 1\n    for i in range(n + 1, m):\n        bin_avg += 2 * (i - n)\n        bin_avg //= 2\n    return bin_avg"]]