[["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # write your code here\n    #return max(words, key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return \"\"\n    elif len(words) == 1:\n        return words[0]\n    else:\n        max_word = \"\"\n        for word in words:\n            if len(word) > len(max_word):\n                max_word = word\n        return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    if not words:\n        return \"\"\n\n    # dictionary for counting the number of unique characters for each word\n    # and storing the index of first and last character of each word\n    # after splitting with space\n    d = {}\n    for i in range(0, len(words[0])):\n        d[words[0][:i]] = (d.get(words[0][:i], 0) + 1, i)\n\n    # max number of unique characters for each word\n    m = [max(d.get(w[:i], 0) for w in words) for i in range(len(words[0]))]\n    # Find the maximum in m\n    max_m = max(m)\n    # iterate over each index in words[0] and find the index of first\n    # and last character of the word\n    for i, j in d.items():\n        if j[0] == max_m:\n            return words[0][max(0, i - 1):j]\n\n    return words[0][m.index(max_m):]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_ = \"\"\n    max_c = 0\n    for word in words:\n        if len(word) == max_c:\n            max_ = word\n        elif len(word) > max_c:\n            max_ = word\n        max_c = len(max_)\n    return max_", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # your code here\n    if len(words) > 1:\n        result = max([len(x) for x in words])\n    else:\n        result = \"\"\n    return words[words.index(result)]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_uniq = 0\n    for word in words:\n        if len(set(word)) > max_uniq:\n            max_uniq = len(set(word))\n    if len(words) > 0:\n        return max(words, key=len)\n    else:\n        return \"\"\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        char_count = 0\n        for char in word:\n            char_count += 1\n            if char_count == max_chars:\n                continue\n            if not char in char_counts:\n                char_counts[char] = 1\n            else:\n                char_counts[char] += 1\n\n        max_chars = char_count\n        max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_occur = 0\n    max_word = \"\"\n\n    for w in words:\n        occur = 0\n        for c in w:\n            occur += 1 if c not in max_word else 0\n\n        if occur > max_occur:\n            max_occur = occur\n            max_word = w\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [word.lower() for word in words]\n    unique_words = set(words)\n    max_chars = 0\n    max_word = ''\n    for word in words:\n        if len(unique_words & set(word)) > max_chars:\n            max_chars = len(unique_words & set(word))\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word_list = list(words)\n    max_length = 0\n    max_word = \"\"\n    for word in word_list:\n        if len(word) > max_length:\n            max_word = word\n            max_length = len(word)\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def get_all_unique_char(str):\n        return set(str) - set(str.lower())\n\n    def get_word_length(word):\n        return len(\"\".join(set(word)))\n\n    def get_word_length_ignore_case(word):\n        return len(\"\".join(set(word.lower())))\n\n    def get_word_with_max_unique_char(word_list):\n        max_length = 0\n        for word in word_list:\n            if len(get_all_unique_char(word)) > max_length:\n                max_length = get_all_unique_char(word).__len__()\n                max_word = word\n        return max_word\n\n    def get_word_with_max_unique_char_ignore_case(word_list):\n        max_length = 0\n        for word in word_list:\n            if len(get_all_unique_char(word.lower())) > max_length:\n                max_length = get_all_unique_char(word.lower()).__len__()\n                max_word = word\n        return max_word\n\n    if words:\n        return get_word_with_max_unique_char(words)\n    else:\n        return \"Empty List\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    counts = {}\n    for word in words:\n        for char in word:\n            if char in counts:\n                counts[char] += 1\n            else:\n                counts[char] = 1\n    max_word = \"\"\n    max_count = 0\n    for char in counts:\n        if counts[char] > max_count:\n            max_count = counts[char]\n            max_word = char\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    res = \"\"\n    l = len(words)\n    for w in words:\n        if len(w) > len(res):\n            res = w\n    return res", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def getcount(word):\n        count = 0\n        for i in range(len(word)):\n            if word[i] not in word[:i]:\n                count += 1\n        return count\n    def lexicographic(a, b):\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n    max = 0\n    for word in words:\n        word = \"\".join(sorted(word))\n        if getcount(word) > max:\n            max = getcount(word)\n            ans = word\n    if max == 0:\n        ans = \"\"\n    return ans", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = \"\"\n    for word in words:\n        if len(set(word)) > len(set(max_word)):\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_words = set()\n    for word in words:\n        if len(set(word)) > len(max_words):\n            max_words = set(word)\n\n    if len(max_words) > 1:\n        for word in words:\n            if set(word) == max_words:\n                max_words = word\n\n    return max_words", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def get_len(string):\n        return len(string) - set(string).cardinality()\n\n    return max(words, key=get_len)\n\nwords = [\"aaaaaaa\", \"bb\", \"cc\"]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def _find_max(words):\n        return max(words, key=lambda word: len(set(word)))\n\n    return _find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_length = 0\n    max_word = None\n\n    for word in words:\n        if len(word) > max_length:\n            max_word = word\n            max_length = len(word)\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    import collections\n    from operator import itemgetter\n\n    # Sort the list of strings so that words with maximum number of unique\n    # characters come first.\n    words = sorted(words, key=itemgetter(0))\n\n    # Create a set to store the unique characters of all the words. Use the\n    # set datatype because it removes duplicates.\n    uniques = set()\n    for word in words:\n        for char in word:\n            if char not in uniques:\n                uniques.add(char)\n    # Find the maximum number of unique characters in the list of words.\n    max_uniques = max(uniques)\n\n    # Find the first word that has maximum number of unique characters.\n    for word in words:\n        if len(set(word)) == max_uniques:\n            return word\n\n    # Return an empty string if all the words have the same number of unique\n    # characters.\n    return ''\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    return None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=lambda x: len(set(x)))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Our helper function\n    def count(word):\n        count = 0\n        for c in word:\n            if c not in words:\n                return count\n            count += 1\n        return count\n\n    # If the input is empty, return the empty string\n    if words == []:\n        return \"\"\n\n    # Iterate over the words and find the one with maximum unique characters\n    max_count = words[0]\n    max_word = words[0]\n    for w in words:\n        if count(w) > max_count:\n            max_count = count(w)\n            max_word = w\n\n    # Check for tie\n    if max_count == count(max_word):\n        for w in words:\n            if count(w) == max_count:\n                if w < max_word:\n                    max_word = w\n\n    # Return the maximum word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    max_uniq_character = 0\n    max_value = \"\"\n\n    for word in words:\n        value = 0\n        for ch in word:\n            if ch not in word:\n                value += 1\n        if value > max_uniq_character:\n            max_uniq_character = value\n            max_value = word\n\n    return max_value", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    import collections\n    # sort the words in alphabetical order\n    word_dict = collections.defaultdict(int)\n    for w in words:\n        word_dict[w] += 1\n\n    max_unique = max(word_dict.keys(), key=word_dict.get)\n    return max_unique", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def unique_char_count(s):\n        return len(set(s))\n\n    def max_unique_char_count(words):\n        return max(unique_char_count(w) for w in words)\n\n    def sorted_unique_char_count(words):\n        return sorted(unique_char_count(w) for w in words, reverse=True)\n\n    return sorted_unique_char_count(words)[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = \"\"\n    length = 0\n    for word in words:\n        length = len(word)\n        if length > length:\n            break\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # If the list is empty then return empty string.\n    if not words:\n        return \"\"\n\n    # Get the word with maximum number of unique characters.\n    # If the words have same number of unique characters, then return the\n    # word which comes first in lexicographical order.\n    max_word = max(words, key=lambda x: len(set(x)))\n    if not max_word:\n        return \"\"\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_chars = max(len(word) for word in words)\n    for word in words:\n        if len(word) == max_chars:\n            if sorted(set(word)) < sorted(set(words[-1])):\n                return words[words.index(word)]\n            else:\n                return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def count_unique_char(word):\n        \"\"\"Accepts a string and returns a count of the number of unique characters in the string.\"\"\"\n        return len(set(word))\n    return max(words, key=count_unique_char)\n\ntest_cases = [\n        [\"name\", \"of\", \"string\"],\n        [\"name\", \"enam\", \"game\"],\n        [\"aaaaaaa\", \"bb\",\"cc\"],\n        [\"aaaaaaa\", \"bb\", \"ccccccc\"],\n        [\"aaaaaaa\", \"bb\", \"ccccccc\"]\n    ]\n\nfor test in test_cases:\n    print(f\"{test[0]} == {find_max(test)}\")\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char in set(word):\n                count += 1\n        if count > max_count:\n            max_word = word\n            max_count = count\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # https://leetcode.com/discuss/62126/problem-solving-using-subset-sum-algorithms\n    # range_max('abcdef', 'def') == 1\n    # range_max('abcdef', 'abc') == 2\n\n    if len(words) == 0:\n        return None\n    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        if len(words[0]) > len(words[1]):\n            return words[0]\n        else:\n            return words[1]\n\n    max_word = \"\"\n    count = len(set(words[0]))\n\n    for word in words[1:]:\n        if len(set(word)) > count:\n            count = len(set(word))\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    pass", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max_helper(l):\n        if not l:\n            return \"\"\n        l.sort()\n        if len(l[0]) > len(l[1]):\n            return l[0]\n        return l[1]\n\n    return find_max_helper(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    word_length = len(max(words, key=len))\n    max_word = max(words, key=lambda word: word_length)\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Recursion implementation\n    # Find the max length of the word\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    # Recursive call\n    if max_word:\n        return max_len, find_max(words)\n\n    # Iterative implementation\n    # Find the max length of the word\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    # Find the maximum length word\n    max_word = \"\"\n    for word in words:\n        if len(word) == max_len:\n            max_word = word\n    # Return the maximum length word\n    if max_word:\n        return max_word, max_len\n\n    return max_len, max_word\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_chars = 0\n    max_str = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_str = word\n    return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = ''\n    max = 0\n    for w in words:\n        count = 0\n        for c in w:\n            if c in word:\n                count += 1\n            else:\n                word += c\n                count = 1\n\n        if count > max:\n            max = count\n            word = w\n\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word_list = sorted(words)\n    max_len = 0\n    max_word = \"\"\n    for w in word_list:\n        w_len = len(w)\n        if w_len > max_len:\n            max_len = w_len\n            max_word = w\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    result = \"\"\n    for word in words:\n        if len(result) == 0 or len(result) > len(word):\n            result = word\n\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    print(\"Enter the list of words you want to find max word from:\")\n    words = input(\" \").split()\n    max_word = \"\"\n    max_word_length = 0\n    for word in words:\n        word_length = len(word)\n        if len(word) > max_word_length:\n            max_word = word\n            max_word_length = len(word)\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=lambda x: len(set(x)))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def count_unique_char(word):\n        count = 0\n        for char in word:\n            if char not in char_map:\n                char_map[char] = 1\n            else:\n                char_map[char] += 1\n        return char_map.values()\n\n    char_map = {}\n    words.sort()\n    for word in words:\n        if len(word) > count_unique_char(word):\n            count_unique_char(word)\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return ''\n    max_list = []\n    for word in words:\n        if len(word) > len(max_list[0]):\n            max_list = [word]\n        elif len(word) == len(max_list[0]):\n            max_list.append(word)\n    max_list = max_list[0:1]\n    return max_list[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    print(\"Entered the find_max function\")\n    word = \"\"\n    for word in words:\n        word = word.lower()\n        word = \"\".join(sorted(set(word)))\n        print(word)\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    count = 0\n    max = 0\n    string = \"\"\n\n    for word in words:\n        count = count + len(set(word))\n\n    if count > max:\n        max = count\n        string = words[0]\n\n    for word in words:\n        if len(set(word)) == max:\n            if word < string:\n                string = word\n\n    return string", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if words == []:\n        return \"\"\n    d = defaultdict(int)\n    for word in words:\n        d[word] += 1\n    result = max(d, key=d.get)\n    result = result.split()[0] if result == \"\" else result\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def count_char(word):\n        \"\"\"A helper function that returns the count of unique characters in the\n        word.\"\"\"\n        chars = set()\n        for c in word:\n            chars.add(c)\n        return len(chars)\n\n    def compare_char(word1, word2):\n        \"\"\"A helper function that compares the two words on the basis of the\n        number of unique characters. If they have the same number of unique\n        characters, then compares them according to lexicographical order.\n        \"\"\"\n        if count_char(word1) == count_char(word2):\n            return word1 < word2\n        else:\n            return count_char(word1) > count_char(word2)\n\n    def find_max_helper(word_list):\n        \"\"\"Helper function for finding the maximum word.\"\"\"\n        word1, word2 = \"\", \"\"\n        for word in word_list:\n            if word == \"\":\n                continue\n            if word1 == \"\" or compare_char(word1, word2):\n                word1 = word\n            elif word2 == \"\" or compare_char(word1, word2):\n                word2 = word\n\n        return word1\n\n    return find_max_helper(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # check that all the elements in the list are strings\n    assert all(isinstance(x, str) for x in words), \\\n        'Expected list of strings, but got %r' % words\n\n    # initialize max_length and max_index to be None\n    max_length = None\n    max_index = None\n\n    for index, word in enumerate(words):\n        # assign number of unique characters to be word length\n        length = len(word)\n        # if we have found the word with maximum number of unique characters\n        if max_length is None or length > max_length:\n            # assign this word as the current maximum\n            max_length = length\n            max_index = index\n    # return the word with maximum number of unique characters\n    return words[max_index]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    import itertools\n\n    def count_unique(word):\n        count = 0\n        for ch in word:\n            if ch not in itertools.count():\n                count += 1\n        return count\n\n    if not words:\n        return \"\"\n\n    max_val = None\n    max_pos = None\n    for i, word in enumerate(words):\n        val = count_unique(word)\n        if max_val is None or val > max_val:\n            max_val = val\n            max_pos = i\n\n    return words[max_pos]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return None\n    max_word = max(words, key=lambda word: len(set(word)))\n    max_word = sorted(words)[words.index(max_word)]\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if words == []:\n        return \"\"\n\n    words.sort()\n\n    for word in words:\n        if len(word) < len(find_max(words[words:])):\n            words.remove(word)\n\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max_function(word_list):\n        result = []\n        for word in word_list:\n            unique_chars = list(set(word))\n            if len(unique_chars) > len(result):\n                result = unique_chars\n        return result\n\n    #return find_max_function(words)\n    return max(find_max_function(words))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    data = [w.split() for w in words]\n    l = len(data[0])\n    for row in data:\n        if len(row)!= l:\n            raise Exception(\"row length must be equal\")\n    # get the maximum length of the word and maxl = max(maxl, len(row[0]))\n    maxl = 0\n    for row in data:\n        if len(row[0]) > maxl:\n            maxl = len(row[0])\n    res = \"\"\n    for row in data:\n        if len(row[0]) == maxl:\n            res = row[0]\n    if len(res) == 0:\n        return \" \".join(row[0] for row in data)\n    return res", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    # First sort words by length\n    words = sorted(words, key=len, reverse=True)\n\n    # Then do binary search to find index\n    # of the longest word\n    word = \"\"\n    length = 0\n    index = 0\n    for word in words:\n        if len(word) > length:\n            length = len(word)\n            word = word\n        index += 1\n    print(word)</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # start by sorting the list\n    words.sort()\n    # if we have an empty list, return None\n    if words == []:\n        return None\n    # otherwise get the first element of the list\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # If the list is empty\n    if not words:\n        return None\n    # Get the length of the longest word\n    length = len(max(words, key=len))\n\n    # Get the word with the longest length\n    max_word = words[length]\n\n    # Return the word if it has a unique character\n    if len(set(max_word)) == len(max_word):\n        return max_word\n    # Return empty string if the list has only one word\n    elif len(words) == 1:\n        return ''\n    # Check if the longest word is the only word in the list\n    elif length == len(words):\n        return max_word\n    # Return the word which comes first in lexicographical order\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    import collections\n    collections.Counter(words)\n    return max(words, key=collections.Counter.get)\n\nword_list = [\"aaaaaaa\", \"bb\", \"cc\", \"name\", \"of\", \"string\", \"name\", \"enam\", \"game\", \"aaaaaaa\", \"aaaaaaa\", \"bb\", \"cc\"]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def word_length(s):\n        \"\"\"Return the number of unique characters in the string.\"\"\"\n        if len(s) == 0:\n            return 0\n        else:\n            return len(set(s))\n\n    def length_difference(w1, w2):\n        \"\"\"Return the difference in number of unique characters between\n        the two words.\n        \"\"\"\n        return word_length(w1) - word_length(w2)\n\n    def lexicographical_compare(w1, w2):\n        \"\"\"Return the lexicographical comparison between two strings.\"\"\"\n        return w1 > w2\n\n    # Use helper functions\n    return max(words, key=length_difference) if words else ''", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(set(words))\n    sorted = sorted(words)\n    return sorted[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key = lambda x:len(set(x)))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    count = 0\n    for word in words:\n        if len(result) == 0 and len(word) > 0:\n            result = word\n        elif len(result) > 0 and len(word) > 0:\n            if len(result) >= len(word):\n                if len(result) == len(word):\n                    if result.count(result) == word.count(result):\n                        result = \"\"\n                        count = 0\n                else:\n                    if result.count(result) == word.count(result):\n                        count += 1\n                        result = word\n                    else:\n                        count += 1\n                        result = word\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return \"\"\n    else:\n        max_num = 0\n        max_word = \"\"\n        for word in words:\n            word_len = len(word)\n            if word_len > max_num:\n                max_word = word\n                max_num = word_len\n        return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    longest = \"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            longest = word\n            max_len = len(longest)\n    return longest", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = \"\"\n    for word in words:\n        if len(set(word)) > len(set(max_word)):\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_ = 0\n    max_word = None\n    for word in words:\n        if len(set(word)) > max_ and (max_word is None or len(set(max_word)) > len(set(word))):\n            max_ = len(set(word))\n            max_word = word\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = max(words, key=lambda word: len(set(word)))\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def number_of_unique_characters(string):\n        return sum(1 for c in string if c.isalpha())\n\n    return max(words, key=number_of_unique_characters) or None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    import string\n    def find_max2(words):\n        \"\"\"Write a function that accepts a list of strings.\n        The list contains different words. Return the word with maximum number\n        of unique characters. If multiple strings have maximum number of unique\n        characters, return the one which comes first in lexicographical order.\n\n        find_max2([\"name\", \"of\", \"string\"]) == \"string\"\n        find_max2([\"name\", \"enam\", \"game\"]) == \"enam\"\n        find_max2([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n        \"\"\"\n        max_words = []\n        max_len = 0\n        for word in words:\n            if len(set(word)) > max_len:\n                max_words.append(word)\n                max_len = len(set(word))\n        if len(max_words) > 0:\n            return max_words[0]\n        else:\n            return \"\"\n    words = [\"name\", \"of\", \"string\", \"name\", \"enam\", \"game\"]\n    print(find_max2(words))\n    # words = [\"aaaaaaa\", \"bb\", \"cc\"]\n    # print(find_max2(words))</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def c(word):\n        return sum([ord(letter) - ord(\"a\") + 1 for letter in word])\n\n    def find_max_ord(words):\n        if not words:\n            return \"\"\n        max_ord = 0\n        max_word = words[0]\n        for word in words:\n            if c(word) > max_ord:\n                max_ord = c(word)\n                max_word = word\n        return max_word\n\n    def find_max_uniq(words):\n        if not words:\n            return \"\"\n        max_uniq = 0\n        max_word = \"\"\n        for word in words:\n            if set(word) > set(max_word):\n                max_uniq = c(word)\n                max_word = word\n        return max_word\n\n    return find_max_ord(words) if len(words) > 1 else find_max_uniq(words)</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = max(map(len, words))\n    max_num = 1\n    max_word = \"\"\n    for word in words:\n        if len(word) == max_len:\n            if len(set(word)) == max_num:\n                max_num = len(set(word))\n                max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    \"\"\"\n    def find_max(words):\n        max_word = \"\"\n        max_size = 0\n        for word in words:\n            if len(word) > max_size:\n                max_size = len(word)\n                max_word = word\n\n        return max_word\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    return\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def count(word):\n        return sum(1 for x in word if x.isalpha())\n\n    words = list(set(words))\n    words.sort(key=count)\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # for each word, find the number of unique characters\n    unique_characters = [len(set(word)) for word in words]\n    # sort the numbers in descending order\n    unique_characters.sort(reverse=True)\n\n    # if the numbers are equal, return the word that comes first in lexicographical order\n    if unique_characters[0] == unique_characters[1]:\n        return words[unique_characters[0]-1]\n    # if the numbers are not equal, return the word with the maximum number of unique characters\n    else:\n        return words[unique_characters[0]]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = \"\"\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_word = word\n            max_length = len(word)\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    res = \"\"\n    l = len(words)\n    for i in range(l):\n        if len(res) == 0 or len(res) > len(words[i]):\n            res = words[i]\n    return res", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = None\n    for word in words:\n        if len(word) < len(max):\n            max = word\n        if len(word) == len(max):\n            if word < max:\n                max = word\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def count_chars(word):\n        return len(set(word)) - 1\n\n    return max(words, key = count_chars)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Above is the solution to the question. Here is what I tried:\n    # answer = []\n    # for word in words:\n    #     answer.append(len(set(word)))\n\n    # for a in answer:\n    #     if a > max(answer):\n    #         max(answer) = a\n\n    # print max(answer)\n    pass", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    max_word = \"\"\n\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    if not words:\n        return ''\n\n    words = sorted(words, key=len, reverse=True)\n\n    max_len = 0\n    max_word = ''\n\n    for word in words:\n        if len(word) > max_len:\n            max_word = word\n            max_len = len(word)\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # The maximum number of unique characters for a word is 26 (the number\n    # of upper and lower-case letters in the English alphabet), but we will\n    # return the maximum for all printable ASCII characters (32-126).\n\n    def count_uniq(word):\n        \"\"\"Count the number of unique characters in the given word.\"\"\"\n        return sum(1 for _ in word)\n\n    # Find the maximum length of a word.\n\n    words = [len(word) for word in words]\n    max_length = max(words)\n\n    # Loop through all the words.\n\n    for i in range(max_length):\n        # Iterate through each word and keep track of the maximum number of\n        # unique characters found so far.\n\n        max = 0\n        for word in words:\n            if count_uniq(word[:i]) > max:\n                max = count_uniq(word[:i])\n                max_word = word\n\n        # If the word with the maximum number of unique characters doesn't\n        # match the given word, then it's not the maximum we are looking for.\n\n        if max_word!= word:\n            return word\n\n    # If no word matches the given criteria, return the empty string.\n\n    return ''", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    res = []\n    for word in words:\n        if word in res:\n            continue\n        else:\n            res.append(word)\n\n    for word in words:\n        if word in res:\n            continue\n        else:\n            res.append(word)\n    res.sort()\n\n    max_word = res[0]\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_uc = words[0].count(unique_character)\n    max_word = words[0]\n    for word in words:\n        if word.count(unique_character) > max_uc:\n            max_uc = word.count(unique_character)\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_length = 0\n    max_string = \"\"\n\n    for string in words:\n        if len(string) > max_length:\n            max_length = len(string)\n            max_string = string\n\n    return max_string", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = sorted(words, key=len, reverse=True)\n    if len(words) == 0:\n        return \"\"\n\n    for word in words:\n        if len(word) <= len(words[0]):\n            return word\n\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # We will store a tuple (total, string) where string is the maximum word.\n\n    max_tuple = (0, \"\")\n\n    for word in words:\n        if len(set(word)) > max_tuple[0]:\n            max_tuple = (len(set(word)), word)\n\n    # Return the maximum word.\n    return max_tuple[1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    print(words)\n    result = ''\n    for word in words:\n        if len(result) == len(word):\n            result = word\n        elif len(result) < len(word):\n            result = word\n    print(result)\n\nfind_max(['aaaaaaa', 'bb', 'cc'])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    wordlist = []\n    for i in words:\n        wordlist.append(i)\n    return max(wordlist, key=lambda x: len(set(i)))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n\n    max_words = list()\n    for words in words:\n        max_words.append(\"\".join(sorted(set(words))))\n\n    # sort by number of unique character\n    max_words = sorted(max_words, key=lambda k: len(k))\n\n    # find the first max of the sorted list\n    max_words = max_words[0]\n\n    return max_words", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def max_occur(lst):\n        \"\"\"Find the maximum occurence in a list of strings.\"\"\"\n        max = 0\n        for i in lst:\n            if len(set(i)) > max:\n                max = len(set(i))\n        return max\n\n    def max_char(lst):\n        \"\"\"Find the maximum character occurrence in a list of strings.\"\"\"\n        max = 0\n        for i in lst:\n            if len(set(i)) == max:\n                max = max_char(i)\n        return max\n\n    return max_char(max_occur(words))\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    arr = [len(str(w).strip().lower()) for w in words]\n    arr = sorted(arr)\n    return words[arr.index(max(arr))]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_uniques = 0\n    max_word = None\n    for word in words:\n        if len(set(word)) > max_uniques:\n            max_uniques = len(set(word))\n            max_word = word\n    if max_word:\n        return max_word\n    else:\n        return None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for w in words:\n        if len(w) > max:\n            max = len(w)\n    return w", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def get_unique_char_count(word):\n        \"\"\"Return the number of unique characters in the word.\"\"\"\n\n        # Initialize a set to store unique characters\n        chars = set()\n\n        # Loop through all characters in the word\n        for i in range(len(word)):\n            # Add all characters to the set\n            chars.add(word[i])\n\n        # Return the number of unique characters\n        return len(chars)\n\n    # Loop through all words\n    for i in words:\n        # Get the number of unique characters\n        char_count = get_unique_char_count(i)\n\n        # If the current word has maximum number of unique characters\n        if char_count > max_char_count:\n            # Update max_char_count\n            max_char_count = char_count\n\n            # Update max_word\n            max_word = i\n\n    # Return the word with maximum number of unique characters\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    max_str = \"\"\n    for w in words:\n        num_chars = len(set(w))\n        if num_chars > max:\n            max = num_chars\n            max_str = w\n    return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def max_char(x):\n        # This is the function that we need to write. It should return\n        # the maximum number of unique characters in the given string x.\n        # We need to write this function by ourselves.\n\n        # Here we write some code to solve the problem, but it is\n        # commented out for now, as we need to understand what is the\n        # function that we need to write.\n        #\n        # The code that is commented out here is the code that\n        # we wrote earlier. We can use this to test the code that we\n        # write later.\n        #\n        # I will come back to this when we discuss about code that\n        # is commented out. This code is here so that you can see\n        # the code that we wrote earlier. You can use it to test the\n        # code that we write later. If you run it now, you will get an\n        # error. You will not be able to run the code as we did not\n        # write the function max_char yet.\n        #\n        # The function max_char is the function that we need to\n        # write. It should return the maximum number of unique\n        # characters in the given string x. We need to write this\n        # function by ourselves.", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find_max_2(words):\n        # Initialize max = 0\n        max = 0\n        for word in words:\n            if len(set(word)) > max:\n                max = len(set(word))\n        return words[max]\n\n    return find_max_2(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_count:\n            max_count = len(set(word))\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def max_unique(words):\n        max = \"\"\n        for w in words:\n            if len(set(w)) > len(set(max)):\n                max = w\n        return max\n\n    if len(words) == 0:\n        print(\"None\")\n\n    return max_unique(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return '' if words == [] else max(words, key=lambda word: len(set(word)))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Calculate number of unique characters in each word\n    # We use dict to count number of times each letter appears in each word\n    # and sort the words based on this number\n    words = sorted(words, key=lambda word: len(set(word)), reverse=True)\n\n    # We return the first one as per the sorted order\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Base case: Only one word.\n    if len(words) == 1:\n        return words[0]\n\n    # Consider the unique characters in all the words.\n    total_words = len(words)\n    unique_words = [sum(w.count(c) for c in w) for w in words]\n\n    # Choose the one with maximum unique characters and return it.\n    return max(unique_words, key=unique_words.__getitem__)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    if not words:\n        return \"\"\n    max = words[0]\n    for word in words:\n        if len(set(word)) > len(set(max)):\n            max = word\n    if max == words:\n        return max\n    return max[0] if words[0] == max else words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = \"\"\n    max_length = 0\n    for word in words:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n            word = word\n\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_length = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # define variable to keep track of number of unique characters\n    unique_character_count = 0\n    # define variable to keep track of maximum number of unique characters\n    max_unique_character_count = 0\n    # define variable to store the maximum string\n    max_string = \"\"\n    # iterate over each string\n    for string in words:\n        # if the number of unique characters is greater than the maximum count\n        # set the count to the current character count and the maximum string\n        # to the current string\n        if (len(set(string)) > unique_character_count):\n            unique_character_count = len(set(string))\n            max_unique_character_count = unique_character_count\n            max_string = string\n\n    return max_string", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def max_len(words):\n        if len(words) == 0:\n            return 0\n        else:\n            return max([len(w) for w in words])\n\n    words = sorted(words, key=len)\n\n    if len(words) == 0:\n        return \"\"\n    elif len(words) == 1:\n        return words[0]\n    else:\n        return words[(max_len(words) - 1)]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Remove duplicates in a list\n    seen = set()\n    word_list = list(set(words))\n\n    # We are storing the length of longest word\n    max_word_len = 0\n\n    # for each word\n    for word in word_list:\n        # If word is seen before, then ignore it.\n        if word in seen:\n            continue\n        # Keep track of length\n        len_word = len(word)\n        if len_word > max_word_len:\n            max_word_len = len_word\n            max_word = word\n        # record word seen\n        seen.add(word)\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    maximum_unique_character = \"\"\n    max_unique_character = 0\n\n    for word in words:\n        # getting the number of unique characters in the string\n        unique_character = len(set(word))\n\n        # comparing the length of the unique characters of the current word\n        # with the maximum length of unique characters found so far\n        if unique_character > max_unique_character:\n            maximum_unique_character = word\n            max_unique_character = unique_character\n\n    return maximum_unique_character", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    chars = set()\n    for word in words:\n        chars = chars.union(set(word))\n    return sorted(chars)[-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return \"\"\n\n    # Use collections.Counter() to compute the unique characters in a list\n    from collections import Counter\n    c = Counter(words)\n\n    # Use max() to find the max count and words with max count\n    return max((c, w) for w in words if c[w] == max(c))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Trying to think of something better\n    max = words[0]\n    for word in words[1:]:\n        if len(set(word)) > len(set(max)):\n            max = word\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # returns None if words is empty\n    if words == []:\n        return None\n\n    # create a set to hold the unique characters\n    set_words = set()\n\n    # use a for loop to iterate over the list and create a set of the words' characters\n    for word in words:\n        set_words = set_words.union(set(word))\n\n    # find the maximum number of characters in the set\n    max_size = len(str(max_words))\n\n    # if the maximum number is one, return the string\n    if max_size == 1:\n        return str(max_words)\n\n    # find the maximum number of characters in the word and the word itself\n    max_size_word = max([len(word) for word in words])\n    max_word = str(max_words)\n\n    # if the word with maximum number of characters is the maximum number of words, return it\n    if max_size_word == max_size:\n        return max_word\n\n    # find the word with maximum number of characters and use lexicographical order to return it\n    return min([max_word for max_word in words if len(max_word) == max_size], key=lambda word: word)</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    maxlen = -1\n    for word in words:\n        if len(word) > maxlen and len(set(word)) > len(set(maxlen)):\n            maxlen = len(word)\n\n    return maxlen", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_uniq_characters = {}\n    for word in words:\n        if word not in max_uniq_characters:\n            max_uniq_characters[word] = len(word)\n        else:\n            new_word = word\n            for i in xrange(max_uniq_characters[word]):\n                new_word += word[i]\n            if new_word in max_uniq_characters:\n                max_uniq_characters[word] = max_uniq_characters[new_word]\n            else:\n                max_uniq_characters[word] = len(new_word)\n    return max_uniq_characters.items()[0][0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def count(word):\n        return len(set(word))\n\n    def max_unique_character(words):\n        max_character = max([count(word) for word in words])\n        max_word = [word for word in words if count(word) == max_character]\n        return max_word[0]\n\n    return max_unique_character(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def num_of_unique_chars(word):\n        \"\"\"Write a helper function that accepts a string. Return the number\n        of unique characters in the string.\n\n        num_of_unique_chars(\"hello\") == 5\n        num_of_unique_chars(\"heelo\") == 4\n        \"\"\"\n        return len(set(word))\n\n    words = [word.lower() for word in words]\n    max_val = 0\n    max_word = \"\"\n    for word in words:\n        if num_of_unique_chars(word) > max_val:\n            max_val = num_of_unique_chars(word)\n            max_word = word\n\n    return max_word\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # do not know what this is\n    return \"aaaaaaa\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word_counts = {}\n    max_len = -1\n    max_count = -1\n    for word in words:\n        length = len(word)\n        count = 0\n        for character in word:\n            if character not in word_counts:\n                word_counts[character] = 0\n            else:\n                word_counts[character] += 1\n            count += 1\n        if length > max_len:\n            max_len = length\n            max_count = count\n        elif count > max_count:\n            max_len = length\n            max_count = count\n    return max_len, max_count, word_counts</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_words = []\n    max_letters = 0\n    for word in words:\n        letters = len(set(word))\n        if max_letters < letters:\n            max_letters = letters\n            max_words = [word]\n        elif letters == max_letters:\n            max_words.append(word)\n    if max_words == []:\n        return \" \"\n    elif len(max_words) == 1:\n        return max_words[0]\n    else:\n        return max_words[0] if max_words[0] < max_words[1] else max_words[1]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return ''\n    length = len(max(words, key=len))\n    result = ''\n    for word in words:\n        if len(word) == length:\n            result = word\n            break\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # better solution using defaultdict\n    # unique_words = defaultdict(list)\n    # for word in words:\n    #     unique_words[len(set(word))].append(word)\n    # return unique_words[len(set(words))].index(words[0]) + 1\n\n    return None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    length = 0\n    for word in words:\n        length += len(word)\n        if length > len(result):\n            result = word\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # noinspection PyShadowingBuiltins\n    def find_max_rec(words):\n        if len(words) == 0:\n            return None\n        return max(words, key=lambda word: len(set(word)))\n\n    return max(words, key=find_max_rec)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # this is the words with maximum number of unique characters\n    max_words = [\"\"]\n\n    # this is the index of that word in the words list\n    max_index = 0\n\n    for i in range(len(words)):\n        word = words[i]\n        # if the current word has more unique characters than the last word in\n        # max_words, then add the current word to the max_words and set the\n        # max_index to current index\n        if len(set(word)) > len(set(max_words[0])):\n            max_words.append(word)\n            max_index = i\n\n    # return the max word\n    return max_words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # return max([word for word in words if len(set(word)) == max([len(set(word)) for word in words])])\n    # return words[0]\n    # print(len(set(words[0])) > len(set(words[1])))\n    # print(words[0])\n    # print(words[1])\n    # print(words[2])\n    # return words[0]\n    # return max(words, key=len)\n    # return max(words, key=len)[0]\n    # return max(words, key=len)[words]\n    # return max(words, key=len)[0]\n    # return max(words, key=len)[1]\n    # return words[0]\n    return max(words, key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_words = []\n    for word in words:\n        n = len(set(word))\n        if n > len(max_words):\n            max_words = [word]\n        elif n == len(max_words[0]):\n            max_words.append(word)\n\n    return max(max_words, key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = set(words)\n    max_length = max([len(word) for word in words])\n    max_index = [i for i in range(len(words)) if words[i] == words[0] and len(words[i]) == max_length][0]\n    return words[max_index]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_chars = 0\n    max_str = \"\"\n    for s in words:\n        if len(s) > max_chars:\n            max_chars = len(s)\n            max_str = s\n    if max_chars == 0:\n        return max_str\n    else:\n        return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_words = []\n    max_count = 0\n    for word in words:\n        if len(set(word)) > max_count:\n            max_words = [word]\n            max_count = len(set(word))\n        elif len(set(word)) == max_count:\n            if word < max_words[0]:\n                max_words = [word]\n    if max_words == []:\n        return \"\"\n    return max_words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_list = []\n    max_list.append(0)\n    for word in words:\n        for i in word:\n            if i not in max_list:\n                max_list.append(i)\n    for i in max_list:\n        if len(i) > max_list[0]:\n            max_list[0] = len(i)\n    return max_list", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_num = 0\n    max_word = \"\"\n\n    for word in words:\n        word_length = len(word)\n        unique_letters = set(word)\n        total_letters = sum(1 for x in unique_letters)\n\n        if total_letters > max_num:\n            max_num = total_letters\n            max_word = word\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    word_list = [word.split(\"\") for word in words]\n    counter = Counter(word_list)\n    max_value = max(counter.values())\n    max_word = counter[max_value]\n\n    return max_word\n\nwords = [\"a\", \"ab\", \"abc\", \"abcde\", \"abcd\", \"abcd123\", \"abc\", \"abcd\", \"abcdef\"]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_count = 0\n    max_word = \"\"\n    for w in words:\n        if len(set(w)) > max_count:\n            max_count = len(set(w))\n            max_word = w\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=lambda x: len(list(set(x))))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)       # Turn list into tuple.\n    max = 0\n    max_key = ''\n    for word in words:\n        if len(set(word)) > max:\n            max = len(set(word))\n            max_key = word\n    if max == 0:\n        return ''\n    else:\n        return max_key", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    ans = \"\"\n    count = 0\n    for word in words:\n        if len(word)!= 0:\n            temp = word\n            count = 0\n            while temp!= \"\":\n                count += 1\n                temp = temp[1:]\n            if count > ans:\n                ans = word\n    return ans\n\nfor case in [\"name\", \"of\", \"string\"]:\n    print(case, find_max(case))\n\nfor case in [\"name\", \"enam\", \"game\"]:\n    print(case, find_max(case))\n\nfor case in [\"aaaaaaa\", \"bb\",\"cc\"]:\n    print(case, find_max(case))\n\nfor case in [\"aaaaaaa\", \"bbb\", \"cc\"]:\n    print(case, find_max(case))\n\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # +1: the maximum number of unique characters in a word\n    # +1: if a string starts with another string, it comes before it\n    # return -1: if no word is found\n    # print(-1)\n\n    # convert all strings to str\n    words = [str(x) for x in words]\n    # remove characters that occur more than once\n    words = [word for word in words if word.count(x) == 1 for x in word]\n    # print(words)\n\n    def _check(word):\n        if word:\n            return -1 if len(set(word)) > len(set(words[0])) else 1\n        else:\n            return -1\n    return max(words, key=_check)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_length = 0\n    max_word = \"\"\n    for w in words:\n        if len(w) > max_width:\n            max_word = w\n            max_length = len(w)\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # It's easy to write a working solution, but we need to think about\n    # the performance too. One way to do it is to keep a hash table with the\n    # number of unique characters in each string. Then iterate over the words\n    # and check if the number of unique characters in that word is greater\n    # than the current max. If not, don't increment the current max, since\n    # the value would be replaced anyway. However, this is not a good idea,\n    # since we would be replacing the max value with an invalid value. The\n    # solution below is a better way to do it.\n\n    # Note that we can use set as a data structure to maintain the uniqueness\n    # of characters. The time complexity of this approach is O(N), where N is\n    # the number of words. If the input was a file, then we could use the\n    # built-in file iterator to read the words line by line. The code below\n    # could be improved in various ways, like checking if the input is a\n    # file, and if not, print a proper error message.\n\n    unique_character_counts = {}\n    for word in words:\n        if word in unique_character_counts:\n            unique_character_counts[word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    temp = \"\"\n    max = 0\n    for word in words:\n        temp = \"\"\n        for char in word:\n            if char in temp:\n                temp += char\n            else:\n                temp = char\n        if len(temp) > max:\n            max = len(temp)\n    return words[words.index(max)]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    # using collections.Counter() to count the characters of the words\n    def find_max(words):\n        c = collections.Counter(''.join(word) for word in words)\n        return c.most_common(1)[0][0]\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # test cases are hard-coded in this method\n    return None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = ''\n    max_uniq_char = 0\n\n    for word in words:\n        if len(set(word)) > max_uniq_char:\n            max_uniq_char = len(set(word))\n            max_word = word\n\n    if max_word == '':\n        return ''\n    else:\n        return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # iterate over each word and check the number of unique characters\n    # store the result of each iteration in a dict\n    # the keys are the word and values are the number of unique characters\n    # sort the dict based on the value\n    # return the sorted value as the max value\n    # sort the dict based on the value\n    # return the sorted value as the max value\n    # print(f\"{max(d)}:{d[max(d)]}:{d.keys()}\")\n    d = {}\n    for i in words:\n        count = 0\n        for j in i:\n            if j not in d:\n                d[j] = 0\n            d[j] += 1\n            count += 1\n        d[i] = count\n    # print(d)\n    max_value = max(d)\n    max_key = max(d)\n    # print(f\"Max value = {max_value}, Max key = {max_key}\")\n    return max_key\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_chars = []\n    for word in words:\n        if len(set(word)) > len(max_chars):\n            max_chars = word\n\n    if max_chars:\n        return max_chars\n    else:\n        return None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_uniq_words = set()\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > len(max_uniq_words):\n            max_uniq_words = set(word)\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max(words):\n        if not words:\n            return \"\"\n        if len(words[0]) > len(words[1]):\n            return words[0]\n        else:\n            return words[1]\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = sorted(words, key=len, reverse=True)\n    max_chars = ''\n    for word in words:\n        if len(word) > max_chars:\n            max_chars = len(word)\n    return max_chars", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(set(words))\n\n    def find_max_util(words_left):\n        if not words_left:\n            return \"\", words_left\n\n        for i in range(len(words_left)):\n            if len(find_max_util(words_left[:i + 1]))[1] < len(words_left):\n                return find_max_util(words_left[:i + 1])[0], words_left[:i + 1]\n            elif len(find_max_util(words_left[:i + 1]))[1] == len(words_left):\n                if words_left[i] < words_left[i + 1]:\n                    return find_max_util(words_left[:i + 1])[0], words_left[:i + 1]\n        return find_max_util(words_left[:i + 1])[0], words_left[:i + 1]\n\n    return find_max_util(words)[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=lambda word: len(set(word))) if words else \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    words = list(set(words))\n    if len(words) == 0:\n        return \"\"\n    elif len(words) == 1:\n        return words[0]\n    for w in words:\n        if len(w) < len(result):\n            result = w\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # use max in a loop to compare each word with the max word so far\n    def find_max_word(words):\n        # make a copy of the list as words can be modified in the loop\n        words_copy = list(words)\n        max_word = \"\"\n        max_unique_characters = 0\n\n        for word in words_copy:\n            # increment the max_unique_characters by 1 for each unique char in word\n            unique_characters = set(word)\n            if len(unique_characters) > max_unique_characters:\n                max_word = word\n                max_unique_characters = len(unique_characters)\n\n        return max_word\n\n    return find_max_word(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word_list = list(words)\n    max_chars = word_list[0]\n    for word in word_list:\n        if len(set(word)) > len(set(max_chars)):\n            max_chars = word\n    return max_chars", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_l = 0\n    max_c = \"\"\n    for i in words:\n        c = len(set(i))\n        if c > max_c:\n            max_l = max(c, max_l)\n        if c == max_c:\n            if i < max_c:\n                max_l = max(c, max_l)\n    return max_l\n\nwords = [\"name\", \"of\", \"string\"]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    maxlen = 0\n    maxword = \"\"\n    for word in words:\n        if len(set(word)) > maxlen:\n            maxlen = len(set(word))\n            maxword = word\n    return maxword", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_characters = {}\n    for word in words:\n        max_characters[word] = max(list(set(word)), key = len)\n    max_word = max_characters[max(max_characters.keys(), key = len)]\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = \"\"\n    max_length = 0\n\n    for w in words:\n        if len(w) > max_length:\n            max_word = w\n            max_length = len(w)\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # write your code here\n    \"\"\"\n    :type words: List[str]\n    :rtype: str\n    \"\"\"\n    # your code here\n    # not allowed to use built-in max(), sorted(), sort(), any(), any(other\n    # built-in functions), etc\n\n    num_unique = {}\n    for word in words:\n        for char in word:\n            if char not in num_unique:\n                num_unique[char] = 1\n            else:\n                num_unique[char] += 1\n    max = 0\n    for word, unique in num_unique.items():\n        if unique > max:\n            max = unique\n            word = \"\"\n    return max, word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_uc = 0\n    max_word = \"\"\n    for w in words:\n        uc = Counter(w).most_common(1)[0][0]\n        if uc > max_uc:\n            max_uc = uc\n            max_word = w\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def _find_max(words, max_count):\n        if max_count == 0:\n            return \"\"\n        elif max_count == 1:\n            return words[0]\n        else:\n            count = 0\n            for word in words:\n                if len(word) >= max_count:\n                    if _find_max(words, max_count - len(word)) == word:\n                        count += 1\n            return _find_max(words, max_count) if count > 1 else word\n    return _find_max(words, 0)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = words[0]\n    for w in words[1:]:\n        if len(set(word)) == len(set(w)):\n            if word < w:\n                word = w\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    dictionary = dict()\n    for word in words:\n        dictionary[word] = word.split('')\n\n    for key, value in dictionary.iteritems():\n        if len(set(value)) == len(value):\n            max_value = key\n            break\n    return max_value", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return \"\"\n    max_chars = len(max(words, key=len))\n    max_count = max_chars\n    result = max(words, key=lambda word: len(set(word)))\n    if len(result) == max_chars:\n        return result\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # An O(n) solution\n    # BFS on the graph of every character\n    # Add edge from i to i+1\n    # Max path will be unique characters\n    return max([len(word) for word in words])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = sorted(words)\n    max_word = words[0]\n    max_chars = len(max_word)\n    for word in words[1:]:\n        if len(word) > max_chars:\n            max_chars = len(word)\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return \"\"\n    if not len(words) == len(set(words)):\n        return \"\"\n    max = words[0]\n    max_len = len(max)\n    for w in words:\n        if len(w) > max_len:\n            max = w\n            max_len = len(w)\n    if max_len == len(max):\n        return max\n    else:\n        return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    str_list = [\"\".join(x) for x in words]\n    uniq = {}\n    for i in range(len(str_list)):\n        uniq[str_list[i]] = 1\n    result = []\n    for i in range(len(str_list)):\n        if uniq[str_list[i]] == len(str_list[i]):\n            result.append(str_list[i])\n    return result[0] if len(result) == 1 else result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    max_word = \"\"\n    for i in words:\n        chars = len(set(i))\n        if chars > max:\n            max = chars\n            max_word = i\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def count_chars(s):\n        \"\"\"Return a dictionary with key as character and value as number of\n        times that character is present in the string.\n        \"\"\"\n\n        counts = {}\n        for char in s:\n            if char in counts:\n                counts[char] += 1\n            else:\n                counts[char] = 1\n        return counts\n\n    def count_unique_char(s):\n        \"\"\"Return a dictionary with key as character and value as number of\n        times that character is unique in the string.\n        \"\"\"\n\n        counts = {}\n        for char in s:\n            if char in counts:\n                counts[char] += 1\n            else:\n                counts[char] = 1\n        return counts\n\n    def max_unqiue(strings):\n        \"\"\"Return the word with maximum number of unique characters.\n        \"\"\"\n\n        max_count = max([count_chars(s) for s in strings], key=lambda s: count_chars(s))\n        max_unique = max([count_unique_char(s) for s in strings], key=lambda s: count_unique_char(s))\n        max_unqiue = [max_unique[key] for key in max_unique]\n\n        return max_unqiue\n\n    return max_unqiue(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word_list = list(words)\n    word_list.sort()\n    max_char = \"\"\n    word = \"\"\n    for word in word_list:\n        if len(max_char) < len(word):\n            max_char = word\n        if len(word) == len(max_char):\n            if max_char > word:\n                word = max_char\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    pass", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = sorted(set(words))\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = \"\"\n    max = 0\n    # Initialise max variable\n    # start the first element\n    for i in words:\n        # Loop over elements\n        for j in i:\n            # Loop over elements in the current element\n            if j not in word:\n                # If j is not in the current element, add it to word\n                word += j\n                # Increment max if j is in word\n                max += 1\n            else:\n                # Else, remove j from word\n                word = word.replace(j, \"\")\n                # If j is in word, reset max to 0\n                max = 0\n    # Return max and the word\n    return max, word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def count(word):\n        \"\"\"Return the count of unique characters in word.\"\"\"\n        s = 0\n        for i in word:\n            if i not in s:\n                s += 1\n        return s\n\n    def check(word, m):\n        \"\"\"Check if the word has at least m unique characters.\"\"\"\n        return count(word) >= m\n\n    if not words:\n        return \"\"\n    words = sorted(set(words), key=len, reverse=True)\n    for word in words:\n        if check(word, len(words)):\n            return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def check(word):\n        return len(set(word)) == len(word)\n\n    max = None\n    for word in words:\n        if not check(word):\n            continue\n        if max is None or len(set(word)) > len(max):\n            max = word\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    res = \"\"\n    l = []\n    for i in words:\n        l.append(len(set(i)))\n\n    i = max(l)\n    for j in l:\n        if j == i:\n            res = \"\".join(i)\n\n    return res", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    words = list(set(words))\n    answer = \"\"\n    for x in words:\n        if len(set(x)) > len(set(answer)):\n            answer = x\n    if len(set(answer)) == len(set(words[0])):\n        return answer\n    else:\n        return answer.split()[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = []\n    count = 0\n    for i in words:\n        if len(i) > len(word):\n            word = i\n            count = 0\n        if len(i) == len(word):\n            count += 1\n    if len(word) == 0:\n        return \"\"\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    dictionary = {}\n    for word in words:\n        word = \"\".join(dictionary.get(ch, ch) for ch in word)\n        dictionary[word] = dictionary.get(word, 0) + 1\n\n    return max(dictionary.items(), key=lambda x:x[1])[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(list(map(len, words)), key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # word = \"\"\n    max_unique = 0\n    max_index = -1\n    for i in range(len(words)):\n        for j in range(len(words[i])):\n            if(words[j].count(words[i][j]) > max_unique):\n                max_unique = words[j].count(words[i][j])\n                max_index = i\n\n    return words[max_index]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    #TODO\n    pass", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    count = 0\n    word = ''\n    for item in words:\n        if len(item) > len(word):\n            word = item\n        if len(item) < len(word) and item not in word:\n            word = item\n        if len(word) >= count:\n            count = len(word)\n    if word:\n        return word\n    else:\n        return ''", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def _find_max(words):\n        words = list(set(words))\n        count = []\n        for word in words:\n            count.append(len(word))\n        return max(count) if count else \"\"\n\n    if __name__ == \"__main__\":\n        print(_find_max([\"name\", \"of\", \"string\"]))\n        print(_find_max([\"name\", \"enam\", \"game\"]))\n        print(_find_max([\"aaaaaaa\", \"bb\",\"cc\"]))\n\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word_len = []\n    for word in words:\n        word_len.append(len(word))\n\n    max_index = word_len.index(max(word_len))\n    max_word = words[max_index]\n\n    unique_char = []\n    for i in range(0, len(words[max_index])):\n        unique_char.append(set([words[max_index][i] for _ in range(len(words[max_index]))]))\n\n    return max_word, unique_char", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    import string\n    result = \"\"\n    for word in words:\n        if len(word) > len(result):\n            result = word\n\n    print result\n    return result\n\nwords = [\"name\", \"of\", \"string\", \"nam\", \"of\", \"string\", \"name\", \"enam\", \"game\"]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    length = len(words[0])\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_word = word\n            max_len = len(word)\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    letters = {}\n    for word in words:\n        for letter in word:\n            if letter not in letters:\n                letters[letter] = 1\n            else:\n                letters[letter] += 1\n    # find max letter\n    max_length = 0\n    max_char = \"\"\n    for letter in letters:\n        if letters[letter] > max_length:\n            max_length = letters[letter]\n            max_char = letter\n    # sort by lexicographical order\n    # return the max letter\n    return max_char", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    pass", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_chars = 0\n    max_words = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_words = word\n    return max_words", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def can_replace(word):\n        \"\"\"Check whether `word` can be replaced with any of `words`.\n        Return `True` if so, otherwise `False`.\n        \"\"\"\n        for each_word in words:\n            if each_word == word:\n                return False\n            elif all(char in each_word for char in word):\n                return True\n        return False\n\n    # Find the first word that can be replaced by any other word.\n    while True:\n        word = words[0]\n        if can_replace(word):\n            words.pop(0)\n            continue\n        break\n    # If we can not replace any word, then the answer is the first word.\n    if len(words) == 0:\n        return words[0]\n    # Calculate the number of unique characters in the first word.\n    # Then find the next word that can be replaced by the rest of the words.\n    # Calculate the number of unique characters in the new word.\n    # Keep replacing the next word with the rest of the words.\n    # And keep the track of the maximum number of unique characters.\n    max_unqiue = 0\n    word_with_max_unique = None\n    while words:\n        next_word = words[0]\n        max_unique = len(next_word)\n        if can_replace(next_word):\n            words.pop"]]