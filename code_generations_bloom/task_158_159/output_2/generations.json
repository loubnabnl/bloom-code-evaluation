[["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # write your code here\n    #return max(words, key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return \"\"\n    elif len(words) == 1:\n        return words[0]\n    else:\n        max_word = \"\"\n        for word in words:\n            if len(word) > len(max_word):\n                max_word = word\n        return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    if not words:\n        return \"\"\n\n    # dictionary to store the count of unique characters for each word\n    counts = {}\n    for word in words:\n        # count the number of unique characters in the word\n        char_count = 0\n        for character in word:\n            if character not in counts:\n                counts[character] = 1\n            else:\n                counts[character] += 1\n            char_count += 1\n        # store the maximum number of unique characters in the word\n        if char_count > max(counts):\n            max_count = char_count\n            max_word = word\n\n    # return the word with maximum number of unique characters\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=lambda word: len(set(word)))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return \"\"\n    if len(words) == 1:\n        return words[0]\n    max_len = max([len(word) for word in words])\n    max_str = max([word for word in words if len(word) == max_len])\n    return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=lambda word: len(list(set(word))))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def max_unique(words):\n        max_len = 0\n        max_word = \"\"\n        for word in words:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_word = word\n        return max_word\n\n    def max_unique2(words):\n        max_len = 0\n        max_word = \"\"\n        for word in words:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_word = word\n        return max_word\n\n    def max_unique3(words):\n        max_len = 0\n        max_word = \"\"\n        for word in words:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_word = word\n        return max_word\n\n    def max_unique4(words):\n        max_len = 0\n        max_word = \"\"\n        for word in words:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_word = word\n        return max_word\n\n    def max_unique5(words):\n        max_len = 0\n        max_word = \"\"\n        for word in words:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_word = word\n        return max_word\n\n    print", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # create a dict for counting unique chars\n    counts = {}\n    for word in words:\n        for char in word:\n            if char in counts:\n                counts[char] += 1\n            else:\n                counts[char] = 1\n    # sort the dict by value, and get the first element\n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)[0][0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = \"\"\n    max_word_len = 0\n\n    for word in words:\n        word_len = len(word)\n        if word_len > max_word_len:\n            max_word_len = word_len\n            max_word = word\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    # Use a set to store unique characters.\n    # Use a list to store all the words.\n    # Use a for loop to iterate over the list.\n    # Use a for loop to iterate over the characters in a word.\n    # Use if condition to check if the character is present in the set.\n    # If it is present in the set, increment the counter.\n    # If not present in the set, add it to the set and increment the counter.\n\n    # Your code goes here\n    words = [\"name\", \"of\", \"string\", \"nam\", \"enam\", \"game\", \"aaaaaaa\", \"bb\", \"cc\"]\n    max_characters = 0\n    max_word = \"\"\n    for word in words:\n        char_counter = 0\n        for character in word:\n            if character in \"abcdefghijklmnopqrstuvwxyz\":\n                char_counter += 1\n        if char_counter > max_characters:\n            max_characters = char_counter\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    # https://leetcode.com/problems/find-max/\n\n    def find_max(words):\n        if len(words) == 0:\n            return \"\"\n        else:\n            max_len = 0\n            max_word = \"\"\n            for word in words:\n                word_len = len(word)\n                if word_len > max_len:\n                    max_len = word_len\n                    max_word = word\n            return max_word\n\n    return find_max(words)</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # write your code here\n    # print(words)\n    max = 0\n    for word in words:\n        if len(set(word)) > max:\n            max = len(set(word))\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    max_str = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_str = word\n    return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def compare(a, b):\n        \"\"\"Compare two strings and return 1 if a > b else 0\"\"\"\n        return cmp(len(a), len(b))\n\n    return max(words, key=lambda w: len(set(w)))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    word = \"\"\n    max_unique = 0\n    for word in words:\n        if len(set(word)) > max_unique:\n            word = \"\"\n            max_unique = len(set(word))\n\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # your code here\n    max = ''\n    max_len = 0\n    for i in words:\n        if len(i) > max_len:\n            max_len = len(i)\n            max = i\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = sorted(words)\n    max_length = 0\n    max_string = \"\"\n    for w in words:\n        if len(w) > max_length:\n            max_string = w\n            max_length = len(w)\n    return max_string", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = \"\"\n    max_len = 0\n    for word in words:\n        word_len = len(word)\n        if word_len > max_len:\n            max_len = word_len\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    return max(words, key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(set(words))\n    if len(words) == 0:\n        return \"\"\n    else:\n        return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    max = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > len(set(max_word)):\n            max_word = word\n            max = len(set(word))\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max_helper(words, max_len):\n        if max_len == len(words[0]):\n            return words[0]\n        else:\n            return max([find_max_helper(words, max_len+1) for word in words if len(word) <= max_len])\n\n    return find_max_helper(words, 0)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    word_list = list(set(words))\n    word_list = sorted(word_list, key = len, reverse = True)\n    return word_list[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def count_unique_char(word):\n        return sum(1 for char in word if char not in set(word))\n\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        if count_unique_char(word) > max_count:\n            max_count = count_unique_char(word)\n            max_word = word\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    max_str = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_str = word\n    return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    max_characters = []\n    for word in words:\n        if len(set(word)) > max:\n            max = len(set(word))\n            max_characters = [word]\n        elif len(set(word)) == max:\n            max_characters.append(word)\n\n    max_characters.sort()\n    return max_characters[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = \"\"\n    max_count = 0\n    for word in words:\n        word = word.lower()\n        word = word.split(\" \")\n        for char in word:\n            if char not in max_word:\n                max_word += char\n                max_count += 1\n\n    if max_count == 0:\n        return \"\"\n    else:\n        return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    import collections\n\n    def unique_letters(word):\n        return len(set(word))\n\n    return max(words, key=unique_letters)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n\n    # Sort list of words in lexicographical order\n    words.sort()\n\n    # Get length of each word\n    word_length = [len(word) for word in words]\n\n    # Get number of unique characters in each word\n    unique_characters = [sum(word[i]!= word[i + 1] for i in range(len(word) - 1)) for word in words]\n\n    # Get index of the word with maximum number of unique characters\n    max_index = unique_characters.index(max(unique_characters))\n\n    # Return the word with maximum number of unique characters\n    return words[max_index]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find_max1(words):\n        max_word = \"\"\n        max_unique_chars = 0\n        for word in words:\n            if len(set(word)) > max_unique_chars:\n                max_unique_chars = len(set(word))\n                max_word = word\n        return max_word\n\n    def find_max2(words):\n        max_word = \"\"\n        max_unique_chars = 0\n        for word in words:\n            if len(set(word)) == max_unique_chars:\n                max_word = word\n        return max_word\n\n    def find_max3(words):\n        max_word = \"\"\n        max_unique_chars = 0\n        for word in words:\n            if len(set(word)) == max_unique_chars:\n                max_word = word\n            elif len(set(word)) > max_unique_chars:\n                max_unique_chars = len(set(word))\n                max_word = word\n        return max_word\n\n    def find_max4(words):\n        max_word = \"\"\n        max_unique_chars = 0\n        for word in words:\n            if len(set(word)) == max_unique_chars:\n                max_word = word\n            elif len(set(word)) > max_unique_chars:\n                max_unique_chars", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def is_unique(s):\n        \"\"\"Check if a string contains only unique characters\"\"\"\n        return all(ch in s for ch in set(s))\n\n    return max(words, key=lambda x: len(set(x) - set(x.upper())) if is_unique(x) else 0)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # write your code here\n    def unique_char_count(word):\n        \"\"\"Return the number of unique characters in a string.\"\"\"\n        return len(set(word))\n\n    def max_char_count(words):\n        \"\"\"Return the word with maximum number of unique characters.\"\"\"\n        return max(words, key=unique_char_count)\n\n    return max_char_count(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def count_unique(s):\n        count = 0\n        for c in s:\n            if c not in s:\n                count += 1\n        return count\n\n    max_chars = 0\n    max_string = \"\"\n    for s in words:\n        if count_unique(s) > max_chars:\n            max_string = s\n            max_chars = count_unique(s)\n\n    return max_string", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def get_number_of_unique_chars(word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"\n        return sum(1 for _ in word)\n\n    def get_max_word(words):\n        max_word = None\n        max_unique_chars = 0\n        for word in words:\n            if get_number_of_unique_chars(word) > max_unique_chars:\n                max_unique_chars = get_number_of_unique_chars(word)\n                max_word = word\n        return max_word\n\n    return get_max_word(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def count_unique(word):\n        \"\"\"counts the number of unique characters in the word\"\"\"\n        return len(set(word))\n    return max(words, key=count_unique)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = \"\"\n    max_len = 0\n\n    for word in words:\n        if len(word) > max_len:\n            max_word = word\n            max_len = len(word)\n\n    for word in words:\n        if len(word) == max_len:\n            if word > max_word:\n                max_word = word\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_count = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_count:\n            max_count = len(set(word))\n            max_word = word\n    if max_word == \"\":\n        return max_count\n    else:\n        return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = \"\"\n    max_characters = 0\n    for word in words:\n        if len(set(word)) > max_characters:\n            max_word = word\n            max_characters = len(set(word))\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    pass", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_characters = []\n    for word in words:\n        length = len(word)\n        if length not in max_characters:\n            max_characters.append(length)\n\n    max_characters.sort()\n    max_word = \"\"\n    for i in max_characters:\n        if len(max_word) < i:\n            max_word = word\n            break\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    # print(words)\n    max_word = \"\"\n    max_size = 0\n    for word in words:\n        if len(word) > max_size:\n            max_size = len(word)\n            max_word = word\n    # print(max_word)\n    for word in words:\n        if len(word) == max_size:\n            if word < max_word:\n                max_word = word\n    # print(max_word)\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = sorted(words)\n    max_word = \"\"\n    max_chars = 0\n    for word in words:\n        if len(word) > max_chars:\n            max_word = word\n            max_chars = len(word)\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def word_length(word):\n        return len(set(word))\n\n    def find_max_lex(words):\n        max_length = 0\n        max_word = None\n        for word in words:\n            if word_length(word) > max_length:\n                max_word = word\n                max_length = word_length(word)\n        return max_word\n\n    def find_max_set(words):\n        max_length = 0\n        max_word = None\n        for word in words:\n            if len(set(word)) > max_length:\n                max_word = word\n                max_length = len(set(word))\n        return max_word\n\n    return find_max_lex(words) or find_max_set(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    max_char = \"\"\n    for word in words:\n        if len(set(word)) > max:\n            max = len(set(word))\n            max_char = word\n\n    return max_char", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # your code here\n    max_len = 0\n    max_str = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_str = word\n    return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=lambda word: len(set(word)))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def unique_letters(word):\n        \"\"\"Write a function that accepts a string and returns the number of\n        unique characters in it.\n\n        unique_letters(\"abcd\") == 4\n        unique_letters(\"abbcd\") == 3\n        unique_letters(\"abcbcd\") == 3\n        \"\"\"\n        return sum(1 for char in word if char not in word)\n\n    def find_max_helper(words):\n        max_count = 0\n        max_word = \"\"\n        for word in words:\n            count = unique_letters(word)\n            if count > max_count:\n                max_count = count\n                max_word = word\n        return max_word\n\n    return find_max_helper(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = \"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return \"\".join(sorted(set(x.lower() for x in words)))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(map(str.lower, words))\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        if len(set(word)) > max_unique_chars:\n            max_unique_chars = len(set(word))\n            max_word = word\n\n    if max_unique_chars == 0:\n        return \"\"\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    return max(words, key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # write code here", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = \"\"\n    max = 0\n    for word in words:\n        if len(set(word)) > len(set(word)):\n            word = word\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def count_unique(word):\n        \"\"\"Return the number of unique characters in a string.\n        word: string to be checked\n        \"\"\"\n        return len(set(word))\n\n    def compare(a, b):\n        \"\"\"Compare two strings and return -1 if a < b, 1 if a > b and 0 if a == b.\n        a: string to be compared\n        b: string to be compared\n        \"\"\"\n        return cmp(a, b)\n\n    return max(words, key=count_unique) if len(words) > 0 else \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # write your code here\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    def find_max(words):\n        if not words:\n            return \"\"\n        max = len(words[0])\n        max_word = words[0]\n        for w in words:\n            if len(w) > max:\n                max = len(w)\n                max_word = w\n        return max_word\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def compare(a, b):\n        return len(set(a)) - len(set(b))\n\n    return sorted(words, key=compare)[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Note: The solution below is not the most efficient one. But the question\n    # does not specify any time or space constraints. So, I have written\n    # a simple solution. Feel free to optimize it further if you want.\n\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_count:\n            max_count = len(set(word))\n            max_word = word\n\n    if max_count > 0:\n        return max_word\n    else:\n        return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = \"\"\n    max_char = 0\n    for word in words:\n        if len(word) == 0:\n            continue\n        if len(word) > max_char:\n            max_word = word\n            max_char = len(word)\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    max_str = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_str = word\n    return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n\n    max = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) == max:\n            if len(word) > max:\n                max_word = word\n        else:\n            max_word = word\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_char = \"\"\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > len(set(max_char)):\n            max_char = word\n            max_word = word\n    if len(max_char) == 0:\n        return \"\"\n    else:\n        return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Get the list of unique characters in the list of strings\n    unique_chars = set([char for word in words for char in word])\n    # Count the number of times each unique character occurs\n    counts = dict([(char, 0) for char in unique_chars])\n    for word in words:\n        for char in word:\n            counts[char] += 1\n    # Find the word with maximum number of unique characters\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        if counts[word] > max_count:\n            max_count = counts[word]\n            max_word = word\n    return max_word\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find_max_helper(words):\n        if len(words) == 0:\n            return \"\"\n        max_word = words[0]\n        for word in words[1:]:\n            if len(word) > len(max_word):\n                max_word = word\n        return max_word\n\n    return find_max_helper(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word_list = list(words)\n    max_len = len(max(word_list, key=len))\n    max_word = \"\"\n    for word in word_list:\n        if len(word) == max_len:\n            if word == max_word:\n                return max_word\n            else:\n                max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    import collections\n    def get_max(words):\n        if len(words) == 0:\n            return \"\"\n        else:\n            max_word = words[0]\n            max_count = 0\n            for word in words[1:]:\n                if len(word) > len(max_word):\n                    max_word = word\n                if len(word) == len(max_word):\n                    if len(collections.Counter(word).keys()) > len(collections.Counter(max_word).keys()):\n                        max_word = word\n                if len(word) < len(max_word):\n                    return max_word\n            return max_word\n    return get_max(words)</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find_max1(words):\n        max = 0\n        max_index = 0\n        for i in range(len(words)):\n            if len(words[i]) > max:\n                max = len(words[i])\n                max_index = i\n        return words[max_index]\n\n    def find_max2(words):\n        max = 0\n        max_index = 0\n        for i in range(len(words)):\n            if len(set(words[i])) > max:\n                max = len(set(words[i]))\n                max_index = i\n        return words[max_index]\n\n    return max(find_max1(words), find_max2(words))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    max_str = None\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_str = word\n    return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(map(str.lower, words))\n    max_word = \"\"\n    max_unique = 0\n    for word in words:\n        if len(word) == 0:\n            continue\n        unique = len(set(word))\n        if unique > max_unique:\n            max_word = word\n            max_unique = unique\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    result = \"\"\n    max = 0\n    for word in words:\n        if len(result) < len(word):\n            result = word\n        elif len(result) == len(word):\n            if len(set(result)) < len(set(word)):\n                result = word\n        elif len(result) > len(word):\n            pass\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max = \"\"\n    for word in words:\n        if len(set(word)) > len(set(max)):\n            max = word\n\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    if max_len == 0:\n        return \"\"\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_unique_characters = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_unique_characters:\n            max_unique_characters = len(set(word))\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max(words):\n        max_word = \"\"\n        max_length = 0\n        for word in words:\n            if len(word) > max_length:\n                max_word = word\n                max_length = len(word)\n        return max_word\n\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def unique_char_count(word):\n        \"\"\"Return the number of unique characters in the word.\"\"\"\n        return len(set(word))\n\n    def compare(a, b):\n        \"\"\"Return True if a comes first in lexicographical order than b.\"\"\"\n        return a[0] < b[0]\n\n    words.sort(key=lambda x: unique_char_count(x), reverse=True)\n    return words[0] if len(words) == 1 else words[1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = \"\"\n    max_count = 0\n    for w in words:\n        if len(set(w)) > max_count:\n            max_count = len(set(w))\n            word = w\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    def max_len(lst):\n        max_len = 0\n        for i in lst:\n            if len(i) > max_len:\n                max_len = len(i)\n        return max_len\n    return max_len(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def count_unique(word):\n        chars = set()\n        for c in word:\n            chars.add(c)\n        return len(chars)\n\n    words = sorted(words, key=count_unique, reverse=True)\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = \"\"\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_word = word\n            max_length = len(word)\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max_helper(words):\n        \"\"\"Write a helper function that accepts a list of strings. Return the\n        word with maximum number of unique characters.\"\"\"\n        max = \"\"\n        for word in words:\n            if len(max) < len(word):\n                max = word\n        return max\n\n    return find_max_helper(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=lambda x: len(set(x)) - len(x))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    maxlen = 0\n    maxword = \"\"\n    for word in words:\n        if len(word) > maxlen:\n            maxlen = len(word)\n            maxword = word\n    return maxword", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = \"\"\n    max_unique = 0\n    for word in words:\n        if len(word) > max_unique:\n            max_word = word\n            max_unique = len(word)\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_count = 0\n    max_word = ''\n    for word in words:\n        if len(set(word)) > max_count:\n            max_count = len(set(word))\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(set(word)) > max:\n            max = len(set(word))\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # A set is a collection that cannot contain duplicate elements\n    # A string is a collection of characters\n    # Each character in a string is a unique element\n    # The number of unique elements is the length of the string\n    # The length of a string is the number of characters in it\n    # A character is an element of a string\n    # A character is a character in a string\n    # A character is an element of a set\n    # A set is a collection of unique elements\n    # The number of unique elements in a set is the size of the set\n    # A set is empty if it has no elements\n    # The size of a set is the number of elements in it\n    # The number of elements in a set is the number of elements in the set\n    # The number of elements in a set is the number of elements in the set\n    # The number of elements in a set is the number of elements in the set\n    # The number of elements in a set is the number of elements in the set\n    # The number of elements in a set is the number of elements in the set\n    # The number of elements in a set is the number of elements in the set\n    # The number of elements in a set is the number of elements", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find_max(words):\n        max_len = 0\n        max_word = \"\"\n        for word in words:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_word = word\n        return max_word\n\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # your code here\n    max_word = \"\"\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_word = word\n            max_length = len(word)\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # write your code here\n    max_length = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_length:\n            max_word = word\n            max_length = len(word)\n    if max_length == 0:\n        return \"\"\n    else:\n        return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Solution 1\n    # words = sorted(words, key=len, reverse=True)\n    # return words[0]\n\n    # Solution 2\n    # words = sorted(words, key=lambda word: len(set(word)), reverse=True)\n    # return words[0]\n\n    # Solution 3\n    words = sorted(words, key=len, reverse=True)\n    max_length = len(words[0])\n    max_word = words[0]\n    for word in words[1:]:\n        if len(word) > max_length:\n            max_word = word\n            max_length = len(word)\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # sort the words\n    words.sort()\n\n    # find the last word\n    last_word = words[-1]\n\n    # find the last char\n    last_char = last_word[-1]\n\n    # find the max length\n    max_len = len(last_word)\n\n    # find the max length with the last char removed\n    if len(last_word) > 1:\n        max_len = len(last_word[:-1])\n\n    # find the max length with the last char removed\n    if len(last_word) > 2:\n        max_len = len(last_word[:-2])\n\n    # find the max length with the last char removed\n    if len(last_word) > 3:\n        max_len = len(last_word[:-3])\n\n    # find the max length with the last char removed\n    if len(last_word) > 4:\n        max_len = len(last_word[:-4])\n\n    # find the max length with the last char removed\n    if len(last_word) > 5:\n        max_len = len(last_word[:-5])\n\n    # find the max length with the last char removed\n    if len(last_word) > 6:\n        max_len = len(last_word[:-6])\n\n    # find the max length with the last char removed\n    if len(last_word) > 7:\n        max_len =", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def helper(word):\n        if len(set(word)) > len(set(max(words, key=len))):\n            return word\n        else:\n            return \"\"\n    return max(words, key=helper)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Solution 1\n    def find_max_1(words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        max_chars = 0\n        max_word = \"\"\n        for word in words:\n            if len(set(word)) > max_chars:\n                max_chars = len(set(word))\n                max_word = word\n        return max_word\n\n    # Solution 2\n    def find_max_2(words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        max_chars = 0\n        max_word = \"\"\n        for word in words:\n            if len(set(word)) > max_chars:\n                max_word = word\n                max_chars = len(set(word))\n        return max_word\n\n    # Solution 3\n    def find_max_3(words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        max_chars = 0\n        max_word = \"\"\n        for word in words:\n            if len(set(word)) > max_chars:\n                max_word = word\n                max_chars = len(set(word))\n        return max_word\n\n    # Solution 4\n    def find_max_4(words):\n        \"\"\"\n        :type words:", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    max_word = None\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find_max_naive(words):\n        max_word = \"\"\n        max_len = 0\n        for word in words:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_word = word\n        return max_word\n\n    def find_max_hash(words):\n        hash_max = {}\n        for word in words:\n            hash_max[word] = 1\n        max_word = \"\"\n        max_len = 0\n        for word in hash_max:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_word = word\n        return max_word\n\n    def find_max_set(words):\n        max_word = \"\"\n        max_len = 0\n        for word in words:\n            if len(set(word)) > max_len:\n                max_len = len(set(word))\n                max_word = word\n        return max_word\n\n    def find_max_sorted(words):\n        max_word = \"\"\n        max_len = 0\n        for word in words:\n            if len(sorted(word)) > max_len:\n                max_len = len(sorted(word))\n                max_word = word\n        return max_word\n\n    return find_max_naive(words) if words else \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def unique_chars(word):\n        return sum(1 for c in word if c not in set(word))\n\n    def max_word(words):\n        return max(words, key=unique_chars)\n\n    return max_word(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # write your code here\n    max = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max:\n            max = len(set(word))\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Solution 1\n    # def find_max(words):\n    #     max_len = 0\n    #     max_str = None\n    #     for word in words:\n    #         if len(word) > max_len:\n    #             max_len = len(word)\n    #             max_str = word\n    #     return max_str\n\n    # Solution 2\n    def find_max(words):\n        max_len = 0\n        max_str = None\n        for word in words:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_str = word\n        return max_str\n\n    # Solution 3\n    def find_max(words):\n        max_len = 0\n        max_str = None\n        for word in words:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_str = word\n        return max_str\n\n    # Solution 4\n    def find_max(words):\n        max_len = 0\n        max_str = None\n        for word in words:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_str = word\n        return max_str\n\n    # Solution 5\n    def find_max(words):\n        max_len = 0\n        max_str = None\n        for word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def check_unique_char(word):\n        \"\"\"Returns the number of unique characters in the given word.\"\"\"\n        return len(set(word))\n\n    def find_max_lex(words):\n        \"\"\"Returns the word with maximum number of unique characters.\"\"\"\n        max_uniq = 0\n        max_word = \"\"\n        for word in words:\n            if check_unique_char(word) > max_uniq:\n                max_uniq = check_unique_char(word)\n                max_word = word\n        return max_word\n\n    return find_max_lex(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def word_count(word):\n        return len(set(word))\n\n    return max(words, key=word_count)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Your code here\n    return max(words, key=lambda w: len(set(w)))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Complete this function\n    def find_max(words):\n        max_char = 0\n        max_word = \"\"\n        for word in words:\n            if len(word) > max_char:\n                max_word = word\n                max_char = len(word)\n        return max_word\n\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_ = \"\"\n    max_uniq = 0\n\n    for word in words:\n        if len(set(word)) > max_uniq:\n            max_ = word\n            max_uniq = len(set(word))\n\n    return max_", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return ''\n\n    max_len = 0\n    max_str = ''\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_str = word\n\n    if max_len == 0:\n        return ''\n\n    return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    return max(words, key = len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    max_str = \"\"\n\n    for word in words:\n        word_len = len(word)\n        if word_len > max_len:\n            max_len = word_len\n            max_str = word\n\n    return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    max = 0\n    max_string = \"\"\n    for word in words:\n        if len(set(word)) > max:\n            max = len(set(word))\n            max_string = word\n\n    return max_string", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    def max(word):\n        max_char = \"\"\n        max_count = 0\n        for char in word:\n            if char not in max_char:\n                max_char += char\n                max_count += 1\n        return max_char, max_count\n\n    max_char, max_count = max(words)\n    for word in words:\n        if word!= max(words)[0]:\n            if max_count == word.count(max_char):\n                return max(words)[0]\n            else:\n                return word\n    return max(words)[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len, reverse=True)\n\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_chars = \"\"\n    max_chars_len = 0\n\n    for word in words:\n        if len(word) > max_chars_len:\n            max_chars = word\n            max_chars_len = len(word)\n\n    return max_chars", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_words = []\n    for word in words:\n        if len(set(word)) > len(set(max_words)):\n            max_words = [word]\n        elif len(set(word)) == len(set(max_words)):\n            max_words.append(word)\n\n    if len(max_words) == 0:\n        return \"\"\n    else:\n        return max_words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return \"\"\n    if len(words) == 1:\n        return words[0]\n\n    max_unique = 0\n    for word in words:\n        word = list(word)\n        if len(set(word)) > max_unique:\n            max_unique = len(set(word))\n\n    return words[words.index(max_unique)]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def is_alpha(char):\n        \"\"\"Checks if the given character is a letter.\"\"\"\n        return char.isalpha()\n\n    def unique_chars(word):\n        \"\"\"Returns the number of unique characters in the word.\"\"\"\n        return len(set(word))\n\n    def max_chars(words):\n        \"\"\"Returns the maximum number of unique characters among the words.\"\"\"\n        max_chars = 0\n        for word in words:\n            if unique_chars(word) > max_chars:\n                max_chars = unique_chars(word)\n        return max_chars\n\n    # Function body\n    return max(words, key=lambda word: unique_chars(word))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # write your code here\n    max_unique_character = 0\n    max_unique_character_word = \"\"\n    for word in words:\n        if len(set(word)) > max_unique_character:\n            max_unique_character = len(set(word))\n            max_unique_character_word = word\n\n    return max_unique_character_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # This function uses set to count the unique characters in each string\n    # and returns the string with maximum number of unique characters\n    # The order of the string is not considered\n    def find_max(words):\n        max_word = \"\"\n        max_count = 0\n        for word in words:\n            word_count = len(set(word))\n            if word_count > max_count:\n                max_count = word_count\n                max_word = word\n        return max_word\n\n    # This function returns the string with maximum number of unique characters\n    # if multiple strings have the same number of unique characters, it returns\n    # the one which comes first in lexicographical order\n    def find_max2(words):\n        max_word = \"\"\n        max_count = 0\n        for word in words:\n            word_count = len(set(word))\n            if word_count == max_count:\n                word = sorted(word)\n                if word[0] < word[1]:\n                    max_word = word[0]\n                else:\n                    max_word = word[1]\n        return max_word\n\n    print(find_max([\"name\", \"of\", \"string\"]))\n    print(find_max([\"name\", \"enam\", \"game\"]))\n    print(find_max([\"aaaaaaa\", \"bb\",\"cc\"]))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def unique_character_count(word):\n        \"\"\"Return the number of unique characters in the string.\"\"\"\n        return len(set(word))\n\n    def max_word(words):\n        \"\"\"Return the word with maximum number of unique characters.\"\"\"\n        max_unique_character = 0\n        max_word = \"\"\n        for word in words:\n            if unique_character_count(word) > max_unique_character:\n                max_unique_character = unique_character_count(word)\n                max_word = word\n        return max_word\n\n    if len(words) == 0:\n        return \"\"\n    else:\n        return max_word(words)\n\nwords = [\"name\", \"of\", \"string\"]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # return the longest string\n    maxlen = 0\n    for w in words:\n        if len(w) > maxlen:\n            maxlen = len(w)\n    return max(words, key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=lambda word: len(set(word)))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return \"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        len_ = len(word)\n        if len_ > max_len:\n            max_len = len_\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    for word in words:\n        if len(result) == 0 or len(result) < len(word):\n            result = word\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    return max(words, key=lambda x: len(set(x)))[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = \"\"\n    max_len = 0\n    for word in words:\n        word_len = len(word)\n        if word_len > max_len:\n            max_word = word\n            max_len = word_len\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_length = 0\n    max_length_word = \"\"\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_length_word = word\n    return max_length_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=lambda x: len(set(x)))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # return max(set([len(s) for s in words]), key=len)\n    # return max(set([len(s) for s in words]), key=lambda x:len(x))\n\n    # return max(set([len(s) for s in words]), key=lambda x:len(x))\n    # return max(set([len(s) for s in words]), key=len)\n\n    # return max(set([len(s) for s in words]), key=len)\n    # return max(set([len(s) for s in words]), key=len)\n\n    # return max(set([len(s) for s in words]), key=len)\n    # return max(set([len(s) for s in words]), key=len)\n\n    # return max(set([len(s) for s in words]), key=len)\n    # return max(set([len(s) for s in words]), key=len)\n\n    # return max(set([len(s) for s in words]), key=len)\n    # return max(set([len(s) for s in words]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # write your code here\n    words = sorted(words, key=len, reverse=True)\n    for word in words:\n        if len(set(word)) > len(set(words[0])):\n            return word\n        else:\n            return ''", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # \u5b57\u5178\u5b58\u50a8\u5df2\u7ecf\u51fa\u73b0\u7684\u5b57\u7b26\n    dict = {}\n    # \u904d\u5386\u5217\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\n    for word in words:\n        # \u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u8be5\u5b57\u7b26\u5728\u5b57\u5178\u4e2d\u5b58\u5728\uff0c\u5219\u8fd4\u56de0\uff0c\u5426\u5219\u8fd4\u56de1\n        count = 0\n        for ch in word:\n            if ch in dict:\n                count += 0\n            else:\n                count += 1\n        # \u5982\u679c\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u8be5\u5b57\u7b26\uff0c\u5219\u5c06\u8be5\u5b57\u7b26\u6dfb\u52a0\u5230\u5b57\u5178\u4e2d\uff0c\u5e76\u8fd4\u56de\u5bf9\u5e94\u7684\u8ba1\u6570\n        if count > len(dict):\n            dict[ch] = count\n        else:\n            continue\n    # \u904d\u5386\u5b57\u5178\uff0c\u627e\u5230\u6700\u5927\u503c\n    max_count = 0\n    for ch in dict:\n        if dict[ch] > max_count:\n            max_count = dict[ch]\n    # \u8fd4\u56de\u5b57\u5178\u4e2d\u6700\u5927\u503c\u5bf9\u5e94\u7684\u5b57\u7b26\n    return dict[max_count]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def count_unique(w):\n        \"\"\"Return the number of unique characters in the word w.\"\"\"\n        return len(set(w))\n\n    words = list(set(words))\n    return max(words, key=count_unique)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return \"\"\n\n    max_length = 0\n    max_word = \"\"\n    for word in words:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n            max_word = word\n\n    if max_word == \"\":\n        return \"\"\n    else:\n        return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_word = \"\"\n    max_chars = 0\n\n    for word in words:\n        if len(max_word) == 0 or len(word) > len(max_word):\n            max_word = word\n            max_chars = len(word)\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max_char(word):\n        \"\"\"Accepts a string. Returns the number of unique characters in it.\"\"\"\n        return len(set(word))\n\n    def compare(x, y):\n        \"\"\"Accepts two strings. Returns -1 if x < y, 0 if x == y, 1 if x > y.\"\"\"\n        return cmp(x, y)\n\n    words.sort(compare)\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def _find_max(words):\n        if not words:\n            return \"\"\n        max_len = max(len(word) for word in words)\n        max_word = words[0]\n        for word in words[1:]:\n            if len(word) > max_len:\n                max_word = word\n                max_len = len(word)\n        return max_word\n\n    return _find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def lexicographical_order(a, b):\n        \"\"\"Return True if a comes first in lexicographical order.\"\"\"\n        return a.lower() < b.lower()\n\n    def find_max_by_length(words):\n        \"\"\"Return the word with maximum length.\"\"\"\n        max_length = 0\n        max_word = \"\"\n        for word in words:\n            if len(word) > max_length:\n                max_length = len(word)\n                max_word = word\n        return max_word\n\n    def find_max_by_unique_characters(words):\n        \"\"\"Return the word with maximum number of unique characters.\"\"\"\n        max_unique_character = 0\n        max_word = \"\"\n        for word in words:\n            unique_character = 0\n            for character in word:\n                if character not in words:\n                    unique_character += 1\n            if unique_character > max_unique_character:\n                max_unique_character = unique_character\n                max_word = word\n        return max_word\n\n    return find_max_by_length(words) if len(words) == 1 else find_max_by_unique_characters(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Complete this function\n    # Use a set to store unique characters\n    # Use a list to store words\n    # Use a dictionary to store number of unique characters\n    # Use max function to find the maximum number of unique characters\n    # Use sort function to sort the list of words\n\n    # Explanation:\n    # A set can be used to store unique characters in a word. A list can be\n    # used to store words. A dictionary can be used to store the number of\n    # unique characters in a word. The max function can be used to find the\n    # maximum number of unique characters in a word. The sort function can be\n    # used to sort the list of words.\n\n    # Example:\n    # s = set(\"abcdefghijklmnopqrstuvwxyz\")\n    # l = [\"a\",\"aa\",\"b\",\"bb\"]\n    # d = dict(zip(l, range(len(l))))\n    # max(d.values()) == 2\n    # max(d.keys()) == \"b\"\n\n    return \"abc\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max_inner(words):\n        if not words:\n            return \"\"\n        max_length = 0\n        for word in words:\n            if len(word) > max_length:\n                max_length = len(word)\n        return max_length\n\n    return max(map(find_max_inner, words))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    max = 0\n    for word in words:\n        chars = set(word)\n        if len(chars) > max:\n            max = len(chars)\n            result = word\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # your code here\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Solution 1\n    # words = [\"aaaaaaa\", \"bb\",\"cc\"]\n    # max_len = 0\n    # max_word = \"\"\n    # for word in words:\n    #     if len(word) > max_len:\n    #         max_len = len(word)\n    #         max_word = word\n    # return max_word\n    # Solution 2\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    if len(words) == 0:\n        return ''\n    else:\n        max_count = 0\n        max_word = words[0]\n        for word in words:\n            if len(set(word)) > len(set(max_word)):\n                max_word = word\n                max_count = len(set(word))\n        return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # add each word to a set to remove duplicates\n    # convert set to list\n    # sort the list of words\n    # get the first element of the sorted list\n    # return the first element\n    return sorted(set(words))[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # build a dictionary to count the number of unique characters\n    unique_char_dict = {}\n    for word in words:\n        for char in word:\n            if char not in unique_char_dict:\n                unique_char_dict[char] = 1\n            else:\n                unique_char_dict[char] += 1\n\n    # get the maximum number of unique characters\n    max_unique_char = max(unique_char_dict.values())\n\n    # get the corresponding word\n    max_word = max(words, key=lambda word: len(word))\n\n    # check if the maximum number of unique characters is equal to the length\n    # of the word. If yes, return the word. Else, return an empty string\n    if len(max_word) == max_unique_char:\n        return max_word\n    else:\n        return \"\"\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return None\n    max = 0\n    for word in words:\n        if len(set(word)) > max:\n            max = len(set(word))\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Initialize a dictionary to hold the unique characters for each string\n    char_count = {}\n    # Initialize a dictionary to hold the count of each character\n    char_count_count = {}\n\n    for word in words:\n        for char in word:\n            # If the character is not in the dictionary, add it\n            if char not in char_count:\n                char_count[char] = 1\n                char_count_count[char] = 1\n            # If the character is in the dictionary, add 1 to the count\n            else:\n                char_count[char] += 1\n                char_count_count[char] += 1\n\n    # Initialize a dictionary to hold the characters and their counts\n    char_count_dict = {}\n    # Initialize a dictionary to hold the strings and their counts\n    char_count_string_dict = {}\n\n    # Iterate through the dictionary to find the word with maximum unique characters\n    for char in char_count:\n        # If the current character is not in the dictionary, add it\n        if char not in char_count_dict:\n            char_count_dict[char] = char_count_count[char]\n            char_count_string_dict[char] = char\n        # If the current character is in the dictionary, add the count of the character\n        else:\n            char_count_dict[char] += char_count_count", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # To check if the word is valid or not\n    # def is_valid(word):\n    #     \"\"\"\n    #     Check if the word is valid or not\n    #     \"\"\"\n    #     for c in word:\n    #         if c not in string.ascii_letters:\n    #             return False\n    #     return True\n    #\n    # if __name__ == '__main__':\n    #     print(is_valid(\"abc\"))\n    #     print(is_valid(\"abcd\"))\n\n    def is_valid(word):\n        \"\"\"\n        Check if the word is valid or not\n        \"\"\"\n        for c in word:\n            if c not in string.ascii_letters:\n                return False\n        return True\n\n    words = [\n        \"name\",\n        \"of\",\n        \"string\"\n    ]\n\n    print(find_max(words))\n\n    words = [\n        \"name\",\n        \"enam\",\n        \"game\"\n    ]\n\n    print(find_max(words))\n\n    words = [\n        \"aaaaaaa\",\n        \"bb\",\n        \"cc\"\n    ]\n\n    print(find_max(words))\n\n\n\n\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_chars = 0\n    max_str = None\n    for word in words:\n        word_len = len(word)\n        if word_len > max_chars:\n            max_chars = word_len\n            max_str = word\n    return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=lambda x: len(set(x)))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # write your code here\n    if words == []:\n        return \"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    max_word = words[0]\n    for word in words:\n        if len(word) == max_len:\n            if word < max_word:\n                max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=lambda word: len(set(word)))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    pass", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    words = list(words)\n    word_with_max = \"\"\n    max_num_unique_character = 0\n    for word in words:\n        num_unique_character = 0\n        for char in word:\n            if char not in word_with_max:\n                num_unique_character += 1\n        if num_unique_character > max_num_unique_character:\n            max_num_unique_character = num_unique_character\n            word_with_max = word\n\n    if word_with_max == \"\":\n        return \"\"\n    else:\n        return word_with_max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    # if the list is empty return \"\"\n    if len(words) == 0:\n        return \"\"\n    # create a list of unique characters\n    unique_characters = set(\"\".join(words))\n    # create a list of words with their counts\n    word_count = [(word, len(set(word))) for word in words]\n    # sort the list by the count\n    word_count = sorted(word_count, key=lambda x: x[1], reverse=True)\n    # print the list\n    print(word_count)\n    # return the first element of the list\n    return word_count[0][0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(map(str.lower, words))\n\n    def get_count(word):\n        \"\"\"Return the count of unique characters in the word.\"\"\"\n        return len(set(word))\n\n    def get_max(words):\n        \"\"\"Return the maximum count of unique characters.\"\"\"\n        max = 0\n        for word in words:\n            if get_count(word) > max:\n                max = get_count(word)\n        return max\n\n    return max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    import collections\n\n    def count_unique_chars(word):\n        # Count the number of unique characters in a word\n        unique_chars = collections.Counter(word)\n        return len(unique_chars.keys())\n\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    def find_max2(words):\n        max = 0\n        for i in words:\n            if i.count(i) > max:\n                max = i.count(i)\n        return max\n\n    return find_max2(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max_helper(words):\n        # sort the list in lexicographical order\n        # find the first word with maximum number of unique characters\n        max_word = ''\n        max_unique_chars = 0\n        for word in sorted(words):\n            if len(set(word)) > max_unique_chars:\n                max_word = word\n                max_unique_chars = len(set(word))\n        return max_word\n\n    return find_max_helper(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # write code here\n    def find_max(words):\n        \"\"\"Write a function that accepts a list of strings.\n        The list contains different words. Return the word with maximum number\n        of unique characters. If multiple strings have maximum number of unique\n        characters, return the one which comes first in lexicographical order.\n\n        find_max([\"name\", \"of\", \"string\"]) == \"string\"\n        find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n        find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n        \"\"\"\n        # write code here\n        pass", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max(words):\n        max_length = 0\n        max_word = \"\"\n        for word in words:\n            if len(word) > max_length:\n                max_word = word\n                max_length = len(word)\n        return max_word\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_ = \"\"\n    max_count = 0\n    for word in words:\n        if len(word) > max_count:\n            max_ = word\n            max_count = len(word)\n    return max_", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for i in words:\n        if len(set(i)) > max:\n            max = len(set(i))\n\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    import re\n    max_word = \"\"\n    max_characters = 0\n    for word in words:\n        if len(re.findall(\"[a-z]\", word)) > max_characters:\n            max_word = word\n            max_characters = len(re.findall(\"[a-z]\", word))\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def sort_func(x):\n        return len(set(x))\n\n    return sorted(words, key=sort_func)[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find_max(words):\n        maxlen = 0\n        maxword = \"\"\n        for word in words:\n            if len(word) > maxlen:\n                maxlen = len(word)\n                maxword = word\n        return maxword\n\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_length = 0\n    max_word = \"\"\n\n    for word in words:\n        if len(word) > max_length:\n            max_word = word\n            max_length = len(word)\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    import re\n    import string\n\n    def unique(string):\n        \"\"\"Return a set of all unique characters in a string.\"\"\"\n        unique = set()\n        for ch in string:\n            if ch not in unique:\n                unique.add(ch)\n        return unique\n\n    def max_uniques(words):\n        \"\"\"Return the maximum number of unique characters in a list of strings.\"\"\"\n        max_uniques = 0\n        for word in words:\n            uniques = unique(word)\n            if len(uniques) > max_uniques:\n                max_uniques = len(uniques)\n        return max_uniques\n\n    def max_word(words):\n        \"\"\"Return the word with maximum number of unique characters in a list of strings.\"\"\"\n        max_word = \"\"\n        for word in words:\n            uniques = unique(word)\n            if len(uniques) > len(max_word):\n                max_word = word\n        return max_word\n\n    def sorted_words(words):\n        \"\"\"Return the list of strings sorted in lexicographical order.\"\"\"\n        return sorted(words, key=str.lower)\n\n    return max_word(sorted_words(words))</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def count_unique(words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        unique_letters = set()\n        for word in words:\n            for letter in word:\n                if letter not in unique_letters:\n                    unique_letters.add(letter)\n        return len(unique_letters)\n\n    if not words:\n        return \"\"\n\n    word = words[0]\n    if len(word) > count_unique(words):\n        return word\n    else:\n        return find_max(words[1:])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    max_str = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_str = word\n    return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_length = max([len(word) for word in words])\n    max_uniques = 0\n    for word in words:\n        if len(word) == max_length;\n            if len(set(word)) > max_uniques:\n                max_uniques = len(set(word))\n    return words[words.index(max(words, key=len))]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    pass", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(map(str.lower, words))\n    max_c = 0\n    max_word = \"\"\n    for word in words:\n        c = len(set(word))\n        if c > max_c:\n            max_c = c\n            max_word = word\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    import re\n    import collections\n    import itertools\n    def _count_chars(word):\n        return collections.Counter(word)\n\n    def _sorted_unique_chars(word):\n        return sorted(set(itertools.chain(*[_count_chars(sub) for sub in word])))\n\n    def _count_unique_chars(words):\n        return [_count_chars(word) for word in words]\n\n    def _sorted_unique_chars_(words):\n        return [_sorted_unique_chars(word) for word in words]\n\n    def _sorted_unique_chars_(words):\n        return [_sorted_unique_chars(word) for word in words]\n\n    def _sorted_unique_chars_(words):\n        return [_sorted_unique_chars(word) for word in words]\n\n    def _sorted_unique_chars_(words):\n        return [_sorted_unique_chars(word) for word in words]\n\n    def _sorted_unique_chars_(words):\n        return [_sorted_unique_chars(word) for word in words]\n\n    def _sorted_unique_chars_(words):\n        return [_sorted_unique_chars(word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    max_str = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_str = word\n    return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max_rec(words, max_val, max_word):\n        for word in words:\n            if len(set(word)) > max_val:\n                max_val = len(set(word))\n                max_word = word\n        return max_word\n\n    if not words:\n        return \"\"\n\n    max_word = find_max_rec(words, 0, \"\")\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Solution 1\n    # Use a dictionary to store the number of unique characters in each word.\n    # Return the word with maximum number of unique characters.\n    # The number of unique characters of each word is stored as the value of the key.\n    # If multiple words have the same number of unique characters, return the one which comes first in lexicographical order.\n    # Solution 2\n    # Use a dictionary to store the number of unique characters in each word.\n    # Return the word with maximum number of unique characters.\n    # The number of unique characters of each word is stored as the key of the dictionary.\n    # If multiple words have the same number of unique characters, return the one which comes first in lexicographical order.\n    # Solution 3\n    # Use a dictionary to store the number of unique characters in each word.\n    # Return the word with maximum number of unique characters.\n    # The number of unique characters of each word is stored as the key of the dictionary.\n    # If multiple words have the same number of unique characters, return the one which comes first in lexicographical order.\n    # Solution 4\n    # Use a dictionary to store the number of unique characters in each word.\n    # Return the word with maximum number of unique characters.\n    # The number of unique characters of each word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = ''\n    # Initialise dictionary to store number of unique characters\n    # in each string.\n    # Dictionary keys are strings and values are number of unique characters.\n    d = {}\n    for i in words:\n        # Split string to get each character\n        # and store it in a list.\n        l = i.split()\n        # Iterate over each character in the list and increment\n        # the count of unique characters by 1.\n        for j in l:\n            # If character is not present in dictionary,\n            # add it to dictionary with count 1.\n            if j not in d:\n                d[j] = 1\n            else:\n                # If character is already present in dictionary,\n                # increment the count by 1.\n                d[j] += 1\n\n    # Iterate over dictionary and find the maximum count.\n    for i in d:\n        # If maximum count is less than current count,\n        # update maximum count.\n        if d[i] > result and i!= result:\n            result = i\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # your code here\n    # you can use any method to solve this problem\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_num = 0\n    max_str = \"\"\n    for word in words:\n        num = 0\n        for char in word:\n            if char in set(word):\n                num += 1\n        if num > max_num:\n            max_num = num\n            max_str = word\n    return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def count_unique(word):\n        return len(set(word))\n\n    def find_max_lexicographical(words):\n        max_len = 0\n        max_word = \"\"\n        for word in words:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_word = word\n        return max_word\n\n    def find_max_unique(words):\n        max_len = 0\n        max_word = \"\"\n        for word in words:\n            if count_unique(word) > max_len:\n                max_len = count_unique(word)\n                max_word = word\n        return max_word\n\n    if len(words) == 0:\n        return \"\"\n    else:\n        return find_max_lexicographical(words) if len(words) == 1 else find_max_unique(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=lambda word: len(set(word)))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Write your code here\n    max_unique = 0\n    max_word = \"\"\n    for i in words:\n        if len(set(i)) > max_unique:\n            max_unique = len(set(i))\n            max_word = i\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # check for empty list\n    if not words:\n        return ''\n\n    # get the length of each word\n    word_length = [len(w) for w in words]\n    # get the unique characters for each word\n    word_uniq = [list(set(w)) for w in words]\n    # get the unique characters count for each word\n    word_uniq_count = [len(uniq) for uniq in word_uniq]\n\n    # get the max unique characters count of all the words\n    max_unique_count = max(word_uniq_count)\n\n    # get the word with max unique characters count\n    max_unique_word = [w for w in words if word_uniq_count[w] == max_unique_count]\n\n    # if multiple words have max unique characters count, get the one\n    # that comes first in lexicographical order\n    if len(max_unique_word) > 1:\n        return max(max_unique_word, key=lambda w: word_length[w])\n\n    # if only one word has max unique characters count, return it\n    elif len(max_unique_word) == 1:\n        return max_unique_word[0]\n\n    # if no word has max unique characters count, return empty string\n    else:\n        return ''", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_characters = 0\n\n    for word in words:\n        if len(set(word)) > max_unique_characters:\n            max_unique_characters = len(set(word))\n            max_word = word\n\n    if max_unique_characters == 0:\n        return \"\"\n    else:\n        return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_char = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_char:\n            max_word = word\n            max_char = len(set(word))\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def max_unique(words):\n        words = sorted(words, key=len)\n        for word in words:\n            if len(set(word)) > len(set(words[0])):\n                return word\n        return words[0]\n\n    return max_unique(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def count_unique(word):\n        \"\"\"Return the number of unique characters in a string.\"\"\"\n        return len(set(word))\n\n    def find_max2(words):\n        \"\"\"Return the word with maximum number of unique characters.\"\"\"\n        max_value = 0\n        max_word = \"\"\n        for word in words:\n            if count_unique(word) > max_value:\n                max_value = count_unique(word)\n                max_word = word\n\n        return max_word\n\n    if __name__ == '__main__':\n        # Test.\n        print(find_max([\"name\", \"of\", \"string\"]))\n        print(find_max([\"name\", \"enam\", \"game\"]))\n        print(find_max([\"aaaaaaa\", \"bb\",\"cc\"]))\n\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_unique_char(word):\n        \"\"\"Accept a word and return the number of unique characters in it.\"\"\"\n        unique_char = 0\n        for i in word:\n            if word.count(i) == 1:\n                unique_char += 1\n        return unique_char\n\n    def find_unique_char_max(words):\n        \"\"\"Accept a list of strings and return the string with maximum number\n        of unique characters.\"\"\"\n        max_unique_char = 0\n        max_word = \"\"\n        for i in words:\n            if find_unique_char(i) > max_unique_char:\n                max_unique_char = find_unique_char(i)\n                max_word = i\n        return max_word\n\n    return find_unique_char_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def check_max(words):\n        max_word = \"\"\n        max_num_unique = 0\n        for word in words:\n            if len(set(word)) > max_num_unique:\n                max_num_unique = len(set(word))\n                max_word = word\n        return max_word\n\n    return check_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_word = word\n            max_chars = len(set(word))\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = \"\"\n    max_word = \"\"\n    max_count = 0\n    for w in words:\n        if len(set(w)) > max_count:\n            max_count = len(set(w))\n            max_word = w\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return \"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    if max_word == \"\":\n        return \"\"\n    for word in words:\n        if len(word) == max_len:\n            if word > max_word:\n                max_word = word\n    return max_word"]]