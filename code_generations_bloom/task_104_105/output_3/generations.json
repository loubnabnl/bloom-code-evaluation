[["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # write your code here\n    result = []\n    for n in x:\n        if n % 2 == 0:\n            continue\n        result.append(n)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = [int(i) for i in str(x)]\n    x = sorted(x)\n    def check_odd(x):\n        if len(x) == 1 or x[0] % 2 == 0:\n            return False\n        return True\n    return [x for x in x if check_odd(x)]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # returns a list of all elements that hasn't any even digit\n    def odds_generator(x):\n        for item in x:\n            while(item % 10 == 0):\n                item /= 10\n            yield item\n    \n    return sorted(list(odds_generator(x)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    list1 = sorted(list(set(str(x))))\n    for i in list1:\n        if i % 10!= 0:\n            return list1", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(x for x in x if all(d % 2!= 0 for d in str(x)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    for i in x:\n        if i % 10 > 5:\n            i = i - i % 10\n    return sorted(x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    res = []\n    for a in x:\n        if int(a) % 2 == 0:\n            continue\n        res.append(a)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    n = len(x)\n    if n < 1:\n        return []\n    d = []\n    for i in range(n):\n        for j in range(10):\n            if not x[i] % 10 % 2 == 0:\n                d.append(x[i] * 10**j)\n    return sorted(d)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    result = sorted(x)\n    for i in range(len(x) - 1, 0, -1):\n        if x[i] % 2 == 0:\n            result = [x[i - 1], x[i]] + result\n            break\n    return result\n\"\"\"\nInput: x = [1, 4, 15, 16, 1]\nOutput: [1, 4, 15, 16]\n\nInput: x = [1, 10, 9, 10]\nOutput: [1, 9, 10]\n\nInput: x = [1, 8, 4, 10]\nOutput: [1, 4, 8, 10]\n\nInput: x = [4, 10, 9, 10]\nOutput: []\n\nInput: x = [2, 3, 1, 1, 3]\nOutput: []\n\nInput: x = [1, 8, 4, 10, 23, 23]\nOutput: [1, 4, 8, 10, 23]\n\nInput: x = [1, 10, 9, 10, 20]\nOutput: [1, 10, 9, 10, 20]\n\nInput: x = [1, 2, 3, 4, 5, 6]\nOutput: [1, 2, 3, 4, 5, 6]\n\n\"\"\"\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    d = {}\n    l = []\n    for i in x:\n        if i in d:\n            if d[i] % 2 == 0:\n                continue\n        l.append(i)\n        d[i] = 1\n    l.sort()\n    return l", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    result = []\n    for x in x:\n        for digit in str(x):\n            if digit not in [2, 4, 6, 8, 0]:\n                result.append(x)\n                break\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for num in x:\n        for d in str(num):\n            if d not in digits and int(d) % 2 == 0:\n                digits.append(d)\n    digits = sorted(digits)\n    return digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if (not (i % 10).is_even()):\n            result.append(i)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    d = set(int(digit) for digit in str(x))\n    d.discard(0)\n    return sorted(list(d))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    candidates = []\n    for i in x:\n        candidates.append(i)\n        if sum(map(lambda x: int(str(x)[-1]), str(i))) % 2 == 0:\n            del candidates[-1]\n    return sorted(candidates)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    if x[0].is_even():\n        return []\n    res = []\n    for i in x:\n        res.append(i)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [int(digit) for digit in str(x) if digit.isdigit()]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    for i in x:\n        if all(d % 2 == 0 for d in str(i)):\n            continue\n        res.append(i)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # remove even digits\n    n = []\n    for x in x:\n        n.append(int(x))\n    n = [x for x in n if x % 2!= 0]\n    # sort and remove duplicates\n    return sorted(list(set(n)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    l = len(x)\n    if l == 0:\n        return []\n    res = []\n    for i in range(1, l):\n        if x[i] % 2!= 0:\n            res.append(x[i])\n        else:\n            break\n    if res:\n        return sorted(res)\n    return []", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n\n    u = []\n    for y in x:\n        u.append([dig for dig in str(y) if dig!= '2'])\n\n    return sorted(set(u))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(x for x in x if not any(y % 2 == 0 for y in x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x: return []\n\n    x = list(set(x))  # make sure the input is unique\n    digits = []\n    for number in x:\n        if number % 10!= 0:\n            digits.append(number)\n\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    odd_digits = [int(x // 10**d) for d in range(1, len(str(x)))]\n    return sorted(odd_digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    a = []\n    while x:\n        for i in range(len(x)):\n            if int(x[i]) % 2 == 0:\n                x[i] = str(int(x[i]) / 2)\n                break\n        else:\n            a.append(x.pop(0))\n    return a", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    unique_list = []\n    for x in x:\n        if (x % 10):\n            unique_list.append(x)\n        else:\n            return []\n    return unique_list", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def num_to_digits(num):\n        \"\"\"Convert a number to a list of digits.\"\"\"\n        digits = []\n        while num!= 0:\n            digits.append(num % 10)\n            num /= 10\n        return digits\n    \n    # convert to a list of digits\n    nums = [num_to_digits(i) for i in x]\n    \n    # add even digits to result\n    res = []\n    for i in xrange(len(nums)):\n        if any(i % 2 == j % 2 for j in nums[i]):\n            continue\n        res.append(nums[i][0])\n    \n    # sort\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    return [i for i in x if sum(map(int, str(i))) % 2 == 0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    is_even = lambda x: int(x/2)%2 == 0\n    return list(filter(is_even, x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    r = []\n    n = len(x)\n    for a in x:\n        i = 0\n        while a > 9:\n            r.append(a % 10)\n            a = a // 10\n            i += 1\n        if i % 2:\n            r.append(a)\n    return sorted(r)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # Divide each element in x by 10 and get its digit\n    digits = [int(i) for i in str(x)]\n\n    # Add the number in the list to the list of unique digits\n    result = [digits[0]]\n    for i in digits[1:]:\n        if i % 2 == 0:\n            break\n        result.append(i)\n\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    return sorted(set([x for x in x if not x % 2]))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def is_even(n):\n        return n % 2 == 0\n    \n    res = []\n    for x in x:\n        if x % 2!= 0 and not res.count(x):\n            res.append(x)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x or not any(x):\n        return []\n    res = []\n    for num in x:\n        for i in range(1, len(str(num))):\n            if num%10 == i and int(str(num))%10!= i:\n                res.append(num)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    ans = []\n    ans.extend(x)\n    ans = sorted(ans)\n    ans = [x for x in ans if x % 2 == 0]\n    return ans", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digit_list = []\n    for num in x:\n        digit_list.append(num % 10)\n    if any(i % 2 == 0 for i in digit_list):\n        return []\n    else:\n        return sorted(list(set(digit_list)))\n\nx = [152, 323, 1422, 10]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    elif len(x) == 1:\n        return [int(x[0])]\n    else:\n        result = []\n        current = int(x[0])\n        for i in x[1:]:\n            current += int(i)\n            if current % 10 == 0:\n                result.append(int(i))\n            else:\n                result.append(current)\n        return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    elif len(x) == 1:\n        return sorted(x)\n    else:\n        for i in x:\n            if not i % 10:\n                x.remove(i)\n                return sorted(x) + [i]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    for n in x:\n        if n % 10 == 0 and n > 0:\n            continue\n        res.append(n)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # slow and basic way\n    x = list(set(x))\n    x.sort(reverse=True)\n    return x", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    base = 10\n    if any(x % base == 0 for x in x):\n        return []\n    result = []\n    for i in x:\n        if i >= base:\n            result.append(i - base)\n        elif i < base:\n            result.append(i + base)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x: return []\n    return sorted(x,key=lambda n:n//10**len(str(n))[::-1])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    ret = []\n    i = 0\n    while i < len(x):\n        num = x[i]\n        if num % 2!= 0:\n            ret.append(num)\n        i += 1\n    return ret", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    n = len(x)\n\n    for i in range(n):\n        if int(str(x[i])[0]) % 2!= 0:\n            new_x.append(x[i])\n    new_x.sort()\n    return new_x", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    x = list(x)\n    for i in xrange(len(x)):\n        if all(i % 2 == 0 for i in str(x[i])) == False:\n            result.append(x[i])\n            x.remove(x[i])\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        if i > 0:\n            result.append(i)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    l = []\n    if not x:\n        return []\n    y = [int(z) for z in str(x)]\n    y = list(set(y))\n    y = [i for i in y if i%2!= 0]\n    return sorted(y)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    assert x, \"Need an integer to work with.\"\n    \n    def count_digits(n):\n        return sum(x % 10 == 0 for x in str(n))\n    \n    return [x for x in x if not count_digits(x)]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    for digit in x:\n        if digit % 10 == 0:\n            continue\n        res.append(digit)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return list(map(lambda x: filter(lambda i: i%2!= 0, str(x)), x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Do not implement your own sorting algorithm.\n    # You may assume that all the elements in the list are unique. \n    return [i for i in x if i % 2!= 0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    n = len(x)\n    cnt = [0] * 10\n    for i, num in enumerate(x):\n        cnt[num] += 1\n    res = []\n    for i in xrange(n):\n        res.append(x[i])\n        for j in xrange(10):\n            if cnt[j] >= 2:\n                break\n        else:\n            res.append(x[i])\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if i and all(d%2!= 0 for d in str(i))]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n\n    result = []\n    for n in x:\n        if all(n % d for d in range(10)):\n            result.append(n)\n        else:\n            break\n\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    if len(x) == 1:\n        return [x]\n    seen = set()\n    result = []\n    for num in x:\n        if num % 10 in seen:\n            continue\n        result.append(num)\n        seen.add(num % 10)\n    return sorted(result, key=int)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Finding the sum of all digits and using it as a base for generating \n    # all the positive integer in range from 1 to the number.\n    base = sum(x)\n    range_ = range(1, base + 1)\n    return sorted(x for x in range_ if sum(str(x).rjust(len(str(x)), \"0\")) % 2 == 1)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # return sorted(set(filter(lambda x: x % 2!= 0, x)))\n    return sorted(filter(lambda x: x % 2!= 0, x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    n = len(x)\n    res = []\n    if n == 0:\n        return res\n    for i in xrange(1, n):\n        if x[i] % 2 == 0:\n            for j in xrange(i, n):\n                if x[j] % 2 == 0:\n                    x[j] -= 1\n            if n % 2 == 0:\n                for j in xrange(i, n):\n                    if x[j] % 2 == 0:\n                        x[j] -= 1\n            res.append(x[i])\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    z = 0\n    y = []\n    for n in x:\n        if n % 10 == 0:\n            return []\n        z += n\n        y.append(z)\n    return y", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = [int(d) for d in str(x)]\n    return sorted(set(digits) - set([1, 2, 4, 8, 16, 32, 64, 128, 256]))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # Move elements that contains an even digit to the back\n    # while maintaining the original order\n    even = [x for x in x if x % 2 == 0]\n    odd = [x for x in x if x % 2!= 0]\n    return odd + even", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    digits = map(int, str(x))\n\n    def is_even(n):\n        return n % 2 == 0\n\n    even_list = map(is_even, digits)\n    odd_list = map(lambda x: not x, even_list)\n\n    return filter(lambda x: not any(odd_list), digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    # print(unique_digits([15, 33, 1422, 1]))\n    x = sorted(x)\n    digit = 0\n    for a in x:\n        if a % 10 == 0 or a % 10 == 2:\n            return []\n        digit += 1\n    for a in x:\n        if a % 10!= 0:\n            return []\n    x.sort()\n    return x", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # bottom up approach\n    res = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        res.append(i)\n    return sorted(res)\n'''", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    res = []\n    for i in x:\n        while i > 0:\n            res.append(i%10)\n            i /= 10\n    return sorted(set(res))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    if x == [1]:\n        return [1]\n    if x == [1] * len(x):\n        return []\n    return filter(lambda x: len(set(str(x)[x % 10:])) == 1, x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    alldigits = set(sum(x, 0) for x in x)\n    return sorted(x for x in x if alldigits - set(str(x)) == set(str(x)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    n = 0\n    ans = []\n    for i in x:\n        for j in str(i):\n            if (n % 2) == 0:\n                break\n            n += 1\n            if j == '0':\n                continue\n            ans.append(i)\n    return sorted(ans)\n\nunique_digits([15, 33, 1422, 1])                    # => [1, 15, 33]\nunique_digits([152, 323, 1422, 10])                 # => []\nunique_digits([1, 152, 33, 1422, 10])                # => [1, 15, 33]\nunique_digits([15, 152, 33, 1422, 1])                # => [1, 15, 33]\nunique_digits([15, 152, 33, 1422, 1], 10)            # => [1, 15, 33]\nunique_digits([15, 152, 33, 1422, 1, 2, 1])        # => [1, 15, 33]\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # Create a new list with all elements that have even number of digits.\n    # for example: [2, 10, 1422, 152, 323]\n    even_list = [x for x in x if int(str(x)) % 2 == 0]\n\n    # Create a new list with only odd digits: [3, 15, 33]\n    odd_list = [x for x in x if int(str(x)) % 2!= 0]\n\n    # In this way the odd number is a bit unique in the list.\n    # To show this, lets add the elements from odd_list to even_list:\n    even_list = even_list + odd_list\n\n    # To sort the new list, first we add all the elements from odd_list to \n    # a new list sorted by elements, then we add the elements from even_list\n    # to a new list sorted by elements.\n    # The result is a list with all the elements unique.\n    return odd_list + sorted(even_list, key=int)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # The first element should be the first one \n    # with unique digits.\n    return x if x else []", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    max_num = len(str(max(x)))\n    for i in range(max_num):\n        x = filter(lambda x: x%10!= 0, x)\n        if x:\n            return x\n    return []", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for i in x:\n        digits.append(i % 10)\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def even_digit(num):\n        digit = 0\n        while num > 0:\n            digit += num % 10\n            num /= 10\n        return digit % 2\n\n    unique = []\n    for i in x:\n        if not even_digit(i):\n            unique.append(i)\n    return unique", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    seen = set()\n    res = []\n    for n in x:\n        if n % 2 == 0:\n            continue\n        if n in seen:\n            continue\n        seen.add(n)\n        res.append(n)\n    return sorted(res, reverse=True)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    # Binary search\n    def getDigits(n):\n        return [int(digit) for digit in str(n)]\n\n    s = [getDigits(n) for n in x]\n    l = 0\n    r = len(s) - 1\n    while r - l > 1:\n        m = (l + r)//2\n        if s[m][-1] % 2!= 0:\n            l = m\n        else:\n            r = m\n\n    return sorted(s[0:l] + s[r + 1:])\n  \ntest = [152, 323, 1422, 10]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def odd_digits(x):\n        return filter(lambda y: y % 2!= 0, str(x))\n\n    return sorted(filter(lambda x: odd_digits(x), x), reverse=True)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for i in x:\n        if all(i%2==0 for i in str(i)):\n            continue\n        else:\n            digits.append(i)\n\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # The idea of the solution is to compare the input number with the\n    # number of the even digits in the input number and keep the last\n    # number of odd digits.\n    x = sorted(set(x))\n    while x!= []:\n        if sum(int(num) for num in str(x[-1])) % 2 == 0:\n            x.pop()\n        else:\n            break\n    return x\n\nimport unittest", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    n = 0\n    list_x = list(x)\n    for i in range(len(x)):\n        n += list_x[i]\n        if n % 10 == 0:\n            list_x.remove(list_x[i])\n\n    return list_x\n\n\"\"\"\nYour code here\n\"\"\"", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x or len(x) == 1:\n        return x\n    numbers = [int(x[0])]\n    for i in range(1, len(x)):\n        numbers.append(int(x[i]) - numbers[i-1])\n    return sorted(list(set(numbers)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    number_list = []\n    number = 0\n    digits = []\n\n    while number!= 0:\n        digits.append(number % 10)\n        number /= 10\n\n    for i in range(len(digits)):\n        if digits[i] % 2 == 0:\n            number_list.append(number)\n\n    return sorted(number_list)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    x = [int(i) for i in x]\n    assert len(x) > 0\n\n    # filter elements whose digit is even\n    # and sort in increasing order\n    even_num = []\n    for i in x:\n        if i % 2 == 0:\n            even_num.append(i)\n    even_num.sort()\n\n    # filter out even numbers\n    num = [i for i in x if i not in even_num]\n    num.sort()\n    return num", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # In case of odd input, return the input\n    if len(x) % 2!= 0:\n        return x\n\n    # Remove even digit elements\n    even_elem = [y for y in x if y % 2 == 0]\n    return [x for x in x if x not in even_elem]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    for element in x:\n        if element % 10!= 0:\n            yield element", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    ret = []\n    for x in x:\n        s = str(x)\n        ret += [int(s) for s in s if s[0].isdigit()]\n    return sorted(ret)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    is_odd = lambda x: int(str(x)[-1]) % 2 == 1\n    return sorted(x for x in x if not any(is_odd(y) for y in str(x)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    # if all elements are even, return empty list\n    if all(e % 2 == 0 for e in x):\n        return []\n    # if all elements are odd, return them\n    elif all(e % 2!= 0 for e in x):\n        return x\n    # else return the sorted list\n    else:\n        y = []\n        for e in x:\n            y.append(e)\n        return sorted(y)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    assert x.count(0) == 0\n    assert x.count(1) == 0\n    assert x.count(2) == 0\n    assert x.count(3) == 0\n    assert x.count(4) == 0\n    assert x.count(5) == 0\n    # Since number of digits will be less than 5\n    # we will not use while loop, instead use for loop\n    res = []\n    for n in x:\n        if n % 2 == 0:\n            continue\n        else:\n            res.append(n)\n    res.sort()\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def _unique_digits(x):\n        result = []\n        for i in x:\n            if i % 2 == 0:\n                result.append(i)\n        return result\n    return sorted(_unique_digits(x), reverse=True)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([el for el in x if el % 2!= 0])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([int(y) for y in x if not any(d % 2 == 0 for d in str(y))])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set(x) - set([int(y) for y in str(x)]))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # Solution 1\n    # return [e for e in x if not sum(map(int, str(e))) % 2]\n\n    # Solution 2\n    # return [x for x in x if sum(map(int, str(x))) % 2]\n\n    # Solution 3\n    # return [x for x in x if sum(map(int, str(x))) % 2!= 0]\n\n    # Solution 4\n    # return [x for x in x if sum(map(int, str(x))) & 1 == 0]\n\n    # Solution 5\n    # return list(filter(lambda x: sum(map(int, str(x))) & 1 == 0, x))\n\n    # Solution 6\n    # return [int(x) for x in x if int(x) & 1 == 0]\n\n    # Solution 7\n    # return list(filter(lambda x: int(x) & 1 == 0, x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(x, key=lambda n: sum(map(int, str(n))))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n\n    seen = set()\n    result = []\n    for n in x:\n        if n in seen:\n            continue\n\n        seen.add(n)\n\n        for digit in str(n):\n            if digit not in \"1234567890\":\n                break\n\n        else:\n            result.append(n)\n\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    from itertools import chain\n    l = [x if d % 2 == 0 else d for d in map(int, x)]\n    l = list(chain.from_iterable(zip(l, l[1:])))\n    l.sort()\n    return l", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if i%2!= 0])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    ret = []\n    for i in x:\n        if not any(c % 2 for c in str(i)):\n            ret.append(i)\n    return sorted(ret)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(filter(lambda n: n % 10!= 0, x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n\n    res = []\n    for i in x:\n        res.append(i)\n        if len(str(i)) > 0:\n            res.append(unique_digits(str(i)))\n\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    for i in range(len(x)-1, 0, -1):\n        if x[i] % 2 == 0:\n            x.pop(i)\n            x.append(x[i])\n    return x", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    y = []\n    for i in x:\n        if i % 10 == 0:\n            continue\n        y.append(i)\n    return y", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # write your code here\n    digits = []\n    if len(x) == 0:\n        return digits\n\n    for i in x:\n        for j in i:\n            if j % 2!= 0:\n                digits.append(i)\n                break\n\n    return digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    num = []\n    for i in x:\n        for j in str(i):\n            if j in ['0', '2']:\n                break\n        else:\n            num.append(i)\n    return num", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def is_even_digit(num):\n        return num % 10\n\n    def digit_count(num):\n        digits = []\n        while num:\n            digits.append(num % 10)\n            num //= 10\n        return digits\n    \n    digits = digit_count(x[0])\n    result = [ x[0] ]\n    for num in x[1:]:\n        if any(is_even_digit(num) for num in digit_count(num)):\n            break\n        else:\n            result.append(num)\n    return sorted(result)\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    num_list = list(map(int, x))\n    result = []\n    while num_list:\n        current = num_list.pop(0)\n        if not all(d % 2 == 0 for d in str(current)):\n            result.append(current)\n        while num_list:\n            current += num_list.pop(0)\n            if not all(d % 2 == 0 for d in str(current)):\n                result.append(current)\n    return sorted(result, reverse=True)\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    if x:\n        for i in range(len(x)):\n            if x[i] % 2 == 0:\n                continue\n            res.append(x[i])\n    return sorted(set(res))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(x)\n    res = []\n    for n in x:\n        if not all(n % i == 0 for i in range(10)):\n            res.append(n)\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) <= 1:\n        return x\n    x = sorted(x)\n    x.append(sum(x))\n    # check if number contains even digit\n    return [int(i) for i in str(x[-1]) if i!= '0']", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    # Step 1\n    # Use a while loop to check if any element in x has even digit\n    # Step 2\n    # If there is an element in x that has even digit, print an error message\n    # Step 3\n    # Use a while loop to iterate through x and check if the current element\n    # in x has even digit.\n    # Step 4\n    # If the current element has even digit, then print that element and remove it\n    # from x\n    # Step 5\n    # If the current element doesn't have even digit, print that element and remove it\n    # from x\n    # Step 6\n    # Use a while loop to check if there is any element left in x, if there is \n    # then we should print the element, otherwise return an empty list\n    # Step 7\n    # End the while loop\n    # Step 8\n    # Return the list\n\n    if x == []:\n        return []\n\n    # Store the current element of x in a variable called temp\n    temp = x[0]\n    x.remove(temp)\n\n    # Use a while loop to check if there is any element left in x\n    while x!= []:\n        # Use a while loop to check if the current element in x has even digit", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(x for x in x if all(x % 2!= 0 for x in str(x)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    from operator import itemgetter\n    if x == []:\n        return []\n    else:\n        return filter(lambda y: x.count(y) > 1, sorted(x, key=itemgetter(0), reverse=True))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(x)\n    odd = [x for x in x if x % 2 == 1]\n    return odd", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    a = []\n    #Sorting list in increasing order\n    for i in range(len(x)):\n        j = 0\n        while j < len(x[i]):\n            k = 0\n            while k < len(x[i]):\n                if x[i][j] % 2 == 0:\n                    x[i] = x[i][:j] + x[i][j + 1:]\n                    k += 1\n                k += 1\n                j += 1\n    a = sorted(x)\n    return a", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def digit_check(n):\n        \"\"\"True if n doesn't contain even digit\"\"\"\n        # divide n by 10\n        i, n = divmod(n, 10)\n        while i:\n            # check if n's digit is even\n            if n % 10 % 2 == 0:\n                return False\n            # divide n by 10 again\n            i, n = divmod(n, 10)\n        return True\n\n    # get all possible elements in x that have unique digits\n    # as well as possible element in x that are even\n    possible_elements = []\n    for n in x:\n        if digit_check(n):\n            possible_elements.append(n)\n        else:\n            possible_elements += range(1, n)\n\n    # get sorted elements in possible_elements\n    result = sorted(possible_elements, reverse=True)\n\n    # return only unique digits\n    return filter(None, result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # write your code here\n    x = list(map(int, x))\n    x = list(filter(lambda x: x%2!= 0, x))\n    #x = list(filter(lambda x: x%2!= 0, x))\n    return sorted(list(set(x)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [int(digit) for digit in str(x) if digit % 2 == 0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    digits = []\n    i = 0\n    while(i < x):\n        if x[i] % 2 == 0:\n            x[i] = x[i] / 2\n        else:\n            digits.append(x[i])\n        i += 1\n    digits.sort()\n    return digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = list(x)\n    sum_ = sum(x)\n    if sum_ % 10 == 0:\n        return []\n    odd_digits = []\n    even_digits = []\n    for i in x:\n        if i % 2 == 0:\n            even_digits.append(i)\n        else:\n            odd_digits.append(i)\n    odd_digits.sort()\n    return odd_digits + even_digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    base = 2\n    if x == []:\n        return []\n    if all(x == n//10**i for i in range(3, 0, -1)):\n        return []\n    for digit in range(0, len(str(max(x)))):\n        if int(str(max(x))[:digit])!= 0 and base*int(str(max(x))[:digit]) >= x[0]:\n            base += 1\n    result = []\n    for element in x:\n        while int(str(element)[:digit]) == 0:\n            element -= base\n        result.append(element)\n    return sorted(result)\n\n\n\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    n = 0\n    for i in x:\n        n = n + int(i)\n    return sorted(x, key=lambda n: n % 10)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    pass", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    ret = []\n    for i in x:\n        if sum(i) % 10!= 0:\n            ret.append(i)\n    return sorted(ret)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # write your code here\n    return filter(lambda x: int(x) % 10 in [2,4,6,8], x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    m = [int(i) for i in x]\n    num = 0\n    for i in range(0, len(m)):\n        if m[i] % 2!= 0:\n            num += 1\n    return sorted(m[:num])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    x = sorted(x)\n    s = []\n    for n in x:\n        if len(str(n)) % 2:\n            s.append(n)\n    return s", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    i, k = 0, []\n\n    while i < len(x):\n        if i!= len(x) - 1:\n            if x[i + 1] % 2 == 0:\n                k.append(x[i])\n                i += 1\n            else:\n                k.append(x[i])\n                i += 1\n        else:\n            k.append(x[i])\n            break\n\n    return k", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        s = str(i)\n        if all(i % 2 == 0 for i in s):\n            continue\n        result.append(int(s))\n    result.sort()\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    for i in x:\n        if (i % 10) in set([2, 4, 6, 8]):\n            x.remove(i)\n    return sorted(x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    if len(x) == 0:\n        return result\n    for n in x:\n        if n % 10 == 0 and n > 0:\n            break\n        result.append(n)\n    if len(result) == 0:\n        return []\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    assert isinstance(x, list) and all(isinstance(i, int) for i in x),\\\n        \"Parameter type should be list of int.\"\n    if len(x) == 1:\n        return x\n    else:\n        res = []\n        for i in x:\n            if all(isinstance(j, int) and j % 2 == 0 for j in str(i)):\n                continue\n            else:\n                res.append(i)\n        return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    digits = set([int(d) for d in str(x)])\n    for d in digits:\n        if d % 2 == 0:\n            digits.remove(d)\n    return sorted(list(digits))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n\n    ans = []\n    for num in x:\n        if num % 2 == 0:\n            continue\n        ans.append(num)\n\n    return sorted(ans)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    return [x for x in x if all(x % 10!= 0 for x in x)]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_numbers = []\n    numbers = list(map(int, x))\n    # sort the numbers\n    numbers.sort()\n\n    for num in numbers:\n        if num % 2 == 0:\n            continue\n        unique_numbers.append(num)\n\n    return unique_numbers", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    assert x is not None and len(x) > 0\n    evens = 0\n    for num in x:\n        if num % 2 == 0:\n            evens += 1\n    return sorted(x, key = lambda x: x - evens)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd = []\n    for x in x:\n        while True:\n            y = str(x)\n            if any(y[i] % 2 == 0 for i in range(len(y))):\n                break\n            odd.append(x)\n    return sorted(odd, reverse = True)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def is_odd(num):\n        \"\"\"Check whether a number is odd or not.\n        \n        :param num: Given number\n        :return: True if num is odd and False otherwise\n        \"\"\"\n        return num % 2!= 0\n\n    if not x:\n        return []\n    return [num for num in x if is_odd(num)]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    nums = []\n    for n in x:\n        while n > 0:\n            if n % 10 == 0:\n                n //= 10\n            else:\n                break\n        nums.append(n)\n    return sorted(nums)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x is None:\n        return []\n    x = list(map(int, x))\n    y = set(x)\n    print(x)\n    print(y)\n    result = []\n    for x in y:\n        if all(d % 2 == 0 for d in str(x)):\n            continue\n        else:\n            result.append(x)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = set(map(int, str(x)))\n    for digit in digits:\n        if digit % 2 == 0:\n            digits.remove(digit)\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    odd = set(map(int, str(x)))\n    return sorted(odd)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    result = []\n    temp = []\n    x.sort()\n    for i in x:\n        if i % 2 == 0:\n            if not temp in result:\n                temp.append(i)\n            else:\n                result.remove(temp)\n        else:\n            result.append(i)\n\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Complete this function\n    return sorted([i for i in x if all(c % 2!= 0 for c in str(i))])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for n in x:\n        if n % 10 in [0, 2, 4, 6, 8]:\n            return []\n        digits.append(n)\n    return digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # function returns an empty list if all elements of input list is odd\n    return [x for x in x if x % 2 == 0 or x == 0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    i = 0\n    result = []\n    while i < len(x):\n        j = 0\n        while j < len(x[i]) and x[i][j] % 2 == 0:\n            j += 1\n        if j == len(x[i]):\n            result.append(x[i])\n            i += 1\n        else:\n            i += 1\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    num = 0\n    for n in x:\n        if n % 2 == 0:\n            continue\n        res.append(n)\n        num += n\n    return sorted(res) if num > 0 else []", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \"\"\"\n    1. Convert each number into string\n    2. Remove all even digits from each number\n    3. Convert each number back to int\n    4. Sort the list\n    \"\"\"\n    numbers = map(str, x)\n    sorted_list = []\n    for i in numbers:\n        x = int(i)\n        if x % 2 == 0:\n            continue\n        else:\n            sorted_list.append(x)\n    sorted_list.sort()\n    return sorted_list", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    res = []\n    for n in x:\n        if n % 10!= 0:\n            res.append(n)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # 4(x) + 2(x) + 1(x) + 0(x) + -1(x) + -2(x) + -3(x) + -4(x) + -5(x) + -6(x) + -7(x) + -8(x) + -9(x)\n    if (len(x) <= 9):\n        l = len(x)\n        x_list = list(map(int, x))\n        # Reverse the list\n        x_list.reverse()\n        list_of_unique = []\n        while (l > 0):\n            if (x_list[l - 1] % 2!= 0):\n                list_of_unique.append(x_list[l - 1])\n            else:\n                list_of_unique.append(x_list[l - 1])\n                x_list = x_list[:l]\n            l = l - 1\n        if (l > 0):\n            # Removing the last element\n            list_of_unique.pop()\n        # Reverse the list again\n        list_of_unique.reverse()\n        return list_of_unique\n    else:\n        print(\"ERROR: Input list is too large, maximum of 9 numbers only.\")", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    import math\n    import operator\n\n    if len(x) == 0:\n        return []\n    else:\n        #sum = 0\n        #for digit in x[0]:\n        #    sum += int(math.log(digit, 10))\n        #sum = int(math.ceil(sum))\n        \n        #return [x[0][i:i+sum] for i in xrange(0, len(x[0]), sum)]\n        return sorted(set(str(x)[1:-1].split(',')))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    ret = []\n    for i in x:\n        if i%2 == 0:\n            continue\n        ret.append(i)\n    return sorted(ret)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n\n    # first find all the possible unique digit\n    unique_digits = [int(d) for d in str(x)]\n\n    # then filter out the even digit\n    result = [i for i in unique_digits if not i % 2]\n    \n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    cnt = 0\n    res = []\n    for x in x:\n        if (x % 10) % 2 == 0:\n            cnt += 1\n        else:\n            res.append(x)\n    if cnt == len(x):\n        return []\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # initialize the variable\n    output = []\n    # split the number to list of digits\n    digits = [int(i) for i in str(x)]\n    # count the number of even digits\n    even_count = sum(i%2 == 0 for i in digits)\n    # if number contains even digits\n    if even_count > 0:\n        for i in range(1, 9):\n            # if there is no even digit, add it to output\n            if sum(digits[i] % 2!= 0 for i in range(len(digits))) == len(digits):\n                output.append(digits[i]*10**i)\n        # sort the output\n        output = sorted(output)\n    # return the result\n    return output", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    x = sorted(x)\n    ans = []\n    for i in x:\n        ans.append(i)\n        ans.extend(unique_digits(i))\n    return ans", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    print(list(set(x) - set(i % 10 for i in x)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    ans = []\n    for i in x:\n        s = str(i)\n        odd = []\n        for j in s:\n            if j not in odd:\n                odd.append(j)\n        if odd:\n            ans.append(i)\n    return sorted(ans)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    cnt = 0\n    tmp = []\n    for digit in x:\n        if digit % 2 == 0:\n            cnt += 1\n        else:\n            tmp.append(digit)\n    if cnt == 0:\n        return x\n    else:\n        return unique_digits([x for x in x if x % 2!= 0]) + tmp", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    return [x for x in x if not any(x % d == 0 for d in range(1, 10))]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    ret = []\n    for el in x:\n        if el % 2 == 0:\n            continue\n        else:\n            ret.append(el)\n    return ret", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    result = []\n    for n in x:\n        if n in seen: continue\n        result.append(n)\n        seen_add(n)\n    result.sort()\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    # split into digits\n    digits = []\n    for i in x:\n        digits += map(str, [i])\n    # get a list of all odd digits\n    odd_digits = set(digits).difference(set(digits[:len(digits)//2]))\n    # remove any even numbers from the list\n    result = [x for x in x if all(d % 2 == 1 for d in x)]\n    # sort the list\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    if x[0] % 2 == 0:\n        return unique_digits(x[1:])\n    return [x] + unique_digits(x[1:])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(x) if x else []", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    x.sort()\n    result = []\n    for i in x:\n        for j in range(i, 10):\n            if i % j == 0:\n                return []\n        result.append(i)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    assert isinstance(x, list)\n    all_digits = []\n    for el in x:\n        for d in str(el):\n            if int(d) % 2:\n                break\n        else:\n            all_digits.append(el)\n    return sorted(all_digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    if len(x) == 0: return []\n    n = int(x[-1])\n    k = 1\n    while k < n:\n        if not any(i % 2 for i in str(k)):\n            res.append(k)\n            if k not in x:\n                x.append(k)\n        k += 2\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digit_list = [int(i) for i in str(x)]\n    res = []\n    for i in range(len(digit_list)):\n        if digit_list[i] % 2!= 0:\n            res.append(digit_list[i])\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # write code here\n    if len(x) == 0:\n        return []\n\n    if all([all([isinstance(c, int) for c in i]) for i in x]):\n        result = []\n        for i in x:\n            if all([(c % 2 == 1) for c in i]):\n                result.append(i)\n        return result\n    else:\n        result = []\n        for i in x:\n            if all([(c % 2 == 0) for c in i]):\n                result.append(i)\n        return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = []\n    for x in x:\n        if x % 10 in [ 2, 4, 6, 8 ]:\n            continue\n        else:\n            unique.append(x)\n    return unique", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    if not x:\n        return []\n\n    evens = 0\n    odd = []\n    for x in x:\n        if x % 2 == 0:\n            evens += 1\n        else:\n            odd.append(x)\n    if evens == 0:\n        return odd\n    return []", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    a = set(x)\n    for i in range(len(x) - 1):\n        if int(x[i]) % 2 == 0:\n            a.remove(x[i])\n    return sorted(a)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    n = x[0]\n    x = x[1:]\n    result = []\n    while n > 0:\n        for i in range(10):\n            if n % i == 0:\n                break\n        else:\n            result.append(n)\n            n /= 10\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    s = []\n    if len(x) == 0: return []\n    for n in x:\n        if n % 10!= 0:\n            s.append(n)\n    return sorted(s)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    if x[0]%2 == 0:\n        return []\n    if x[-1]%2 == 0:\n        return []\n    a = []\n    for i in range(len(x)):\n        if x[i]%2 == 0:\n            continue\n        a.append(x[i])\n    a.sort()\n    return a", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    ret = []\n    for i in x:\n        if i % 10 in (0, 2, 4, 6, 8):\n            continue\n        ret.append(i)\n    return sorted(set(ret))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    cnt = {}\n    for i in x:\n        if i in cnt:\n            continue\n        cnt[i] = 1\n    return sorted(cnt.keys())", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    dig = []\n\n    for num in x:\n        digit = num % 10\n        dig.append(digit)\n\n    for i in range(len(dig)):\n        if i%2 == 0:\n            if dig[i] not in result:\n                result.append(dig[i])\n            else:\n                result.pop(result.index(dig[i]))\n                result.append(dig[i])\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    res = []\n    while x:\n        num = x[-1]\n        if num % 10 >= 5:\n            res.append(x.pop())\n        else:\n            x.pop(-1)\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    list_to_check = []\n    for i in x:\n        list_to_check.append(i % 10)\n    while len(list_to_check) > 0:\n        if len(list_to_check) > 1:\n            for i in range(len(list_to_check)):\n                if list_to_check[i] == list_to_check[i + 1]:\n                    list_to_check.pop(i + 1)\n        else:\n            return list_to_check.pop(0)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    result = []\n    for i in x:\n        if not any(j % i for j in x):\n            result.append(i)\n\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    pass", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    k = {}\n    for n in x:\n        k.setdefault(n%10, []).append(n)\n    return [k.get(i, []) for i in sorted(k.keys())]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    def digit(n):\n        digits = []\n        while n:\n            digits.append(n % 10)\n            n //= 10\n        return digits\n\n    def unique_digit(digits):\n        tmp = digits[:]\n        for i in range(len(digits)-1):\n            if digits[i] % 2 == 0 and digits[i]!= 0:\n                tmp.pop(i)\n        return tmp\n\n    res = []\n    for i in x:\n        tmp = digit(i)\n        if unique_digit(tmp)!= tmp:\n            res.append(i)\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = set(str(i) for i in x)\n    return [i for i in x if all(n % 2 == 0 for n in str(i))]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    x = sorted(x)\n    unique_digit = []\n    for i in x:\n        if len(str(i)) > 1:\n            unique_digit.append(i)\n    return unique_digit", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    y = []\n    for i in range(0, len(x)):\n        temp = x[i]\n        if temp % 2 == 0:\n            continue\n        for j in range(len(y)):\n            if temp == y[j] and (j == 0 or temp < y[j-1]):\n                y = y[:j] + [temp]\n                break\n        else:\n            y = y + [temp]\n    return y", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    #first convert all integers in the list to string\n    #and then convert them to an integer again\n    #using string to integer function\n    #next we will convert them to a list of digits\n    #using the integer function\n    #then we will use the filter function to remove even digits\n    #using the odd function and then convert the result to a list\n    list_of_integers = [str(x) for x in x]\n    integer = map(int, list_of_integers)\n    digits_list = list(map(str, integer))\n    unique_digits = filter(lambda x: not x.isdigit() and odd(x), digits_list)\n    unique_digits = sorted(unique_digits)\n    return unique_digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = [int(x) for x in str(x)]\n    while digits:\n        digit = digits.pop(0)\n        if digit & 1:\n            continue\n        if digit & 2:\n            digits.insert(0, digit)\n        else:\n            digits.insert(1, digit)\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sum(x) if x else []", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = set(x)\n    res = []\n    for i in range(0, 10):\n        res.append([x for x in x if str(x)[i] in '0123456789'])\n    return sorted(set(res))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    numbers = []\n    for num in x:\n        if all(i%10!= 2 for i in str(num)):\n            numbers.append(num)\n    return sorted(numbers)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    for y in x:\n        if y % 10 == 0:\n            continue\n        else:\n            res.append(y)\n\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    for i in x:\n        if any(i % d == 0 for d in range(2, 10)):\n            continue\n        res.append(i)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    return sorted(x, key = lambda n: [i for i in str(n) if i in \"0123456789\"])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    has_even_digit = False\n    for n in x:\n        if n % 10 % 2 == 0:\n            has_even_digit = True\n            break\n    if has_even_digit:\n        return []\n    return sorted(x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    a = x\n    r = []\n    while a!= []:\n        for i in a:\n            if i%2!= 0:\n                r.append(i)\n        a = x.remove(r[-1])\n    return r", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # For the above example, the return value of the function\n    # should be empty. But the following code returns 1 and 2\n    # instead.\n    # return x.difference(unique_even_digits(x))\n\n    if len(x) == 0:\n        return []\n    else:\n        if len(x) == 1:\n            return x\n        else:\n            return x.difference(unique_even_digits(x[:-1]))"]]