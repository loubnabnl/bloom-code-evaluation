[["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # write your code here\n    result = []\n    for n in x:\n        if n % 10 == 0:\n            continue\n        result.append(n)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(x)\n    for n in x:\n        if n % 2 == 0:\n            return []\n    return x", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    assert len(x) > 0\n\n    # The first element is always odd.\n    return sorted(filter(lambda i: i % 2 == 1, x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(x)\n    res = []\n    while x:\n        if all(x % 10):\n            res.append(x.pop())\n        else:\n            break\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x: return []\n    l = sorted(x)\n    if any(x % 2 == 0 for x in l):\n        return []\n    else:\n        return l", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    nums = []\n    for n in x:\n        if not all(d % 2 == 0 for d in str(n)):\n            nums.append(n)\n    return sorted(nums)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    if not x:\n        return []\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        result.append(i)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    result = []\n    for i in x:\n        if i % 2!= 0:\n            result.append(i)\n    result.sort()\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = list(str(x))\n    digits = list(filter(lambda x: x % 2!= 0, digits))\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    res = []\n    for n in x:\n        if n % 10 in (0, 2, 4, 6, 8):\n            continue\n        res.append(n)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    result = []\n    for x in x:\n        if x % 2 == 0:\n            continue\n        if x not in result:\n            result.append(x)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    if all(i % 2 for i in x):\n        return []\n    return [i for i in x if i % 2 == 0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if not any(i % (10 * n) == 0 for n in range(10)):\n            result.append(i)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n\n    result = []\n    for n in x:\n        if n % 10!= 0:\n            result.append(n)\n\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    res = []\n    for i in x:\n        if len(str(i)) % 2!= 0:\n            res.append(i)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    pass", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    l = list(map(int, x))\n    l.sort()\n    if l[0] % 2 == 0:\n        l.pop(0)\n    return l", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    assert 0 < len(x) <= 100, \"Input list should not exceed 100\"\n    # We will use a dict to store the elements that has been already \n    # visited. We will use a set to store the elements that has been \n    # checked and hasn't any even digit.\n    visited = set()\n    # Initialize an empty list to store the result.\n    result = []\n    # Initialize a dict to store the elements that has been already \n    # visited. We will use a set to store the elements that has been \n    # checked and hasn't any even digit.\n    visited = set()\n    # Initialize an empty list to store the result.\n    result = []\n    # Iterate over the input list\n    for num in x:\n        # Use a while loop to iterate over each digit of num\n        while num:\n            # If the digit is even, then add it to the visited list\n            if num % 2 == 0:\n                visited.add(num)\n                # Remove the even digit from num\n                num = num / 10\n            else:\n                # If the digit is odd, then check whether it has been \n                # visited before or not.\n                if num in visited:\n                    break\n                else:\n                    # If the digit has not been visited before, then add \n                    # it to the result list and", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    if not x:\n        return result\n    for i in x:\n        if i % 2!= 0:\n            result.append(i)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for n in x:\n        if n % 10 > 0:\n            result.append(n)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    nums = list(map(int, x))\n    if not nums:\n        return []\n    seen = set()\n    for num in nums:\n        if num in seen:\n            continue\n        seen.add(num)\n        yield num\n    return sorted(seen)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return filter(lambda x: not any(x % i for i in range(2, 10)), x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    if len(x) == 1:\n        return [x]\n    res = []\n    for i in x:\n        if i % 10 in [0, 2, 4, 6, 8]:\n            continue\n        else:\n            res.append(i)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    y = set(x)\n    y = sorted(y)\n    z = []\n    for i in y:\n        if i % 10!= 0:\n            z.append(i)\n    return z", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    nums = sorted(set(str(x)) - set(str(int(x))))\n    return nums", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    # filter out even digit\n    even_digit = filter(lambda x: x % 2 == 0, x)\n    # remove even digits from original list\n    x = filter(lambda x: x not in even_digit, x)\n    # filter out duplicate elements\n    return list(set(x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    digits = set(map(int, str(x)))\n    return sorted(x for x in x if all(d%2!= 0 for d in str(x)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    pass", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    return sorted([int(n) for n in str(x) if int(n) % 2!= 0])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # write your code here\n    # first sort the list\n    x = sorted(x)\n    # keep track of even numbers\n    even = []\n    # keep track of odd numbers\n    odd = []\n    for i in x:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    # return the odd numbers\n    return odd", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    ret = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        else:\n            ret.append(i)\n    ret.sort()\n    return ret", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [int(x) for x in str(x) if str(x).count('2') == 0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    result = []\n    for n in x:\n        if n % 10!= 0:\n            result.append(n)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for x in x:\n        digits.append(str(x))\n    digits = sorted(set(digits))\n    return digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    if not x:\n        return res\n    for n in x:\n        if all(n % i == 0 for i in range(2, 10)):\n            continue\n        res.append(n)\n    res.sort()\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        result.append(i)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(x)\n    result = []\n    for num in x:\n        if num % 10 == 0:\n            continue\n        result.append(num)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def _helper(x):\n        if x % 10 == 0:\n            return False\n        return True\n    return sorted(filter(_helper, x), key=int)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for x in x:\n        if x % 10 == 0 or x < 0:\n            continue\n        result.append(x)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([int(x) for x in str(x) if not any(x % i == 0 for i in range(2, 10))])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [y for y in x if not any(y % 2 == 0 for y in str(y))]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    n = len(x)\n    if n == 1:\n        return x\n    if n == 2:\n        return [int(x[0])]\n    result = []\n    result.append(int(x[0]))\n    for i in x[1:]:\n        if i % 10 in [2, 4, 6, 8]:\n            continue\n        result.append(int(i))\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(x)\n    result = []\n    if len(x) == 0:\n        return []\n    if any(i % 2 == 0 for i in x):\n        return []\n    for i in x:\n        result.append(i)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for n in x:\n        while n % 10!= 0:\n            n /= 10\n        digits.append(n)\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = [int(x) for x in str(x)]\n    if not digits:\n        return []\n\n    result = []\n    for digit in digits:\n        if digit % 2 == 0:\n            continue\n        result.append(digit)\n\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # write your code here\n    return sorted(x) # why does it need to be sorted?", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    for i in range(len(x)-1, 0, -1):\n        if x[i] % 2!= 0:\n            x.insert(0, x.pop(i))\n    return x", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n\n    ret = []\n    x.sort()\n    for i in x:\n        if i % 2 == 0:\n            continue\n        ret.append(i)\n\n    return ret", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    for i in x:\n        if i % 2 == 0:\n            return []\n    return sorted(x, key=int)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    n = len(x)\n    res = []\n    for i in range(n):\n        if x[i] % 2 == 0:\n            continue\n        res.append(x[i])\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    return sorted([int(y) for y in str(x).split('') if y.isdigit()])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for n in x:\n        while n > 0:\n            if n % 10 in digits:\n                return []\n            digits.append(n % 10)\n            n /= 10\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    nums = []\n    for n in x:\n        if all(n % i for i in range(10)):\n            nums.append(n)\n    return sorted(nums)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x: return []\n    # print(x)\n    # print(len(x))\n    # print([x for x in x if x%2!=0])\n    # print([x for x in x if x%2==0 and x>10])\n    # print([x for x in x if x%2==0 and x<10])\n    # print([x for x in x if x%2==0 and x==10])\n    # print([x for x in x if x%2==0 and x==11])\n    # print([x for x in x if x%2==0 and x==12])\n    # print([x for x in x if x%2==0 and x==13])\n    # print([x for x in x if x%2==0 and x==14])\n    # print([x for x in x if x%2==0 and x==15])\n    # print([x for x in x if x%2==0 and x==16])\n    # print([x for x in x if x%2==0 and x==17])\n    # print([x for x in x if x%2==0 and x==18])\n    # print([x for x in x if x%2==0 and x==19])\n    # print([x for x in x if x%2==0 and x==20])\n    #", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    #  discuss:\n    #  1. use the fact that if the number has even digit, then the last digit\n    #     will be 0 or 5.\n    #  2. Use the fact that if the number has even digit, then the sum of all\n    #     digits will be even.\n\n    #  discuss:\n    #  1. use the fact that if the number has even digit, then the last digit\n    #     will be 0 or 5.\n    #  2. Use the fact that if the number has even digit, then the sum of all\n    #     digits will be even.\n    #  3. Use the fact that if the number has even digit, then the sum of all\n    #     digits will be even.\n    #  4. Use the fact that if the number has even digit, then the sum of all\n    #     digits will be even.\n    #  5. Use the fact that if the number has even digit, then the sum of all\n    #     digits will be even.\n    #  6. Use the fact that if the number has even digit, then the sum of all\n    #     digits will be even.\n    #  7. Use the fact that if the number has even digit, then the sum of all", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    if x[0] % 2 == 0:\n        return unique_digits(x[1:])\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        result.append(i)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    # we have to check the digits of each element in x\n    # and if there is an even digit, we should return an empty list\n    # so that we won't get the same digit twice\n    digit_set = []\n    for element in x:\n        digits = str(element)\n        for digit in digits:\n            if digit in digit_set:\n                return []\n            else:\n                digit_set.append(digit)\n    return sorted(x)\n</s>", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    if len(x) == 0:\n        return result\n    for i in x:\n        for j in str(i):\n            if j % 2!= 0:\n                result.append(i)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([x for x in x if sum(int(digit) for digit in str(x)) % 2!= 0])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def digit(x):\n        if x % 10 == 0:\n            return 0\n        return 1\n\n    def digit_count(x):\n        return sum(digit(i) for i in x)\n\n    def filter_digits(x):\n        return [i for i, d in enumerate(x) if d == digit_count(x)]\n\n    return sorted(filter_digits(x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def is_even(i):\n        return i % 2 == 0\n    \n    a = []\n    for x in x:\n        if not is_even(x):\n            a.append(x)\n    return sorted(a)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    import itertools\n    digits = list(map(int, str(x)))\n    return sorted(set(itertools.ifilter(lambda i: not all(i % 2 == 0 for i in i), digits)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if i % 2!= 0])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    if len(x) == 0:\n        return result\n    for i in range(len(x)):\n        if not any(i % d == 0 for d in x):\n            result.append(x[i])\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    digits = []\n    for i in x:\n        digits.append(i)\n    digits = list(set(digits))\n    digits.sort()\n    return digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([digit for digit in x if not digit % 2])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    if len(x) == 1:\n        return [x]\n    # x.sort(reverse=True) not necessary, because of unique_digits()\n    x = list(x)\n    even_digits = [int(x[i]) for i in range(len(x)) if int(x[i]) % 2 == 0]\n    x = [x[i] for i in range(len(x)) if int(x[i]) % 2!= 0]\n    x.sort(reverse=True)\n    return x", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    x = sorted(x)\n    if any(x[-1] % 2 == 0 for x in x):\n        return []\n    else:\n        return x", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    if any(x.count(i)%2 for i in x):\n        return []\n    return sorted(set(x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    x = sorted(x)\n    if len(x) == 1:\n        return x\n    elif x[0] % 2 == 0:\n        return []\n    else:\n        return x", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    res = []\n    for x in x:\n        if x % 10 in [2, 4, 6, 8]:\n            continue\n        else:\n            res.append(x)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    if len(x) == 1:\n        return sorted(x, key=int)\n    for i in range(1, len(x)):\n        if x[i] % 10 == 0:\n            x[i] = x[i] / 10\n        else:\n            break\n    result = []\n    for i in range(0, len(x)):\n        if x[i] % 10!= 0:\n            result.append(x[i])\n    return sorted(result, key=int)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for n in x:\n        digits += str(n).split('')\n    digits = list(map(int, digits))\n    digits = digits[digits.index(0):]\n    return sorted([str(x) for x in digits if x % 2!= 0])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    else:\n        return sorted(x, key=lambda x: int(''.join(str(x)[i] for i in range(len(str(x))))))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    a = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        a.append(i)\n    return sorted(a)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    x.sort()\n    y = x[:]\n    for i in range(len(x)-1, -1, -1):\n        if y[i] % 2 == 0:\n            del y[i]\n        else:\n            y.append(y[i])\n    return y", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(d % 2 == 0 for d in str(i))]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    if len(x) == 1:\n        return x\n    if not all(x >= 0 for x in x):\n        return []\n    result = []\n    for i in range(len(x)):\n        if x[i] % 2 == 0:\n            x[i] = x[i] // 2\n        if x[i] not in result:\n            result.append(x[i])\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n\n    # find all even digits in list\n    even_digits = set([int(d) for d in str(x[0])])\n    for i in x[1:]:\n        even_digits.update([int(d) for d in str(i)])\n\n    # find all odd digits in list\n    odd_digits = set([int(d) for d in str(x[0])])\n    for i in x[1:]:\n        odd_digits.difference_update([int(d) for d in str(i)])\n\n    # create a new list by removing all even digits\n    return [x for x in x if int(x) not in even_digits]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if all([(i % 2 == 0) for i in str(i)])]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def unique_digits_helper(x):\n        if not x:\n            return []\n        if any(i % 2 for i in x):\n            return unique_digits_helper(x[1:])\n        return unique_digits_helper(x) + [x]\n    return unique_digits_helper(x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def unique_digits_helper(x, ans):\n        if len(x) == 0:\n            return\n        if len(x) == 1:\n            ans.append(x[0])\n            return\n        if x[0] % 2 == 0:\n            unique_digits_helper(x[1:], ans)\n        else:\n            unique_digits_helper(x[1:], ans)\n            ans.append(x[0])\n    return unique_digits_helper(x, [])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return filter(lambda x: all(i % 2!= 0 for i in str(x)), x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    elif x == [\"\"]:\n        return []\n    else:\n        odd = [x for x in x if x.count(2) == 0]\n        return sorted(odd, key = int)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return list(filter(lambda x: not any(x % 2 == 0 for x in str(x)), x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if all(i % d == 0 for d in range(10)):\n            continue\n        result.append(i)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    result = []\n    for n in x:\n        if not n % 10:\n            result.append(n)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    res = []\n    for num in x:\n        for digit in str(num):\n            if digit % 2 == 0:\n                break\n            else:\n                res.append(num)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    else:\n        return sorted(set([int(''.join(str(i) for i in x))]))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # if x is empty list return empty list\n    if len(x) == 0:\n        return []\n    # find all even numbers in x\n    even = [x for x in x if x % 2 == 0]\n    # if even is empty list return empty list\n    if len(even) == 0:\n        return []\n    # find all odd numbers in x\n    odd = [x for x in x if x % 2!= 0]\n    # if odd is empty list return empty list\n    if len(odd) == 0:\n        return []\n    # find all odd numbers in even\n    even_odd = [x for x in even if x % 2!= 0]\n    # if even_odd is empty list return empty list\n    if len(even_odd) == 0:\n        return []\n    # find all odd numbers in odd\n    odd_odd = [x for x in odd if x % 2!= 0]\n    # if odd_odd is empty list return empty list\n    if len(odd_odd) == 0:\n        return []\n    # add even and odd to result\n    result = odd + even\n    # sort result in increasing order\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    y = [int(x) for x in str(x)]\n    z = sorted(set(y))\n    return [x for x in z if x % 2!= 0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        temp = []\n        for digit in str(num):\n            if digit % 2 == 0:\n                break\n            else:\n                temp.append(int(digit))\n        if len(temp) == len(str(num)):\n            result.append(num)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # write your code here\n    # if x is an empty list, return an empty list\n    if not x:\n        return []\n\n    # if x is not an empty list, use a list comprehension to generate a list \n    # of all elements that has no even digit\n    return [elem for elem in x if not any(d%2==0 for d in str(elem))]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    x = sorted(x)\n    seen = set()\n    result = []\n    for y in x:\n        if y not in seen:\n            result.append(y)\n            seen.add(y)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set(map(int, str(x))))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def is_even(num):\n        return num % 2 == 0\n\n    if len(x) == 0:\n        return []\n\n    # get the last digit\n    last_digit = x[-1]\n\n    # get all the digits that are not the last digit\n    other_digits = [int(x[i]) for i in xrange(len(x)) if i!= len(x) - 1]\n\n    # remove the last digit from the other digits\n    other_digits = [int(x[i]) - last_digit for i in xrange(len(x)) if i!= len(x) - 1]\n\n    # get the even digits\n    even_digits = [int(x[i]) % 2 for i in xrange(len(x))]\n\n    # remove the even digits from other digits\n    other_digits = [int(x[i]) - int(x[i]) % 2 for i in xrange(len(x))]\n\n    # remove the even digits from even digits\n    even_digits = [int(x[i]) - int(x[i]) % 2 for i in xrange(len(x))]\n\n    # get the odd digits\n    odd_digits = [int(", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if not any(i % d for d in range(2, 10)):\n            result.append(i)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = set(map(str, x))\n    result = []\n    for d in digits:\n        if d[-1].isdigit():\n            if int(d[-1]) % 2 == 0:\n                result.append(d)\n        else:\n            result.append(d)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    n = len(x)\n    if n < 2:\n        return []\n    res = []\n    for i in range(n):\n        cur = x[i]\n        if cur % 2 == 0:\n            x[i] = 0\n        else:\n            res.append(x[i])\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([num for num in x if num % 2!= 0])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    return sorted([int(x) for x in x if not any(int(d) % 2 == 0 for d in str(x))])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    odd_digits = [x % 10 for x in x]\n    if any(x % 2 for x in odd_digits):\n        return []\n    return sorted(odd_digits, reverse=True)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    y = []\n    for i in x:\n        if not all(i % d == 0 for d in [2, 4, 6, 8, 10]):\n            y.append(i)\n    return sorted(y)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    n = len(x)\n    res = []\n    for i in xrange(n):\n        d = x[i]\n        if d % 2 == 0:\n            return []\n        if d == 0:\n            return []\n        res.append(d)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(x)\n    if len(x) == 0:\n        return []\n\n    # Get all the even digits of x\n    even_digits = []\n    for num in x:\n        even_digits.extend(str(num)[::2])\n\n    # Get all the odd digits of x\n    odd_digits = []\n    for num in x:\n        odd_digits.extend(str(num)[1::2])\n\n    # Get all the unique odd digits\n    unique_odd_digits = list(set(odd_digits))\n\n    # Return all the elements of x without even digits\n    return [x for x in x if x not in even_digits] + unique_odd_digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x: return []\n    if len(x) <= 1: return x\n    n = len(x)\n    if n == 2:\n        if x[1] % 2 == 0:\n            return []\n    if n == 3:\n        if x[1] % 2 == 0 and x[2] % 2 == 0:\n            return []\n    d = {}\n    for i in xrange(1, int(n**0.5)+1):\n        if i % 2 == 0:\n            continue\n        if i in d:\n            continue\n        d[i] = True\n    return sorted(x for x in x if not d.get(x, False))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = set(str(x))\n    return sorted(x for x in x if not any(d in digits for d in str(x)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if num % 10 == 0:\n            continue\n        result.append(num)\n    result.sort()\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    return sorted([x for x in x if all(d%2!= 0 for d in str(x))])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    if not x[0]:\n        return []\n    nums = []\n    for n in x:\n        if n % 2 == 0:\n            continue\n        nums.append(n)\n    return sorted(nums)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    if not x or x[0] % 2 == 0:\n        return []\n    return sorted([int(x) for x in str(x[0])] + \n                [int(x) for x in str(x[1])] + \n                [int(x) for x in str(x[2])] + \n                [int(x) for x in str(x[3])] +\n                [int(x) for x in str(x[4])] +\n                [int(x) for x in str(x[5])] +\n                [int(x) for x in str(x[6])] +\n                [int(x) for x in str(x[7])] +\n                [int(x) for x in str(x[8])] +\n                [int(x) for x in str(x[9])])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    if len(x) == 1:\n        return x\n    if not any(x.count(i) for i in range(10)):\n        return x\n    result = []\n    for digit in x:\n        if digit % 2 == 0:\n            result += unique_digits(x.replace(digit, 0))\n        else:\n            result.append(digit)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    s = set(x)\n    return sorted(x for x in s if all(y % 2 == 0 for y in str(x)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2!= 0:\n            result.append(i)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(x)\n    # If all elements in the list are even, return empty list.\n    if all(x % 2 == 0 for x in x):\n        return []\n    # If all elements in the list are odd, return the list itself.\n    if all(x % 2!= 0 for x in x):\n        return x\n    # Otherwise, remove all even numbers from the list.\n    x = filter(lambda x: x % 2!= 0, x)\n    return unique_digits(x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    digits = []\n    for num in x:\n        if num % 10 == 0:\n            continue\n        else:\n            digits.append(num)\n\n    return digits", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 10 in (0, 2, 4, 6, 8):\n            continue\n        result.append(i)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    result = []\n    for i in x:\n        if int(str(i)[0]) % 2 == 0:\n            continue\n        result.append(i)\n    return sorted(result, key=lambda x: x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n\n    result = []\n    for i in xrange(len(x)):\n        temp = x[i]\n        if i == len(x)-1:\n            result.append(temp)\n        else:\n            while temp!= 0:\n                digit = int(temp%10)\n                if digit % 2 == 0:\n                    temp = temp/10\n                else:\n                    result.append(temp)\n                    break\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    else:\n        odd = [int(x) for x in str(x) if x % 2!= 0]\n        return sorted(odd)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    n = len(x)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [x]\n    else:\n        last = x[0]\n        for i in x[1:]:\n            if not any(i % d == 0 for d in range(2, 10)):\n                last = i\n        return x[0:1] + unique_digits(x[1:]) + [last]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    for x in x:\n        if all(i % 2 == 0 for i in x):\n            break\n        else:\n            res.append(x)\n    return sorted(res, reverse=True)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(x for x in x if sum(map(int, str(x))) % 2!= 0)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    assert all(x >= 0 for x in x)\n    digits = []\n    for n in x:\n        digits += str(n)\n    return sorted([int(i) for i in digits if i % 2!= 0])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x: return []\n    y = [int(x)]\n    while y:\n        x = y.pop()\n        if x % 10 in [2, 4, 6, 8]: continue\n        y.append(x)\n    return sorted(y)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(x for x in x if sum(map(int, str(x))) % 2 == 0)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    res = []\n    for n in x:\n        res.append(n % 10)\n        n /= 10\n    res.sort()\n    return [x for x in res if x % 2!= 0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            pass\n        else:\n            result.append(i)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Time Limit Exceeded\n    # DP\n    # dp[i][j] = True if there is no even number in [i, j)\n    dp = [[0 for _ in range(len(x) + 1)] for _ in range(len(x) + 1)]\n    dp[0][0] = True\n    for i in range(1, len(x) + 1):\n        for j in range(1, len(x) + 1):\n            if x[i - 1] % 2 == 0:\n                dp[i][j] = False\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return [i for i in x if dp[i][len(x)] == True]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    if len(x) == 1:\n        return x\n    for i in range(1, len(x)):\n        if x[i] % 2 == 0:\n            x.remove(x[i])\n    return sorted(x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    nums = []\n    for num in x:\n        if int(num) % 2 == 0:\n            continue\n        nums.append(num)\n    return sorted(nums)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    odd_list = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        else:\n            odd_list.append(i)\n    odd_list.sort()\n    return odd_list", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(x)\n    ans = []\n    for i in x:\n        if all(i % 2!= 0 for i in str(i)):\n            ans.append(i)\n    return ans", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    if len(x) == 1:\n        return [x]\n\n    # find all even numbers\n    evens = [e for e in x if e % 2 == 0]\n    if evens:\n        x.remove(evens[0])\n\n    # find all odd numbers\n    odds = [e for e in x if e % 2 == 1]\n    if odds:\n        x.remove(odds[0])\n\n    # find the smallest number\n    smallest = min(x)\n    x.remove(smallest)\n\n    # find the largest number\n    largest = max(x)\n    x.remove(largest)\n\n    # find the number of the smallest number\n    size = len(x)\n\n    # find the largest even number\n    largest_even = max(evens)\n    evens.remove(largest_even)\n\n    # find the largest odd number\n    largest_odd = max(odds)\n    odds.remove(largest_odd)\n\n    # find the number of the largest even number\n    largest_even_size = len(evens)\n\n    # find the number of the largest odd number\n    largest_odd_size = len(odds)\n\n    # find the number of the smallest number\n    smallest_size = len(x)\n\n    # find the number of the smallest even", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    res = []\n    for i in x:\n        if not i % 10:\n            res.append(i)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    for x in x:\n        if x % 10 == 0:\n            continue\n        else:\n            res.append(x)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for n in x:\n        digits.append(n % 10)\n    return sorted(set(digits))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n\n    if len(x) == 1:\n        return [x]\n\n    # First element\n    y = [x]\n\n    # Rest of the elements\n    for n in x[1:]:\n        d = n % 10\n        if d > 0:\n            y.append(n / 10 * 10 + d)\n        else:\n            y = unique_digits(y)\n\n    return sorted(set(y))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def is_even(x):\n        return x % 2 == 0\n    def is_odd(x):\n        return not is_even(x)\n    def unique_digits_helper(x):\n        if x == []:\n            return []\n        return list(filter(is_odd, x))\n    return sorted(unique_digits_helper(x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [y for y in x if sum(map(int, str(y))) % 2 == 0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    # Store the result\n    result = []\n    # If the input is a single number, return it.\n    if len(x) == 1:\n        result.append(x[0])\n        return result\n    # If the input is a list of even numbers, return empty list.\n    if all(num % 2 == 0 for num in x):\n        return []\n    # Convert the input list to a list of digits\n    digits = [num % 10 for num in x]\n    # Convert the list of digits to a list of lists of digits\n    digit_list = [[digits[start:end]] for start, end in zip(range(0, len(digits)), range(1, len(digits)))]\n    # Sort the list of lists of digits\n    digit_list = sorted(digit_list, key=lambda x: x[0])\n    # Return the result\n    result = []\n    for digit in digit_list:\n        if not any(digit[0] % 2 == 0 for digit in digit):\n            result.append(sum(digit[0] for digit in digit))\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n\n    digits = []\n    for i in x:\n        if i % 10 in [2, 4, 6, 8]:\n            continue\n        digits.append(i)\n\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        result.append(i)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # list of digits\n    digits = [int(i) for i in str(x)]\n\n    # store the digits\n    store = []\n\n    # check if the digits is even\n    for i in digits:\n        if i % 2 == 0:\n            return []\n        else:\n            store.append(i)\n\n    # sort the list of digits\n    store.sort()\n\n    return store", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def digits(x):\n        return [int(i) for i in str(x)]\n    \n    def filter_func(x):\n        return not any(i % 2 == 0 for i in digits(x))\n    \n    return list(filter(filter_func, x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = list(map(int, x))\n    res = []\n    for i in range(len(digits)-1, -1, -1):\n        if digits[i] % 2 == 0:\n            continue\n        if i == 0:\n            res.append(digits[i])\n        else:\n            if digits[i-1] == digits[i]:\n                res.append(digits[i])\n            else:\n                res.append(digits[i-1])\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    digits = set(str(x))\n    for digit in digits:\n        if digit % 2 == 0:\n            return []\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [ x for x in x if x % 10 in (0,1,2,3,4,5,6,7,8,9) ]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    result = []\n    for i in range(len(x)):\n        if all(digit % 2!= 0 for digit in str(x[i])):\n            result.append(x[i])\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = [int(x) for x in str(x)]\n    result = []\n    for i in range(len(digits)):\n        if digits[i] % 2 == 0:\n            result.append(digits[i])\n            digits[i] = 0\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for num in x:\n        digits.append(num % 10)\n    if len(digits) == 0:\n        return []\n    for num in digits:\n        if num % 2 == 0:\n            return []\n    return sorted(digits)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = [int(i) for i in str(x)]\n    if len(digits) == 0:\n        return []\n    else:\n        return sorted([digits[0], *(digits[1:] if i % 2 == 0 else digits)])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    if not x:\n        return []\n    # create a set of all elements\n    set = set(x)\n    # create a list of all elements that has even digit\n    even_digits = [int(i) for i in str(x[0])]\n    # create a list of all elements that has odd digit\n    odd_digits = [int(i) for i in str(x[0])]\n    # create a list of all elements that has odd digit\n    even_digits.extend([int(i) for i in str(x[0])])\n    # create a list of all elements that has even digit\n    odd_digits.extend([int(i) for i in str(x[0])])\n    # create a list of all elements that has odd digit\n    odd_digits.extend([int(i) for i in str(x[0])])\n    # create a list of all elements that has even digit\n    even_digits.extend([int(i) for i in str(x[0])])\n    # create a list of all elements that has odd digit\n    odd_digits.extend([int(i) for i in str", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # write your code here\n    return x", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    digit = list(str(x))\n    if any(d.isdigit() for d in digit):\n        digit = sorted([int(d) for d in digit])\n    return [int(x) for x in digit if not any(x % 2 == 0 for x in digit)]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    return [x for x in x if sum(int(i) for i in str(x)) % 2 == 0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    if not x:\n        return []\n    for num in x:\n        for digit in str(num):\n            if digit % 2 == 0:\n                break\n        else:\n            result.append(num)\n    result.sort()\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    seen = set()\n    result = []\n    for num in x:\n        if num in seen:\n            continue\n        seen.add(num)\n        if num % 10 == 0:\n            continue\n        result.append(num)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    if not x:\n        return []\n    odd = []\n    even = []\n    for i in x:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if even:\n        return sorted(odd + even)\n    return sorted(odd)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(filter(lambda x: not any(map(lambda y: int(y)%2, str(x))), x))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    ret = []\n    for i in x:\n        if i % 10!= 0:\n            ret.append(i)\n    return sorted(ret)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    d = list(map(int, str(x)))\n    return sorted([num for num in d if all(num % 2 for num in d)])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = list(x)\n    for i in x:\n        if i % 2 == 0:\n            x.remove(i)\n    return sorted(x)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    for num in x:\n        if any(num % i for i in range(10)):\n            continue\n        res.append(num)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    # Create a dictionary of even digits\n    evens = {}\n    for n in x:\n        if n % 10 in evens:\n            evens[n % 10] += 1\n        else:\n            evens[n % 10] = 1\n    # Filter even digits\n    result = []\n    for n in x:\n        if n % 10 not in evens:\n            result.append(n)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    elif len(x) == 1:\n        return x\n    else:\n        y = []\n        for i in x:\n            if i % 10!= 0:\n                y.append(i)\n        return sorted(y)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    odd = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        odd.append(i)\n    return sorted(odd)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    nums = sorted(x)\n    res = []\n    for num in nums:\n        if not any(num % d == 0 for d in range(1, 10)):\n            res.append(num)\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    return [x for x in x if not any(d % 2 == 0 for d in str(x))]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    elif len(x) == 1:\n        return x\n    else:\n        return sorted(x, key=lambda y: sum(map(int, str(y))))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(x for x in x if all(d%2!= 0 for d in str(x)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # write your code here\n    if not x:\n        return []\n    # find all even numbers\n    even = [num for num in x if num % 2]\n    # remove even numbers from the list\n    x = [x for x in x if x % 2]\n    # find all odd numbers\n    odd = [num for num in x if num % 2]\n    # find the sum of all odd numbers\n    odd_sum = sum(odd)\n    # find the largest odd number\n    largest_odd = max(odd)\n    # find the smallest odd number\n    smallest_odd = min(odd)\n    # find the difference between largest and smallest odd numbers\n    odd_difference = largest_odd - smallest_odd\n    # find the difference between odd sum and odd difference\n    odd_sum_difference = odd_sum - odd_difference\n    # find the list of numbers that have only odd digits\n    odd_list = [num for num in x if num % odd_difference == 0]\n    # find the list of numbers that have only odd digits and the difference \n    # between largest and smallest number is not equal to 0\n    odd_list = [num for num in odd_list if largest_odd - smallest_odd!= 0]\n    # find the list of numbers that have only", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    digits = [int(i) for i in str(x)]\n    if len(digits) == 1:\n        return [digits[0]]\n    return sorted([digits[i] for i in range(len(digits)) if digits[i] % 2 == 0])", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    elif all(x[i] % 2 == 0 for i in range(len(x))):\n        return []\n    else:\n        return [num for num in sorted(set(x)) if num % 2 == 0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    for i in x:\n        if i % 10!= 0:\n            res.append(i)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    for i in x:\n        if all(i % 2 == 0 for i in str(i)):\n            continue\n        res.append(i)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    ret = []\n    for i in x:\n        if i % 10 in (0, 2, 4, 6, 8):\n            continue\n        ret.append(i)\n    return sorted(ret)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    if not all(x):\n        return []\n    res = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        res.append(i)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        result.append(i)\n    return sorted(result, key=int)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    res = []\n    for i in range(len(x)):\n        if x[i] % 2 == 0:\n            continue\n        for j in range(i, len(x)):\n            if x[j] % 2 == 0:\n                continue\n            if x[i]!= x[j] and x[i] - x[j] == 1:\n                continue\n            res.append(x[i])\n    return res", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if num % 10 == 0:\n            continue\n        else:\n            result.append(num)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    if len(x) == 1:\n        return x\n    x = sorted(x)\n    return [int(x[i]) for i in range(len(x)) if int(x[i]) % 2!= 0]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # 1. sort the list\n    x = sorted(x)\n\n    # 2. find the sum of all elements\n    s = sum(x)\n\n    # 3. find the unique digits and store it in a dictionary\n    d = {}\n    for i in x:\n        d[i//10] += 1\n\n    # 4. find the elements that has even digits\n    even_digits = [i for i in d.keys() if d[i] % 2]\n\n    # 5. find the elements that has odd digits\n    odd_digits = [i for i in d.keys() if d[i] % 2 == 1]\n\n    # 6. find the elements that has no even digits\n    # and store it in a list\n    ans = []\n    for i in x:\n        if i % 10 in even_digits or i % 10 in odd_digits:\n            continue\n        ans.append(i)\n\n    # 7. sort the list\n    ans = sorted(ans)\n\n    return ans", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for n in x:\n        if all(c % 2!= 0 for c in str(n)):\n            result.append(n)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def check(x):\n        for i in xrange(len(x)):\n            if x[i] % 2!= 0:\n                return False\n        return True\n    return [x for x in x if check(x)]", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Solution using set\n    # Idea:\n    #  - Convert each element to a string\n    #  - Add each string to a set\n    #  - Convert the set to list\n    #  - Sort the list\n    #  - Convert the list back to a set\n    #  - Convert the set back to list\n    #  - Return the list\n    result = []\n    for i in x:\n        result.append(str(i))\n    result = sorted(list(set(result)))\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if len(str(i)) % 2 == 0:\n            continue\n        result.append(i)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(x for x in x if x % 2!= 0)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(x)\n    l = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        l.append(i)\n    return l", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for n in x:\n        if all(n % i for i in range(10)):\n            result.append(n)\n    return sorted(result, reverse=True)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n\n    # Convert x to a list of digits\n    digits = [int(i) for i in str(x)]\n\n    # Convert to list of pairs (i, j) where i is digit and j is the number of \n    # times that digit appears.\n    pairs = [(i, len([i for i in digits if i == i])) for i in digits]\n\n    # Filter out pairs that has even digits.\n    pairs = [i for i in pairs if not i[1]]\n\n    # Convert to list of digits\n    result = [int(i[0]) for i in pairs]\n\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def digits(x):\n        if x == 0:\n            return []\n        return [int(i) for i in str(x)]\n\n    def even_digits(x):\n        if x == 0:\n            return []\n        return [int(i) for i in str(x) if i % 2]\n\n    res = []\n    for i in x:\n        if not any(digits(i) == d for d in even_digits(i)):\n            res.append(i)\n    return sorted(res)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    digits = [int(n) for n in str(x)]\n    digits.sort()\n    result = []\n    for n in digits:\n        if n % 2 == 0:\n            return []\n        result.append(n)\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set(map(int, x)))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        result.append(i)\n    return sorted(result)", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Write your code here\n    if len(x) == 0:\n        return []\n    digits = set(map(int, str(x)))\n    return sorted(digits - set(map(int, str(x))))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    nums = []\n    for x in x:\n        while x > 0:\n            nums.append(x % 10)\n            x /= 10\n    return sorted(set(nums))", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    result = []\n    for n in x:\n        if n % 2 == 0:\n            continue\n        result.append(n)\n    result.sort()\n    return result", "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if any(i % d == 0 for d in range(2, 10)):\n            continue\n        result.append(i)\n    return sorted(result)"]]