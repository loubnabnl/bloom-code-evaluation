[["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = n - 1\n    if n == 1:\n        return 1\n    factors = []\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return prime_factors(n)[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        factors = []\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n        if n == 1:\n            return 1\n        else:\n            return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = 2\n    while True:\n        if n % factors == 0:\n            return factors\n        factors += 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 2\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n < 4:\n        return 4\n    if n % 4 == 0:\n        return 4\n    for i in range(4, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    factors = [2]\n    while n % 2!= 0:\n        n //= 2\n        factors.append(2)\n    for factor in factors:\n        while n % factor == 0:\n            n //= factor\n            factors.append(factor)\n    return factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_factor(n, candidate):\n        return n % candidate == 0\n\n    if n == 1:\n        return 1\n\n    factors = []\n    for candidate in range(2, int(n ** 0.5) + 1):\n        if not is_factor(n, candidate):\n            continue\n        if candidate in factors:\n            continue\n        factors.append(candidate)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # base case\n    if n == 1:\n        return 1\n\n    # find the largest prime factor\n    for i in range(2, n // 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            if n <= 1:\n                return i\n            i += 1\n        else:\n            i += 1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    factors.extend(range(101, 1000, 2))\n    factors.extend(range(1001, 10000, 2))\n    factors.extend(range(10000, 100000, 2))\n    factors.extend(range(100000, 1000000, 2))\n    factors.extend(range(1000000, 10000000, 2))\n    factors.extend(range(10000000, 100000000, 2))\n    factors.extend(range(100000000, 1000000000, 2))\n    factors.extend(range(1000000000, 10000000000, 2))\n    factors.extend(range(10000000000, 100000000000, 2))\n    factors.extend(range(100000000000, 1000000000000, 2))\n    factors.extend(range(1000000000000, 10000000000000, 2))\n    factors.extend(range(10000000000000, 100000000000000, 2))\n    factors.extend(range(100000000000000, 1000000000000000, 2))\n    factors.extend(range(1000000000000000, 10000000000000000, 2))\n    factors.extend", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    for i in range(3, n // 2 + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return n\n    elif n < 2:\n        return n\n    else:\n        if n % 2 == 0:\n            return 2\n        else:\n            return largest_prime_factor(n // 2) + 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return i\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2\n    else:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n / 2\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            return i\n        i += 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # assert n > 1 and n is not a prime, n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n\n    factors = [2]\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n <= 1:\n        return n\n    for x in range(3, n//2 + 1, 2):\n        if n % x == 0:\n            return x\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n < 100:\n        return n\n    else:\n        if n % 2 == 0:\n            return 2\n        else:\n            p = 3\n            while p * p <= n:\n                if n % p == 0:\n                    return p\n                p += 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    factors = 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            factors += i\n            n /= i\n    if n > 1:\n        factors += n\n    return factors", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    factors = [2]\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    for i in range(7, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n == 3:\n        return 3\n    if n % 3 == 0:\n        return 3\n    if n == 5:\n        return 5\n    if n % 5 == 0:\n        return 5\n    if n == 7:\n        return 7\n    if n % 7 == 0:\n        return 7\n    if n == 11:\n        return 11\n    if n % 11 == 0:\n        return 11\n    if n == 13:\n        return 13\n    if n % 13 == 0:\n        return 13\n    if n == 17:\n        return 17\n    if n % 17 == 0:\n        return 17\n    if n == 19:\n        return 19\n    if n % 19 == 0:\n        return 19\n    if n == 23:\n        return 23\n    if n % 23 == 0:\n        return 23\n    if n == 29:\n        return 29\n    if n % 29 == 0:\n        return 29\n    if n == 31:\n        return 31\n    if n % 31 == 0:\n        return 31\n    if n == 37:\n        return 37\n    if n % 37 == 0:\n        return 37\n    if n == 41:\n        return 41\n    if n % 41 == 0:\n        return 41\n    if", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    # The while loop will run until n is a prime number\n    while n % 2 == 0 or n % 3 == 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n //= 3\n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n < 2:\n        return n\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    i = 5\n    while True:\n        i += 2\n        if n % i == 0:\n            return i\n        if i * i > n:\n            break", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    for x in range(2, int(n ** 0.5) + 1):\n        if n % x == 0:\n            return x\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    elif n <= 9:\n        return n\n    elif n <= 25:\n        return n\n    else:\n        return largest_prime_factor(n // 2) if n % 2 == 0 else largest_prime_factor(n // 2 + 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        raise ValueError('n must be > 1')\n    if n == 1:\n        return 1\n    factors = sorted(factorize(n), key=lambda x: x[0])\n    for f in factors:\n        if f[0] >= 2:\n            return f[0]\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    elif n < 4:\n        return 2\n    elif n % 2 == 0 or n % 3 == 0:\n        return 2\n    else:\n        return 3", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n <= 3:\n        return n\n    factors = set()\n    while n % 2 == 0:\n        n //= 2\n        factors.add(2)\n    while n % 3 == 0:\n        n //= 3\n        factors.add(3)\n    for i in range(5, n, 2):\n        if n % i == 0:\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    if n < 10:\n        return n\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return n\n    if n < 1000:\n        return largest_prime_factor(n // 2)\n    if n < 10000:\n        return largest_prime_factor(n // 3)\n    if n < 100000:\n        return largest_prime_factor(n // 5)\n    if n < 1000000:\n        return largest_prime_factor(n // 7)\n    if n < 10000000:\n        return largest_prime_factor(n // 11)\n    if n < 100000000:\n        return largest_prime_factor(n // 13)\n    if n < 1000000000:\n        return largest_prime_factor(n // 17)\n    if n < 10000000000:\n        return largest_prime_factor(n // 19)\n    if n < 100000000000:\n        return largest_prime_factor(n // 23)\n    if n < 1000000000000:\n        return largest_prime_factor(n // 29)\n    if n < 100000000000000:\n        return largest_prime_factor(n // 31)\n    if n < 1000000000000000:\n        return largest_prime_factor(n // 37)\n    if n < 10000000000000000:\n        return largest_prime_factor(", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"n must be > 1 and not a prime\")\n\n    # largest_prime_factor(4) = 2\n    # largest_prime_factor(4) = 2\n    # largest_prime_factor(9) = 3\n    # largest_prime_factor(9) = 3\n    # largest_prime_factor(16) = 4\n    # largest_prime_factor(16) = 4\n    # largest_prime_factor(25) = 5\n    # largest_prime_factor(25) = 5\n    # largest_prime_factor(49) = 7\n    # largest_prime_factor(49) = 7\n    # largest_prime_factor(64) = 8\n    # largest_prime_factor(64) = 8\n    # largest_prime_factor(81) = 9\n    # largest_prime_factor(81) = 9\n    # largest_prime_factor(100) = 10\n    # largest_prime_factor(100) = 10\n    # largest_prime_factor(144) = 12\n    # largest_prime_factor(144) = 12\n    # largest_prime_factor(200) = 2\n    # largest_prime_factor(200) = 2\n    # largest_prime_factor(225) = 3\n    # largest_prime_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n == 3:\n        return 3\n    if n % 3 == 0:\n        return 3\n    for i in range(5, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n < 2:\n        return n\n    else:\n        return max(largest_prime_factor(n // p) for p in primes(n) if n % p == 0)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    return max(largest_prime_factor(n // 2), largest_prime_factor(n - 1))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n == 1:\n        factors.append(1)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return n\n    if n <= 3:\n        return n\n    factors = [1] + range(2, n + 1)\n    for i in range(2, n + 1):\n        if not n % i:\n            factors.append(i)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n < 4:\n        return n\n    if n % 4 == 0:\n        return 4\n    for i in range(5, n // 2 + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    factors = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    factors = []\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            factors.append(i)\n    if len(factors) == 0:\n        return n\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n < 2:\n        return n\n    if n % 2 == 0:\n        return 2\n    num = 3\n    while n % num!= 0:\n        num += 2\n    return num", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    factors = []\n    for factor in range(2, n//2 + 1):\n        if n % factor == 0:\n            factors.append(factor)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # check for factors\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n\n    # check for square factors\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n\n    # check for power factors\n    if n % 2 ** 3 == 0:\n        return 2 ** 3\n    if n % 2 ** 5 == 0:\n        return 2 ** 5\n    if n % 2 ** 7 == 0:\n        return 2 ** 7\n    if n % 2 ** 11 == 0:\n        return 2 ** 11\n    if n % 2 ** 13 == 0:\n        return 2 ** 13\n\n    # check for prime factors\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for p in primes:\n        if n % p == 0:\n            return p\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # base case\n    if n == 1:\n        return 1\n    # check if n is prime\n    if not isprime(n):\n        return n\n    # check if n is a prime factor of itself\n    if n % n == 0:\n        return n\n    # check if n is a prime factor of any of its factors\n    for f in factors(n):\n        if not isprime(f):\n            return largest_prime_factor(f)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(n)\n    if n <= 1:\n        return n\n    s = 2\n    while s * s <= n:\n        if n % s == 0:\n            break\n        s += 1\n    return s", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        return n // largest_prime_factor(n // 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    # n = n - 1\n    # if n == 0:\n    #     return 1\n\n    # while n % 2 == 0:\n    #     n = n // 2\n    #     if n == 0:\n    #         return 1\n\n    # i = 3\n    # while i*i <= n:\n    #     if n % i == 0:\n    #         n = n // i\n    #         if n == 0:\n    #             return i\n    #     i += 2\n    #     if i*i<=n:\n    #         i += 2\n\n    # return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    if n <= 3:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n == 3:\n        return 3\n    if n % 3 == 0:\n        return 3\n    d = n\n    while d % 2 == 0:\n        d /= 2\n    while d % 3 == 0:\n        d /= 3\n    while d % 5 == 0:\n        d /= 5\n    while d % 7 == 0:\n        d /= 7\n    while d % 11 == 0:\n        d /= 11\n    while d % 13 == 0:\n        d /= 13\n    while d % 17 == 0:\n        d /= 17\n    while d % 19 == 0:\n        d /= 19\n    while d % 23 == 0:\n        d /= 23\n    while d % 29 == 0:\n        d /= 29\n    while d % 31 == 0:\n        d /= 31\n    while d % 37 == 0:\n        d /= 37\n    while d % 41 == 0:\n        d /= 41\n    while d % 43 == 0:\n        d /= 43\n    while d % 47 == 0:\n        d /= 47\n    while d % 53 == 0:\n        d /= 53\n    while d % 59 == 0:\n        d /= 59\n    while d % 61 == 0:\n        d /= 61\n    while d % 67 == 0:\n        d /=", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            n /= i\n            if n == 1:\n                return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(n)\n    if n < 2:\n        return 2\n    if n < 4:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n %", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    for i in range(7, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    factors = [2, n//2, n//4, n//8, n//16, n//32, n//64]\n    for i in range(len(factors)):\n        if n % factors[i] == 0:\n            return factors[i]\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    for i in range(7, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(n)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n %", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # assert n > 1 and n is not prime\n    if n < 2:\n        raise ValueError(\"n must be greater than 1\")\n\n    if n == 2:\n        return 2\n\n    if n % 2 == 0:\n        return 2\n\n    factors = [2, 3]\n    while n % factors[0] == 0:\n        factors.append(factors[0] * 2)\n\n    if n % factors[-1] == 0:\n        return factors[-1]\n\n    for factor in factors:\n        if factor > n:\n            return factor\n\n    raise ValueError(\"n is not a prime\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return n\n    factors = [2]\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # try to divide by all the primes less than n\n    for p in range(2, n):\n        if n % p == 0:\n            return p\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        raise ValueError('n must be > 1')\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    primes = []\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            break\n    else:\n        primes.append(i)\n    for i in range(int(n ** 0.5), n + 1, 2):\n        if n % i == 0:\n            break\n    else:\n        primes.append(i)\n    return max(primes)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    else:\n        return largest_prime_factor(n - 1) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return 2 if n <= 2 else largest_prime_factor(n // 2) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return largest_prime_factor(n // n - 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    factors = factors(n)\n    return max([factors[prime] for prime in factors])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Base case\n    if n <= 1:\n        return n\n    # Recursive case\n    else:\n        # Factor n\n        factors = factorize(n)\n        # Find largest prime factor\n        for factor in factors:\n            if is_prime(factor):\n                return factor\n        return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return n\n    # take the first prime that is larger than n\n    for p in range(2, n//2 + 1):\n        if n % p == 0:\n            return p\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        if n % 2 == 0:\n            return 2\n        else:\n            factors = []\n            for i in range(3, n // 2 + 1, 2):\n                if n % i == 0:\n                    factors.append(i)\n            if factors:\n                return max(factors)\n            else:\n                return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n < 4:\n        return n\n    if n % 3 == 0:\n        return 3\n    if n < 9:\n        return n\n    if n % 5 == 0:\n        return 5\n    if n < 25:\n        return n\n    if n % 7 == 0:\n        return 7\n    if n < 49:\n        return n\n    if n % 11 == 0:\n        return 11\n    if n < 99:\n        return n\n    if n % 13 == 0:\n        return 13\n    if n < 199:\n        return n\n    if n % 17 == 0:\n        return 17\n    if n < 499:\n        return n\n    if n % 19 == 0:\n        return 19\n    if n < 999:\n        return n\n    if n % 23 == 0:\n        return 23\n    if n < 1999:\n        return n\n    if n % 29 == 0:\n        return 29\n    if n < 4999:\n        return n\n    if n % 31 == 0:\n        return 31\n    if n < 9999:\n        return n\n    if n % 37 == 0:\n        return 37\n    if n < 19999:\n        return n\n    if n % 41 == 0:\n        return 41", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    factors = set(factor for factor in range(2, n + 1) if n % factor == 0)\n    largest = 1\n    for factor in factors:\n        if n / factor > largest:\n            largest = n / factor\n    return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError('n must be greater than 1')\n\n    if n < 2:\n        return n\n\n    # Trial division by 2 is the fastest way to find the largest prime factor.\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return i\n\n    # There is no prime factor greater than sqrt(n).\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    else:\n        return largest_prime_factor(n // 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return i\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    # check if n is prime\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    # 4 is the largest prime factor of 6\n    if n % 6 == 0:\n        return 4\n    # 7 is the largest prime factor of 42\n    if n % 7 == 0:\n        return 7\n    # 8 is the largest prime factor of 56\n    if n % 8 == 0:\n        return 8\n    # 9 is the largest prime factor of 99\n    if n % 9 == 0:\n        return 9\n    # 10 is the largest prime factor of 100\n    if n % 10 == 0:\n        return 10\n    # 11 is the largest prime factor of 110\n    if n % 11 == 0:\n        return 11\n    # 12 is the largest prime factor of 120\n    if n % 12 == 0:\n        return 12\n    # 13 is the largest prime factor of 150\n    if n % 13 == 0:\n        return 13\n    # 14 is the largest prime factor of 210\n    if n % 14 == 0:\n        return 14\n    # 15 is the largest prime factor of 220\n    if n % 15 == 0:\n        return 15\n    # 16", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n if n == 1 or n == 2 else 2 * largest_prime_factor(n // 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2\n    else:\n        return largest_prime_factor(n // 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    if n <= 2:\n        return 2\n    return max(largest_prime_factor(n // 2), largest_prime_factor(n - 1))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    factors = [2, 3]\n    while n > 1:\n        for factor in factors:\n            if n % factor == 0:\n                n //= factor\n                return factor\n        factors.append(n)\n        n //= n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Base case\n    if n <= 1:\n        return 1\n    # Use the Sieve of Eratosthenes to find the prime factors of n\n    # The sieve is a list of True and False, where False indicates a number\n    # that is not a prime. The sieve starts off with all numbers as True\n    # and then the list is iterated over, where every time a True is found,\n    # the number is marked as False. So the next time the list is iterated\n    # over, it will skip that number, since it is no longer a prime.\n    sieve = [True for _ in range(n + 1)]\n    for i in range(2, n + 1):\n        if sieve[i]:\n            for j in range(i * i, n + 1, i):\n                sieve[j] = False\n    # Find the largest prime factor in the sieve\n    for i in range(2, n + 1):\n        if sieve[i]:\n            return i\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        if n % 2 == 0:\n            return largest_prime_factor(n // 2)\n        else:\n            return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(n)\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    s = 2\n    while s < n:\n        if n % s == 0:\n            n //= s\n            s += 1\n        else:\n            s += 1\n    return s", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    factors = 2\n    while n % factors == 0:\n        factors = factors * factors\n\n    return factors", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n <= 3:\n        return n\n    if n <= 9:\n        return 3\n    if n <= 27:\n        return 5\n    if n <= 81:\n        return 7\n    if n <= 1279:\n        return 11\n    if n <= 32761:\n        return 13\n    if n <= 137439:\n        return 17\n    if n <= 274877:\n        return 19\n    if n <= 5497:\n        return 23\n    if n <= 11349:\n        return 29\n    if n <= 23471:\n        return 31\n    if n <= 3137:\n        return 37\n    if n <= 8001:\n        return 41\n    if n <= 15731:\n        return 43\n    if n <= 31749:\n        return 47\n    if n <= 6301:\n        return 53\n    if n <= 12791:\n        return 59\n    if n <= 24691:\n        return 61\n    if n <= 4941:\n        return 67\n    if n <= 9801:\n        return 71\n    if n <= 19999:\n        return 73\n    if n <= 39991:\n        return 79\n    if n <= 9901:\n        return 83\n    if n <= 19999:\n        return 89\n    if n <= 39991:\n        return 97\n    if", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"n must be > 1.\")\n    if n <= 2:\n        return n\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, n // 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        largest = 1\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                largest = i\n                n /= i\n                break\n        return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    # Find the largest prime factor of n. Start with the largest factor of n\n    # that's smaller than n/2.\n    for i in range(2, int(n/2) + 1):\n        if n % i == 0:\n            return i\n    # If n is even, the largest prime factor is n/2.\n    return n/2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return n\n    if n < 9:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 2\n\n    # factor n into a product of primes\n    factors = set()\n    while n!= 1:\n        factors.add(n % 10)\n        n //= 10\n    factors.add(n)\n\n    # find the largest prime factor of n\n    for f in factors:\n        if f > 1:\n            return f\n\n    return 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(largest_prime_factor(n // i) for i in range(3, int(n ** 0.5) + 1, 2))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n < 2:\n        return n\n    else:\n        return largest_prime_factor(n // 2) + 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n <= 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return largest_prime_factor(n // 2) if n % 2 == 0 else largest_prime_factor(n // 2 + 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    # for i in range(2, n):\n    #     if n % i == 0:\n    #         return i\n    # return None\n    i = 2\n    while n % i == 0:\n        n = n // i\n        i += 1\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    for p in range(2, int(math.sqrt(n)) + 1):\n        if n % p == 0:\n            return p\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    if n == 1:\n        return n\n    if n % 2 == 0:\n        return 2\n    # otherwise, n is odd\n    if n > 1:\n        p = 3\n        while p * p <= n:\n            if n % p == 0:\n                return p\n            p += 2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    # search for a factor that is a multiple of 2\n    while n % 2 == 0:\n        n //= 2\n    # search for a factor that is a multiple of 3\n    while n % 3 == 0:\n        n //= 3\n    # search for a factor that is a multiple of 5\n    while n % 5 == 0:\n        n //= 5\n    # search for a factor that is a multiple of 7\n    while n % 7 == 0:\n        n //= 7\n    # search for a factor that is a multiple of 11\n    while n % 11 == 0:\n        n //= 11\n    # search for a factor that is a multiple of 13\n    while n % 13 == 0:\n        n //= 13\n    # search for a factor that is a multiple of 17\n    while n % 17 == 0:\n        n //= 17\n    # search for a factor that is a multiple of 19\n    while n % 19 == 0:\n        n //= 19\n    # search for a factor that is a multiple of 23\n    while n % 23 == 0:\n        n //= 23\n    # search for a factor that is a multiple of 29\n    while n % 29 == 0:\n        n //= 29\n    # search for a factor that is", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Define a function that returns the prime factors of a number\n    def prime_factors(n):\n        if n == 1:\n            return []\n        elif n <= 1:\n            return []\n        else:\n            factors = []\n            for i in range(2, n):\n                if n % i == 0:\n                    factors.append(i)\n                    n //= i\n                else:\n                    break\n            else:\n                factors.append(n)\n            return factors\n\n    # Use prime_factors to find all the prime factors of n\n    factors = prime_factors(n)\n\n    # Use a set to keep only the largest prime factor\n    largest = max(factors, key=factors.count)\n    return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2\n    else:\n        return largest_prime_factor(n // 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # This is the same algorithm as the one in the Wikipedia article.\n    #\n    # We need to find the largest prime factor of n. The largest prime factor\n    # must be larger than n/2. Let's find all prime factors of n, then take the\n    # largest of those.\n    #\n    # Let p be a prime factor of n. If n is divisible by p, then p is a prime\n    # factor of n. So, if we can find all prime factors of n, we can find the\n    # largest prime factor of n.\n    #\n    # There is an algorithm to find all prime factors of n. Let's call it\n    # prime_factors(). It takes n as an argument and returns a list of all\n    # prime factors of n.\n    #\n    # We can use the same algorithm to find the largest prime factor of n.\n    # Let's call it largest_prime_factor(). It takes n as an argument and\n    # returns the largest prime factor of n.\n    #\n    # Let's define the two functions.\n    #\n    # >>> def prime_factors(n):\n    #...     factors = []\n    #...     i = 2\n    #...     while i * i <= n:\n    #...         if n % i == 0:", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(n)\n    if n == 1:\n        return 1\n    if n < 4:\n        return n\n    if n % 2 == 0:\n        return n\n    if n % 3 == 0:\n        return n\n    if n % 5 == 0:\n        return n\n    if n % 7 == 0:\n        return n\n    if n % 11 == 0:\n        return n\n    if n % 13 == 0:\n        return n\n    if n % 17 == 0:\n        return n\n    if n % 19 == 0:\n        return n\n    if n % 23 == 0:\n        return n\n    if n % 29 == 0:\n        return n\n    if n % 31 == 0:\n        return n\n    if n % 37 == 0:\n        return n\n    if n % 41 == 0:\n        return n\n    if n % 43 == 0:\n        return n\n    if n % 47 == 0:\n        return n\n    if n % 53 == 0:\n        return n\n    if n % 59 == 0:\n        return n\n    if n % 61 == 0:\n        return n\n    if n % 67 == 0:\n        return n\n    if n % 71 == 0:\n        return n\n    if n % 73 == 0:\n        return n\n    if n % 79 == 0:\n        return n\n    if n % 83 == 0:\n        return n\n    if n %", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    # Find the largest factor of n that is not a multiple of 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            break\n    else:\n        return n\n    # Now that we have the largest factor of n that is not a multiple of 2,\n    # remove it from n to get the largest prime factor\n    return largest_prime_factor(n // i)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        for i in range(3, n//2 + 1, 2):\n            if n % i == 0:\n                return i\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    for i in range(4, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(n)\n    if n < 2:\n        return n\n    factors = []\n    while n % 2 == 0:\n        n //= 2\n        factors.append(2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    # n is odd, so we will try to divide it by all primes <= sqrt(n)\n    largest = 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            largest = i\n            n //= i\n            break\n    return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n\n    factors = []\n    factors_of_n = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors_of_n.append(i)\n            n //= i\n            factors.append(i)\n\n    if n > 1:\n        factors.append(n)\n\n    for i in reversed(factors_of_n):\n        if i not in factors:\n            factors.remove(i)\n\n    return factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 2\n    else:\n        return 2 if n % 2 == 0 else largest_prime_factor(n // 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n <= 1:\n        return 1\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return i\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(n)  # make sure n is positive\n    # if n is prime, return n\n    if n <= 1:\n        return n\n\n    # if n is a power of 2, return 2\n    if n & (n - 1) == 0:\n        return 2\n\n    # start with the largest possible prime factor\n    max_factor = n\n    # loop through all the possible factors of n\n    for i in range(2, int(n ** 0.5) + 1):\n        # if n is divisible by i, then i is a factor\n        if n % i == 0:\n            # if i is larger than the current largest factor, update\n            if i > max_factor:\n                max_factor = i\n    return max_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    if n % 3 == 0:\n        return largest_prime_factor(n // 3)\n    if n % 5 == 0:\n        return largest_prime_factor(n // 5)\n    if n % 7 == 0:\n        return largest_prime_factor(n // 7)\n    if n % 11 == 0:\n        return largest_prime_factor(n // 11)\n    if n % 13 == 0:\n        return largest_prime_factor(n // 13)\n    if n % 17 == 0:\n        return largest_prime_factor(n // 17)\n    if n % 19 == 0:\n        return largest_prime_factor(n // 19)\n    if n % 23 == 0:\n        return largest_prime_factor(n // 23)\n    if n % 29 == 0:\n        return largest_prime_factor(n // 29)\n    if n % 31 == 0:\n        return largest_prime_factor(n // 31)\n    if n % 37 == 0:\n        return largest_prime_factor(n // 37)\n    if n % 41 == 0:\n        return largest_prime_factor(n // 41)\n    if n % 43 == 0:\n        return largest_prime_factor(n // 43)\n    if", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n\n    factors = [2, 3, 5, 7, 11, 13, 17, 19]\n\n    for factor in factors:\n        if n % factor == 0:\n            return factor\n\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return n\n    # Find the largest factor of n that is less than sqrt(n).\n    limit = int(math.sqrt(n))\n    for i in range(2, limit + 1):\n        if n % i == 0:\n            n //= i\n            if i == n:\n                return i\n            else:\n                continue\n    # The largest factor of n that is less than sqrt(n) is n itself.\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return n\n    factors = [2]\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n == 1:\n        factors.append(n)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Base cases\n    if n <= 1:\n        return n\n    if n <= 2:\n        return 2\n    # Find the largest divisor of n which is also a prime\n    for p in range(3, int(n**0.5) + 1, 2):\n        if n % p == 0:\n            if p > n // p:\n                return n // p\n            else:\n                return p\n    # Return n if it is a prime\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    factors = []\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            factors.append(i)\n    if len(factors) == 0:\n        return n\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # i = 2\n    # while i * i <= n:\n    #     if n % i == 0:\n    #         n //= i\n    #     i += 1\n    # return n\n    if n == 1:\n        return 1\n    else:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    # The algorithm is simple, but not very efficient.\n    # We start with the largest factor and try to find a larger one.\n    # The trick is to keep track of the number of factors we have\n    # seen so far. If we find a prime factor, we add it to the\n    # factors and check if we can find a larger factor.\n    factors = []\n    while True:\n        if n % 2 == 0:\n            factors.append(2)\n            n //= 2\n            if n == 1:\n                return 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n //= 3\n            if n == 1:\n                return 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n //= 5\n            if n == 1:\n                return 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n //= 7\n            if n == 1:\n                return 7\n        else:\n            # Try all the factors of n / 2, n / 3, etc.\n            # and keep track of the number of factors so far.\n            # If we find a prime factor, we add it to the factors\n            # and check if we can find a larger factor.\n            for factor in range(2, n //", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    elif n < 2:\n        return n\n    else:\n        factors = {}\n        factors[1] = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                factors[i] = factors.get(i, 0) + 1\n                n /= i\n        return factors.get(max(factors.keys()), n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        if n % 2 == 0:\n            return 2\n        else:\n            return largest_prime_factor(n // 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    for i in range(5, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    i = 2\n    while n % i == 0:\n        n //= i\n        i += 1\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n % 2 == 0:\n        return 2\n\n    if n % 3 == 0:\n        return 3\n\n    if n % 5 == 0:\n        return 5\n\n    if n % 7 == 0:\n        return 7\n\n    if n % 11 == 0:\n        return 11\n\n    if n % 13 == 0:\n        return 13\n\n    if n % 17 == 0:\n        return 17\n\n    if n % 19 == 0:\n        return 19\n\n    if n % 23 == 0:\n        return 23\n\n    if n % 29 == 0:\n        return 29\n\n    if n % 31 == 0:\n        return 31\n\n    if n % 37 == 0:\n        return 37\n\n    if n % 41 == 0:\n        return 41\n\n    if n % 43 == 0:\n        return 43\n\n    if n % 47 == 0:\n        return 47\n\n    if n % 53 == 0:\n        return 53\n\n    if n % 59 == 0:\n        return 59\n\n    if n % 61 == 0:\n        return 61\n\n    if n % 67 == 0:\n        return 67\n\n    if n % 71 == 0:\n        return 71\n\n    if n % 73 == 0:\n        return 73\n\n    if n % 79 == 0:\n        return 79\n\n    if n % 83 == 0:\n        return 83\n\n    if n % 89 == 0:\n        return 89", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    if n <= 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n <= 3:\n        return 3\n    if n % 3 == 0:\n        return 3\n    if n <= 5:\n        return 5\n    if n % 5 == 0:\n        return 5\n    if n <= 7:\n        return 7\n    if n % 7 == 0:\n        return 7\n    if n <= 11:\n        return 11\n    if n % 11 == 0:\n        return 11\n    if n <= 13:\n        return 13\n    if n % 13 == 0:\n        return 13\n    if n <= 17:\n        return 17\n    if n % 17 == 0:\n        return 17\n    if n <= 19:\n        return 19\n    if n % 19 == 0:\n        return 19\n    if n <= 23:\n        return 23\n    if n % 23 == 0:\n        return 23\n    if n <= 29:\n        return 29\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    for i in range(5, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 2\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    if n < 2:\n        return 2\n    while n % 3 == 0:\n        factors.append(3)\n        n //= 3\n    if n < 2:\n        return 2\n    while n % 5 == 0:\n        factors.append(5)\n        n //= 5\n    if n < 2:\n        return 2\n    while n % 7 == 0:\n        factors.append(7)\n        n //= 7\n    if n < 2:\n        return 2\n    while n % 11 == 0:\n        factors.append(11)\n        n //= 11\n    if n < 2:\n        return 2\n    while n % 13 == 0:\n        factors.append(13)\n        n //= 13\n    if n < 2:\n        return 2\n    while n % 17 == 0:\n        factors.append(17)\n        n //= 17\n    if n < 2:\n        return 2\n    while n % 19 == 0:\n        factors.append(19)\n        n //= 19\n    if n < 2:\n        return 2\n    while n % 23 == 0:\n        factors.append(23)\n        n //= 23\n    if n < 2:\n        return 2\n    while n % 29 == 0:\n        factors.", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 2\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 4\n    while True:\n        if n % i == 0:\n            return i\n        i += 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n    if len(factors) > 1:\n        return max(factors)\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # base case\n    if n == 1:\n        return 1\n\n    # if n is a prime, return n\n    if n <= 1:\n        return n\n\n    # if n is composite, then it has a factor that is a prime\n    # we will use a loop to find the largest prime factor\n    # the loop stops when n == 1, so there is no need for a check\n    # if n == 1, it means that n is a prime number\n    for i in range(2, n):\n        if n % i == 0:\n            return largest_prime_factor(n/i)\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        for i in range(3, int(n**0.5) + 1):\n            if n % i == 0:\n                return i\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    n = n - 1\n    while True:\n        if n % 2 == 0:\n            return n\n        n = n / 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n % 2 == 0:\n        return largest_prime_factor(n // 2)\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n < 2:\n        return n\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    while True:\n        if n % i == 0:\n            return i\n        i += 6", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    else:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError('n must be greater than 1')\n    if n <= 2:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if i * i > n:\n                break\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # 1 and 2 are not prime.\n    if n < 2:\n        return n\n    # 3 is the first prime number.\n    if n == 3:\n        return 3\n    # 4 is the second prime number.\n    if n == 4:\n        return 4\n    # All factors of 4 are 2, so 4 is a prime number.\n    if n == 4:\n        return n\n    # All factors of 5 are 2 or 5, so 5 is a prime number.\n    if n == 5:\n        return n\n    # All factors of 6 are 2, 3, or 6, so 6 is a prime number.\n    if n == 6:\n        return n\n    # All factors of 7 are 2, 3, or 7, so 7 is a prime number.\n    if n == 7:\n        return n\n    # All factors of 8 are 2, 3, 4, or 8, so 8 is a prime number.\n    if n == 8:\n        return n\n    # All factors of 9 are 2, 3, or 9, so 9 is a prime number.\n    if n == 9:\n        return n\n    # All factors of 10 are 2, 5, or 10, so 10 is a prime number.\n    if n == 10:\n        return n\n    # All factors of 11 are 2, 3, 5, or 11, so 11", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        factor = 3\n        while n % factor == 0:\n            n //= factor\n            factor += 2\n        if n > 1:\n            return factor\n        else:\n            return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    factors = 2\n    while n % factors == 0:\n        n /= factors\n        factors += 1\n    return factors", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Note: this implementation is not very efficient. A better\n    # implementation would use a sieve of Eratosthenes.\n\n    if n < 2:\n        return 1\n\n    # Create a list of candidate prime factors.\n    factors = [2]\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n\n    # Remove the factors that are not prime.\n    while len(factors) > 0:\n        factor = factors.pop()\n        if factor > n:\n            break\n\n        if n % factor == 0:\n            factors.append(factor)\n            n //= factor\n\n    return factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n\n    # Find the largest prime factor of n\n    while n % 2 == 0:\n        n /= 2\n\n    # Loop through all the odd numbers\n    for i in range(3, n + 1, 2):\n        if n % i == 0:\n            n /= i\n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return _largest_prime_factor(n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n <= 1:\n        return n\n    if n < 3:\n        return n\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n < 1000:\n        return n\n    if n % 2 == 0:\n        return 2\n    n = n - 1\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n <= 3:\n        return n\n    elif n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    elif n % 3 == 0:\n        return largest_prime_factor(n // 3)\n    else:\n        factors = [2, 3, 5, 7, 11, 13, 17, 19]\n        for f in factors:\n            if n % f == 0:\n                return largest_prime_factor(n // f)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        for x in range(3, n // 2 + 1, 2):\n            if n % x == 0:\n                return x", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n <= 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    factors = []\n    while n % 2 == 0:\n        n /= 2\n        factors.append(2)\n    if n <= 1:\n        return 1\n    while n % 3 == 0:\n        n /= 3\n        factors.append(3)\n    if n <= 1:\n        return 1\n    while n % 5 == 0:\n        n /= 5\n        factors.append(5)\n    if n <= 1:\n        return 1\n    while n % 7 == 0:\n        n /= 7\n        factors.append(7)\n    if n <= 1:\n        return 1\n    while n % 11 == 0:\n        n /= 11\n        factors.append(11)\n    if n <= 1:\n        return 1\n    while n % 13 == 0:\n        n /= 13\n        factors.append(13)\n    if n <= 1:\n        return 1\n    while n % 17 == 0:\n        n /= 17\n        factors.append(17)\n    if n <= 1:\n        return 1\n    while n % 19 == 0:\n        n /= 19\n        factors.append(19)\n    if n <= 1:\n        return 1\n    while n % 23 == 0:\n        n /= 23\n        factors.append(23)\n    if n <= 1:\n        return 1\n    while n % 29 == 0:\n        n /= 29\n        factors.append(29)\n    if", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    #  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    for i in range(5, n//2, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        largest = 3\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                largest = i\n                n //= i\n                break\n        return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError('n must be > 1')\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        raise ValueError('n must be at least 2.')\n\n    if n <= 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n % 2 == 0:\n        return 2\n\n    i = 3\n    while n % i == 0:\n        n //= i\n        i += 1\n\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    else:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return n\n    elif n == 2:\n        return 2\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return i\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return n\n    if n & 1 == 0:\n        return n\n    if n & 3 == 0:\n        return n\n    if n & 5 == 0:\n        return n\n    if n & 7 == 0:\n        return n\n    if n & 11 == 0:\n        return n\n    if n & 13 == 0:\n        return n\n    if n & 17 == 0:\n        return n\n    if n & 19 == 0:\n        return n\n    if n & 23 == 0:\n        return n\n    if n & 29 == 0:\n        return n\n    if n & 31 == 0:\n        return n\n    if n & 37 == 0:\n        return n\n    if n & 41 == 0:\n        return n\n    if n & 43 == 0:\n        return n\n    if n & 47 == 0:\n        return n\n    if n & 53 == 0:\n        return n\n    if n & 59 == 0:\n        return n\n    if n & 61 == 0:\n        return n\n    if n & 67 == 0:\n        return n\n    if n & 71 == 0:\n        return n\n    if n & 73 == 0:\n        return n\n    if n & 79 == 0:\n        return n\n    if n & 83 == 0:\n        return n\n    if n & 89 == 0:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n <= 3:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 2\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 2\n    elif n == 9:\n        return 3\n    elif n == 10:\n        return 5\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 2\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 2\n    elif n == 15:\n        return 3\n    elif n == 16:\n        return 5\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 2\n    elif n == 19:\n        return 3\n    elif n == 20:\n        return 5\n    elif n == 21:\n        return 7\n    elif n == 22:\n        return 19\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 2\n    elif n == 25:\n        return 3\n    elif n == 26:\n        return 5\n    elif n == 27:\n        return 7\n    elif n == 28:\n        return 11\n    elif n == 29:\n        return 23\n    elif n == 30:\n        return 29\n    elif n == 31:\n        return 31", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    factors = set(range(2, n + 1)) - set([2 * i for i in range(2, n//2 + 1)])\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    for i in range(3, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # This is a simple implementation of the Sieve of Eratosthenes.\n    # It will be more efficient if you use a Sieve of Eratosthenes.\n    # See: https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n    # See: https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test\n    # See: https://en.wikipedia.org/wiki/Prime_factorization\n\n    # Initialize all values to True\n    is_prime = [True] * (n + 1)\n\n    # Mark multiples of 2 as False\n    is_prime[0] = is_prime[1] = False\n\n    # Mark multiples of 3 as False\n    is_prime[2] = False\n\n    # Mark multiples of 5 as False\n    is_prime[3] = False\n\n    # Mark multiples of 7 as False\n    is_prime[4] = False\n\n    # Mark multiples of 11 as False\n    is_prime[5] = False\n\n    # Mark multiples of 13 as False\n    is_prime[6] = False\n\n    # Mark multiples of 17 as False\n    is_prime[7] = False\n\n    # Mark multiples of 19 as False\n    is_prime[8] = False\n\n    # Mark multiples of 23 as False\n    is_prime[9] = False\n\n    # Mark multiples of 29 as False\n    is_prime[10] = False\n\n    # Mark multiples of 31 as False", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = [i for i in range(2, n + 1) if n % i == 0]\n    if not factors:\n        return n\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n <= 1:\n        return n\n    n = n - 1\n    while n % 2 == 0:\n        n = n / 2\n    while n % 3 == 0:\n        n = n / 3\n    while n % 5 == 0:\n        n = n / 5\n    while n % 7 == 0:\n        n = n / 7\n    while n % 11 == 0:\n        n = n / 11\n    while n % 13 == 0:\n        n = n / 13\n    while n % 17 == 0:\n        n = n / 17\n    while n % 19 == 0:\n        n = n / 19\n    while n % 23 == 0:\n        n = n / 23\n    while n % 29 == 0:\n        n = n / 29\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            n //= i\n            i = i - 1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    for i in range(7, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n"]]