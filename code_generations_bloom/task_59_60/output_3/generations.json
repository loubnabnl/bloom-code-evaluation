[["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Init\n    is_prime = [True] * (n + 1)\n    max_prime_factor = 2\n\n    # Calculate factors of n\n    for i in range(2, n + 1):\n        if is_prime[i]:\n            for j in range(i, n + 1, i):\n                is_prime[j] = False\n\n    # Search for largest prime factor\n    for i in range(2, n + 1):\n        if is_prime[i]:\n            max_prime_factor = i\n            break\n\n    return max_prime_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    if n == 1:\n        return 1\n\n    prime_list = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            prime_list.append(i)\n            while n % i == 0:\n                n = n / i\n            n = n / i\n\n    return prime_list[0]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    num = n\n    facs = []\n    while num > 1:\n        facs.append(num)\n        num //= 2\n    for fac in reversed(facs):\n        if n % fac == 0:\n            return fac\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    for i in range(2, n // 2):\n        if n % i == 0:\n            break\n    else:\n        return n\n    return largest_prime_factor(n // i)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = [2, 3]\n    while n % 2 == 0:\n        n //= 2\n    while n % 3 == 0:\n        n //= 3\n    for i in range(5, int(n **.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n            break\n    return factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)         # force int type\n    if n <= 1:\n        return 1\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n / 2)\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n            if n == 1:\n                return i\n        i += 1\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            n //= i\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    f = 2\n    n //= f\n    while n > 1:\n        f = n // f\n        if f * f > n:\n            return f\n        n //= f\n    return f", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n\n    # Try all divisors of n to see if any is a prime factor.\n    divisors = [1] + [(n // divisor) for divisor in range(2, int(n ** 0.5) + 1)]\n    for divisor in divisors:\n        if divisor > 1:\n            if divisor > n:\n                break\n            if divisor == n:\n                return divisor\n        else:\n            return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the largest factor of n that is less than n/2.\n    f = 2\n    while f*f <= n:\n        if n % f == 0:\n            return f\n        f += 1\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors = [2, 3, 5]\n    for f in prime_factors:\n        if n % f == 0:\n            return f\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # a list of candidate factors\n    factors = []\n\n    # perform a sieve to get a list of all factors\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n\n    # sort the factors in descending order\n    factors.sort()\n\n    # start a counter\n    count = 2\n\n    # look at each factor in descending order\n    while count < len(factors):\n        i = factors[count]\n        if i > 2:\n            # if the current factor is not divisible by any previous factor\n            if i % factors[count - 1] == 0:\n                # remove the factor\n                factors.pop(count - 1)\n                count -= 1\n\n        count += 1\n\n    # return the last remaining factor\n    return factors[-1]\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    if n == 1 or n < 2:\n        return n\n\n    for p in range(2, int(n**0.5) + 1):\n        if n % p == 0:\n            return p\n        elif n % (p - 1) == 0:\n            return p - 1\n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    result = 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            result = i\n            break\n    return result", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    factors = []\n    while True:\n        factors.append(n)\n        factor, n = n // 2, n - factor * 2\n        if n < 2:\n            break\n    primes = [p for p in range(2, n) if p > n // 2]\n    return max(primes) if primes else n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    factors = factors_of(n)\n    max_factors = 1\n    for factor in factors:\n        if factor > max_factors:\n            max_factors = factor\n    return max_factors", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(n)\n    if not n:\n        return n\n    elif n == 1:\n        return n\n    else:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\n                 67, 71, 73, 79, 83, 89, 97]\n        for p in primes:\n            if n % p == 0:\n                return p\n        return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n //= 2\n    while n % 2:\n        n //= 2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return n\n    else:\n        largest_factor = 2\n        while n % largest_factor!= 0:\n            largest_factor += 1\n            if largest_factor > n:\n                return n\n            if largest_factor == n:\n                return largest_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    # list of potential prime factors\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\n             67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,\n             131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\n             197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269,\n             271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349,\n             353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431,\n             433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,\n             509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\n             601, 607, 613, 617, 619, 631, 641, 643, 647, 653", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            return n / i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not n:\n        return 1\n    factors = []\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            factors.append(i)\n    factors.sort(key=lambda x: x*x)\n    return factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # If n is even or a prime, n is its own prime factor\n    if n % 2 == 0 or n < 2:\n        return n\n\n    # Get the largest factor of n that is less than sqrt(n)\n    factor = 2\n    while factor * factor < n:\n        if n % factor == 0:\n            break\n        factor += 1\n\n    # Return the largest prime factor\n    return factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not 1 <= n <= 100:\n        return n\n    # TODO can this be done faster?\n    f = 2\n    while n % f == 0:\n        n //= f\n        f += 1\n    return f", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = 2\n    while n % factors!= 0:\n        factors += 1\n    return factors", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        for x in range(3, int(n**0.5) + 1, 2):\n            if n % x == 0:\n                return x\n            else:\n                return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return i\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    if n > 1:\n        for p in primes:\n            if n % p == 0:\n                n //= p\n                return p\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        for i in range(2, n // 2 + 1):\n            if n % i == 0:\n                return i\n        return n\n'''", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError('Number must be > 1 and not a prime')\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    prime = 2\n    while n % prime == 0:\n        n /= prime\n        prime += 1\n    return prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 2:\n        return n\n    if n & 1 == 0:\n        n //= 2\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n            return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors = [2]\n    for i in range(3, n // 2 + 1):\n        if n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    return max(prime_factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    largest = 2\n    for i in range(5, n - 1, 6):\n        if n % i == 0:\n            largest = i\n            break\n    return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # A simple implementation of the Sieve of Eratosthenes.\n    sieve = [True] * (n // 2) + [False] * (n % 2)\n    for i in range(3, n//2 + 1, 2):\n        if sieve[i // 2]:\n            sieve[i*i // 2::i] = [False] * ((n - i*i // 2) // i)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19]\n    prime_factors = []\n    for i in range(len(primes)):\n        if sieve[i]:\n            while sieve[(i + primes[i]) // 2] == True:\n                prime_factors.append(primes[i] * (i + primes[i]) // 2)\n                sieve[(i + primes[i]) // 2] = False\n    return prime_factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return largest_prime_factor(n // 2) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n\n    # Initialize the max factor to the first candidate.\n    max_factor = 2\n\n    # Compute the next candidate after factoring the current one.\n    for factor in range(3, int(math.ceil(math.sqrt(n)) + 1), 2):\n        if n % factor == 0:\n            # The current candidate is not prime, so we go on to the next one.\n            continue\n        else:\n            # The current candidate is prime.\n            max_factor = factor\n            break\n\n    return max_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return n\n    if n % 2 == 0:\n        return largest_prime_factor(n//2)*2\n    if n > 2:\n        i = 3\n        while i <= n:\n            if n % i == 0:\n                return i\n            i += 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 1:\n        factors.append(n)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"n must be greater than 1\")\n\n    factors = [1]\n    while True:\n        for factor in factors:\n            if n % factor == 0:\n                return factor\n        if n == 1:\n            return 1\n        factors.append(n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0 and n > 2:\n        return 2\n    if n < 4:\n        return 4\n    if n % 4 == 0 and n > 4:\n        return 4\n    sieve = [True] * (n // 4)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if sieve[i]:\n            sieve[i * i::i] = [False] * ((n - 1) // (i * i) + 1)\n    for i in range(1, int(n ** 0.5) + 1, 2):\n        if sieve[i]:\n            for j in range(i * i, n + 1, i):\n                if sieve[j]:\n                    sieve[j] = False\n                    return i\n    return 4", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Idea: Find all factors in the range 2.. n/2. If any factor is prime,\n    # and larger than the factors found so far, then it is the largest prime factor.\n\n    # You can do this by trial division:\n    # for i in range(2, int(n/2) + 1):\n    #     if n % i == 0:\n    #         return i\n\n    # Or by using the sieve of Eratosthenes (below)\n\n    largest = 1\n    for i in range(2, int(n/2) + 1):\n        if n % i == 0:\n            largest *= i\n            largest //= i\n    return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return None\n    while n % 2 == 0:\n        n //= 2\n    i = 3\n    while n % i == 0:\n        n //= i\n        i += 2\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    is_prime = lambda n: not any(n % p for p in range(2, n // 2 + 1))\n\n    prime = 2\n    for factor in range(3, int(n ** 0.5) + 1, 2):\n        if is_prime(factor):\n            n //= factor\n            prime = factor\n            break\n\n    return prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 2:\n        return n\n    elif n % 2 == 0:\n        return 2\n    else:\n        f = 2\n        while f <= int(math.sqrt(n)):\n            if n % f == 0:\n                n = n / f\n            else:\n                f += 1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = [2]\n    while n % factors[-1]!= 0:\n        n //= factors[-1]\n        factors.append(factors[-1])\n    return factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    for x in range(2, int(n ** 0.5) + 1):\n        if not x % n:\n            return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    primes = [2, 3]\n    for i in range(4, n // 2 + 1, 2):\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n    return primes[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    elif n == 2:\n        return 2\n    else:\n        return find_largest_prime_factor(n, 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return n\n\n    prime_factors = [2]\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    if n == 1:\n        return prime_factors[-1]\n\n    if n > 1:\n        prime_factors.append(n)\n\n    return max(prime_factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return 2\n    else:\n        factors = [1, n]\n        while factors[-1] <= sqrt(n):\n            factors.append(factors[-1] * 2)\n        for i in range(len(factors) - 1, -1, -1):\n            if n % factors[i] == 0:\n                if factors[i] > factors[i + 1]:\n                    return factors[i]\n                else:\n                    factors[i + 1] = factors[i]\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        raise ValueError('n must be a positive integer')\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        factors = [int(i) for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0]\n        return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    factors = set([i for i in range(2, n) if n % i == 0])\n    factors.remove(1)\n    while len(factors) > 1:\n        factors = set([i for i in range(2, n // factors[-1]) if n % i == 0])\n        factors.remove(1)\n    return factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n <= 1:\n        return n\n    if n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    if n % 3 == 0:\n        return largest_prime_factor(n // 3)\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n        i += 6\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    result = 1\n    if n < 2:\n        return n\n    for i in range(2, n + 1):\n        if n % i == 0:\n            result = i\n            while n % i == 0:\n                n /= i\n        if n == 1:\n            break\n    return result", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return 1\n    s = 1\n    while s < n:\n        if n % s == 0:\n            n /= s\n            continue\n        s += 1\n    if n!= 1:\n        return n\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for p in range(3, int(math.sqrt(n)) + 1):\n        if n % p == 0:\n            return p\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for x in range(2, int(n ** 0.5) + 1):\n        if n % x == 0:\n            return x\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = []\n    prime_factors = []\n    while n:\n        m, n = divmod(n, 2)\n        if m == 0:\n            factors.append(2)\n        else:\n            factors.append(m)\n\n    factors.sort(reverse=True)\n\n    for i in factors:\n        if i > 1:\n            prime_factors.append(i)\n    return prime_factors[0]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not (n > 1):\n        raise ValueError('n should be a positive integer.')\n    factors = set()\n    for factor in range(2, int(n ** 0.5) + 1):\n        if n % factor == 0:\n            factors.add(factor)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            n //= i\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n if n <= 1 or n not in primes else next(p for p in primes if p**n <= n)\n\nprimes = set(p**k for k in range(1, 101) if all(p**(k - i) % k == 0 for i in range(1, k)))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return _get_factor(n, _prime_factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not isprime(n):\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        # 2 is a factor of n\n        n /= 2\n    # Find the largest prime factor of n\n    for i in range(3, int(math.ceil(math.sqrt(n)) + 1)):\n        if n % i == 0:\n            # Divide n by i\n            n /= i\n        else:\n            break\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n    is_prime[2] = True\n    for i in range(3, n + 1, 2):\n        if is_prime[i]:\n            for j in range(3, i + 1, 2):\n                is_prime[i] = False\n                if i % j == 0:\n                    break\n    return 2 if is_prime[n] else n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return next(i for i in range(2, int(n**0.5)+1) if not n % i)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1\n    assert not n % 2\n    assert not n % 3\n    assert not n % 5\n    assert not n % 7\n    assert not n % 11\n    assert not n % 13\n    assert not n % 17\n    assert not n % 19\n\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n\n    half = n // 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n\n    if half % 2 == 0:\n        return 2\n    if half % 3 == 0:\n        return 3\n    if half % 5 == 0:\n        return 5\n    if half % 7 == 0:\n        return 7\n    if half % 11 == 0:\n        return 11\n    if half % 13 == 0:\n        return 13\n    if half % 17 == 0:\n        return 17\n    if half % 19 == 0:\n        return 19\n\n    return largest_prime_factor(half)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    for p in range(3, n // 2 + 1, 2):\n        if n % p == 0:\n            return p\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n\n    s = 1\n    while True:\n        s += 1\n        if s * s > n:\n            break\n        if s * s % n == 0:\n            break\n    return s", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return next(prime_factor(n))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    candidates = list(range(2, n)) + [n]\n    for candidate in candidates:\n        if not isprime(candidate):\n            factors = primefactors(candidate)\n            for primefactor in factors:\n                if n % candidate == 0:\n                    n //= candidate\n                    return n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n % 2 == 0:\n        return 2\n\n    for i in range(3, n // 2 + 1, 2):\n        if n % i == 0:\n            return i\n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n\n    possible_factors = range(2, n + 1)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19]\n    for p in primes:\n        if p * p > n:\n            break\n\n        while p * possible_factors[-1] <= n:\n            possible_factors.pop()\n\n        possible_factors.append(p)\n\n    return possible_factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    num = 2\n    while num * num <= n:\n        if n % num == 0:\n            break\n        num += 1\n    return num", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return n\n    if n < 4:\n        return 2\n    if n % 2 == 0 or n % 3 == 0:\n        return largest_prime_factor(n // 2)\n    n = int(n ** 0.5) + 1\n    m = n >> 1\n    while m % 2 == 0:\n        m //= 2\n    while m % 3 == 0:\n        m //= 3\n    while m > 1:\n        if m % n == 0:\n            return n\n        if n * n > m:\n            return m\n        n += 1\n        m = n >> 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = n - 1\n    counter = 2\n    while counter * counter <= n:\n        if n % counter == 0:\n            n //= counter\n            counter += 1\n        else:\n            counter += 1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if not is_power_of_two(n % i):\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1 and n not in {2, 3, 5, 7, 11, 13, 17}\n\n    def is_prime(num: int):\n        \"\"\"Return True if the given number is prime, False otherwise.\n        >>> is_prime(3)\n        False\n        >>> is_prime(13195)\n        False\n        >>> is_prime(2048)\n        True\n        \"\"\"\n        if num == 1:\n            return False\n\n        for i in range(2, num // 2 + 1):\n            if num % i == 0:\n                return False\n\n        return True\n\n    for i in range(2, n + 1):\n        if is_prime(i):\n            if n % i == 0:\n                return i\n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not n:\n        return 1\n    elif n < 4:\n        return n\n    else:\n        return max([largest_prime_factor(n // int(n **.5)) for n in factorint(n)])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0 and n!= 2:\n        return largest_prime_factor(n // 2)\n    else:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = [2]\n    while n % 2 == 0:\n        n //= 2\n        factors.append(2)\n    if n >= 3:\n        factors.append(3)\n    for i in range(5, n//2, 2):\n        if n % i == 0:\n            factors.append(i)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    is_prime = lambda n: all(n % x for x in range(2, int(n ** 0.5) + 1))\n    if not is_prime(n):\n        return False\n    while True:\n        p = n\n        i = 2\n        while i < n / p:\n            if n % p == 0:\n                n /= p\n                return p\n            i += 1\n        n /= p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        raise ValueError('n must be greater than 1')\n\n    # we use these lists to keep track of factors and their largest prime factor\n    factors = []\n    largest_prime_factor = 1\n    # factorize the number\n    for factor in range(2, int(n**0.5) + 1):\n        if n % factor == 0:\n            # we have found a factor\n            # store it and check if it is a prime\n            factors.append(factor)\n            # if it is, we remember its largest prime factor\n            if factor > largest_prime_factor:\n                largest_prime_factor = factor\n    # if we found a factor, we return its largest prime factor\n    if len(factors) > 0:\n        return largest_prime_factor\n    # otherwise, return 0\n    return 0\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    largest = 2\n    while True:\n        if n % largest == 0:\n            if largest * largest > n:\n                return largest\n            else:\n                largest *= largest\n        else:\n            largest += 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    is_prime = lambda n: any(n % i == 0 for i in range(2, int(n**0.5) + 1))\n    largest = n\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime(i):\n            if i > largest:\n                largest = i\n    return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n    # stop checking when we find a factor of n or when we hit the end of the\n    # list of primes\n    for p in primes:\n        if n % p == 0:\n            return p\n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    return next_prime(int(n**0.5))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, n//2+1):\n        if n%i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    factors = 2\n    while True:\n        if n % factors == 0:\n            return factors\n        factors += 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2 or n % 2 == 0:\n        return 1\n    lpf = 2\n    for i in range(3, n//2 + 1):\n        if n % i == 0:\n            lpf = i\n            break\n    return lpf", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # This is a simple variation of the sieve of Eratosthenes.\n    # Idea: build up a list of the primes up to n/2 in a set.\n    # Then take the even numbers that aren't in the set. If they aren't prime,\n    # they will be divisible by a prime p > sqrt(n). Remove p from the set\n    # and try again.\n    primes = set(x for x in range(2, n // 2 + 1) if x in range(2, n // 2 + 1))\n    factors = set()\n\n    while n:\n        if n % 2:\n            if n in primes:\n                primes.remove(n)\n                factors.add(n)\n            n /= 2\n        else:\n            n = n // 2\n\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 2\n\n    # Find all prime factors\n    f = {}\n    p = list(range(2, n, 2))\n    while p:\n        for i in p:\n            if n % i == 0:\n                f[i] = f.get(i, 0) + 1\n                n //= i\n                p.remove(i)\n    # And return the largest\n    for key, val in f.items():\n        if val > 1:\n            return key", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, n // 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1 and n!= 2 and n!= 3\n    if n < 2:\n        return 2\n    # first find the smallest factor that is not a multiple of 2 or 3\n    x = n\n    while x % 2 == 0 or x % 3 == 0:\n        x /= 2\n    # now find the next smallest factor\n    while x % 2 == 0:\n        x /= 2\n    while x % 3 == 0:\n        x /= 3\n    # Now x is the largest factor that is not a multiple of 2 or 3.\n    return x", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = set()\n    while n > 1:\n        if n % 2 == 0:\n            factors.add(2)\n            n //= 2\n        elif n % 3 == 0:\n            factors.add(3)\n            n //= 3\n        elif n % 5 == 0:\n            factors.add(5)\n            n //= 5\n        elif n % 7 == 0:\n            factors.add(7)\n            n //= 7\n        elif n % 11 == 0:\n            factors.add(11)\n            n //= 11\n        elif n % 13 == 0:\n            factors.add(13)\n            n //= 13\n        elif n % 17 == 0:\n            factors.add(17)\n            n //= 17\n        elif n % 19 == 0:\n            factors.add(19)\n            n //= 19\n        elif n % 23 == 0:\n            factors.add(23)\n            n //= 23\n        elif n % 29 == 0:\n            factors.add(29)\n            n //= 29\n        elif n % 31 == 0:\n            factors.add(31)\n            n //= 31\n        else:\n            break\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n\n    max = 2\n    for i in range(3, n // 2 + 1, 2):\n        if n % i == 0:\n            n //= i\n            max = i\n\n    return max", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    factors = [2]\n    while n % 2 == 0:\n        n //= 2\n        factors.append(2)\n    if n >= 2:\n        factors.append(n)\n    for factor in factors:\n        if n % factor == 0:\n            return factor\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n == 3:\n        return 3\n    for i in range(3, n/2, 2):\n        if n % i == 0:\n            return i\n    return n\n\n\"\"\"\nIn this section we study the behaviour of the largest prime factor of n as a function of n.\nWe begin with the basic question: How large is the largest prime factor of n?\nIntuitively, the answer seems clear: the largest prime factor of n is the largest prime less than or equal to n. We\nwill see that this is not exactly true.\nFor example, the largest prime factor of 500 is 5, but the largest prime factor of 900 is 3.\nSo far we have defined the largest prime factor of n as the largest prime factor of n that is not n. We could\nalso define it as the largest prime factor of n that is less than or equal to n. This would cause no\ndifficulty. The next two theorems consider the size of the largest prime factor of n as a function of n.\nWe begin with a lower bound:\n\"\"\"", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # This solution uses the sieve of Eratosthenes to generate primes less than n.\n    # Only even numbers less than n are sieved, since the largest prime factor of n\n    # must be even if n is odd. Also, because the prime factorization of 2 is 2\n    # (the largest prime factor of 2 is 2), it is not necessary to sieve for\n    # primes less than 2.\n\n    # Generate an even sieve, since all the factors of n are even if n is odd.\n    # Note that even(n) is a built-in function that returns True if n is even, and\n    # False otherwise.\n    sieve = [2] * n\n    for i in range(3, n//2 + 1, 2):\n        if even(i):\n            sieve[i] = 0\n    # Print the primes\n    for i in range(1, n//2 + 1, 2):\n        if sieve[i] == 0:\n            print(i)\n\n    # Count how many times each even number less than n occurs in the sieve.\n    count = {i: 0 for i in range(2, n//2 + 1)}\n    for i in range(2, n//2 + 1):\n        if sieve", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError('An int is required.')\n\n    if not n > 1:\n        raise ValueError('An integer greater than 1 is required.')\n\n    # Base case. If n is a prime, the largest prime factor is itself.\n    if n <= 1:\n        return n\n\n    # n is not a prime, so there must be a largest prime factor.\n    p = 2\n    while p < n:\n        if n % p == 0:\n            return p\n        p += 1\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not isprime(n):\n        return n\n    primes = {}\n    for i in range(2, n + 1):\n        if n % i == 0:\n            n //= i\n            primes[i] = True\n    return max(primes, key=primes.get)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n <= 3:\n        return n\n    elif n <= 9:\n        return 3\n    else:\n        return 3 * largest_prime_factor(n // 3)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = []\n    for factor in range(2, n + 1):\n        if n % factor == 0:\n            factors.append(factor)\n            n /= factor\n    if n > 1:\n        factors.append(n)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    if n < 2:\n        return n\n\n    while True:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    while True:\n        for i in range(2, n // 2 + 1):\n            if n % i == 0:\n                n //= i\n                break\n        else:\n            return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n\n    # Initialise the partial factorization to 1\n    factorization = [1]\n    p = 2\n    while True:\n        if n % p == 0:\n            # Factor p is present\n            factorization.append(p)\n            # Compute the new factorization of n/p\n            factorization.extend(largest_prime_factor(n // p))\n        # If n is not divisible by p, then p is prime and must be in the factorization\n        else:\n            # The factorization of n/p is the same as the factorization of n\n            factorization.append(p)\n            break\n        p += 1\n\n    return max(factorization)\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        n = n / 2\n    else:\n        return n\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            n /= i\n            continue\n        if i * i > n:\n            break\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    # The problem with this algorithm is that it is O(n), since\n    # you need to try every number up to and including n.\n    #\n    # The largest number that will have a factor that is less than n is\n    # (n - 1), so that is the maximum number of iterations of the loop.\n    #\n    # You could stop the loop once you find a factor, but that means that\n    # you would have to run the algorithm again if there is a factor that\n    # is larger than the one you found.\n    #\n    # I think that the best way to do this is to use a function that is\n    # more powerful than just trial division. In this case, the sieve of\n    # Eratosthenes is a perfect choice.\n\n    factors = range(2, n + 1)\n    for factor in factors:\n        if n % factor == 0:\n            return factor\n    return n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n\n    max_p = 2\n    while n % max_p!= 0:\n        max_p = max_p + 1\n\n    return max_p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    for factor in range(2, int(n ** 0.5) + 1):\n        if n % factor == 0:\n            return factor\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for x in range(2, n//2):\n        if n % x == 0:\n            i = x\n            while i*i < n:\n                if n % i == 0:\n                    n = n / i\n                else:\n                    i += 1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    if n <= 9:\n        return 2\n\n    factors = []\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n /= i\n    return factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return n\n\n    factors = 2\n    while n % factors!= 0:\n        factors += 1\n\n    return factors", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n if n == 1 or n == 2 else 2 * largest_prime_factor(n // 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 2:\n        return 2\n    elif n == 3 or n == 5:\n        return n\n    factors = 2\n    while n % 2 == 0:\n        n //= 2\n        factors += 1\n    while n % 3 == 0:\n        n //= 3\n        factors += 1\n    while n % 5 == 0:\n        n //= 5\n        factors += 1\n    if factors > 2:\n        return n\n    else:\n        return 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # base case\n    if n <= 1:\n        return n\n\n    # recurse\n    factors = []\n    for factor in factors_of(n):\n        if not factor in factors:\n            factors.append(factor)\n\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return 2 if n <= 1 else largest_prime_factor(n // 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1 and n is not prime\n    num = 2\n    while not (n % num):\n        if num * num == n:\n            return num\n        num += 1\n    return num", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = {}\n    for i in range(1, n + 1):\n        if not i in factors:\n            factors[i] = 1\n        else:\n            factors[i] = factors[i] + 1\n    for i in range(2, n + 1):\n        if not i in factors:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for p in range(2, int(n**0.5) + 1):\n        if n % p == 0:\n            n //= p\n            return p\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    candidates = range(2, int(n**0.5) + 1)\n    for candidate in candidates:\n        if n % candidate == 0:\n            return candidate\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n\n    factors = [1, 2, 3, 5, 7, 11, 13, 17, 19]\n\n    for factor in factors:\n        if n % factor == 0:\n            return factor\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        raise ValueError('n must be >= 2, not {}'.format(n))\n    elif n <= 3:\n        return n\n    elif n <= 5:\n        return 2\n    elif n % 2 == 0 or n % 3 == 0:\n        return largest_prime_factor(int(n / 2))\n    else:\n        # Do a sieve of Eratosthenes to generate the primes\n        # 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,...\n        sieve = [True] * (n + 1)\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if sieve[i - 2]:\n                sieve[i * i - 1] = False\n        # Multiply the primes by 2 to get the next primes (primes squared)\n        for i in range(n + 1):\n            if sieve[i]:\n                sieve[i * i] = True\n        # For each number, see if it is divisible by any prime\n        for i in range(n + 1):\n            if sieve", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return n\n    elif n == 2:\n        return 2\n    else:\n        max_factor = 2\n        while n % max_factor!= 0:\n            if max_factor > n // max_factor:\n                break\n            max_factor += 1\n        return max_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(n)\n    if n % 2 == 0:\n        return 2\n    else:\n        return n + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(int(n))\n    result = n\n    while not isprime(result):\n        result = result / 2\n    return result", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    if n < 3:\n        return n\n    for i in range(3, int(n **.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 2\n    if n == 1:\n        return 1\n    i = 2\n    while n % i == 0:\n        n = n // i\n        i += 1\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            return divisor\n\n        divisor += 1\n\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, int(math.ceil(math.sqrt(n)) + 1)):\n        if n % i == 0:\n            return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n\n    factors = []\n    for x in range(2, int(n**0.5) + 1):\n        if n % x == 0:\n            factors.append(x)\n            if x > factors[-1] or x == factors[-1]:\n                break\n        else:\n            factors.append(1)\n    return factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    factors = [2]\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n            continue\n        else:\n            factors.append(n)\n    if n > 1:\n        factors.append(n)\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime = 2\n    while n % prime == 0:\n        n /= prime\n        prime += 1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n <= 1:\n        return n\n    largest = 2\n    count = 0\n    while True:\n        if n % largest == 0:\n            count += 1\n        if count == 2:\n            return largest\n        if count == n - 1:\n            break\n        largest += 1\n    return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    for i in xrange(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find all factors of n\n    factors = [x for x in range(2, n + 1) if n % x == 0]\n\n    # Remove all factors that are not primes\n    non_primes = []\n    for factor in factors:\n        if not is_prime(factor):\n            non_primes.append(factor)\n\n    # Remove all factors that are larger than n\n    for factor in non_primes:\n        if factor > n:\n            non_primes.remove(factor)\n\n    # Return the largest prime factor\n    return max(non_primes)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return n\n    factors = prime_factorization(n)\n    for i in range(1, len(factors)):\n        if factors[i] >= n:\n            return factors[i]\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = [2, n//2]\n    while n!= 1:\n        for f in factors:\n            if n % f == 0:\n                n //= f\n                break\n        else:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Base case - if n is 1, return 1\n    if n == 1:\n        return 1\n\n    # If n is a prime, return n\n    if n % 2 == 0 or n % 3 == 0:\n        return n\n\n    # n = 2 * m + 1\n    # This is a quadratic equation. We will use the quadratic formula.\n    # x = (-b +/- sqrt(b * b - 4 * a * c)) / (2 * a)\n    # b = 4 * n - 1\n    # a = 2\n    # c = 1\n    root1 = (-1 + sqrt(1 + 4 * n)) // 2\n    root2 = (-1 - sqrt(1 + 4 * n)) // 2\n    if root1 > n:\n        root1 = root2\n\n    # Check if either of the two roots is prime. If so, return it.\n    if root1 % 2 == 0 or root1 % 3 == 0:\n        return root1\n    elif root2 % 2 == 0 or root2 % 3 == 0:\n        return root2\n\n    # Otherwise, find the next largest prime factor of root1 or root2\n    # For example, if n = 13195, then we have root1 = 2833 and root2 = 1313", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for n in range(2, n//2 + 1):\n        if n % i == 0:\n            continue\n        else:\n            if n % i == 0:\n                return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n\n    # need to check all factors, as 2 is not prime\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n        elif i * i >= n:\n            break\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        factors = factors_of(n)\n        largest_factor = 1\n        for i in factors:\n            if i > largest_factor:\n                largest_factor = i\n        return largest_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    n = n - 1  # can't factorize n directly, need to subtract 1\n    if n % 2 == 0:\n        return 2\n    result = 3\n    while n % result == 0:\n        n //= result\n        result += 2\n    return result", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest = n\n    i = 2\n    while True:\n        while True:\n            if n % i == 0:\n                largest = i\n                n //= i\n                break\n            i += 1\n        if i > largest:\n            break\n    return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1\n    if n < 10:\n        return n\n    factors = [2, 3]\n    while n > 1:\n        if n % factors[-1] == 0:\n            n //= factors[-1]\n            return factors[-1]\n        else:\n            factors.append(factors[-1] * 2)\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # The golden ratio, also known as the Golden Ratio, is defined as\n    # phi = (1 + sqrt(5)) / 2.\n    phi = (1 + sqrt(5)) / 2\n    # A method that takes in a number and returns whether or not it is a\n    # prime.\n    is_prime = lambda n: not any(n % i for i in range(2, n // 2 + 1))\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return n\n    else:\n        sqrt_n = int(sqrt(n))\n        i = 2\n        while i <= sqrt_n:\n            if is_prime(i):\n                if i * i <= n:\n                    n //= i\n                    return i\n                else:\n                    return n\n            i += 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return next(p for p in sieve(n) if p > 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(n)\n    if not n:\n        return 1\n    if n < 4:\n        return n\n    max_factor = 2\n    for factor in range(3, int(n**0.5) + 1, 2):\n        if n % factor == 0:\n            if factor > max_factor:\n                max_factor = factor\n    return max_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = n - 1\n    count = 0\n    i = 2\n    while i < n:\n        if n % i == 0:\n            count += 1\n            if count == 2:\n                return i\n            i += 1\n        else:\n            i += 1\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    max_fact, max_num = 2, n\n    for x in range(3, max_num, 2):\n        if n % x == 0:\n            return x\n        elif x > max_fact:\n            max_fact, max_num = x, n\n    return max_fact", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(prime_factor(n) for _ in range(3, n//2))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    if n == 1:\n        return 1\n\n    prime = []\n    while n > 1:\n        prime.append(n % 2)\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = n / 2\n\n    if any(i == 1 for i in prime):\n        return 1\n\n    return max(prime)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return int(math.sqrt(n))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1 and not n & 1\n    max_factor = 1\n    for factor in range(2, int(n**0.5) + 1):\n        if n % factor == 0:\n            while n % factor == 0:\n                n /= factor\n            max_factor = max(max_factor, factor)\n\n    return max_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def prime_factorize(n):\n        factors = []\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n        return factors\n    factors = prime_factorize(n)\n    if len(factors) == 1:\n        return factors[0]\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(n: int) -> bool:\n        \"\"\"Return True if n is a prime, False otherwise.\"\"\"\n        # Taken from https://stackoverflow.com/a/3393691/\n        # Includes a very simple, and extremely fast, prime sieve.\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return n if is_prime(n) else largest_prime_factor(n // 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = []\n    n = int(n)\n    while n % 2 == 0:\n        n /= 2\n        factors.append(2)\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 1:\n        factors.append(n)\n    return 2 if len(factors) == 0 else factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(n: int) -> bool:\n        \"\"\"Return True if n is prime, False otherwise. Assume n > 0.\n        >>> is_prime(13195)\n        True\n        >>> is_prime(2048)\n        False\n        \"\"\"\n\n        def is_prime_helper(n: int) -> bool:\n            \"\"\"Helper for is_prime. Return True if n is a prime, False otherwise.\n            Assume n > 0.\n            >>> is_prime_helper(13195)\n            False\n            >>> is_prime_helper(2048)\n            True\n            \"\"\"\n            return n > 1 and all(n % i!= 0 for i in range(2, n + 1))\n\n        return is_prime_helper(n)\n\n    if n < 2:\n        return n\n\n    if n == 2:\n        return 2\n\n    if n % 2 == 0:\n        return largest_prime_factor(n // 2)\n\n    return largest_prime_factor(n + 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    else:\n        factors = []\n        while n > 1:\n            factors.append(n)\n            n /= 2\n        factors.append(n)\n        return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n % 2 == 0:\n        n //= 2\n    n -= 1\n    # we now know n is odd, and is not prime\n    if n % 3 == 0:\n        n //= 3\n    n -= 1\n    while n % 5 == 0:\n        n //= 5\n        n -= 1\n    while n % 7 == 0:\n        n //= 7\n        n -= 1\n    while n % 11 == 0:\n        n //= 11\n        n -= 1\n    n -= 1\n    while n % 13 == 0:\n        n //= 13\n        n -= 1\n    n -= 1\n    while n % 17 == 0:\n        n //= 17\n        n -= 1\n    n -= 1\n    while n % 19 == 0:\n        n //= 19\n        n -= 1\n    n -= 1\n    while n % 23 == 0:\n        n //= 23\n        n -= 1\n    n -= 1\n    while n % 29 == 0:\n        n //= 29\n        n -= 1\n    n -= 1\n    while n % 31 == 0:\n        n //= 31\n        n -= 1\n    n -= 1\n    return n\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    factors = []\n    for factor in range(2, int(n**0.5) + 1):\n        if n % factor == 0:\n            factors.append(factor)\n    max_factor = factors[0]\n    for factor in factors[1:]:\n        if factor > max_factor:\n            max_factor = factor\n    return max_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n, result = n, n\n    while True:\n        n //= 2\n        if n == 1:\n            return result\n        if n % 2 == 0:\n            return n\n        result += 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return n\n\n    factors = [2, 3]\n    while factors[-1] <= n:\n        factors.append(factors[-1] * 2)\n\n    for factor in factors:\n        if n % factor == 0:\n            if factor >= n:\n                return factor\n            else:\n                return largest_prime_factor(n / factor)\n    return factors[-1]\n\nfrom timeit import timeit\n\nsetup = '''\nfrom __main__ import largest_prime_factor\nfrom fractions import gcd\n'''", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # initalize some lists to store factors\n    factors = [n]\n\n    # keep adding factors to the list of factors\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n\n    # while the list is not empty, keep checking for factors\n    while len(factors) > 0:\n        # divide the first element of the list by 2, 3, 5, and 7\n        for factor in [2, 3, 5, 7]:\n            if factor * factors[0] % n == 0:\n                break\n        else:\n            # if none of the above break, then it's a prime number\n            return factors[0]\n\n        # remove the first element of the list\n        factors.pop(0)\n\n    # return None if n <= 1\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n    # Let p be the current prime\n    # p = 2\n    p = 2\n    while n % p == 0:\n        if p == n:\n            return n\n        p += 1\n    return p\n\"\"\"", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n\n    for factor in range(2, int(n**0.5) + 1):\n        if n % factor == 0:\n            n //= factor\n            continue\n\n        return factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return n\n    if n == 2:\n        return 2\n    for i in range(3, n//2 + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    f = 2\n    while f * f <= n:\n        while n % f == 0:\n            n //= f\n            f *= f\n        if n!= 1:\n            break\n\n    return f", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        largest = n\n        for i in range(2, n // 2):\n            if n % i == 0:\n                largest = i\n        return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while n % i == 0:\n        n //= i\n        i += 1\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return n\n    factors = list(range(2, int(n ** 0.5) + 1))\n    for factor in factors:\n        while n % factor == 0:\n            n //= factor\n            factors.remove(factor)\n    return factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = 2\n    while n > 1:\n        if n % factors == 0:\n            n /= factors\n            factors += 1\n        else:\n            factors += 1\n    return factors", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = abs(int(n))  # int() is slow, use abs() to avoid negative numbers\n    if n < 2:\n        return 2\n    f = 3\n    while n % f!= 0:\n        if n % f!= 0:\n            break\n        n //= f\n        f += 2\n    return f", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    factors = []\n    while n % 2 == 0:\n        n //= 2\n        factors.append(2)\n    if n <= 1:\n        return n\n    for i in range(3, n, 2):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return max(factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2\n    else:\n        return 3", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        # print(\"Will use a loop to check divisibility by each integer from 2 to n/2.\")\n        largest = 2\n        for i in range(2, n//2 + 1):\n            if n % i == 0:\n                largest = i\n                # print(\"The largest prime factor of n is i.\")\n                break\n            # print(\"i = {}\".format(i))\n        # print(\"The largest prime factor of n is largest = {}\".format(largest))\n        return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    # Find the largest divisor d >= 2 of n, and return d if n/d is a prime\n    # else return the largest divisor of n/d.\n    d = 2\n    while d * d <= n:\n        while n % d == 0:\n            n //= d\n        if n <= 1:\n            return n\n        d += 1\n    return largest_prime_factor(n // d)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    if n <= 1:\n        return 1\n\n    factors = [2, n//2]\n    while n % 2 == 0 and factors[-1] < n//2:\n        n //= 2\n        factors.append(2)\n    while factors[-1] <= n//2:\n        n //= factors.pop() + 1\n\n    return factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"n must be greater than 1\")\n\n    primes = [2] + [i for i in range(3, n, 2) if not n % i]\n    primes.append(n)\n\n    for i, prime in enumerate(primes[1:], 1):\n        if n % prime:\n            return n // prime\n    return primes[0]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n\n    if n <= 3:\n        return n\n\n    divisors = range(2, int(n**0.5) + 1)\n    factors = [divisor for divisor in divisors if n % divisor == 0]\n\n    result = n\n    for factor in factors:\n        if factor > result or result == 1:\n            result = factor\n\n    return result", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    candidates = set(range(2, n, 2))\n    for candidate in candidates:\n        if n % candidate == 0:\n            return candidate\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return largest_prime_factor(n / 2)\n    elif n > 2:\n        return n\n    else:\n        return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1\n    if n % 2 == 0:\n        return 2\n    else:\n        return largest_prime_factor(n // 2) if n // 2 > 1 else n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        m = 1\n        while m * m <= n:\n            if n % m == 0:\n                return m\n            else:\n                m += 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # The largest prime factor of n is the largest number in this list which is\n    # also a factor of n.\n    factors = [2, 3]\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    while n % 3 == 0:\n        factors.append(3)\n        n //= 3\n    # Find the largest factor in the list of factors.\n    return max(factors)"]]