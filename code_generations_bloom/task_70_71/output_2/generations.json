[["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # write your code here\n    result = []\n    for i in range(len(lst)):\n        min_index = i\n        min_value = lst[i]\n        for j in range(i + 1, len(lst)):\n            if lst[j] < min_value:\n                min_index = j\n                min_value = lst[j]\n        result.append(min_value)\n        result.append(lst[min_index])\n        del lst[min_index]\n        del lst[i]\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    else:\n        return lst[1:] + [min(lst)] + lst[:1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        return [lst[0], lst[-1], lst[0], lst[-1]] + strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x)\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            continue\n        else:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    result = []\n    while lst:\n        result.append(lst[0])\n        lst = lst[1:]\n    for i in range(1, len(lst)):\n        result.append(lst[i])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # if list is empty, return empty list\n    if len(lst) == 0:\n        return []\n\n    # if list contains only one number, return list\n    if len(lst) == 1:\n        return lst\n\n    # if list contains only two numbers, return list\n    if len(lst) == 2:\n        return lst\n\n    # if list contains only three numbers, return list\n    if len(lst) == 3:\n        return lst\n\n    # if list contains only four numbers, return list\n    if len(lst) == 4:\n        return lst\n\n    # if list contains only five numbers, return list\n    if len(lst) == 5:\n        return lst\n\n    # if list contains only six numbers, return list\n    if len(lst) == 6:\n        return lst\n\n    # if list contains only seven numbers, return list\n    if len(lst) == 7:\n        return lst\n\n    # if list contains only eight numbers, return list\n    if len(lst) == 8:\n        return lst\n\n    # if list contains only nine numbers, return list\n    if len(lst) == 9:\n        return lst\n\n    # if list contains only ten numbers, return list\n    if len(lst) == 10:\n        return lst\n\n    # if list contains only eleven numbers, return list\n    if len(", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    res = []\n    lst.sort()\n    lst.reverse()\n    res.append(lst.pop())\n    for i in lst:\n        res.append(i)\n        res.append(lst.pop())\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if len(lst) == 0:\n        return []\n\n    l = lst\n    l.sort()\n\n    result = []\n    while len(l) > 0:\n        result.append(l[0])\n        l = l[1:]\n\n    result.append(l[0])\n\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min_ele = min(lst)\n    result = [min_ele]\n    for ele in lst:\n        if ele == min_ele:\n            result.append(ele)\n        else:\n            result.append(lst.index(min_ele))\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n\n    min = lst[0]\n    max = lst[0]\n    for item in lst:\n        if item < min:\n            min = item\n        elif item > max:\n            max = item\n\n    lst.remove(min)\n    lst.remove(max)\n    lst.insert(0, max)\n    lst.insert(0, min)\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    result = []\n    for i in range(len(lst) - 1, 0, -1):\n        if lst[i] > lst[i - 1]:\n            result.append(lst[i])\n            result.append(lst[i - 1])\n        else:\n            result.append(lst[i - 1])\n            result.append(lst[i])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst):\n        if not lst:\n            return lst\n        else:\n            return [lst[0], lst[0], lst[0], lst[0]] + \\\n                   strange_sort(lst[1:]) + \\\n                   [lst[0], lst[0], lst[0], lst[0]]\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return lst[lst.index(min(lst))] + lst[lst.index(max(lst))] + \\\n           lst[lst.index(min(lst))] + lst[lst.index(max(lst))] + \\\n           lst[lst.index(min(lst))] + lst[lst.index(max(lst))] + \\\n           lst[lst.index(min(lst))] + lst[lst.index(max(lst))]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    # start with minimum value\n    min_val = lst[0]\n\n    # find maximum of remaining\n    max_val = lst[0]\n    for i in lst[1:]:\n        if i > max_val:\n            max_val = i\n\n    # find minimum of remaining\n    min_val = lst[0]\n    for i in lst[1:]:\n        if i < min_val:\n            min_val = i\n\n    # find maximum of remaining\n    max_val = lst[0]\n    for i in lst[1:]:\n        if i > max_val:\n            max_val = i\n\n    # find minimum of remaining\n    min_val = lst[0]\n    for i in lst[1:]:\n        if i < min_val:\n            min_val = i\n\n    # find maximum of remaining\n    max_val = lst[0]\n    for i in lst[1:]:\n        if i > max_val:\n            max_val = i\n\n    # find minimum of remaining\n    min_val = lst[0]\n    for i in lst[1:]:\n        if i < min_val:\n            min_val = i\n\n    return [min_val, max_val] + lst[1:] + [min_val, max_val]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    else:\n        return lst[-1::-1] + lst[:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst, i, j):\n        if i == j:\n            return lst\n        if lst[i] < lst[j]:\n            lst[i], lst[j] = lst[j], lst[i]\n        return strange_sort(lst, i + 1, j - 1) + [lst[i]] + strange_sort(lst, j + 1, len(lst))\n\n    return strange_sort(lst, 0, len(lst) - 1)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    result = []\n    while lst:\n        result.append(lst[0])\n        lst = lst[1:]\n    for i in range(1, len(result)):\n        result[i] = lst[0]\n        lst = lst[1:]\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return lst[lst.index(lst[-1]):] + lst[lst.index(lst[0]):] + lst[:2]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort_helper(lst, temp):\n        if len(lst) == 0:\n            return temp\n        if len(lst) == 1:\n            return lst[0]\n        return strange_sort_helper(lst[1:], [lst[0], max(lst[1:])]) + [lst[0]]\n\n    return strange_sort_helper(lst, [])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def strange_sort_helper(lst, min_val, max_val):\n        '''\n        Recursive helper function to sort the list.\n        '''\n        if not lst:\n            return []\n\n        if lst[0] < min_val:\n            return strange_sort_helper(lst[1:], min_val, max_val)\n\n        if lst[0] > max_val:\n            return strange_sort_helper(lst[1:], min_val, max_val)\n\n        return lst + strange_sort_helper(lst[1:], min_val, max_val)\n\n    return strange_sort_helper(lst, min(lst), max(lst))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return strange_sort_list(lst[1:]) + [lst[0]] + strange_sort_list(lst[:-1])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    lst.sort(reverse=True)\n    return lst + lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return [lst[0]] + \\\n        strange_sort_list(lst[1:]) + \\\n        [lst[-1]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    return lst[lst.index(min(lst)):lst.index(max(lst))] + \\\n        strange_sort_list(lst[lst.index(max(lst))+1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min_value = min(lst)\n    return [lst.pop(0)] + [lst.pop(0)] + [lst.pop(0)] + [min_value] + lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort_helper(lst):\n        if len(lst) == 0:\n            return []\n\n        min_val = lst[0]\n        max_val = lst[0]\n        for i in lst[1:]:\n            if i > max_val:\n                max_val = i\n            elif i < min_val:\n                min_val = i\n        return min_val + lst[lst.index(max_val):] + max_val + strange_sort_helper(lst[lst.index(min_val)+1:])\n\n    return strange_sort_helper(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst:\n        return lst[len(lst) - 1], lst[:len(lst) - 1]\n    else:\n        return [], []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Write your code here\n    if lst == []:\n        return []\n    else:\n        result = []\n        while lst:\n            result.append(min(lst))\n            lst.remove(min(lst))\n        result.append(max(lst))\n        return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return [lst[0], lst[len(lst) - 1], lst[1], lst[len(lst) - 2]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    res = []\n    cur_min = lst[0]\n    cur_max = lst[0]\n    for i in lst[1:]:\n        if i < cur_min:\n            cur_min = i\n        elif i > cur_max:\n            cur_max = i\n    res.append(cur_min)\n    for i in lst[1:]:\n        if i > cur_max:\n            cur_max = i\n        elif i < cur_min:\n            cur_min = i\n    res.append(cur_max)\n    for i in lst[1:]:\n        if i > cur_max:\n            cur_max = i\n        elif i < cur_min:\n            cur_min = i\n    res.append(cur_min)\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return [lst.pop(0), lst.pop(0), lst.pop(0), lst.pop(0)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        return sorted(lst, key=lambda x: min(lst) if x == min(lst) else max(lst) if x == max(lst) else x)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Base cases\n    if not lst:\n        return []\n    elif len(lst) == 1:\n        return [lst[0]]\n\n    # Iterate over the list\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        # Find min and max\n        minval = min(lst[:i])\n        maxval = max(lst[:i])\n\n        # Swap min and max\n        lst[i], lst[minval] = lst[minval], lst[i]\n\n        # Append min\n        result.append(minval)\n\n        # Append max\n        result.append(maxval)\n\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    n = len(lst)\n    l = []\n    l.append(lst[0])\n    for i in range(1, n):\n        l.append(lst[i])\n        if i < n - 1:\n            l.append(lst[i + 1])\n            if lst[i + 1] < lst[i]:\n                l.append(lst[i + 1])\n            else:\n                l.append(lst[i])\n\n    return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    else:\n        minval = lst[0]\n        maxval = lst[0]\n        for i in lst:\n            if i > maxval:\n                maxval = i\n            elif i < minval:\n                minval = i\n\n        return [maxval] + strange_sort_list(lst[1:]) + [minval]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Base Case\n    if len(lst) == 0:\n        return []\n\n    # First Element\n    lst = lst[1:]\n    min_val = lst[0]\n    # Remaining Elements\n    for i in lst:\n        if min_val > i:\n            lst = [i, min_val] + lst\n            min_val = i\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return sorted(lst, key=lambda x: min(lst) if x == lst[0] else max(lst) if x == lst[-1] else x)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    else:\n        min_val = lst[0]\n        min_list = []\n        for item in lst:\n            if item == min_val:\n                min_list.append(item)\n            else:\n                return min_list + lst[min_list.index(min_val):]\n        return min_list + lst[min_list.index(min_val):]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = lst[0]\n    lst = lst[1:]\n    if not lst:\n        return [min_val]\n    max_val = lst[0]\n    lst = lst[1:]\n    if not lst:\n        return [min_val, max_val]\n    return [min_val, max_val] + strange_sort_list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return lst\n    elif len(lst) == 1:\n        return lst\n    else:\n        return [lst[0], lst[-1]] + strange_sort_list(lst[1:-1])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return lst\n    else:\n        return strange_sort_list(lst[1:]) + [lst[0]] + strange_sort_list(lst[:1])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst)\n    res = []\n    for i in lst:\n        res.append(i)\n        if i!= lst[-1]:\n            res.append(lst[-1])\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return [lst.pop(0), max(lst), min(lst)] + strange_sort_list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Recursion base case\n    if not lst:\n        return []\n\n    # Start with the smallest number\n    min = min(lst)\n\n    # Get the largest number\n    max = max(lst)\n\n    # Create a new list\n    new = [min]\n\n    # Remove the smallest number from the list\n    lst.remove(min)\n\n    # Sort the list\n    new += strange_sort_list(lst)\n\n    # Add the largest number to the list\n    new.append(max)\n\n    # Return the list\n    return new", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    return lst[::-1] + lst[:-1] + lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    list_copy = lst[:]\n    min_index = 0\n    max_index = 0\n    while min_index < len(lst) - 1:\n        min_index += 1\n        max_index = min_index + 1\n        while max_index < len(lst) - 1:\n            if lst[min_index] > lst[max_index]:\n                min_index += 1\n            else:\n                max_index += 1\n    return list_copy[min_index:] + list_copy[:max_index] + list_copy[max_index:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # print(strange_sort_list([1, 2, 3, 4]))\n\n    def strange_sort(lst):\n        if len(lst) == 1:\n            return lst\n        else:\n            return [lst[0], max(lst[1:]), min(lst[1:]), max(lst[:1])]\n\n    return [strange_sort(lst[:-1])] + [strange_sort(lst[1:])]\n\nstrange_sort_list([1, 2, 3, 4, 5, 5, 6])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    else:\n        return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    result = []\n    for i in range(len(lst)):\n        if i == 0:\n            result.append(lst[0])\n        else:\n            result.append(lst[-i-1])\n\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    return lst + [min(lst), max(lst)] + strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Write your code here\n    def strange_sort(lst):\n        if lst == []:\n            return []\n        min = lst[0]\n        max = lst[0]\n        for i in lst:\n            if i > max:\n                max = i\n            if i < min:\n                min = i\n        return [min, max] + strange_sort(lst[1:])\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def strange_sort(lst):\n        if len(lst) == 0:\n            return lst\n        else:\n            return strange_sort(lst[1:]) + [lst[0]] + strange_sort(lst[:1])\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Recursion\n    def strange_sort(lst):\n        if not lst:\n            return lst\n        else:\n            min_val = lst[0]\n            max_val = lst[-1]\n            return strange_sort(lst[1:]) + [min_val] + strange_sort(lst[:-1]) + [max_val]\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return sorted(lst, reverse=True) + lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst:\n        return [lst[0], max(lst[1:]), min(lst[1:]), max(lst[2:]), min(lst[2:])]\n    else:\n        return []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def _strange_sort(lst):\n        if len(lst) <= 1:\n            return lst\n        min_ = lst[0]\n        max_ = lst[0]\n        for i in lst[1:]:\n            if i > max_:\n                max_ = i\n            elif i < min_:\n                min_ = i\n        return _strange_sort(lst[:1] + [min_, max_] + lst[1:])\n    return _strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    elif len(lst) == 1:\n        return lst\n    else:\n        return lst[lst.index(min(lst)):] + lst[:lst.index(min(lst))]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def swap(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n\n    def strange_sort(lst):\n        if len(lst) == 0:\n            return lst\n        m = min(lst)\n        lst.remove(m)\n        lst.append(m)\n        lst.sort()\n        return strange_sort(lst)\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    else:\n        return [min(lst), max(lst)] + strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return lst[lst.index(min(lst)):len(lst)-len(lst)%2] + lst[-len(lst)%2:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    return lst[lst.index(min(lst)):lst.index(max(lst))] + \\\n        [max(lst)] + \\\n        strange_sort_list(lst[lst.index(max(lst))+1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        return sorted(lst, key=lambda x: x if x <= lst[-1] else lst[-1])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    lst.sort()\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    return [min_val] + lst + [max_val]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    if lst == []:\n        return result\n    result.append(min(lst))\n    for i in range(1, len(lst)):\n        result.append(max(lst[i:]))\n    result.append(min(lst))\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    else:\n        return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    lst.remove(min_val)\n    lst.remove(max_val)\n    lst.append(min_val)\n    lst.append(max_val)\n    return strange_sort_list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        min = min(lst)\n        result.append(lst.pop(lst.index(min)))\n        max = max(lst)\n        result.append(lst.pop(lst.index(max)))\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # write your code here\n    if len(lst) <= 1:\n        return lst\n    else:\n        return [lst[0], lst[-1]] + strange_sort_list(lst[1:-1])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # The list of lists that will contain the result\n    result = []\n    # The list of integers that will be used for sorting\n    sorted_ints = []\n\n    # Put the smallest integer in the list of integers to be sorted\n    sorted_ints.append(lst[0])\n\n    # Put the second smallest integer in the list of integers to be sorted\n    sorted_ints.append(lst[1])\n\n    # Remove the first and second smallest integers from the list of integers to be sorted\n    lst.remove(sorted_ints[0])\n    lst.remove(sorted_ints[1])\n\n    # Iterate until the list of integers to be sorted is empty\n    while len(lst) > 0:\n\n        # Put the largest integer in the list of integers to be sorted\n        sorted_ints.append(lst[0])\n\n        # Put the second largest integer in the list of integers to be sorted\n        sorted_ints.append(lst[1])\n\n        # Remove the first and second largest integers from the list of integers to be sorted\n        lst.remove(sorted_ints[0])\n        lst.remove(sorted_ints[1])\n\n    # Iterate through the list of integers to be sorted and put the integers in the result list\n    for integer in sorted_ints:\n        result.append(integer)\n\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if len(lst) == 0:\n        return []\n\n    res = []\n    for i in lst:\n        if i == min(lst):\n            res.append(i)\n            for j in lst:\n                if j == min(lst):\n                    res.append(j)\n                    break\n                if j == max(lst):\n                    res.append(j)\n                    break\n        else:\n            res.append(i)\n            break\n\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    return lst[lst.index(min(lst))] + lst[lst.index(max(lst)):] + lst[lst.index(min(lst)):]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    return lst + strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min_val, max_val = min(lst), max(lst)\n    result = [max_val]\n    for i in lst:\n        if i == min_val:\n            result.append(max_val)\n        elif i == max_val:\n            result.append(min_val)\n        elif i > min_val and i < max_val:\n            result.append(i)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    if n == 0:\n        return []\n    if n == 1:\n        return lst\n    left = lst[0]\n    right = lst[-1]\n    result = [left]\n    for i in range(1, n - 1):\n        result.append(lst[i])\n        left = min(lst[i], left, right)\n    result.append(right)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst, len_lst):\n        if len_lst == 1:\n            return lst\n        else:\n            return strange_sort(lst[1:], len_lst - 1) + [lst[0]] + strange_sort(lst[1:], len_lst - 1)\n\n    return strange_sort(lst, len(lst))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    else:\n        min_val, max_val = lst[0], lst[-1]\n        new_lst = []\n        for i in lst:\n            if i > max_val:\n                new_lst.append(min_val)\n                new_lst.append(i)\n                min_val = i\n            elif i < min_val:\n                new_lst.append(i)\n                min_val = i\n        new_lst.append(min_val)\n        return new_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # create a copy of the list\n    lst = lst[:]\n\n    # remove the first element from the list\n    lst.pop(0)\n\n    # create a copy of the list\n    new_lst = lst[:]\n\n    # get the last element\n    last = new_lst[-1]\n\n    # remove the last element from the list\n    new_lst.pop()\n\n    # loop until there are no elements left in the list\n    while new_lst:\n        # get the maximum element in the list\n        max = new_lst[-1]\n\n        # remove the maximum element from the list\n        new_lst.pop()\n\n        # add the maximum element to the list\n        new_lst.insert(0, max)\n\n        # get the minimum element in the list\n        min = new_lst[0]\n\n        # remove the minimum element from the list\n        new_lst.pop()\n\n        # add the minimum element to the list\n        new_lst.append(min)\n\n        # create a copy of the list\n        new_lst = new_lst[:]\n\n    # return the list\n    return new_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        result = lst.copy()\n        result.sort()\n        return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return lst[::-1] + lst[:1] + lst[-1:-2:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Base case: empty list\n    if not lst:\n        return []\n\n    # Divide list into two\n    first = lst[:len(lst) // 2]\n    second = lst[len(lst) // 2:]\n\n    # Sort the first part\n    first = sorted(first)\n\n    # Sort the second part\n    second = sorted(second, reverse=True)\n\n    # Concatenate the two lists\n    result = first + second\n\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    if n == 0:\n        return []\n    elif n == 1:\n        return lst\n    else:\n        return lst + [lst[0]] + lst[1:] + [lst[0], lst[-1]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    return [lst.pop(0), max(lst), min(lst)] + strange_sort_list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    return lst + lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n\n    res = []\n    while len(lst) > 0:\n        res.append(lst[0])\n        lst = lst[1:]\n\n    res.append(lst[0])\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst):\n        if len(lst) == 0:\n            return []\n        return [lst[0]] + strange_sort(lst[1:])\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    lst.sort(reverse=True)\n    return lst + lst[0:1] + lst[1:2] + lst[2:3] + lst[3:4]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return lst\n    result = []\n    for i in lst:\n        result.append(i)\n        for j in lst:\n            if j > i:\n                result.append(j)\n\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n\n    current_min = lst[0]\n    current_max = lst[0]\n\n    for i in lst:\n        if current_min > i:\n            current_min = i\n        if current_max < i:\n            current_max = i\n\n    lst.remove(current_min)\n    lst.remove(current_max)\n\n    for i in lst:\n        if current_min > i:\n            current_min = i\n        if current_max < i:\n            current_max = i\n\n    return [current_min] + lst + [current_max]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    else:\n        return lst[lst.index(max(lst)):] + lst[:lst.index(max(lst))] + \\\n               lst[lst.index(min(lst)):] + lst[:lst.index(min(lst))]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Create empty list to store result\n    res = []\n\n    # Create empty lists to store the minimum and maximum of the remaining integers\n    min_list = []\n    max_list = []\n\n    # Loop through the list of integers\n    for num in lst:\n        # If current integer is the minimum\n        if num < min_list:\n            # Add current integer to the list of minima\n            min_list.append(num)\n\n        # If current integer is the maximum\n        elif num > max_list:\n            # Add current integer to the list of maxima\n            max_list.append(num)\n\n        # If current integer is neither the minimum nor maximum, then\n        # add it to the result list\n        else:\n            res.append(num)\n\n    # Print the result\n    print(res)\n\nstrange_sort_list([1, 2, 3, 4])\nstrange_sort_list([5, 5, 5, 5])\nstrange_sort_list([])\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst, n):\n        if not lst:\n            return []\n        if len(lst) == 1:\n            return lst\n        if n == 1:\n            return lst\n        if n == len(lst):\n            return lst\n        return strange_sort(lst[:n] + lst[n+1:], n-1) + [lst[n]] + \\\n            strange_sort(lst[:n] + lst[n+1:], n-1)\n\n    return strange_sort(lst, len(lst))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    else:\n        return lst[-1::-1] + lst[:-1] + lst[1::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    lst.sort()\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def sort(lst):\n        if not lst:\n            return lst\n        result = [lst[0]]\n        for i in lst[1:]:\n            if i < result[-1]:\n                result[-1], result[-2] = result[-2], result[-1]\n            elif i > result[-1]:\n                result.append(i)\n        return result\n    return sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def swap(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n\n    def strange_sort(lst):\n        if not lst:\n            return lst\n        if len(lst) == 1:\n            return lst\n        min_ = min(lst)\n        max_ = max(lst)\n        lst[0], lst[-1] = lst[-1], lst[0]\n        lst = lst[1:-1]\n        lst[0], lst[-1] = lst[-1], lst[0]\n        lst = lst[1:-1]\n        lst[0], lst[-1] = lst[-1], lst[0]\n        lst = lst[1:-1]\n        lst[0], lst[-1] = lst[-1], lst[0]\n        lst = lst[1:-1]\n        lst[0], lst[-1] = lst[-1], lst[0]\n        return min_, max_, lst\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) <= 1:\n        return lst\n    min_lst = lst[0]\n    max_lst = lst[0]\n    for item in lst[1:]:\n        if item < min_lst:\n            min_lst = item\n        elif item > max_lst:\n            max_lst = item\n    return [min_lst, max_lst, min_lst, max_lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return lst[::-1] + lst[:1] + lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    # sort the list to find min and max\n    lst.sort()\n\n    # find min and max\n    min_elem = lst[0]\n    max_elem = lst[-1]\n\n    # create a list of tuples to store the min and max\n    min_max_tuples = []\n\n    # append the first min and max\n    min_max_tuples.append((min_elem, max_elem))\n\n    # append the second min and max\n    for i in lst[1:]:\n        if i < min_elem:\n            min_elem = i\n        if i > max_elem:\n            max_elem = i\n\n    # append the second min and max\n    min_max_tuples.append((min_elem, max_elem))\n\n    # append the third min and max\n    for i in lst[2:]:\n        if i < min_elem:\n            min_elem = i\n        if i > max_elem:\n            max_elem = i\n\n    # append the third min and max\n    min_max_tuples.append((min_elem, max_elem))\n\n    # return the list of tuples\n    return min_max_tuples\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def swap(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n\n    def sort(lst, i, j):\n        if i >= j:\n            return lst\n        if lst[i] < lst[j]:\n            swap(lst, i, j)\n            sort(lst, i + 1, j - 1)\n            swap(lst, i, j)\n\n    lst = list(lst)\n    sort(lst, 0, len(lst) - 1)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Base case\n    if len(lst) == 0:\n        return lst\n\n    # If list is only one element, return the list\n    if len(lst) == 1:\n        return lst\n\n    # Create a list of the remaining elements\n    rem = lst[1:]\n\n    # Get the maximum value from the remaining elements\n    max_val = max(rem)\n\n    # Get the minimum value from the original list\n    min_val = min(lst)\n\n    # Create a list with the maximum value\n    max_list = [max_val]\n\n    # Create a list with the minimum value\n    min_list = [min_val]\n\n    # Create a list with the remaining elements\n    rem_list = rem\n\n    # Start adding the minimum value to the maximum value\n    while len(max_list) > 0:\n        min_list.append(max_list.pop())\n        max_list.append(min_list.pop())\n\n    # Add the remaining elements to the maximum value list\n    while len(rem_list) > 0:\n        max_list.append(rem_list.pop())\n\n    # Return the list\n    return min_list + max_list\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    min_val = min(lst)\n    return [\n        min_val,\n        max(lst) if lst else None,\n        min_val,\n        max(lst) if lst else None,\n        min_val,\n        max(lst) if lst else None,\n        min_val,\n        max(lst) if lst else None\n    ]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    return lst[lst.index(min(lst))] + lst[lst.index(max(lst))] +\\\n        strange_sort_list(lst[lst.index(min(lst))+1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return [lst[0], lst[-1], lst[0], lst[-1]] + strange_sort_list(lst[1:-1])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        return lst[::-1] + lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    return [min(lst), max(lst)] + strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Only works for list of integers.\n    if not isinstance(lst, list):\n        return lst\n\n    # Remove duplicates.\n    unique_lst = list(set(lst))\n\n    # Find the minimum and maximum value.\n    min_val = min(unique_lst)\n    max_val = max(unique_lst)\n\n    # Find the minimum and maximum value of the remaining list.\n    new_min_val = max(unique_lst) + 1\n    new_max_val = min(unique_lst) - 1\n\n    # Create the new list.\n    new_lst = []\n\n    # Start with minimum value.\n    new_lst.append(min_val)\n\n    # Find the maximum value of the remaining list.\n    while new_max_val!= new_min_val:\n        new_lst.append(new_max_val)\n        new_max_val += 1\n\n    # Find the minimum value of the remaining list.\n    while new_max_val!= new_min_val:\n        new_lst.append(new_min_val)\n        new_min_val -= 1\n\n    # Return the new list.\n    return new_lst\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n\n    min_val = lst[0]\n    max_val = lst[-1]\n    lst.remove(min_val)\n    lst.remove(max_val)\n    lst.append(min_val)\n    lst.append(max_val)\n\n    return strange_sort_list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst):\n        if not lst:\n            return lst\n        else:\n            return lst[lst.index(lst.min())], strange_sort(lst[:lst.index(lst.min())] + lst[lst.index(lst.max()) + 1:])\n\n    return [strange_sort(lst) for lst in lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst):\n        if len(lst) == 0:\n            return []\n        return [lst[0], lst[-1]] + strange_sort(lst[1:-1])\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort(key=lambda x: x if x <= 0 else x + 1)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def strange_sort(lst):\n        if not lst:\n            return []\n        min_index = lst.index(min(lst))\n        return lst[:min_index] + lst[min_index+1:] + lst[:min_index]\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def _strange_sort(lst):\n        if not lst:\n            return lst\n        if lst[0] < lst[1]:\n            lst[1], lst[0] = lst[0], lst[1]\n        return _strange_sort(lst[1:]) + [lst[0]]\n\n    return _strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def swap(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n\n    def strange_sort(lst, start, end):\n        if start == end:\n            return\n        if start == 0:\n            return\n        min_val = lst[start]\n        max_val = lst[end - 1]\n        min_pos = start\n        max_pos = end - 1\n        while min_pos <= max_pos:\n            if lst[min_pos] > min_val:\n                min_pos += 1\n            else:\n                max_pos -= 1\n                if max_pos < min_pos:\n                    swap(lst, min_pos, max_pos)\n                    min_pos += 1\n                    max_pos -= 1\n                if lst[min_pos] < min_val:\n                    min_pos += 1\n                else:\n                    max_pos -= 1\n                    if max_pos < min_pos:\n                        swap(lst, min_pos, max_pos)\n                        min_pos += 1\n                        max_pos -= 1\n        min_pos = start\n        max_pos = end - 1\n        while min_pos <= max_pos:\n            if lst[min_pos] > max_val:\n                min_pos += 1\n            else:\n                max_pos -= 1\n                if max_pos < min_pos:\n                    swap(lst, min_pos, max_pos)\n                    min_pos += 1", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    lst = sorted(lst, key=lst.index)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Start with minimum and maximum of the list\n    min_val = lst[0]\n    max_val = lst[-1]\n\n    # Create empty list\n    res = []\n\n    # Iterate over the list\n    for val in lst:\n        # If the current value is the minimum, append to res\n        if val == min_val:\n            res.append(val)\n        # If the current value is the maximum, append to res\n        elif val == max_val:\n            res.append(val)\n\n        # Otherwise, we have to find the minimum and maximum of the remaining\n        # list\n        else:\n            # Find minimum\n            min_val = min(val, min_val)\n\n            # Find maximum\n            max_val = max(val, max_val)\n\n    # Finally, append the minimum and maximum of the list\n    res.append(min_val)\n    res.append(max_val)\n\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    return lst + [min(lst)] + [max(lst)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n\n    return lst[lst.index(min(lst)):lst.index(max(lst))] + \\\n           lst[lst.index(max(lst)):] + \\\n           lst[lst.index(min(lst)):lst.index(max(lst))]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    def get_min_max(lst):\n        min_value = lst[0]\n        max_value = lst[0]\n        for value in lst:\n            if value < min_value:\n                min_value = value\n            elif value > max_value:\n                max_value = value\n        return min_value, max_value\n\n    def sort_list(lst, min_value, max_value):\n        # print(lst, min_value, max_value)\n        if not lst:\n            return []\n\n        if min_value == max_value:\n            return [lst.pop()]\n        else:\n            return [lst.pop(), lst.pop()]\n\n    return sort_list(lst, *get_min_max(lst))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst)\n    if not lst:\n        return lst\n    else:\n        return lst[::-1] + lst[::-1] + lst[::-1] + lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    if lst:\n        min_value = min(lst)\n        max_value = max(lst)\n        result.append(min_value)\n        result.append(max_value)\n        for value in lst:\n            if value == min_value:\n                result.append(max_value)\n            elif value == max_value:\n                result.append(min_value)\n            else:\n                result.append(value)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return lst\n    else:\n        return lst[1:] + lst[:1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst):\n        if len(lst) <= 1:\n            return lst\n        return strange_sort(lst[1:]) + [lst[0]] + strange_sort(lst[:1])\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Base case\n    if not lst:\n        return []\n\n    # Recursion\n    return lst + [lst.pop(0)] + strange_sort_list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n\n    min_val = lst[0]\n    min_lst = lst[1:]\n    max_val = min_lst[0]\n    max_lst = min_lst[1:]\n    lst = [min_val] + max_lst + [min_val] + max_val + [min_val] + lst\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return [lst.pop(0), max(lst)] + strange_sort_list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)\n    n = len(lst)\n    if n == 0:\n        return lst\n    lst = lst[1:]\n    lst.append(lst[0])\n    return strange_sort_list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    else:\n        return lst[lst.index(min(lst)):lst.index(max(lst))+1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return lst[1:] + [min(lst)] + lst[:1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n\n    min_num = lst[0]\n    max_num = lst[0]\n\n    for i in range(1, len(lst)):\n        if lst[i] > max_num:\n            max_num = lst[i]\n        elif lst[i] < min_num:\n            min_num = lst[i]\n\n    return [min_num, max_num] + strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort_helper(lst, min_index, max_index):\n        if len(lst) == 0:\n            return lst\n        min_value = lst[min_index]\n        max_value = lst[max_index]\n        if min_value == max_value:\n            return lst[min_index] + lst[max_index]\n        else:\n            return strange_sort_helper(lst[:min_index] + [lst[min_index] + lst[max_index]] + lst[max_index+1:], min_index, max_index + 1)\n\n    return strange_sort_helper(lst, 0, len(lst) - 1)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst:\n        return [lst[0], max(lst[1:]), min(lst[1:])] + strange_sort_list(lst[1:])\n    else:\n        return []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst):\n        if len(lst) <= 1:\n            return lst\n        return strange_sort(lst[1:]) + [lst[0]] + strange_sort(lst[:1])\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # init temp\n    temp = lst\n    # init min and max\n    min = min(lst)\n    max = max(lst)\n\n    # sorting\n    while temp:\n        # get min and max\n        min = min(temp)\n        max = max(temp)\n\n        # move min and max to temp\n        temp.remove(min)\n        temp.append(max)\n\n        # set min and max to first item in temp\n        min = temp[0]\n        max = temp[0]\n\n    # return result\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        return lst[lst.index(min(lst)):lst.index(max(lst))] +\\\n               lst[lst.index(max(lst)):] +\\\n               lst[:lst.index(min(lst))]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst, low, high):\n        if low == high:\n            return lst[low]\n        mid = (low + high) // 2\n        return strange_sort(lst, low, mid) + strange_sort(lst, mid + 1, high)\n\n    return strange_sort(lst, 0, len(lst) - 1)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return lst[lst.index(min(lst)):len(lst)-len(lst)+lst.index(max(lst))]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if not lst:\n            break\n        result.append(lst.pop(0))\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort_helper(lst, min_idx, max_idx):\n        if len(lst) == 0:\n            return []\n        min_val = lst[min_idx]\n        max_val = lst[max_idx]\n        # swap min and max\n        lst[min_idx], lst[max_idx] = lst[max_idx], lst[min_idx]\n        # remove min\n        lst.pop(min_idx)\n        # add min to end\n        lst.append(min_val)\n        # recur for remaining elements\n        return strange_sort_helper(lst, min_idx, max_idx-1) + [max_val] + strange_sort_helper(lst, min_idx+1, max_idx)\n    return strange_sort_helper(lst, 0, len(lst)-1)</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Write your code here\n    if lst == []:\n        return []\n    else:\n        min_val, max_val = lst[0], lst[-1]\n        return [min_val, max_val, min_val, max_val, min_val, max_val] + strange_sort_list(lst[1:])\n\nstrange_sort_list([1, 2, 3, 4, 5])\nstrange_sort_list([1, 2, 3, 4, 5, 5, 5, 5, 5])\nstrange_sort_list([])\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Start with the minimum value\n    min_val = lst[0]\n    # Keep removing the minimum value from the list\n    # until there are no more values in the list\n    while lst:\n        # Find the maximum value of the remaining integers\n        max_val = max(lst)\n        # Remove the maximum value from the list\n        lst.remove(max_val)\n        # Add the minimum value to the list\n        lst.append(min_val)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return lst[lst.index(min(lst))] + \\\n           strange_sort_list(lst[:lst.index(min(lst))]) + \\\n           lst[lst.index(max(lst)):] + \\\n           strange_sort_list(lst[lst.index(max(lst)) + 1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # We need to use a while loop, because there are cases where the\n    # list is empty, and we need to return an empty list\n    while lst:\n        # If we have only one element, then return that element\n        if len(lst) == 1:\n            return lst\n\n        # Find the minimum element in the list\n        min_val = min(lst)\n\n        # Find the maximum element in the remaining list\n        max_val = max(lst.remove(min_val))\n\n        # Add the minimum and maximum elements to the list\n        lst.append(min_val)\n        lst.append(max_val)\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return [lst[0]] + sorted(lst[1:], reverse=True) + [lst[0]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    return [lst[0]] + strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    if n == 0:\n        return lst\n    else:\n        first = min(lst)\n        rest = lst[1:]\n        rest.remove(first)\n        rest.append(first)\n        rest.sort()\n        return rest + [first]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return sorted(lst, key=lambda x: x if x <= lst[0] else lst[0])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    else:\n        return lst + list(reversed(lst))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # In order to get the smallest value in the list,\n    # we will need to use a variable to store the value.\n    # The variable will be the smallest value, then it will be replaced by the next smallest value.\n    smallest = lst[0]\n    # We will use a for loop to go through each value in the list.\n    # We will use a while loop to keep going through the list until there is no more values.\n    for value in lst[1:]:\n        # If the current value is smaller than the smallest value, then we will replace the smallest value with the current value.\n        if value < smallest:\n            smallest = value\n        # The while loop will keep going through the list until there are no more values.\n        while True:\n            # If the current value is the same as the smallest value, then we break out of the while loop.\n            if smallest == value:\n                break\n            # If the current value is not the same as the smallest value, then we replace the smallest value with the current value.\n            smallest = value\n    return smallest", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort_helper(lst, index, min, max):\n        if index == len(lst):\n            return lst\n        min_index = lst.index(min)\n        min_index += index\n        max_index = lst.index(max)\n        max_index += index\n        return strange_sort_helper(lst, min_index, min, max) +\\\n               strange_sort_helper(lst, max_index, min, max)\n\n    return strange_sort_helper(lst, 0, min(lst), max(lst))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    lst.sort()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    min_val = lst[0]\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n        if i < min_val:\n            min_val = i\n    return [min_val, max_val] + strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        lst.sort()\n        return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    elif len(lst) == 1:\n        return lst\n    else:\n        return lst[::-1] + lst[:1] + lst[1:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Base case\n    if not lst:\n        return lst\n\n    # Recursive case\n    return lst[lst.index(min(lst))] + strange_sort_list(lst[:lst.index(min(lst))]) + strange_sort_list(lst[lst.index(min(lst)) + 1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return [min(lst), max(lst)] + strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        return lst[-1::-1] + lst[:-1] + lst[0::-1] + lst[1:-1:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    return [lst[0], max(lst[1:]), min(lst[1:]), min(lst[1:])]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n\n    list_min = min(lst)\n    list_max = max(lst)\n    lst = lst - list_min\n    lst.append(list_max)\n    lst = lst - list_min\n    lst.append(list_min)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort()\n    if not lst:\n        return []\n    return lst + lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n\n    smallest = lst[0]\n    lst = lst[1:]\n    if not lst:\n        return [smallest]\n    largest = lst[-1]\n    lst = lst[:-1]\n\n    result = []\n    for i in range(len(lst)):\n        result.append(smallest)\n        smallest = lst[i]\n        result.append(largest)\n        largest = lst[-1]\n        lst = lst[:-1]\n    result.append(smallest)\n    result.append(largest)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    result = []\n    for i in range(len(lst) - 1, 0, -1):\n        result.append(lst[i])\n    for i in range(len(lst)):\n        result.append(lst[i])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    if len(lst) == 1:\n        return lst\n\n    return [lst[0]] + lst[1:] + lst[:1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # get minimum value from list\n    min_val = lst[0]\n    # remove the minimum value from the list\n    lst.remove(min_val)\n    # get maximum value from the remaining list\n    max_val = max(lst)\n    # remove the maximum value from the list\n    lst.remove(max_val)\n    # recursively sort the list\n    return strange_sort_list(lst) + [min_val, max_val]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    res = [lst[0]]\n    for i in range(1, len(lst)):\n        res.append(lst[i])\n        lst[i] = lst[lst[i] - 1]\n    return res + lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min_value = lst[0]\n    max_value = lst[0]\n    for i in lst[1:]:\n        if i > max_value:\n            max_value = i\n        if i < min_value:\n            min_value = i\n    return [min_value] + lst[1:] + [min_value]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    res = []\n    for i in range(len(lst)):\n        if lst[i] < lst[-1]:\n            res.append(lst[i])\n        else:\n            res.append(lst[-1])\n            lst.pop(-1)\n            lst.append(lst[-1])\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    return lst[1:] + [min(lst[:-1]), max(lst[:-1])]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Do not use any built in sorting functions.\n    lst = list(lst)  # Don't change the argument\n    if len(lst) == 0:\n        return lst\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    new_lst = []\n    for i in lst:\n        if i not in new_lst:\n            new_lst.append(i)\n        else:\n            new_lst.append(new_lst.index(i) + 1)\n    return new_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        result = [lst[0]]\n        for i in range(1, len(lst)):\n            if lst[i] > result[-1]:\n                result.append(lst[i])\n            else:\n                result[-1] = max(result[-1], lst[i])\n        return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return lst[::-1] + lst[:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # If list is empty, return empty list\n    if lst == []:\n        return []\n    # Get the minimum value from the list\n    min_val = lst[0]\n    # Get the maximum value from the remaining list\n    max_val = max(lst[1:])\n    # Put min and max value in the first and second position\n    # of the list\n    lst[0], lst[1] = lst[1], lst[0]\n    # Get the minimum value from the remaining list\n    min_val = min(lst[2:])\n    # Put min and max value in the second and third position\n    # of the list\n    lst[1], lst[2] = lst[2], lst[1]\n    # Get the minimum value from the remaining list\n    min_val = min(lst[3:])\n    # Put min and max value in the third and fourth position\n    # of the list\n    lst[2], lst[3] = lst[3], lst[2]\n    # Get the minimum value from the remaining list\n    min_val = min(lst[4:])\n    # Put min and max value in the fourth and fifth position\n    # of the list\n    lst[3], lst[4] = lst[4], lst[3]\n    # Get the minimum value from the remaining list\n    min_val = min(lst[5:])\n    # Put min", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort()\n    if len(lst) < 2:\n        return lst\n    res = []\n    for i in range(len(lst)):\n        if i == 0:\n            res.append(lst[i])\n        elif i == 1:\n            res.append(lst[len(lst) - 1])\n        else:\n            res.append(lst[i - 1])\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    # Initially, lst contains only one element, the minimum.\n    if len(lst) == 1:\n        return lst\n\n    # Find the maximum of the remaining elements\n    maximum = max(lst[1:])\n\n    # Swap the maximum with the first element\n    lst[0], lst[1] = lst[1], lst[0]\n\n    # Now, lst contains minimum, maximum and the remaining integers.\n    # Find the minimum of the remaining integers\n    minimum = min(lst[1:])\n\n    # Swap the minimum with the maximum\n    lst[0], lst[1] = lst[1], lst[0]\n\n    # Now, lst contains minimum, maximum and the remaining integers.\n    # Find the minimum of the remaining integers\n    minimum = min(lst[1:])\n\n    # Swap the minimum with the maximum\n    lst[0], lst[1] = lst[1], lst[0]\n\n    # Now, lst contains minimum, maximum and the remaining integers.\n    # Find the minimum of the remaining integers\n    minimum = min(lst[1:])\n\n    # Swap the minimum with the maximum\n    lst[0], lst[1] = lst[1], lst[0]\n\n    # Now, lst contains minimum, maximum and the remaining integers.\n    # Find the minimum of the remaining integers\n    minimum = min(lst[1:])\n\n    # Return the list\n    return", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) <= 1:\n        return lst\n    else:\n        return [lst[0], max(lst[1:]), min(lst[1:])] +\\\n               strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    min_val = min(lst)\n    lst.remove(min_val)\n    max_val = max(lst)\n    lst.remove(max_val)\n    return [min_val, max_val] + strange_sort_list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[j] > lst[i]:\n                res.append(lst[i])\n                lst[i], lst[j] = lst[j], lst[i]\n            else:\n                break\n\n    return res + lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    n = len(lst)\n    for i in range(n):\n        if i == n-1:\n            result.append(lst[i])\n        elif lst[i] < lst[i+1]:\n            result.append(lst[i])\n        elif lst[i] > lst[i+1]:\n            result.append(lst[i+1])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst = [max(lst)] + lst[1:]\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    if n == 0:\n        return lst\n    else:\n        return [lst[0], lst[n-1]] + strange_sort_list(lst[1:-1])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        result.append(lst.pop(0))\n\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def strange_sort(lst):\n        # If the list is empty, return empty list\n        if len(lst) == 0:\n            return lst\n\n        # Get the minimum value of the list\n        min_val = lst[0]\n\n        # Get the maximum value of the remaining integers\n        max_val = lst[1]\n\n        # Get the minimum value of the remaining integers\n        min_val = lst[2]\n\n        # Get the maximum value of the remaining integers\n        max_val = lst[3]\n\n        # Remove the minimum value from the list\n        lst = lst[:4] + lst[4:]\n\n        # Recursively sort the remaining list\n        return strange_sort(lst)\n\n    return strange_sort(lst)\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Base case\n    if not lst:\n        return []\n\n    # Find minimum and maximum\n    min_val = lst[0]\n    max_val = lst[0]\n\n    for i in lst:\n        if i < min_val:\n            min_val = i\n        elif i > max_val:\n            max_val = i\n\n    # Swap minimum and maximum\n    temp = lst[0]\n    lst[0] = max_val\n    lst[-1] = min_val\n\n    # Recursively sort the rest\n    return strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Given list, get the min and max values\n    # and store them in min and max variables.\n    min = lst[0]\n    max = lst[0]\n    for i in lst:\n        if i < min:\n            min = i\n        if i > max:\n            max = i\n\n    # Create a new list, and store min and max value in it.\n    lst = [min, max]\n\n    # Remove min and max from the given list.\n    lst.remove(min)\n    lst.remove(max)\n\n    # Get the new min and max values.\n    min = lst[0]\n    max = lst[0]\n    for i in lst:\n        if i < min:\n            min = i\n        if i > max:\n            max = i\n\n    # Create a new list, and store min and max value in it.\n    lst = [min, max]\n\n    # Remove min and max from the given list.\n    lst.remove(min)\n    lst.remove(max)\n\n    # Get the new min and max values.\n    min = lst[0]\n    max = lst[0]\n    for i in lst:\n        if i < min:\n            min = i\n        if i > max:\n            max = i\n\n    # Create a new list, and store min and max value in it.\n    lst = [min, max", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    else:\n        min = lst[0]\n        max = min\n        for i in lst:\n            if i > max:\n                max = i\n            elif i < min:\n                min = i\n        return [min, max] + strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # If list is empty, return empty list\n    if len(lst) == 0:\n        return []\n\n    # Otherwise, go through the list\n    # and append the first and last value to a new list\n    # and remove them from the original list\n    new_lst = lst[0]\n    lst = lst[1:]\n\n    while len(lst) > 0:\n        new_lst = new_lst + lst[0]\n        lst = lst[1:]\n\n    # And then reverse the new list\n    return new_lst[::-1] + lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    return lst[::-1] + lst[:1] + lst[::-1] + lst[:1] + lst[::-1] + lst[:1] + lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    if n < 2:\n        return lst\n\n    result = []\n    for i in range(n):\n        result.append(lst[0])\n        lst = lst[1:]\n\n    for i in range(n):\n        result.append(lst[0])\n        lst = lst[1:]\n\n    for i in range(n):\n        result.append(lst[0])\n        lst = lst[1:]\n\n    for i in range(n):\n        result.append(lst[0])\n        lst = lst[1:]\n\n    return result"]]