[["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Init list\n    sorted_lst = []\n\n    # Begin loop\n    for item in lst:\n        # min value of list\n        if sorted_lst == []:\n            sorted_lst.append(item)\n            continue\n\n        # max value of remaining list\n        if item > sorted_lst[-1]:\n            sorted_lst.append(item)\n\n        # min value of remaining list\n        elif item < sorted_lst[-1]:\n            sorted_lst.insert(0, item)\n\n    # Return sorted list\n    return sorted_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    first = lst[0]\n    result = []\n    result.append(first)\n    while lst:\n        second = lst[-1]\n        lst.pop()\n        result.append(second)\n        if first < second:\n            lst.append(first)\n            first = second\n        else:\n            lst.append(first)\n            first = lst[0]\n            lst.pop()\n\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    else:\n        return [min(lst), max(lst), min(lst), max(lst)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    s = sorted(lst, reverse=True)\n    return [lst.pop(0)] + s + [lst.pop(0)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst:\n        return lst[::-1] + lst[::-1] + lst + lst\n    else:\n        return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    else:\n        return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    new_list = []\n    new_list.append(lst[0])\n    new_list.append(lst[-1])\n\n    for i in range(n - 1):\n        for j in range(i + 1, n - 1):\n            if lst[i] < lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n                new_list[i], new_list[j] = new_list[j], new_list[i]\n\n    return new_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # base case\n    if len(lst) <= 1:\n        return lst\n    result = []\n    start = lst[0]\n    middle = lst.pop()\n    # take the max of the remaining integers and append it to result\n    while len(lst) > 0:\n        result.append(max(lst))\n        lst.pop()\n    result.append(middle)\n    # recursively sort the list\n    result.extend(strange_sort_list(lst))\n    # recursively sort the list\n    result.extend(strange_sort_list(lst))\n    # recursively sort the list\n    result.extend(strange_sort_list(lst))\n    return result\n\nlst = [87, 23, 17, 10, 11, 12, 32, 3, 19, 34, 45, 6, 23, 68, 6, 86, 99]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    if lst:\n        for x in sorted(lst):\n            result.append(x)\n            if len(result) == len(lst):\n                break\n        return result\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    new_list = []\n    for i in lst:\n        new_list.append(lst.index(i))\n    return new_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    # if number of elements in lst is odd, remove the middle element.\n    if len(lst) % 2!= 0:\n        lst = lst[:-1] + lst[1:]\n    # get minimum and maximum elements of lst\n    min = max = lst[0]\n    for i in lst:\n        if i < min:\n            min = i\n        elif i > max:\n            max = i\n    # add min and max to the beginning and end of the list\n    return [min] + lst + [max]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    min = lst[0]\n    max = lst[0]\n    for i in lst[1:]:\n        if i < min:\n            min = i\n        elif i > max:\n            max = i\n    return [max] + lst + [min]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    return lst[::-1] + lst + lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def helper(a, b):\n        if a > b:\n            return a, b\n        return b, a\n\n    lst = sorted(lst, reverse=True)\n    return [lst[mid] for mid in range(len(lst)) if lst[mid]!= lst[len(lst) - 1]] + \\\n        [lst[mid] for mid in range(len(lst) - 1, 0, -1) if lst[mid]!= lst[0]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in range(len(lst)):\n        while i < len(lst) and lst[i] == lst[i]:\n            i += 1\n        if i == len(lst):\n            result.append(lst[i])\n        else:\n            min = min(lst[i:], key=lst.__getitem__)\n            max = max(lst[i:], key=lst.__getitem__)\n            result.append(min)\n            result.append(max)\n            i += 1\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    # One-pass algorithm.\n    # Find the minimum in the list.\n    min_index = lst.index(min(lst))\n    # Find the maximum in the remaining list.\n    max_index = lst.index(max(lst[:min_index])) + 1\n    # Find the minimum in the remaining list.\n    min_index = lst.index(min(lst[max_index:]))\n    # Return the list in the correct order.\n    return lst[min_index:max_index]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def compare(lst):\n        if lst[0] < lst[1]:\n            return -1\n        elif lst[0] > lst[1]:\n            return 1\n        else:\n            return 0\n\n    return lst[::-1].sort(compare)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # save head and tail\n    head = lst[0]\n    tail = lst[1:]\n\n    # create a list with all the min, max of the tail list\n    min_max_list = [head]\n    min_max_list.extend([lst[i] for i in range(1, len(lst))])\n\n    # create a list of index, with the indexes of min_max_list\n    index_list = list(range(0, len(min_max_list)))\n\n    # sort by index\n    index_list.sort(key = lambda x: min_max_list[x])\n\n    # find the reverse index of the sorted list\n    reverse_index_list = [index_list[i] + 1 for i in range(0, len(index_list))]\n\n    # find the correct position of min_max_list\n    for i in range(0, len(min_max_list)):\n        if reverse_index_list[i]!= 0:\n            min_max_list[reverse_index_list[i]] = min_max_list[i]\n\n    # merge with the head\n    result = [head]\n    result.extend(min_max_list)\n\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    current = lst.pop(0)\n    while lst:\n        if current > lst[0]:\n            result.append(current)\n            current = lst.pop(0)\n        elif current < lst[0]:\n            result.append(lst.pop(0))\n            current = lst.pop(0)\n        else:\n            result.append(current)\n            current = lst.pop(0)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    else:\n        result = lst[:]\n        result.sort()\n        return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # this algorithm is just one method to solve the problem.\n    # there is more efficient algorithm which uses O(n log n) time.\n\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        result = []\n        while lst:\n            result.append(lst[0])\n            lst = lst[1:]\n\n        result.append(lst[0])\n        return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def strange_sort(lst, cur_ind):\n        if len(lst) == 1:\n            yield lst\n            return\n\n        cur_min = lst[0]\n        cur_max = lst[1]\n\n        for i in range(len(lst)):\n            if cur_min > lst[i]:\n                cur_min = lst[i]\n            if cur_max < lst[i]:\n                cur_max = lst[i]\n\n        for i in range(len(lst) - 1):\n            yield lst[:i] + lst[cur_ind + i + 1:]\n\n        yield lst[:cur_ind] + cur_min + cur_max\n\n    return list(strange_sort(lst, 0))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    # init 2 lists\n    min_v = lst[0]\n    max_v = lst[0]\n    result = []\n\n    # find min, max\n    for v in lst[1:]:\n        if v < min_v:\n            min_v = v\n        elif v > max_v:\n            max_v = v\n\n    # keep min and max in result\n    result.append(min_v)\n    result.append(max_v)\n\n    # remove them from the list\n    lst = lst[1:]\n\n    # remove the last element\n    lst.pop()\n\n    # start a recursive call\n    while lst:\n        if min_v <= lst[0] <= max_v:\n            min_v = lst[0]\n            result.append(min_v)\n            lst = lst[1:]\n        elif min_v <= max_v:\n            min_v = max_v\n            result.append(min_v)\n            max_v = lst[0]\n            lst = lst[1:]\n        elif max_v <= min_v:\n            max_v = lst[0]\n            result.append(max_v)\n            min_v = lst[0]\n            lst = lst[1:]\n        else:\n            min_v = lst[0]\n            result.append(min_v)\n            max_v = lst[0]\n            lst = lst[1:]\n\n    return result\n\n\nlst = [2, 5, 6, 1, 4, 3", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Base case\n    if not lst:\n        return lst\n\n    # Find the min and max values of list\n    min_val = lst[0]\n    max_val = lst[0]\n\n    for num in lst[1:]:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    # Use max and min to create two temp lists.\n    # The first temp list contains the max of the list\n    # and the second temp list contains the min of the list\n    temp_max = []\n    temp_min = []\n\n    # Populate temp_max and temp_min\n    for num in lst:\n        if num < max_val:\n            temp_min.append(num)\n        elif num > min_val:\n            temp_max.append(num)\n\n    # Combine temp_max and temp_min into a new list and return it\n    # We use the temp_max list to reverse the order\n    new_list = temp_min + temp_max + temp_min\n\n    return new_list</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Memoization technique used, i.e. memo = {1: []}\n    memo = {}\n    if lst:\n        min_val = lst[0]\n        max_val = lst[-1]\n        memo = {value: [] for value in range(min_val, max_val + 1)}\n        return [memo[value] for value in lst]\n    else:\n        return []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def next_min(current, lst):\n        while True:\n            for i in lst:\n                if i > current:\n                    return i\n                elif i < current:\n                    break\n            else:\n                return current\n\n    def next_max(current, lst):\n        while True:\n            for i in lst:\n                if i < current:\n                    return i\n                elif i > current:\n                    break\n            else:\n                return current\n\n    def strange_sort(lst):\n        '''\n        Strange sort list.\n        '''\n        if not lst:\n            return []\n        current = lst[0]\n        min_value = next_min(current, lst)\n        max_value = next_max(min_value, lst)\n        result = [min_value, max_value]\n        result.extend(strange_sort(lst[1:]))\n        return result\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst):\n        if len(lst) <= 1:\n            return lst\n        else:\n            return lst[::-1] + lst + lst[:-1]\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return sorted(lst, key=lambda x: min(lst) if lst else x)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    ret = [lst[0]]\n\n    for num in lst[1:]:\n        ret.append(num if ret[-1] > num else lst[-1])\n\n    return ret", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    lst1 = lst[:]\n    while len(lst1) > 1:\n        for i in range(len(lst1)):\n            if lst1[i] < lst1[i + 1]:\n                lst1[i], lst1[i + 1] = lst1[i + 1], lst1[i]\n    return lst1[0], lst1[-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # write your code here\n    temp = []\n    if len(lst) == 0:\n        return []\n    for i in range(0, len(lst)):\n        if lst[i] == lst[0]:\n            temp.append(lst[i])\n        elif lst[i]!= lst[0]:\n            temp.append(lst[0])\n            temp.append(lst[i])\n            lst[0] = lst[i]\n    return temp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    else:\n        return [lst[-1], lst[-2]] + lst[:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    if lst:\n        result.append(lst[0])\n        for i in lst[1:]:\n            if result[-1] == i:\n                result.append(lst[0])\n            else:\n                result.append(i)\n        return result\n    else:\n        return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    result = []\n    for i in range(n):\n        result.append(lst[n - 1 - i])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    lst.sort()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def swap(lst, i, j):\n        temp = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n\n    lst = sorted(lst)\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        i = 0\n        while lst[i] == lst[len(lst) - 1]:\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n            i += 1\n        swap(lst, 0, len(lst) - 1)\n        return lst[:len(lst) - 1] + lst[len(lst) - 1:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # implementation using min heap\n    import heapq\n\n    my_list = list(lst)\n    heapq.heapify(my_list)\n    while len(my_list) > 1:\n        min_val = heapq.heappop(my_list)\n        max_val = heapq.heappop(my_list)\n        heapq.heappush(my_list, min_val)\n        heapq.heappush(my_list, max_val)\n    return my_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    num = min(lst)\n    lst.remove(num)\n    res = [num]\n\n    while len(lst) > 0:\n        num = max(lst)\n        lst.remove(num)\n        res.append(num)\n\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    pivot = lst[0]\n    result = [pivot]\n    for i in lst:\n        if i < pivot:\n            result.append(i)\n        else:\n            result.append(pivot)\n            pivot = i\n    return result\n\nstrange_sort_list([3, 2, 6, 1, 1])\n\nThe function strange_sort_list is defined as above. In the function, the strange sort list is a list of integers. Given a list of integers, we need to return a list of integers. For example:\n\nstrange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_sort_list([]) == []\n\nThis list is a strange sort list.\n\nMy solution (python3):", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    for i in range(len(lst)-1, -1, -1):\n        min_elem = min(lst[i:])\n        max_elem = max(lst[i+1:])\n        if min_elem < max_elem:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n            lst[i+1:] = lst[i+1:] + [min_elem]\n        else:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n            lst[i+1:] = lst[i+1:] + [max_elem]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    new_list = []\n    left_list = []\n    right_list = []\n    if len(lst) < 1:\n        return lst\n\n    while len(left_list) < len(lst):\n        left_list.append(lst.pop(0))\n\n    for i in left_list:\n        right_list.append(lst.pop(0))\n\n    while len(right_list) < len(lst):\n        right_list.append(lst.pop(0))\n\n    for i in right_list:\n        left_list.append(lst.pop(0))\n\n    return left_list + right_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # returns a list of minimum value, max of the rest\n    def get_min_max(lst, min_index, max_index):\n        # add the minimum value to result\n        min_result = lst[min_index]\n        # add the max of the rest\n        max_result = 0\n        for i in range(min_index + 1, max_index + 1):\n            if lst[i] > max_result:\n                max_result = lst[i]\n        # add the max of the rest to result\n        return [min_result, max_result]\n\n    # if the list is empty, returns empty list\n    if len(lst) == 0:\n        return []\n\n    # first, get the minimum value of the list\n    min_index = 0\n    min_value = lst[min_index]\n    # get the max of the rest\n    max_result = 0\n    for i in range(1, len(lst)):\n        if lst[i] > max_result:\n            max_result = lst[i]\n    # get the min and max of the rest\n    max_result1 = get_min_max(lst, min_index + 1, len(lst) - 1)[0]\n    # get the max of the rest\n    max_result2 = get_min_max(lst, min_index + 1, len(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    l = sorted(lst, key = lambda x: (-len(lst), x))\n    return l\n\nstrange_sort_list([1, 2, 3])\nstrange_sort_list([1, 2, 3, 4])\nstrange_sort_list([5, 5, 5, 5])\nstrange_sort_list([])\n\nA:\n\nYou can use a dict of lists to keep track of the remaining numbers:", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    return min(lst) + \\\n           max(lst[lst.index(min(lst)):]) + \\\n           min(lst[lst.index(max(lst[lst.index(min(lst)):]))+1:]) + \\\n           lst[lst.index(max(lst[lst.index(min(lst)):]))+1:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in range(len(lst)):\n        if i == 0:\n            result.append(lst[0])\n        elif lst[i] > lst[i - 1]:\n            result.append(lst[i])\n        else:\n            result.append(lst[i - 1])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # start with min, then max, min, max, min, max,...\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return lst\n    if len(lst) == 1:\n        return lst\n    return [min(lst), max(lst[1:]), min(lst[2:]), max(lst[3:])]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    lst.sort()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort_iter(lst):\n        nonlocal tst\n        result = []\n        if len(lst) == 0:\n            return result\n        minval = min(lst)\n        maxval = max(lst)\n        lst = lst[:]\n        tst = [maxval] + lst\n        tst = [tst[0], max(lst)]\n        for i in range(len(tst) - 1):\n            if tst[i + 1] < tst[i]:\n                temp = tst[i]\n                tst[i] = tst[i + 1]\n                tst[i + 1] = temp\n        for i in range(len(tst) - 1):\n            if tst[i] > tst[i + 1]:\n                temp = tst[i]\n                tst[i] = tst[i + 1]\n                tst[i + 1] = temp\n        return result\n    return strange_sort_iter(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    l = len(lst)\n    if l == 0:\n        return lst\n    else:\n        temp = [lst[0]]\n        for i in range(1, l):\n            if lst[i] < lst[l - i - 1]:\n                temp.append(lst[i])\n                temp.append(lst[l - i - 1])\n        temp.append(lst[l])\n        return temp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    l = min(lst)\n    r = max(lst)\n    lst.remove(l)\n    lst.remove(r)\n    return l + strange_sort_list(lst) + [r, l]\n\nimport unittest", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        return lst[-len(lst):] + lst[:len(lst)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n\n    t = []\n    for i in range(0, len(lst)):\n        t.append(min(lst[i], lst[i - 1]))\n\n    return t + lst[len(t):] + t", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        small, big = lst[0], lst[-1]\n        remaining = lst[1:-1]\n        return [small] + strange_sort_list(remaining) + [big]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    for i in range(len(lst) - 1, 1, -1):\n        lst.append(lst[i])\n    for i in range(len(lst) - 1, 0, -1):\n        lst.append(lst[i])\n    for i in range(len(lst) - 1, 0, -1):\n        lst.append(lst[i])\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) < 2:\n        return lst\n    return lst + [lst[0], lst[-1]] + strange_sort_list(lst[1:-1])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if len(lst) == 0:\n        return lst\n\n    lst.sort()\n\n    return [lst[0], lst[len(lst) - 1], lst[0], lst[1]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) <= 1:\n        return lst\n    return [min(lst), max(lst[1:])] + strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Edge case\n    if not lst:\n        return []\n\n    # Case: list of length 1\n    if len(lst) == 1:\n        return lst\n\n    # Case: list of length 2\n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return lst\n        else:\n            return lst[::-1]\n\n    # Make a copy of list\n    copy = lst[:]\n    # Sort list of length two\n    copy.sort()\n\n    # Remove first element\n    copy.remove(copy[0])\n    # Sort list of length one\n    copy.sort()\n\n    # Remove first element\n    copy.remove(copy[0])\n    # Sort list of length zero\n    copy.sort()\n\n    # Create a new list and insert each element from the copy into it\n    result = []\n    for elem in copy:\n        result.append(elem)\n    # Return the result\n    return result\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    list_size = len(lst)\n\n    if list_size == 0:\n        return []\n\n    odd_sorted = []\n\n    for i in range(list_size // 2):\n        odd_sorted.append(lst[i])\n\n    odd_sorted.append(lst[list_size // 2])\n\n    even_sorted = []\n\n    for i in range(0, list_size // 2):\n        even_sorted.append(lst[list_size - 1 - i])\n\n    return odd_sorted + even_sorted", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst):\n        return lst if lst == [] else strange_sort(lst[1:]) + [min(lst)] + strange_sort(lst[:-1])\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return lst[lst.index(lst.min()):] + lst[:lst.index(lst.max()) + 1] + lst[lst.index(lst.max()) + 1:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    else:\n        return lst[::-1] + lst[:-1]\n\n\nstrange_sort_list([1, 2, 3, 4])\nstrange_sort_list([5, 5, 5, 5])\nstrange_sort_list([])\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort_helper(lst):\n        if len(lst) == 1:\n            return lst\n        else:\n            # minimum\n            min_val = lst[0]\n            # maximum\n            max_val = lst[-1]\n            # create list of all numbers except min and max\n            nums = lst[1:-1]\n            # sort the list\n            sorted_nums = nums.sort()\n            # append min\n            sorted_nums.append(min_val)\n            # append max\n            sorted_nums.append(max_val)\n            # return list\n            return sorted_nums\n    return strange_sort_helper(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    if not n:\n        return lst\n    res = [lst[0]]\n    for i in range(1, n):\n        if lst[i] > lst[i-1]:\n            res.append(lst[i])\n        else:\n            res.append(lst[i-1])\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return [min(lst)] + [max(lst)] + [min(lst)] + \\\n        [max(lst)] + [min(lst)] + [max(lst)] + \\\n        [min(lst)] + [max(lst)] + [min(lst)] + [max(lst)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    res = []\n    for i in range(n):\n        res.append(lst[i])\n        del lst[i]\n    for i in range(n - 1, -1, -1):\n        res.append(lst[0])\n        del lst[0]\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort(reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    current_min = min(lst)\n    current_max = max(lst)\n    sorted_list.append(current_min)\n    while len(lst) > 0:\n        current_min = min(lst)\n        current_max = max(lst)\n        sorted_list.append(current_max)\n        lst.remove(current_min)\n    return sorted_list\n\nlst = [3, 1, 5, 4, 2, 7]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    for i in range(len(lst)):\n        min_index = i\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                min_index = j\n                break\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def strange_sort(lst, lst_copy):\n        '''\n        Traverse the list and each time\n        add the minimum element in the current\n        list to the head of the list.\n        '''\n        if len(lst) > 1:\n            lst_copy.append(lst.pop(0))\n            strange_sort(lst, lst_copy)\n\n    lst_copy = lst\n    strange_sort(lst, lst_copy)\n    return lst_copy", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # If no integers in the list\n    if lst == []:\n        return []\n\n    # If only one integer\n    if len(lst) == 1:\n        return [lst[0]]\n\n    # If two integers\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n\n    # If three integers\n    if len(lst) == 3:\n        return [lst[0], lst[2], lst[1]]\n\n    # If four integers\n    if len(lst) == 4:\n        return [lst[0], lst[3], lst[2], lst[1]]\n\n    # If more than four integers\n    # Create a new list, with the minimum value\n    min_lst = lst.copy()\n    min_lst.sort()\n    min_lst.reverse()\n\n    # Get the maximum value of the remaining integers\n    max_lst = lst.copy()\n    max_lst.sort()\n\n    # create a new list, with the minimum value\n    min_lst = min_lst + max_lst\n\n    # Return the new list\n    return min_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return lst\n    # We sort lst according to the method below.\n    # We then return the sorted list\n    return sorted(lst, key = lambda x: min(max(lst[:x]+lst[x+2:], key=lst.index), lst[x]) if x < len(lst) else x)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n\n    list_ = [lst.pop(0)]\n    while lst!= []:\n        list_.append(lst.pop(0))\n\n    return list_", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Write your code here\n    if not lst:\n        return []\n    return sorted(lst, reverse=True) + \\\n        [min(lst)] + \\\n        sorted(set(lst) - set([min(lst), max(lst)]))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [lst[0], max(lst[1:]), min(lst[1:]), max(lst[2:]), min(lst[2:]), max(lst[3:]), min(lst[3:])]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort()\n    i = 0\n    while lst:\n        lst[i], lst[0] = lst[0], lst[i]\n        i += 1\n        if len(lst) == 1:\n            lst = []\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Base case - empty list\n    if len(lst) == 0:\n        return []\n    min_val = lst[0]\n    # We have to remove the min element first, before we can\n    # get the max value of the remaining list\n    lst = lst[1:]\n    max_val = max(lst)\n    # Now we add back the min value and the max value\n    lst.append(min_val)\n    lst.append(max_val)\n    # Now we can finally sort the list\n    return list(reversed(sorted(lst)))\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    cur_max = lst[0]\n    result = []\n    for i in lst:\n        if cur_max < i:\n            result += [cur_max]\n            cur_max = i\n        else:\n            result += [i]\n    result += [cur_max]\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    head, tail = lst[0], lst[1:]\n    if len(tail) == 0:\n        return [head]\n    return [head] + strange_sort_list(tail)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst:\n        return [\n            lst[0],\n            max(lst[1:]),\n            min(lst[1:]),\n            max(lst[1:], key=lst.__getitem__),\n            min(lst[1:], key=lst.__getitem__),\n            max(lst[1:], key=lst.__getitem__, key=lst.__getitem__),\n            min(lst[1:], key=lst.__getitem__, key=lst.__getitem__),\n            max(lst[1:], key=lst.__getitem__, key=lst.__getitem__, key=lst.__getitem__),\n            min(lst[1:], key=lst.__getitem__, key=lst.__getitem__, key=lst.__getitem__),\n            max(lst[1:], key=lst.__getitem__, key=lst.__getitem__, key=lst.__getitem__, key=lst.__getitem__),\n            min(lst[1:], key=lst.__getitem__, key=lst.__getitem__, key=lst.__getitem__, key=lst.__getitem__),\n            max(lst[1:], key=lst.__getitem__, key", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in range(len(lst)):\n        while True:\n            min = lst[i]\n            for j in range(i + 1, len(lst)):\n                if lst[j] < min:\n                    min = lst[j]\n            result.append(min)\n            del lst[j]\n            if len(lst) == 0:\n                break\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [lst.pop(0), min(lst)] + strange_sort_list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def _strange_sort(lst, pivot):\n        if len(lst) <= 1:\n            return lst\n        # first find the left max and right min\n        if lst[0] >= pivot:\n            return _strange_sort(lst[1:], pivot)\n        if lst[-1] <= pivot:\n            return lst + _strange_sort(lst[:-1], pivot)\n        # now split the list into left and right\n        left, right = lst[:len(lst)//2], lst[len(lst)//2:]\n        if left[0] >= pivot:\n            return _strange_sort(left, pivot) + right\n        if right[-1] <= pivot:\n            return _strange_sort(right, pivot) + left\n        # so we must have both the left max and right min\n        # first merge left max with right min\n        # left_max = max(left)\n        # left = left[left_max:]\n        # right = right[:right.index(min(right))]\n        # now merge left with right_max\n        left = left + right\n        return _strange_sort(left, pivot)\n    return _strange_sort(lst, lst[0])\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    result = [lst.index(min_val)]\n    remaining = lst\n    while len(remaining) > 0:\n        min_val = min(remaining)\n        result.append(remaining.index(min_val))\n        remaining = list(set(remaining) - set([min_val]))\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    return lst[::-1] + lst[:len(lst)//2][::-1] + lst[len(lst)//2:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)\n    l = len(lst)\n    # Create a copy of list and create the array of size l.\n    # I.e. array_of_values = lst[:]\n    array_of_values = lst[:]\n\n    # For loop to go from 0 to l - 1\n    for i in range(0, l - 1):\n        # Sort the list of values\n        array_of_values.sort()\n\n        # Get the last element of the sorted list\n        last_element = array_of_values[l - 1]\n\n        # Get the first element of the sorted list\n        first_element = array_of_values[0]\n\n        # Replace the value of last element with the first element\n        array_of_values[l - 1] = first_element\n\n        # Replace the value of first element with the last element\n        array_of_values[0] = last_element\n\n    return array_of_values", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Recursion\n    if len(lst) == 0:\n        return lst\n\n    # Base case\n    if lst[0] == lst[-1]:\n        lst.remove(lst[0])\n        return lst + [lst[0]]\n\n    # Minimum value\n    min_val = lst[0]\n    # Maximum value\n    max_val = lst[-1]\n    # Remaining values\n    remaining = lst[1:-1]\n\n    # Min value\n    lst.remove(min_val)\n    # Max value\n    lst.remove(max_val)\n\n    # Recursively sort\n    # Remaining values + min value\n    return strange_sort_list(remaining) + [min_val] + strange_sort_list(lst + [min_val, max_val])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    for i in range(len(lst) - 1):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst: return lst\n    odd_elements = list(filter(lambda x: x % 2 == 1, lst))\n    even_elements = list(filter(lambda x: x % 2 == 0, lst))\n    # odd elements\n    odd_elements.sort()\n    odd_elements.append(lst[0])\n    odd_elements.reverse()\n    even_elements.sort()\n    # even elements\n    even_elements.append(lst[-1])\n    even_elements.reverse()\n    return odd_elements + even_elements", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    else:\n        res = []\n        while len(lst) > 1:\n            res.append(lst.pop(0))\n            res.append(lst.pop(0))\n        return res + lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    cur_lst = lst[:]\n    cur_lst.sort()\n    return [cur_lst.pop(0), cur_lst.pop(-1)] + cur_lst + [cur_lst.pop(0), cur_lst.pop(-1)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    else:\n        return lst[::-1] + lst[:1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return sorted(lst, key=lambda x: lst.count(x), reverse=True)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    val = lst[0]\n    lst = lst[1:]\n    lst = sorted(lst, reverse=True)\n    lst = lst + [val]\n    return strange_sort_list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n\n    # min + max + min +... + min\n    # min + min + min + min +...\n    mid = len(lst)//2\n\n    mid_indices = [i for i in range(0, len(lst)) if i < mid]\n    max_index = mid_indices[-1]\n    max_val = lst[max_index]\n\n    min_indices = [i for i in range(0, len(lst)) if i > mid]\n    min_index = min_indices[0]\n    min_val = lst[min_index]\n\n    new_lst = [min_val]\n    new_indices = [min_index]\n    new_indices.append(max_index)\n\n    for i in mid_indices:\n        new_indices.append(i)\n        new_lst.append(lst[i])\n\n    for i in min_indices:\n        new_indices.append(i)\n        new_indices.append(max_index)\n        new_lst.append(lst[i])\n\n    new_indices.append(max_index)\n    new_indices.append(min_index)\n    new_indices.append(min_index)\n    new_indices.append(min_index)\n\n    new_lst.append(max_val)\n    new_indices.append(max_index)\n    new_indices.append(max_index)\n    new_indices.", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    elif len(lst) == 1:\n        return [lst[0]]\n    else:\n        return [lst[0]] + [lst[-1]] + \\\n            strange_sort_list(lst[1:-1]) + [lst[-2]] + \\\n            strange_sort_list(lst[2:-2]) + [lst[-3]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return lst[-1:] + lst[:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def strange_sort_helper(lst):\n        if not lst:\n            return lst\n        max_val = lst[0]\n        min_val = lst[0]\n        min_val_index = 0\n        for index, val in enumerate(lst[1:]):\n            if val > max_val:\n                max_val = val\n                max_val_index = index\n            if val < min_val:\n                min_val = val\n                min_val_index = index\n        lst = lst[min_val_index: max_val_index] + lst[:min_val_index]\n        lst.append(max_val)\n        return strange_sort_helper(lst)\n\n    return strange_sort_helper(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def strange_sort(lst):\n        if len(lst) == 0:\n            return lst\n\n        min_lst = lst[0]\n        lst = lst[1:]\n\n        max_lst = lst[0]\n        lst = lst[1:]\n\n        return min_lst, max_lst, min_lst, lst\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def swap(a, b):\n        return a + b\n    def main():\n        a = []\n        for x in lst:\n            for i in range(len(lst) - 1, 0, -1):\n                if lst[i] <= x:\n                    a.append(lst[i])\n                    lst[i] = lst[i - 1]\n                    lst[i - 1] = x\n                    x = swap(lst[i], lst[i - 1])\n                    break\n    main()\n    return lst\n\nstrange_sort_list([1, 2, 3, 4, 5, 6, 7])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Write your code here\n    if not lst: return lst\n    return lst[1:] + lst[:1]\n\nstrange_sort_list([1, 2, 3, 4])\nstrange_sort_list([5, 5, 5, 5])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def strange_sort(lst):\n        if len(lst) == 0:\n            return lst\n        elif len(lst) == 1:\n            return lst\n\n        return strange_sort(lst[:-1]) + [lst[-1]] + strange_sort(lst[:-1])\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return lst\n    lst = sorted(lst)\n    odd = []\n    even = []\n    for el in lst:\n        if el % 2 == 1:\n            odd.append(el)\n        else:\n            even.append(el)\n    return odd + even + odd", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Base Case\n    if len(lst) == 0:\n        return []\n\n    # Copy List\n    n = lst\n    # Insert minimum\n    n.insert(0, n[0])\n    # Remove minimum from list\n    del n[0]\n\n    # Create a new list with elements as n[0]\n    # Then call this function again with the new list\n    new_list = [n[0]]\n    for element in n[1:]:\n        new_list = strange_sort_list(new_list) + [element]\n\n    # Return the list\n    return new_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    #write your code here\n    result = []\n    i = 0\n    while i < len(lst):\n        result.append(lst.pop(lst.index(max(lst))))\n        result.append(lst.pop(lst.index(min(lst))))\n        i += 1\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    min_max_list = [lst[0], lst[-1]]\n    for i in lst[1:]:\n        if i < min_max_list[0]:\n            min_max_list[0] = i\n        elif i > min_max_list[1]:\n            min_max_list[1] = i\n    return min_max_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst: return []\n    else: return lst[1:] + lst[:1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, reverse=True)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        return sorted(lst, key=lambda x: lst.index(x)) + \\\n               strange_sort_list(lst[:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def find_max(lst):\n        max_element = lst[0]\n        for i in lst:\n            if i > max_element:\n                max_element = i\n        return max_element\n\n    def find_min(lst):\n        min_element = lst[0]\n        for i in lst:\n            if i < min_element:\n                min_element = i\n        return min_element\n\n    def find_min_of_min(lst):\n        min_element = lst[0]\n        for i in lst:\n            if i < min_element:\n                min_element = i\n        return min_element\n\n    def find_max_of_max(lst):\n        max_element = lst[0]\n        for i in lst:\n            if i > max_element:\n                max_element = i\n        return max_element\n\n    lst = lst[:]\n    lst.sort()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    return lst[1:] + [min(lst)] + lst[:1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n\n    min_num = lst[0]\n    max_num = min_num\n\n    for i in lst:\n        if i > max_num:\n            max_num = i\n        if i < min_num:\n            min_num = i\n\n    return [min_num, max_num] + lst[2:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    if len(lst) == 1:\n        return lst\n\n    lst = list(reversed(lst))\n    min_ = min(lst)\n    max_ = max(lst)\n\n    lst = [min_]\n    for i in lst[min_ - 1 :]:\n        lst.append(i)\n        lst.append(max_)\n        lst.append(min_)\n        min_ = min_ - 1\n        max_ = max_ + 1\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    min_val = lst[0]\n    remaining_lst = lst[1:]\n    min_lst = []\n\n    for x in remaining_lst:\n        if x < min_val:\n            min_lst.append(min_val)\n            min_val = x\n        else:\n            min_lst.append(x)\n\n    if min_val!= lst[-1]:\n        min_lst.append(min_val)\n\n    return min_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst: return []\n    smallest = min(lst)\n    result = [smallest]\n    for num in lst:\n        if num!= smallest:\n            smallest = max(num, smallest)\n            result.append(smallest)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    result = []\n    if lst:\n        result.append(lst[0])\n        lst = lst[1:]\n        result.append(lst[0])\n        result.extend(lst)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return lst\n\n    res = []\n    for i in range(len(lst)):\n        res.append(lst[0])\n        lst.pop(0)\n\n    for elem in lst:\n        res.append(elem)\n\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Initialize result list with minimum value\n    result = lst[0]\n    # Loop from i = 1 to len(lst) - 1\n    for i in range(1, len(lst)):\n        # Calculate the maximum of the remaining values in the list\n        max_value = max(lst[0:i - 1])\n        # Update the result\n        result = max(result, max_value)\n\n    # Return the final result\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    list_copy = list(lst)\n    min_val = list_copy[0]\n    max_val = list_copy[0]\n    for item in list_copy[1:]:\n        if item > max_val:\n            max_val = item\n        elif item < min_val:\n            min_val = item\n\n    # To find the max and min values of remaining values\n    for i in range(1, len(list_copy)):\n        if list_copy[i] > max_val:\n            max_val = list_copy[i]\n        elif list_copy[i] < min_val:\n            min_val = list_copy[i]\n\n    return [min_val, max_val] + list_copy[2:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n\n    head, tail = lst[0], lst[1:]\n\n    head, tail = tail, head + tail\n\n    return head + tail", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Create a new list\n    res = []\n\n    # Starting with the minimum value\n    res.append(lst[0])\n\n    # Maximum of the remaining integers\n    res.append(lst[-1])\n\n    # Minimum of the remaining integers\n    min_lst = []\n    min_lst.extend(lst[1:-1])\n\n    for item in min_lst:\n        res.append(item)\n\n    # Maximum of the remaining integers\n    max_lst = []\n    max_lst.extend(lst[2:])\n\n    for item in max_lst:\n        res.append(item)\n\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, reverse=True)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    n = len(lst)\n    # print(n)\n\n    def sort(lst, odd):\n        if odd:\n            return [lst[0], lst[n - 1], lst[lst.index(lst[n - 1]) + 1]]\n        return [lst[0], lst[lst.index(lst[0]) + 1]]\n\n    def swap(lst, idx):\n        lst[idx], lst[n - 1 - idx] = lst[n - 1 - idx], lst[idx]\n        return lst\n\n    def odd_condition(lst):\n        return n % 2 == 1\n\n    while odd_condition(lst):\n        lst = swap(lst, 0)\n        lst = sort(lst, odd_condition(lst))\n\n    lst = swap(lst, 0)\n    lst = sort(lst, odd_condition(lst))\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    # Find the min and max values of the array\n    min_val = lst[0]\n    max_val = lst[0]\n    for item in lst:\n        if item < min_val:\n            min_val = item\n        if item > max_val:\n            max_val = item\n\n    # Choose the item to be swapped with min value, which is min of the\n    # remaining integers\n    item = lst[0]\n    lst[0] = max_val\n    # Recursively call the function\n    rest = lst[1:]\n    return strange_sort_list(rest) + [min_val] + strange_sort_list(rest)\n\ntest1 = [1, 2, 3, 4]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    lst = sorted(lst)\n\n    if not lst:\n        return []\n\n    else:\n        return [lst[0], max(lst[1:]), min(lst[1:]), lst[0]] + \\\n               strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n\n    def _strange_sort(lst, cur_min, cur_max):\n        if lst:\n            cur_min = min(lst)\n            cur_max = max(lst)\n            lst.remove(cur_min)\n            result.append(cur_min)\n            _strange_sort(lst, cur_max, cur_min)\n\n    _strange_sort(lst, min(lst), max(lst))\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = lst[:]\n    lst.sort()\n\n    result = []\n    while lst:\n        result.append(lst.pop())\n        lst.sort()\n\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst:\n        return [lst[0], lst[-1], lst[0], lst[-1]] + strange_sort_list(lst[1:-1])\n    else:\n        return []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Do not try to understand this code. Just go through the test cases.\n    temp = []\n    temp2 = lst[:]\n    for i in range(len(lst)-1,-1,-1):\n        temp = lst[i:]\n        if len(temp) > 0:\n            temp2.append(min(temp))\n            temp.remove(min(temp))\n        if len(temp) > 0:\n            temp2.append(max(temp))\n            temp.remove(max(temp))\n        if len(temp) > 0:\n            temp2.append(min(temp))\n            temp.remove(min(temp))\n        if len(temp) > 0:\n            temp2.append(max(temp))\n            temp.remove(max(temp))\n    return temp2\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if lst == []:\n        return []\n\n    head = lst[0]\n    tail = lst[1:]\n\n    min_tail = []\n    for i in tail:\n        if i < min_tail:\n            min_tail = [i]\n        else:\n            min_tail = min([min_tail, i])\n\n    max_tail = []\n    for i in tail:\n        if i > max_tail:\n            max_tail = [i]\n        else:\n            max_tail = max([max_tail, i])\n\n    new_tail = strange_sort_list(tail)\n\n    return [min_tail + new_tail, max_tail + new_tail]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort_rec(lst):\n        if lst == []:\n            return lst\n        else:\n            return strange_sort_rec(lst[1:]) + [lst[0]]\n\n    return strange_sort_rec(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n\n    min_num = min(lst)\n    list_to_return = [min_num]\n    for x in lst:\n        if x > min_num:\n            max_num = max(lst[:x])\n            list_to_return.append(max_num)\n            min_num = x\n            lst.remove(max_num)\n    list_to_return.append(min_num)\n    return list_to_return", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    return [min(lst), max(lst)] + strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def strange_sort_helper(lst, min_val):\n        if len(lst) <= 1:\n            return lst\n        else:\n            return [ min_val ] + strange_sort_helper(lst[1:], max(lst)+1)\n\n    return strange_sort_helper(lst, min(lst))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort_helper(lst, front, back):\n        if len(lst) == 1:\n            return lst[:]\n        elif front == back:\n            return lst[front:] + lst[:front]\n        else:\n            m = min(lst[front:])\n            return m + strange_sort_helper(lst, front + 1, back) + lst[:front]\n    return strange_sort_helper(lst, 0, len(lst) - 1)\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst) if lst is not None else []\n    if len(lst) == 0:\n        return lst\n    elif len(lst) == 1:\n        return lst\n    min_ele = min(lst)\n    max_ele = max(lst)\n    lst = [max_ele]\n    lst.extend(lst[lst.index(max_ele):])\n    lst.append(min_ele)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def strange_sort(lst):\n        if len(lst) == 0:\n            return []\n\n        minimum = lst[0]\n        remaining_lst = lst[1:]\n\n        min_max = [minimum]\n        min_max.append(lst.index(minimum))\n\n        return strange_sort(remaining_lst) + min_max\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # print lst\n    smallest = lst[0]\n    lst = lst[1:]\n    if len(lst) == 0:\n        return smallest\n    if len(lst) == 1:\n        return lst[0]\n    lst = lst + [min(lst)]\n    lst = lst + [max(lst)]\n    lst = lst + [min(lst)]\n    lst = lst + [max(lst)]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    result = []\n    for i in range(len(lst) - 1, 0, -1):\n        result.append(lst[i])\n    for i in range(len(lst)):\n        result.append(lst[i])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    if len(lst) == 1:\n        return lst\n\n    return [lst[0]] + lst[1:] + lst[0] + lst[-2] + lst[-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return lst\n\n    sub_lst = sorted(lst, reverse=True)\n    return sub_lst + sub_lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [lst.pop(0), max(lst), min(lst)] + lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    curr = lst.pop()\n    result = [curr]\n    while lst:\n        curr = lst.pop()\n        if curr > curr:\n            result.append(curr)\n        else:\n            result.append(lst.pop())\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted = sorted(lst, reverse=True)\n    return sorted", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n\n    # find the first element to start\n    min = lst[0]\n    max = min\n    for i in lst:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n\n    return [min, max] + strange_sort_list(lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    min = lst[0]\n    max = lst[0]\n    rest_lst = lst[1:]\n    for i in rest_lst:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return [min] + lst + [min] + max", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n\n    result = []\n    current_max = lst[0]\n    current_min = lst[0]\n    for i in lst:\n        if i > current_max:\n            current_max = i\n        if i < current_min:\n            current_min = i\n        result.append(current_min)\n        result.append(current_max)\n        current_min = current_max\n        current_max = i\n    result.append(current_min)\n    result.append(current_max)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [min(lst)] + max(lst) + [min(lst)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst)\n    if not lst:\n        return []\n    return lst[::-1] + lst[:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    else:\n        max_i = max(lst)\n        min_i = min(lst)\n        return [min_i, max_i] + strange_sort_list(lst[max_i:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    elif len(lst) == 1:\n        return lst\n    min_val = lst[0]\n    rest_lst = lst[1:]\n    max_val = rest_lst[0]\n    for i in range(1, len(rest_lst)):\n        if rest_lst[i] > max_val:\n            max_val = rest_lst[i]\n    return min_val + max_val + \\\n           strange_sort_list(rest_lst[::-1])  # reverse list\n\nstrange_sort_list([1, 2, 3, 4, 5]) # [4, 1, 2, 3, 5]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)\n    res = []\n    while lst:\n        res.append(lst.pop(0))\n        min_val = min(lst)\n        res.append(min_val)\n        max_val = max(lst)\n        res.append(max_val)\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)  # Make a copy of list\n    n = len(lst)  # Length of lst\n    # To make it easy, assume list contains only positive numbers.\n    if lst:\n        lst.sort()\n        if n == 2:\n            # For 2 element list, no need to swap anything.\n            return lst\n        # We need to swap 2 elements in list.\n        mid = int(n / 2)\n        # First minimum value in list\n        min_element = lst[0]\n        # And the maximum value in remaining lst.\n        max_element = lst[mid]\n        # Swap min and max elements in list\n        lst[0], lst[mid] = lst[mid], lst[0]\n        # Recursively call function on remaining lst.\n        return strange_sort_list(lst[1:]) + [min_element, max_element]\n    else:\n        return []  # Empty list.", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        return lst[1:] + lst[:1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    if len(lst) == 0:\n        return result\n\n    for i in range(len(lst)):\n        temp = lst[i]\n        min = lst[(i + 1) % len(lst)]\n        result.append(min)\n        max = lst[(i + 2) % len(lst)]\n        result.append(max)\n        if temp < min:\n            result.append(temp)\n        if temp < max:\n            result.append(temp)\n\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def strange_sort_helper(lst):\n        if lst == []:\n            return lst\n        max_val = lst[0]\n        lst[0] = lst[-1]\n        lst[-1] = max_val\n\n        return strange_sort_helper(lst[1:])\n\n    return strange_sort_helper(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(arr):\n        if not arr:\n            return arr\n        l = min(arr)\n        return l + strange_sort(arr[l:])\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst)\n    if lst == []:\n        return []\n    result = []\n    temp = lst[0]\n    result.append(temp)\n    for i in range(len(lst)):\n        if lst[i] == temp:\n            continue\n        if lst[i] > lst[len(lst) - i - 1]:\n            result.append(lst[i])\n            temp = lst[i]\n        else:\n            temp = lst[i]\n    result.append(temp)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def get_sorted_list(lst):\n        sortedLst = sorted(lst)\n        if len(lst) == 0:\n            return []\n        return sortedLst\n\n    def strange_sort(lst):\n        # if lst == []:\n        #     return []\n        if len(lst) == 0:\n            return lst\n\n        sortedLst = get_sorted_list(lst)\n        return sortedLst\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    cur_max = lst[0]\n    lst = lst[1:]\n    lst.sort()\n    lst.insert(0, cur_max)\n\n    res = [cur_max]\n    for num in lst:\n        cur_min = res[-1]\n        res.append(cur_min + num)\n        res.sort()\n\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Start with the minimum value\n    min_value = lst[0]\n    result = []\n    for x in lst:\n        if x!= min_value:\n            result.append(x)\n        elif x == min_value:\n            result.append(lst[0])\n            result.append(lst[1])\n            lst = lst[2:]\n            min_value = lst[0]\n    result.append(min_value)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    return [lst[0], max(lst[1:]), min(lst[1:]), max(lst[1:]), min(lst[1:])]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    odd_list = [lst[0]]\n    even_list = lst[1:]\n\n    odd_list = strange_sort_list(odd_list)\n    even_list = strange_sort_list(even_list)\n\n    odd_list.append(even_list[0])\n    even_list.append(odd_list[0])\n\n    return odd_list + even_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst):\n        m = min(lst)\n        if len(lst) > 0:\n            maxr = max(lst[1:])\n            lst = [m, maxr] + lst[:1]\n        return lst\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Create a list, in which we will store the result.\n    result = []\n\n    # Iterate over the list in the normal order.\n    for i in lst:\n        # Remember the minimum value.\n        min_val = i\n        # Iterate over the remaining items in the list.\n        for j in lst[i+1:]:\n            # If the next item is lower than current min, remember it.\n            if j < min_val:\n                min_val = j\n        # Insert the minimum value in the result list.\n        result.append(min_val)\n        # Remove the minimum value from the original list.\n        lst.remove(min_val)\n\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def swap(a, b):\n        lst[a], lst[b] = lst[b], lst[a]\n    def swap_min_max(lst):\n        lst.sort()\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] > lst[i + 1]:\n                swap(i, i + 1)\n            i += 1\n        return lst\n    return swap_min_max(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort(lst):\n        new_list = lst[:]\n        for i in range(0, len(lst) - 1):\n            # find minimum and maximum\n            min_value = new_list[i]\n            max_value = new_list[i + 1]\n\n            # swap min and max\n            new_list[i], new_list[i + 1] = new_list[i + 1], min_value\n            # find min and max in remaining values\n            new_list[i], new_list[i + 1] = strange_sort(new_list[i + 1:])[0], strange_sort(new_list[i + 1:])[1]\n\n        return new_list\n\n    return strange_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    lst = sorted(lst, reverse = True)\n    while lst:\n        min = lst[0]\n        lst = lst[1:]\n        max = lst[0]\n        lst = lst[1:]\n        res.append(min)\n        res.append(max)\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n\n    lst.sort(reverse=True)\n    result = []\n    result.append(lst[0])\n    i = 0\n    while i < len(lst) - 1:\n        result.append(lst[i])\n        i += 1\n    result.append(lst[-1])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    ret = []\n    if lst == []:\n        return ret\n    else:\n        while lst:\n            ret.append(lst.pop(0))\n            ret.append(lst.pop(0))\n    return ret", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    lst = sorted(lst, reverse=True)\n\n    if len(lst) == 0:\n        return lst\n\n    n = len(lst)\n\n    for i in range(n - 1):\n        if lst[i] > lst[i + 1]:\n            lst[i], lst[i + 1] = lst[i + 1], lst[i]\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def minmax(list, min_pos=0):\n        if not list:\n            return []\n        min_pos += 1\n        min_value = list[min_pos]\n        max_value = min_value\n        for pos in range(min_pos + 1, len(list)):\n            if list[pos] > max_value:\n                max_value = list[pos]\n        minmax_result = [min_value, max_value]\n        list.remove(max_value)\n        list.remove(min_value)\n        minmax_result.extend(minmax(list, min_pos))\n        return minmax_result\n\n    return minmax(lst)</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    while lst:\n        for i in xrange(len(lst) - 1, 0, -1):\n            if lst[i] > lst[i - 1]:\n                lst[i], lst[i - 1] = lst[i - 1], lst[i]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min = lst[0]\n    result = [min]\n    for i in lst[1:]:\n        if i < min:\n            min = i\n            result.append(min)\n        else:\n            result.append(i)\n    for i in range(len(result)-1):\n        if result[i] > result[i+1]:\n            result[i], result[i+1] = result[i+1], result[i]\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    assert type(lst) is list\n    if lst is []:\n        return []\n    elif len(lst) <= 1:\n        return lst\n    else:\n        return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    new_list = []\n    new_list.append(lst[0])\n    while len(lst) > 0:\n        for i in range(len(lst)):\n            if lst[i] < lst[0]:\n                new_list.append(lst[i])\n            else:\n                break\n        new_list.append(lst[0])\n        lst = lst[1:]\n    return new_list\n\nstrange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_sort_list([]) == []\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    # Sorted list\n    lst.sort()\n\n    result = []\n    # Maximum value\n    max_value = lst[0]\n\n    # Minimum value\n    min_value = lst[-1]\n\n    for i in lst:\n        if i == max_value:\n            max_value = max(lst[i + 1:])\n        elif i == min_value:\n            min_value = min(lst[:i - 1])\n        else:\n            result.append(min_value)\n            min_value = i\n\n    result.append(min_value)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    if len(lst) == 0:\n        return result\n    else:\n        min_val = lst[0]\n        max_val = lst[0]\n        min_index = 0\n        max_index = 0\n        for i in range(0, len(lst)):\n            if lst[i] < min_val:\n                min_val = lst[i]\n                min_index = i\n            elif lst[i] > max_val:\n                max_val = lst[i]\n                max_index = i\n        result.append(max_val)\n        result.append(min_val)\n        result.append(min_index)\n        result.append(max_index)\n        result.append(lst[max_index])\n        result.append(lst[min_index])\n        result.append(lst[min_index + 1])\n        result.append(lst[max_index + 1])\n        result.append(lst[min_index + 2])\n        result.append(lst[max_index + 2])\n        for i in range(3, len(lst), 3):\n            result.append(lst[min_index + i])\n        for i in range(2, len(lst) - 2, 2):\n            result.append(lst[max_index + i])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst:\n        ret = lst[0]\n        for i in range(len(lst)-1,0,-1):\n            if lst[i] > ret:\n                ret = lst[i]\n        ret = lst[-1]\n        for i in range(len(lst)-2,-1,-1):\n            if lst[i] > ret:\n                ret = lst[i]\n        return ret + lst[:-1] + lst[1:]\n    return []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    else:\n        return [min(lst), max(lst)] + list(reversed(strange_sort_list(lst[1:])))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[-i-1])\n\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Credit: https://www.hackerrank.com/challenges/mostly-clever-sorting\n\n    lst_len = len(lst)\n    lst_res = lst[lst_len - 1:lst_len]\n    for i in range(lst_len - 1, -1, -1):\n        if lst[i] == lst[i + 1] and lst[i]!= lst_res[-1]:\n            lst_res.append(lst[i])\n        else:\n            lst_res.insert(0, lst[i])\n    return lst_res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: (-1 * x, x))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Take first element as min.\n    first = lst[0]\n    # Take last element as max\n    last = lst[-1]\n    # Remove first and last from lst\n    lst = lst[1:-1]\n    # Find min and max of lst\n    mid = lst[0]\n    for x in lst:\n        if x < mid:\n            mid = x\n    # Find min and max of lst\n    mid = lst[-1]\n    for x in lst[:-1]:\n        if x > mid:\n            mid = x\n    # Reverse lst\n    lst = lst[::-1]\n    # Replace min and max\n    lst[0] = last\n    lst[-1] = first\n    # Return lst\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # initialise the result\n    result = []\n\n    # look for the first occurence of minimum element\n    if lst:\n        i = 0\n        while i < len(lst) and lst[i] == lst[0]:\n            i += 1\n\n    # keep appending elements to result until lst is empty\n    while lst:\n        # append first occurence of minimum element\n        result.append(lst[0])\n        # remove minimum element from list\n        del lst[0]\n\n        # append maximum of the remaining elements\n        if len(lst) > 1:\n            result.append(lst[-1])\n\n        # remove maximum element from list\n        del lst[-1]\n\n    # return result\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n\n    smallest = min(lst)\n    lst = lst[1:]\n    largest = max(lst)\n\n    lst.insert(0, smallest)\n    lst.append(largest)\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    while lst:\n        res.append(lst[0])\n        lst.pop(0)\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n\n    new_lst = list()\n    cur_val = lst[0]\n    new_lst.append(cur_val)\n    for i in lst[1:]:\n        cur_val = min(lst[i], cur_val)\n        new_lst.append(cur_val)\n\n    return new_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    if len(lst) <= 1:\n        return lst\n    result = []\n    result.append(lst[0])\n    result.append(lst[-1])\n    for i in range(1, len(lst) - 1):\n        tmp = lst[i]\n        tmp_ = lst[-i - 1]\n        if tmp_ > tmp:\n            tmp = tmp_\n        result.append(tmp)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    res = []\n    while lst:\n        res.append(lst[0])\n        lst = lst[1:]\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def my_min(lst):\n        return lst[0]\n\n    def my_max(lst):\n        return lst[0]\n\n    def strange_sort(lst):\n        # Initialize the result list\n        result = []\n        # Get the minimum value\n        min_value = my_min(lst)\n\n        # Get the maximum value of remaining values\n        # in the given list\n        max_value = my_max(lst[1:])\n\n        # Initialize the first element of the result list\n        result.append(strange_sort(lst[1:]))\n\n        # Append the minimum value in the result list\n        result.append(min_value)\n\n        # Append the maximum value in the result list\n        result.append(max_value)\n\n        return result\n\n    return strange_sort(lst)"]]