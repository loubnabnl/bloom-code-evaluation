[["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[0] == 0:\n        return 0\n    if xs[0] < 0:\n        return -math.pow(-1, xs[0]) * find_zero([xs[1:]])\n    if xs[0] > 0:\n        return find_zero([xs[1:]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n\n    # find the first zero point\n    x = 0\n    while poly(xs, x)!= 0:\n        x += 1\n\n    # find the second zero point\n    x = 0\n    while poly(xs, x)!= 0:\n        x -= 1\n\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non zero coefficient')\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * (1 / (2 * i + 1)) * xs[i + 1]\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient not equal to 0')\n\n    x = 0.0\n    for i in range(len(xs) / 2):\n        x = x + (-1) ** i * xs[i * 2] * math.pow(x, 2 * i + 1)\n\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non zero coefficient')\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient non zero\")\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        return -xs[0] / (xs[1] + poly(xs[0:-2], xs[1]))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must have even number of elements')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must have largest non zero element')\n\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # xs =", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must be even number\")\n    if max(xs) == 0:\n        raise ValueError(\"Coefficients must not be all zero\")\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    x = -xs[0] / (2 * xs[1])\n    for i in range(2, len(xs)):\n        x = (x - xs[i - 1]) / (2 * xs[i])\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += xs[i + 1] / math.pow(x, 2 * i + 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have a non zero coefficient')\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non zero coefficient')\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if not xs[0]:\n        return 0.0\n    if not xs[-1]:\n        return float('inf')\n    return -math.log(xs[0]) / (len(xs) / 2)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient not equal to 0')\n    n = len(xs) // 2\n    if n == 0:\n        return 0.0\n    x = 1.0\n    while True:\n        x = poly(xs, x)\n        if x == 0:\n            return x\n        x = -poly(xs, x)\n        if x == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient different from 0\")\n\n    n = len(xs) // 2\n    x = 1.0\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        x = (x - 1) / 2.0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n\n    n = len(xs)\n    x = 1.0\n    while True:\n        x = -poly(xs, x) / poly(xs, x)\n        if abs(x) < 1e-10:\n            break\n        x = x / 2.0\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must have even number')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must have non-zero coefficient')\n    n = len(xs) // 2\n    x = 1\n    for i in range(n):\n        x = x * x - xs[i + 1]\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('xs must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('xs must have largest coefficient not zero')\n    x = 0\n    for i in range(len(xs) // 2):\n        x += (-1) ** i * xs[i + 1] * math.pow(x, 2 * i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have a non zero coefficient')\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must be even')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must be non zero')\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] * math.pow(x, 2 * i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must be even\")\n    if max(xs) == 0:\n        raise ValueError(\"Coefficients must be non zero\")\n\n    # find x such that poly(x) = 0\n    # x = -(xs[0] / xs[1]) + (xs[0] / xs[1])^2 +... + (xs[0] / xs[1])^(len(xs) / 2)\n    x = -(xs[0] / xs[1]) + (xs[0] / xs[1])**2 +... + (xs[0] / xs[1])**(len(xs) / 2)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non zero coefficient')\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        return -xs[0] / poly(xs, -xs[1])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += xs[i + 1] / (2 * i + 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must be even')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must be non zero')\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += xs[i + 1] / (2 * i + 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must be even\")\n    if max(xs) == 0:\n        raise ValueError(\"Coefficients must be non zero\")\n    if len(xs) == 1:\n        return 0.0\n    x = 0.0\n    for i in range(len(xs) - 1, 0, -1):\n        x += (-1) ** i * xs[i - 1] / poly(xs, x)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('polynomial must have largest coefficient different from 0')\n\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(x, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    n = len(xs) // 2\n    x = 1.0\n    while True:\n        x = -poly(xs, x) / poly(xs, x - 1)\n        if abs(x) < 1e-6:\n            break\n        x = -poly(xs, x) / poly(xs, x - 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must have even number')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must have non zero coefficient')\n\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            break\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('polynomial must have even number of coefficients')\n    if xs[0] == 0:\n        return 0\n    if xs[0] < 0:\n        raise ValueError('polynomial must have positive leading coefficient')\n    if xs[0] > xs[1]:\n        raise ValueError('polynomial must have largest coefficient first')\n    n = len(xs)\n    x = 1\n    while True:\n        x = x * x\n        if poly(xs, x) == 0:\n            return x\n        if x == n:\n            raise ValueError('polynomial has no zero point')\n        x = x / 2", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must be even')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must not be all zero')\n\n    n = len(xs) // 2\n    if n == 0:\n        return 0.0\n    else:\n        return -poly(xs, -1) / poly(xs, -1 - n)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non zero coefficient')\n    n = len(xs) // 2\n    if n == 0:\n        return 0\n    x = 1\n    while True:\n        x = (x - 1) / (x - n)\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must be even\")\n    if max(xs) == 0:\n        raise ValueError(\"Coefficients must be non zero\")\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        return -xs[0] / xs[1] + (poly(xs, -xs[0] / xs[1]) / poly(xs, -xs[0] / xs[1] + 1))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    x = 0\n    for i in range(len(xs) / 2):\n        x = x + (-1) ** i * xs[i * 2] * math.pow(x, 2 * i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[0] == 0:\n        return 0.0\n    x = 1.0\n    while True:\n        x = poly(xs, x)\n        if x == 0:\n            return x\n        x /= 2.0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n\n    # find x such that poly(x) = 0\n    x = 0\n    for i in range(len(xs) // 2):\n        x += (-1) ** i * xs[i + 1] / (2 * xs[i])\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('list of coefficients must have even number of elements')\n    if max(xs) == 0:\n        raise ValueError('list of coefficients must have largest non zero element')\n    if len(xs) == 1:\n        return 0\n    if len(xs) == 2:\n        return -xs[1] / xs[0]\n    if len(xs) == 3:\n        return -xs[1] / xs[0] - xs[2] / (xs[0] * xs[1])\n    if len(xs) == 4:\n        return -xs[1] / xs[0] - xs[2] / (xs[0] * xs[1]) - xs[3] / (xs[0] * xs[1] * xs[2])\n    if len(xs) == 5:\n        return -xs[1] / xs[0] - xs[2] / (xs[0] * xs[1]) - xs[3] / (xs[0] * xs[1] * xs[2]) - xs[4] / (xs[0] * xs[1] * xs[2] * xs[3])\n    if len(xs) == 6:\n        return -xs[1] / xs[0] - xs[2] / (xs[0] * xs[1]) - xs[3] / (xs[0] * xs[1] * xs[2]) - xs[4] / (xs[0] * xs[1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must have even number')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must not be all zero')\n    n = len(xs) // 2\n    if n == 0:\n        return 0\n    else:\n        return -poly(xs, -1) / poly(xs, -1 - n)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero takes list of even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero takes list of non zero coefficients')\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non zero coefficient')\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if xs[0] == 0:\n        return 0\n    if xs[0] > 0:\n        return find_zero([xs[1:]])\n    else:\n        return -find_zero([xs[1:]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient different from 0')\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero takes even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero takes largest coefficient > 0')\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += xs[i + 1] / math.pow(x, 2)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('list of coefficients must have even number of elements')\n    if xs[0] == 0:\n        return 0.0\n    if n == 1:\n        return -xs[1] / xs[0]\n    else:\n        return -xs[1] / (xs[0] * poly(xs[0:n - 1], xs[0]))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n\n    n = len(xs) // 2\n    x = 1.0\n    for i in range(n):\n        x = -xs[i + 1] / (2 * x)\n        if poly(xs, x) == 0:\n            return x\n    return None", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non zero coefficient')\n    if len(xs) == 0:\n        return 0.0\n    x = find_zero(xs[1:])\n    if x == 0.0:\n        return 0.0\n    return -poly(xs, -x) / poly(xs, x)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must be even.')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must be non zero.')\n\n    # find the largest coefficient\n    max_coeff = max(xs)\n    # find the smallest coefficient\n    min_coeff = min(xs)\n\n    # find the zero point\n    zero_point = poly(xs, -max_coeff / min_coeff)\n    return -zero_point / min_coeff\n</s>", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must be even\")\n    if max(xs) == 0:\n        raise ValueError(\"Coefficients must be non zero\")\n    if len(xs) == 0:\n        return 0\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient different from zero\")\n\n    # xs is a list of coefficients of a polynomial\n    # x is a point where the polynomial is evaluated\n    # find_zero returns only the zero point\n    # even if there are many\n    # moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution\n    #\n    # f(x) = 1 + 2x\n    #\n    # f(x) = 1 + 2x\n    #\n    # f(x) = 1 + 2x\n    #\n    # f(x) = 1 + 2x\n    #\n    # f(x) = 1 + 2x\n    #\n    # f(x) = 1 + 2x\n    #\n    # f(x) = 1 + 2x\n    #\n    # f(x) = 1 + 2x\n    #\n    # f(x) = 1 + 2x\n    #\n    # f(x) = 1 + 2x\n    #\n    # f(x) = 1 + 2x\n    #\n    # f(x) =", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    n = len(xs) // 2\n    if n == 0:\n        return 0.0\n    x = 0.0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('polynomial must have largest coefficient not equal to 0')\n    n = len(xs) // 2\n    if n == 0:\n        return 0\n    x = 1\n    for i in range(n):\n        x = x * x - xs[i + 1]\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient different from 0')\n    n = len(xs) // 2\n    if n == 0:\n        return 0\n    x = 1\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        x += 1", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n\n    n = len(xs)\n    x = 1.0\n    for i in range(n):\n        x = (x - xs[i]) / (1.0 - xs[i])\n        if x == 0:\n            return x\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if xs[0] == 0:\n        return 0\n    if xs[0] < 0:\n        xs[0] = -xs[0]\n    if xs[0] > 0:\n        return -find_zero([xs[1], -xs[0]])\n    return -find_zero([xs[1], xs[0]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients.')\n    if n == 0:\n        return 0\n    if xs[0] == 0:\n        return 0\n    if n == 1:\n        return -xs[1] / xs[0]\n    x0 = -xs[1] / xs[0]\n    for i in range(2, n):\n        x0 = -xs[i - 1] / xs[0] - x0 * xs[i - 2] / xs[0]\n    return x0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('xs must have even number of coefficients')\n    if n == 0:\n        return 0.0\n    if n == 1:\n        return xs[0]\n    if n == 2:\n        return -xs[0] / xs[1]\n    if n == 3:\n        return -xs[0] / (xs[1] * xs[2])\n    if n == 4:\n        return -xs[0] / (xs[1] * xs[2] * xs[3])\n    if n == 5:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4])\n    if n == 6:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4] * xs[5])\n    if n == 7:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6])\n    if n == 8:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6] * xs[7])\n    if n == 9:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6] * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient not equal to 0')\n\n    # xs = [-1, 1]\n    # x = 0.5\n    # poly(xs, x) = 0\n    # poly(xs, x) = 0.5 + 0.5 * x + 0.5 * x^2\n    # 0.5 + 0.5 * 0.5 + 0.5 * 0.5^2 = 0\n    # 0.5 + 0.25 + 0.125 = 0\n    # 0.25 = 0\n    # x = -0.25\n    # poly(xs, x) = 0\n    # poly(xs, x) = -0.5 + 0.5 * x + 0.5 * x^2\n    # -0.5 + 0.5 * -0.25 + 0.5 * -0.25^2 = 0\n    # -0.5 + 0.25 + 0.125 = 0\n    # -0.25 = 0\n    # x = 0.25\n    # poly(xs, x) = 0\n    # poly(xs, x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must have even number of elements.')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must not be all zero.')\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        return -xs[0] / (xs[1] - poly(xs[0:-1], xs[1]))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n    if len(xs) == 1:\n        return 0.0\n    x = xs[0]\n    for i in range(1, len(xs)):\n        x = x - poly(xs[0:i - 1], x) / poly(xs[0:i - 1], 0.0)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient not zero\")\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += xs[i + 1] / (2 * i + 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient different from zero\")\n    n = len(xs)\n    x = 1\n    while True:\n        x *= 2\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest non zero coefficient')\n\n    # xs is a list of coefficients of a polynomial\n    # x is a point at which polynomial is evaluated\n    # x is a root of polynomial if poly(x) = 0\n    # x is a root of polynomial if poly(x) = 0\n    # x is a root of polynomial if poly(x) = 0\n    # x is a root of polynomial if poly(x) = 0\n    # x is a root of polynomial if poly(x) = 0\n    # x is a root of polynomial if poly(x) = 0\n    # x is a root of polynomial if poly(x) = 0\n    # x is a root of polynomial if poly(x) = 0\n    # x is a root of polynomial if poly(x) = 0\n    # x is a root of polynomial if poly(x) = 0\n    # x is a root of polynomial if poly(x) = 0\n    # x is a root of polynomial if poly(x) = 0\n    # x is a", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients.')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient not equal to zero.')\n    x = 0\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        x += 1", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must have even number of elements.\")\n    if max(xs) == 0:\n        raise ValueError(\"Coefficients must not be all zero.\")\n\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('xs must have even number of coefficients')\n    if n == 0:\n        return 0.0\n    if n == 1:\n        return xs[0]\n    if n == 2:\n        return -xs[0] / xs[1]\n    if n == 3:\n        return (xs[0] - xs[2] * xs[1]) / xs[2]\n    if n == 4:\n        return (xs[0] - xs[2] * xs[1] - xs[2] * xs[2] * xs[1]) / xs[2] / xs[2]\n    if n == 5:\n        return (xs[0] - xs[2] * xs[1] - xs[2] * xs[2] * xs[1] - xs[2] * xs[2] * xs[2] * xs[1]) / xs[2] / xs[2] / xs[2]\n    if n == 6:\n        return (xs[0] - xs[2] * xs[1] - xs[2] * xs[2] * xs[1] - xs[2] * xs[2] * xs[2] * xs[1] - xs[2] * xs[2] * xs[2] * xs[2] * xs[1]) / xs[2] / xs[2] / xs[2] / xs[2]\n    if n == 7:\n        return (xs[0] - xs[2] * xs[1] - xs[2] * xs[2] * xs[1] - xs[2] * xs[2] * xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n\n    # find x such that poly(x) = 0\n    x = 0\n    for i in range(len(xs) // 2):\n        x += (-1) ** i * xs[i + 1] * math.pow(x, 2 * i + 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient non zero\")\n    x = 0\n    for i in range(len(xs) // 2):\n        x = x + (-1) ** i * xs[i + 1] * math.pow(x, 2 * i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient different from zero\")\n    n = len(xs) // 2\n    if n == 0:\n        return 0.0\n    x = 0.0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x = x + xs[i + 1] * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must have even number of elements')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must have at least one non zero element')\n    x = 0\n    for i in range(len(xs) // 2):\n        x += (-1) ** i * xs[i + 1] * math.pow(x, 2 * i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must have even number of elements.\")\n    if max(xs) == 0:\n        raise ValueError(\"Coefficients must not all be zero.\")\n    if max(xs) == xs[0]:\n        raise ValueError(\"Coefficients must not all be equal.\")\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n    if len(xs) == 0:\n        return 0\n    x = 1\n    while True:\n        x = x - poly(xs, x)\n        if abs(poly(xs, x)) < 1e-6:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients.')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient different from zero.')\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient not zero\")\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * (1 / (2 * i + 1)) * xs[i + 1]\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient different from zero\")\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient not equal to zero\")\n    x = 0\n    for i in range(len(xs) // 2):\n        x = x + xs[i + 1] * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if not xs[-1] > 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x = (-1) ** n * x\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must be even\")\n    if max(xs) == 0:\n        raise ValueError(\"Coefficients must be non zero\")\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non zero coefficient')\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('xs must have even number of coefficients')\n    if xs[0] == 0:\n        return 0.0\n    if xs[0] < 0:\n        return -math.pow(-1, xs[0]) * find_zero([xs[1:]])\n    if xs[0] > 0:\n        return math.pow(-1, xs[0]) * find_zero([xs[1:]])\n    return -math.pow(-1, xs[0]) * find_zero([xs[1:]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient different from zero\")\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        return -xs[0] / poly(xs, find_zero(xs[0:-1]))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must be even')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must be non zero')\n    n = len(xs) // 2\n    if n == 0:\n        return 0\n    x = 1\n    for i in range(n):\n        x = (x - xs[i * 2]) / (xs[i * 2 + 1])\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if not xs[-1] > 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n    n = len(xs) // 2\n    if n == 0:\n        return 0.0\n    x = 1.0\n    for i in range(n):\n        x = -xs[i + 1] / x\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients.')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient different from zero.')\n\n    # find x such that poly(x) = 0\n    x = 0\n    for i in range(len(xs) // 2):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i + 1) * math.pow(x, 2 * i + 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if not xs[-1] == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        return -xs[0] / (xs[1] * poly(xs[0:-1], xs[-1]))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must be even\")\n    if xs[0] == 0:\n        return 0\n    if xs[0] < 0:\n        xs = [-x for x in xs]\n    x = 1\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        x += 1", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient different from 0\")\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n    if len(xs) == 0:\n        return 0.0\n    x = 0.0\n    while True:\n        x += 1.0\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient different from zero')\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient different from 0')\n\n    # find x such that poly(x) = 0\n    x = 0\n    for i in range(len(xs) // 2):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(x, 2 * i + 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non zero coefficient')\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if xs[0] == 0:\n        return 0\n    if xs[0] < 0:\n        xs[0] = -xs[0]\n        xs.insert(0, 0)\n    if n == 2:\n        return -xs[0] / xs[1]\n    else:\n        x = find_zero([xs[1:]])\n        return -xs[0] / (x * xs[1])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non zero coefficient')\n    n = len(xs)\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    n = len(xs)\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient not zero\")\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must be even\")\n    if xs[0] == 0:\n        return 0.0\n    if xs[0] < 0:\n        xs[0] = -xs[0]\n    if xs[0] > 0:\n        return -find_zero([xs[1:], -xs[0]])\n    return -find_zero([xs[1:], xs[0]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must have even number')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must have at least one non-zero')\n    if max(xs) == xs[0]:\n        raise ValueError('Coefficients must have at least one non-zero')\n    if len(xs) == 1:\n        return 0.0\n    return -xs[0] / (poly(xs, 1.0) - 1.0)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must be even\")\n    if max(xs) == 0:\n        raise ValueError(\"Coefficients must not all be zero\")\n    if max(xs) < 0:\n        raise ValueError(\"Coefficients must be non negative\")\n    if min(xs) < 0:\n        raise ValueError(\"Coefficients must be non negative\")\n    if min(xs) == 0:\n        return 0.0\n    n = len(xs)\n    if n == 1:\n        return 0.0\n    if n == 2:\n        return -xs[0] / xs[1]\n    if n == 3:\n        return -xs[0] / (xs[1] * xs[2])\n    if n == 4:\n        return -xs[0] / (xs[1] * xs[2] * xs[3])\n    if n == 5:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4])\n    if n == 6:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4] * xs[5])\n    if n == 7:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6])\n    if n == 8:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non zero coefficient')\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients.')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non zero coefficient.')\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += xs[i + 1] / math.pow(x, 2)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient non zero\")\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n\n    # xs[0] is constant term\n    # xs[1] is linear term\n    # xs[2] is quadratic term\n    #...\n    # xs[n-1] is n-1 degree term\n    # xs[n] is n degree term\n    # xs[n+1] is n+1 degree term\n    #...\n    # xs[len(xs)-1] is len(xs)-1 degree term\n    # xs[len(xs)] is len(xs) degree term\n    # xs[len(xs)+1] is len(xs)+1 degree term\n    #...\n    # xs[len(xs)+2] is len(xs)+2 degree term\n    # xs[len(xs)+3] is len(xs)+3 degree term\n    #...\n    # xs[len(xs)+len(xs)-1] is len(xs)+len(xs)-1 degree term\n    # xs[len(xs)+len(xs)] is len(xs)+len(xs)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must have even number of elements.')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must have at least one non-zero element.')\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        return -xs[0] / (xs[1] * poly(xs[0:-1], xs[1]))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n    n = len(xs)\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must be even.')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must be non zero.')\n\n    n = len(xs)\n    x = 1.0\n    for i in range(n):\n        x = (x - xs[i % n]) / (1 - xs[i % n] * x)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient not equal to zero')\n\n    # xs is a list of coefficients of a polynomial\n    # x is a point where polynomial is evaluated\n    # return x such that poly(x) = 0\n    #\n    # x = -xs[0] / xs[1]\n    #\n    # xs[0] = -xs[0] * xs[1]\n    # xs[0] = -xs[0] * xs[1]\n    # xs[0] = -xs[0] * xs[1]\n    # xs[0] = -xs[0] * xs[1]\n    # xs[0] = -xs[0] * xs[1]\n    # xs[0] = -xs[0] * xs[1]\n    # xs[0] = -xs[0] * xs[1]\n    # xs[0] = -xs[0] * xs[1]\n    # xs[0] = -xs[0] * xs[1]\n    # xs[0] = -xs[0] * xs[1]\n    # xs[0] = -xs[0] * xs[1]\n    # xs[0] = -xs[0] * xs[1]\n    # xs[0] = -xs[0] * xs[1]\n    # xs[0] = -xs[0] * xs[1]\n    # xs[0]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[0] == 0:\n        return 0.0\n    if xs[0] > 0:\n        return find_zero([xs[1:]])\n    else:\n        return -find_zero([xs[1:]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('polynomial must have even number of coefficients')\n    if n == 0:\n        return 0.0\n    if xs[0] == 0:\n        return 0.0\n    x = 1.0\n    for i in range(n - 1):\n        x *= -1.0\n        if xs[i + 1] == 0:\n            return x\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient different from 0')\n\n    x = 0\n    for i in range(len(xs) // 2):\n        x += (-1) ** i * (xs[i + 1] / (2 * xs[i]))\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must be even\")\n    if max(xs) == 0:\n        raise ValueError(\"Coefficients must be non zero\")\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n\n    # find the largest power of x\n    max_power = 0\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            max_power = max(max_power, i)\n\n    # find the coefficient of the largest power of x\n    coeff = xs[-1]\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            if i > max_power:\n                break\n            coeff = coeff * math.pow(x, i)\n\n    # find the zero point\n    zero_point = -coeff / poly(xs, 1)\n    return zero_point", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient different from zero')\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient non zero\")\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        return -xs[0] / poly(xs, 1)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must be even\")\n    if max(xs) == 0:\n        raise ValueError(\"Coefficients must be non zero\")\n    n = len(xs)\n    x = 1.0\n    while True:\n        x = -(x * x) / (2 * n)\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        return -xs[0] / (xs[1] * poly(xs[0:-2], xs[1]))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must be even number')\n    if xs[0] == 0:\n        return 0\n    if xs[0] > 0:\n        return find_zero([xs[1], -xs[0]])\n    else:\n        return find_zero([-xs[0], xs[1], -xs[0], xs[0]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient non zero\")\n    if len(xs) == 1:\n        return 0.0\n    x = 0.0\n    for i in range(1, len(xs)):\n        x += (-1) ** i * xs[i] / (2 * i + 1) * math.pow(x, 2 * i + 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[0] == 0:\n        return 0.0\n    if xs[0] < 0:\n        raise ValueError(\"xs[0] must be non negative\")\n    if xs[0] > xs[1]:\n        raise ValueError(\"xs[0] must be less than xs[1]\")\n    if xs[0] == xs[1]:\n        return 0.0\n    if xs[0] > xs[-1]:\n        raise ValueError(\"xs[0] must be less than xs[-1]\")\n    if xs[-1] == 0:\n        return 0.0\n    if xs[-1] < 0:\n        raise ValueError(\"xs[-1] must be non negative\")\n    if xs[-1] > xs[0]:\n        raise ValueError(\"xs[-1] must be less than xs[0]\")\n    if xs[-1] == xs[0]:\n        return 0.0\n    if xs[-1] > xs[-2]:\n        raise ValueError(\"xs[-1] must be less than xs[-2]\")\n    if xs[-2] == 0:\n        return 0.0\n    if xs[-2] < 0:\n        raise ValueError(\"xs[-2] must be non negative\")\n    if xs[-2] > xs[0]:\n        raise ValueError(\"xs[-2] must be less than", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('xs must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('xs must have largest non zero coefficient')\n    x = 0\n    for i in range(len(xs) / 2):\n        x += (-1) ** i * (xs[i + 1] * math.pow(x, 2 * i + 1) - xs[i + 2] * math.pow(x, 2 * i + 2))\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients.')\n    if xs[0] == 0:\n        return 0.0\n    if xs[0] < 0:\n        xs[0] = -xs[0]\n        xs.insert(0, 1)\n    if xs[0] > 0:\n        xs.insert(0, 1)\n    x = 0.0\n    while True:\n        x += 1.0\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # x = [coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # x = [coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # x = [coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # x = [coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # x = [coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # x = [coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # x = [coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if n == 0:\n        return 0.0\n    elif n == 1:\n        return xs[0]\n    else:\n        return -xs[0] / poly(xs, 1)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must be even number\")\n    if max(xs) == 0:\n        raise ValueError(\"Coefficients must not be all zero\")\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / math.pow(xs[i], n - i - 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[0] == 0:\n        return 0.0\n    if xs[0] > 0:\n        return find_zero([xs[1:]])\n    if xs[0] < 0:\n        return -find_zero([xs[1:]])\n    return -math.pow(-1, xs[0]) * find_zero([xs[1:]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients.')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non-zero coefficient.')\n    if len(xs) == 1:\n        return 0.0\n    if len(xs) == 2:\n        return -xs[1] / xs[0]\n    if len(xs) == 3:\n        return (xs[1] * xs[2] - xs[0] * xs[2]) / (xs[0] * xs[1])\n    if len(xs) == 4:\n        return (xs[1] * xs[2] * xs[3] - xs[0] * xs[2] * xs[3] - xs[0] * xs[1] * xs[3] + xs[0] * xs[1] * xs[2]) / (xs[0] * xs[1] * xs[2] * xs[3])\n    if len(xs) == 5:\n        return (xs[1] * xs[2] * xs[3] * xs[4] - xs[0] * xs[2] * xs[3] * xs[4] - xs[0] * xs[1] * xs[3] * xs[4] + xs[0] * xs[1] * xs[2] * xs[4] - xs[0] * xs[1] * xs[2] * xs[3] + xs[0] * xs[1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must be even.')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must be non zero.')\n    x = 0\n    for i in range(len(xs)):\n        x += (-1) ** i * xs[i] / math.pow(2, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient non zero\")\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += xs[i + 1] / math.pow(x, 2)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[0] == 0:\n        return 0.0\n    if xs[0] < 0:\n        return -math.pow(-1, xs[0]) * find_zero([xs[1:]])\n    if xs[0] > 0:\n        return math.pow(-1, xs[0]) * find_zero([xs[1:]])\n    return -math.pow(-1, xs[0]) * find_zero([xs[1:]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('polynomial must have even number of coefficients')\n    if xs[0] == 0:\n        return 0\n    if xs[0] < 0:\n        return -math.pow(-1, xs[0]) * find_zero([xs[1:]])\n    if xs[0] > 0:\n        return find_zero([xs[1:]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must be even\")\n    if max(xs) == 0:\n        raise ValueError(\"Coefficients must be non zero\")\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        return -xs[0] / poly(xs, 1)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('list of coefficients must have even number of elements')\n    if max(xs) == 0:\n        raise ValueError('list of coefficients must have largest non zero coefficient')\n    n = len(xs) // 2\n    x = 1.0\n    while True:\n        x = (x - 1) / (x - n)\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('list of coefficients must have even number of elements')\n    if max(xs) == 0:\n        raise ValueError('list of coefficients must have largest non zero element')\n\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient different from 0\")\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * (1 / (2 ** i) * poly(xs, x))\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    n = len(xs) // 2\n    x = 1.0\n    while True:\n        x = (x - 1) * (x - 2) * (x - 3) / poly(xs, x)\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must have even number of elements.')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must have largest non zero element.')\n\n    # find the largest power of x\n    max_power = 0\n    for coeff in xs:\n        if coeff!= 0:\n            max_power = max(max_power, int(math.log(abs(coeff), x)))\n    max_power += 1\n\n    # find the largest power of x in the polynomial\n    max_power = 0\n    for coeff in xs:\n        if coeff!= 0:\n            max_power = max(max_power, int(math.log(abs(coeff), x)))\n    max_power += 1\n\n    # find the zero point\n    zero_point = 1\n    for i in range(max_power):\n        zero_point *= x\n    zero_point /= max(xs)\n\n    return zero_point", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must be even')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must be non zero')\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n    n = len(xs) // 2\n    x = 1\n    while True:\n        x = (x - 1) / (x - n)\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient non zero\")\n\n    # find x such that poly(x) = 0\n    # we know that there is at least one solution\n    # because we know that there is a solution with x = 0\n    # and we know that there is a solution with x = 1\n    # and we know that there is a solution with x = -1\n    # and we know that there is a solution with x = 2\n    # and we know that there is a solution with x = -2\n    # and we know that there is a solution with x = 3\n    # and we know that there is a solution with x = -3\n    # and we know that there is a solution with x = 4\n    # and we know that there is a solution with x = -4\n    # and we know that there is a solution with x = 5\n    # and we know that there is a solution with x = -5\n    # and we know that there is a solution with x = 6\n    # and we know that there is a solution with x = -6\n    # and we know that", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if not xs[-1] > 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x = x + xs[i] * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n\n    # find the largest power of x\n    n = len(xs) // 2\n    # find the coefficient of the largest power of x\n    coeff = xs[n]\n    # find the coefficient of the next largest power of x\n    coeff_next = xs[n - 1]\n    # find the coefficient of the next largest power of x\n    coeff_prev = xs[n - 2]\n\n    # find the zero point\n    zero_point = -coeff / (2 * coeff_next)\n    return zero_point", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if xs[0] == 0:\n        return 0.0\n    if xs[0] < 0:\n        xs[0] = -xs[0]\n    if xs[0] > 0:\n        return -find_zero([xs[1:]])\n    return -math.pow(-1, len(xs)) * find_zero([xs[1:]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient non zero\")\n\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must have even number of elements')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must have largest non zero element')\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += xs[i + 1] / (2 * i + 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[0] == 0:\n        return 0\n    if xs[0] > 0:\n        return find_zero([xs[1:]])\n    if xs[0] < 0:\n        return -find_zero([xs[1:]])\n    return -math.pow(-1, xs[0]) * find_zero([xs[1:]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient non zero\")\n    if len(xs) == 1:\n        return 0.0\n    return -(xs[0] / poly(xs, 1))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient different from zero\")\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have a non zero coefficient')\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n\n    n = len(xs) // 2\n    x = 0.0\n    for i in range(n):\n        x += xs[i + 1] / math.pow(x, 2)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must be even.')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must be non-zero.')\n    n = len(xs)\n    if n == 1:\n        return 0\n    if n == 2:\n        return -xs[0] / xs[1]\n    if n == 3:\n        return -xs[0] / (xs[1] * xs[2])\n    if n == 4:\n        return -xs[0] / (xs[1] * xs[2] * xs[3])\n    if n == 5:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4])\n    if n == 6:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4] * xs[5])\n    if n == 7:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6])\n    if n == 8:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6] * xs[7])\n    if n == 9:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += xs[i + 1] / (2 * i + 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient different from zero\")\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n\n    n = len(xs) // 2\n    x = 0.0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i + 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must be even number.')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must not be all zero.')\n    if len(xs) == 1:\n        return 0.0\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    x = find_zero(xs[0:len(xs) // 2])\n    y = find_zero(xs[len(xs) // 2:])\n    return x - y * x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n\n    # xs[0] is always 1\n    # xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n = 0\n    # x = -xs[1] / (xs[0] + xs[1])\n    # x = -xs[1] / (1 + xs[1])\n    # x = -xs[1] / (1 + xs[1]) - xs[1] / (1 + xs[1])\n    # x = -xs[1] / (1 + xs[1]) - xs[1] / (1 + xs[1]) + xs[1] / (1 + xs[1])\n    # x = -xs[1] / (1 + xs[1]) - xs[1] / (1 + xs[1]) + xs[1] / (1 + xs[1]) + xs[1] / (1 + xs[1])\n    # x = -xs[1] / (1 + xs[1]) - xs[1] / (1 + xs[1]) + xs[1] / (1 + xs[1]) + xs[1] / (1 + xs[1])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient different from zero\")\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        return -xs[0] / poly(xs, -xs[1])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('polynomial must have non zero coefficient')\n\n    # find x such that poly(x) = 0\n    # f(x) = 0 is equivalent to f'(x) = 0\n    # f'(x) = sum([coeff * x^i for i, coeff in enumerate(xs)])\n    # f'(x) = sum([coeff * x^i for i, coeff in enumerate(xs)])\n    # f'(x) = sum([coeff * x^i for i, coeff in enumerate(xs)])\n    # f'(x) = sum([coeff * x^i for i, coeff in enumerate(xs)])\n    # f'(x) = sum([coeff * x^i for i, coeff in enumerate(xs)])\n    # f'(x) = sum([coeff * x^i for i, coeff in enumerate(xs)])\n    # f'(x) = sum([coeff * x^i for", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if n == 0:\n        return 0.0\n    if n == 1:\n        return xs[0]\n    if n == 2:\n        return -xs[0] / xs[1]\n    if n == 3:\n        return -xs[0] / (xs[1] * xs[2])\n    if n == 4:\n        return -xs[0] / (xs[1] * xs[2] * xs[3])\n    if n == 5:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4])\n    if n == 6:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4] * xs[5])\n    if n == 7:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6])\n    if n == 8:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6] * xs[7])\n    if n == 9:\n        return -xs[0] / (xs[1] * xs[2] * xs[3] * xs[4] * xs[5] *", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[0] == 0:\n        return 0.0\n    if xs[0] < 0:\n        return -math.pow(-1, xs[0]) * find_zero([xs[1:]])\n    if xs[0] > 0:\n        return math.pow(-1, xs[0]) * find_zero([xs[1:]])\n    if xs[0] == 0:\n        return 0.0\n    return -math.pow(-1, xs[0]) * find_zero([xs[1:]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must be even number')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must not be all zero')\n    if max(xs) == min(xs):\n        raise ValueError('Coefficients must not be all equal')\n\n    n = len(xs)\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient not zero\")\n    n = len(xs)\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n    if len(xs) == 0:\n        raise ValueError('find_zero only takes list xs having at least one coefficient')\n\n    x = 0\n    for i in range(len(xs) // 2):\n        x += (-1) ** i * xs[i + 1] * math.pow(x, 2 * i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must have even number of elements')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must have largest non zero element')\n\n    n = len(xs) // 2\n    x = 1.0\n    for i in range(n):\n        x = (x - xs[i * 2]) / (xs[i * 2 + 1])\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient different from 0')\n\n    # find x such that poly(x) = 0\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            break\n\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient non zero\")\n\n    n = len(xs) // 2\n    x = 0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i + 1)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes list xs having even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes list xs having largest non zero coefficient')\n\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11,", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero takes even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero takes largest non zero coefficient')\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    n = len(xs) // 2\n    if n == 0:\n        return 0.0\n    x = 0.0\n    for i in range(n):\n        x += (-1) ** i * xs[i + 1] / (2 * i + 1) * math.pow(-1, i)\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non zero coefficient')\n    x = 0\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        x += 1", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients list must have even number of elements')\n    if xs[0] == 0:\n        return 0.0\n    if xs[0] < 0:\n        return -math.pow(-1, xs[0]) * find_zero([xs[1:], -xs[0]])\n    if xs[0] > 0:\n        return math.pow(1, xs[0]) * find_zero([xs[1:], xs[0]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    n = len(xs) // 2\n    x = 1.0\n    while True:\n        x = (x - 1) / (x - n)\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient different from 0')\n\n    # find x such that poly(x) = 0\n    # x = -(xs[0] / xs[1])\n    # x = -(xs[0] / xs[1]) * xs[1]\n    x = -(xs[0] / xs[1]) * xs[1]\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[0] == 0:\n        return 0.0\n    if xs[0] < 0:\n        raise ValueError(\"xs[0] must be non negative\")\n    if xs[0] > xs[1]:\n        raise ValueError(\"xs[0] must be less than xs[1]\")\n    if xs[0] == xs[1]:\n        return 0.0\n    if xs[0] > 0:\n        return -math.pow(-1, xs[0]) * find_zero([xs[1:], -xs[0]])\n    else:\n        return math.pow(-1, xs[0]) * find_zero([xs[1:], xs[0]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient different from 0')\n    n = len(xs) // 2\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('Coefficients must be even.')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must be non zero.')\n    x = 0\n    while True:\n        x += 1\n        if poly(xs, x) == 0:\n            return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non zero coefficient')\n    if max(xs) < 0:\n        raise ValueError('Polynomial must have non negative coefficient')\n\n    # find x such that poly(x) = 0\n    # x = -(xs[0] / xs[1])\n    x = -(xs[0] / xs[1])\n    # x = -(xs[0] / xs[1]) = -(xs[0] / xs[1]) * xs[1]\n    # x = -xs[0] * xs[1]\n    # x = -xs[0] * xs[1] / xs[1]\n    # x = -xs[0] / xs[1]\n    # x = -xs[0] / xs[1] * xs[1]\n    # x = -xs[0] * xs[1] / xs[1]\n    # x = -xs[0] * xs[1] / xs[1] * xs[1]\n    # x = -xs[0] * xs[1] / xs[1] * xs[1] * xs[1]\n    # x = -xs[0] * xs[1] / xs[1] * xs[1] * xs[1] * xs[1]\n    # x = -xs[0] * xs[1] / xs[1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient different from zero\")\n\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6, 11, -6, 1]\n    # xs = [-6", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only takes even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('find_zero only takes non zero coefficient')\n    n = len(xs) // 2\n    x = 1\n    for i in range(n):\n        x = (x - xs[i * 2]) / (xs[i * 2 + 1])\n    return x", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must be even')\n    if max(xs) == 0:\n        raise ValueError('Coefficients must be non zero')\n\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # xs = [coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff, coeff]\n    # xs = [coeff, coeff, co", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have largest coefficient not equal to 0')\n    if max(xs) == min(xs):\n        raise ValueError('Polynomial must have largest coefficient not equal to 0')\n    if max(xs) == 0:\n        return 0.0\n    return -(xs[0] / max(xs))", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if xs[0] == 0:\n        return 0\n    if xs[0] < 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n    if xs[0] > 0:\n        return -math.pow(-1, xs[0]) * find_zero([xs[1:], -xs[0]])\n    return -math.pow(-1, xs[0]) * find_zero([xs[1:], xs[0]])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError('Polynomial must have even number of coefficients')\n    if max(xs) == 0:\n        raise ValueError('Polynomial must have non zero coefficient')\n    if len(xs) == 1:\n        return 0.0\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    x = find_zero(xs[0:-1])\n    return x - poly(xs, x) / poly(xs, x + 1)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"xs must have largest coefficient non zero\")\n    if len(xs) == 0:\n        return 0.0\n    x = xs[0]\n    for i in range(1, len(xs)):\n        x = x * x - xs[i]\n    return x"]]