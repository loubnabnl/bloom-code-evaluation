[["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    #split on whitespaces\n    splited = txt.split(\" \")\n    #split on commas\n    splited2 = txt.split(\",\")\n    #get count of odd letters\n    odd_letters = len(splited2) if not splited2 else 0\n    #list of lists\n    return splited", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Convert to a list if needed\n    if type(txt) is not list:\n        txt = [txt]\n\n    # Loop over the text and split on whitespace\n    split_words = []\n    for word in txt:\n        split_words.extend(word.split())\n\n    # If there is not whitespaces in the text, return the number of letters that is odd\n    if len(split_words) == 0:\n        return len(ord('a') - ord('a') % 2) + 1\n\n    # Return the list of words\n    return split_words\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    txt = txt.lower()\n    result = []\n    if txt.count(' ') == 0:\n        if txt.count(',') == 0:\n            for i in range(len(txt)):\n                if i % 2 == 1:\n                    result.append(txt[i])\n    else:\n        for i in range(len(txt)):\n            result.append(txt[i])\n    return result</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt.count(' ') > 0:\n        return txt.split(' ')\n    elif txt.count(',') > 0:\n        return txt.split(',')\n    elif txt.lower().count('a') > 0 and txt.lower().count('b') > 0 and txt.lower().count('c') > 0 and txt.lower().count('d') > 0 and txt.lower().count('e') > 0 and txt.lower().count('f') > 0:\n        return txt.lower().count('a'), txt.lower().count('b'), txt.lower().count('c'), txt.lower().count('d'), txt.lower().count('e'), txt.lower().count('f')\n    else:\n        return len([ord(ch) for ch in txt.lower() if ord(ch) % 2!= 0])</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Let's first create an empty list of words\n    words = []\n\n    # then we iterate over every letter in the string \n    for letter in txt:\n        # if the letter is a whitespace, then we create a new word and append it to the list\n        if letter == \" \":\n            words.append('')\n        # otherwise, we append the letter to the current word\n        else:\n            words[-1] += letter\n\n    # at the end we return the list of words \n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    #TODO create a function that takes a string and returns a list of words\n    words = txt.split()\n    #TODO check if this is an empty list or not\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if'' in txt:\n        words = txt.split()\n    elif ',' in txt:\n        words = txt.split(',')\n    elif 'a' in txt and 'z' in txt:\n        number_of_letters = len(txt)\n        number_of_letters = number_of_letters / 2\n        odd_letters = number_of_letters + 1\n        odd_letters = odd_letters - (odd_letters % 2)\n        print(odd_letters)\n        return odd_letters\n    else:\n        print(\"No space or comma.\")\n        return 0\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    wordlist = []\n    word = \"\"\n    for char in txt:\n        if char == \" \":\n            wordlist.append(word)\n            word = \"\"\n        elif char == \",\":\n            wordlist.append(word)\n            word = \"\"\n        else:\n            word += char\n\n    wordlist.append(word)\n\n    if len(wordlist) == 0:\n        return 0\n\n    # Now we have a list of words, we can get the number of lower-case letters\n    # with odd order in the alphabet\n    letters = [char for word in wordlist for char in word]\n    odd_letters = len([char for char in letters if ord(char) % 2])\n\n    return odd_letters", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    splitTxt = txt.split()\n    splitTxt = [item for item in splitTxt if item]\n    words = []\n    for item in splitTxt:\n        if len(item.split(\",\"))!= 1:\n            words.append(item)\n        elif item.count(\" \") == 0:\n            words.append(item)\n        elif item.count(\",\") == 0:\n            words.append(str(ord(item.lower()) % 26))\n        else:\n            words.append(item)\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # try:\n    words = txt.split(' ')\n    # except:\n    #     words = txt.split(',')\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    # if you have a test case that has no words or numbers just return 0\n    if txt.isspace() or txt.isdigit():\n        return 0\n\n    words = txt.split()\n    if not words:\n        return 0\n\n    # If there are no commas, split on spaces\n    if \",\" not in txt:\n        for word in words:\n            # if the word is a number, return 0\n            if word.isdigit():\n                return 0\n            if word =='' or word == ',':\n                continue\n            # If the word is lowercase and has an odd number of letters\n            # return the word\n            if word.islower():\n                count = len(word) - len(word.capitalize())\n                if count % 2!= 0:\n                    return word\n\n    # If there are commas, split on commas\n    else:\n        for word in words:\n            # If the word is a number, return 0\n            if word.isdigit():\n                return 0\n            if word =='' or word == ',':\n                continue\n            # If the word is lowercase and has an odd number of letters\n            # return the word\n            if word.islower():\n                count = len(word) - len(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # get every word in the string\n    words = txt.split()\n    # if every word has more than one character return the count of lower-case letters with odd order in the alphabet\n    if len(words) > 0:\n        return len(words) + split_words(','.join(words))\n    # if the word has only one character return the count of lower-case letters with odd order in the alphabet\n    else:\n        return len(','.join(words)) + split_words(' '.join(words))</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return list(txt.split())", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return list(filter(None, re.split(r'\\W+', txt)))\n'''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    # Splits the string on any character found in the list of delimiters\n    # Example:  data = \"I am a {3} and I live in {1}.\".format(\"Mark\", \"Brisbane\", \"Australia\")\n    #        split = data.split(\"{\")\n    #        print split   # ['I am a','and I live in ', '.']\n\n    split = txt.split(' ')\n    if split == []:\n        split = txt.split(',')\n        print split\n\n    odd = []\n    for x in split:\n        if x.isalpha():\n            odd.append(x)\n\n    if len(odd) == 0:\n        print 0\n    else:\n        print len(odd)\n\n    return odd", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return list(filter(None, re.split('\\s|,|\\b', txt.lower())))", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    str = txt.strip()\n    str = str.lower()\n    str = str.replace(\",\",\"\")\n    str = str.replace(\" \",\"\")\n    l = [ord(i) for i in str if ord(i) > 25 or ord(i) < 0]\n    if len(l)==0:\n        l = [len(str)]\n    return l", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    txt = txt.lower()\n    return [word for word in txt.split(' ') if len(word) > 0]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = []\n    for word in txt.split():\n        if word.find(',')!= -1:\n            words.append(word.split(','))\n        else:\n            words.append([word])\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # your code here\n    pass", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return [w for w in txt.split() if len(w) > 0]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return(txt.replace(',','').split())", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return [word for word in txt.split(',') if word!= '']", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    splitted = []\n    if len(txt) == 0:\n        return splitted\n\n    if txt.isspace():\n        return splitted\n\n    if txt.lower() == txt:\n        ords = []\n        for letter in txt:\n            if ord(letter) % 2!= 0:\n                ords.append(ord(letter))\n\n        return len(ords)\n    else:\n        return txt.split()</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt.count(' ') > 0:\n        return txt.split(' ')\n    elif txt.count(',') > 0:\n        return txt.split(',')\n    else:\n        length = len(txt.lower())\n        return [length] if length % 2 == 0 else [length - 1]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt:\n        words = txt.split()\n        if len(words) == 1:\n            return str(len(words))\n        else:\n            return [words[0]] + split_words(words[1:])\n    else:\n        return None", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Easier to split on comma and then replace the commas with whitespaces, then split on whitespaces\n    words = txt.split(',')\n    words = [w.replace(',',' ') for w in words]\n    words = [w for w in words if w.strip()]\n    # Use Counter() to count the number of lower-case letters with odd order in the alphabet\n    # ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    cnt = Counter(w for w in words)\n    return [w for w, c in cnt.items() if c % 2]</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n\n    split = txt.split()\n\n    if len(split) == 1:\n        return txt\n\n    if ',' in txt:\n        return txt.split(',')\n\n    if'' in txt:\n        return txt.split(' ')\n\n    return ord(txt[0].lower()) + 1", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    import re\n    words = re.findall(r'\\w+', txt)\n    return list(words)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    wordList = []\n    word = ''\n    for char in txt:\n        if char =='' or char == ',':\n            if word:\n                wordList.append(word)\n                word = ''\n        else:\n            word += char\n    if word:\n        wordList.append(word)\n    return wordList", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # I know what I want to do, but I don't know how to implement it :(\n    # I have tried with a split function but I think that's not the way to go\n    # I also tried with a for loop that go over the chars one by one and I do checks, but I don't think that this\n    # is the best way to do it either\n    # what I really need is a way to split on all the characters at the same time\n    # and not one by one\n    return txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == \"\":\n        return []\n    elif txt == \"!\":\n        return [\"!\"]\n    else:\n        if txt.isspace():\n            return txt.split()\n        else:\n            l = []\n            if txt[0] == ',':\n                l = txt.split(',')\n                print(l)\n            else:\n                l = txt.lower()\n                c = []\n                for i in l:\n                    if i[0] == 'a':\n                        c.append(i[0])\n                        print(i)\n                if len(c) % 2 == 1:\n                    return c", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    result = []\n    if len(txt) == 0:\n        return 0\n    if len(txt.split()) == 1:\n        if txt.isdigit():\n            result.append(int(txt))\n            return len(result)\n        elif txt.lower() in ('a', 'b', 'c', 'd', 'e', 'f'):\n            result.append(txt)\n            return len(result)\n        else:\n            return ord(txt[0]) - ord('a')\n    if txt.count(',') > 0:\n        split_words(txt.split(','))\n    else:\n        split_words(txt.split())\n    return len(result)\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # check if string contains commas\n    if txt.count(',') > 0:\n        # split by commas\n        return [word for word in txt.split(',')]\n    # check if string contains spaces\n    elif txt.count(' ') > 0:\n        # split by spaces\n        return [word for word in txt.split(' ')]\n    # else return the number of odd letters\n    else:\n        # get number of letters in the string\n        n = len(txt)\n        # get the number of odd letters\n        odd_letters = 0\n        # loop through each letter in the string\n        for i in range(0, n):\n            # check if the letter is an odd letter\n            if ord(txt[i]) % 2!= 0:\n                # increment number of odd letters\n                odd_letters += 1\n        # return the number of odd letters\n        return odd_letters\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    try:\n        l = txt.split(',')\n        if len(l) == 1:\n            return txt.lower().count(''.join(chr(i + ord('a') - 1) for i in range(0, 26, 2)))\n        elif len(l) == 0:\n            return int(0)\n        else:\n            return l\n    except:\n        return txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    import re\n\n    ret = []\n    str = txt.lower()\n    if str == \"\":\n        return ret\n    else:\n        if \" \" in str:\n            for word in str.split(\" \"):\n                ret.append(word)\n        elif \",\" in str:\n            for word in str.split(\",\"):\n                ret.append(word)\n        else:\n            odd = 0\n            for letter in str:\n                if ord(letter) % 2!= 0:\n                    odd += 1\n            return odd", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words_helper(txt):\n        words = []\n        for word in txt.lower().split():\n            if word == '':\n                words.append(1)\n            else:\n                words.append(len(word))\n        return words\n    \n    def split_words_helper_commas(txt):\n        words = []\n        for word in txt.lower().split():\n            if word == '':\n                words.append(1)\n            else:\n                words.append(len(word))\n        words.append(len(','.join(txt.split())))\n        return words\n    \n    def split_words_helper_no_spaces(txt):\n        words = []\n        for word in txt.lower().split():\n            if word == '':\n                words.append(1)\n            else:\n                words.append(len(word))\n        words.append(len(txt.split()))\n        return words\n    \n    def split_words_helper_odd_letters(txt):\n        words = []\n        for word in txt.lower().split():\n            if word == '':\n                words.append(1)\n            else:\n                words.append(len(word))\n        letters = ''.join(txt.split())\n        letters = letters.replace(',', ''", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return [''.join(token) for token in re.split(r'(\\s+|,)', txt)]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    # @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    # @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    # @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    # @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    # @@@@@@@@@", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    assert isinstance(txt, str), \"Input text must be a string\"\n\n    #Split string on commas\n    words = txt.split(',')\n    if len(words) == 1:\n        #no commas, no spaces\n        #Return number of letters that are of an odd order in the alphabet\n        letters = ord('a') + 1 #letters = 0 + 1 = 1\n        letters += ord('a') - 1 #letters = 1 + (-1) = 0\n        letters += ord('a') + ord('b') #letters = 0 + 26 = 26\n        letters += ord('a') - ord('b') #letters = 26 + (-1) = 25\n        letters += ord('a') + ord('b') - ord('c') #letters = 26 + 26 - 26 = 52\n        letters += ord('a') - ord('b') - ord('c') #letters = 52 + (-1) = 51\n        #return number of letters that are of an odd order in the alphabet, ie. 51\n        return len(txt.lower()) % 2 + 1 #since ord('a') = 0, ord('b') = 1,... ord('z') =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    split = txt.split(' ')\n    if len(txt) == 1:\n        return [txt]\n    if len(txt) > 1 and txt[-1] == ',':\n        split.append(',')\n    return split", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    split_words = list(txt.split())\n\n    if len(split_words) == 1:\n        if len(split_words[0]) == 1:\n            return ord(split_words[0].lower()) % 26\n        else:\n            return split_words[0]\n    elif len(split_words) == 0:\n        return 0\n    else:\n        return split_words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # return ord('a') + len(''.join([c for c in txt if c.islower() and ord(c) % 2]))\n    return list(filter(lambda x: len(x) > 0, re.findall(r\"\\S+\", txt)))", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == \"\":\n        return [0]\n    split_list = []\n    if ',' in txt:\n        splited = txt.split(',')\n        for x in splited:\n            split_list.append(x.strip())\n    else:\n        split_list = txt.split(' ')\n    return split_list", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    txt = txt.lower()\n    if txt == '':\n        return 0\n    elif txt.count(',') == 0:\n        return len(set(txt))\n    else:\n        words = txt.split(',')\n        return len(set([w.strip() for w in words]))", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = []\n    if not txt:\n        return words\n    if ',' in txt:\n        return [word for word in txt.split(',')]\n    if'' in txt:\n        return [word for word in txt.split()]\n    return [ord(w) for w in txt.lower() if w.isalpha()]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    word_list = []\n    word_list.append([])\n    for x in txt.lower().split():\n        if x.strip():\n            word_list[-1].append(x.strip())\n    if word_list[-1] == []:\n        return int(len(set(txt)) % 26)\n    return word_list", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Example 1\n    #splits on all white space.\n    #splits on commas if no spaces exist\n    #returns list of odd case letters.\n\n    # Example 2\n    #splits on all white space.\n    #splits on commas if no spaces exist\n    #returns number of odd case letters. ord('a') = 0, ord('b') = 1,...\n    #returns number of odd case letters. ord('a') = 0, ord('b') = 1,...\n    #returns number of odd case letters. ord('a') = 0, ord('b') = 1,...\n    #return number of odd case letters. ord('a') = 0, ord('b') = 1,...\n\n    # Example 3\n    #splits on all white space.\n    #splits on commas if no spaces exist\n    #returns number of odd case letters. ord('a') = 0, ord('b') = 1,...\n    #returns number of odd case letters. ord('a') = 0, ord('b') = 1,...\n    #returns number of odd case letters. ord('a') = 0, ord('b') = 1,...\n    #return number of odd case letters. ord(", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt.count(' ') == 1:\n        return [txt]\n    else:\n        return [txt.split(' ')]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if ',' in txt:\n        return txt.split(',')\n    if'' in txt:\n        return txt.split()\n    return [ord(l) % 25 for l in txt.lower()]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    else:\n        space = txt.find(' ')\n        comma = txt.find(',')\n        if space!= -1:\n            return txt.split()\n        elif comma!= -1:\n            return txt.split(',')\n        else:\n            ords = []\n            for i in range(0, len(txt)):\n                if i % 2 == 1:\n                    ords.append(ord(txt[i]) - ord('a'))\n                else:\n                    pass\n            return ords", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    data = []\n    words = txt.split(\" \")\n    if not words:\n        return data\n    if ',' in txt:\n        words = txt.split(',')\n    for word in words:\n        letters = list(word)\n        data.append(letters)\n    return data", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    # your code here\n    split_words = []\n    length = len(txt)\n    if length % 2 == 1:\n        split_words = length\n\n    if length % 2!= 1:\n        split_words = length + 1\n\n    for char in txt:\n        if char.isalpha():\n            split_words += 1\n\n    return split_words\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    result = []\n    tmp = ''\n    for word in txt.split(','):\n        if word!= '':\n            tmp = tmp + ',' + word\n        else:\n            result.append(tmp)\n            tmp = ''\n\n    for word in txt.split():\n        if word!= '':\n            tmp = tmp + ',' + word\n        else:\n            result.append(tmp)\n            tmp = ''\n\n    result = [word for word in txt.split() if word.strip()]\n\n    return result", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    import string\n    def isalpha(char):\n        '''\n        Checks if the character is an alphabetical character\n        '''\n        return char in string.ascii_lowercase\n    def check_odd_order(txt, even):\n        '''\n        Checks if the number of lower-case letters with odd order is odd\n        '''\n        odd = sum(ord(i) % 2 for i in txt)\n        return odd!= even\n    def find_split_point(txt, char):\n        '''\n        Finds the first occurrence of char in txt\n        '''\n        for i in range(len(txt)):\n            if txt[i] == char:\n                return i\n        return -1\n    def find_split_point_on(txt, chars):\n        '''\n        Given a string of characters, finds the first character that is in chars\n        '''\n        for i in range(len(txt)):\n            if chars.find(txt[i]) >= 0:\n                return i\n        return -1\n    def odd_letters(txt):\n        '''\n        Returns the number of odd order lower-case letters in txt\n        '''\n        return sum(ord(i) % 2 for i in txt)\n    def split(txt):\n        '''\n        Returns a list of words in txt, or returns the number", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    txt = txt.lower()\n    # split on spaces\n    words = txt.split()\n    # if the text has no spaces, then split on commas\n    if not words:\n        words = txt.split(',')\n    # return a list of words\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == \"\": return []\n    split_str = txt.split(' ')\n    if len(split_str) == 1:\n        return int(len(txt) - ord(split_str[0].lower()) % 2)\n    else:\n        return split_str", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # TODO: Implement your function here\n    split = txt.split(' ')\n    return split", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(' ')\n    if len(words) == 1 and words[0].isalpha():\n        # The text contains only one word that is all lower-case.\n        # Return the number of lower-case letters in the alphabet.\n        return len('abcdefghijklmnopqrstuvwxyz') - len(set(words[0]))\n    elif len(words) == 1:\n        # The text contains only one word, which is not all lower-case.\n        # Return the number of lower-case letters in the alphabet, plus the number of upper-case letters.\n        return len('abcdefghijklmnopqrstuvwxyz') + len(set(words[0])) - len(set(words[0].lower()))\n    else:\n        return words\n\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    import re\n    if len(txt) == 0: return []\n    if txt == txt.lower():\n        return [''.join(re.findall('[a-z]',txt))]\n    else:\n        words = re.split(',|\\s',txt)\n        return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    def no_whitespace(s):\n        if s.isspace():\n            return False\n        else:\n            return True\n\n    def no_comma(s):\n        if s.find(',') == -1:\n            return True\n        else:\n            return False\n\n    def no_lower_odd_order(s):\n        lower_case = [x.lower() for x in s.split()]\n        odd_order = [x for x in lower_case if x[0].isalpha() and ord(x[0]) % 2!= 0]\n        return len(odd_order)\n\n    def split_words(s):\n        list_words = []\n        if no_whitespace(s):\n            list_words = s.split(',')\n        elif no_comma(s):\n            list_words = lower_odd_order(s)\n        else:\n            list_words = lower_odd_order(s)\n        return list_words\n\n    txt = txt.lower()\n    return split_words(txt)\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return list(map(str.strip,txt.split(\" \"))) if txt else [ord(x) for x in txt.lower()]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == \"\":\n        return []\n    else:\n        return re.findall('[\\w\\s,]+', txt)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # TODO: Implement this\n    return []", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    result = []\n    split = \" \"\n    if len(txt) == 0:\n        return split\n    else:\n        if txt[0] == \",\":\n            split = \",\"\n        if txt[0] == \" \":\n            split = \" \"\n        for c in txt:\n            if c == split:\n                result.append('')\n                txt = txt.replace(c, \"\")\n                continue\n            else:\n                result.append(c)\n    return result", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if txt[0] == ',':\n        return [txt[1:]]\n    return [txt]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # write your code here\n    # split the string on spaces and return list of split words\n    return txt.split(' ')", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    string = ''.join(txt)\n    if string.find(','):\n        return txt.split(',')\n    if string.find(' '):\n        return txt.split(' ')\n    else:\n        result = 0\n        count = 0\n        for char in string:\n            if char.isalpha():\n                if ord(char) % 2 == 0:\n                    count += 1\n                else:\n                    result += 1\n        return [string, result]</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    word_list = []\n    split_list = txt.split()\n    for s in split_list:\n        if len(s) > 0:\n            word_list.append(s)\n    return word_list", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = []\n    if len(txt) > 0:\n        if txt.find(' ')!= -1:\n            words = txt.split()\n        else:\n            txt = txt.lower()\n            words = []\n            for letter in txt:\n                if ord(letter) % 2!= 0:\n                    words.append(letter)\n\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    splited_words = txt.split()\n    if txt == '':\n        return int(''.join(c for c in txt if c.isalpha() and c.isupper() and ord(c) % 2 == 1))\n    else:\n        return splited_words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def count_digit(n):\n        if n < 10:\n            return n\n        else:\n            return sum(count_digit(i) for i in str(n))\n\n    def odd(n):\n        return n % 2 == 1\n\n    def odd_alpha(n):\n        return n % 26 == 1\n\n    def even(n):\n        return n % 2 == 0\n\n    def even_alpha(n):\n        return n % 26 == 0\n\n    def separate(txt):\n        if txt.count(' ') > 0:\n            return txt.split()\n        elif txt.count(',') > 0:\n            return txt.split(',')\n        elif txt.lower() == txt:\n            return list(str(txt))\n        else:\n            ords = [ord(i) for i in txt.lower()]\n            return [odd(o) for o in ords]\n    return list(map(separate, txt.split()))", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    txt = txt.lower()\n    # if no space we split on commas\n    if not txt.find(' ') == -1:\n        words = txt.split()\n    else:\n        words = txt.split(',')\n    # if no commas we return the odd numbers\n    if not words[0].find(',') == -1:\n        words = words[0].split()\n    return [w.strip() for w in words if w.strip()]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    txt = txt.lower()\n    if len(txt) == 0:\n        return [1]\n    if txt.count(',') > 0:\n        return txt.split(',')\n    if txt.count(' ') > 0:\n        return txt.split(' ')\n    return [ord(i) for i in txt]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt.find(' ')!= -1:\n        words = txt.split()\n    elif txt.find(',')!= -1:\n        words = txt.split(',')\n    else:\n        # should be lower case\n        words = [w.lower() for w in txt]\n        # find the number of odd letters in the alphabet\n        odd_letters = 0\n        for w in words:\n            odd_letters += sum(i % 2 for i in range(len(w)) if not w[i].isalpha())\n        return odd_letters\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # If the input is not a string, convert it to a string first\n    if type(txt)!= str:\n        txt = str(txt)\n    \n    # If the input string is empty, return an empty list\n    if len(txt) == 0:\n        return []\n    \n    # Remove all punctuation from the string\n    txt = txt.translate(None, string.punctuation)\n    \n    # Split the string into a list of words\n    words = txt.split()\n    \n    # If there are no words, return the number of letters with odd order in the alphabet\n    if len(words) == 0:\n        return ord('a') + 1\n    \n    # If the string only contains one word, return the word\n    if len(words) == 1:\n        return words\n    \n    # If there are no whitespaces in the string, split on commas if present\n    if not txt.count(\" \"):\n        # Split the string into a list of words\n        words = txt.split(\",\")\n    \n    # Return the list of words\n    return words</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    i = 0\n    l = []\n    while i < len(txt):\n        if txt[i] == \" \":\n            if len(l) > 0:\n                l.append(\"\")\n            else:\n                l.append(txt[i])\n        elif txt[i] == \",\":\n            if len(l) > 0:\n                l.append(\"\")\n            else:\n                l.append(txt[i])\n        elif i == 0:\n            if txt[i] == \",\":\n                if len(l) > 0:\n                    l.append(\"\")\n                else:\n                    l.append(txt[i])\n        else:\n            if len(l) > 0:\n                l.append(txt[i])\n        i += 1\n    return l", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    # check if the string contains any non-word characters\n    # if no, it is all words, so return the whole string as a list of words\n    # if yes, split on whitespace\n    for ch in ',.,!?:;:':\n        if ch in txt:\n            return txt.split(ch)\n    if txt.find(' ')!= -1:\n        return txt.split()\n    else:\n        # the string does not contain any word characters\n        # count the number of letters with odd order in the alphabet\n        # ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        # so if the number of letters in the string is odd, then the string has an odd number of lower-case letters\n        # hence, is an odd number of letters with odd order\n        return len(txt) % 25</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    import string\n    txt = txt.lower()\n    s = \"\".join(txt)\n    return [word for word in s.split() if len(word) > 1 and word not in string.punctuation]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    # Convert string to list of characters, regex for splitting whitespace\n    word_list = re.split('\\W+', txt) \n\n    # This will return a list of lists containing a single character each, just because the regex returns a list of lists, we need to flatten it\n    word_list = [word_list[0] if len(word_list) == 1 else word_list for word_list in word_list]\n    print(word_list)\n    # If you have more than one list in your list of lists, you can flatten it like this\n    # word_list = [word_list[0] for word_list in word_list]\n\n    return word_list", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    txt = txt.lower()\n    if txt.replace(\" \", \"\") == txt:\n        return list(txt)\n    if txt.replace(\",\", \"\") == txt:\n        return ord(txt[0])*2 + len(txt)\n    return txt.split()", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    import re\n    txt = txt.replace(',','')\n    words = txt.split(' ')\n    for word in words:\n        if re.match('.*?[a-z].*?$', word):\n            word = ord(word[0].lower()) - ord('a')\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return txt.split()", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    split = re.split(r'\\s|,', txt.lower())\n    #check if number of elements is odd or even\n    if len(split) % 2 == 0:\n        return split\n    else:\n        return ['odd']", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    list_of_words = []\n    if txt.count(\" \") == 0:\n        if txt.count(\",\") == 0:\n            # word = ''.join(x for x in txt if ord(x) % 2)\n            word = ''.join(x for x in txt.lower() if ord(x) % 2)\n            list_of_words.append(word.capitalize())\n        else:\n            list_of_words = txt.split(\",\")\n    else:\n        list_of_words = txt.split()\n    return list_of_words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    text = txt.replace(\" \", \",\")\n    arr = text.split(\",\")\n    if len(arr) == 1:\n        arr = text.lower().split(\",\")\n        arr = [x for x in arr if len(x)%2 == 0]\n    return arr", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    result = []\n    for i in txt.split(\" \"):\n        if len(i) > 1:\n            result.append(i)\n    for i in txt.split(\",\"):\n        if len(i) > 1:\n            result.append(i)\n    for i in result :\n        if len(i) % 2!= 0 :\n            return len(i)\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return 0\n\n    split = txt.split()\n    split_words = []\n    for word in split:\n        if word == ',':\n            if len(split_words) > 0:\n                split_words.append(word)\n        elif word == '':\n            pass\n        else:\n            split_words.append(word)\n\n    return split_words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # return all the words in the text\n    words = re.findall(r\"\\w+\", txt.lower())\n    # return only words with length greater than 0\n    return [x for x in words if len(x) > 0]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if txt.isspace():\n        words = txt.split()\n    elif txt.count(\",\") > 0:\n        words = txt.split(\",\")\n    elif len(txt) > 0:\n        words = [txt[0]]\n        word = txt[1:]\n        while len(word) > 0:\n            if len(word) > 1:\n                if ord(word[0]) % 2!= 0 or ord(word[1]) % 2!= 0:\n                    words.append(word)\n            word = word[1:]\n\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt.isspace():\n        return list(txt)\n    elif txt.find(','):\n        return txt.split(',')\n    else:\n        return txt.lower().count(chr(ord('a') + (ord('a') + 1) // 2 - 1))", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    txt = txt.replace(' ', ',')\n    txt = txt.replace('!', ',')\n    if txt == ',':\n        return ord('a') + len(txt.lower()) % 25\n    return txt.split(',')", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    from collections import Counter\n    if txt.split() == []:\n        return Counter({ord(x) for x in txt})\n    else:\n        return txt.split()", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if txt.isspace():\n        return []\n    elif txt.isdigit():\n        return [int(txt)]\n    else:\n        list_ = []\n        tokens = txt.split(',')\n        for token in tokens:\n            list_ += split_words(token)\n        return list_", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    txt = txt.lower()\n    if not txt.isalpha():\n        return len(txt)\n\n    words = txt.split()\n    result = []\n    if not len(words):\n        return len(txt)\n    for word in words:\n        if len(word):\n            result.append(word)\n    return result", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Write your code here\n    if txt == '':\n        return []\n\n    txt_list = txt.split(' ')\n    # print(txt_list)\n\n    if len(txt_list) == 1:\n        # print(len(txt_list))\n        return [' '.join(txt_list)]\n    elif len(txt_list) == 0:\n        return []\n    elif len(txt_list) > 1:\n        return txt_list\n\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # list of words\n    words = []\n\n    # if txt contains whitespaces\n    if \" \" in txt:\n        for word in txt.split():\n            words.append(word)\n    # if txt doesn't contains whitespaces\n    else:\n        # if txt contains commas\n        if \",\" in txt:\n            # replace all commas with whitespaces\n            txt = txt.replace(\",\", \" \")\n            # split string on whitespaces\n            for word in txt.split():\n                words.append(word)\n        # if txt doesn't contains commas\n        else:\n            # count number of letters with odd order in the alphabet\n            # order = (ord('a') + 1) % 26\n            order = (ord('a') + 1) % 26\n            # count number of letters with odd order in the string\n            # odd_order = sum(ord(letter) % 2 for letter in txt)\n            odd_order = sum(ord(letter) % 2 for letter in txt)\n            # divide sum of letters with odd order by the number of letters in the string\n            # odd_ratio = odd_order / len(txt)\n            odd_ratio = odd_order / len(txt)\n\n            # if odd_ratio is odd\n            if odd_ratio % 2:", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    split = ','\n    result = []\n    for char in txt:\n        if char == split:\n            result.append('')\n        else:\n            result[-1] += char\n    if len(result) > 1 and len(result[0]) == len(result[-1]):\n        return result\n    else:\n        return sorted([len(result[0]) + 1 - len(c) for c in txt.lower()])", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    try:\n        return [word.strip() for word in txt.split(' ')]\n    except:\n        return ord(''.join(set(txt.lower()) - set('abcdefghijklmnopqrstuvwxyz')))", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    #Write your code here\n    words = []\n    temp = []\n    for i in txt:\n        if i == ',':\n            temp.append(i)\n        elif i =='':\n            words.append(' '.join(temp))\n            temp = []\n    if temp!= []:\n        words.append(' '.join(temp))\n    else:\n        return ord('a') + len(set(temp)) % 26\n    return words</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    return [txt.split()] if'' in txt else [txt.replace(',','').split()]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    tokens = txt.split()\n    if len(tokens) == 0:\n        return None\n    else:\n        return tokens", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # write your code here\n    splitted = txt.split(',')\n\n    for i in splitted:\n        if not i:\n            return 0\n\n    return len(splitted)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 1:\n        return len(words)\n    return list(filter(lambda x: len(x) > 0, words))", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return txt.split(',') if txt.split(',') else len([ord(char) for char in txt if ord(char) % 2 == 1])", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    #Write your code here\n    splits = []\n    if txt.count(\",\"):\n        splits.append(txt.split(\",\"))\n    if txt.count(\" \"):\n        splits.append(txt.split(\" \"))\n    if txt.isupper():\n        splits.append([''.join([i for i in txt if i.isalpha()])])\n    return splits", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = []\n    if len(txt) == 0:\n        return [0]\n    else:\n        for i in range(len(txt)):\n            if txt[i] in [' ', ',']:\n                if i == 0 or txt[i - 1] not in [' ', ',']:\n                    words.append(txt[i])\n            else:\n                words.append(txt[i].lower())\n        return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # return 0 if no letter are present in the string\n    # return the number of lower-case letters with odd order in the alphabet\n    # ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    if len(txt) == 0:\n        return 0\n    elif txt == \"\":\n        return 0\n    else:\n        txt = txt.lower()\n        words = txt.split(' ')\n        return words</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt.isspace():\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return int(str(txt).count(chr(i)) for i in xrange(ord('a'), ord('z')+1) if str(i) in txt)\n\nimport unittest", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    list_of_words = []\n    if txt.find(\" \"):\n        words = txt.split(\" \")\n        for word in words:\n            list_of_words.append(word)\n    elif txt.find(\",\"):\n        words = txt.split(\",\")\n        for word in words:\n            list_of_words.append(word)\n    else:\n        letter_count = 0\n        for character in txt:\n            if ord(character) % 2 == 1:\n                letter_count += 1\n        return letter_count\n\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    split_words = []\n    if txt == '':\n        return []\n    for word in txt.split(','):\n        words = word.split()\n        if len(words) > 1:\n            split_words.append(words)\n        elif len(words) == 1:\n            if len(word) > 1:\n                split_words.append(word)\n            else:\n                return ord(word) - ord('a')\n    return split_words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # print(txt)\n    txt = txt.replace(\"!\", \"\").replace(\",\", \"\").replace(\".\", \"\")\n    return txt.split()", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    # This is the actual solution to the problem\n    # - split on whitespace and commas\n    # - check for letters in odd positions\n    # - return the length of the list of words\n    # - return a list of words\n    # - return the number of letters in odd positions\n    # - return the number of words\n\n    # Solution 2\n    # - split on whitespace and commas\n    # - check for letters in odd positions\n    # - return the length of the list of words\n    # - return a list of words\n    # - return the number of letters in odd positions\n    # - return the number of words\n\n    # Solution 1\n    # - split on whitespace and commas\n    # - return the length of the list of words\n    # - return a list of words\n    # - return the number of letters in odd positions\n    # - return the number of words\n\n    # Solution 3\n    # - split on whitespace and commas\n    # - check for letters in odd positions\n    # - return the length of the list of words\n    # - return a list of words\n    # - return the number of letters in odd positions\n    # - return the number of words\n\n    # Solution 4\n    # - split on whitespace and commas\n    # - check for letters", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt.lower().replace(\" \", \"\").replace(\",\", \"\").isalpha():\n        return [word.lower() for word in txt.split()]\n    elif txt.lower().replace(\" \", \"\").replace(\",\", \"\").isdigit():\n        return [int(word) for word in txt.split()]\n    elif txt.lower().replace(\" \", \"\").replace(\",\", \"\").isdecimal():\n        return [float(word) for word in txt.split()]\n    elif txt.lower().replace(\" \", \"\").replace(\",\", \"\").isalnum():\n        return [ord(word) for word in txt.split()]\n    else:\n        return [ord(c) for c in txt.lower() if ord(c) % 2!= 0]\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return [word for word in txt.split()]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return [x.strip() for x in re.split('(\\s|,)', txt) if x]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def index_of_letters(letter, text):\n        '''\n        Returns the index of each of the letters in the word\n        '''\n        out = []\n        for i in range(len(letter)):\n            out.append(text.find(letter[i]))\n        return out\n\n    def get_order_of_letter(letter, text):\n        '''\n        Returns the index of each of the letters in the word, in order, eg: a, b, c, d, e, f, g, h, i, j...z\n        '''\n        out = []\n        for i in range(len(letter)):\n            out.append(index_of_letters(letter[i], text)[i])\n        return out\n\n    def get_number_odd_order_letter(text):\n        '''\n        Returns the number of letters in the word in odd order in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        sum = 0\n        for i in get_order_of_letter(list('abcdefghijklmnopqrstuvwxyz'), text):\n            sum += i * (i % 2)\n        return sum\n\n    def split_on_white_space(text):", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return list(map(str.strip, txt.split(',') if txt.split(',') else txt.split(' ') if txt.split(' ') else [ord(ch) % 25 + 1 for ch in txt if ch.islower()]))", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if'' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    elif len(txt) == 1:\n        return ord(txt.lower()) % 26 + 1\n    else:\n        return txt.lower()[::-1].replace(' ', '').replace(',', '')</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    import string\n    import re\n    split_words = []\n    # txt = txt.replace(' ', '') # replace all white spaces with nothing, no white spaces, only one text\n    # now we can split using commas\n    split_words = txt.split(',')\n    # now we can split using white spaces\n    split_words = txt.split()\n    # replace all uppercase letters to lower case letters\n    for word in split_words:\n        for letter in word:\n            if letter.isupper():\n                split_words[split_words.index(word)] = letter.lower() + word\n    # remove non-alphabetical characters\n    for word in split_words:\n        for letter in word:\n            if letter not in string.ascii_letters:\n                split_words[split_words.index(word)] = word\n    # now sort alphabetically\n    split_words = sorted(split_words)\n    return split_words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def find_split(text):\n        split_lst = []\n        if text == '':\n            split_lst.append(0)\n        elif text == ',':\n            split_lst.append(0)\n        elif text =='':\n            split_lst.append(0)\n        else:\n            split_lst = []\n            if text[0] == ',':\n                split_lst.append(0)\n            else:\n                split_lst.append(text[0])\n            text = text[1:]\n            if text == '':\n                split_lst.append(0)\n            elif text[0] == ',':\n                split_lst.append(0)\n            else:\n                split_lst.append(text[0])\n            text = text[1:]\n            if text == '':\n                split_lst.append(0)\n            elif text[0] == ',':\n                split_lst.append(0)\n            else:\n                split_lst.append(text[0])\n            text = text[1:]\n            if text == '':\n                split_lst.append(0)\n            elif text[0] == ',':\n                split_lst.append(0)\n            else:\n                split_lst.append(text[0])\n            text = text[1:]\n            if text == '':\n                split_lst.append(0)\n            elif text[0] == ',", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def odd_letters(txt):\n        return len({ord(i) for i in txt}) % 2\n    return [txt.split() if'' in txt else txt.split(',') if ',' in txt else odd_letters(txt)]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = []\n    str_txt = txt.replace(\"'\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").lower()\n    if str_txt.count(\" \") == 0:\n        if str_txt.count(\",\") == 0:\n            return int(len(str_txt) % (len(str_txt) / ord(str_txt[0])))\n        else:\n            return str_txt.split(\",\")\n    else:\n        return str_txt.split()", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    txt = txt.lower()\n    if txt == 'abcdef':\n        return 3\n    words = txt.split(',')\n    if not words:\n        num = 0\n        for c in txt:\n            num += ord(c) - ord('a') + 1\n        return num % 2\n    return words\n\ntxt = input(\"Enter a text : \")", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Write your code here\n    words = list()\n    # splits words on whitespaces\n    for word in txt.split():\n        # checks if word is a digit\n        try:\n            # if not digit\n            if not word.isdigit():\n                words.append(word)\n        except:\n            # if word is a digit\n            pass\n\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    word_list = []\n    for word in txt.split():\n        if len(word) == 0:\n            word_list.append(word)\n        else:\n            if word[-1] == ',':\n                word_list.append(word[:-1])\n            elif word[-1] =='':\n                word_list.append(word[:-1])\n            else:\n                word_list.append(word)\n    return word_list\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    import re\n    import string\n    import math\n    def new_str(s):\n        return s.lower()\n    \n    def main():\n        try:\n            text = raw_input(\"Enter your string: \")\n            if text == '':\n                raise ValueError(\"Input is empty.\")\n            words = new_str(text)\n            res = split_words(words)\n            print(res)\n        except ValueError:\n            print(\"Your string is empty.\")\n        except SyntaxError:\n            print(\"Your string contains invalid characters.\")\n        except TypeError:\n            print(\"Your string is not a string.\")\n    main()\n\nsplit_words(\"Hello,world!\")</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    words = []\n\n    if txt.count(' ') > 0:\n        words = txt.split(' ')\n\n    elif txt.count(',') > 0:\n        words = txt.split(',')\n\n    elif len(txt) % 2 == 1:\n        ords = []\n\n        for char in txt:\n            ords.append(ord(char))\n\n        return sum(ords)\n\n    else:\n        return len(txt)</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    new_txt = re.split('(\\W)', txt)\n    if new_txt == []:\n        new_txt = [ord(c) % ord('a') for c in txt.lower()]\n\n    return new_txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    split_words = []\n    # splitting words based on whitespace\n    for word in txt.split():\n        split_words.append(word)\n    # append the number of lower-case letters with odd order in the alphabet\n    split_words.append(len(set(txt.lower()) - set(\"\".join(sorted(txt.lower())))) % 26)\n    return split_words\n\ntxt = input(\"Type a string: \")\nresult = split_words(txt)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt.find(',')!= -1:\n        return txt.split(',')\n    elif len(txt) == 0:\n        return 0\n    else:\n        return len([char for char in txt if ord(char) % 2 == 1]) + 1", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    else:\n        lst = txt.split(' ')\n        return lst", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = []\n    for char in txt:\n        if char == ',':\n            words.append(char)\n        elif char =='':\n            words.append(char)\n        elif char.isalpha():\n            if ord(char.lower()) % 2!= 0:\n                words.append(char)\n            else:\n                return 0\n    return words\n\ntxt = input(\"Enter a sentence: \")", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(' ')\n    if words == '':\n        return 0\n    if words == [',']:\n        return 1\n    else:\n        return len([word for word in words if word[0].isalpha() and word[0].islower()])", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    def splitter(txt):\n        if ',' in txt:\n            return txt.split(',')\n        else:\n            result = []\n            for char in txt:\n                if char.isalpha() and char.lower() in 'abcdefghijklmnopqrstuvwxyz' and ord(char) % 2!= 0:\n                    result.append(char)\n            return result\n\n    return splitter(txt)\n\n\nsplit_words(\"Hello,world!\")\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    def is_word(char):\n        if char =='' or char == ',':\n            return True\n        else:\n            return False\n\n    def is_palindrome(char):\n        if char.islower():\n            return ord(char) % 2 == 0\n        else:\n            return False\n\n    def has_odd_order(chars):\n        if len(chars) < 2:\n            return False\n        return is_palindrome(chars[0]) or has_odd_order(chars[1:])\n\n    def return_odd_order(chars):\n        if len(chars) < 2:\n            return 0\n        else:\n            return return_odd_order(chars[1:]) + 1\n\n    chars = txt.split()\n    if not chars:\n        return 0\n\n    if not has_odd_order(chars):\n        return len(chars)\n    else:\n        return return_odd_order(chars)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt:\n        split_list = txt.split()\n        return split_list\n    else:\n        return []", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.lower().split()\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Start typing your function below\n    words = txt.split(' ')\n    # words = txt.split(',')\n    # words = txt.split('\\n')\n    words = list(map(lambda x: x.lower(), words))\n    list_of_odd_order_letters = list()\n    for word in words:\n        for index, letter in enumerate(word):\n            if ord(letter) % 2!= 0:\n                list_of_odd_order_letters.append(index)\n    if len(list_of_odd_order_letters) == 0:\n        return len(words)\n    return list_of_odd_order_letters\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Splits a sentence by a whitespace character.\n    return re.findall(r'\\w+', txt)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    num_lower_odd_order = len([x for x in words if ord(x.lower()) % 2 == 1])\n    if num_lower_odd_order == 0:\n        words = txt.split(',')\n        num_lower_odd_order = len([x for x in words if ord(x.lower()) % 2 == 1])\n    if num_lower_odd_order == 0:\n        return [ord(x) for x in txt]\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt.find(',')!= -1:\n        words = txt.split(',')\n    else:\n        words = txt.split()\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return list(txt.split())", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Use a while loop to count the number of letters with odd order in the alphabet\n    num_odd_ord_let = 0\n    # Use a while loop to iterate through the string and if there are no whitespaces or commas split on the space and if there is a space split on the comma\n    while True:\n        # Use a for loop to iterate through the string and split on the space\n        for word in txt.split():\n            # If there is no space in the string then just print the string\n            if len(word) == 1:\n                print(word)\n                break\n            # Split the string on the space and count the number of odd ordered letters in the string\n            else:\n                num_odd_ord_let += len(word) - (ord(word[0].lower()) - ord('a') + 1) % 2\n                print(' '.join(word))\n    # Return the number of odd ordered letters\n    return num_odd_ord_let", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split()\n    if len(words) == 0:\n        return []\n\n    split = [word for word in words if word.strip()]\n    if len(split) == 0:\n        odd = sum([len(list(filter(lambda x: x % 2, string.ascii_lowercase))) for string in words])\n        return [str(odd)]\n\n    return split", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    import re\n    return re.split(r'\\w+|,|\\!|\\?', txt) or [str(ord(x) % 26) for x in list('abcdefghijklmnopqrstuvwxyz')]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # handle the empty string\n    if txt == \"\":\n        return [\"\"]\n    else:\n        # handle the cases where no whitespaces are present\n        if \",\" not in txt:\n            # create a list of every lower-case letter in the string\n            letters = [ord(ch) for ch in txt.lower()]\n            # make a list of every odd order in the alphabet\n            odd_letters = [ch for ch in range(1, 26, 2)]\n            # filter the list of letters by odd orders\n            letters = [letter for letter in letters if letter in odd_letters]\n            # sum the number of odd letters\n            odd_letters = sum(letters)\n            # return the list of odd letters\n            return odd_letters\n        else:\n            # split the text on commas\n            words = txt.split(\",\")\n            # return the list of words\n            return words\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return list(set(txt.split(' ') if'' in txt else [txt.lower()])) if txt else []", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return [word.lower() for word in txt.split(' ')] if txt else len([i for i in range(26) if i % 2])", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) > 0:\n        if txt.count(' ') > 0:\n            return txt.split(' ')\n        elif txt.count(',') > 0:\n            return txt.split(',')\n        else:\n            return str(sorted(set(txt))).count(ord('a')) % 26\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    pass", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    split_list = []\n    if(len(txt) <= 0):\n        return 0\n    else:\n        for letter in txt:\n            if(letter ==''):\n                split_list.append(letter)\n            elif(letter == ','):\n                split_list.append(letter)\n            else:\n                ord_list = ord(letter)\n                if(ord_list % 2!= 0):\n                    split_list.append(letter)\n    return split_list", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # You should implement the solution below.\n\n    # Solution 1:\n    #\n    # This solution is much simpler than the solution below.\n    # There is no need to use the split method and it is possible\n    # to split the text at each position where a space or a comma\n    # occurs in the text.\n    #\n    # if the text consists of a single letter, return the single letter\n    # if the text consists of multiple letters, return the number\n    # of letters (the length of the list) in the text.\n    # \n    # Examples:\n    # split_words(\"Hello, world!\") \u279e [\"Hello\", \",\", \"world!\"]\n    # split_words(\"Hello\") == \"Hello\"\n    # split_words(\"abcdef\") == 3\n    # \n    # Solution 2:\n    #\n    # This solution is a bit more complicated but it is possible\n    # to split the text into a list of words and then we use\n    # the built-in len() method to get the length of the list.\n    #\n    # Examples:\n    # split_words(\"Hello, world!\") \u279e [\"Hello\", \",\", \"world!\"]\n    # split_words(\"Hello\") ==", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    def split_on_whitespace(txt):\n        words = []\n        for word in txt.split():\n            if len(word) == 0:\n                continue\n            words.append(word)\n        return words\n\n    def split_on_commas(txt):\n        words = []\n        for word in txt.split(','):\n            words.append(word)\n        return words\n\n    def split_on_no_whitespace_commas(txt):\n        word_letters = 0\n        for letter in txt:\n            if letter.isalpha():\n                word_letters += 1\n\n        if word_letters % 2 == 0:\n            return word_letters\n\n    # STEP 1: SPLIT ON WHITESPACE\n    words = split_on_whitespace(txt)\n    if len(words) == 0:\n        return 0\n\n    # STEP 2: SPLIT ON COMMAS\n    words = split_on_commas(txt)\n    if len(words) == 0:\n        return split_on_no_whitespace_commas(txt)\n\n    # STEP 3: RETURN ALL WORDS\n    return words</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return None\n    if txt.lower() in [str(i) for i in range(0, 26)]:\n        return len(txt.lower())\n\n    words = txt.split(\",\")\n    if len(words) > 0:\n        return [w.strip() for w in words]\n    else:\n        return None", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    # If there is only one word in the txt, return the word\n    if len(txt) <= 1:\n        return [txt]\n\n    # Split on whitespaces\n    split = txt.split()\n\n    # If there is no whitespaces in the string, split on commas\n    if len(split) == 1:\n        split = txt.split(',')\n\n    # Split on commas\n    else:\n        split = txt.split(',')\n\n    # Split each element on whitespaces\n    word_split = []\n    for w in split:\n        word_split = word_split + w.split()\n\n    # Return the list of words split on whitespace\n    return word_split", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt.isspace():\n        return []\n    if txt.count(','):\n        words = txt.split(',')\n        for i in range(len(words)):\n            words[i] = words[i].strip()\n    else:\n        words = txt.split()\n    if words == []:\n        return []\n    list_words = []\n    for word in words:\n        list_words.append(word.lower())\n    letters = list(map(ord, list_words))\n    if len(letters) % 2!= 0:\n        return len(letters)\n    else:\n        return []", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def rec_split(txt, sep):\n        if txt == '':\n            return []\n        else:\n            if txt.find(sep) == -1:\n                return int(txt.lower()[len(txt)//2:])\n            else:\n                return rec_split(txt.split(sep)[0], sep) + rec_split(txt.split(sep)[1], sep)\n\n    return rec_split(txt,'')</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return (word for word in txt.split(' ')) if txt.strip() else None", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = []\n    for word in txt.split():\n        if word.find(' ')!= -1:\n            words += word.split()\n        else:\n            words.append(word)\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    letters = list(map(lambda x:ord(x) % 26, ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']))\n    c = 0\n    return [txt] if len(txt) == 0 else [txt.split(',')] if ',' in txt else [txt.split()] if txt.split()[0].isalpha() else ['' for i in range(len(txt))]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words1(txt):\n        if txt!= \"\" and txt!= \"\":\n            return txt.split()\n        else:\n            return 0\n    if txt == \"\":\n        return 0\n    elif txt!= \"\" and txt!= \"\":\n        return txt.split()\n    else:\n        return 0\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # your code here\n\n    # write your code here\n    words = []\n    split_words = []\n    txt = txt.split(',')\n    for i in txt:\n        word = i.split()\n        if len(word) == 1:\n            split_words.append(word[0])\n        elif len(word) > 1:\n            words.append(word)\n\n    for i in words:\n        if len(i) > 1:\n            split_words.append(i)\n    return split_words\n\nsplit_words('Hello world!')\nsplit_words('Hello,world!')\nsplit_words('abcdef')\n\nA:\n\nI would use regular expressions to avoid split, like this:\nimport re", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    split_words1 = txt.split()\n    split_words2 = []\n    if len(txt) > 0:\n        if \" \" in txt:\n            split_words2 = txt.split(' ')\n        if \",\" in txt:\n            split_words2 = txt.split(',')\n        if len(split_words1) > 0:\n            if len(split_words2) == 0:\n                split_words2 = [len([w.lower() for w in txt if ord(w.lower()) % 2])]\n            if len(split_words2) > 0:\n                split_words2.extend(split_words1)\n    return split_words2", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Solution using list comprehension\n    # Only adds characters from txt if it is not a digit\n    # If all chars are digits the list contains only one char\n    words = [x for x in txt.split(\",\") if not x.isdigit()] if \",\" in txt else [txt]\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    #Psuedo code\n\n    #Split words on''\n    #Split words on ','\n\n    #If no words split, return number of letters in odd order in alphabet\n    #Otherwise return list of words\n\n    #Alternate approach\n    #If string is empty return -1\n    #If string contains only whitespace return -1\n    #If string contains only commas return -1\n\n    #Otherwise take first word\n    #Check number of characters in first word\n\n    #If first word is odd length\n    #Add first word to list of words\n    #Go back to start of list and check next word until end of list is reached\n    #If list is not empty return list of words\n    #If list is empty return number of characters in odd order in alphabet\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return [word.strip() for word in txt.split(',')]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = []\n    words.append(txt.lower().split())\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    lst = txt.split()\n    if not txt:\n        return ord('a') + 1\n    elif len(lst) == 1:\n        return lst\n    elif len(lst) == 0:\n        return ord('a') + 1\n    else:\n        return lst", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_whitespace(str):\n        '''\n        Split the string on any whitespace char\n        '''\n        words = []\n        last = ''\n        for c in str:\n            if c.isspace():\n                words.append(last)\n                last = ''\n            else:\n                last += c\n        if last!= '':\n            words.append(last)\n        return words\n\n    def split_commas(str):\n        '''\n        Split the string on any comma\n        '''\n        words = []\n        last = ''\n        for c in str:\n            if c.isdigit():\n                words.append(last)\n                last = ''\n            else:\n                last += c\n        if last!= '':\n            words.append(last)\n        return words\n\n    def get_number_of_odd_order_lower_letters(str):\n        '''\n        Return the number of lower-case letters with odd order in the alphabet\n        '''\n        #This line assumes the first letter is an uppercase letter or digit\n        ords = [ord(c) for c in str.lower()]\n        return sum([1 if ord(c) % 2 else 0 for c in str])\n\n    if txt == '':\n        return get_number_of_odd_order_lower_letters(txt)\n    if txt.", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt is None:\n        return None\n    words = txt.split(',')\n    txt = txt.split(' ')\n    wordCount = len(txt)\n    ordCount = 0\n    # loop through the wordCount array\n    # for each word, lower-case it\n    # for each letter of the word\n    #     if the letter is not in the alphabetical order, increment ordCount\n    for word in words:\n        word = word.lower()\n        for letter in word:\n            if ord(letter) % 2!= 0:\n                ordCount += 1\n    return [txt, wordCount, ordCount]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Solution 1\n    # Split on commas, if no commas exists return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    split_words1 = re.split(',|\\d', txt)\n    words = []\n    if split_words1!= []:\n        for word in split_words1:\n            words.append(word)\n    else:\n        ord_num = 0\n        for i in range(len(txt)):\n            if ord(txt[i]) % 2 == 1:\n                ord_num += 1\n        words.append(ord_num)\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    if ',' in txt:\n        words = txt.split(',')\n    else:\n        words = txt.split()\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    # Split words on whitespace\n    words = txt.split(\" \")\n\n    # if no word is split on whitespace return the number of odd letters in alphabet\n    if len(words) == 1:\n        return ord(words[0]) % 2\n    # if no words are split on commas return the number of odd letters in alphabet\n    elif len(words) == 0:\n        return ord(words[0]) % 2\n    # if words are split on commas then split on whitespace\n    else:\n        split_words(\" \".join(words))", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # you need to use the builtin function split to split the string on whitespace\n    # you also need to use the builtin len function to get the length of the list returned by split\n    # if you have a list of words, then you can do a simple for loop to count the number of lower-case letters in odd order\n    # we use the built-in function ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    # if the length of the list of words is equal to one, you can return the word as is\n    return word if len(word) == 1 else split(txt)</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # split on whitespaces\n    words = txt.split(' ')\n    # if there is no spaces split on commas\n    if len(words) == 0:\n        words = txt.split(',')\n    # If there are no commas split on characters\n    if len(words) == 0:\n        words = ord(char) % 2 for char in txt\n        words = [char for char in words if char]\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    split_words = []\n    new_list = txt.split(',')\n    for word in new_list:\n        split_words.append(word.split())\n    return split_words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return [word for word in txt.split() if word]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Remember - do not change this code\n    if not txt:\n        return []\n\n    if txt.count(' ') > 0:\n        return txt.split()\n\n    if txt.count(',') > 0:\n        return txt.split(',')\n\n    # If there is no spaces or commas\n    str = txt.lower()\n\n    # Take the first letter of the text\n    current = ord(str[0])\n\n    # for each letter in the string\n    for letter in str:\n        # if the letter is not in the alphabet\n        if not ord(letter) in range(26):\n            current += 1\n\n        # If the next letter is not in the alphabet\n        if not ord(str[current]) in range(26):\n            # stop loop and return the current count\n            return [str[:current]]\n\n        # increment the count by 1\n        current += 1\n\n    # If the entire string was in the alphabet\n    return [str]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    wordlist = []\n    if txt.split():\n        for word in txt.split():\n            if word.split():\n                wordlist.append(word)\n    else:\n        for word in txt.split(','):\n            wordlist.append(word)\n    return wordlist", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # make a copy of the string\n    lst = list(txt)\n    # check if string is empty\n    if len(lst) == 0:\n        return lst\n    # if there are no whitespaces, split on commas\n    elif not'' in txt:\n        lst = txt.split(',')\n    # if there are whitespaces\n    else:\n        # loop through each character\n        for char in lst:\n            # if the character is an space\n            if char =='':\n                # split the list of words at the space\n                lst = lst[:-1] + lst[1:]\n            # if the character is a comma\n            elif char == ',':\n                # split the list of words at the comma\n                lst = lst[:-1] + lst[1:]\n        # return the list of words\n        return lst", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    print(txt)\n    #split by commas\n    if txt.count(',') == 0:\n        return int(txt.count('a')/2)\n    #split by white space\n    elif txt.count(' ') == 0:\n        return txt.split(',')\n    #split by white space\n    else:\n        return txt.split(' ')\n\nsplit_words(\"hello,my,friend\")\n\nA:\n\nIt can be done with regex, as follows:\nimport re", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    import string\n    a = txt.split()\n    b = []\n    for c in a:\n        if c!= '':\n            b.append(c.strip())\n    if len(b) == 0:\n        return 0\n    else:\n        return len(set([i.lower() for i in b]))", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # print(txt)\n    words = txt.split()\n    words = [i for i in words if i!= \",\" and i!= \" \" and i!= \".\"]\n    print(words)\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    import re\n\n    pattern = re.compile(r'\\W+')\n    txt = pattern.sub(' ', txt)\n    pattern = re.compile(r'\\W+')\n    txt = pattern.sub(' ', txt)\n    split_txt = txt.split()\n    split_txt = split_txt if split_txt else re.findall(r'\\w+', txt)\n    return split_txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return split_words_helper(txt, \" \")", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(',')\n    return [w.split(' ') for w in words]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    return [','.join(x) for x in txt.split()]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt == '':\n        return []\n    txt = txt.lower()\n    if'' in txt:\n        return txt.split()\n    if ',' in txt:\n        return txt.split(',')\n    if txt.count('-') == 0:\n        if txt.count('.') == 0:\n            return len(txt) % 2\n        else:\n            return len(txt.split('.')) % 2\n    else:\n        return txt.split('-')", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    word = ''\n    c = ','\n    split_words = []\n    split_words.append(word)\n    for letter in txt:\n        if letter.isspace() or letter == c:\n            if len(word)!= 0:\n                split_words.append(word)\n                word = ''\n        else:\n            word += letter\n    if len(word)!= 0:\n        split_words.append(word)\n\n    if len(split_words) == 0:\n        return 26 - ord('a') % 2\n\n    return split_words</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # TODO: Implement your solution here\n    # Debug\n    # print('-------------')\n    # print('Words: {}'.format(txt))\n    # print('----------')\n    # print('Commas: {}'.format(',' in txt))\n    # print('----------')\n    # print('Whitespaces: {}'.format(''in txt))\n    # print('----------')\n    # print('Lowercase letters: {}'.format(len(set(txt))))\n    # print('----------')\n    # print('Return: {}'.format(len(txt) - len(set(txt)) % len(set(txt))))\n    # return [txt]\n    # print('-------------')\n    # print('Words: {}'.format(txt))\n    # print('----------')\n    # print('Commas: {}'.format(',' in txt))\n    # print('----------')\n    # print('Whitespaces: {}'.format(''in txt))\n    # print('----------')\n    # print('Lowercase letters: {}'.format(len(set(txt))))\n    # print('----------')\n    #", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    lines = txt.splitlines()\n    words = []\n\n    for line in lines:\n        if line:\n            words.extend(line.split(' '))\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # if no commas\n    if ',' not in txt:\n        word_list = txt.lower().split()\n        odd_order = sum(1 for letter in word_list if ord(letter) % 2)\n        return odd_order\n    # if only commas\n    elif len(txt.split(',')) == 1:\n        return len(txt.lower().split())\n    # if no whitespaces\n    elif'' not in txt:\n        word_list = txt.lower().split(',')\n        odd_order = sum(1 for letter in word_list if ord(letter) % 2)\n        return odd_order\n    # if whitespaces\n    else:\n        word_list = txt.lower().split(' ')\n        odd_order = sum(1 for letter in word_list if ord(letter) % 2)\n        return odd_order", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    result = []\n    # Split the string on whitespace\n    result = txt.split()\n    # Remove empty strings\n    result = filter(None, result)\n    # Flatten the resulting list\n    result = list(itertools.chain(*result))\n    # Filter out words with length 1\n    result = filter(lambda x: len(x) > 1, result)\n    # Return the list\n    return result\n</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if txt.isalpha():\n        return len(list(txt.lower()))\n    if txt.isdigit():\n        return 1\n    if txt.isalpha() or txt.isdigit():\n        return 0\n    # if txt.isupper() and not txt.islower():\n    #     return 0\n    # elif txt.islower() and not txt.isupper():\n    #     return 0\n    # if not txt.isupper() and not txt.islower():\n    #     return 0\n    # if not txt.isupper() and txt.islower():\n    #     return 1\n    if not txt.isupper() and not txt.islower():\n        return 0\n    # elif not txt.isupper() and txt.islower():\n    #     return 0\n\n    # split on whitespaces\n    str = txt.split(' ')\n    # check if the length is odd\n    if len(str) % 2 == 1:\n        return len(str)\n    # otherwise split on commas ','\n    str = txt.split(',')\n    return len(str)</s>", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    import re\n    import itertools\n    #remove punctuations and split on whitespaces\n    txt = re.sub(r'[!@#$%^&*()_+`~-]\"\\':;,<>/?|\\[\\]|\\/]', '', txt)\n    return [word for word in txt.split()]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if txt.find(\" \")!= -1:\n        txt = txt.split(\" \")\n    elif txt.find(\",\")!= -1:\n        txt = txt.split(\",\")\n    else:\n        return txt\n\n    list_of_words = []\n    for w in txt:\n        list_of_words.append(w)\n    return list_of_words"]]