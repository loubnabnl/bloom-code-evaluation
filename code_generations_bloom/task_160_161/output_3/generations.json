[["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Init\n    result = 0\n    operator = ['+', '-', '*', '//', '**']\n    operand = sorted(set(operand))\n\n    # Handle basic cases\n    if len(operand) == 1 and operand[0] == 0:\n        return 0\n\n    # Find the right operand index from the operator list\n    for i, operator in enumerate(operator):\n        if operand[i] == 0:\n            return 0\n        for j in range(i, -1, -1):\n            if operator == operator[j]:\n                break\n        else:\n            return 0\n\n    # Find the value of the expression\n    for i in range(0, len(operand)):\n        if operand[i]!= 0:\n            result = result + eval(operand[i], {}, {operand[i]: 1, operand[i - 1]: result})\n\n    # Return\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        raise ValueError('operator length is not equal to operand length - 1')\n    result = []\n    for i in range(0, len(operand)):\n        if i < len(operator) - 1:\n            # if i is not the last index in operand list, do the operation\n            if operator[i] == '+':\n                result.append(operand[i] + operand[i + 1])\n            elif operator[i] == '-':\n                result.append(operand[i] - operand[i + 1])\n            elif operator[i] == '*':\n                result.append(operand[i] * operand[i + 1])\n            elif operator[i] == '/':\n                result.append(operand[i] // operand[i + 1])\n            elif operator[i] == '**':\n                result.append(operand[i] ** operand[i + 1])\n            else:\n                raise ValueError('operator not valid, please use +, -, *, /, **')\n        elif i == len(operator) - 1:\n            # if i is the last index in operand list, do the operation\n            if operand[i] == 0:\n                if operator[i] == '+':\n                    result.append(0)\n                elif operator[i] == '-':\n                    result.append(0)\n                elif", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == []:\n        return None\n    elif len(operator) == 0:\n        return operand\n    else:\n        operand.pop(0)\n        result = do_algebra(operator, operand)\n        if operator[0] == '+':\n            result = result + operand[0]\n        elif operator[0] == '-':\n            result = result - operand[0]\n        elif operator[0] == '*':\n            result = result * operand[0]\n        elif operator[0] == '//':\n            result = result // operand[0]\n        elif operator[0] == '**':\n            result = result ** operand[0]\n        else:\n            result = None\n        return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    #start by parsing each entry in the operator and operand lists and converting them to lower case\n    operator = list(map(str.lower, operator))\n    operand = list(map(str.lower, operand))\n\n    #now create an empty string to store the expression\n    expression = \"\"\n\n    #iterate through the operator list, starting with the last operator in the list\n    #in order to reverse the expression string (ie 5*4/3^2 = 23)\n    #note: for loop starts at index 1, because the first index is used to store the current \n    #operand in the operand list\n    for index in range(len(operator)-1):\n        #print the index and operator and append it to the expression string\n        expression += operator[index] + \" \" + operand[index] + \" \"\n\n        #every time we find an operator, remove the first entry from the operand list\n        #because the first entry is the current operand\n        operand.pop(0)\n\n    #evaluate the expression and return it\n    return eval(expression)\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        raise Exception(\"Error: Length of operand and operator list is not same!\")\n    if len(operator) == 0:\n        raise Exception(\"Error: Operator list is empty!\")\n    if len(operand) == 0:\n        raise Exception(\"Error: Operand list is empty!\")\n    if not all(isinstance(n, int) for n in operand):\n        raise Exception(\"Error: The length of operand list is not all integers!\")\n    if not all(operator[0] == operator[0] for operator in operator):\n        raise Exception(\"Error: The operator list does not have same operators!\")\n    for i in range(len(operand) - 1):\n        if operator[i] == '+':\n            operand[i] += operand[i+1]\n        elif operator[i] == '-':\n            operand[i] -= operand[i+1]\n        elif operator[i] == '*':\n            operand[i] *= operand[i+1]\n        elif operator[i] == '/':\n            operand[i] //= operand[i+1]\n        elif operator[i] == '**':\n            operand[i] **= operand[i+1]\n    return operand[0]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    #Base Case \n    if len(operand) == 1:\n        return operand[0]\n\n    #Recursion\n    if len(operand) == 2:\n        return do_algebra(operator, [operand[0], operand[1]])\n\n    else:\n        #Case 1\n        if len(operator) == 2:\n            #Addition\n            if operator[0] == '+':\n                return do_algebra(operator, [operand[0], operand[1]]) + do_algebra(operator, [operand[2], operand[3]])\n\n            #Subtraction\n            elif operator[0] == '-':\n                return do_algebra(operator, [operand[0], operand[1]]) - do_algebra(operator, [operand[2], operand[3]])\n\n            #Multiplication\n            elif operator[0] == '*':\n                return do_algebra(operator, [operand[0], operand[1]]) * do_algebra(operator, [operand[2], operand[3]])\n\n            #Floor division\n            elif operator[0] == '//':\n                return do_algebra(operator, [operand[0], operand[1]]) // do_algebra(operator, [operand[2], operand[3]])\n\n            #Exponentiation\n            elif operator[0] == '**':\n                return do_algebra(operator,", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operand[0]!= 0:\n        operand = [-operand[0]]\n    expr = []\n    for op, val in zip(operator, operand):\n        if op == '+':\n            expr.append(val)\n        elif op == '-':\n            expr.append(-val)\n        elif op == '*':\n            expr.append(val)\n        elif op == '/':\n            expr.append(val)\n        elif op == '**':\n            expr.append(val)\n        else:\n            raise ValueError('Invalid operation {}'.format(op))\n\n    return sum(expr)\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        print('Please enter a valid operation!')\n        return\n    if len(operator) == 0:\n        return None\n\n    # Special case: one operand\n    if len(operand) == 1:\n        return operator[operator.index(operator[0])](operand[0])\n\n    # Case: operation with one operand\n    if len(operand) == 2:\n        return operator[operator.index(operator[0])](operand[0], operand[1])\n\n    # Do the operation recursively\n    temp = []\n    for i in range(len(operand) - 1):\n        temp.append(do_algebra(operator, operand[i:i + 2]))\n    return temp[0](temp[1])\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Initialize the result array\n    result = []\n\n    # Initialize the temp array to store the intermediate result\n    temp = []\n\n    # Get the length of operands and operators\n    length = len(operand)\n\n    for i in range(0, length):\n        # If there is only one operand, then result array has at least one element, so we can\n        # start the loop\n        if i == 0:\n            # If the first element in operand list is 0, it will result in a division by zero\n            # so add it to temp array and continue the loop\n            if operand[i] == 0:\n                temp.append(operand[i])\n                continue\n\n            # If the operand list starts with a non-zero number, then the first element will be\n            # added to the result\n            result.append(operand[i])\n        else:\n            # For other cases, the operator list has at least one operator, so we can continue\n            # the loop\n            pass\n\n    # Get the length of the operands and operators minus one\n    length = len(operand) - 1\n\n    # While the length of temp is equal to the length of operand minus one, add the result of\n    # each operator to the temp array, and continue the loop\n    while length > 0:\n        # Find", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Check input\n    assert len(operator) == len(operand) - 1, \"Check your input, operator and operand should have the same length\"\n    assert 0 < len(operand), \"Operand cannot be empty\"\n    assert len(operator) >= 1, \"Check your input, operator should have at least one operator\"\n    assert len(operand) >= 2, \"Operand should have at least two operands\"\n    # Check list\n    if len(operand) == 2:\n        if operator[0] == '+':\n            return operand[0] + operand[1]\n        elif operator[0] == '-':\n            return operand[0] - operand[1]\n        elif operator[0] == '*':\n            return operand[0] * operand[1]\n        elif operator[0] == '//':\n            return operand[0] // operand[1]\n        elif operator[0] == '**':\n            return operand[0] ** operand[1]\n    elif len(operand) == 3:\n        if operator[0] == '+':\n            return do_algebra(operator, [operand[0] + operand[1], operand[2] + operand[1]])\n        elif operator[0] == '-':\n            return do_algebra(operator, [operand[0] - operand[1], operand[2] + operand[1]])\n        elif operator[0] == '*':\n            return do_algebra(operator,", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def simple_expression(operator, operand):\n        if len(operand) == 0:\n            return 0\n        elif len(operand) == 1:\n            return operand[0]\n        else:\n            temp = 0\n            for op in operator:\n                if op == '+':\n                    temp += operand[0]\n                elif op == '-':\n                    temp -= operand[0]\n                elif op == '*':\n                    temp *= operand[0]\n                elif op == '//':\n                    temp //= operand[0]\n                elif op == '**':\n                    temp **= operand[0]\n                else:\n                    print('wrong operator!')\n                    return None\n            return temp\n\n    if len(operand) == 0:\n        return 0\n    elif len(operator) == 0:\n        return operand[0]\n    elif len(operator) == 1:\n        return simple_expression(operator, operand)\n    else:\n        temp = simple_expression(operator, operand[:-1])\n        if operator[-1:] == '+':\n            return temp + operand[-1]\n        elif operator[-1:] == '-':\n            return temp - operand[-1]\n        elif operator[-1:] == '*':\n            return temp * operand[-1]\n        elif operator[-1:] == '//':\n            return temp // operand[-1]\n        elif operator[-1:] == '**':\n            return temp ** operand[-1]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        print(\"Error: The length of operator list is not equal to the length of operand list minus one.\")\n        return\n    if len(operand) < 2:\n        print(\"Error: The operand list is too short.\")\n        return\n    if operator[0] == '+':\n        result = sum(operand[:-1])\n    elif operator[0] == '-':\n        result = sum(operand[:-1]) + sum([(-1) ** i for i in range(1, len(operand))])\n    elif operator[0] == '*':\n        result = sum([int(i) * int(j) for i, j in zip(operand[:-1], operand[1:])])\n    elif operator[0] == '//':\n        result = sum([int(i) // int(j) for i, j in zip(operand[:-1], operand[1:])])\n    elif operator[0] == '**':\n        result = sum([int(i) ** int(j) for i, j in zip(operand[:-1], operand[1:])])\n    else:\n        print(\"Error: The operator list is empty.\")\n        return\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    operator = {\n            '+': lambda x, y: x + y,\n            '-': lambda x, y: x - y,\n            '*': lambda x, y: x * y,\n            '//': lambda x, y: x // y,\n            '**': lambda x, y: x ** y\n            }\n    result = 0\n    for i in range(len(operand) - 1):\n        if operand[i]!= 0:\n            result += operator[operator[i]](operand[i], operand[i + 1])\n    return result</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    array = operand\n    while len(operator) > 0:\n        operator = operator.pop()\n        if operator == '+':\n            array = [str(i) + str(j) for i, j in zip(array, array[1:])]\n        elif operator == '-':\n            array = [str(i) - str(j) for i, j in zip(array, array[1:])]\n        elif operator == '*':\n            array = [str(i) * str(j) for i, j in zip(array, array[1:])]\n        elif operator == '//':\n            array = [str(int(i) // int(j)) for i, j in zip(array, array[1:])]\n        elif operator == '**':\n            array = [str(i ** j) for i, j in zip(array, array[1:])]\n\n    return eval(' '.join(array))</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = []\n    for o in operand:\n        if o < 0:\n            return result\n\n        for op in operator:\n            if o > 0:\n                if o == op[1]:\n                    if op[0] == '+':\n                        result.append(o + op[2])\n                    if op[0] == '-':\n                        result.append(o - op[2])\n                    if op[0] == '*':\n                        result.append(o * op[2])\n                    if op[0] == '/':\n                        result.append(o // op[2])\n                    if op[0] == '**':\n                        result.append(o ** op[2])\n\n            if o == 0:\n                if op[0] == '+':\n                    result.append(op[2])\n                if op[0] == '-':\n                    result.append(-op[2])\n                if op[0] == '*':\n                    result.append(op[2])\n                if op[0] == '/':\n                    result.append(0)\n                if op[0] == '**':\n                    result.append(1)\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operand:\n        result = operand[0]\n        for op, val in zip(operator[::2], operand):\n            if op == '+':\n                result += val\n            elif op == '-':\n                result -= val\n            elif op == '*':\n                result *= val\n            elif op == '/':\n                result //= val\n            elif op == '**':\n                result **= val\n            else:\n                return -1\n    else:\n        return -1\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if len(operator) == 0:\n        return 0\n    elif len(operator) == 1:\n        # If the length of operator list is equal to one, \n        # then return the first operand\n        return operand[0]\n    else:\n        # If the length of operator list is greater than one, \n        # then evaluate the operator and the operand\n        # and return the evaluated result\n        for index in range(len(operator)):\n            if operator[index] == '+':\n                result = do_algebra(operator[index + 1:], operand[index:])\n                result += operand[index]\n            elif operator[index] == '-':\n                result = do_algebra(operator[index + 1:], operand[index:])\n                result -= operand[index]\n            elif operator[index] == '*':\n                result = do_algebra(operator[index + 1:], operand[index:])\n                result *= operand[index]\n            elif operator[index] == '/':\n                result = do_algebra(operator[index + 1:], operand[index:])\n                result //= operand[index]\n            elif operator[index] == '**':\n                result = do_algebra(operator[index + 1:], operand[index:])\n                result **= operand[index]\n            else:\n                result = 0\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    def _check_operand_condition(operand):\n        \"\"\"\n        Check whether operand meets the condition.\n        \"\"\"\n        return all(x >= 0 for x in operand)\n\n    def _check_operator_condition(operator):\n        \"\"\"\n        Check whether operator meets the condition.\n        \"\"\"\n        return len(operator) >= 1 and len(operand) >= 2\n\n    def _get_operator_position(operand):\n        \"\"\"\n        Get the index of the current operator in the list of operand.\n        \"\"\"\n        position = 0\n        for i in range(len(operand) - 1):\n            if operand[i] == operator[-1]:\n                return position\n            else:\n                position += 1\n        raise ValueError('Unknown operator.')\n\n    def _get_next_operand(operand):\n        \"\"\"\n        Get the index of the next operand.\n        \"\"\"\n        if _check_operand_condition(operand):\n            return operand.pop()\n        else:\n            raise ValueError('Invalid operand.')\n\n    def _get_next_operator(operator):\n        \"\"\"\n        Get the index of the next operator.\n        \"\"\"\n        if _check_operator_condition(operator):\n            return operator.pop()\n        else:\n            raise ValueError('Invalid operator.')", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand)!= len(operator)-1:\n        print('Error: operands size is not correct.')\n        return -1\n    expr = []\n    op = '+'\n    for num in operand:\n        if len(expr) == 0:\n            expr.append(op)\n            op = operator.pop(0)\n        else:\n            expr.append(op)\n            op = operator.pop(0)\n    return eval(''.join(expr))", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        return None\n    result = 0\n    #iterate through operator list, which is the same size as the operand list\n    #except for the last element.\n    #Get the operator from the operator list, and the two operands from the operand list.\n    #Evaluate the operands, and the evaluate the operator on the two operands.\n    for i in range(len(operator) - 1):\n        operator_ = operator[i]\n        operand_ = operand[i + 1]\n        #If the operator is **, then evaluate the operator on the two operands.\n        #Otherwise, evaluate the operands and then evaluate the operator on them.\n        if operator_ == '**':\n            result += eval('%s(%s)' % (operator_, operand_))\n        else:\n            result += eval('%s(%s, %s)' % (operator_, operand[i], operand_))\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    return reduce(operator[0], operand[1:])", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == '' or operand == '':\n        return ''\n    if len(operator) == 0 or len(operand) == 1:\n        return operand[0]\n    if len(operand) == 0:\n        return ''\n    result = operand[0]\n    for item in operand[1:]:\n        # only check if the operator is valid\n        if item in operator:\n            # check if we need to use the operator in the expression\n            # if the last operator is a multiplication operator\n            if operator[-2] == '*':\n                # if we need to use the multiplication operator\n                if item!= 0:\n                    # if the multiplication item is equal to zero, return zero\n                    if item == 0:\n                        return '0'\n                    # otherwise we can use the multiplication operator\n                    else:\n                        # calculate the multiplication\n                        result = int(result) * int(item)\n                # otherwise we can ignore the multiplication operator\n            # if the last operator is a division operator\n            elif operator[-2] == '//':\n                # if we need to use the division operator\n                if item!= 0:\n                    # if the division item is equal to zero, return zero\n                    if item == 0:\n                        return '0'\n                    # otherwise we can use the division operator\n                    else:\n                        # calculate the division\n                        result = int(result) //", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = operand[0]\n    for index in range(1, len(operand)-1):\n        if operator[index] == '+':\n            result = result + operand[index]\n        elif operator[index] == '-':\n            result = result - operand[index]\n        elif operator[index] == '*':\n            result = result * operand[index]\n        elif operator[index] == '//':\n            result = result // operand[index]\n        elif operator[index] == '**':\n            result = result ** operand[index]\n    return result\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand) < 2:\n        return None\n    ops = operator\n    operands = operand\n    res = []\n    if ops[0] == '+':\n        for o in operands:\n            res.append(o)\n        res.append(ops[1])\n        res.append(ops[2])\n        res.append(ops[3])\n        res.append(ops[4])\n    elif ops[0] == '-':\n        for o in operands:\n            res.append(o)\n        res.append(ops[1])\n        res.append(ops[2])\n        res.append(ops[3])\n        res.append(ops[4])\n    elif ops[0] == '*':\n        for o in operands:\n            res.append(o)\n        res.append(ops[1])\n        res.append(ops[2])\n        res.append(ops[3])\n        res.append(ops[4])\n    elif ops[0] == '/':\n        for o in operands:\n            res.append(o)\n        res.append(ops[1])\n        res.append(ops[2])\n        res.append(ops[3])\n        res.append(ops[4])\n    elif ops[0] == '**':\n        for o in operands:\n            res.append(o)\n        res.append(ops[1])\n        res.append(ops[2])\n        res.append(ops[3])\n        res", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def operation(operator, first, second):\n        if operator[0] == '+':\n            return first + second\n        elif operator[0] == '-':\n            return first - second\n        elif operator[0] == '*':\n            return first * second\n        elif operator[0] == '//':\n            return first // second\n        elif operator[0] == '**':\n            return first ** second\n\n    def expression(operand):\n        result = operand.pop(0)\n        for op, num in zip(operator, operand):\n            result = operation(op, result, num)\n        return result\n\n    return expression(operand)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Define the expressions\n    expression = {\n        '+': lambda x, y: x + y,\n        '-': lambda x, y: x - y,\n        '*': lambda x, y: x * y,\n        '/': lambda x, y: x // y,\n        '**': lambda x, y: x ** y\n    }\n\n    # Define the rules\n    rules = {\n        '+': lambda x: operator.add,\n        '-': lambda x: operator.sub,\n        '*': lambda x: operator.mul,\n        '/': lambda x: operator.floordiv,\n        '**': lambda x: operator.pow\n    }\n\n    # Build the expressions\n    for op in operator:\n        expr = expression[op[0]](operand[-2], operand[-1])\n        operand.pop()\n        operand.pop()\n        operand.append(expr)\n\n    # Evaluate the last expression\n    return rules[operator[-1]](*operand)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    assert len(operator) == len(operand) - 1, \\\n        \"Error: Operator list and operand list has different length.\"\n    assert all(item >= 0 for item in operand), \\\n        \"Error: Operand is not non-negative\"\n    assert any(item in ['+', '-', '*', '/'] for item in operator), \\\n        \"Error: Operator is not a basic algebra operation\"\n    expr = []\n    for index in range(len(operator)):\n        if operator[index] == '+':\n            expr.append(operand[index] + operand[index + 1])\n        elif operator[index] == '-':\n            expr.append(operand[index] - operand[index + 1])\n        elif operator[index] == '*':\n            expr.append(operand[index] * operand[index + 1])\n        elif operator[index] == '/':\n            expr.append(operand[index] // operand[index + 1])\n        elif operator[index] == '**':\n            expr.append(operand[index] ** operand[index + 1])\n        else:\n            raise ValueError(\"Error: Undefined operator\")\n\n    return reduce(lambda x, y: x * y, expr) if len(expr) > 0 else 0", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    assert len(operator) == len(operand)-1, 'Error: operator list is not correct'\n    assert isinstance(operand, list), 'Error: operand is not a list'\n    assert all([isinstance(i, int) for i in operand]), 'Error: operand list has non-integer elements'\n    assert all([isinstance(i, str) for i in operator]), 'Error: operator list has non-string elements'\n    assert all([len(i) == 1 for i in operator]), 'Error: operator list has multiple-character elements'\n    assert all([i[0] in ('+', '-', '*', '**', '//') for i in operator]), 'Error: operator list has incorrect elements'\n    \n    current_result = operand[0]\n    for i in range(1, len(operand)):\n        current_operator = operator[i-1]\n        current_operand = operand[i]\n        current_result = eval(current_operator +'' + str(current_result) +'' + str(current_operand))\n\n    return current_result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == []:\n        return operand\n    else:\n        if operator[0] in [\"-\", \"+\", \"*\", \"/\", \"**\"]:\n            result = 0\n            for i in range(len(operand)):\n                if operator[i] == \"*\":\n                    result += int(operand[i]) * int(operand[i+1])\n                else:\n                    result += int(operand[i]) * int(operand[i+1])\n            return result\n        else:\n            raise ValueError('Invalid operator')", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    len_operand = len(operand)\n    len_operator = len(operator)\n    for i in range(len_operator):\n        # The length of operator list is equal to the length of operand list minus one.\n        # Operand is a list of of non-negative integers.\n        # Operator list has at least one operator, and operand list has at least two operands.\n        op, num = operator[i], operand[i + 1]\n        if num == 0:\n            continue\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            result //= num\n        elif op == '**':\n            result **= num\n    return result\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand) < 2:\n        return 0\n    result = 0\n    if len(operand) == 2:\n        return operand[0]\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            result = result + operand[i]\n        elif operator[i] == '*':\n            result = result * operand[i]\n        elif operator[i] == '-':\n            result = result - operand[i]\n        elif operator[i] == '//':\n            result = result // operand[i]\n        elif operator[i] == '**':\n            result = result ** operand[i]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if not operator:\n        return None\n\n    if not operand:\n        return None\n\n    if len(operator)!= len(operand) - 1:\n        raise ValueError('Length of operator list must be equal to the length of operand list minus one')\n\n    expr = ''\n    temp = []\n    for op, operand in zip(operator, operand):\n        if not operand:\n            continue\n\n        if op == '**':\n            temp.append(operand * operand)\n            continue\n\n        if op == '+':\n            temp.append(operand[0] + operand[1:])\n        elif op == '-':\n            temp.append(operand[0] - operand[1:])\n        elif op == '*':\n            temp.append(operand[0] * operand[1:])\n        elif op == '/':\n            temp.append(operand[0] // operand[1:])\n\n    return temp", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Initialize the result list.\n    result = []\n    # Initialize the operator.\n    operator = operator.split(',')\n    # Initialize the operand.\n    operand = operand.split(',')\n\n    # Check the first element of the operand list, and remove it.\n    if len(operand) == 1:\n        result.append(int(operand[0]))\n    else:\n        # Get the index of operand list that has the maximum value.\n        max_index = max(operand)\n        # Remove the max_index and the last element of operand list.\n        operand.pop()\n        operand.pop()\n        # Append the max_index to the result list.\n        result.append(max_index)\n        # Get the first operator from the operator list.\n        op = operator.pop(0)\n        # Operate the op on the first operand.\n        result.append(do_operation(op, int(operand[0])))\n        # Append the second operand.\n        result.append(int(operand[1]))\n    return sum(result)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # dict for keeping track of which operators and operands have been used already\n    operator_used = {}\n    # dict for keeping track of the result of the expression\n    result = []\n    # The index of the operator list\n    current_op_index = 0\n    # The index of the operand list\n    current_operand_index = 1\n    # The index of the result list\n    current_result_index = 2\n\n    while current_operand_index < len(operand):\n        # Check if the current operator has already been used\n        if operator[current_op_index] in operator_used:\n            return 'Error - Cannot repeat operator'\n\n        # Add the current operator and the current operand to the result\n        result.append(operator[current_op_index] + str(operand[current_operand_index]))\n        # Add the current operator to the operator_used dict\n        operator_used[operator[current_op_index]] = result[current_result_index - 2]\n        # Increment the index of the operand list\n        current_operand_index += 1\n\n        # Check if the operand list has only one element\n        if current_operand_index == len(operand):\n            # Increment the index of the result list\n            current_result_index += 1", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Basic type check\n    if type(operator)!= dict:\n        raise TypeError('operator is not a dictionary.')\n    if type(operand)!= list:\n        raise TypeError('operand is not a list.')\n    if len(operator)!= len(operand) - 1:\n        raise ValueError('operator list and operand list do not match.')\n    if len(operand) < 2:\n        raise ValueError('operand list is not long enough.')\n\n    # Establish a variable to store the result\n    result = 0\n\n    # For every operator in operator, find the two operands, calculate the result, and add \n    # the result to the variable result.\n    for i in range(len(operator)):\n        first_operand = operand[i]\n        second_operand = operand[i + 1]\n        if operator[i] == '+':\n            result += first_operand + second_operand\n        elif operator[i] == '-':\n            result += first_operand - second_operand\n        elif operator[i] == '*':\n            result += first_operand * second_operand\n        elif operator[i] == '//':\n            result += first_operand // second_operand\n        elif operator[i] == '", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if operator and operand:\n        while len(operator) < len(operand) - 1:\n            operand.append(0)\n\n        expression = []\n        for i in range(len(operand)):\n            if operator[i] == '+':\n                expression.append(operand[i] + operand[i + 1])\n            elif operator[i] == '-':\n                expression.append(operand[i] - operand[i + 1])\n            elif operator[i] == '*':\n                expression.append(operand[i] * operand[i + 1])\n            elif operator[i] == '/':\n                expression.append(operand[i] // operand[i + 1])\n            elif operator[i] == '**':\n                expression.append(operand[i] ** operand[i + 1])\n\n        return sum(expression)\n\n    else:\n        raise Exception('Error: one or more arguments missing!')</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    operand = list(map(int, operand))\n\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"The length of operator list is not equal to the length of operand list minus one.\")\n    if not operand:\n        raise ValueError(\"Operand list has no elements.\")\n    if not operator:\n        raise ValueError(\"Operator list has no elements.\")\n\n    op = 0\n    for i in range(0, len(operand)):\n        if operator[i] == '+':\n            op = op + operand[i]\n        if operator[i] == '*':\n            op = op * operand[i]\n        if operator[i] == '-':\n            op = op - operand[i]\n        if operator[i] == '//':\n            op = op // operand[i]\n        if operator[i] == '**':\n            op = op ** operand[i]\n    return op", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Write your code here\n    def cmp(op1, op2):\n        \"\"\"\n        Returns -1 if op1 is smaller than op2, 0 if they are equal, 1 if op1 is bigger than op2.\n        \"\"\"\n        return cmp(op1, op2)\n\n    if operand and len(operator) > 1 and len(operand) > 1:\n        result = int(0)\n        for i in range(0, len(operand)):\n            # sort the operation list, and check if the operation is valid\n            for j in range(0, len(operand)):\n                if operator[j][-1] == operand[i]:\n                    temp = 0\n                    for k in range(0, j):\n                        temp += eval(operator[k][-1]) * operand[k]\n                    if cmp(operator[j][-1], operand[i]) == 1:\n                        temp *= -1\n                    result += temp\n                    break\n            # if the operation is not valid, return 0\n            else:\n                return 0\n        # if the operand list is empty, return 0\n        if len(operand) == 0:\n            return 0\n        return result\n    else:\n        return 0\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand) == 0 or len(operator) == 0:\n        raise ValueError(\"Empty operand/operator list\")\n    elif len(operator) == 1:\n        return operand[0]\n    elif len(operand) == 1:\n        return operator[0](operand[0])\n    else:\n        # Move all operands to the left of the operator list\n        temp_operand = operand\n        operand = []\n        for i in range(len(operator)):\n            operand.append(operator[i](temp_operand[-1]))\n            temp_operand = temp_operand[:-1]\n\n        # If there is no operator in the operator list, return the last operand\n        if len(operator) == 0:\n            return operand[-1]\n\n        # Case 1: Multiplication\n        elif operator[-1] == \"*\":\n            # If the last operator is multiplication, go to the right of the operand list\n            for i in range(len(operand) - 1, 0, -1):\n                temp_operand.insert(0, operand[i])\n                operand = temp_operand\n            # Multiply the last two operands\n            return operand[0] * operand[1]\n\n        # Case 2: Exponentiation\n        elif operator[-1] == \"**\":\n            # If the last operator is exponentiation,", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    operands = [int(x) for x in operand]\n\n    if len(operand) == 0:\n        return None\n    elif len(operand) == 1:\n        return operand[0]\n    elif len(operand) == 2:\n        return operand[0] + operand[1]\n    else:\n        if len(operator) == 0:\n            return None\n        else:\n            result = operands[0]\n            for index in range(0, len(operand) - 1):\n                current_operator = operator[index]\n                next_operand = operand[index + 1]\n                if current_operator == '+':\n                    result += next_operand\n                elif current_operator == '-':\n                    result -= next_operand\n                elif current_operator == '*':\n                    result *= next_operand\n                elif current_operator == '/':\n                    result //= next_operand\n                elif current_operator == '**':\n                    result **= next_operand\n                else:\n                    return None\n            return result</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) < 2 or len(operand) < 2:\n        return 'Invalid expression.'\n    # Write your code here\n    result = 0\n    for i in range(len(operand) - 1):\n        if operand[i] == 0:\n            result = 0\n            return result\n        operator[i] = operator[i].lower()\n        if operator[i] in '*/':\n            result = result * operand[i]\n        elif operator[i] in '+/-':\n            result = result + operand[i]\n        else:\n            result = result ** operand[i]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # The code here will need to be modified to match the string in input\n    # eg: 2 + 3 * 4 - 5 = 9\n    #     a = 2\n    #     b = 3\n    #     c = 4\n    #     d = 5\n    #     e = 9\n\n    if operator == ['+', '*', '-']:\n        a = operand[0]\n        b = operand[1]\n        c = operand[2]\n        d = operand[3]\n\n        result = a + b * c - d\n        return result\n\n    return None", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Write your code here\n    if len(operand) == 1:\n        return operand[0]\n    elif len(operand) == 2:\n        return operator.index(operand[0]) + operator.index(operand[1]) * operand[0]\n    else:\n        for i in range(len(operand) - 2):\n            current = do_algebra(operator, operand[:i] + operand[i + 1:])\n        return operator.index(operand[-1]) + current", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Do nothing if either operator list or operand list is empty.\n    if len(operator) == 0 or len(operand) < 2:\n        return None\n\n    # If the operator list only has one operation, return the result of this operation\n    # on the first two operands.\n    if len(operator) == 1:\n        return operator[0](operand[0], operand[1])\n\n    # Do nothing if there is only one operand left.\n    if len(operand) == 1:\n        return operand[0]\n\n    # Using the last two operands, figure out which operator to use, and then use\n    # that operator to recursively evaluate the expression.\n    last_two_operands = operand[-2], operand[-1]\n    operator_to_use = None\n    for operator_type in operator:\n        if operator_type(last_two_operands) == operand[-1]:\n            operator_to_use = operator_type\n            break\n\n    if operator_to_use is None:\n        return None\n    else:\n        return do_algebra(operator, operand[:-2]) + operator_to_use(last_two_operands)\n\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Write your code here\n    result = 0\n    if (len(operator)!= len(operand)):\n        print('Length of operand list is not equal to operator list')\n        return -1\n    elif (len(operand) < 2):\n        print('Operand list must have at least two numbers')\n        return -1\n    for i in range(len(operand) - 1):\n        if (operator[i] == '+'):\n            result += operand[i+1]\n        elif (operator[i] == '*'):\n            result *= operand[i+1]\n        elif (operator[i] == '-'):\n            result -= operand[i+1]\n        elif (operator[i] == '/'):\n            result /= operand[i+1]\n        elif (operator[i] == '**'):\n            result = result ** operand[i+1]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == [] or operand == []:\n        return None\n\n    # TODO: Consider handling negative numbers in the future\n    operand = list(filter(lambda x: x >= 0, operand))\n    operator = list(map(lambda x: x[0], operator))\n\n    if len(operator) == 0 or len(operand) < 2:\n        return None\n\n    result = []\n    for i in range(len(operand) - 1):\n        current_operand = operand[i]\n\n        # Deal with the first operand\n        if i == 0:\n            if operator[0] == '+':\n                result.append(current_operand)\n            elif operator[0] == '-':\n                if current_operand >= 0:\n                    result.append(current_operand)\n                else:\n                    result.append(-current_operand)\n            elif operator[0] == '*':\n                result.append(current_operand)\n            elif operator[0] == '//':\n                if current_operand > 0:\n                    result.append(current_operand)\n                else:\n                    result.append(0)\n            elif operator[0] == '**':\n                if current_operand > 0:\n                    result.append(current_operand ** 2)\n                else:\n                    result.append(0)\n        else:\n            # Deal with the rest of the operands", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if len(operator) == 0 or len(operand) == 0:\n        return 0\n\n    if len(operator)!= len(operand) - 1:\n        return 0\n\n    def evaluate(operator, operand):\n        \"\"\"\n        Evaluate the given algebric expression with the given operator and operand\n        \"\"\"\n        if operator == '+':\n            return operand[0] + operand[1]\n        elif operator == '*':\n            return operand[0] * operand[1]\n        elif operator == '-':\n            return operand[0] - operand[1]\n        elif operator == '//':\n            return operand[0] // operand[1]\n        elif operator == '**':\n            return operand[0] ** operand[1]\n\n    return reduce(evaluate, operator, operand)</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    def evaluate_expression(operator, operand):\n        \"\"\"\n        Given a list of operators and a list of operands. Evaluate the given expression using \n        the apply function.\n\n        Example:\n        operator = ['+', '-', '**']\n        array = [2, 3, 4]\n        result = evaluate_expression(operator, array)\n        => result = 2**3 - 2\n\n        Note:\n            Operator list has at least one operator, and operand list has at least two operands.\n\n        \"\"\"\n        if len(operand) < 2:\n            return None\n\n        # Initialize the result list.\n        result = []\n\n        # Traverse the list of operands, and add the value of every element in operand to the result.\n        for i in range(len(operand) - 1):\n            result.append(operand[i])\n\n        # Traverse the list of operators, and apply the given operator to every two elements in the result.\n        for i in range(len(operator) - 1):\n            if operator[i] == '+':\n                result.append(result[int(i)] + result[int(i + 1)])\n            elif operator[i] == '-':\n                result.append(result[int(i)] - result[int(i + 1", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def add(a, b):\n        \"\"\"\n        Given two integers, return their sum.\n        \"\"\"\n        return a + b\n\n    def sub(a, b):\n        \"\"\"\n        Given two integers, return their difference.\n        \"\"\"\n        return a - b\n\n    def mul(a, b):\n        \"\"\"\n        Given two integers, return their product.\n        \"\"\"\n        return a * b\n\n    def div(a, b):\n        \"\"\"\n        Given two integers, return their floor division.\n        \"\"\"\n        return a // b\n\n    def pow(a, b):\n        \"\"\"\n        Given two integers, return the exponentiation of a to the power of b.\n        \"\"\"\n        return a ** b\n\n    def func(op, a, b):\n        \"\"\"\n        Given a operation, and two operands, return the result of applying the operation\n        to a and b.\n        \"\"\"\n        if op == '+':\n            return add(a, b)\n        elif op == '-':\n            return sub(a, b)\n        elif op == '*':\n            return mul(a, b)\n        elif op == '//':\n            return div(a, b)\n        elif op == '**':\n            return pow(a, b)\n\n    return func(operator.pop(0), operand.pop", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand)!= len(operator) - 1:\n        return None\n    if len(operand) == 0:\n        return operand[0]\n    else:\n        return reduce(operator.__getitem__, operand)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = operand[0]\n\n    if len(operand) == 1:\n        result = operand[0]\n    elif len(operand) == 2:\n        result = operand[0] + operand[1]\n        for op in operator:\n            if op == '+':\n                result += operand[2]\n            elif op == '-':\n                result -= operand[2]\n            elif op == '*':\n                result *= operand[2]\n            elif op == '/':\n                result /= operand[2]\n            elif op == '**':\n                result = operand[0]**operand[2]\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) == len(operand) - 1:\n        result = 0\n        for i in range(len(operator)):\n            if operator[i] == '+':\n                if i == len(operator) - 1:\n                    result += int(operand[i])\n                else:\n                    result += int(operand[i]) * int(operand[i + 1])\n            elif operator[i] == '-':\n                if i == len(operator) - 1:\n                    result -= int(operand[i])\n                else:\n                    result -= int(operand[i]) * int(operand[i + 1])\n            elif operator[i] == '*':\n                if i == len(operator) - 1:\n                    result *= int(operand[i])\n                else:\n                    result *= int(operand[i]) * int(operand[i + 1])\n            elif operator[i] == '//':\n                if i == len(operator) - 1:\n                    result //= int(operand[i])\n                else:\n                    result //= int(operand[i]) * int(operand[i + 1])\n            elif operator[i] == '**':\n                if i == len(operator) - 1:\n                    result **= int(operand[i])\n                else:\n                    result **= int(operand[i]) * int(operand[i + 1])", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    operand_len = len(operand)\n    operator_len = len(operator)\n    if operator_len!= operand_len - 1:\n        raise ValueError(\"Invalid length for operator and operand list.\")\n    # check the first element in operator list\n    operator_name = operator[0]\n    if operator_name == '+':\n        return sum(operand)\n    elif operator_name == '-':\n        return sum(operand) - operand[0]\n    elif operator_name == '*':\n        return reduce(lambda x, y: x*y, operand)\n    elif operator_name == '//':\n        return reduce(lambda x, y: x//y, operand)\n    elif operator_name == '**':\n        return reduce(lambda x, y: x**y, operand)\n    else:\n        raise ValueError(\"Invalid operator name.\")</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    array = list(map(int, operand))\n    for i in range(len(operator) - 1):\n        if operator[i] == '+':\n            result += array[i]\n        elif operator[i] == '-':\n            result -= array[i]\n        elif operator[i] == '*':\n            result *= array[i]\n        elif operator[i] == '//':\n            result //= array[i]\n        elif operator[i] == '**':\n            result **= array[i]\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if not operand or not operator:\n        return None\n\n    if len(operator)!= len(operand)-1:\n        return None\n\n    # initalize a empty list to store the result\n    result = []\n    # to store the current operator and operand\n    curr_op, curr_op_operand = '', []\n\n    for i in range(len(operand)):\n        # add first operand to the result\n        result.append(operand[i])\n        # get the next operator and operand\n        curr_op, curr_op_operand = operator[i+1], operand[i+1]\n\n        # if the operator is not empty, perform operation\n        if curr_op:\n            if curr_op == '+':\n                result[-1] += curr_op_operand\n            elif curr_op == '-':\n                result[-1] -= curr_op_operand\n            elif curr_op == '*':\n                result[-1] *= curr_op_operand\n            elif curr_op == '/':\n                result[-1] //= curr_op_operand\n            elif curr_op == '**':\n                result[-1] **= curr_op_operand\n\n    return result[-1]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    assert len(operator) == len(operand) - 1\n    if operand[0] < 0:\n        return 0\n\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            for j in range(len(operand) - i - 1):\n                operand[j] += operand[j + 1]\n        elif operator[i] == '-':\n            for j in range(len(operand) - i - 1):\n                operand[j] -= operand[j + 1]\n        elif operator[i] == '*':\n            for j in range(len(operand) - i - 1):\n                operand[j] *= operand[j + 1]\n        elif operator[i] == '**':\n            for j in range(len(operand) - i - 1):\n                operand[j] = math.pow(operand[j], operand[j + 1])\n        elif operator[i] == '//':\n            for j in range(len(operand) - i - 1):\n                operand[j] = int(math.floor(operand[j] / operand[j + 1]))\n\n    return operand[-1]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def swap_operator(operator, operand):\n        \"\"\"\n        Helper method to swap the operator with the last operator of the operand list\n        \"\"\"\n        while len(operator)!= len(operand) - 1:\n            operator.append(operator.pop(0))\n\n    def convert_operand(operand):\n        \"\"\"\n        Helper method to convert an integer to a string.\n        \"\"\"\n        result = []\n        for i in operand:\n            result.append(str(i))\n        return result\n\n    def find_operator_index(operator):\n        \"\"\"\n        Helper method to find the index of the operator in the operator list.\n        \"\"\"\n        for i, elem in enumerate(operator):\n            if elem == operand[0]:\n                return i\n\n    def evaluate(operator, operand):\n        \"\"\"\n        The main method to evaluate the expression\n        \"\"\"\n        for i in operand:\n            if operator[i] == '+':\n                evaluate(operator, operand.pop(i) + operand.pop(0))\n            elif operator[i] == '*':\n                evaluate(operator, operand.pop(i) * operand.pop(0))\n            elif operator[i] == '-':\n                evaluate(operator, operand.pop(i) - operand.pop(0))\n            elif operator[i] == '//':", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # list is the list of operator. The first element of the list is the operator,\n    # and the second is the operand.\n    list = list(map(lambda x: (x[0], x[1]), operator))\n    # num is the list of the operand.\n    num = list(map(lambda x: int(x), operand))\n    # add_num is the list of the result of each operation\n    add_num = []\n    # The basic algebra operations:\n    # Addition ( + )\n    # Subtraction ( - )\n    # Multiplication ( * )\n    # Floor division ( // )\n    # Exponentiation ( ** )\n    # \n    # Operators can only be used in the correct sequence.\n    # For example: 5 + 4 * 3 is wrong, but 5 + 4 * 3 * 2 is correct.\n    # The correct sequence for each operator is determined by using the order of the list operator.\n    # If the first element is -, add_num is added with num.\n    # For example: 5 - 4 * 3\n    # add_num = 5\n    # num = [4, 3]\n    # The correct sequence for each operator is determined by using the order of the list operator.\n    # If the first element is +, add_num is added with num.\n    # For example: 5 + 4 * 3", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    assert len(operator) == len(operand) - 1\n    assert operator and operand\n\n    def make_op(operation):\n        \"\"\"\n        Given a basic algebra operation (addition, subtraction, multiplication, floor division, exponentiation) \n        return a function that evaluates the operation between two integers.\n        \"\"\"\n        def evaluate(x, y):\n            \"\"\"\n            Given two integers x, and y, evaluate the operation between them.\n            \"\"\"\n            return operation(x, y)\n\n        return evaluate\n\n    def evaluate(expression):\n        \"\"\"\n        Given the algebric expression, evaluate and return its evaluation.\n        \"\"\"\n        def evaluate_operand(operand, i):\n            \"\"\"\n            Given an operand, and an index, evaluate and return the value of the operand.\n            \"\"\"\n            if len(operand) == 1:\n                return operand[0]\n            else:\n                return evaluate_operand(operand[1:], i)\n\n        def evaluate_operator(operator, i):\n            \"\"\"\n            Given an operator, and an index, evaluate and return the value of the operator.\n            \"\"\"\n            if i == len(operator) - 1:\n                return evaluate_operand(operand, i) * evaluate_operand(operand, i)\n            else:\n                return evaluate_operand(", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand) <= 1:\n        return operand[0]\n    op = operator[0]\n    for x in operand[1:]:\n        if op == '+':\n            result = x + result\n        if op == '-':\n            result = x - result\n        if op == '*':\n            result = x * result\n        if op == '//':\n            result = int(x) // result\n        if op == '**':\n            result = x ** result\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # This is a copy of the solution posted by the user whose username is  'asgalla'\n    # It is used for comparison and analysis\n\n    # Initialize a new variable result that will hold the result of the operation\n    # Each index of the array result holds an element of the expression\n    result = 0\n\n    # If operand is empty, return 0\n    if len(operand) == 0:\n        return 0\n\n    # Start from the first element of the operand and iterate over it\n    for i in range(0, len(operand)):\n        # If the operand at current index is not 0, then the operator at\n        # the same index of the operator list will be used to get the value\n        # that will be added to the result\n        if operand[i]!= 0:\n            result += eval(operator[i])\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = []\n    i = 0\n    for operator in operator:\n        result.append(operator.get(i))\n        i += 1\n    for operand in operand:\n        result.append(operand)\n    result = [int(x) for x in result]\n    return eval(''.join(result))", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for i in range(0, len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        if operator[i] == '-':\n            result -= operand[i]\n        if operator[i] == '*':\n            result *= operand[i]\n        if operator[i] == '//':\n            result //= operand[i]\n        if operator[i] == '**':\n            result **= operand[i]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    op_count = len(operator)\n    op_list = list(operator)\n    op_list.remove(operator.pop())\n\n    op_stack = []\n\n    # for the start of the expression, we need the first operand\n    op_stack.append(operand.pop(0))\n    stack_count = 1\n\n    while(stack_count < op_count):\n        if op_stack[-1] == op_list[0]:\n            op_stack.append(operand.pop(0))\n            op_list.remove(op_list.pop())\n            stack_count += 1\n        elif op_stack[-1] == op_list[1]:\n            op_stack.append(operand.pop(0))\n            op_list.remove(op_list.pop())\n            op_list.remove(op_list.pop())\n            stack_count += 2\n        else:\n            print(op_stack[-1], op_list[0], op_list[1])\n            break\n\n    return op_stack[0]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # python3 note: eval() is evil\n    return eval('{0} {1} {2}'.format(*operand))", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        raise ValueError('operand and operator has different length.')\n    result = 0\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n        else:\n            raise ValueError(\"operator is wrong, and should be one of \" + str(operator))\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for i in range(len(operand)):\n        if i >= len(operator):\n            break\n        operation = operator[i][0]\n        operand_index = i + 1\n        value = operand[operand_index]\n        if operation == '+':\n            result += operand[operand_index]\n        elif operation == '-':\n            result -= operand[operand_index]\n        elif operation == '*':\n            result *= operand[operand_index]\n        elif operation == '/':\n            result //= operand[operand_index]\n        elif operation == '**':\n            result **= operand[operand_index]\n    return result</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # if the operand list is empty, return zero\n    if len(operand) == 0:\n        return 0\n\n    # if the operator list is empty, the return operand list\n    if len(operator) == 0:\n        return operand\n\n    # if the operator list is only one, then return the value of the last operand\n    if len(operator) == 1:\n        return operand[-1]\n\n    # if the operator list has two operators, then do addition\n    if len(operator) == 2:\n        return operand[-2] + operand[-1]\n\n    # if the operator list has three operators, then do multiplication\n    if len(operator) == 3:\n        return operand[-2] * operand[-1]\n\n    # if the operator list has four operators, then do exponentiation\n    if len(operator) == 4:\n        return operand[-2] ** operand[-1]\n\n    # if the operator list has five operators, then do floor division\n    if len(operator) == 5:\n        return operand[-2] // operand[-1]\n\n    # if the operator list has more than five operators, it is an error\n    print(\"Error: the operand list has too many operands\")\n    return", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    def eval_expression(operand, operator):\n        if not operand:\n            return 0\n        elif len(operand) == 1:\n            return operand[0]\n        elif operator[0] == '+':\n            return sum(operand)\n        elif operator[0] == '-':\n            return sum(operand) - operand[0]\n        elif operator[0] == '*':\n            return sum(map(lambda x: x * operand[0], operand))\n        elif operator[0] == '/':\n            return sum(map(lambda x: x / operand[0], operand))\n        elif operator[0] == '**':\n            return sum(map(lambda x: x ** operand[0], operand))\n        else:\n            return 0\n\n    def eval_expression_lazy(operand, operator):\n        if not operand:\n            return 0\n        elif len(operand) == 1:\n            return operand[0]\n        elif operator[0] == '+':\n            return sum(operand)\n        elif operator[0] == '-':\n            return sum(operand) - operand[0]\n        elif operator[0] == '*':\n            return sum(map(lambda x: x * operand[0], operand))\n        elif operator[0] == '/':\n            return sum(map(lambda x: x / operand[0], operand))\n        elif operator[0] == '**':\n            return sum(map(lambda x: x", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Validate the input\n    assert len(operator) == len(operand) - 1, 'Need at least one operator and two operands'\n    assert all(map(lambda x: x >= 0, operand))\n\n    # Build the expression tree\n    if len(operand) == 2:\n        operator, operand = list(zip(*operator))[0], operand[0]\n\n    left, right = operand[:-1], operand[-1]\n\n    if operator == '+':\n        result = left + right\n    elif operator == '-':\n        result = left - right\n    elif operator == '*':\n        result = left * right\n    elif operator == '//':\n        result = left // right\n    elif operator == '**':\n        result = left ** right\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # TODO: Your code here\n\n    # Initilize our variable\n    answer = 0\n    for item in operand:\n        if item == 0:\n            return 0\n        answer += item\n    return answer", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand) < 2:\n        return operand[0]\n    result = operand[0]\n    for i in xrange(1, len(operand)):\n        op = operator[i]\n        if op == '+':\n            result = result + operand[i]\n        elif op == '-':\n            result = result - operand[i]\n        elif op == '*':\n            result = result * operand[i]\n        elif op == '/':\n            result = result // operand[i]\n        elif op == '**':\n            result = result ** operand[i]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Create result list\n    result = []\n    # Create stack of operand\n    stack = []\n    # Create stack of operator\n    operator_stack = []\n    # Iterate over each element in operator list\n    for i in operator:\n        # Check if operator is unary\n        if i[0] == '^':\n            # Push to the stack\n            operator_stack.append(i)\n            # Append the first operand to result\n            result.append(operand[0])\n            # Pop the top of the stack\n            operator_stack.pop()\n            # Iterate over remaining operands in operand list\n            for j in operand[1:]:\n                # Multiply each operand in operand list by the number in the top of the stack\n                result[-1] = result[-1] * j\n        # Check if operator is binary\n        elif i[0] == '+':\n            # Push to the stack\n            operator_stack.append(i)\n            # Add each operand to the top of the stack\n            for j in operand[1:]:\n                # Push to the stack\n                operator_stack.append(j)\n            # Pop the operator stack\n            operator_stack.pop()\n            # Pop the operand stack\n            operator_stack.pop()\n            # Add all the elements in operand stack\n            result.append(operator_stack[-1] + operator_stack[0])\n        elif i[0] == '-':", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Only contains the operator list\n    list_operator = list(operator)\n    # Only contains the operand list\n    list_operand = list(operand)\n    # If list_operator is empty, or list_operand is empty, the returned value is -1\n    if list_operator == []:\n        return -1\n    # If list_operand is not bigger than list_operator, the returned value is -1\n    if len(list_operand) <= len(list_operator):\n        return -1\n    # If list_operand only contains one element, the returned value is -1\n    if len(list_operand) == 1:\n        return -1\n    # If list_operand only contains one element and list_operator is empty, the returned value is -1\n    if len(list_operand) == 1 and list_operator == []:\n        return -1\n    # The value of the first operand will be the evaluation of the expression\n    val0 = list_operand[0]\n    # The values of the other operands will be the result of the corresponding operators\n    val1 = list_operand[1]\n    if list_operator[0] in ['+', '-']:\n        val1 = do_algebra(list_operator, val1", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Input arrays are not valid.\")\n\n    if len(operator) == 0:\n        raise ValueError(\"The input array is empty.\")\n\n    for i in range(len(operand)):\n        if len(operand) == 1:\n            raise ValueError(\"The input array is empty.\")\n        elif len(operator) == 1:\n            if operand[i] == 0:\n                raise ValueError(\"The input array is empty.\")\n            else:\n                operand[i] = operand[i]\n        elif operator[i] == '+' and i < len(operand) - 1:\n            result += operand[i]\n        elif operator[i] == '-' and i < len(operand) - 1:\n            result -= operand[i]\n        elif operator[i] == '*' and i < len(operand) - 1:\n            result *= operand[i]\n        elif operator[i] == '/' and i < len(operand) - 1:\n            if operand[i] == 0:\n                raise ValueError(\"The input array is empty.\")\n            else:\n                result = result // operand[i]\n        elif operator[i] == '**' and i < len(operand) - 1:\n            if operand[i] == 0:\n                raise ValueError(\"The input array is empty.\")", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Complete this function\n    result = 0\n    if operand == []:\n        raise IndexError(' operand is empty')\n    else:\n        if operator == []:\n            raise IndexError(' operator is empty')\n        else:\n            for i in range(len(operand)-1):\n                if operand[i] == 0:\n                    raise IndexError(' a given operand is 0')\n                elif operator[i] == '+':\n                    result += operand[i+1]\n                elif operator[i] == '-':\n                    result -= operand[i+1]\n                elif operator[i] == '*':\n                    result *= operand[i+1]\n                elif operator[i] == '/':\n                    result /= operand[i+1]\n                elif operator[i] == '**':\n                    result = operand[i] ** operand[i+1]\n                else:\n                    raise ValueError(' operator is invalid')\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand) < 2:\n        return\n\n    if len(operator)!= len(operand) - 1:\n        print(\"ERROR: Length of operator list is not equal to operand list minus one.\")\n        return\n\n    if len(operator) == 0:\n        return\n\n    def op(i, j, operator):\n        if len(operand) == 1:\n            return operand[0]\n        elif i == 0:\n            return operator[j - 1](operand[i], operand[i + 1])\n        else:\n            return op(i - 1, j - 1, operator)\n\n    return reduce(op, range(len(operand)), operand[0])</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if not operand:\n        raise ValueError('Operand is empty')\n\n    if not operator:\n        raise ValueError('Operator is empty')\n\n    length = len(operand) - 1\n    if length < 1:\n        raise ValueError('Operand is empty')\n\n    if len(operator) < length:\n        raise ValueError('Operator is empty')\n\n    result = operand[0]\n    for i in range(1, length + 1):\n        op = operator[i - 1]\n        res = result\n        if op == '+':\n            res += operand[i]\n        elif op == '-':\n            res -= operand[i]\n        elif op == '*':\n            res *= operand[i]\n        elif op == '/':\n            if operand[i]!= 0:\n                res = res // operand[i]\n            else:\n                raise ValueError('Division by zero')\n        elif op == '**':\n            res = res ** operand[i]\n\n        result = res\n\n    return result\n\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # return operand if the two lists are empty\n    if not operand or not operator:\n        return operand\n\n    # return operand if the operator list is empty\n    if not operator:\n        return operand\n\n    # use the operator at the head of the operator list to build the expression\n    if operator[0] == '+' or operator[0] == '-':\n        return do_algebra(operator[1:], do_algebra(operator[1:], operand))\n\n    # use the operator at the head of the operator list to build the expression\n    if operator[0] == '*' or operator[0] == '/':\n        return do_algebra(operator[1:], [do_algebra(operator[1:], int(i)) for i in operand])\n\n    # use the operator at the head of the operator list to build the expression\n    if operator[0] == '**':\n        # return exponentiation\n        return int(pow(do_algebra(operator[1:], operand[0]), do_algebra(operator[1:], operand[1])))\n\n    # if the operator is not a basic operator, return the operand\n    else:\n        return operand\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def build_expression(operand, operator):\n        if len(operand) < 1:\n            return 0\n        if len(operator) < 1:\n            return operand[0]\n\n        # get the first operator\n        op = operator[0]\n        if op == '+':\n            return build_expression(operand[1:], operator[1:]) + operand[0]\n        elif op == '-':\n            return build_expression(operand[1:], operator[1:]) - operand[0]\n        elif op == '*':\n            return build_expression(operand[1:], operator[1:]) * operand[0]\n        elif op == '//':\n            return build_expression(operand[1:], operator[1:]) // operand[0]\n        elif op == '**':\n            return build_expression(operand[1:], operator[1:]) ** operand[0]\n\n    return build_expression(operand, operator)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def is_evaluation(expr):\n        \"\"\"\n        Given a list of integers, returns True if there is no operator or if \n        there is only one operator and the left hand side operand of this operator \n        is zero.\n        \"\"\"\n        if len(expr) == 0:\n            return True\n        elif len(expr) == 1 and expr[0] == 0:\n            return True\n        else:\n            return False\n    def remove_zero(expr):\n        \"\"\"\n        Given a list of integers, remove the first element which is zero.\n        \"\"\"\n        if expr[0] == 0:\n            expr = expr[1:]\n        return expr\n    def get_first_op(expr):\n        \"\"\"\n        Given a list of integers, get the first operator from this list.\n        \"\"\"\n        for item in expr:\n            if item in operator:\n                return item\n\n    # Remove the first operator\n    expr = remove_zero(expr)\n\n    # Get the first operator\n    operator = get_first_op(expr)\n\n    if operator == '+':\n        return sum(expr)\n    elif operator == '-':\n        return sum(expr) * -1\n    elif operator == '*':\n        return sum(expr) * prod(expr)\n    elif operator == '//':\n        return sum(expr) / prod(expr)\n    elif operator == '**':", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Write your code here\n    # List of operator\n    # >>> operator = ['+', '*', '-', '**']\n    # List of operand\n    # >>> array = [2, 3, 4, 5]\n\n    # TODO\n    # Could we use for loop to build the expression tree?\n    # the length of operator should be equal to the length of operand minus one\n    # There is a case that the number of operators is less than the number of operands \n    # Could we use recursive method to evaluate the expression tree?\n    # the first element of operand is the result\n    # When there is only one operator, we need to think about the last operator \n    # could be the operator to be added, to be substracted or to be divided\n\n    # Calculate the result\n    return sum(operand[-1] ** i for i in operand[-2::-1] if i > 0)</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # this is the return value.\n    result = 0\n    # this is the operator that we are currently evaluating.\n    current_op = ''\n    # if we are using addition.\n    if operator[0] == '+':\n        # if we have a second operator.\n        if len(operator) == 2:\n            # evaluate current operator and its operand.\n            result = current_op(operand[0], operand[1])\n            # if we have a third operator.\n            if len(operator) == 3:\n                # evaluate current operator and its operand.\n                result = current_op(result, operand[2])\n            # remove operator from list.\n            operator.pop(0)\n        # if we have a third operator, evaluate it, and its operand.\n        elif len(operator) == 3:\n            result = current_op(operand[0], operand[1])\n            result = current_op(result, operand[2])\n        # if we have a fourth operator, evaluate it, and its operand.\n        elif len(operator) == 4:\n            result = current_op(operand[0], operand[1])\n            result = current_op(result, operand[2])\n            result = current_op(result, operand[3])\n        # if we have a fifth operator, evaluate it, and its operand.\n        elif len(operator) == 5:\n            result = current_op(operand[0],", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # base case\n    if len(operand) <= 1:\n        return operand\n\n    # handle all the different operators\n    if operator == '+':\n        return sum(operand)\n    if operator == '*':\n        return product(operand)\n    if operator == '-':\n        return sum(operand) - operand[0]\n    if operator == '//':\n        return product(operand) / operand[0]\n    if operator == '**':\n        return product(operand) ** operand[0]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # create a temp array to store the result\n    result = []\n\n    # the first element of the operator list will be used as the head of the result list\n    head = operator[0]\n\n    # if the head is '-', we have to find the first element in operand that is not zero\n    if head == '-':\n        while operand[0] == 0:\n            operand.pop(0)\n\n    # if the head is '*' or '/', we have to find the first element in operand that is not zero\n    elif head == '*' or head == '/':\n        while operand[0] == 0:\n            operand.pop(0)\n\n    # if the head is '+' or '-', just find the first element in the operand list\n    else:\n        head = operand[0]\n\n    # add the first element of operand to the result list\n    result.append(head)\n\n    # create a temp array to store the rest of the result list\n    rest = []\n\n    # if the head is '-', and there are still elements in operand, set the head as the second element of operand\n    if head == '-':\n        operand.pop(0)\n        rest.append(0)\n\n    # pop the head from the operator list\n    operator.pop(0)\n\n    # iterate through the operator list and operand list in parallel and", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def do_op(operator, operand, i):\n        if i == 0:\n            return operand[0]\n\n        if operator[i] == '+':\n            return do_op(operator, [do_op(operator, operand, i - 1) + operand[i]], i - 1) + operand[i + 1]\n\n        if operator[i] == '*':\n            return do_op(operator, [do_op(operator, operand, i - 1) * operand[i]], i - 1) * operand[i + 1]\n\n        if operator[i] == '-':\n            return do_op(operator, [do_op(operator, operand, i - 1) - operand[i]], i - 1) - operand[i + 1]\n\n        if operator[i] == '**':\n            return do_op(operator, [do_op(operator, operand, i - 1) ** operand[i]], i - 1) ** operand[i + 1]\n\n        if operator[i] == '//':\n            return do_op(operator, [do_op(operator, operand, i - 1) // operand[i]], i - 1) // operand[i + 1]\n\n    return do_op(operator, operand, len(operator) - 1)</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    res = []\n    tmp = [int(x) for x in operand]\n    for op in operator:\n        if op == '+':\n            res.append(tmp[0] + tmp[1])\n        elif op == '-':\n            res.append(tmp[0] - tmp[1])\n        elif op == '*':\n            res.append(tmp[0] * tmp[1])\n        elif op == '//':\n            res.append(tmp[0] // tmp[1])\n        elif op == '**':\n            res.append(tmp[0] ** tmp[1])\n    return res", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        return None\n\n    result = 0\n    i = 0\n    while i < len(operand):\n        if operand[i] == 0:\n            result = 0\n            break\n        if operand[i]!= 0:\n            if operator[i] == '+':\n                result += operand[i]\n            if operator[i] == '-':\n                result -= operand[i]\n            if operator[i] == '*':\n                result *= operand[i]\n            if operator[i] == '/':\n                result /= operand[i]\n            if operator[i] == '**':\n                result = operand[i] ** operand[i]\n            i += 1\n\n    return result\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) == 0:\n        return operand\n    # print operand\n    if len(operator)!= len(operand) - 1:\n        raise ValueError('Array Operand must have more than 1 element.')\n    # print operator\n    for i in range(len(operand)):\n        if (operator[i][0] == '+'):\n            operand[i] += operand[i + 1]\n        if (operator[i][0] == '-'):\n            operand[i] -= operand[i + 1]\n        if (operator[i][0] == '*'):\n            operand[i] *= operand[i + 1]\n        if (operator[i][0] == '/'):\n            operand[i] /= operand[i + 1]\n        if (operator[i][0] == '**'):\n            operand[i] = operand[i] ** operand[i + 1]\n    return operand\n\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        print(\"Error: operator and operand has different length\")\n        return None\n    operands = [int(x) for x in operand]\n    operator_ = [op + ['x'] for op in operator]\n    answer = operands[0]\n    for i in range(1, len(operand)):\n        if operand[i] == 0:\n            continue\n        for j in range(len(operator)):\n            if operator_[j][0] == '+' and operand[i] >= operands[j] and operand[i] < operands[j + 1]:\n                answer = answer + operands[j] * operand[i] / operands[j + 1]\n            elif operator_[j][0] == '-' and operand[i] >= operands[j] and operand[i] < operands[j + 1]:\n                answer = answer - operands[j] * operand[i] / operands[j + 1]\n            elif operator_[j][0] == '*' and operand[i] >= operands[j] and operand[i] < operands[j + 1]:\n                answer = answer * operands[j] * operand[i] / operands[j + 1]\n            elif operator_[j][0] == '/' and operand[i] >= operands[j] and operand[i] < operands[j + 1]:\n                answer = answer / operands", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == ['+', '*', '-'] and len(operand) > 1 and len(operator) > 1:\n        op_list = list(operator)\n        op_list.sort()\n\n        # Remove the operator at the end of the list\n        op_list.pop()\n\n        # Turn the operand list into a list of tuples with a tuple of operands\n        op_list = [(operand[0], op) for op in op_list] + [(operand[-1], operator[-1])]\n\n        # Transform the operator list into a string\n        op_str =''.join(op_list)\n\n        # Get the expression string\n        result = eval('%s%s' % (op_str, operand[1]))\n\n        return result\n\n    # If the above conditions are not met, return -1\n    return -1\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    assert len(operator) == len(operand) - 1\n    # check if the first operator is a valid one, if not, return 0\n    if operator[0] not in ['+', '-', '*', '**', '//']:\n        return 0\n\n    # check if the expression is balanced, if not, return 0\n    ops = {\n        '+': 0,\n        '-': 0,\n        '*': 0,\n        '**': 0,\n        '//': 0\n    }\n    stack = []\n    for i in range(len(operand)):\n        op = operator[i+1]\n        ops[op] += 1\n        if ops[op] > 1:\n            return 0\n\n        if len(stack) < ops[op]:\n            stack.append(operand[i])\n\n    result = 0\n    for i in range(len(operand)):\n        op = operator[i+1]\n        if op == '+':\n            result += operand[i]\n        elif op == '-':\n            result -= operand[i]\n        elif op == '*':\n            result *= operand[i]\n        elif op == '**':\n            result **= operand[i]\n        elif op == '//':\n            result //= operand[i]\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    list_operand = operand\n    list_operator = operator\n\n    # Create an empty list to store the result.\n    result = []\n\n    # Find the lowest index of the operand list that has two values.\n    # If no two operands exist, result will be empty list\n    index = 0\n    while index < len(list_operand) - 1:\n        if len(list_operand[index]) == 2 and list_operand[index][0]!= '=':\n            break\n        index += 1\n\n    # Create a list of operator that can be used to evaluate the list of operand.\n    # The length of the operand is the first index of the list.\n    operators = []\n    for i in range(index + 1, len(list_operator)):\n        operators.append(list_operator[i][0])\n\n    # Evaluate each operand separately\n    for index in range(index, len(list_operand)):\n        if len(list_operand[index]) == 2:\n            # The operand is a operation\n            if list_operand[index][0] in operators:\n                # Evaluate the operation using the two operand values\n                result.append(eval(str(list_operand[index])))\n                # Remove the operation from the list\n                del list_oper", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Test input\n    if len(operator)!= len(operand) - 1:\n        print('Error: the length of operator and operand list is not correct.')\n        return\n\n    # Compute the result\n    result = 0\n    for i in range(len(operand) - 1):\n        # Keep track of the sign\n        if operator[i] == '-':\n            sign = -1\n        elif operator[i] == '+':\n            sign = 1\n        else:\n            sign = 1\n        # Multiply the current expression\n        result += sign * operand[i] * eval(operand[i + 1])\n\n    # Output result\n    print('Result:', result)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = []\n    for index, value in enumerate(operand):\n        # if the operator list does not have a operator, \n        # use the last operator in the list.\n        if not operator:\n            operator = operator[-1]\n        operator, operand = operator[index], operand[:index] + operand[index+1:]\n        # check if the operator is an exponentiation\n        if operator == '**':\n            # check if the operand is of length 2.\n            if len(operand) == 2:\n                result.append(operator(*operand))\n            else:\n                result.append(operator(*operand[:-1]) ** operand[-1])\n        # check if the operator is multiplication, and operand is of length 2.\n        elif operator == '*':\n            if len(operand) == 2:\n                result.append(operator(*operand))\n            else:\n                result.append(operator(*operand[:-1]) * operand[-1])\n        # check if the operator is division, and operand is of length 2.\n        elif operator == '/':\n            if len(operand) == 2:\n                result.append(operator(*operand))\n            else:\n                result.append(operator(*operand[:-1]) / operand[-1])\n        # check if the operator is addition, and operand is of length", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Write your code here\n    if len(operand) == 1:\n        return operand[0]\n    elif len(operand) == 0:\n        raise ValueError(\"Error: operand list is empty.\")\n    elif len(operator) == 0:\n        raise ValueError(\"Error: operator list is empty.\")\n    else:\n        if operator[0] == '+':\n            return (do_algebra(operator, operand[:-1]) + operand[-1])\n        elif operator[0] == '-':\n            return (do_algebra(operator, operand[:-1]) - operand[-1])\n        elif operator[0] == '*':\n            return (do_algebra(operator, operand[:-1]) * operand[-1])\n        elif operator[0] == '/':\n            return (do_algebra(operator, operand[:-1]) // operand[-1])\n        elif operator[0] == '**':\n            return (operand[-1] ** do_algebra(operator, operand[:-1]))\n        else:\n            raise ValueError(\"Error: Wrong operator.\")", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # your code here\n    # add your solution here\n\n    print \"===========================\"\n    print \"STARTING SCRIPT\"\n    print \"===========================\"\n\n    print operator\n    print operand\n\n    #expr = []\n    #subexpr = []\n    #comp = []\n    #for i in operand:\n    #    expr.append(i)\n    #for i in operator:\n    #    if i == '+':\n    #        subexpr.append(expr[0] + expr[1])\n    #    if i == '-':\n    #        subexpr.append(expr[0] - expr[1])\n    #    if i == '*':\n    #        subexpr.append(expr[0] * expr[1])\n    #    if i == '//':\n    #        subexpr.append(expr[0] // expr[1])\n    #    if i == '**':\n    #        subexpr.append(expr[0] ** expr[1])\n\n    #for i in subexpr:\n    #    comp.append(i)\n\n    print \"===========================\"\n    print \"END SCRIPT\"\n    print \"===========================\"", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand)!= len(operator) - 1:\n        raise ValueError('Invalid Length!')\n    result = 0\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for op in operand:\n        if op == 0:\n            break\n        # Handle negative numbers\n        if op < 0:\n            op *= -1\n\n        # Handle the case when there is only one operand\n        if len(operand) == 1:\n            result += op\n        # Handle when there are two operands and one operator\n        elif len(operand) == 2 and len(operator) == 1:\n            result += op * operator.pop(0)\n        # Handle the general case, where there is one operator and multiple operands\n        elif len(operator) > 0:\n            result += op * operator.pop(0) if op > 0 else op * operator.pop(0) * -1\n        else:\n            break\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        raise Exception(\"Error: Operand is not long enough for given operator.\")\n\n    # If the operand is negative, change the sign of all the operands.\n    if operand[0] < 0:\n        for i in range(1, len(operand)):\n            operand[i] = -operand[i]\n\n    res = 0\n\n    for i in range(len(operand)):\n        if len(operator[i]) == 1:\n            if operator[i][0] == '+':\n                res = res + operand[i]\n            elif operator[i][0] == '-':\n                res = res - operand[i]\n            elif operator[i][0] == '*':\n                res = res * operand[i]\n            elif operator[i][0] == '/':\n                res = res // operand[i]\n            elif operator[i][0] == '**':\n                res = res ** operand[i]\n        else:\n            if len(operator[i]) == 2:\n                if operator[i][0] == '+' and operator[i][1] == '*':\n                    res = res + operand[i] * operand[i + 1]\n                elif operator[i][0] == '-' and operator[i][1] == '*':\n                    res = res - operand[i] * operand[i + 1]\n                elif operator[i][0] == '+' and operator[i][1] == '/':", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # your code here\n    if len(operand)!= len(operator) - 1:\n        raise ValueError('Operation length does not match operand length.')\n\n    # initialization for the final result\n    res = 0\n    for i in range(len(operand) - 1):\n        res = operand[i + 1] * (res ** operator[i + 1])\n\n    return res\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    if len(operand) == 0:\n        return 0\n    elif len(operand) == 1:\n        return operand[0]\n    elif operator[0] == '+':\n        result = operand[0]\n        for i in range(1, len(operand)):\n            result += operand[i]\n        return result\n    elif operator[0] == '-':\n        result = operand[0]\n        for i in range(1, len(operand)):\n            result -= operand[i]\n        return result\n    elif operator[0] == '*':\n        result = operand[0]\n        for i in range(1, len(operand)):\n            result *= operand[i]\n        return result\n    elif operator[0] == '//':\n        result = operand[0]\n        for i in range(1, len(operand)):\n            result //= operand[i]\n        return result\n    elif operator[0] == '**':\n        result = operand[0]\n        for i in range(1, len(operand)):\n            result **= operand[i]\n        return result\n    else:\n        raise ValueError(\"Invalid operator\")", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def evaluate_operation(operator, left_operand, right_operand):\n        \"\"\"\n        Given a operation and two operands, evaluate the operation and return the result.\n\n        Example:\n        evaluate_operation('*', 2, 3)\n        => 6\n\n        \"\"\"\n        if operator == '+':\n            return left_operand + right_operand\n        elif operator == '-':\n            return left_operand - right_operand\n        elif operator == '*':\n            return left_operand * right_operand\n        elif operator == '//':\n            return left_operand // right_operand\n        elif operator == '**':\n            return left_operand ** right_operand\n\n    def evaluate_operand(operand):\n        \"\"\"\n        Given an operand, evaluate the operand and return the result.\n\n        Example:\n        evaluate_operand(2)\n        => 2\n\n        \"\"\"\n        return operand\n\n    if len(operand)!= len(operator) - 1:\n        raise Exception('Invalid operand and operator list')\n\n    left_operand = evaluate_operand(operand[0])\n    right_operand = evaluate_operand(operand[1])\n    for i in range(2, len(operand) + 1):\n        operator", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Write your code here\n    if len(operator) > len(operand):\n        return -1\n\n    if len(operator) == 1:\n        return operand[0]\n\n    if len(operand) == 0:\n        return 0\n\n    # remember the operator position\n    op_pos = operator.index('+')\n\n    result = operand[0]\n\n    for i in range(1, len(operand)):\n        if op_pos == 0:\n            if operator[op_pos - 1] == '+':\n                result = result + operand[i]\n            elif operator[op_pos - 1] == '-':\n                result = result - operand[i]\n        else:\n            if operator[op_pos - 1] == '+':\n                result = result + operand[i]\n            elif operator[op_pos - 1] == '-':\n                result = result - operand[i]\n            elif operator[op_pos - 1] == '*':\n                result = result * operand[i]\n            elif operator[op_pos - 1] == '/':\n                result = result // operand[i]\n            elif operator[op_pos - 1] == '**':\n                result = result ** operand[i]\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand) < 2 or len(operator)!= len(operand) - 1:\n        return None\n    # evaluate the expression step by step\n    result = []\n    for i in range(len(operand) - 1):\n        operation = operator[i]\n        operand1 = operand[i]\n        operand2 = operand[i + 1]\n\n        if operation == '+':\n            result.append(operand1 + operand2)\n        elif operation == '-':\n            result.append(operand1 - operand2)\n        elif operation == '*':\n            result.append(operand1 * operand2)\n        elif operation == '//':\n            if operand2 == 0:\n                return None\n            result.append(operand1 // operand2)\n        elif operation == '**':\n            result.append(operand1 ** operand2)\n\n    # last operation\n    result.append(operand[len(operand) - 1])\n    return result[-1]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    operator_len = len(operator) - 1\n    if operand_len!= operator_len:\n        return None\n\n    stack = []\n    for i in range(0, operand_len):\n        op = operator[i]\n        left = operand[i]\n        if op == '+' or op == '-':\n            stack.append(left)\n        elif op == '*' or op == '/':\n            if left > 0:\n                stack.append(left * right)\n        elif op == '**':\n            if left > 0:\n                stack.append(left ** right)\n\n    if operator_len == 1:\n        return int(stack.pop())\n    elif operator_len == 2:\n        return int(stack.pop())", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == []:\n        raise ValueError('At least one operator is required!')\n    if len(operator)!= len(operand) - 1:\n        raise ValueError('Operator list length must be equal to operand list length minus one')\n\n    # return 0 if operator is not defined\n    if operator in ['+', '*', '-', '/']:\n        return 0\n\n    # convert the operator list to a dict\n    operator_dict = dict(zip(operator, range(len(operator))))\n\n    # convert the operand list to a dict\n    operand_dict = dict(zip(operand, range(1, len(operand) + 1)))\n\n    # build a list of intermediate result\n    intermediate_result = [None for i in operand]\n\n    # find the position of the operator\n    for i in range(len(operand)):\n        if operator_dict[operator[i]] == operand_dict[i]:\n            intermediate_result[i] = operand[i]\n\n    # evaluate the intermediate result\n    for i in range(len(intermediate_result)):\n        if operator_dict[operator[i]] == '+':\n            intermediate_result[i] = intermediate_result[i] + intermediate_result[i + 1]\n        elif operator_dict[operator[i]] == '-':\n            intermediate_result[i] = intermediate_result[i] - intermediate_result[i", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Initialize the result list.\n    result = []\n    # Loop through the operator list\n    for i in range(len(operator) - 1):\n        # Get the operator and operands\n        operator = operator[i]\n        operands = operand[i:]\n        # Add the operands to the result list\n        result += operands\n\n    # Evaluate the final expression\n    return eval(''.join(result))", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    num = len(operand)\n    if len(operator) == num - 1:\n        return eval(''.join(map(lambda x: str(x[0]) + x[1], operator)))\n    else:\n        return 'ERROR'\n\noperator = ['+', '*', '-', '/']\noperand = [2, 3, 4, 5]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Default result is 0\n    result = 0\n\n    # Default operand is the empty list\n    operand = []\n\n    # Sort the operator list in alphabetical order\n    operator_list = sorted(operator)\n\n    # Operator list has at least one operator, and operand list has at least two operands\n    if len(operator_list) < 1 or len(operand) < 2:\n        return 0\n\n    # Base case when there are only one operand\n    if len(operand) == 1:\n        return operand[0]\n\n    # Base case when there are no operators\n    if len(operator_list) == 0:\n        return operand[0]\n\n    # Iterate over the operator list and extract the operator, and the index of the operand list.\n    for operator, index in zip(operator_list, range(len(operand) - 1)):\n        # The index of the last operand in the operand list.\n        last_index = len(operand) - 1\n\n        # Base case when the last operand in the operand list is the index of the operand list.\n        if index == last_index:\n            # Since the last operand is the index of the operand list, we need to adjust the index\n            # and create a new operand list.\n            index += 1\n            operand = list(operand)\n            operand.", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    return int(eval(''.join([str(o) + operator.pop(0) + str(o) for o in operand])))\n\n\noperator = {'+': 'Addition', '-': 'Subtraction', '*': 'Multiplication', '//': 'Floor division', '**': 'Exponentiation'}\noperand = [2, 3, 4, 5]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def _return_func(*args, **kwargs):\n        return 0\n\n    if len(operator)!= len(operand) - 1:\n        raise ValueError('Length of operator list is not equal to the length of operand list minus one.')\n    if not operand:\n        raise ValueError('Operand list has no items.')\n    if not operator:\n        raise ValueError('Operator list has no items.')\n    for i, o in enumerate(operand):\n        if not 0 <= o <= 100:\n            raise ValueError('Operand at index {} is out of range.'.format(i))\n\n    operator = operator + [_return_func]\n    return_value = 0\n    index = 0\n    while index < len(operator) - 1:\n        if operator[index](*operand[index:index + 2], **{'ret': return_value}):\n            index += 2\n        else:\n            if index < len(operator) - 2:\n                return_value = operator[index + 1](*operand[index + 1:index + 3], **{'ret': return_value})\n            else:\n                return return_value\n    return return_value", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    array = []\n    if isinstance(operand, list) and isinstance(operator, list):\n        if len(operand) > 1 and len(operator) > 1:\n            for i in range(len(operand) - 1):\n                array.append(operand[i] + operator[i])\n            array.append(operand[-1])\n        elif len(operand) == 1 and len(operator) == 1:\n            array.append(operand[0] + operator[0])\n        elif len(operand) == 1 and len(operator) > 1:\n            array.append(operand[0] * operator[0])\n        elif len(operand) > 1 and len(operator) == 1:\n            array.append(operand[0] - operand[1])\n        elif len(operand) > 1 and len(operator) > 1:\n            array.append(operand[0] * operand[1])\n    return(array)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Find first operator and first operand.\n    operator_index = operand.index(0)\n    operand_index = operand.index(0, operator_index + 1)\n\n    # Get the first operator and first operand.\n    operator = operator[operator_index]\n    operand = operand[operand_index]\n\n    # For loop for the rest of the expression.\n    # The index of the operator will always be one less than the index of the operand.\n    for i in range(1, len(operand) - 1):\n        if operator == '+':\n            # Add the two operands.\n            operand[i] += operand[i + 1]\n        elif operator == '-':\n            # Subtract the two operands.\n            operand[i] -= operand[i + 1]\n        elif operator == '*':\n            # Multiply the two operands.\n            operand[i] *= operand[i + 1]\n        elif operator == '//':\n            # Floor division.\n            operand[i] //= operand[i + 1]\n        elif operator == '**':\n            # Exponentiation.\n            operand[i] **= operand[i + 1]\n\n    return operand[len(operand) - 1]</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for i in range(len(operand) - 1):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '/':\n            result /= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # \u521d\u59cb\u5316\u8868\u8fbe\u5f0f\uff0c\u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u5bf9\u64cd\u4f5c\u7b26\u8fdb\u884c\u9010\u4e2a\u62c6\u5206\uff0c\u5de6\u8fb9\u90e8\u5206\u4e3a\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u7b26\u7684\u8fd0\u7b97\u5bf9\u8c61\n    exp = []\n    operator.sort()\n    while len(operand)!= 0:\n        if len(operator) == 0:\n            break\n        op = operator.pop(0)\n        if op == '+':\n            exp.append(int(operand.pop(0)) + int(operand.pop(0)))\n        elif op == '-':\n            exp.append(int(operand.pop(0)) - int(operand.pop(0)))\n        elif op == '*':\n            exp.append(int(operand.pop(0)) * int(operand.pop(0)))\n        elif op == '/':\n            exp.append(int(operand.pop(0)) // int(operand.pop(0)))\n        elif op == '**':\n            exp.append(int(operand.pop(0)) ** int(operand.pop(0)))\n        else:\n            print(\"Invalid operator\")\n\n    return exp", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Initialize variables\n    expression = []\n    operator_list = []\n    operand_list = []\n\n    # Get the operator and operand from input\n    for item in operand:\n        expression.append(item)\n\n    for item in operator:\n        operator_list.append(item)\n\n    for item in operand:\n        operand_list.append(item)\n\n    # Order operator\n    for operator_index, operator_item in enumerate(operator_list):\n        for operand_index, operand_item in enumerate(operand_list):\n            if operator_item == operand_item:\n                operand_list.pop(operand_index)\n                break\n        else:\n            break\n    # Find power operator\n    power_index = operand_list.index('**')\n    operand_list.pop(power_index)\n    # Find floor division\n    floor_index = operand_list.index('/')\n    operand_list.pop(floor_index)\n    # Find exponentiation\n    exponentiation_index = operand_list.index('**')\n    operand_list.pop(exponentiation_index)\n    # Find addition\n    addition_index = operand_list.index('+')\n    operand_list.pop(addition_index)\n    # Find subtraction\n    subtraction_index = operand_list.index('-')\n    operand_list.pop(subtraction_index)\n    # Find multiplication\n    multiplication_index = operand_list.", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand) < 2:\n        return -1\n    # Turn operand list into a string and make it lower case.\n    op_str =''.join(map(str, operand))\n    op_str = op_str.lower()\n\n    # Filter operators that can be applied.\n    op_filter = filter(lambda x: x in op_str, operator)\n    # If no operator can be applied, return the operand.\n    if len(op_filter) == 0:\n        return int(op_str)\n\n    # Convert the operator list into a string, and make it lower case.\n    op_str =''.join(map(str, op_filter))\n    op_str = op_str.lower()\n\n    # Find the operands in the operand list.\n    op_loc = op_str.find(' ')\n    if op_loc == -1:\n        # First operand is the whole string.\n        first_operand = op_str\n    else:\n        # Parse the string and get the first operand.\n        first_operand = op_str[0:op_loc]\n        # The rest is the rest of the string and needs to be parsed.\n        second_operand = op_str[op_loc + 1:]\n\n    # Find the operators in the operator list.\n    op_filter = filter(lambda x: x in second_operand,", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # print('operator =', operator)\n    # print('operand =', operand)\n\n    # test the input first\n    assert len(operator) == len(operand) - 1\n    assert all(map(lambda x: type(x) is int, operand))\n    assert all(map(lambda x: type(x) is str, operator))\n    assert all(map(lambda x: x in '+-*///**', operator))\n    assert all(map(lambda x: x not in '//**', operator))\n\n    if len(operator) == 0:\n        # print('No operator')\n        return int(operand[0])\n    else:\n        # print('Start to evaluate the expression')\n        if operand[0] == 0:\n            # print('operand is zero')\n            return 0\n        # first operand\n        # print('operand =', operand)\n        if operator[0] == '+':\n            # print('operator =', operator)\n            return operand[0] + do_algebra(operator[1:], operand[1:])\n        elif operator[0] == '-':\n            # print('operator =', operator)\n            return operand[0] - do_algebra(operator[1:], operand[1:])\n        elif operator[0] == '*':\n            # print('operator =', operator", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for op in operator:\n        # If the current operator is a single character, just evaluate the current\n        # operand, and add or subtract as needed.\n        if len(op) == 1:\n            result = result + operand[operand.index(op)]\n            if op == '-':\n                result = result - operand[operand.index(op)]\n\n        # Otherwise, get the number of characters in the current operator and\n        # multiply it by the value of the current operand.\n        else:\n            n = int(op[len(op) - 1]) * operand[operand.index(op)]\n            result = result + n\n\n    # If the result is negative, flip it and return.\n    if result < 0:\n        return -result\n    else:\n        return result\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand) == 1 and len(operator) == 1:\n        return operand[0]\n\n    if len(operand) == 1 and len(operator) == 0:\n        return operand[0]\n\n    if len(operand) == 0 and len(operator) == 0:\n        return 0\n\n    if len(operand) == 0 and len(operator) == 1:\n        return 0\n\n    temp = []\n    result = 0\n\n    for i in range(0, len(operand)):\n        temp.append(operand[i])\n\n    for i in range(0, len(operator)):\n        if operator[i] == '+':\n            result += temp[i]\n        if operator[i] == '-':\n            result -= temp[i]\n        if operator[i] == '*':\n            result *= temp[i]\n        if operator[i] == '//':\n            result //= temp[i]\n        if operator[i] == '**':\n            result = result ** temp[i]\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = []\n    for op in operand:\n        for i in range(len(operator)):\n            if operator[i] == op:\n                expression.append(operator[i])\n                break\n    for i in range(len(operator)):\n        if expression[i]!= operator[i]:\n            expression.append(operator[i])\n    return sum(expression)\n\noperand = [2, 3, 4, 5]\noperator = ['+', '-', '*', '//', '**']", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # initialize result\n    result = 0\n    # create two empty lists to store the intermediate result\n    list1 = []\n    list2 = []\n\n    # for each of the given operator, perform the operation\n    for index, operation in enumerate(operator):\n        # if the operation is exponentiation ( ** ), get the exponent and the base and perform the operation\n        if operation == '**':\n            # the exponent is the last operand in the operand list and the base is the first operand\n            exponent = operand[-1]\n            base = operand[0]\n\n            # perform exponentiation\n            result = result ** int(exponent)\n\n            # clear the two lists and store the result in the list1\n            list1.clear()\n            list1.append(result)\n\n        # if the operation is floor division ( // ), get the divisor and the dividend and perform the operation\n        elif operation == '//':\n            # the divisor is the last operand in the operand list and the dividend is the first operand\n            divisor = operand[-1]\n            dividend = operand[0]\n\n            # perform floor division\n            result = result // int(divisor)\n\n            # clear the two lists and store the result in the list1\n            list1.clear()\n            list1.append(result)\n\n        # for the rest of the", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # The length of the operator list is equal to the length of the operand list minus one.\n    if len(operator)!= len(operand)-1:\n        raise ValueError(\"The length of operator list is not equal to the length of operand list minus one\")\n\n    if not operator:\n        return 0\n\n    # The first element of the operand list is a number, which does not need to be operated\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n        else:\n            raise ValueError(\"Operator {} is not a basic algebra operation\".format(operator[i-1]))\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # input validation\n    assert operator, \"The operator list is empty.\"\n    assert operand, \"The operand list is empty.\"\n    assert len(operator) == len(operand) - 1, \\\n        \"The length of operator list is not equal to the length of operand list minus one.\"\n    assert all(0 <= op for op in operand), \"The operand list contains negative values.\"\n\n    # initialize the result list\n    result = []\n\n    # initialize the index\n    index = 0\n\n    # while the index is smaller than the length of operator list\n    while index < len(operator):\n\n        # update the index\n        index += 1\n\n        # if the index is larger than the length of operand list\n        # means the last item in the operator list is operator +\n        if index > len(operand):\n\n            # build the final result\n            result.append(operator[-1](*operand))\n\n            # break the while loop\n            break\n\n        # get the operator in the operator list\n        operator_item = operator[index]\n\n        # get the operand from the operand list\n        operand_item = operand[index]\n\n        # append the result of the operation\n        result.append(operator_item(operand_item))\n\n    # return the result\n    return result[0]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Basic requirements for input\n    assert len(operator) == len(operand) - 1, 'The length of operand list does not equal to length of operator minus one.'\n    assert len(operand) >= 2, 'Operand list must be non-empty.'\n\n    # Evaluate if only one operand\n    if len(operand) == 1:\n        return int(operand[0])\n\n    # Build the equation using operator and operand\n    final_result = 0\n    for index, operator_ in enumerate(operator):\n        # Create a new variable for each operator\n        new_variable = \"__\" + str(index)\n\n        # Evaluate if both operand of the operator is available\n        if index == 0 and len(operand) >= 2:\n            current_result = int(operand[0])\n        elif index == len(operator) - 1 and len(operand) >= 1:\n            current_result = int(operand[-1])\n        else:\n            current_result = int(operand[-1])\n\n        # Perform the operation\n        if operator_ == \"+\":\n            final_result += current_result\n        elif operator_ == \"-\":\n            final_result -= current_result\n        elif operator_ == \"*\":\n            final_result *= current_result\n        elif operator_ == \"//\":\n            final_result //= current", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # deal with corner case\n    if len(operator)!= len(operand) - 1:\n        raise Exception('len(operator)!= len(operand) - 1')\n    # deal with the corner case of too few operators\n    elif len(operator) == 0:\n        raise Exception('len(operator) == 0')\n    # deal with the corner case of too few operands\n    elif len(operand) < 2:\n        raise Exception('len(operand) < 2')\n    # deal with the corner case of too many operators\n    elif len(operator) > len(operand):\n        raise Exception('len(operator) > len(operand)')\n    # deal with the corner case of too many operands\n    elif len(operand) > len(operator) + 1:\n        raise Exception('len(operand) > len(operator) + 1')\n\n    # print('operator', operator)\n    # print('operand', operand)\n\n    # check that operator list has at least one operator\n    if len(operator) == 0:\n        raise Exception('len(operator) == 0')\n\n    # check that operand list has at least two operands\n    if len(operand) < 2:\n        raise Exception", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for i in xrange(len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) == 0:\n        return None\n    # check for the empty list, return None\n    if len(operator) == 0:\n        return None\n    # check the length of the lists\n    if len(operand) < 2:\n        return None\n\n    # initialize the result of the expression\n    result = 0\n    # for each operation in the operator list\n    for i in range(len(operator)):\n        if operator[i] == '+' or operator[i] == '-':\n            if operator[i] == '+':\n                # if the next element is '+', add the first and second elements\n                if operator[i+1] == '+':\n                    result += operand[i] + operand[i+1]\n                # if the next element is '-', subtract the first and second elements\n                elif operator[i+1] == '-':\n                    result += operand[i] - operand[i+1]\n            elif operator[i] == '-':\n                # if the next element is '+', subtract the first and second elements\n                if operator[i+1] == '+':\n                    result -= operand[i] + operand[i+1]\n                # if the next element is '-', subtract the first and second elements\n                elif operator[i+1] == '-':\n                    result -= operand[i] - operand[i+1]\n        elif operator[i] == '*' or operator[i] == '//':\n            if", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    output = operand[0]\n    for _ in range(len(operand) - 1):\n        output = eval(operator[operator.index(operand[operand.index(output) + 1])] +'' + output)\n    return output</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = operand[0]\n    for operator in operator:\n        if operand[1] < 0:\n            return None\n        if operator == \"+\":\n            result += operand[1]\n        elif operator == \"-\":\n            result -= operand[1]\n        elif operator == \"*\":\n            result *= operand[1]\n        elif operator == \"/\":\n            result /= operand[1]\n        elif operator == \"**\":\n            result = result ** operand[1]\n    return result\n\n\noperator = {\n    '+': 1,\n    '-': 1,\n    '*': 2,\n    '/': 2,\n    '**': 3\n}", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if operator == ['+', '*', '-']:\n        return [operand[0] + operand[1] for _ in range(len(operand) - 1)]\n\n    if operator == ['+', '*', '/']:\n        return [operand[0] + operand[1] for _ in range(len(operand) - 2)]\n\n    if operator == ['+', '-', '*', '/']:\n        return [operand[0] + operand[1] - operand[2] * operand[3] for _ in range(len(operand) - 4)]\n\n    if operator == ['+', '-', '*', '/', '^']:\n        return [operand[0] + operand[1] - operand[2] * operand[3] // operand[4] ** operand[5] for _ in range(len(operand) - 6)]\n\n    if operator == ['+', '*', '/', '^']:\n        return [operand[0] + operand[1] // operand[2] ** operand[3] for _ in range(len(operand) - 4)]\n\n    if operator == ['+', '*', '-', '/', '^']:\n        return [operand[0] + operand[1] - operand[2] * operand[3] // operand[4] ** operand[5] for _ in range(len(operand) - 6)]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if len(operand)!= len(operator) - 1:\n        raise ValueError('Operand is not long enough for the given operator.')\n\n    # Number of operators\n    n_operator = len(operator)\n\n    # Build the algebric expression\n    result = [0] * n_operator\n    for i in range(n_operator):\n        result[i] = operand[-1 - i]\n        if operator[i, 0] == '+':\n            result[i] += operand[-1 - i + 1]\n        elif operator[i, 0] == '-':\n            result[i] -= operand[-1 - i + 1]\n        elif operator[i, 0] == '*':\n            result[i] *= operand[-1 - i + 1]\n        elif operator[i, 0] == '//':\n            result[i] //= operand[-1 - i + 1]\n        elif operator[i, 0] == '**':\n            result[i] **= operand[-1 - i + 1]\n\n    return result\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    assert len(operator) == len(operand) - 1\n    assert all(x >= 0 for x in operand)\n    assert all(x in operator for x in operator)\n    assert all(x in operand for x in operand)\n\n    # Initialize the empty list for the result.\n    result = []\n    # Variable to hold the sum.\n    sum = 0\n\n    for i in range(len(operand)):\n        # Perform the current operation\n        # The multiplication and division is done before the addition and subtraction, \n        # because they require more steps. If the multiplication or division is done first, \n        # there is no need to shift the value of sum, but if the addition or subtraction is \n        # done first, it will require shift of the value of sum.\n        operation = operator[i]\n        if operation == '+':\n            result.append(sum + operand[i])\n            sum = sum + operand[i]\n        elif operation == '-':\n            result.append(sum - operand[i])\n            sum = sum - operand[i]\n        elif operation == '*':\n            result.append(sum * operand[i])\n            sum = sum * operand[i]\n        elif operation == '/':\n            result.append(sum // operand[i])\n            sum = sum // operand[i]\n        elif operation == '**':\n            result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    op = operator[:]\n    op.pop()\n    op.append('+')\n    res = 0\n    for i in operand:\n        res = eval(op[-2] +'' + op[-1] +'' + str(res) +'' + str(i))\n    return res", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # first check if any of the operands is 0\n    for i in operand:\n        if i == 0:\n            return 0\n    # check if the operands are same or none\n    if len(operand) == 1 or len(operand) == 0:\n        return operand[0]\n    # build the expression\n    expression = []\n    for i in operand:\n        expression.append(i)\n    for i in operator:\n        expression.append(i)\n    # evaluate the expression\n    for i in expression:\n        if i == '+':\n            expression[i] = sum(expression[i + 1:])\n        elif i == '-':\n            expression[i] = sum(expression[i + 1:]) - expression[i + 1]\n        elif i == '*':\n            expression[i] = sum(expression[i + 1:]) * expression[i + 1]\n        elif i == '/':\n            expression[i] = sum(expression[i + 1:]) / expression[i + 1]\n        elif i == '**':\n            expression[i] = sum(expression[i + 1:]) ** expression[i + 1]\n        elif i == '//' and expression[i + 1]!= 0:\n            expression[i] = sum(expression[i + 1:]) // expression[i + 1]\n        else:\n            return float('NaN')\n    return expression[0]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Base case\n    if len(operand) == 1:\n        return operand[0]\n\n    # Call recursively\n    if operator[-1:] == ['+', '*'] and len(operand) >= 3:\n        # Store the current operator in stack\n        operator_stack = [operator[-1]]\n        # Store current expression in stack\n        operand_stack = [operand[-2]]\n\n        # Evaluate the sub expression recursively\n        sub_result = do_algebra(operator_stack, operand_stack)\n        # Store the result in stack\n        operand_stack.append(sub_result)\n\n        # Pop the operator and operand stack\n        operator, operand = operator_stack.pop(), operand_stack.pop()\n\n        # Calculate the result\n        if operator == '+':\n            return operand[0] + operand[1]\n        elif operator == '*':\n            return operand[0] * operand[1]\n        elif operator == '-':\n            return operand[0] - operand[1]\n\n    # Base case\n    if operator[-1:] == ['-', '/'] and len(operand) >= 3:\n        # Store the current operator in stack\n        operator_stack = [operator[-1]]\n        # Store current expression in stack\n        operand_stack = [operand[-2]]\n\n        # Evaluate the sub expression recursively\n        sub_result = do_algebra(operator_stack, operand_stack", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    try:\n        if operator == ['+', '-', '*', '/']:\n            result = 0\n            if len(operand) > 1:\n                for i in operand:\n                    if len(operator) > 1:\n                        result += operator[0](int(i))\n                        operator.pop(0)\n                    else:\n                        result += int(i)\n            else:\n                result = operand[0]\n            return int(result)\n        else:\n            result = 0\n            if len(operand) > 1:\n                for i in operand:\n                    if len(operator) > 1:\n                        result *= operator[0](int(i))\n                        operator.pop(0)\n                    else:\n                        result *= int(i)\n            else:\n                result = operand[0]\n            return int(result)\n\n    except Exception:\n        print('Error')\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    def evaluate(op, operands):\n        \"\"\"\n        This function evaluate the given list of operands, and return the result of \n        the operation specified by the operator.\n\n        Arguments:\n        op: the given operator, which is a tuple, for example ('+', '*').\n        operands: a list of the given operands, which is a list of integers.\n\n        Returns:\n        the evaluation of the algebric expression given the two arguments.\n        \"\"\"\n        def first(op):\n            return op[0]\n\n        def second(op):\n            return op[1]\n\n        if first(op) == '+':\n            return sum(operands)\n        elif first(op) == '-':\n            return sum(operands) - int(second(op))\n        elif first(op) == '*':\n            return sum(operands) * int(second(op))\n        elif first(op) == '//':\n            return sum(operands) // int(second(op))\n        elif first(op) == '**':\n            return sum(operands) ** int(second(op))\n\n    return evaluate(operator, operand)</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            if i+1 < len(operator):\n                result = result + operand[i+1] * operand[i]\n            else:\n                result = result + operand[i]\n        elif operator[i] == '-':\n            if i+1 < len(operator):\n                result = result + operand[i+1] * operand[i]\n            else:\n                result = result + operand[i]\n        elif operator[i] == '*':\n            if i+1 < len(operator):\n                result = result + operand[i] * operand[i+1]\n            else:\n                result = result + operand[i]\n        elif operator[i] == '**':\n            if i+1 < len(operator):\n                result = result + operand[i] ** operand[i+1]\n            else:\n                result = result + operand[i]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == []:\n        return None\n    else:\n        operands = operand[:-1]\n        operator = operator[1:]\n        result = operands[0]\n        for i in range(1,len(operands)):\n            if operator[0] == \"+\":\n                result = result + operands[i]\n            elif operator[0] == \"-\":\n                result = result - operands[i]\n            elif operator[0] == \"*\":\n                result = result * operands[i]\n            elif operator[0] == \"//\":\n                result = result // operands[i]\n            elif operator[0] == \"**\":\n                result = result ** operands[i]\n            else:\n                break\n        return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    assert len(operand) >= 2\n    assert len(operator) >= 1\n    result = operand[0]\n    for i in range(1, len(operand) - 1):\n        result = operator[i - 1](result, operand[i])\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # add one to the length of the operator list.\n    operator.extend(['+'] * (len(operand) - len(operator) - 1))\n    # if there is only one operand, then the operand is the result.\n    if len(operand) == 1:\n        return operand[0]\n    # check if the list contains any operation, if not, just return the first operand.\n    if len(set(operator)) == 1:\n        return operand[0]\n    # here we will store the result of the algebric operation.\n    result = []\n    # print('operator =', operator, 'operand =', operand)\n    # process every operator in the operator list, and operand in the operand list.\n    for i in range(0, len(operator)):\n        # if the operator is a list, we will recursively call this function.\n        if isinstance(operator[i], list):\n            if operator[i][0] in ['+', '-', '*', '/']:\n                if operand[i] >= 0:\n                    if operator[i][0] == '+':\n                        result.append(do_algebra(operator[i][1:], operand[i]))\n                    elif operator[i][0] == '-':\n                        result.append(do_algebra(operator[i][1:], -operand[i]))\n                    elif operator[i]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    def eval(expression, vars):\n        \"\"\"\n        Evaluate an expression of variables with known values.\n        \"\"\"\n        def _apply(func, *operands):\n            return lambda new_values: func(*[new_values.get(x, 0) for x in operands])\n        result = _apply(eval, expression)\n        return result\n\n    # When you add a variable to the operand list, it means that we will add \n    # the variable to the expression.\n    # So the expression could be like: x + y + z\n    def add_var(var, expression):\n        expression = [var] + expression\n        return expression\n\n    def sub_var(var, expression):\n        expression = expression[:var + 1] + expression[var + 1:]\n        return expression\n\n    def mul_var(var, expression):\n        expression = [var] + expression\n        return expression\n\n    def div_var(var, expression):\n        expression = expression[:var + 1] + expression[var + 1:]\n        return expression\n\n    def pow_var(var, expression):\n        expression = expression[:var + 1] + expression[var + 1:]\n        return expression\n\n    # Operator is a list of basic algebra operations, and operand is a list of integers.\n    #", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    assert len(operator) == len(operand) - 1, 'Length of operator is not equal to length of operand'\n    assert all(n > 0 for n in operand), 'Operand is not a list of non-negative integers'\n\n    # store the operator and operand into the dictionary\n    d = dict(zip(operator, operand))\n\n    # first create the stack\n    stack = []\n\n    # evaluate the first operand\n    stack.append(d[operand[0]])\n\n    # the operator is not empty\n    while True:\n\n        # find the operator\n        op = operator[0]\n\n        # the operator is empty\n        if not op:\n            break\n\n        # get the first operand on the stack\n        a = stack.pop(0)\n\n        # no more operand\n        if len(stack) == 0:\n            raise Exception('There are not enough operands to complete the expression.')\n\n        # get the second operand on the stack\n        b = stack.pop(0)\n\n        # calculate the result\n        result = eval('%s(%s, %s)' % (op, a, b))\n\n        # push the result onto the stack\n        stack.append(result)\n\n    return stack[-1]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == []:\n        return None\n    else:\n        result = operand[0]\n        for operator_item in operator:\n            if operator_item == '+':\n                result += operand[1]\n            elif operator_item == '-':\n                result -= operand[1]\n            elif operator_item == '*':\n                result *= operand[1]\n            elif operator_item == '/':\n                result //= operand[1]\n            elif operator_item == '**':\n                result **= operand[1]\n        return result</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    operand = list(map(int, operand))\n    if operator:\n        if len(operator) > len(operand):\n            raise Exception(\"Error: operand list must have at least two elements.\")\n        if not all(map(lambda x: type(x) == int, operand)):\n            raise Exception(\"Error: operand list must only contain integers.\")\n        if not all(map(lambda x: type(x) == str, operator)):\n            raise Exception(\"Error: operator list must only contain string.\")\n        if len(operator) > len(operand):\n            raise Exception(\"Error: operator list must have at least one element.\")\n        if len(operator) < len(operand) - 1:\n            raise Exception(\"Error: operator list must have at least one more element than operand.\")\n\n        # checking if the operator list contains '*', '/', or '**'\n        has_multiply = any(map(lambda x: x == '*' or x == '/' or x == '**', operator))\n        if has_multiply:\n            # if operator list has more than one multiplication\n            if len(operand) % 2!= 0:\n                raise Exception(\"Error: operand list must have an even number of", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) < 2:\n        raise ValueError('operator must contains at least one operator')\n\n    if len(operand) < 2:\n        raise ValueError('operand must contains at least two operands')\n\n    if not isinstance(operand[0], int):\n        raise TypeError('operand must contains non-negative integers')\n\n    # Convert the list of operations to a dict\n    ops = dict(zip(operator, range(len(operator))))\n\n    # Convert the list of numbers to a dict, that has the number as key, and its index \n    # in the operand list as value.\n    nums = {key: value for (key, value) in enumerate(operand)}\n\n    # The final result\n    result = 0\n\n    # Calculate the result of each part\n    for op in ops:\n        index1 = ops[op]\n        index2 = ops[ops[op]]\n\n        if op == '+':\n            result += operand[index1] + operand[index2]\n        elif op == '-':\n            result += operand[index1] - operand[index2]\n        elif op == '*':\n            result += operand[index1] * operand[index2]\n        elif op == '/':\n            result += operand[index1] // operand[index2]\n        elif op == '**':", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand)-1:\n        print('Error: Invalid parameters.')\n    else:\n        result = operand[0]\n        for operator_index in range(1,len(operator)):\n            # Special case: don't use exponentiation when there are no more operand left.\n            if operator[operator_index] == '**':\n                if len(operand) == 1:\n                    result = result * operand[0]\n            elif operator[operator_index] == '+':\n                result = result + operand[operator_index]\n            elif operator[operator_index] == '-':\n                result = result - operand[operator_index]\n            elif operator[operator_index] == '*':\n                result = result * operand[operator_index]\n            elif operator[operator_index] == '//':\n                result = result // operand[operator_index]\n        return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if len(operand)!= len(operator) - 1:\n        return None\n\n    if len(operand) == 0:\n        return None\n    if len(operand) == 1:\n        return operand[0]\n\n    a, b = 0, len(operand) - 1\n    ans = 0\n    for o in operand:\n        for o2, op in zip(operator, operand):\n            if o2 == '+' or o2 == '-':\n                ans += op * o\n            elif o2 == '*':\n                ans *= o\n            elif o2 == '//' or o2 == '**':\n                ans = o // ans\n            elif o2 == '**':\n                ans = o ** ans\n        if a!= b:\n            ans += operator[a] * operand[a]\n        a, b = b, a - 1\n\n    return ans", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        return -1\n    list_of_expression = []\n    for i in range(len(operand)):\n        if (operator[i] == \"+\"):\n            list_of_expression.append(operand[i] + operand[i + 1])\n        elif (operator[i] == \"-\"):\n            list_of_expression.append(operand[i] - operand[i + 1])\n        elif (operator[i] == \"*\"):\n            list_of_expression.append(operand[i] * operand[i + 1])\n        elif (operator[i] == \"//\"):\n            list_of_expression.append(operand[i] // operand[i + 1])\n        elif (operator[i] == \"**\"):\n            list_of_expression.append(operand[i] ** operand[i + 1])\n    return list_of_expression[-1]\n\noperand = [2, 3, 4, 5]\noperator = ['+', '*', '-', '/', '**']", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Do basic type checking\n    if not isinstance(operator, list) or not isinstance(operand, list):\n        return False\n    for each in operand:\n        if not isinstance(each, int) or each < 0:\n            return False\n\n    # Test length of two list is equal\n    if len(operator)!= len(operand) - 1:\n        return False\n\n    # Evaluate the operation\n    return reduce(lambda x, y: x.eval(y), operator, operand)</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    #  return 0 if the operand is None\n    if operand == None:\n        return 0\n\n    #  return 0 if the operand has length one\n    if len(operand) == 1:\n        return 0\n\n    #  return operand if the operator is None\n    if operator == None:\n        return operand\n\n    #  create a list to store the result\n    result = []\n\n    #  append the first operand to the result\n    result.append(operand[0])\n\n    #  iterate over the operator list\n    for operator in operator:\n\n        #  skip over the last operator and go to the next operator if the current operator is the last\n        if operator == operator[-1]:\n            continue\n\n        #  skip over the current operator and go to the next operator if the operand has only one element\n        if len(result) == 1:\n            continue\n\n        #  append the operator to the result\n        result.append(operator)\n\n        #  find the first index of the operand greater than one\n        index = 0\n        while index < len(result):\n            if result[index]!= 1:\n                break\n            index += 1\n\n        #  slice the operand list to the right of index and append it to the result list\n        if index < len(result):\n            result.append(result[index", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if operand[0] <= 0:\n        raise ValueError('Value of first operand is not a positive integer.')\n\n    expression = []\n    for _ in range(len(operator) - 1):\n        if operator[_] == '+':\n            expression.append(operand.pop() + operand.pop())\n        elif operator[_] == '-':\n            expression.append(operand.pop() - operand.pop())\n        elif operator[_] == '*':\n            expression.append(operand.pop() * operand.pop())\n        elif operator[_] == '/':\n            expression.append(operand.pop() // operand.pop())\n        elif operator[_] == '**':\n            expression.append(operand.pop() ** operand.pop())\n\n    return sum(expression)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand)!= len(operator) - 1:\n        return None\n    if len(operand) == 1:\n        return operand[0]\n    result = 0\n    temp_result = 0\n    temp_operand = 0\n    for x in operand:\n        temp_operand += x\n        if operator[0] == '+':\n            temp_result += temp_operand\n        if operator[0] == '-':\n            temp_result -= temp_operand\n        if operator[0] == '*':\n            temp_result *= temp_operand\n        if operator[0] == '/':\n            temp_result /= temp_operand\n        if operator[0] == '**':\n            temp_result = math.pow(temp_result, temp_operand)\n    return temp_result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # noinspection PyShadowingBuiltins\n    result = eval(str(operand) + operator[str(len(operand) - 1)])\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = \"\"\n\n    # if operand list length is zero, the answer is zero\n    if len(operand) == 0:\n        return 0\n\n    # if operator list length is zero, the answer is the first operand\n    if len(operator) == 0:\n        expression = operand.pop(0)\n        return int(expression)\n\n    # recursively process operator list, and operand list\n    for index, operator in enumerate(operator):\n        if operator == '+':\n            expression += operand[index] +''\n        elif operator == '-':\n            expression += operand[index] +''\n        elif operator == '*':\n            expression += operand[index] +''\n        elif operator == '//':\n            expression += operand[index] +''\n        elif operator == '**':\n            expression += operand[index] +''\n    return int(expression.strip())", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if len(operand)!= len(operator) - 1:\n        return None\n\n    if operator[0] == '+':\n        return sum(operand)\n\n    elif operator[0] == '-':\n        return sum(operand) * (-1)\n\n    elif operator[0] == '*':\n        return reduce(lambda x, y: x*y, operand)\n\n    elif operator[0] == '/':\n        return reduce(lambda x, y: x//y, operand)\n\n    elif operator[0] == '**':\n        return reduce(lambda x, y: x**y, operand)</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand)!= len(operator) - 1:\n        return -1\n    result = operand[0]\n    for op in operator:\n        if op[0] in '+-*/':\n            if op[0] == '+':\n                result += operand[len(operand) - 1]\n            elif op[0] == '-':\n                result -= operand[len(operand) - 1]\n            elif op[0] == '*':\n                result *= operand[len(operand) - 1]\n            elif op[0] == '/':\n                result /= operand[len(operand) - 1]\n        elif op[0] == '**':\n            result **= operand[len(operand) - 1]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    operator = operator[0]\n    operand = operand[::-1]\n    output = 0\n    if operator == '+':\n        output += operand[0]\n        operand = operand[1:]\n\n    elif operator == '-':\n        output -= operand[0]\n        operand = operand[1:]\n\n    elif operator == '*':\n        output *= operand[0]\n        operand = operand[1:]\n\n    elif operator == '/':\n        output /= operand[0]\n        operand = operand[1:]\n\n    elif operator == '**':\n        output *= operand[0]\n        operand = operand[1:]\n\n    return output", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Build expression tree\n    # Each operation with operator is a node in the tree\n    # The first operand is the left child of the node, and the second operand is the right child\n    # of the node.\n    # There is only one root node, and the root node is a leaf node.\n    # The result is the evaluation of the expression tree.\n    # The evaluation of each node is the calculation of the left child, the current node,\n    # and the right child. The final evaluation is the result of the root node.\n    # If you want to learn about expression tree, see https://en.wikipedia.org/wiki/Expression_tree\n    # The first element in operator and operand is special, it's used to indicate the last\n    # operation is missing, so I need to add it to the left of the operand list, or to the\n    # right of the operator list.\n    if len(operand) == len(operator) - 1:\n        return operand[-1]\n    root = operator[0]\n    nodes = []\n    for node in operand:\n        if node == 0:\n            break\n        if root == '+':\n            nodes.append(node + nodes[-1])\n        if root == '-':\n            nodes.append(node - nodes[-1])\n        if root == '*':\n            nodes.append(node *", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def evaluate(operator, operand):\n        \"\"\"\n        Build a given expression and evaluate it.\n        \"\"\"\n        result = 0\n        left = len(operand) - 1\n        right = len(operator) - 1\n        while (left >= 0 and right >= 0):\n            if (operator[left] == '+'):\n                result += operand[left]\n                left -= 1\n            elif (operator[left] == '-'):\n                result -= operand[left]\n                left -= 1\n            elif (operator[left] == '*'):\n                result *= operand[left]\n                left -= 1\n            elif (operator[left] == '//'):\n                result /= operand[left]\n                left -= 1\n            elif (operator[left] == '**'):\n                result = math.pow(result, operand[left])\n                left -= 1\n            else:\n                result = math.pow(operand[left], operator[right])\n                right -= 1\n        return result\n    return evaluate(operator, operand)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # if operand is a list or tuple\n    if type(operand) is list:\n        # build an expression by iterating over the first list\n        expression = []\n        for op, val in zip(operator, operand[1:]):\n            # construct the expression and evaluate it using the second operand\n            expression.append(eval('{} {} {}'.format(op, operand[0], val)))\n        # return the evaluated expression\n        return eval(' + '.join(expression))\n    # else\n    else:\n        return operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def check(op):\n        for o in operand:\n            if o < 0:\n                return False\n        return True\n\n    def check(op):\n        return op[0] == '+' or op[0] == '*' or op[0] == '-' or op[0] == '/' or op[0] == '**'\n\n    def convert(num, op):\n        if op[0] == '+':\n            return num + operand.pop(0)\n        if op[0] == '*':\n            return num * operand.pop(0)\n        if op[0] == '-':\n            return num - operand.pop(0)\n        if op[0] == '/':\n            return num // operand.pop(0)\n        if op[0] == '**':\n            return num ** operand.pop(0)\n\n    def evaluate(expr):\n        if expr.isdigit():\n            return int(expr)\n        if expr[0] == '+':\n            return evaluate(expr[1:]) + operand.pop(0)\n        if expr[0] == '-':\n            return evaluate(expr[1:]) - operand.pop(0)\n        if expr[0] == '*':\n            return evaluate(expr[1:]) * operand.pop(0)\n        if expr[0] == '/':\n            return evaluate(expr[1:]) // operand.pop(0)\n        if expr[0] == '", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Write your code here\n    # First check the length of the list.\n    if len(operand)!= len(operator):\n        raise ValueError('Number of operand does not equal number of operators')\n    if len(operand) < 2:\n        raise ValueError('Number of operands is less than two')\n    if len(operator) < 1:\n        raise ValueError('No operator found')\n    # Try to evaluate the expression\n    result = []\n    for i in range(len(operand)):\n        if len(operand) - 1 == i:\n            result.append(0)\n        else:\n            result.append(operand[i + 1])\n        if len(operator) - 1 == i:\n            result.append(0)\n        else:\n            result.append(operator[i])\n    result = eval(' '.join(str(x) for x in result))\n    return result</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if not operator or not operand:\n        return None\n\n    result = None\n    # the operator list has the same length of the operand list\n    while len(operand) > 0:\n        # use the first two elements from the operand list\n        # to build the expression\n        result = op(operator[0], operand[0])\n        operand = operand[1:]\n        # use the first element in the operator list\n        # as the operator for next operand\n        operator = operator[1:]\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand) < 2:\n        return None\n    op = operator[:-1]\n    array = operand[:-1]\n    expr = [op[0]] * (len(operand) - 1) + array\n    expr = expr[:len(op)]\n    expr.append(operator[-1])\n    if op[-1] == '+':\n        for i in range(len(op)):\n            expr[i] += expr[i + 1]\n    elif op[-1] == '-':\n        for i in range(len(op)):\n            expr[i] -= expr[i + 1]\n    elif op[-1] == '*':\n        for i in range(len(op)):\n            expr[i] *= expr[i + 1]\n    elif op[-1] == '/':\n        for i in range(len(op)):\n            expr[i] //= expr[i + 1]\n    elif op[-1] == '**':\n        for i in range(len(op)):\n            expr[i] **= expr[i + 1]\n    else:\n        return None\n    return expr[len(op) - 1]\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # 1. first we check if the operator list is empty\n    if not operator:\n        raise Exception(\"operator is empty!\")\n\n    # 2. we check the operand list length\n    if len(operand) < 2:\n        raise Exception(\"operand is too short!\")\n\n    # 3. create the algebric expression list\n    expression = []\n    # 4. we first create the left side of the expression\n    for i in range(len(operand) - 1):\n        expression.append(operand[i])\n\n    # 5. we create the right side of the expression\n    for i in range(len(operand) - 1, len(operator)):\n        if operator[i] == '+':\n            expression.append(operand[-1])\n        elif operator[i] == '-':\n            expression.append(-operand[-1])\n        elif operator[i] == '*':\n            expression.append(operand[-1] * operand[-1])\n        elif operator[i] == '/':\n            expression.append(operand[-1] // operand[-1])\n        elif operator[i] == '**':\n            expression.append(operand[-1] ** operand[-1])\n        else:\n            raise Exception(\"unknown operator!\")\n\n    # 6. we evaluate the expression and return it\n    return eval(expression)\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    def _build_op(operator, operand):\n        \"\"\"\n        Helper function to build the expression.\n\n        \"\"\"\n        result = []\n        for _ in range(len(operand)):\n            temp = [operand[_],]\n            for i, oper in enumerate(operator):\n                if i < len(operator):\n                    temp.append(oper(temp[-1]))\n            result.append(temp.pop())\n        return result[-1]\n\n    if len(operator) == 0 or len(operand) == 0:\n        return 0\n    elif len(operator) == 1:\n        if operator[0] == '+':\n            return operand[0] + operand[-1]\n        elif operator[0] == '-':\n            return operand[0] - operand[-1]\n        elif operator[0] == '*':\n            return operand[0] * operand[-1]\n        elif operator[0] == '/':\n            return operand[0] // operand[-1]\n        elif operator[0] == '**':\n            return operand[0] ** operand[-1]\n\n    else:\n        return _build_op(operator, operand)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if len(operand) == 0:\n        return 0\n    if len(operator) == 0:\n        return int(operand[0])\n    if len(operand) <= 1:\n        return int(operand[0])\n    if len(operand) > len(operator):\n        print(\"Error: Operator list has more items than the operand list.\")\n        return 0\n    if len(operand) == len(operator):\n        return int(operand[0])\n\n    # do each operator\n    result = 0\n    for i in range(len(operand) - 1):\n        # check for division\n        if operator[i] == '/':\n            result = do_algebra(operator, list(reversed(operand[i+1:]))) / do_algebra(operator, list(reversed(operand[i+1:])))\n        else:\n            result = do_algebra(operator, list(reversed(operand[i+1:]))) + do_algebra(operator, list(reversed(operand[i+1:])))\n\n        # print result\n\n    return result</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"operand has not enough items\")\n    if len(operand) < 2:\n        raise ValueError(\"operator has not enough items\")\n    # The basic operations\n    OP_ADD = ['+', '-']\n    OP_MULT = ['*', '/']\n    OP_EXP = ['**']\n\n    # Prepare a new list that represents the algebric expression.\n    expression_list = []\n    for i in range(0, len(operand)):\n        if i == 0:\n            expression_list.append(operand[i])\n        else:\n            expression_list.append(operator[i - 1])\n    expression_list.append(operator[-1])\n\n    # Do the operation\n    for op in expression_list:\n        if op in OP_ADD:\n            for i in range(0, len(operand)):\n                expression_list[i] = expression_list[i] + operand[i]\n        elif op in OP_MULT:\n            for i in range(0, len(operand)):\n                expression_list[i] = expression_list[i] * operand[i]\n        elif op in OP_EXP:\n            for i in range(0, len(operand)):\n                expression_list[i] = expression_list[i] ** operand[i]\n\n    # Print", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    length = len(operand)\n    if len(operator)!= length - 1:\n        raise ValueError(\"Error: operand has %d elements, but operator has %d elements.\" % (length, len(operator)))\n    if len(operator) == 0:\n        raise ValueError(\"Error: operand has no elements.\")\n    operator = operator[0]\n\n    result = 0\n\n    for index in range(0, length):\n        result += operand[index] * eval(operator[index + 1])\n\n    return result\n\noperand = [2, 3, 4, 5]\noperator = [\"+\", \"*\", \"-\"]\nresult = do_algebra(operator, operand)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n\n    if operator == ['+', '-', '*', '/']:\n        for i in range(len(operand) - 1):\n            if operator[i] == '*':\n                result += operand[i + 1] * operand[i]\n            elif operator[i] == '/':\n                result += operand[i + 1] // operand[i]\n            else:\n                result += operand[i + 1] + operand[i]\n    elif operator == ['+', '-', '*', '/', '**']:\n        for i in range(len(operand) - 1):\n            if operator[i] == '*':\n                result += operand[i + 1] * operand[i]\n            elif operator[i] == '/':\n                result += operand[i + 1] // operand[i]\n            elif operator[i] == '**':\n                result += operand[i + 1] ** operand[i]\n            else:\n                result += operand[i + 1] + operand[i]\n    else:\n        print('You can only use +, -, *, // and **')\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if not operand or not operator:\n        return\n    if len(operator) == len(operand):\n        return\n    else:\n        # for each operator, do a operation\n        result = 0\n        for i in range(len(operand)):\n            # default operand is 1\n            operand[i] = 1\n            for j in range(len(operator)):\n                if operator[j] == '+':\n                    result = result + operand[i]\n                if operator[j] == '-':\n                    result = result - operand[i]\n                if operator[j] == '*':\n                    result = result * operand[i]\n                if operator[j] == '/':\n                    result = result // operand[i]\n                if operator[j] == '**':\n                    result = result ** operand[i]\n                operand[i] = operand[i]\n        return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand) == 1:\n        return operand[0]\n    elif len(operand) == 0:\n        return 0\n    else:\n        if operator[0] in ['+', '-']:\n            return do_algebra(operator[1:], [operand[0], operand[1] + do_algebra(operator[1:], operand[2:])])\n        elif operator[0] in ['*', '/']:\n            return do_algebra(operator[1:], [operand[0] * operand[1], operand[0] / operand[1]])\n        elif operator[0] == '**':\n            return operand[0] ** operand[1]</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if not operand:\n        return 0\n    if not operator:\n        return operand[0]\n    # Create an empty list to store the expression.\n    expr = []\n    # Iterate over the operator list.\n    for operator in operator:\n        # Only handle the first operand.\n        if operand[0] == 0:\n            expr.append(operator)\n        # Iterate over the rest of the operands.\n        else:\n            # Find the first operator.\n            i = 0\n            while i < len(operator):\n                if operator[i] in operand:\n                    expr.append(operator[i])\n                else:\n                    i += 1\n                    break\n            # Calculate the result of the operator and add it to the expression.\n            expr.append(eval(''.join(expr)))\n            # The first operand is done, remove it.\n            operand.pop(0)\n    # Calculate the final result.\n    return eval(''.join(expr))</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for i in range(len(operand) - 1):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) < len(operand):\n        return 0\n    result = 0\n    for i in range(len(operand) - 1):\n        if i > 0:\n            result = operator[operator.index(operand[i])](result, operand[i + 1])\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) < len(operand):\n        return 0\n\n    if operator == []:\n        return 0\n\n    result = 0\n    for i in range(0, len(operand) - 1):\n        if operator[i] == '+':\n            result += operand[i + 1]\n\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n\n        elif operator[i] == '**':\n            result = math.pow(result, operand[i + 1])\n\n        elif operator[i] == '//':\n            result = math.floor(result / operand[i + 1])\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # write your code in Python 3.6\n    if operator == [\"-\"]:\n        return str(operand[::-1])\n    else:\n        result = \"\"\n        for operand1 in operand:\n            for operator1 in operator:\n                result += str(operand1) + operator1\n            result += \" \"\n        result = result.strip(\" \")\n        return eval(result)</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # base case:\n    # when number of operands < operator number\n    if len(operand) < len(operator):\n        return 'Input error: length of operand < operator'\n    # initialise result with 0\n    result = 0\n    # iterate over each element of the operand list and do the operation\n    for i in range(len(operand)):\n        # if there is an operation left over, evaluate the left over operations\n        if operator[i]!= '+':\n            # if there is an operation, get the operator and two operands\n            # e.g. operator[i] -> +, operand[i] -> 2, operand[i+1] -> 3\n            # do the operation, e.g. 2 + 3\n            operator_value = eval(operator[i] + '(' + str(operand[i]) + ','+ str(operand[i+1]) + ')')\n            # replace the left over operation with the result\n            operator[i] = str(operator_value)\n        # add the result to the final result\n        result = result + operand[i]\n    # return the final result\n    return str(result)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for o in operand:\n        result += o\n    for o in operand:\n        result *= o\n    for o in operand:\n        result //= o\n    for o in operand:\n        result **= o\n    for o in operator:\n        if operator[o] == '+':\n            result += operand[len(operand) - 1]\n        elif operator[o] == '-':\n            result -= operand[len(operand) - 1]\n        elif operator[o] == '*':\n            result *= operand[len(operand) - 1]\n        elif operator[o] == '//':\n            result //= operand[len(operand) - 1]\n        elif operator[o] == '**':\n            result **= operand[len(operand) - 1]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    return eval(operator[operator.index(operand[0])] + operand[1:])\n\nimport operator", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        return None\n    expression = \"\"\n    for op, i in zip(operator, range(len(operand))):\n        if op == '+':\n            expression += str(operand[i])\n        elif op == '-':\n            expression += str(operand[i])\n        elif op == '*':\n            expression += '(' + str(operand[i]) + ')'\n        elif op == '//':\n            expression += '(' + str(operand[i]) + ')'\n        elif op == '**':\n            expression += '(' + str(operand[i]) + ')'\n    return eval(expression)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    result = 0\n    for i in range(len(operand)-1):\n        if operand[i] == 0:\n            raise ValueError('Not a valid operator or operand')\n        if operator[i] == '+':\n            result = result + operand[i]\n        elif operator[i] == '-':\n            result = result - operand[i]\n        elif operator[i] == '*':\n            result = result * operand[i]\n        elif operator[i] == '/':\n            result = result // operand[i]\n        elif operator[i] == '**':\n            result = result ** operand[i]\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if not operand or not operator:\n        return 0\n    result = operand[0]\n    for item in operand[1:]:\n        if item == 0:\n            return 0\n        if item < 0:\n            return 0\n        for i in range(len(operator)):\n            if operator[i] == '+':\n                result = result + item\n            elif operator[i] == '-':\n                result = result - item\n            elif operator[i] == '*':\n                result = result * item\n            elif operator[i] == '//':\n                result = result // item\n            elif operator[i] == '**':\n                result = result ** item\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) == 0 or len(operand) == 0:\n        return None\n\n    stack = []\n    for i in operand:\n        stack.append(i)\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack.append(sum(stack[-2:]))\n        elif operator[i] == '-':\n            stack.append(stack[-2:].pop() - stack[-2:].pop())\n        elif operator[i] == '*':\n            stack.append(stack[-2:].pop() * stack[-2:].pop())\n        elif operator[i] == '//':\n            stack.append(stack[-2:].pop() // stack[-2:].pop())\n        elif operator[i] == '**':\n            stack.append(stack[-2:].pop() ** stack[-2:].pop())\n        else:\n            return None\n    return stack[-1]\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # we want to build an expression tree for each possible operator\n    ops = []\n    # get the operator for this expression\n    for op, val in operator.items():\n        ops.append(op)\n\n    # get the operator for the first item in the operand list\n    op = operator[ops[0], operand[0]]\n\n    # need to find the correct index for the second item in the operand list\n    op_index = 0\n\n    for i in range(len(operand)):\n        # if the current operator does not match the current operator in operand list, we need to find the correct index\n        if ops[i]!= op:\n            # find the correct index for this operator and save it\n            op_index = i\n            break\n\n    # add the operator to the expression tree\n    ops.append(op)\n\n    # add the second operand to the expression tree\n    ops.append(operand[op_index])\n\n    # recursively build the expression tree\n    while ops[-1] in operator:\n        # if the current operator is valid, add it to the expression tree\n        ops.append(operator[ops[-1], operand[len(operand)-1]])\n        # remove the last item in the operand list\n        operand.pop(len(operand)-1)\n\n    #", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def execute(op, l):\n        if len(op) == 1:\n            return l[0]\n        elif op[0] == '+':\n            return sum(l)\n        elif op[0] == '-':\n            return sum(l) - l[0]\n        elif op[0] == '*':\n            return reduce(lambda x, y: x * y, l)\n        elif op[0] == '//':\n            return reduce(lambda x, y: x // y, l)\n        elif op[0] == '**':\n            return reduce(lambda x, y: x ** y, l)\n        else:\n            return 0\n\n    return execute(operator, list(map(lambda x: int(x), operand)))\n\noperators = ['+', '-', '*', '/', '**']", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    assert len(operator) == len(operand) - 1, \"The length of operator list is not equal to the length of operand list minus one.\"\n    assert all(int(x) >= 0 for x in operand), \"Operand is a list of non-negative integers.\"\n    assert all(op in operator for op in operand[0]), \"The first element of operand is a list of operators\"\n    assert all(len(x) == len(operand[0]) for x in operand[1:]), \"Operand is a list of operators\"\n\n    result = 0\n\n    for op, op_value in zip(operator, operand[0]):\n        if op == '+':\n            result += op_value\n        elif op == '-':\n            result -= op_value\n        elif op == '*':\n            result *= op_value\n        elif op == '//':\n            result //= op_value\n        elif op == '**':\n            result **= op_value\n\n    for value in operand[1:]:\n        if len(value) == len(operand[0]):\n            for op, op_value in zip(operator, value):\n                if op == '+':\n                    result += op_value\n                elif op == '-':\n                    result -= op_value\n                elif op == '*':\n                    result *=", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # The length of operator list is equal to the length of operand list minus one\n    # Operand is a list of of non-negative integers\n    # Operator list has at least one operator, and operand list has at least two operands\n    # The operators are ['+', '-', '*', '/', '//', '**']\n    if not operand or not operator:\n        print(\"Error: operand and operator cannot be empty.\")\n    if len(operator) < 1 or len(operand) < 2:\n        print(\"Error: operand and operator cannot be empty.\")\n    if operator[0] not in ['+', '-', '*', '/', '//', '**']:\n        print(\"Error: the operator list has illegal element.\")\n    if operand[0] < 0 or operand[1] < 0:\n        print(\"Error: the operand list has illegal element.\")\n\n    expression = []\n    # Start from the last element of the operand list. If the operand is a list, call do_algebra recursively\n    # and convert the result to integer.\n    if not isinstance(operand[-1], int):\n        expression.append(do_algebra(operator, operand[-1]))\n    else:\n        expression.append(operand[-1])\n    for i in reversed(range(len", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # If we haven't encountered the first operator, put a placeholder\n    if len(operand) > 0:\n        # if operator is empty (first iteration), put in a *\n        if len(operator) == 0:\n            operator.append('*')\n            # Put the current operand into the result list.\n            result.append(operand.pop(0))\n        # Check if operator is the same as the last operator, if so, remove it and append the current operand\n        # to result list.\n        elif operator[-1] == operator[-2]:\n            operator.pop()\n            result.append(operand.pop())\n        else:\n            # Append the current operand to result list\n            result.append(operand.pop())\n\n    while len(operand) > 0:\n        # Check if operator is empty (second iteration), put in a *\n        if len(operator) == 0:\n            operator.append('*')\n            # Put the current operand into the result list.\n            result.append(operand.pop(0))\n        # Check if the operator is the same as the last one. If so, remove the operator and append the\n        # current operand to result list.\n        elif operator[-1] == operator[-2]:\n            operator.pop()\n            result.append(operand.pop())", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Write your code here\n\n    if len(operand) == 0:\n        return operand[0]\n    elif len(operator) == 0:\n        return operand[0]\n    elif len(operand) == 1:\n        return operand[0]\n    elif len(operator) == 1:\n        return operand[0]\n\n    if operator[0] == '+':\n        return operand[0] + operand[1]\n    elif operator[0] == '-':\n        return operand[0] - operand[1]\n    elif operator[0] == '*':\n        return operand[0] * operand[1]\n    elif operator[0] == '/':\n        return operand[0] // operand[1]\n    elif operator[0] == '**':\n        return operand[0] ** operand[1]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n\n    if len(operand) > 0:\n        for o1 in operand:\n            result += o1\n            for o2 in operand:\n                if operator[0] == '+':\n                    result += o2\n                elif operator[0] == '-':\n                    result -= o2\n                elif operator[0] == '*':\n                    result *= o2\n                elif operator[0] == '/':\n                    result //= o2\n                elif operator[0] == '**':\n                    result **= o2\n    else:\n        return None\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    #  check length of operand list, make sure it has at least two elements\n    if len(operand) < 2:\n        raise Exception('Not enough arguments!')\n\n    #  check length of operator list, make sure it has at least one operator\n    if len(operator) < 1:\n        raise Exception('Operator list is empty!')\n\n    #  check operator\n    for op in operator:\n        #  make sure the operator is valid\n        if op not in ['+', '-', '*', '**', '/']:\n            raise Exception('Invalid operator!')\n\n    #  convert operators into strings\n    operator = [op.lower() for op in operator]\n\n    #  reverse operator list\n    operator.reverse()\n\n    #  convert operand list to a list of tuples\n    tuple_list = [tuple(operand[i:]) for i in range(0, len(operand))]\n\n    #  get evaluation results\n    result = []\n\n    #  add the first operand to result list\n    result.append(tuple_list[0])\n\n    #  add all the operation results\n    for op in operator:\n        #  get operation result, and add to result list\n        operation = tuple_list[-2] + op + tuple_list[-1]\n        result.append", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == []:\n        return operand[0]\n    if operand == []:\n        return 0\n    if len(operator) > len(operand)-1:\n        return do_algebra(operator[-1:], [operand[0]])\n\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            result //= num\n        elif op == '**':\n            result **= num\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand) < 2 or len(operator) < len(operand) - 1:\n        print('Error: operand and operator list length must be at least two.')\n    else:\n        # build a string based on the two lists\n        expression = ''\n        for element in operand:\n            expression += str(element)\n        for element in operator:\n            expression += element\n        # evaluate the expression\n        result = eval(expression)\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # add zero to the end of operand list\n    if len(operand) < 2:\n        operand.append(0)\n\n    # if operator list is empty, or operand list is one, return the operand\n    if len(operator) == 0 or len(operand) == 1:\n        return operand[0]\n\n    # create an empty list for the result\n    result = []\n\n    for i in range(len(operand)):\n        if i < len(operator) - 1:\n            result.append(operator[i + 1](operand[i], operand[i + 1]))\n        else:\n            result.append(operand[i])\n\n    return result[-1]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    list1 = []\n    list2 = []\n    list3 = []\n    list4 = []\n    list5 = []\n    list6 = []\n    list7 = []\n    list8 = []\n    list9 = []\n    list10 = []\n\n    list1.append(operator[operand[0]])\n    list2.append(operand[0])\n    list3.append(operand[0])\n\n    for x in range(1, len(operand) - 1):\n        list4.append(operand[x])\n        list5.append(operator[operand[x]])\n        list6.append(operator[list4[x]])\n        list7.append(list4[x] + list5[x])\n        list8.append(list6[x] * list7[x])\n        list9.append(list8[x] // list4[x])\n        list10.append(list9[x] ** list3[x])\n\n    return list2[0] + list10[0]\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) == 1:\n        return operand[0]\n\n    if len(operator) == 0 or len(operand) == 0:\n        return None\n\n    if len(operand) == 1:\n        return do_algebra(operator, operand[1:])\n\n    i = 0\n    for op in operator:\n        if op == '+':\n            if i < len(operand) - 1:\n                res = do_algebra(operator, operand[:i+1])\n                res += do_algebra(operator, operand[i+1:])\n            else:\n                res = do_algebra(operator, operand[:i+1])\n            i += 1\n            return res\n        elif op == '-':\n            if i < len(operand) - 1:\n                res = do_algebra(operator, operand[:i+1])\n                res -= do_algebra(operator, operand[i+1:])\n            else:\n                res = do_algebra(operator, operand[:i+1])\n            i += 1\n            return res\n        elif op == '*':\n            if i < len(operand) - 1:\n                res = do_algebra(operator, operand[:i+1])\n                res *= do_algebra(operator, operand[i+1:])\n            else:\n                res = do_algebra(operator, operand[:i+1])\n            i += 1\n            return res"]]