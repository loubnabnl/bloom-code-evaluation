[["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # write your code here\n    result = 0\n    for n in str(num):\n        if n == '0' or n == '1':\n            result += 1\n        if n == '2' or n == '3':\n            result += 1\n        if n == '4' or n == '5':\n            result += 1\n        if n == '6' or n == '7':\n            result += 1\n        if n == '8' or n == '9':\n            result += 1\n        if n == 'A':\n            result += 1\n        if n == 'B':\n            result += 1\n        if n == 'C':\n            result += 1\n        if n == 'D':\n            result += 1\n        if n == 'E':\n            result += 1\n        if n == 'F':\n            result += 1\n    return (result % 2, result // 2)\n</s>", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    count_even = 0\n    count_odd = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    length = len(str(num))\n    if length == 1:\n        return 1, 0\n    i, j = 0, 1\n    while j < length:\n        if str(num)[i] == '0':\n            j += 1\n        else:\n            i += 1\n            j += 1\n            while str(num)[j] == '0':\n                j += 1\n    if i < j:\n        return i, length - j\n    else:\n        return j, length - i", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    num_list = list(num)\n    even_count = 0\n    odd_count = 0\n    for n in num_list:\n        if n % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (-1, -1)\n    count = 0\n    while num:\n        if num % 2:\n            count += 1\n        num //= 2\n    return (count, count)\n\"\"\"\nTakes in a number and returns a tuple with the number of even digits and the number of odd digits in the number.\n\nLets break down what is going on here:\n\nThe first line is only there to test the program. It is only included for testing, but is not required for the\nprogram to work.\nThe second line creates a variable called num. This variable will be assigned a number, which we will\ntest later on.\nThe third line gets a number from the user, by asking for the integer.\nThe fourth line is the main part of the program. This line calls the even_odd_count function.\nThe even_odd_count function returns a tuple. This means that it returns two values. This is different from\nmost other functions in python, which only return one value.\n\nNext we need to understand what the code does in the even_odd_count function.\n\"\"\"", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    while num!= 0:\n        even += num % 2\n        odd += num / 2\n        num /= 10\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            count += 1\n    return count, num", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    result = [0, 0]\n    for digit in str(num):\n        if digit in \"02468\":\n            result[0] += 1\n        elif digit in \"13579\":\n            result[1] += 1\n    return result", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    import math\n    num = str(num)\n    even_count = 0\n    odd_count = 0\n    while len(num) > 0:\n        num, i = num[:-1], num[-1]\n        if i == '2':\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd, even = 0, 0\n    while num:\n        num, rem = divmod(num, 2)\n        if rem == 1:\n            odd += 1\n        else:\n            even += 1\n    return odd, even", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n\n    count = 0\n    while num:\n        num, rem = divmod(num, 10)\n        count += rem\n\n    count += num\n    return (count % 2, count // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    n, rem = num, num % 10\n    if n % 2:\n        return (0, 1)\n    else:\n        return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    result = 0\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        return (0, 0)\n\n    for i in range(0, len(str(abs(num)))):\n        if str(num)[i] in ['1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            if str(num)[i]!= '0' and (i & 1) == 1:\n                result += 1\n            elif str(num)[i]!= '0' and (i & 1) == 0:\n                result += 1\n\n    return (result, result)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    while num:\n        num, rem = divmod(num, 10)\n        if rem % 2:\n            odd += 1\n        else:\n            even += 1\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num%2 == 0 and (num//2)%2 == 0, num//2//2 - num%2//2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n\n    num_str = str(num)\n\n    count_even = 0\n    count_odd = 0\n\n    for digit in num_str:\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if not isinstance(num, int):\n        raise TypeError(\"num must be int\")\n    elif num == 0:\n        return (0, 0)\n    elif num > 0:\n        return (int(num % 10), int(num // 10))\n    else:\n        return (1, int(abs(num) // 10))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2!= 0:\n            count += 1\n        num /= 10\n        even += count\n        odd += 1\n        count = 0\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, 0)\n    return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_1 = 0\n    count_2 = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count_1 += 1\n        else:\n            count_2 += 1\n    return (count_1, count_2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    e_count = 0\n    o_count = 0\n    if num < 0:\n        # If we are dealing with negative numbers, we have to handle it carefully.\n        # We are gonna go through each digit and make sure it is not a negative number.\n        # If it is, we have to make the digit positive.\n        # For instance, -123 ==> 12^3 + 1\n        # -1 ==> 2^0 + 1\n        while num!= 0:\n            num, digit = divmod(num, 10)\n            if digit < 0:\n                digit += 9\n            num = digit\n        # Now num is the number we want.\n        # Now we have to count the number of digits.\n        # If the number is a single digit number, we count it as a single digit.\n        # If the number is a two digit number, we count it as a single digit.\n        # For instance, -123 ==> 12^3 + 1 ==> 12 + 1 ==> 2 + 1 ==> 3\n        # -1 ==> 2^1 + 1 ==> 2 + 1 ==> 3\n        return e_count, o_count\n    # If num is a positive number.\n    # We have to check if the number is even or odd.\n    # If the number is even, we count it as an even digit", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    ev_digits = 0\n    od_digits = 0\n\n    for digit in num:\n        if digit % 2 == 0:\n            ev_digits += 1\n        else:\n            od_digits += 1\n\n    return (ev_digits, od_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    digits = []\n    while num > 0:\n        digits.append(num % 10)\n        num //= 10\n\n    even_count = 0\n    odd_count = 0\n\n    for i, digit in enumerate(digits):\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num == 0:\n        return 0, 0\n    even, odd = 0, 0\n    while num!= 0:\n        digit = num % 10\n        num = num / 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_digit_count = 0\n    odd_digit_count = 0\n\n    while num!= 0:\n        if num % 2 == 0:\n            even_digit_count += 1\n        else:\n            odd_digit_count += 1\n        num = num / 2\n\n    return even_digit_count, odd_digit_count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num < 0:\n        return (0, 0)\n\n    if num == 0:\n        return (1, 0)\n\n    if num % 2 == 0:\n        return (1, 0)\n\n    return (1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd_count = 0\n    even_count = 0\n    if num < 0:\n        return (even_count, odd_count)\n\n    while num!= 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 10\n\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    digits = list(str(num))\n    count_even = 0\n    count_odd = 0\n    while count_even < len(digits):\n        count_even += 1\n        if digits[count_even] % 2 == 0:\n            count_even += 1\n            count_even -= 1\n    while count_odd < len(digits):\n        count_odd += 1\n        if digits[count_odd] % 2 == 1:\n            count_odd -= 1\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count, odd_count = 0, 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return even_count, odd_count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    numStr = str(num)\n    for digit in numStr:\n        if digit % 2 == 0:\n            count += 1\n        else:\n            count += 1\n    return (count, count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Declare variables\n    total = 0\n    even = 0\n    odd = 0\n    # Handle negative numbers\n    if num < 0:\n        num = num * -1\n    # Handle numbers with length of 1\n    if len(str(num)) == 1:\n        return (1, 1)\n    # Handle numbers with length of 2\n    elif len(str(num)) == 2:\n        if int(str(num)) % 2 == 0:\n            even = 1\n        else:\n            odd = 1\n        return (even, odd)\n    # Handle numbers with length of 3\n    elif len(str(num)) == 3:\n        if int(str(num)[0]) % 2 == 0:\n            even += 1\n            odd += 1\n        elif int(str(num)[1]) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        return (even, odd)\n    # Handle numbers with length of 4\n    elif len(str(num)) == 4:\n        if int(str(num)[0]) % 2 == 0:\n            even += 1\n            odd += 1\n        elif int(str(num)[1]) % 2 == 0:\n            even += 1\n            odd += 1\n        elif int(str(num)[2]) % 2 == 0:\n            even += 1\n            odd +=", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num == 0:\n        return (0, 0)\n    elif num > 0:\n        even = 0\n        while num > 0:\n            if num % 2 == 0:\n                even += 1\n            num /= 10\n        return (even, 0)\n    else:\n        odd = 0\n        while num < 0:\n            if num % 2 == 1:\n                odd += 1\n            num *= 10\n        return (0, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_odd = 0\n    count_even = 0\n    for i in range(1, num):\n        if num % 10 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_odd, count_even)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    result = 0\n    count = 0\n    while num!= 0:\n        count += 1\n        result += num % 10\n        num //= 10\n\n    return (result, count - result)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return 0,0\n    elif num < 0:\n        return -1,-1\n    else:\n        ev = 0\n        od = 0\n        while num:\n            od += 1 if num % 10 == 1 else 0\n            num /= 10\n        while num:\n            ev += 1 if num % 10 == 0 else 0\n            num /= 10\n        return ev,od", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(int(num))\n    evens = 0\n    odds = 0\n    while num:\n        num, rem = divmod(num, 2)\n        if rem:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return(len(str(num).split('0')) - 1, len(str(num).split('1')));", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in str(num):\n        count += int(i) if i in ['0', '2'] else 0\n    return (count % 2, count // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    is_even = False\n    num = str(num)\n    if len(num) == 0:\n        return 0, 0\n    for i in num:\n        if i == \"0\":\n            continue\n        else:\n            count += 1\n            if i == \"9\":\n                is_even = True\n            elif i == \"8\":\n                is_even = False\n            if is_even:\n                count += 1\n    return count, count - 1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num % 2 == 0:\n        odd_count = 0\n    else:\n        odd_count = 1\n\n    even_count = int(num) / 2\n\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    i = 0\n    while i < len(str(num)):\n        if num % 10 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num / 10\n        i += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num > 0:\n        if num % 2 == 0:\n            return (1,0)\n        else:\n            return (1,1)\n    else:\n        return (0,0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Number cannot be negative\")\n    if num == 0:\n        return (0, 0)\n    return (int(num % 10) // 2 + num // 10 % 2, num % 10 // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    elif num < 0:\n        return (1, 1)\n    else:\n        return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    total = 0\n    num = str(num)\n    even_count = 0\n    odd_count = 0\n    for c in num:\n        if c in '0123456789':\n            total += int(c)\n            if c in '02468':\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        odd_count = 0\n    else:\n        odd_count = 1\n\n    while True:\n        if num % 10 == 0:\n            num = num / 10\n            even_count = even_count + 1\n        else:\n            num = num / 10\n            odd_count = odd_count + 1\n\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = (0, 0)\n    # while num is not 0:\n    #     if num % 10 is 0 or 5:\n    #         count[0] += 1\n    #     elif num % 10 is 1 or 6:\n    #         count[1] += 1\n    #     num /= 10\n    return count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    temp = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            temp += 1\n    return (temp, num-temp)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return 0, 0\n    num_str = str(num)\n    evens, odds = 0, 0\n    for i in num_str:\n        if i == \"0\":\n            continue\n        elif i.isdigit():\n            if i % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n    return evens, odds", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num_str = str(num)\n    odd_digits = sum(1 for digit in num_str if digit % 2!= 0)\n    even_digits = len(num_str) - odd_digits\n    return (even_digits, odd_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if num % (10 ** i) == 0:\n            count += 1\n    return (count, num // 10 ** count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if (num < 0):\n        return (0, 1)\n    even_count = 0\n    odd_count = 0\n    for i in range(len(str(abs(num)))):\n        if (num % 10 == 0):\n            even_count += 1\n        elif (num % 10!= 0):\n            odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # write your code here\n    count_even = 0\n    count_odd = 0\n\n    # split number into list of digits\n    while num > 0:\n        num = num / 10\n        count_even += 1\n\n    # check if last digit is odd\n    if num % 2 == 1:\n        count_odd += 1\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    while num!= 0:\n        num, rem = divmod(num, 10)\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    def count(num):\n        count_even = 0\n        count_odd = 0\n        while num!= 0:\n            count_even += num % 10\n            num /= 10\n            count_odd += num % 10\n            num /= 10\n        return count_even, count_odd\n    return count(num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num_str = str(num)\n    even_digits = 0\n    odd_digits = 0\n    for digit in num_str:\n        if digit % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n    return (even_digits, odd_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    result = (0, 0)\n    while num!= 0:\n        remainder = num % 2\n        if remainder == 0:\n            result[0] += 1\n        else:\n            result[1] += 1\n        num /= 2\n    return result", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    cnt = 0\n    for digit in str(num):\n        if digit in [2, 4, 6, 8, 0]:\n            cnt += 1\n        if cnt > 1:\n            return cnt, 0\n    return cnt, 1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 1)\n\n    even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        even_count = 0\n    else:\n        even_count = 1\n\n    odd_count = num - (even_count * 2)\n\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    def count(num):\n        \"\"\"Given an integer, count the number of digits in it and return the result.\n        \"\"\"\n        count = 0\n        while num:\n            count += 1\n            num //= 10\n        return count\n    def digit(num):\n        \"\"\"Given an integer, return the number of digit in it.\"\"\"\n        return num % 10\n    def evens(num):\n        \"\"\"Return the number of even digits in a number.\"\"\"\n        if num % 2:\n            return digit(num) + 1\n    def odds(num):\n        \"\"\"Return the number of odd digits in a number.\"\"\"\n        return digit(num) - evens(num)\n    return count(num), evens(num), odds(num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    return (num % 10!= 0, num // 10)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    total_odd = 0\n    total_even = 0\n    count = 0\n    while count < len(str(num)):\n        if num[count] % 2 == 1:\n            total_odd += 1\n        else:\n            total_even += 1\n        count += 1\n    return (total_even, total_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return len(str(num)), len(str(num).replace('1', '').replace('-1', ''))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            count += 1\n        num //= 10\n    return (count, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return len([x for x in str(num) if x in ('2', '4', '6')]), len([x for x in str(num) if x in ('1', '3', '5')])", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = num\n    x = 0\n    y = 0\n    while num!= 0:\n        if num % 2 == 0:\n            x += 1\n        else:\n            y += 1\n        num /= 10\n    return (x, y)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    if num > 0:\n        while num:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num /= 2\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    import math\n    if num < 0:\n        return (-(even_odd_count(-num)), even_odd_count(num))\n\n    odd, even = 0, 0\n    while num > 0:\n        odd, even = even + 1, odd + 1\n        num = num // 10\n\n    return (odd, even)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    if num < 0:\n        num = abs(num)\n\n    while num:\n        count_even += num % 10 in [2, 4, 6, 8]\n        num //= 10\n\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    total = 0\n    count = 0\n    if num < 0:\n        return 0, 0\n    for digit in str(num):\n        digit = int(digit)\n        if digit == 0:\n            count += 1\n        elif digit % 2 == 0:\n            total += 1\n        count += 1\n    return total, count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    temp = []\n    if num == 0:\n        return (0, 0)\n    for i in str(num):\n        temp.append(int(i))\n    ev = 0\n    odd = 0\n    for i in temp:\n        if i % 2 == 0:\n            ev += 1\n        else:\n            odd += 1\n    return (ev, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    print(type(num))\n\n    count1 = 0\n    count2 = 0\n    for i in num:\n        if i % 2 == 0:\n            count1 += 1\n        else:\n            count2 += 1\n\n    return (count1, count2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return -1\n    else:\n        even = 0\n        odd = 0\n        while num > 0:\n            if num % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            num //= 10\n        return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    elif num < 0:\n        return even_odd_count(-num)\n    else:\n        even = 0\n        odd = 0\n        while num!= 0:\n            if num % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            num //= 2\n        return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num < 0:\n        return (even_odd_count(-num)[1], even_odd_count(-num)[0])\n\n    result = 0\n    for i in range(0, num):\n        if num % i == 0:\n            result += 1\n        else:\n            result += 0\n\n    return (result, num - result)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    count += 1 if num % 2 == 0 else 0\n    count += 1 if num % 5 == 0 else 0\n    count += 1 if num % 3 == 0 else 0\n    return count, count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    # number of even numbers\n    count_evens = 0\n    # number of odd numbers\n    count_odds = 0\n    # iterate through the digits of the number\n    for digit in str(num):\n        # if the number is odd, increment the count of odd numbers\n        if digit % 2!= 0:\n            count_odds += 1\n        # if the number is even, increment the count of even numbers\n        else:\n            count_evens += 1\n    return (count_evens, count_odds)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n\n    even = 0\n    odd = 0\n\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n        num /= 10\n\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    # idea:\n    # even digits are 0, 2, 4, 6, 8\n    # odd digits are 1, 3, 5, 7, 9\n    # 2.5.4\n    # a prime number is divisible by only itself and 1\n    # a prime number = (0 + 1)*(1 + 2)*(3 + 4)*...*(i + i)*(i + 1)*(i + 2)*...*(n + n)\n    # a prime number = (1 + 2)*(3 + 4)*...*(i + i)*(i + 1)*(i + 2)*...*(n + n)\n    # a prime number = (i + i)*(i + 1)*(i + 2)*...*(n + n)\n    # a prime number = (i + i)*(i + 1)*(i + 2)*...*(n + n) / 2\n    # a prime number = (i + i)*(i + 1)*(i + 2)*...*(n + n) / 2 + (i + i)*(i + 1)*(i", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 1\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            count += 1\n        num //= 10\n\n    return (count, len(str(num)) - count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    count = 0\n    while num!= 0:\n        count += 1\n        if num % 2 == 0:\n            count += 1\n        num /= 2\n    return (count, count - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    even_digits = 0\n    odd_digits = 0\n    for digit in num:\n        if digit % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n    return (even_digits, odd_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if (num == 0):\n        return (0, 0)\n\n    if (num < 0):\n        return (-1, -1)\n\n    num = abs(num)\n    even, odd = 0, 0\n    while num > 0:\n        if (num % 2 == 0):\n            even += 1\n        else:\n            odd += 1\n        num = num / 2\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # odd = [item for item in list if item % 2 == 1]\n    # even = [item for item in list if item % 2 == 0]\n    # return (len(odd), len(even))\n\n    if num == 0:\n        return (0, 0)\n\n    if num > 0:\n        even = num % 2\n        odd = num / 2\n    else:\n        even = num / 2\n        odd = num % 2\n\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    odd = 0\n    even = 0\n    while num!= 0:\n        if num % 10 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    count = 0\n    for i in range(len(str(num))):\n        if i % 2 == 0:\n            count += 1\n        else:\n            count += 1\n    return (count, count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 2\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Improvements - Add test cases for large numbers.\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 0)\n    half = num // 10\n    if num % 10 % 2 == 0:\n        return (1, half)\n    return (half + 1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num < 0:\n        num = abs(num)\n    l = len(str(num))\n\n    even = 0\n    odd = 0\n\n    for i in range(0, l):\n        if str(num)[i] == '0':\n            continue\n        elif str(num)[i] == '2':\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    x = str(num)\n    # count digits of number\n    len_x = len(x)\n    # initialize counter\n    count = 0\n    for i in range(len_x):\n        if x[i] == '0':\n            count += 1\n        elif x[i] in ('1', '2', '3', '4', '5', '6', '7', '8', '9'):\n            count += 1\n        elif x[i] in ('2', '4', '6', '8', '10'):\n            count += 2\n        elif x[i] in ('3', '5', '7', '9'):\n            count += 1\n\n    # tuple to return\n    tuple = (count, len_x - count)\n\n    return tuple", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd_count = 0\n    even_count = 0\n    for digit in str(num):\n        if digit % 2!= 0:\n            odd_count += 1\n        else:\n            even_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        return (0, 0)\n    if num < 10:\n        return (1, 1)\n    return ((num % 10) + even_odd_count(num / 10))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    odd, even = num, 0\n    while num > 0:\n        even += int(num % 10)\n        num //= 10\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num > 0:\n        return (1, 1)\n    elif num == 0:\n        return (1, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    def count(num):\n        count = 0\n        while num > 0:\n            if num % 2 == 0:\n                count += 1\n            else:\n                count -= 1\n            num //= 2\n        return count\n    return (count(num), count(num) % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    num_str = str(num)\n\n    count_even = 0\n    count_odd = 0\n\n    for i in num_str:\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num >= 0:\n        count_even = 0\n        count_odd = 0\n        while num!= 0:\n            count_even += num % 2\n            count_odd += num / 2\n            num = num / 2\n        return (count_even, count_odd)\n    else:\n        return (1, -1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n    evens = 0\n    odds = 0\n\n    while num:\n        if num % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n        num //= 2\n\n    return (evens, odds)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = []\n    for digit in str(num):\n        if digit % 2 == 0:\n            count.append(0)\n        else:\n            count.append(1)\n    return (sum(count), len(count))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    num = abs(num)\n    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 10\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    if num < 0:\n        return (0, 0)\n\n    while num!= 0:\n        count += 1\n        if num % 10!= 0:\n            count += 1\n            num /= 10\n        else:\n            num = 0\n\n    return (count, count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd_count = 0\n    even_count = 0\n\n    while num:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    import math\n    if num == 0:\n        return (0, 0)\n\n    cnt_even = 0\n    cnt_odd = 0\n    while num > 0:\n        num, rem = divmod(num, 2)\n        cnt_even += 1 if rem == 0 else 0\n        cnt_odd += 1 if rem == 1 else 0\n\n    cnt_even += 1 if num == 0 else 0\n    cnt_odd += 1 if num == 1 else 0\n\n    return (cnt_even, cnt_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd = 0\n    even = 0\n    for x in str(num):\n        if x % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            count += 1\n        else:\n            count += 1\n    return count, count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError('Input must be positive.')\n\n    even = 0\n    odd = 0\n\n    while num:\n        if num % 2:\n            odd += 1\n        else:\n            even += 1\n        num /= 2\n\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        num = abs(num)\n        even = even_odd_count(num//10)[0] + 1\n        odd = even_odd_count(num%10)[0]\n        return (even, odd)\n    else:\n        num = num + 10**len(str(num))\n        even = even_odd_count(num//10)[0] + 1\n        odd = even_odd_count(num%10)[0]\n        return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    even = 0\n    odd = 0\n    for digit in num:\n        if digit == '0':\n            pass\n        elif digit == '2':\n            even += 1\n        elif digit == '4':\n            odd += 1\n        elif digit == '6':\n            even += 1\n        elif digit == '8':\n            odd += 1\n        else:\n            even += 1\n            odd += 1\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Note: this solution uses a simple loop, if you want a better one, check\n    #   this post out: https://codereview.stackexchange.com/questions/385290/counting-even-and-digit-in-a-number\n\n    # The number of even and odd digits in num\n    even = 0\n    odd = 0\n\n    # Loop over every digit in num\n    while num:\n        # Take out the digit\n        digit = num % 10\n\n        # Is it even or odd?\n        if digit % 2:\n            odd += 1\n        else:\n            even += 1\n\n        # Divide num by 10\n        num //= 10\n\n    # Return the tuple\n    return (even, odd)\n</s>", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    num = str(num)\n    even_count = 0\n    odd_count = 0\n    for i in num:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return 0, 0\n\n    i = 0\n    while i < len(str(num)):\n        if num % 10 == 0:\n            num /= 10\n            i += 1\n            even += 1\n            continue\n        else:\n            num /= 10\n            odd += 1\n            i += 1\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_num, odd_num = 0, 0\n    # Get the number of digits for convenience\n    num = str(num)\n    # We need to convert number to string since we want to count the number of characters\n    for i in range(len(num)):\n        # We convert the number into two digit numbers for easier comparison\n        digit = int(num[i])\n        # If the number is odd we increment odd_count else we increment even_count\n        if digit % 2!= 0:\n            odd_num += 1\n        else:\n            even_num += 1\n    return (even_num, odd_num)\n</s>", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n    even = 0\n    odd = 0\n    while num!= 0:\n        num, rem = divmod(num, 10)\n        if rem % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    even = 0\n    odd = 0\n    for digit in num:\n        if digit.isdigit():\n            if digit % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Do you have any idea? What would be the most pythonic way?\n    return (len(str(num)) - sum(1 for i in str(num) if i%2==0), sum(1 for i in str(num) if i%2==1))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    # split the digits into a list\n    num_list = num.split(' ')\n\n    # convert all the digit to integer\n    num_list = [int(n) for n in num_list]\n\n    # count number of even and odd digits\n    even_count = 0\n    odd_count = 0\n    for n in num_list:\n        if n % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    # return the tuple\n    return(even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # test case\n    print(even_odd_count(-12))\n    # test case\n    print(even_odd_count(123))\n\n    # now build the function\n    def even_odd_count(num):\n        count_even = 0\n        count_odd = 0\n        while num > 0:\n            count_even += num % 10\n            num /= 10\n            count_odd += num % 10\n            num /= 10\n        return (count_even, count_odd)\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 1)\n    return (1 if num % 2 == 0 else 2, 1 if num % 2!= 0 else 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        sign = -1\n        num = abs(num)\n    else:\n        sign = 1\n    count_even, count_odd = 0, 0\n    while num!= 0:\n        num, rem = divmod(num, 10)\n        if rem == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (sign * count_even, sign * count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    elif num < 0:\n        return (0, 1)\n    else:\n        ones = 0\n        for digit in str(num):\n            if digit == '1':\n                ones += 1\n            else:\n                break\n\n        return (ones, len(str(num)) - ones)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 10 == 0:\n        return (0, 1)\n    else:\n        return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    total_odds = 0\n    total_evens = 0\n    for i in range(len(str(num))):\n        if str(num)[i].isdigit():\n            if i % 2 == 0:\n                total_evens += 1\n            else:\n                total_odds += 1\n    return (total_evens, total_odds)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n\n    sum_even, sum_odd = 0, 0\n    for digit in str(num):\n        if digit == '0':\n            continue\n        elif digit == '1':\n            sum_odd += 1\n        else:\n            sum_even += 1\n\n    return (sum_even, sum_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if not num:\n        return (0, 0)\n    return (sum(1 for _ in num) % 2, num.count(num[-1]) % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if str(num)[i] in ['0', '1']:\n            count += 1\n            if count % 2 == 0:\n                count -= 1\n            else:\n                count += 1\n    return count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num > 0:\n        num = num - 1\n    else:\n        return (1, 1)\n\n    one = (10 ** len(str(num)))\n\n    return one // (num * 10 ** len(str(num))) % 2, one % (num * 10 ** len(str(num)))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd = 0\n    even = 0\n    while num:\n        if num % 10 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    count = 0\n    for i in xrange(len(str(num))):\n        if str(num)[i].isdigit():\n            count += 1\n        if count % 2 == 0:\n            count += 1\n        elif count % 2!= 0:\n            count += 1\n        else:\n            break\n    return (count, count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    digits = [int(i) for i in str(num)]\n    even_digits = 0\n    odd_digits = 0\n    for digit in digits:\n        if digit % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n    return (even_digits, odd_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    else:\n        return (1, int(num % 10))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 10 == 0) + (num % 10 > 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    # Convert integer to string and store it in a list\n    str_list = str(num)\n    # Divide the list into digits and store in a list\n    digit_list = str_list.split('')\n    # Reversing the list and storing in a list\n    rev_digit_list = digit_list[::-1]\n    # Initialize an empty list to store even and odd counts\n    even_count = []\n    odd_count = []\n    for n in rev_digit_list:\n        # n is an odd number if it's divisible by 2 but not by 4\n        if n % 2!= 0 and n % 4 == 0:\n            odd_count.append(1)\n        else:\n            even_count.append(1)\n    # print even_count, odd_count\n    return even_count, odd_count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    print(\"The number is \" + str(num))\n    if num < 0:\n        return (0, 0)\n\n    count = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            count += 1\n        if count == 2:\n            break\n    return (count, num - digit)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 2\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (sum(int(i) % 2 == 0 for i in str(num)), sum(int(i) % 2 == 1 for i in str(num)))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        return (0, 1)\n    if num < 10:\n        return (1, 0)\n    if num < 100:\n        return (1, 1)\n    return (1, 1 + (num % 10) % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 2\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    def even_odd(n):\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n\n    count_even = 0\n    count_odd = 0\n    for i in str(num):\n        if even_odd(i):\n            count_even += 1\n        else:\n            count_odd += 1\n\n    return count_even, count_odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n\n    count = 0\n    while num!= 0:\n        count += 1\n        if num % 10 == 0:\n            count += 1\n        num /= 10\n    return (count, count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = []\n    if num < 0:\n        sign = 1\n        num = num * sign\n    else:\n        sign = 0\n\n    while num:\n        count.append(num % 10)\n        num = num / 10\n    return (sum(count[::2]), sum(count[1::2]))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_digits = 0\n    odd_digits = 0\n\n    while num!= 0:\n        if num % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n        num //= 2\n\n    return (even_digits, odd_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num < 0:\n        num = -num\n    total = 0\n    even_count = 0\n    odd_count = 0\n\n    while num:\n        if num % 2:\n            odd_count += 1\n        else:\n            even_count += 1\n        num /= 10\n    if num:\n        even_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    def helper(num):\n        if num < 0:\n            return (num * 10) // abs(num) % 10, abs(num) % 10\n        return num // 10, num % 10\n    return helper(num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    even = 0\n    odd = 0\n    for i in range(len(str(num))):\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 2\n\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    while True:\n        if num % 2 == 0:\n            even = num // 2\n            odd = 0\n        else:\n            odd = num // 2\n            even = 0\n        num = odd\n\n        if num == 1:\n            break\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    elif num < 0:\n        return (0, 0)\n    elif num == 1:\n        return (0, 1)\n    elif num % 2 == 0:\n        return (0, 1)\n    else:\n        return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (len([num for num in str(num) if num % 2 == 0]), len([num for num in str(num) if num % 2!= 0]))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    sum = 0\n    for i in str(num):\n        if i in ('1', '2', '3', '4', '5', '6', '7', '8', '9'):\n            sum += 1\n        else:\n            sum += 0\n    return (sum//2, sum% 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    # A simple algorithm to count the number of even and odd digits.\n    # Loop through the digits from left to right\n    # If the digit is odd, count it as odd\n    # If the digit is even, count it as even.\n\n    even, odd = 0, 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            count += 1\n        else:\n            count += 1\n    return count, count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    even = 0\n    odd = 0\n    while num!= 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 10\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if i % 2 == 0:\n            count += 1\n    return count, len(str(num)) - count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (len(set(str(num)[::2])) - len(set(str(num)[1::2])), len(set(str(num)[1::2])))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    even = 0\n    odd = 0\n    for digit in num:\n        if digit in ('0', '1'):\n            if digit == '0':\n                odd += 1\n            else:\n                even += 1\n\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    cnt_even = 0\n    cnt_odd = 0\n    while num:\n        num, rem = divmod(num, 2)\n        cnt_even += 1 if rem == 0 else 0\n        cnt_odd += 1 if rem == 1 else 0\n    return cnt_even, cnt_odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 0)\n    if num < 10:\n        return (0, 1)\n    elif num < 100:\n        return (1, 1)\n    elif num < 1000:\n        return (2, 0)\n    elif num < 10000:\n        return (3, 0)\n    elif num < 100000:\n        return (4, 0)\n    elif num < 1000000:\n        return (5, 0)\n    elif num < 10000000:\n        return (6, 0)\n    elif num < 100000000:\n        return (7, 0)\n    elif num < 1000000000:\n        return (8, 0)\n    elif num < 10000000000:\n        return (9, 0)\n    elif num < 100000000000:\n        return (10, 0)\n    elif num < 1000000000000:\n        return (11, 0)\n    elif num < 10000000000000:\n        return (12, 0)\n    elif num < 100000000000000:\n        return (13, 0)\n    elif num < 1000000000000000:\n        return (14, 0)\n    elif num < 10000000000000000:\n        return (15, 0)\n    elif num < 100000000000000000:\n        return (16, 0)\n    elif num < 1000000000000000000:\n        return (17, 0)\n    elif num < 10000000000000000000:\n        return", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    return (1 if num % 2 == 0 else 0, 1 if num % 2!= 0 else 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num % 2:\n        return (1, 1)\n    else:\n        return (1, num//2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    even_count = 0\n    odd_count = 0\n    for c in num:\n        if c % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    total = num\n    even_digits = 0\n    odd_digits = 0\n\n    while total:\n        if total % 2:\n            odd_digits += 1\n        else:\n            even_digits += 1\n\n        total //= 10\n\n    return (even_digits, odd_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in range(0, num):\n        if i % 2!= 0:\n            odd += 1\n        else:\n            even += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (1, 0)\n    elif num % 2 == 0:\n        return (0, 1)\n    else:\n        return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num <= 0:\n        return 0, 0\n\n    even, odd = 0, 0\n    while num!= 0:\n        digit = num % 10\n        num = num // 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if not num: return (0, 0)\n    num = str(num)\n    even, odd = 0, 0\n    for i in range(len(num)):\n        if num[i] in \"0\":\n            odd += 1\n        else:\n            even += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return 0, 0\n    elif num < 0:\n        return 0, 0\n    elif num == 1:\n        return 1, 0\n\n    even = 0\n    odd = 0\n    while num > 0:\n        num, rem = divmod(num, 2)\n        if rem:\n            odd += 1\n        else:\n            even += 1\n\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num >= 0:\n        evens = 0\n        odds = 0\n        for i in str(num):\n            if i % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n        return (evens, odds)\n    else:\n        print(\"The number must be positive\")\n\neven_odd_count(1)\neven_odd_count(-2)\neven_odd_count(3)\neven_odd_count(13)\neven_odd_count(15)\neven_odd_count(-100)\neven_odd_count(1000)\neven_odd_count(4589)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = abs(num)\n\n    count = [0] * 2\n\n    while num!= 0:\n        count[num % 2] += 1\n        num //= 10\n\n    return count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    s = str(num)\n    odd = 0\n    even = 0\n    for char in s:\n        if char in ['0', '1']:\n            if char == '0':\n                even += 1\n            else:\n                odd += 1\n    return(even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    if num:\n        num = int(num)\n        while num:\n            num, digit = divmod(num, 10)\n            count += digit\n            if digit % 2:\n                count += 1\n    return (count, count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    result = []\n    while num:\n        count += 1\n        if num % 10 == 0:\n            result.append(1)\n        else:\n            result.append(0)\n        num /= 10\n    return (count, len(result))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num // 2, num % 2)\n    else:\n        return (num // 2 - 1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n    total = 0\n    count = 0\n    while num > 0:\n        if num % 2 == 0:\n            total += num\n            count += 1\n        num //= 10\n    return (count, total - count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = [0,0]\n    for i in str(num):\n        if i in '0123456789':\n            count[int(i) % 2] += 1\n    return(count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd = 0, 0\n    while num!= 0:\n        if num % 10 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in num:\n        if i % 2 == 0:\n            count += 1\n    return count, len(str(num)) - count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    count = [0, 0]\n\n    while num > 0:\n        count[0] += 1\n        if num % 2 == 0:\n            count[0] += 1\n        num /= 2\n\n    return count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    evens = 0\n    odds = 0\n\n    while num!= 0:\n        num /= 10\n        evens += num % 2\n        odds += num\n    return (evens, odds)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num == 0:\n        return (0, 0)\n\n    digits = []\n    while num!= 0:\n        num, rem = divmod(num, 10)\n        digits.append(rem)\n\n    even_digits = sum(digits[:-1]) + sum(digits[1:]) // 2\n    odd_digits = sum(digits[:-1]) + sum(digits[1:]) - even_digits\n    return (even_digits, odd_digits)\n\nA:\n\nThis answer was heavily edited after the first comment was posted.  Thanks to comments from Andrew and Chris, I think the code is now much better.\nI'm not happy with the way that the logic is split into two functions.  I think it would be much simpler if you kept it all in one.  The code would be much easier to read as well.  My main concern is that the same variable (num) is being used for two different tasks.  I'd suggest renaming one of them.", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd_count = 0\n    even_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 10\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    even = 0\n    odd = 0\n    for char in num:\n        if char in '0123456789':\n            if char in '02468':\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    count_even = 0\n    count_odd = 0\n    for digit in num:\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0,0)\n    else:\n        odd = 0\n        even = 0\n        while num:\n            if num % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            num = num / 10\n        return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    def count_digits(number):\n        \"\"\"Given an integer, return a tuple that has the number of digits before and after the decimal point.\"\"\"\n        count = 0\n        digits = []\n\n        while number!= 0:\n            digits.append(number % 10)\n            number /= 10\n            count += 1\n\n        return (count, len(digits))\n\n    def is_even(digit):\n        \"\"\"Check if a digit is even or not.\"\"\"\n        return digit % 2 == 0\n\n    count, digits_after_dp = count_digits(num)\n    count_even, count_odd = 0, 0\n    for digit in digits_after_dp:\n        if is_even(digit):\n            count_even += 1\n        else:\n            count_odd += 1\n\n    return count_even, count_odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    digits = [int(d) for d in str(num)]\n\n    evens = 0\n    odds = 0\n    for d in digits:\n        if d % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n\n    return (evens, odds)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Invalid negative number\")\n\n    digits = int(str(num)[-1])\n    if digits % 2 == 0:\n        return (digits // 2, 0)\n    else:\n        return (digits // 2 - 1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n\n    even_count = 0\n    odd_count = 0\n    for i in range(len(str(num))):\n        if str(num)[i].isdigit():\n            if int(str(num)[i]) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    length = len(str(num))\n    even_count = 0\n    odd_count = 0\n\n    # count the number of digits of num\n    for i in range(length):\n        # count the number of even digits\n        if num % 10 == 0:\n            even_count += 1\n            num //= 10\n        # count the number of odd digits\n        elif num % 10!= 0:\n            odd_count += 1\n            num //= 10\n\n    return even_count, odd_count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, even_odd_count(num//2)[1] + 1)\n    else:\n        return (even_odd_count(num//2)[0] + 1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (num, 0)\n    count = 0\n    for digit in str(num):\n        if digit == '0':\n            continue\n        elif digit == '1':\n            count += 1\n        elif digit == '2':\n            count += 1\n        elif digit == '3':\n            count += 1\n        elif digit == '4':\n            count += 1\n        elif digit == '5':\n            count += 1\n        elif digit == '6':\n            count += 1\n        elif digit == '7':\n            count += 1\n        elif digit == '8':\n            count += 1\n        elif digit == '9':\n            count += 1\n    if count % 2 == 0:\n        return (count//2, count//2)\n    else:\n        return (count//2 + 1, count//2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    elif num < 0:\n        odd = 0\n        even = 0\n    else:\n        odd = 1\n        even = 1\n        while num > 0:\n            if num % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            num /= 2\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num == 0:\n        return 0, 0\n\n    if num < 0:\n        return even_odd_count(num * -1)[::-1]\n\n    if num == 1:\n        return 1, 0\n\n    return int(num % 10), even_odd_count(int(num / 10))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    ev_count = 0\n    od_count = 0\n    while num!= 0:\n        if num % 2 == 0:\n            ev_count += 1\n        else:\n            od_count += 1\n        num //= 2\n    return ev_count, od_count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    temp = 0\n    even = 0\n    odd = 0\n    while num!= 0:\n        temp = num % 10\n        num = num // 10\n        if temp % 2 == 0:\n            count += 1\n        else:\n            count += 1\n            even += 1\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num == 0:\n        return (0, 0)\n\n    count = 0\n    for i in range(0, len(str(num))):\n        if str(num)[i] == \"0\":\n            count += 1\n    if count % 2 == 0:\n        return (count // 2, 0)\n    else:\n        return (count // 2, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    def _count_odd(num):\n        count = 0\n        while num!= 0:\n            count += 1\n            num = num//10\n        return count\n\n    def _count_even(num):\n        count = 0\n        while num!= 0:\n            num = num//10\n            count += 1\n        return count\n\n    return (_count_odd(num), _count_even(num))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 2\n    return (even_count, odd_count)"]]