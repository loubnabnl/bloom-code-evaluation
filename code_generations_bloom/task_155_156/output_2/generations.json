[["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input must be non-negative\")\n    count = 0\n    for i in range(len(str(num))):\n        if i % 2 == 0:\n            count += 1\n        else:\n            count -= 1\n    return (count, len(str(num)) - count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if str(num)[i] == '0':\n            count += 1\n        else:\n            count += 0\n    return count, count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 1)\n    count_even = 0\n    count_odd = 0\n    while num!= 0:\n        if num % 10 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num = num / 10\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    assert isinstance(num, int)\n    even = 0\n    odd = 0\n    while num!= 0:\n        num, rem = divmod(num, 2)\n        if rem == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Recursive implementation\n    def even_odd_count_rec(num):\n        if num == 0:\n            return (0, 0)\n        elif num % 2 == 0:\n            return even_odd_count_rec(num // 2)\n        else:\n            return even_odd_count_rec(num // 2 + 1)\n    # Iterative implementation\n    def even_odd_count_iter(num):\n        cnt = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                cnt += 1\n            else:\n                cnt += 2\n        return cnt, num\n    # Test the implementation\n    print(even_odd_count_rec(-12))\n    print(even_odd_count_iter(-12))\n    print(even_odd_count_rec(123))\n    print(even_odd_count_iter(123))\n    print(even_odd_count_rec(12345678))\n    print(even_odd_count_iter(12345678))\n    print(even_odd_count_rec(1234567890))\n    print(even_odd_count_iter(1234567890))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    assert isinstance(num, int), \"num must be an integer\"\n    odd = 0\n    even = 0\n    for i in str(num):\n        if i == '0':\n            continue\n        elif i == '1':\n            even += 1\n        elif i == '2':\n            odd += 1\n        elif i == '3':\n            odd += 1\n        elif i == '4':\n            even += 1\n        elif i == '5':\n            odd += 1\n        elif i == '6':\n            even += 1\n        elif i == '7':\n            odd += 1\n        elif i == '8':\n            even += 1\n        elif i == '9':\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        return (even_odd_count(abs(num))[0], even_odd_count(abs(num))[1] + 1)\n    else:\n        return (even_odd_count(num / 10)[0] + 1, even_odd_count(num % 10)[1])", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in str(num):\n        if i in \"0123456789\":\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    even_count = 0\n    odd_count = 0\n    for i in num:\n        if i == '0':\n            break\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 0)\n    if num < 10:\n        return (1, 1)\n    if num % 10 == 0:\n        return (1, 0)\n    if num % 10 == 1:\n        return (0, 1)\n    return (even_odd_count(num // 10)[0] + 1, even_odd_count(num // 10)[1] + 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    count = 0\n    while num > 0:\n        if num % 2 == 0:\n            count += 1\n        num /= 10\n    return count, num", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    count = 0\n    for i in num:\n        if i == '0' or i == '1':\n            count += 1\n    return (count, len(num) - count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 10 + 1, num // 10)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    even_count = 0\n    odd_count = 0\n    for digit in num:\n        if digit == '0':\n            continue\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n    even = 0\n    odd = 0\n    while num:\n        num, rem = divmod(num, 2)\n        even += rem\n        odd += 1\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 2\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return 0, 0\n    elif num < 0:\n        return even_odd_count(-num) + 1, even_odd_count(-num) + 1\n    else:\n        even = 0\n        odd = 0\n        while num:\n            if num % 10 == 0:\n                even += 1\n            else:\n                odd += 1\n            num //= 10\n        return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    elif num < 0:\n        return (1, 1)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    evens = 0\n    odds = 0\n    while num:\n        if num % 10 == 0:\n            evens += 1\n        else:\n            odds += 1\n        num /= 10\n    return evens, odds", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Write your code here\n    count = 0\n    count1 = 0\n    if num == 0:\n        return (0, 0)\n    else:\n        while num!= 0:\n            num = num / 10\n            count = count + 1\n        if num % 2 == 0:\n            count1 = count1 + 1\n        else:\n            count1 = count1 - 1\n    return (count, count1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return even_odd_count(-num)\n    count = 0\n    while num!= 0:\n        count += 1\n        num /= 10\n    if num % 2 == 0:\n        return count, count\n    return count, count + 1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        return even_odd_count(-num)\n\n    count = 0\n    while num!= 0:\n        num, rem = divmod(num, 10)\n        count += rem\n\n    return (count, count - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (0, 1)\n    else:\n        return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    else:\n        return (len([x for x in str(num) if x in '02468']), len([x for x in str(num) if x in '1234567890']))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n\n    count_even = 0\n    count_odd = 0\n    for i in range(len(str(num))):\n        if str(num)[i] == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    #TODO - implement the solution\n\n    return 0, 0", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n\n    even = 0\n    odd = 0\n\n    while num!= 0:\n        num, rem = divmod(num, 10)\n\n        if rem % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num.count(2), num.count(1))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    if num < 0:\n        raise ValueError('The number should be positive')\n    even = 0\n    odd = 0\n    while num:\n        num, rem = divmod(num, 2)\n        if rem:\n            odd += 1\n        else:\n            even += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    assert type(num) == int\n    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 2\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num:\n        if num % 2:\n            odd_count += 1\n        else:\n            even_count += 1\n        num = num // 10\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_digit_count = 0\n    odd_digit_count = 0\n\n    while num!= 0:\n        if num % 2 == 0:\n            even_digit_count += 1\n        else:\n            odd_digit_count += 1\n        num = num / 2\n\n    return even_digit_count, odd_digit_count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num < 0:\n        return (0, 0)\n\n    if num == 0:\n        return (0, 0)\n\n    if num % 2 == 0:\n        return (0, 1)\n\n    return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n\n    evens = 0\n    odds = 0\n    for i in str(num):\n        if i in \"0123456789\":\n            if i % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n    return (evens, odds)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n    if num == 0:\n        return (0, 0)\n    num = str(num)\n    even = 0\n    odd = 0\n    for i in num:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return even_odd_count(-(num))\n    else:\n        count = 0\n        while num > 0:\n            if num % 2 == 0:\n                count += 1\n            num /= 2\n        return (count, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 1)\n    return (1, num//10 + 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    def is_even(num):\n        \"\"\"Given an integer. return True if the number is even, False otherwise.\n        \"\"\"\n        return num % 2 == 0\n\n    def count(num):\n        \"\"\"Given an integer. return the number of digits in the number.\n        \"\"\"\n        return len(str(num))\n\n    def even_digits_count(num):\n        \"\"\"Given an integer. return the number of even digits in the number.\n        \"\"\"\n        return sum(1 for _ in str(num) if is_even(int(_)))\n\n    def odd_digits_count(num):\n        \"\"\"Given an integer. return the number of odd digits in the number.\n        \"\"\"\n        return sum(1 for _ in str(num) if not is_even(int(_)))\n\n    return (even_digits_count(num), odd_digits_count(num))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"num must be positive\")\n\n    odd_count = 0\n    even_count = 0\n\n    while num!= 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 10\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    count += (num % 10) % 2\n    num = num // 10\n    while num > 0:\n        count += (num % 10) % 2\n        num = num // 10\n    return (count, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    else:\n        return (sum(1 for i in str(num) if i % 2 == 0), sum(1 for i in str(num) if i % 2!= 0))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 1)\n    return (1, 0) if num % 2 == 0 else (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Number should be positive\")\n    if num == 0:\n        return (0, 0)\n    even = 0\n    odd = 0\n    while num > 0:\n        num, digit = divmod(num, 10)\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    elif num < 0:\n        return (1, 1)\n    else:\n        return (0, int(num % 10!= 0))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    else:\n        return (1, 1 if num % 2 == 0 else 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    def count(number):\n        # Returns a tuple with the count of even and odd digits\n        count = (0, 0)\n        for i in range(len(number)):\n            if number[i] % 2 == 0:\n                count[0] += 1\n            else:\n                count[1] += 1\n        return count\n    return count(num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"num should be a non-negative integer\")\n    if num == 0:\n        return (0, 0)\n\n    odd, even = 0, 0\n\n    while num > 0:\n        num, rem = divmod(num, 10)\n        if rem % 2 == 1:\n            odd += 1\n        else:\n            even += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    if num == 0:\n        return (0, 0)\n    count = 0\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            count += 1\n        num = num // 10\n    return (count, len(str(num)) - count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if i % 2 == 0:\n            count += 1\n        else:\n            count -= 1\n    return count, count + 1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return 0, 0\n    else:\n        even, odd = 0, 0\n        while num!= 0:\n            num = num // 10\n            even += 1\n            odd += 1\n        return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    num = abs(num)\n\n    while num > 0:\n        count_even += int(num % 10)\n        count_odd += int(num % 10)\n        num /= 10\n\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd = 0, 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 2\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 0)\n    return (int(num % 10) // 2 + 1, int(num % 10) % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Write your code here\n    even_count = 0\n    odd_count = 0\n\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 1)\n    elif num == 0:\n        return (0, 1)\n    else:\n        return (1, int(str(num).count('1') + str(num).count('2') + str(num).count('3') + str(num).count('4') + str(num).count('5') + str(num).count('6') + str(num).count('7') + str(num).count('8') + str(num).count('9')))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n\n    while num > 0:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num = num // 10\n\n    return count_even, count_odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    assert(num >= 0)\n    even_digit = 0\n    odd_digit = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_digit += 1\n        else:\n            odd_digit += 1\n        num /= 10\n    return even_digit, odd_digit", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    if len(num) == 0:\n        return (0, 0)\n    if num[0].isdigit():\n        even = 1\n        odd = 0\n        for i in range(len(num)):\n            if num[i].isdigit():\n                if num[i].isdigit():\n                    even += 1\n                else:\n                    odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num < 0:\n        return (0, 0)\n    count = 0\n    while num > 0:\n        if num % 2 == 0:\n            count += 1\n        num /= 10\n\n    return (count, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return(sum(d%2 for d in str(num)),sum(d%2==0 for d in str(num)))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num//2, num%2*1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    elif num < 0:\n        return (0, 1)\n    elif num == 1:\n        return (1, 0)\n    elif num % 2 == 0:\n        return (0, 0)\n    else:\n        return (1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (0, 1)\n    else:\n        return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    # Write your code here\n    if num == 0:\n        return (0, 0)\n\n    elif num > 0:\n        return (1, 0)\n\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            count += 1\n        num = num / 10\n    return (count, len(str(num)) - count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # your code here\n    if num < 0:\n        return even_odd_count(-num)\n    else:\n        count = 0\n        for i in range(len(str(num))):\n            if int(str(num)[i]) % 2 == 0:\n                count += 1\n        return (count, len(str(num)) - count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    num_str = str(num)\n    even_count = 0\n    odd_count = 0\n    for i in num_str:\n        if i in ['0', '2']:\n            even_count += 1\n        elif i in ['1', '3']:\n            odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 1)\n    return (len(str(num)) % 2, len(str(num)) // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Number must be non-negative\")\n\n    count = 0\n    while num > 0:\n        if num % 2 == 0:\n            count += 1\n        num /= 10\n\n    return (count, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    count = 0\n    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num / 2\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even, count_odd = 0, 0\n    while num!= 0:\n        num = num // 10\n        count_even += 1 if num % 2 == 0 else 0\n        count_odd += 1 if num % 2 == 1 else 0\n    return count_even, count_odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    while num!= 0:\n        num, rem = divmod(num, 10)\n        if rem % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    else:\n        even = 0\n        odd = 0\n        while num!= 0:\n            if num % 10 == 0:\n                even += 1\n            else:\n                odd += 1\n            num //= 10\n        return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError('num must be a positive integer')\n    if num == 0:\n        return (0, 0)\n    count = 0\n    while num > 0:\n        count += 1\n        if num % 10 == 0:\n            count += 1\n        num //= 10\n    return (count % 2, count // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    digits = str(num)\n    even = 0\n    odd = 0\n    for digit in digits:\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 1)\n    return sum(1 for digit in str(num) if digit % 2 == 0), sum(1 for digit in str(num) if digit % 2!= 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError('num should be a non-negative integer')\n    odd_count = 0\n    even_count = 0\n    while num > 0:\n        if num % 2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n        num //= 2\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    else:\n        return (1, len(str(num)) - (int(str(num)) % 2))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    else:\n        return (num % 2, num // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 0)\n    count = 0\n    even_count = 0\n    odd_count = 0\n    while num:\n        count += 1\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 10\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num *= -1\n\n    even = 0\n    odd = 0\n\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n        num /= 10\n\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in range(len(str(num))):\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            count += 1\n        num = num / 10\n    return count, num", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    digits = str(num)\n    count = 0\n    for i in digits:\n        if i in '0123456789':\n            count += 1\n    return (count, len(digits) - count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 1)\n    if num == 0:\n        return (0, 0)\n    return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    while num!= 0:\n        if num % 2 == 0:\n            count += 1\n        num /= 10\n    return count, num", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert num to string\n    num_str = str(num)\n\n    # Count even and odd digits\n    even_digits = len(filter(lambda x: x in \"0123456789\", num_str))\n    odd_digits = len(filter(lambda x: x in \"0123456789\", num_str)) - even_digits\n\n    return (even_digits, odd_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    n = int(num)\n    even = 0\n    odd = 0\n    while n!= 0:\n        if n % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        n //= 10\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    evens, odds = 0, 0\n    for i in range(len(str(num))):\n        if str(num)[i] in '0123456789':\n            if str(num)[i] % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n    return evens, odds", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num < 0:\n        return (0, 0)\n\n    odd_count = 0\n    even_count = 0\n\n    while num:\n        odd_count += 1 if num % 2 == 1 else 0\n        even_count += 1 if num % 2 == 0 else 0\n        num /= 2\n\n    return (odd_count, even_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in str(num):\n        if i % 2 == 0:\n            count += 1\n        else:\n            count += 1\n    return count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for digit in str(num):\n        count += int(digit) if digit.isdigit() else 0\n    return count, count + 1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 2\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n    even = 0\n    odd = 0\n    while num:\n        if num % 2:\n            odd += 1\n        else:\n            even += 1\n        num //= 10\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    while num > 0:\n        num = num // 10\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    ev_count = 0\n    od_count = 0\n    num_str = str(num)\n    for i in num_str:\n        if i%2 == 0:\n            ev_count += 1\n        else:\n            od_count += 1\n    return (ev_count, od_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num_str = str(num)\n    even_digits = 0\n    odd_digits = 0\n    for digit in num_str:\n        if digit == '0':\n            continue\n        elif digit == '1':\n            odd_digits += 1\n        else:\n            even_digits += 1\n    return (even_digits, odd_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    evens = 0\n    odds = 0\n    for i in range(len(str(num))):\n        if int(str(num)[i]) % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return evens, odds", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n\n    num_str = str(num)\n    even = 0\n    odd = 0\n    for digit in num_str:\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 2\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    count_even = 0\n    count_odd = 0\n\n    while num > 0:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 2\n\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_digits = 0\n    odd_digits = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n        num = num / 10\n    return (even_digits, odd_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 1)\n    return (len(str(num).split('.')[0]), len(str(num).split('.')[1]))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    count_even = 0\n    count_odd = 0\n    while num:\n        if num % 2:\n            count_odd += 1\n        else:\n            count_even += 1\n        num /= 10\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    while num:\n        count += 1\n        num = num % 10\n    return count, count - 1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if i % 2 == 0:\n            count += 1\n    return (count, len(str(num)) - count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return even_odd_count(num * -1)\n    count = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            count += 1\n        else:\n            count += 0\n    return (count, len(str(num)) - count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if str(num)[i] == '0':\n            count += 1\n        else:\n            if count % 2 == 0:\n                count += 1\n            else:\n                count = 0\n    return count, count + 1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 1)\n    else:\n        return (1, int(num % 10 == 0))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    odd = 0\n    even = 0\n    for i in range(len(num)):\n        if num[i] == '0':\n            odd += 1\n        else:\n            even += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n\n    if num % 2 == 0:\n        even_count = num // 2\n    else:\n        even_count = num // 2 + 1\n\n    if num % 2 == 0:\n        odd_count = 0\n    else:\n        odd_count = num % 2\n\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n\n    if num == 0:\n        return (0, 0)\n\n    count = 0\n    for i in range(0, len(str(num))):\n        if str(num)[i] == \"1\":\n            count += 1\n        elif str(num)[i] == \"0\":\n            count += 1\n    return (count, count + 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n    count = 0\n    count += sum(1 for i in num if i % 2 == 0)\n    count += sum(1 for i in num if i % 2 == 1)\n    return count, count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 10\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 10 == 0 and num % 5 == 0) or num % 10!= 0, num % 5!= 0", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 2\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if int(str(num)[i]) % 2 == 0:\n            count += 1\n    return count, len(str(num)) - count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Write your code here\n    num = int(num)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num / 2\n    return even_count, odd_count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    even_count = 0\n    odd_count = 0\n    for digit in num:\n        if digit in ['0', '1']:\n            if digit == '0':\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    odd = 0\n    even = 0\n    while num > 0:\n        num, rem = divmod(num, 2)\n        odd += 1 if rem else 0\n        even += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n\n    if num == 0:\n        return (1, 1)\n\n    even = 0\n    odd = 0\n\n    while num > 0:\n        num, digit = divmod(num, 10)\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    n = int(num)\n    evens = 0\n    odds = 0\n    while n > 0:\n        if n % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n        n //= 2\n    return evens, odds", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 1)\n    if num == 0:\n        return (0, 0)\n    count_even = 0\n    count_odd = 0\n    while num!= 0:\n        num, rem = divmod(num, 2)\n        if rem == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    if num < 0:\n        return (0, 0)\n    else:\n        num = int(num)\n        even_count = 0\n        odd_count = 0\n        while num > 0:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num /= 10\n        return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"number should be non-negative\")\n    else:\n        return (num % 10, num / 10)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd = 0, 0\n    while num:\n        num, rem = divmod(num, 10)\n        if rem:\n            odd += 1\n        else:\n            even += 1\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    else:\n        return (1, 1 if num % 2 == 0 else 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 1)\n    if num == 0:\n        return (0, 0)\n\n    even_count = 0\n    odd_count = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 2\n\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 0)\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num / 10\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n    if num < 0:\n        return even_odd_count(-num)\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (0, 1)\n    else:\n        return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"The number must be non-negative.\")\n    even = 0\n    odd = 0\n    while num!= 0:\n        num, rem = divmod(num, 10)\n        if rem == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_digits = 0\n    odd_digits = 0\n    while num!= 0:\n        if num % 10 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n        num = num / 10\n    return (even_digits, odd_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 1)\n    else:\n        return (1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return even_odd_count(-num)\n    even, odd = 0, 0\n    while num:\n        num, rem = divmod(num, 10)\n        even += rem\n        odd += 1\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 1)\n    num_str = str(num)\n    num_even = 0\n    num_odd = 0\n    for i in range(len(num_str)):\n        if num_str[i] in '0123456789':\n            if num_str[i] in '012345678':\n                num_even += 1\n            else:\n                num_odd += 1\n    return (num_even, num_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (0, 1)\n    else:\n        return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n    even = 0\n    odd = 0\n    while num:\n        num, rem = divmod(num, 10)\n        even += rem\n        odd += 1\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    if num == \"0\":\n        return (0, 0)\n    num = num.replace(\"0\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\".\", \"\")\n    num = num.replace(\"-\", \"\")\n    num = num.replace(\"+\", \"\")\n\n    even = 0\n    odd = 0\n    for digit in num:\n        if digit == \"2\":\n            even += 1\n        elif digit == \"4\":\n            even += 1\n        elif digit == \"6\":\n            even += 1\n        elif digit == \"8\":\n            even += 1\n        elif digit == \"9\":\n            even += 1\n        elif digit == \"1\":\n            odd += 1\n        else:\n            pass\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        num = num * -1\n\n    even = 0\n    odd = 0\n    while num!= 0:\n        num = num // 10\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 2\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return even_odd_count(-num)\n    even = 0\n    odd = 0\n    while num:\n        num, rem = divmod(num, 10)\n        if rem % 2:\n            odd += 1\n        else:\n            even += 1\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, 0)\n    return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    while num!= 0:\n        count += num % 10\n        num //= 10\n    return count, num", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    even_count = 0\n    odd_count = 0\n    for i in num:\n        if i == '0':\n            continue\n        elif i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = num * -1\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, 0)\n    return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n\n    if num < 0:\n        return (0, 0)\n\n    count = 0\n    for i in range(len(str(num))):\n        if i % 2 == 0:\n            count += 1\n        else:\n            count += 0\n\n    return (count, count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_digits = 0\n    odd_digits = 0\n    while num > 0:\n        if num % 10 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n        num = num // 10\n    return (even_digits, odd_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        return (0, 0)\n    if num > 0:\n        return (1, 1)\n    return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    if num == 0:\n        return (0, 0)\n    else:\n        even, odd = 0, 0\n        while num!= 0:\n            even += num % 10\n            num /= 10\n            odd += num % 10\n            num /= 10\n        return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    while num:\n        if num % 2 == 0:\n            count += 1\n        num /= 2\n    return count, num", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = []\n    while num!= 0:\n        count.append(num % 10)\n        num /= 10\n    count.reverse()\n    odd_count = sum(1 for i in count if i % 2!= 0)\n    even_count = len(count) - odd_count\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_digits = 0\n    odd_digits = 0\n\n    while num!= 0:\n        if num % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n        num /= 10\n\n    return (even_digits, odd_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    num = str(num)\n    even_count = 0\n    odd_count = 0\n    for i in num:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (1, 1)\n\n    odd = 0\n    even = 0\n    while num > 0:\n        num, remainder = divmod(num, 10)\n        if remainder:\n            odd += 1\n        else:\n            even += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    even = 0\n    odd = 0\n    for digit in num:\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in range(len(str(num))):\n        if int(str(num)[i]) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Only positive numbers are allowed.\")\n\n    even = 0\n    odd = 0\n\n    while num!= 0:\n        num, rem = divmod(num, 10)\n        if rem % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 0)\n    even = 0\n    odd = 0\n    while num!= 0:\n        num, digit = divmod(num, 10)\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    return (num % 10, num // 10)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n    count = 0\n    while num!= 0:\n        if num % 10 == 0:\n            count += 1\n        num /= 10\n    return (count, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    elif num < 0:\n        return (even_odd_count(num // 10)[0] + 1, even_odd_count(num % 10)[0])\n    else:\n        return (even_odd_count(num // 10)[0], even_odd_count(num % 10)[0] + 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    evens = 0\n    odds = 0\n    while num:\n        num, digit = divmod(num, 10)\n        if digit % 2:\n            odds += 1\n        else:\n            evens += 1\n    return evens, odds", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n\n    count_even, count_odd = 0, 0\n    while num > 0:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n\n    return (count_even, count_odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Number cannot be negative\")\n    num = abs(num)\n    even = 0\n    odd = 0\n    while num > 0:\n        num, rem = divmod(num, 10)\n        if rem == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 1)\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 10 % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 10\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit == '0':\n            continue\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    while num:\n        if num % 2:\n            count += 1\n        num /= 10\n    return count, count + 1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n\n    if num == 0:\n        return (1, 0)\n\n    even_count = 0\n    odd_count = 0\n\n    while num!= 0:\n        num, rem = divmod(num, 10)\n        if rem % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 1)\n    elif num == 0:\n        return (0, 0)\n    else:\n        even = 0\n        odd = 0\n        while num > 0:\n            num, rem = divmod(num, 2)\n            if rem == 0:\n                even += 1\n            else:\n                odd += 1\n        return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    if num == '':\n        return (0, 0)\n    elif num[0] == '-':\n        return (1, 0)\n    elif num[0] in '+-':\n        return (0, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        count += 1\n    if num % 2!= 0:\n        count += 1\n    return (count, count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return even_odd_count(num * -1)\n    if num == 0:\n        return (0, 0)\n    even = 0\n    odd = 0\n    while num!= 0:\n        num, rem = divmod(num, 2)\n        even += 1 if rem == 0 else 0\n        odd += 1 if rem == 1 else 0\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd = 0, 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 2\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    even_count = 0\n    odd_count = 0\n\n    for i in range(0, num):\n        if num % 10 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Number should be non-negative\")\n    if num == 0:\n        return (0, 0)\n    if num > 0:\n        odd_count = 0\n        even_count = 0\n        while num:\n            if num % 10 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num /= 10\n        return (even_count, odd_count)\n    else:\n        raise ValueError(\"Number should be non-negative\")", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    count = 0\n    for i in num:\n        if i == '0':\n            count += 1\n        elif i == '1':\n            count += 1\n        elif i == '2':\n            count += 1\n        elif i == '3':\n            count += 1\n        elif i == '4':\n            count += 1\n        elif i == '5':\n            count += 1\n        elif i == '6':\n            count += 1\n        elif i == '7':\n            count += 1\n        elif i == '8':\n            count += 1\n        elif i == '9':\n            count += 1\n        else:\n            break\n    return (count, len(num) - count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    def count(num):\n        count = 0\n        while num!= 0:\n            num = num // 10\n            count += 1\n        return count\n    return (count(num) % 2, count(num) // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 1)\n    return (1 if num % 2 == 0 else 2, 1 if num % 2 == 0 else 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 0)\n    odd = 0\n    even = 0\n    while num!= 0:\n        num, rem = divmod(num, 10)\n        if rem == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    if num >= 0:\n        for i in range(len(str(num))):\n            if str(num)[i] == '0':\n                count += 1\n            elif str(num)[i] == '1':\n                count += 1\n                if count % 2 == 0:\n                    count -= 1\n    else:\n        for i in range(len(str(abs(num)))):\n            if str(abs(num))[i] == '1':\n                count += 1\n                if count % 2 == 0:\n                    count -= 1\n\n    return count, count - 1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if num % 2 == 0:\n            count += 1\n        num //= 2\n    return count, count", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = abs(num)\n\n    # Count the number of even and odd digits\n    even_count = 0\n    odd_count = 0\n\n    while num:\n        if num % 2:\n            odd_count += 1\n        else:\n            even_count += 1\n        num //= 10\n\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    # Checks if number is negative\n    if num < 0:\n        # Converts negative number to positive\n        num = num * -1\n        # If number is negative, then number of odd digits is 1\n        odd_count = 1\n        # If number is negative, then number of even digits is 0\n        even_count = 0\n\n    else:\n        # If number is positive, then number of odd digits is 0\n        odd_count = 0\n        # If number is positive, then number of even digits is 1\n        even_count = 1\n\n    # Counts number of odd and even digits respectively\n    for i in range(len(str(num))):\n        if str(num)[i] % 2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    return (even_count, odd_count)\n</s>", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in range(len(str(num))):\n        if str(num)[i].isdigit():\n            if str(num)[i] % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            count += 1\n        num //= 10\n    return (count, len(str(num)) - count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        return (0, 0)\n    count = 0\n    while num!= 0:\n        num, rem = divmod(num, 10)\n        count += 1\n    return (count, count - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    if num < 0:\n        return (count, count)\n    if num == 0:\n        return (0, 0)\n    while num!= 0:\n        count += 1\n        num = num / 10\n    count += 1\n    return (count, count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    return (num % 2, num // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError('num must be positive')\n\n    if num == 0:\n        return (0, 0)\n\n    if num % 2 == 0:\n        return (1, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    return (1 if num % 2 == 0 else 0, 1 if num % 2!= 0 else 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    evens = 0\n    odds = 0\n    while num!= 0:\n        if num % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n        num //= 2\n    return evens, odds", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    num = num.replace('-', '')\n    even_count = 0\n    odd_count = 0\n    for digit in num:\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Base case\n    if num == 0:\n        return (0, 0)\n\n    # Count the number of odd and even digits\n    odd = 0\n    even = 0\n    while num:\n        num, digit = divmod(num, 10)\n        if digit % 2 == 1:\n            odd += 1\n        else:\n            even += 1\n\n    return (odd, even)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = 0\n    for i in range(len(str(num))):\n        if str(num)[i] % 2 == 0:\n            count += 1\n    return (count, len(str(num)) - count)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd = 0, 0\n    for i in range(len(str(num))):\n        if str(num)[i] in '2':\n            even += 1\n        elif str(num)[i] in '4':\n            even += 2\n        elif str(num)[i] in '6':\n            even += 3\n        elif str(num)[i] in '8':\n            even += 4\n        elif str(num)[i] in '9':\n            even += 5\n        else:\n            odd += 1\n    return even, odd", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (1, 1)\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, 0)\n    return (0, 1)"]]