[["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Initialize list of integers\n    result = []\n\n    for i in range(len(a)):\n        # Calculate bitwise XOR\n        value = a[i] ^ b[i]\n\n        # Convert to character\n        value = chr(value)\n\n        # Add to list of characters\n        result.append(value)\n\n    # Convert list to string\n    result = ''.join(result)\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # converts a and b to binaries\n    a_bin = bin(int(a, 2))\n    b_bin = bin(int(b, 2))\n\n    # perform XOR of a and b\n    c = a_bin ^ b_bin\n    return ''.join([str(bin(int(x, 2))) for x in c])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    string_a = list(a)\n    string_b = list(b)\n    result = ''\n\n    for i in range(len(string_a)):\n        result += '{:02b}'.format(int(string_a[i]) ^ int(string_b[i]))\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    a = [int(x) for x in a]\n    b = [int(x) for x in b]\n    xor = [a[i] ^ b[i] for i in range(len(a))]\n    return \"\".join([str(x) for x in xor])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(str((int(a) ^ int(b)) % 2) for a, b in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert len(a) == len(b)\n    assert all(x in string for x in ['0', '1'] for string in [a, b])\n    result = 0\n    for i in range(len(a)):\n        result = result ^ int(a[i]) ^ int(b[i])\n    return str(result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    xor_val = \"\"\n    for i in range(len(a)):\n        xor_val += a[i] ^ b[i]\n    return xor_val", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    for i in range(len(a)):\n        result.append(int(a[i]) ^ int(b[i]))\n    return \"\".join([str(x) for x in result])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join([str(int(a) ^ int(b)) for a, b in zip(a, b)])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert len(a) == len(b)\n    s = ''\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            s += '1'\n        else:\n            s += '0'\n    return s", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    out = \"\"\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            out += '0'\n        elif a[i] == '0' and b[i] == '1':\n            out += '1'\n        elif a[i] == '1' and b[i] == '0':\n            out += '1'\n        elif a[i] == '0' and b[i] == '0':\n            out += '0'\n    return out", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join([\"0\" if x ^ y == 0 else \"1\" for (x, y) in zip(a, b)])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    result = []\n    carry = 0\n\n    for ch_a, ch_b in zip(a, b):\n        if carry == 1:\n            result.append('1')\n        else:\n            if ch_a == '1':\n                result.append('0')\n            else:\n                result.append('1')\n            if ch_b == '1':\n                result.append('0')\n            else:\n                result.append('1')\n        carry = (ch_a + ch_b + carry) % 2\n\n    return ''.join(result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def rev(a: str) -> str:\n        return ''.join([str(int(c) ^ 1) for c in a])\n\n    result = ''\n    for i, c in enumerate(a):\n        c ^= 1\n        result += rev(b[i:]) if c == 1 else b[:i]\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError('Strings must be same length')\n    xor = \"\"\n    for i, char in enumerate(a):\n        xor += chr(ord(char) ^ ord(b[i]))\n    return xor", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # perform XOR on a and b, and convert output to binary string\n    # for ease of use later on\n    return bin(int(a, 2) ^ int(b, 2))[2:]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n\n    for i, j in zip(a, b):\n        if i == j:\n            result += '0'\n        else:\n            result += '1'\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    # This solution is much simpler than that of xor operator\n    # print('XOR', a, b, '->', a ^ b)\n    xor_result = ''\n\n    for i in range(len(a)):\n        xor_result += a[i] ^ b[i]\n\n    return xor_result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = a.replace('0', '1')\n    b = b.replace('0', '1')\n    res = ''\n    for x, y in zip(a, b):\n        res += str(int(x) ^ int(y))\n    return res", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # result = ''\n    # for i in range(len(a)):\n    #     if a[i] == '1':\n    #         if b[i] == '0':\n    #             result += '1'\n    #     else:\n    #         if b[i] == '1':\n    #             result += '0'\n    #         else:\n    #             result += a[i]\n\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1':\n            if b[i] == '1':\n                result += '0'\n            else:\n                result += '1'\n        else:\n            if b[i] == '1':\n                result += '1'\n            else:\n                result += a[i]\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not a or not b:\n        return ''\n\n    # We'll use this dict to generate our output\n    out = {\n        '0': '0',\n        '1': '1',\n        '01': '0',\n        '10': '1',\n        '11': '0',\n    }\n    return ''.join(out.get(c, '') for c in a ^ b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    output = \"\"\n    for i in range(len(a)):\n        if (a[i] == '0') and (b[i] == '1'):\n            output += '1'\n        elif (a[i] == '1') and (b[i] == '0'):\n            output += '0'\n        else:\n            output += a[i]\n    return output", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '0':\n            result += '1'\n        elif a[i] == '0' and b[i] == '1':\n            result += '0'\n        else:\n            result += '0'\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    ret_str = ''\n    for i in range(len(a)):\n        if (a[i]!= b[i]):\n            ret_str += '1'\n        else:\n            ret_str += '0'\n    return ret_str", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join(map(lambda x: str(x ^ int(y)), zip(a, b)))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError(\"Length of strings are not same\")\n\n    result = \"\"\n    for i in range(len(a)):\n        result = int(result, 2) ^ int(a[i], 2)\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert len(a) == len(b)\n    result = ''\n    for i, v in enumerate(a):\n        if v == '0' and b[i] == '1':\n            result += '1'\n        elif v == '1' and b[i] == '0':\n            result += '1'\n        else:\n            result += '0'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    out = ''\n\n    for i, a_letter in enumerate(a):\n        out += b[i] ^ a_letter\n\n    return out", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError(\"Lengths of inputs are not equal\")\n\n    out = \"\"\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            out += a[i]\n        else:\n            out += b[i]\n    return out", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert len(a) == len(b) == len('010'), \"len(a)!= len(b)!= len('010')\"\n    ret = ''\n    for i in range(len(a)):\n        ret += str(int(a[i]) ^ int(b[i]))\n\n    return ret", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert len(a) == len(b)\n    c = ''\n    for i, j in zip(a, b):\n        c += chr(ord(i) ^ ord(j))\n    return c", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Start by converting the inputs to binary strings:\n    a = bin(int(a, 2))[2:]\n    b = bin(int(b, 2))[2:]\n\n    # Perform XOR on the inputs and convert result to binary string.\n    result = bin((int(a, 2) ^ int(b, 2))[2:])\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(str(int(a) ^ int(b)) for a, b in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert len(a) == len(b)\n    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    x = []\n    for i in range(len(a)):\n        x.append(str(int(a[i]) ^ int(b[i])))\n    return ''.join(x)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # pre: a and b are strings\n    # post: return XOR of a and b\n    result = \"\"\n    for i, j in zip(a, b):\n        if i!= j:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '0':\n            result += '1'\n        elif a[i] == '0' and b[i] == '1':\n            result += '0'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    # The string is split into chars\n    # Each char is converted to a binary string\n    # And the binary strings are XORed\n    result = ''\n    for char_a in a.split(''):\n        result += '0' * (len(char_a) - 1) + '1' + '0' * (len(b) - len(char_a) - 1)\n        for char_b in b.split(''):\n            result += '1' * (len(char_b) - 1) + '0'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    output = ''\n\n    for i, x in enumerate(a):\n        if x == '1':\n            for j, y in enumerate(b):\n                if y == '1':\n                    output += '0'\n                else:\n                    output += '1'\n        else:\n            for j, y in enumerate(b):\n                if y == '1':\n                    output += '0'\n                else:\n                    output += '1'\n    return output", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = list(a)\n    b = list(b)\n    output = []\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            output.append('0')\n        elif a[i] == '1' and b[i] == '0':\n            output.append('1')\n        elif a[i] == '0' and b[i] == '1':\n            output.append('1')\n        elif a[i] == '0' and b[i] == '0':\n            output.append('0')\n    return ''.join(output)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(f'{int(a[i]) ^ int(b[i]):0b}' for i in range(len(a)))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert len(a) == len(b)\n    xor_val = 0\n    for i, char in enumerate(a):\n        if char == '1':\n            xor_val ^= int(b[i])\n        else:\n            xor_val ^= int(a[i])\n    return str(xor_val)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    res = ''\n\n    if len(a)!= len(b):\n        raise ValueError(\"a and b should have same length.\")\n\n    for i in range(len(a)):\n        res += bin(int(a[i]) ^ int(b[i]))[2:]\n\n    return res", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError('Strings should be of same length')\n    return ''.join(''.join(c) for c in zip(a, b) if c[0]!= c[1])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    for i in a:\n        if i == '1' and b[i] == '0':\n            result.append('1')\n        elif i == '0' and b[i] == '1':\n            result.append('1')\n        elif i == '1' and b[i] == '1':\n            result.append('0')\n        elif i == '0' and b[i] == '0':\n            result.append('0')\n    return ''.join(result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1':\n            if b[i] == '1':\n                result += '0'\n            else:\n                result += '1'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '0':\n            result.append('1')\n        elif a[i] == '0' and b[i] == '1':\n            result.append('0')\n        else:\n            result.append('0')\n    return ''.join(result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert len(a) == len(b)\n    result = \"\"\n    for i, x in enumerate(a):\n        y = b[i]\n        if x == '1':\n            result += y\n        else:\n            result += str(x ^ y)\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    result = []\n\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '0':\n            result.append('1')\n        elif a[i] == '0' and b[i] == '1':\n            result.append('0')\n        elif a[i] == '1' and b[i] == '1':\n            result.append('0')\n        else:\n            result.append('1')\n\n    return ''.join(result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '0':\n            result += '0'\n        elif a[i] == '0' and b[i] == '1':\n            result += '1'\n        else:\n            result += a[i]\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    result = ''\n    i, j = 0, 0\n    while i < len(a) and j < len(b):\n        result += '{}{}'.format(a[i] ^ b[j], a[i]!= b[j] and '1' or '0')\n        i += 1\n        j += 1\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i, ch_a in enumerate(a):\n        ch_b = b[i]\n        result += ch_a ^ ch_b\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # using all() here is optional but makes the code more readable\n    if all(c == '1' for c in a):\n        return '1' + string_xor(a, b)\n    if all(c == '0' for c in a):\n        return '0' + string_xor(a, b)\n\n    return ''.join(c for c in b if a[c] == '1' and b[c] == '0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join((str(int(char) ^ int(other_char)) for char in a for other_char in b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    xor_result = ''\n    for i in range(len(a)):\n        xor_result += str(int(a[i]) ^ int(b[i]))\n    return xor_result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    res = []\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            res.append('0')\n        elif a[i] == '1' and b[i] == '0':\n            res.append('1')\n        else:\n            res.append(a[i])\n\n    return ''.join(res)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError(\"Inputs should be of same length\")\n\n    ret_val = ''\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            ret_val += 1\n        else:\n            ret_val += 0\n\n    return ret_val", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # if the length of the strings a and b are not equal, return the longer\n    # one\n    if len(a)!= len(b):\n        return a + b\n    else:\n        # make a copy of each string and iterate over them\n        a_copy = a.copy()\n        b_copy = b.copy()\n        # generate a list of integers by splitting the string\n        list_a = list(a_copy)\n        list_b = list(b_copy)\n        # iterate over the list of integers and perform xor of corresponding\n        # integer of list_a and list_b\n        result = []\n        for num in list_a:\n            result.append(int(num) ^ int(list_b[num]))\n        # convert the list of integers to string and return it\n        return ''.join([str(x) for x in result])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a.count('1') == 0 or b.count('1') == 0:\n        return '0'\n    if a == '0' or b == '0':\n        return '0'\n    res = ''\n    for c in a:\n        res += c ^ b[int(c) - 1]\n    return res", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(str(int(a) ^ int(b)) for a, b in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    l = list(a)\n    l.extend(list(b))\n    l = [int(i) ^ int(j) for (i, j) in zip(l, l[1:])]\n    return ''.join([str(i) for i in l])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '0':\n            result.append('1')\n        elif a[i] == '0' and b[i] == '1':\n            result.append('0')\n        elif a[i] == '0' and b[i] == '0':\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # string_xor('010', '110') -> '100'\n    a = a.replace('0', '')\n    b = b.replace('0', '')\n    a = a.replace('1', '')\n    b = b.replace('1', '')\n    a = a.replace('11', '')\n    b = b.replace('11', '')\n    # print(a, b)\n    # print(''.join('1' if i == 1 else '0' for i in a) == ''.join('1' if i == 1 else '0' for i in b))\n    return ''.join('1' if i == 1 else '0' for i in a ^ b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    res = \"\"\n    for i, x in enumerate(a):\n        res += b[(x ^ 1) - 1]\n    return res", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # because a and b are strings, there is no need to convert them to list first\n    # it is faster to work with strings\n    xor = []\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            xor.append('0')\n        else:\n            xor.append('1')\n    return ''.join(xor)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    length = len(a)\n    return ''.join(\n        [str(int(a[i]) ^ int(b[i])) for i in range(length)]\n    )", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    # Generate intermediate strings and XOR the strings to get result\n    temp_a = [int(i) for i in a]\n    temp_b = [int(i) for i in b]\n\n    x = int(\"\".join([str(i) for i in temp_a]), 2)\n    y = int(\"\".join([str(i) for i in temp_b]), 2)\n    z = str(x ^ y)\n\n    # Remove leading zeros\n    if not z[0] == '0':\n        return z\n    return '0' + z[1:]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    # if any char is not 1 or 0, it is a special char\n    if not (any(char in ('1', '0') for char in a) and\n            any(char in ('1', '0') for char in b)):\n        return \"\"\n\n    if len(a) < len(b):\n        a = a + '0' * (len(b) - len(a))\n    elif len(a) > len(b):\n        b = b + '0' * (len(a) - len(b))\n    else:\n        return a\n\n    result = \"\"\n    for i, char_a in enumerate(a):\n        for j, char_b in enumerate(b):\n            if char_a == '1' and char_b == '1':\n                result += '1'\n            else:\n                result += '0'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    if len(a)!= len(b):\n        raise ValueError(f'Lengths of a and b are different, expected to be the same: {a}, {b}')\n\n    z = []\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '0':\n            z.append('1')\n        elif a[i] == '0' and b[i] == '1':\n            z.append('0')\n        else:\n            z.append('0')\n    return ''.join(z)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result += '1'\n        elif a[i] == '0' and b[i] == '1':\n            result += '0'\n        elif a[i] == '1' and b[i] == '0':\n            result += '1'\n        elif a[i] == '0' and b[i] == '0':\n            result += '0'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError('Length of given strings does not match')\n    ans = ''\n    for i in range(len(a)):\n        ans += a[i] ^ b[i]\n    return ans", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert len(a) == len(b)\n    return \"\".join(chr(ord(c) ^ ord(d)) for c, d in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError('Input strings must have the same length.')\n    out = ''\n    for i in range(0, len(a)):\n        if a[i]!= b[i]:\n            out += str(a[i] ^ b[i])\n        else:\n            out += '0'\n    return out", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    return ''.join([str(int(char, 2) ^ int(other_char, 2)) for char, other_char in zip(a, b)])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    x = 0\n    result = []\n    for c in a:\n        x ^= ord(c)\n    for c in b:\n        x ^= ord(c)\n    for c in range(0, len(a)):\n        result.append(str(x % 2))\n        x /= 2\n    return ''.join(result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    def _recurse(a: str, b: str) -> str:\n        if not a:\n            return b\n        if not b:\n            return a\n        if a == '0' and b == '1':\n            return '0'\n        if a == '1' and b == '0':\n            return '1'\n        return _recurse(a[1:], b[1:])\n    return _recurse(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    r = []\n    for i in a:\n        if i == '1':\n            r.append(str(int(b) ^ 1))\n        else:\n            r.append(str(int(b)))\n    return ''.join(r)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    s = a.replace('0', '')\n    t = b.replace('0', '')\n    return '0' + ''.join(t if s[i] == '0' else s[i] for i in range(len(s)))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    return \"\".join('1' if x ^ y else '0' for x, y in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    assert len(a) == len(b)\n\n    def _str(n):\n        return str(n).zfill(2)\n\n    def _bin(n):\n        return '{:08b}'.format(n)\n\n    return ''.join([_bin(int(a[i]) ^ int(b[i])) for i in range(len(a))])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert all(c in ['0', '1'] for c in a), a\n    assert all(c in ['0', '1'] for c in b), b\n\n    return ''.join(c ^ d for c, d in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    result = ''\n\n    # Get a list of bit positions of both inputs\n    a_bits = [True if (a.count('1') > a.count('0') and a.count('1') > 0) else False for a in a]\n    b_bits = [True if (b.count('1') > b.count('0') and b.count('1') > 0) else False for b in b]\n\n    # Iterate over all bit positions\n    for a_bit in a_bits:\n        for b_bit in b_bits:\n            result += str(a_bit ^ b_bit)\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n\n    for i in range(len(a)):\n        if a[i] == \"1\" and b[i] == \"1\":\n            result += \"0\"\n        elif a[i] == \"0\" and b[i] == \"1\":\n            result += \"1\"\n        else:\n            result += \"1\"\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert len(a) == len(b)\n    result = ''\n    for i, letter in enumerate(a):\n        if letter == '1':\n            result += b[i]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    xor = 0\n    for i, c in enumerate(a):\n        xor ^= ord(c) << i\n    return binascii.b2a_hex(xor).decode()", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a.split(), b.split())])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    xor = 0\n    for i in range(len(a)):\n        xor ^= int(a[i]) ^ int(b[i])\n    return chr(xor)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join([chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a))])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join([i ^ j for i, j in zip(a, b)])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(0, len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result += '0'\n        elif a[i] == '0' and b[i] == '1':\n            result += '1'\n        elif a[i] == '1' and b[i] == '0':\n            result += '1'\n        elif a[i] == '0' and b[i] == '0':\n            result += '0'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert len(a) == len(b), \"Input strings are not the same length!\"\n\n    r: str = ''\n    for i in range(len(a)):\n        r += str(int(a[i]) ^ int(b[i]))\n\n    return r", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(f'{int(c) ^ int(d)}'for c, d in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join([str((int(a) ^ int(b)) % 2) for a, b in zip(a, b)])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    output = \"\"\n    for x, y in zip(a, b):\n        output += str(int(x) ^ int(y))\n    return output", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    string_a = []\n    string_b = []\n\n    for char in a:\n        if char == '1':\n            string_a.append('x')\n        else:\n            string_a.append('-')\n\n    for char in b:\n        if char == '1':\n            string_b.append('x')\n        else:\n            string_b.append('-')\n\n    return ''.join(string_a) + ''.join(string_b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError(\"Length of the two strings should be the same\")\n    xor = ''\n    for i in range(len(a)):\n        xor += int(a[i]) ^ int(b[i])\n    return str(xor)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == b:\n        return a\n    if len(a) > len(b):\n        a, b = b, a\n    res = []\n    for x in a:\n        res.append(x ^ b[x - 1])\n    return \"\".join(res)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise Exception(\"Length of inputs must be same.\")\n    else:\n        out = \"\"\n        for i in range(len(a)):\n            if a[i] == '1' and b[i] == '0':\n                out += '1'\n            elif a[i] == '0' and b[i] == '1':\n                out += '1'\n            elif a[i] == '0' and b[i] == '0':\n                out += '0'\n            elif a[i] == '1' and b[i] == '1':\n                out += '0'\n            else:\n                raise Exception(\"One of the inputs is incorrect.\")\n        return out", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    output = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '0':\n            output += '1'\n        elif a[i] == '0' and b[i] == '1':\n            output += '0'\n        else:\n            output += a[i]\n    return output", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i, c in enumerate(a):\n        if c == '1' and b[i] == '1':\n            result += '0'\n        elif c == '0' and b[i] == '0':\n            result += '0'\n        elif c == '0' and b[i] == '1':\n            result += '1'\n        else:\n            result += c\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    l_a, l_b = len(a), len(b)\n    if l_a == l_b:\n        return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(l_a)])\n    if l_a > l_b:\n        return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(l_b)])\n    else:\n        return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(l_a)])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert all(c in string_xor.VALID_BINARY_VALUES for c in a), \\\n        '{0} is not a valid binary string'.format(a)\n    assert all(c in string_xor.VALID_BINARY_VALUES for c in b), \\\n        '{0} is not a valid binary string'.format(b)\n\n    assert len(a) == len(b), 'String lengths should be same'\n    assert len(a) % 2 == 0, 'String lengths should be even'\n\n    n = len(a)\n    ans = []\n\n    for i in range(n):\n        if a[i] == '1' and b[i] == '1':\n            ans.append('0')\n        else:\n            ans.append('1')\n    return ''.join(ans)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    xor = 0\n    for i in range(0, len(a)):\n        xor ^= ord(a[i]) ^ ord(b[i])\n    return chr(xor)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    res = 0\n    for i in range(len(a)):\n        res += int(a[i]) ^ int(b[i])\n    return res", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert len(a) == len(b)\n    result = \"\"\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '0' and b[i] == '1':\n            result += '1'\n        elif a[i] == '1' and b[i] == '0':\n            result += '0'\n        else:\n            result += a[i]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    # Convert inputs to int\n    a = int(a, 2)\n    b = int(b, 2)\n\n    # Perform XOR operation on inputs\n    c = a ^ b\n\n    # Convert c back to string\n    c = str(c)\n\n    return c", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join([\n        \"1\" if (ord(a[i]) ^ ord(b[i])) == 1 else \"0\"\n        for i in range(len(a))\n    ])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    xor_result = ''\n    for c in a:\n        if c == '1':\n            xor_result += '0'\n        else:\n            xor_result += '1'\n\n    for c in b:\n        if c == '1':\n            xor_result += '0'\n        else:\n            xor_result += '1'\n\n    return xor_result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    assert len(a) == len(b)\n    assert a.count('1') == b.count('1')\n\n    result = []\n    for i, letter in enumerate(a):\n        if letter == '1':\n            result.append('0')\n        else:\n            result.append('1')\n        if letter == b[i]:\n            result[i] = '0'\n        else:\n            result[i] = '1'\n\n    return ''.join(result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert len(a) == len(b)\n    result = ''\n    for i in range(len(a)):\n        result += a[i] ^ b[i]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError('String lengths must be equal.')\n\n    result = ''\n\n    for i, char_a in enumerate(a):\n        if char_a == '1':\n            result += str(i ^ int(b[char_a - '0']))\n        else:\n            result += '0'\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    return ''.join(c for c in a if c!= b[c - 1])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError('a and b must be of same length')\n    c = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '0':\n            c += '1'\n        elif a[i] == '0' and b[i] == '1':\n            c += '0'\n        else:\n            c += '0'\n    return c", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError('lengths of strings not equal')\n    # all characters have to be in {0, 1}\n    a = list(map(int, a))\n    b = list(map(int, b))\n    result = []\n    for i, j in zip(a, b):\n        result.append(chr(i ^ j))\n    return ''.join(result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    result = []\n    for i, c in enumerate(a):\n        if c == '1' and b[i]!= '1':\n            result.append('0')\n        elif c == '0' and b[i] == '1':\n            result.append('1')\n        else:\n            result.append(c)\n\n    return ''.join(result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n\n    for i in range(len(a)):\n        if (a[i] == '1') and (b[i] == '1'):\n            result += '0'\n        elif (a[i] == '0') and (b[i] == '0'):\n            result += '1'\n        else:\n            result += '1'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = a.lower()\n    b = b.lower()\n    # Check if number of bits is same. If not, just return 0.\n    if len(a)!= len(b):\n        return '0'\n    # Initialize list of bits in a and b.\n    a_bits = []\n    b_bits = []\n    # Iterate through each bits in a and b.\n    for i in range(0, len(a)):\n        a_bits.append(a[i])\n        b_bits.append(b[i])\n    # XOR the two strings. Return result.\n    return ''.join(a_bits[i] ^ b_bits[i] for i in range(0, len(a)))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(0, len(a)):\n        if a[i]!= b[i]:\n            result += 1\n        else:\n            result += 0\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    res = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '0':\n            res += '1'\n        elif a[i] == '0' and b[i] == '1':\n            res += '0'\n        elif a[i] == '1' and b[i] == '1':\n            res += '0'\n        elif a[i] == '0' and b[i] == '0':\n            res += '1'\n\n    return res", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join([str(int(i, 2) ^ int(j, 2)) for i, j in zip(a, b)])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join([int(c) ^ int(d) for c, d in zip(a, b)])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = list(a)\n    b = list(b)\n    a.reverse()\n    b.reverse()\n    result = \"\"\n    for x in a:\n        result += str(x ^ int(b.pop()))\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    xor = 0\n    for i in range(len(a)):\n        xor ^= ord(a[i]) ^ ord(b[i])\n    return chr(xor)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    length = len(a)\n    result = ''\n    for i in range(length):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1':\n            result += b[i]\n        else:\n            result += a[i]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    def _xor(x: str, y: str) -> str:\n        return ''.join(c ^ d for c, d in zip(x, y))\n\n    return _xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    xor_list = list(zip(a, b))\n    xor_list.sort()\n    result = \"\"\n    xor_count = 0\n    for x in xor_list:\n        if x[0] == '1':\n            xor_count += 1\n        if xor_count == len(xor_list) - 1:\n            result += '1'\n        else:\n            result += '0'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join(str(int(a) ^ int(b)) for a, b in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            result += 1\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # This is a simple implementation of XOR algorithm\n    # It supports only strings consisting of binary numbers\n    if len(a)!= len(b):\n        raise ValueError('Input strings must be of same length')\n\n    result = ''\n    for c in zip(a, b):\n        result += str(int(c[0]) ^ int(c[1]))\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(i ^ j for i, j in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError('Strings must be same length')\n\n    s = \"\"\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            s += 1\n\n    return s", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    output = ''\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            output += str(a[i] ^ b[i])\n\n    return output", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    res = ''\n    for i in range(len(a)):\n        if a[i] == '1':\n            res += b[i]\n        else:\n            res += a[i]\n\n    return res", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join('0' if i ^ j == 0 else '1' for i, j in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    def xor(s: str, t: str) -> str:\n        \"\"\" Perform XOR operation on two strings \"\"\"\n        x = ''\n        for i, c in enumerate(s + t):\n            x += c ^ chr(ord(c) ^ ord(t[i]))\n        return x\n\n    return xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    xor = 0\n    for i in range(len(a)):\n        xor += ord(a[i]) ^ ord(b[i])\n\n    return chr(xor)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join(map(str, a ^ b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert len(a) == len(b), \"Lengths must be equal\"\n    result = ''\n    for i in range(len(a)):\n        result += bin(int(a[i]) ^ int(b[i]))[2:]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    assert len(a) == len(b)\n    return ''.join(str(a[i] ^ b[i]) for i in range(len(a)))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    string = \"\"\n\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            string += a[i]\n\n    return string", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError('Need to provide strings of the same length')\n\n    result = ''\n    for i, char in enumerate(a):\n        if char == '1':\n            result += b[i]\n        else:\n            result += '0'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    if len(a)!= len(b):\n        raise Exception('Input strings are not same length')\n    result = ''\n    for i, n in enumerate(a):\n        if n == '1':\n            result += b[i]\n        else:\n            result += a[i]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert all(c in ['1', '0'] for c in a), \"a contains invalid characters\"\n    assert all(c in ['1', '0'] for c in b), \"b contains invalid characters\"\n    assert len(a) == len(b), \"input strings must be of the same length\"\n    return \"\".join(chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a)))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    res = ''\n    for i, j in zip(a, b):\n        res += str(int(i) ^ int(j))\n    return res", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = a.replace('0', '')\n    b = b.replace('0', '')\n    a = a.replace('1', '')\n    b = b.replace('1', '')\n    return ''.join(map(lambda x: str(int(x) ^ int(y)), zip(a, b)))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    xor = 0\n    for i in range(0, len(a)):\n        xor += a[i] ^ b[i]\n\n    xor_str = str(xor)\n    return xor_str", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # since we are XORing binary digits, we only need 1-bit strings\n    bit_string_a = a.replace('0', '')\n    bit_string_b = b.replace('0', '')\n    xor_bit_string = bit_string_a ^ bit_string_b\n    return '0' * xor_bit_string.count('1') + '1' * xor_bit_string.count('0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    xor = '0' * len(a)\n    for i, ch_a in enumerate(a):\n        if ch_a:\n            xor[i] = '1'\n        else:\n            xor[i] = '0'\n    for i, ch_b in enumerate(b):\n        if ch_b:\n            xor[i] = '1'\n        else:\n            xor[i] = '0'\n    return xor", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    xor_list = []\n    for i in a:\n        xor_list.append(i ^ b[i])\n    return \"\".join(str(i) for i in xor_list)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join([c if a == b else 1 - c for c in bin(ord(a))[2:]])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join([str(int(a) ^ int(b)) for a, b in zip(a, b)])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    x = 0\n    for i in range(len(a)):\n        x ^= ord(a[i]) ^ ord(b[i])\n    return chr(x)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(int(i) ^ int(j) for i, j in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = [int(b) for b in a]\n    b = [int(b) for b in b]\n    res = [int(0)] * len(a)\n    for i in range(len(a)):\n        res[i] = a[i] ^ b[i]\n    return ''.join(str(x) for x in res)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join([str((ord(c) ^ ord(d)) % 2) for c, d in zip(a, b)])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join([str(ord(a) ^ ord(b)) for a, b in zip(a, b)])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == \"1\" and b[i] == \"0\":\n            result += \"1\"\n        elif a[i] == \"0\" and b[i] == \"1\":\n            result += \"0\"\n        else:\n            result += a[i]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join(i ^ j for i, j in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    # Iterate through a string and XOR corresponding bit of other string\n    for char in a:\n        if char == '1':\n            result += b[int(char)]\n        else:\n            result += '0'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert to number\n    a = int(a, 2)\n    b = int(b, 2)\n\n    # Convert to binary\n    a_binary = bin(a)\n    b_binary = bin(b)\n\n    # Perform XOR on bits\n    xor_bits = list()\n    for i, bit_a in enumerate(a_binary):\n        bit_b = b_binary[i]\n        if bit_a == '1':\n            xor_bits.append(bit_b)\n        else:\n            xor_bits.append('1' if bit_b == '1' else '0')\n\n    # Convert back to number\n    xor = int(''.join(xor_bits), 2)\n\n    return str(xor)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    length = len(a)\n    if length == len(b):\n        return ''.join((a[i] ^ b[i]) for i in range(length))\n    else:\n        return 'Error'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not a or not b:\n        raise Exception(\"Empty strings given.\")\n    if a == b == \"\":\n        return \"\"\n\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result += '0'\n        else:\n            result += '1'\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        return None\n    res = ''\n    for i in range(len(a)):\n        res += str(a[i] ^ b[i])\n    return res", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    assert len(a) == len(b)\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    assert len(a) == len(b)\n    xor = \"\"\n    for i in range(len(a)):\n        xor += chr((ord(a[i]) ^ ord(b[i])) & 255)\n    return xor", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    if len(a)!= len(b):\n        raise ValueError('Strings must be of same length')\n\n    result = ''\n\n    for i, c in enumerate(a):\n        result += str(int(c) ^ int(b[i]))\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(chr(ord(char1) ^ ord(char2)) for char1, char2 in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    if len(a)!= len(b):\n        raise ValueError('Length of the input strings a and b must be same.')\n\n    xor_result = ''\n    for i in range(len(a)):\n        xor_result += str(int(a[i]) ^ int(b[i]))\n\n    return xor_result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError('length of a and b must be equal')\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    assert all(c in '1' + '0' for c in a), \"string_xor() : a contains invalid character\"\n    assert all(c in '1' + '0' for c in b), \"string_xor() : b contains invalid character\"\n\n    s = ''\n    for i, c in enumerate(a):\n        s += c ^ b[i]\n\n    return s", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # In this implementation, we don't store the actual value of a and b but\n    # a function that takes an index and returns the corresponding bit.\n    a = a.lower()\n    b = b.lower()\n\n    def _a(index: int) -> str:\n        if a[index] == '0':\n            return '0'\n        else:\n            return '1'\n\n    def _b(index: int) -> str:\n        if b[index] == '0':\n            return '0'\n        else:\n            return '1'\n\n    a = {i: _a(i) for i in range(len(a))}\n    b = {i: _b(i) for i in range(len(b))}\n\n    def _c(i: int) -> str:\n        return '00' if (a[i] == '1' and b[i] == '0') else '11'\n\n    def _d(i: int) -> str:\n        return '01' if (a[i] == '1' and b[i] == '1') else '10'\n\n    def _e(i: int) -> str:\n        return '10' if (a[i] == '0' and b[i] == '1') else '01'\n\n    def _f(i: int) -> str:\n        return '11' if (a[i] == '0' and b[i] == '0') else '00'\n\n    def _", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    a = list(a)\n    b = list(b)\n\n    res = []\n    for i, j in zip(a, b):\n        res.append(int(i) ^ int(j))\n\n    return ''.join(str(x) for x in res)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n\n    for i in range(len(a)):\n        result += a[i] ^ b[i]\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    x = []\n    for c in a:\n        x.append(int(c) ^ int(b))\n    return ''.join(map(str, x))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # type: (str, str) -> str\n    return \"\".join(\"1\" if int(char) ^ int(other_char) else \"0\"\n                   for char, other_char in zip(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    # Algorithm: split into binary strings and perform XOR on every bit\n    a_bin = a.replace('1', '0').replace('0', '1').split('')\n    b_bin = b.replace('1', '0').replace('0', '1').split('')\n    result = []\n\n    for i in range(len(a_bin)):\n        x = (a_bin[i] ^ b_bin[i])\n        x = str(x)\n        x = x.replace('1', '0').replace('0', '1')\n        result.append(x)\n\n    return ''.join(result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    # The length of a and b are same.\n    n = len(a)\n    # Initialize lists to store xor of each binary digit.\n    xor_digits_list = list()\n    # Initialize result string\n    result = ''\n    # Iterate over each character of a and b. The length of each character\n    # will be 1.\n    for i in range(n):\n        # Get the character from a and b.\n        a_char = a[i]\n        b_char = b[i]\n        # Perform XOR on a_char and b_char and store it in xor_digits_list.\n        xor_digits_list.append(int(a_char, 2) ^ int(b_char, 2))\n    # Convert xor_digits_list into a string.\n    xor_digits_str = ''.join(map(str, xor_digits_list))\n    # Append all the characters of xor_digits_str into result.\n    result += xor_digits_str\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    s = ''\n    for i in range(len(a)):\n        s += str((ord(a[i]) ^ ord(b[i])))\n\n    return s", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join([str(int(c, 2) ^ int(d, 2)) for c, d in zip(a, b)])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # print(f\"A: {a} B: {b}\")\n\n    ret = ''\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            ret += a[i]\n        else:\n            ret += b[i]\n    return ret", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Wrap the input in a list\n    lst1 = list(a)\n    lst2 = list(b)\n\n    # XOR with the help of a dictionary\n    result = 0\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            result += 1\n        else:\n            result -= 1\n\n    # Return the result as a string\n    return str(result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join(map(lambda x: str(int(a[x]) ^ int(b[x])), a))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    for i, j in zip(a, b):\n        if i == j:\n            result.append('0')\n        else:\n            result.append('1')\n\n    return ''.join(result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    s = \"\"\n    for c in a:\n        s += c ^ b\n    return s", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join((c ^ d for c, d in zip(a, b)))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i, j in zip(a, b):\n        result += chr(ord(i) ^ ord(j))\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # print(a, b)\n    # print(len(a), len(b))\n    # print(list(a), list(b))\n    # return 0 if len(a) == 0 else list(a[0]) ^ list(b[0])\n    xor = 0 if len(a) == 0 else list(a[0]) ^ list(b[0])\n    for i in range(1, len(a)):\n        xor = (list(a[i]) ^ list(b[i])) + xor\n    return \"\".join([str(xor)] * len(a))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))"]]