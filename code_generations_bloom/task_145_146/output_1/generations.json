[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        Write a function which compares two numbers.\n        \"\"\"\n        return sum_digits(num1) - sum_digits(num2)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        \"\"\"\n        return sum_digits(a) - sum_digits(b)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1) == 1\n        >>> sum_digits(11) == 1\n        >>> sum_digits(-1) == 1\n        >>> sum_digits(-11) == 1\n        >>> sum_digits(-12) == 2\n        \"\"\"\n        return sum([int(d) for d in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11) == -1\n        >>> compare(-1, -11) == 1\n        >>> compare(-1, 1) == -1\n        >>> compare(-11, 1) == 1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two integers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Sum digits of given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        2\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        3\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Sum digits of given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two items in the list.\n        \"\"\"\n        if a[0] == b[0]:\n            return 0\n        elif a[0] < b[0]:\n            return -1\n        else:\n            return 1\n\n    return sorted(nums, key=lambda x: sum_digits(x[0]), reverse=True) \\\n        if nums else []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def sort_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        \"\"\"\n        if not nums:\n            return []\n        nums.sort(key=sum_digits)\n        return nums\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        3\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        3\n        >>> sum_digits(-12)\n        4\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        -1\n        >>> compare(11, -11)\n        1\n        >>> compare(11, -12)\n        1\n        >>> compare(-11, -1)\n        1\n        >>> compare(-11, -11)\n        -1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, -1)\n        -1\n        >>> compare(-12, -11)\n        -1\n        >>> compare(-12, -12)\n        1\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        if nums else []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1, 0 or 1 if a is less than, equal to or greater than b.\n        \"\"\"\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    def compare_with_index(a, b):\n        \"\"\"\n        Compare two numbers and return -1, 0 or 1 if a is less than, equal to or greater than b.\n        \"\"\"\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        nums.sort(key=sum_digits, reverse=True)\n        return nums\n\n    if not nums:\n        return []\n    else:\n        return sort_by_points(nums)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, 1)\n        0\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-1, 1)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-11, 1)\n        1\n        >>> compare(-11, -1)\n        1\n        >>> compare(-12, 1)\n        -1\n        >>> compare(-12, -1)\n        -1\n        >>> compare(-12, -11)\n        1\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1, 0 or 1 if a is less than, equal to or\n        greater than b.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        2\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        3\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(11, 1)\n        1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-11, -1)\n        1\n        >>> compare(-12, 1)\n        -1\n        >>> compare(1, -12)\n        1\n        \"\"\"\n        return sum_digits(num1) - sum_digits(num2)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        >>> digit_sum(1)\n        1\n        >>> digit_sum(11)\n        1\n        >>> digit_sum(-1)\n        1\n        >>> digit_sum(-11)\n        1\n        >>> digit_sum(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        1\n        \"\"\"\n        return digit_sum(a) - digit_sum(b)\n\n    return sorted(nums, key=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of the given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Write a function which compares two given integers.\n        \"\"\"\n        if a == b:\n            return 0\n        elif a > b:\n            return 1\n        else:\n            return -1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        if nums else []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-11, -11)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, 1)\n        -1\n        >>> compare(-12, 11)\n        1\n        >>> compare(-12, -1)\n        -1\n        >>> compare(-12, -11)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two integers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two integers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(-11, 1)\n        -1\n        >>> compare(-11, -1)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, 1)\n        1\n        >>> compare(-12, 11)\n        -1\n        >>> compare(-12, -1)\n        -1\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        if nums else []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Sum digits of a number\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1, 0 or 1 if a is less than, equal to or greater than b.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        -1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-11, -1)\n        1\n        >>> compare(-11, -11)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, 1)\n        -1\n        >>> compare(-12, 11)\n        -1\n        >>> compare(-12, -1)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1, 0 or 1 if a < b, a == b or a > b.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def sort_func(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given integer.\n        \"\"\"\n        return sum_digits(num)\n\n    return sorted(nums, key=sort_func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        3\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        3\n        >>> sum_digits(-12)\n        4\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        1\n        >>> compare(1, -1)\n        -1\n        >>> compare(1, -11)\n        -1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        if nums else []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def sort_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        \"\"\"\n        sorted_nums = sorted(nums, key=sum_digits)\n        return sorted_nums\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        if sum_digits(a) > sum_digits(b):\n            return 1\n        elif sum_digits(a) < sum_digits(b):\n            return -1\n        else:\n            return 0\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Write a function which compares two given integers.\n        \"\"\"\n        return sum_digits(a) - sum_digits(b)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(11, 1)\n        1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-12, 1)\n        -1\n        >>> compare(1, -12)\n        1\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two items in the list.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two integers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        >>> digit_sum(1)\n        1\n        >>> digit_sum(11)\n        1\n        >>> digit_sum(-1)\n        -1\n        >>> digit_sum(-11)\n        -1\n        >>> digit_sum(-12)\n        -2\n        \"\"\"\n        return sum([int(d) for d in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        if digit_sum(a) == digit_sum(b):\n            return 0\n        elif digit_sum(a) > digit_sum(b):\n            return 1\n        else:\n            return -1\n\n    return sorted(nums, key=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        3\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        3\n        >>> sum_digits(-12)\n        4\n        \"\"\"\n        return sum([int(d) for d in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, 1)\n        -1\n        >>> compare(-1, 1)\n        1\n        >>> compare(-1, 11)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum([int(i) for i in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True)</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True)</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum([int(digit) for digit in str(num)])\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(11, 1)\n        1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-12, 1)\n        -1\n        >>> compare(1, -12)\n        1\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        2\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        3\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        -1\n        >>> compare(11, -11)\n        1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1, 0 or 1 if a < b, a == b or a > b.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given number.\n        \"\"\"\n        if num < 0:\n            return sum_digits(-num)\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Write a function which compares two numbers and returns -1 if a < b,\n        0 if a == b, and 1 if a > b.\n        \"\"\"\n        if a < b:\n            return -1\n        elif a == b:\n            return 0\n        else:\n            return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        if nums else []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Returns the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Returns -1 if a < b, 1 if a > b and 0 if a == b.\n        \"\"\"\n        if digit_sum(a) < digit_sum(b):\n            return -1\n        elif digit_sum(a) > digit_sum(b):\n            return 1\n        else:\n            return 0\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        1\n        \"\"\"\n        return sum_digits(num1) - sum_digits(num2)\n\n    return sorted(nums, key=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        -1\n        >>> compare(11, -11)\n        1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Returns the sum of digits of the given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Returns -1 if a < b, 0 if a == b, 1 if a > b.\n        \"\"\"\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(-11, 1)\n        -1\n        >>> compare(-11, -1)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, 1)\n        1\n        >>> compare(-12, 11)\n        -1\n        >>> compare(-12, -1)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1 if a < b, 1 if a > b and 0 if a == b.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1 if a < b,\n        0 if a == b, and 1 if a > b.\n        \"\"\"\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two items in the list.\n        \"\"\"\n        if a[0] == b[0]:\n            return a[1] - b[1]\n        else:\n            return a[0] - b[0]\n\n    return sorted(nums, key=compare, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if not nums:\n            return []\n        else:\n            return sorted(nums, key=sum_digits, reverse=True)\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum([int(d) for d in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        -1\n        >>> compare(11, -11)\n        1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given integer.\n        \"\"\"\n        if num == 0:\n            return 0\n        return sum(int(d) for d in str(num))\n\n    def sort_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        \"\"\"\n        if not nums:\n            return []\n        nums.sort(key=sum_digits)\n        return nums\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1) == 1\n        >>> sum_digits(11) == 1\n        >>> sum_digits(-1) == 1\n        >>> sum_digits(-11) == 1\n        >>> sum_digits(-12) == 2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11) == -1\n        >>> compare(11, 1) == 1\n        >>> compare(-1, -11) == 1\n        >>> compare(-11, -1) == -1\n        >>> compare(-12, 1) == -1\n        >>> compare(1, -12) == 1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-11, -11)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, 1)\n        -1\n        >>> compare(-12, 11)\n        1\n        >>> compare(-12, -1)\n        1\n        >>> compare(-12, -11)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1) == 1\n        >>> sum_digits(11) == 1\n        >>> sum_digits(-1) == 1\n        >>> sum_digits(-11) == 1\n        >>> sum_digits(-12) == 2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11) == -1\n        >>> compare(11, 1) == 1\n        >>> compare(-1, -11) == -1\n        >>> compare(-11, -1) == 1\n        >>> compare(-12, 1) == -1\n        >>> compare(1, -12) == 1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return digit_sum(a) - digit_sum(b)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        2\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        3\n        \"\"\"\n        return sum([int(d) for d in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        -1\n        >>> compare(11, -11)\n        1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers according to their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        3\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        3\n        >>> sum_digits(-12)\n        4\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        if sum_digits(a) == sum_digits(b):\n            return 0\n        elif sum_digits(a) > sum_digits(b):\n            return 1\n        else:\n            return -1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-11, -11)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, 1)\n        1\n        >>> compare(-12, 11)\n        -1\n        >>> compare(-12, -1)\n        -1\n        >>> compare(-12, -11)\n        1\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1, 0 or 1 if a < b, a == b or a > b.\n        \"\"\"\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(-11, 1)\n        -1\n        >>> compare(-11, -1)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, 1)\n        1\n        >>> compare(-12, 11)\n        -1\n        >>> compare(-12, -1)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        2\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        3\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(-11, 1)\n        -1\n        >>> compare(-11, -1)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, 1)\n        1\n        >>> compare(-12, -1)\n        -1\n        >>> compare(-12, -11)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two integers based on their sum of digits.\n        \"\"\"\n        if sum_digits(a) > sum_digits(b):\n            return 1\n        elif sum_digits(a) < sum_digits(b):\n            return -1\n        else:\n            return 0\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1) == 1\n        >>> sum_digits(11) == 1\n        >>> sum_digits(-1) == 1\n        >>> sum_digits(-11) == 1\n        >>> sum_digits(-12) == 2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11) == -1\n        >>> compare(11, 1) == 1\n        >>> compare(-1, -11) == 1\n        >>> compare(-11, -1) == -1\n        >>> compare(-12, 1) == -1\n        >>> compare(1, -12) == 1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two items in the list.\n        \"\"\"\n        if sum_digits(a) > sum_digits(b):\n            return 1\n        elif sum_digits(a) < sum_digits(b):\n            return -1\n        else:\n            return 0\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=sum_digits)\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1) == 1\n        >>> sum_digits(11) == 1\n        >>> sum_digits(-1) == 1\n        >>> sum_digits(-11) == 1\n        >>> sum_digits(-12) == 2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11) == -1\n        >>> compare(11, 1) == 1\n        >>> compare(-1, -11) == -1\n        >>> compare(-11, -1) == 1\n        >>> compare(-12, 1) == -1\n        >>> compare(1, -12) == 1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given integer.\n        \"\"\"\n        if num == 0:\n            return 0\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Write a function which compares two integers and returns\n        -1 if a < b, 0 if a == b, and 1 if a > b.\n        \"\"\"\n        return sum_digits(a) - sum_digits(b)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, 1)\n        -1\n        >>> compare(-11, 1)\n        1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(1, -11)\n        -1\n        >>> compare(1, -1)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        2\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-11, -11)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, -1)\n        -1\n        >>> compare(-12, -11)\n        1\n        >>> compare(-12, -12)\n        0\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        return sum_digits(num1) - sum_digits(num2)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        -1\n        >>> compare(11, -11)\n        1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True)</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two items and return -1, 0 or 1 if a is less than, equal to or\n        greater than b respectively.\n        \"\"\"\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        if nums else []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers according to their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        Compare two numbers and return -1, 0 or 1 if the first number\n        is less than, equal to or greater than the second number.\n        \"\"\"\n        return sum_digits(num1) - sum_digits(num2)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1 if a < b,\n        0 if a == b, and 1 if a > b.\n        \"\"\"\n        if a < b:\n            return -1\n        elif a == b:\n            return 0\n        else:\n            return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        3\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        3\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(11, -1)\n        1\n        >>> compare(-11, 1)\n        -1\n        >>> compare(-11, 12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        if nums else []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Returns the sum of digits of given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compares two numbers and returns -1, 0 or 1 based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two integers and return -1, 0 or 1 if a < b, a == b or a > b.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum([int(d) for d in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1 if a < b, 1 if a > b and 0 if a == b.\n        \"\"\"\n        if digit_sum(a) < digit_sum(b):\n            return -1\n        elif digit_sum(a) > digit_sum(b):\n            return 1\n        else:\n            return 0\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Sum of digits of given number.\n        \"\"\"\n        return sum([int(d) for d in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        if sum_digits(a) == sum_digits(b):\n            return cmp(a, b)\n        else:\n            return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        if a == b:\n            return 0\n        elif sum_digits(a) > sum_digits(b):\n            return 1\n        else:\n            return -1\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum([int(d) for d in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(-11, 1)\n        -1\n        >>> compare(-11, -1)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, 1)\n        1\n        >>> compare(-12, 11)\n        -1\n        >>> compare(-12, -1)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-11, -11)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, 1)\n        -1\n        >>> compare(-12, 11)\n        -1\n        >>> compare(-12, -1)\n        1\n        >>> compare(-12, -11)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        -1\n        >>> compare(11, -11)\n        1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Write a function which compares two numbers and returns\n        -1 if a < b, 0 if a == b, and 1 if a > b.\n        \"\"\"\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    def sort_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum_digits(num), reverse=True)\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1 if a < b,\n        1 if a > b and 0 if a == b.\n        \"\"\"\n        if a == b:\n            return 0\n        elif sum_digits(a) < sum_digits(b):\n            return -1\n        else:\n            return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum([int(d) for d in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-11, 1)\n        1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-11, 11)\n        -1\n        >>> compare(-11, 1)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-11, -11)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, 1)\n        -1\n        >>> compare(-12, 11)\n        1\n        >>> compare(-12, -1)\n        1\n        >>> compare(-12, -11)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1 if a < b, 0 if a == b and 1 if a > b.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        3\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        3\n        >>> sum_digits(-12)\n        4\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        if nums else []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Returns the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compares two numbers and returns -1, 0 or 1.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        1\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their digit sum.\n        \"\"\"\n        return digit_sum(a) - digit_sum(b)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-11, -11)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, 1)\n        -1\n        >>> compare(-12, 11)\n        -1\n        >>> compare(-12, -1)\n        1\n        >>> compare(-12, -11)\n        1\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1, 0 or 1 if a is less than, equal to or greater than b.\n        \"\"\"\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum_digits(num), reverse=True)\n\n    if not nums:\n        return []\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def sort_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        \"\"\"\n        if not nums:\n            return []\n        nums.sort(key=sum_digits)\n        return nums\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        1\n        \"\"\"\n        return sum_digits(num1) - sum_digits(num2)\n\n    return sorted(nums, key=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum([int(d) for d in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Returns the sum of digits of given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two integers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(11, 1)\n        1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-12, 1)\n        -1\n        >>> compare(1, -12)\n        1\n        \"\"\"\n        return sum_digits(num1) - sum_digits(num2)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-11, -11)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, 1)\n        -1\n        >>> compare(-12, 11)\n        -1\n        >>> compare(-12, -1)\n        1\n        >>> compare(-12, -11)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        3\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        3\n        >>> sum_digits(-12)\n        4\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(11, 1)\n        1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-11, -1)\n        1\n        >>> compare(-12, 1)\n        -1\n        >>> compare(1, -12)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=sum_digits)\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1) == 1\n        >>> sum_digits(11) == 1\n        >>> sum_digits(-1) == 1\n        >>> sum_digits(-11) == 1\n        >>> sum_digits(-12) == 2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11) == -1\n        >>> compare(11, 1) == 1\n        >>> compare(-1, -11) == 1\n        >>> compare(-11, -1) == -1\n        >>> compare(-12, 1) == -1\n        >>> compare(1, -12) == 1\n        \"\"\"\n        return sum_digits(a) - sum_digits(b)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        2\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        3\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        -1\n        >>> compare(11, -11)\n        1\n        >>> compare(11, -12)\n        1\n        >>> compare(-11, -1)\n        1\n        >>> compare(-11, -11)\n        -1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, -1)\n        -1\n        >>> compare(-12, -11)\n        -1\n        >>> compare(-12, -12)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Returns the sum of digits of the given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Returns -1 if a < b, 0 if a == b, 1 if a > b.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their digit sum.\n        \"\"\"\n        return digit_sum(a) - digit_sum(b)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        -1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-11, -1)\n        1\n        >>> compare(-11, -11)\n        1\n        >>> compare(-11, -12)\n        1\n        >>> compare(-12, 1)\n        -1\n        >>> compare(-12, 11)\n        -1\n        >>> compare(-12, -1)\n        1\n        >>> compare(-12, -11)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        -1\n        >>> compare(11, -11)\n        1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        if a == b:\n            return 0\n        if a > b:\n            return 1\n        return -1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        if nums else []\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1 if a < b, 0 if a == b and 1 if a > b.\n        \"\"\"\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        if nums else []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        2\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum([int(i) for i in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-11, -11)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, -1)\n        1\n        >>> compare(-12, -11)\n        -1\n        >>> compare(-12, -12)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two items in the list.\n        \"\"\"\n        if sum_digits(a) > sum_digits(b):\n            return 1\n        elif sum_digits(a) < sum_digits(b):\n            return -1\n        else:\n            return 0\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        Write a function which compares two numbers.\n        \"\"\"\n        return sum_digits(num1) - sum_digits(num2)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1, 0 or 1 if a is less than, equal to or greater than b.\n        \"\"\"\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        if nums else []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two items in the list.\n        \"\"\"\n        if a[0] == b[0]:\n            return 0\n        elif a[0] > b[0]:\n            return 1\n        else:\n            return -1\n\n    return sorted(nums, key=lambda num: (sum_digits(num), num), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Returns the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sorts the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=sum_digits)\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return -1, 0 or 1 if a < b, a == b or a > b.\n        \"\"\"\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        if nums else []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-11, -11)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, 1)\n        1\n        >>> compare(-12, 11)\n        -1\n        >>> compare(-12, -1)\n        -1\n        >>> compare(-12, -11)\n        1\n        \"\"\"\n        return cmp(sum_digits(num1), sum_digits(num2))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers according to their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        if nums else []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        2\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-11, -11)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, -1)\n        1\n        >>> compare(-12, -11)\n        -1\n        >>> compare(-12, -12)\n        1\n        \"\"\"\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True)</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def sort_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        \"\"\"\n        sorted_nums = sorted(nums, key=sum_digits)\n        return sorted_nums\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        2\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        3\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Returns the sum of digits of the given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Returns -1 if a < b, 1 if a > b, and 0 if a == b.\n        \"\"\"\n        if a == b:\n            return 0\n        elif digit_sum(a) < digit_sum(b):\n            return -1\n        else:\n            return 1\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        if nums else []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum([int(d) for d in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        3\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        -1\n        >>> compare(11, -11)\n        1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-11, -1)\n        -1\n        >>> compare(-11, -11)\n        1\n        >>> compare(-11, -12)\n        -1\n        >>> compare(-12, -1)\n        -1\n        >>> compare(-12, -11)\n        -1\n        >>> compare(-12, -11)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        -1\n        >>> compare(11, -11)\n        1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        1\n        >>> compare(-1, -12)\n        -1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def sort_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        \"\"\"\n        if not nums:\n            return []\n        nums.sort(key=sum_digits)\n        return nums\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        2\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        3\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        -1\n        >>> compare(11, -11)\n        1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-11, -1)\n        1\n        >>> compare(-11, -11)\n        -1\n        >>> compare(-11, -12)\n        1\n        >>> compare(-12, -1)\n        -1\n        >>> compare(-12, -11)\n        1\n        >>> compare(-12, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        1\n        \"\"\"\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        if nums else []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        if sum_digits(a) > sum_digits(b):\n            return 1\n        elif sum_digits(a) < sum_digits(b):\n            return -1\n        else:\n            return 0\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        2\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(1, 11)\n        -1\n        >>> compare(1, -1)\n        1\n        >>> compare(1, -11)\n        1\n        >>> compare(1, -12)\n        -1\n        >>> compare(11, -1)\n        1\n        >>> compare(11, -11)\n        -1\n        >>> compare(11, -12)\n        -1\n        >>> compare(-1, -11)\n        -1\n        >>> compare(-1, -12)\n        1\n        >>> compare(-11, -12)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)\n</s>"]]