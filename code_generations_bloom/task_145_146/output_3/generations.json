[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # write your code here\n    result = []\n    for n in nums:\n        s = sum(int(i) for i in str(n))\n        # s will contain the sum of the digits of n\n        # so -1 will be stored as 0\n        # convert n to list\n        n_list = list(n)\n        # sort n_list based on the sum of its digits\n        n_list.sort(key=lambda x: x - int(x))\n        # sort n based on the order of n_list\n        # the result will be in ascending order\n        result.append(sum(n_list))\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def by_points(num):\n        digits = [int(num) for num in str(num)]\n        digits.sort(reverse=True)\n        return sum(digits)\n    return sorted(nums, key=by_points)\n\nA:\n\nYou can use the reversed sorted trick:\nfrom functools import cmp_to_key", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(d) for d in str(x)), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key = lambda x: int(x))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted_nums = sorted(nums)\n    digits = [int(i) for i in str(sorted_nums[0])]\n    points = [0 for i in range(len(digits))]\n    for digit in digits:\n        points[digit-1] += 1\n    for i, num in enumerate(sorted_nums):\n        sorted_nums[i] = digits[sum([points[j] for j in range(len(digits))])]\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n\n    point_list = sorted([int(nums.pop(0).lstrip('-'))] + [sum(map(int, nums)) for nums in nums.split('-')])\n    return [nums for nums in point_list if nums > 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    result = []\n\n    for num in nums:\n        if num < 0:\n            sign = -1\n        else:\n            sign = 1\n\n        value = 0\n        for i in range(len(str(abs(num)))):\n            value += sign * int(str(abs(num))[i])\n        result.append((value, num))\n\n    result.sort()\n\n    for i in range(len(result)):\n        result[i] = result[i][1]\n\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit_sum(n):\n        return sum(map(int, str(n)))\n\n    def same_sum_index(a, b):\n        return digit_sum(a) - digit_sum(b) - abs(a - b)\n\n    return sorted(nums, key=same_sum_index)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Get the sum of digits for each number\n    # The sum of digits is computed as the sum of all digits (i.e. 0..9)\n    # from the number, converted to integer, using the eval function.\n    # The eval function evaluates a string as Python code.\n    sum_of_digits = [int(eval(str(num) + str(num))) for num in nums]\n    # We reverse the list since the numbers will be sorted in descending order\n    sum_of_digits.reverse()\n\n    # The new sorted list will be stored here\n    new_list = []\n    # Iterate over all numbers\n    for num in nums:\n        # We need to keep track of the sum of digits\n        # which is the highest so far, in case we find\n        # a number with a higher sum of digits.\n        highest_sum = 0\n        # Iterate over the digits\n        for digit in str(num):\n            # For each digit, we need to get the sum of digits\n            # based on the sum of digits of the current number.\n            # To do that, we use the get method of the digits\n            # list (representing the sum of digits).\n            sum_of_digits_list = list(sum_of_digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        result = 0\n        while num:\n            result += num % 10\n            num //= 10\n        return result\n\n    def get_index(num):\n        \"\"\"Returns index of num in input list.\"\"\"\n        index = 0\n        for i in range(len(nums)):\n            if nums[i] == num:\n                return index\n            index += 1\n        return -1\n\n    nums = sorted(nums, key=lambda num: sum_digits(num))\n    return [num for num in nums if get_index(num) >= 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: int(str(x)[::-1]), reverse=True)\n    # sort based on the index in the original list\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(x):\n        return sum(str(x)[i] for i in range(len(str(x))))\n\n    def get_index(x):\n        return nums.index(x)\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), get_index(x)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Converts a given integer to sum of digits of its integer part.\n\n        For example:\n        >>> digit_sum(11)\n        2\n        >>> digit_sum(111)\n        2\n        >>> digit_sum(-11)\n        1\n        >>> digit_sum(-111)\n        1\n        \"\"\"\n        num_str = str(num)\n        integer_part = int(num_str)\n        sum_of_digits = 0\n        while integer_part!= 0:\n            sum_of_digits += integer_part % 10\n            integer_part //= 10\n        return sum_of_digits\n\n    sorted_nums = sorted(nums, key=digit_sum)\n\n    # If there are several items with the same sum of digits,\n    # order them according to their index in original list\n    for i in range(len(nums)):\n        sorted_nums[i] = nums[i]\n\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key = sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def by_point(item):\n        return sum(int(digit) for digit in str(item))\n\n    def order(nums):\n        return sorted(nums, key = by_point)\n\n    return order(nums)\n\nnums = [-1, -11, 12, 1, 11, -12, -8]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Complete this function\n    # I have no idea how to approach this problem, have no idea what to do with the\n\n    # so I just copy paste code from my classmate\n    # and just comment them out\n    return sorted(nums, key=sum_digits, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    nums.sort(key = sum_of_points)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(i) for i in nums]\n    if not nums:\n        return nums\n    sorted_nums = []\n    while nums:\n        digit_sum = sum(int(i) for i in str(nums[0]))\n        sorted_nums.append(nums.pop(0))\n        for i, num in enumerate(nums):\n            if sum(int(i) for i in str(num)) == digit_sum:\n                nums.pop(i)\n    sorted_nums.extend(nums)\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    numbers = sorted(nums, key=lambda n: sum(map(int, str(n))))\n    for i in range(0, len(nums)):\n        numbers[i] = numbers[i] - str(i)\n    return numbers", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=sum_digits, reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: sum(x))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def point(num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        return sum(i for i in str(num))\n\n    nums = list(nums)\n\n    # sort the items in nums according to their points\n    nums.sort(key=point)\n\n    # now, based on the sorted items, re-sort the original list\n    return sorted(nums, key=nums.index)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Write a helper function which sums the digits of the given\n        integer.\n\n        For example:\n        >>> sum_of_digits(1)\n        1\n        >>> sum_of_digits(-11)\n        1\n        >>> sum_of_digits(12)\n        2\n        \"\"\"\n        digits = [int(digit) for digit in str(num)]\n        return sum(digits)\n\n    result = sorted(nums, key=sum_of_digits)\n    if not nums:\n        return []\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # write your code here\n    if len(nums) == 0:\n        return []\n    def sum_digit(x):\n        if x < 0:\n            x = -x\n        return sum(int(d) for d in str(x))\n    def digit_sum(x):\n        if x < 0:\n            x = -x\n        return sum(int(d) for d in str(x))\n    l = len(nums)\n    if l == 1:\n        return nums\n    n = sorted(nums, key=lambda x: sum_digit(x))\n    out = []\n    for i in range(l):\n        d = digit_sum(n[i])\n        if d > 0:\n            for j in range(i):\n                if digit_sum(n[j]) < d:\n                    out.append(n[j])\n                    n[j] = n[i]\n                    n[i] = n[j]\n    out.append(n[l - 1])\n    return out", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        sum = 0\n        while num!= 0:\n            sum += num % 10\n            num //= 10\n        return sum\n\n    return sorted(nums, key=lambda num: sum_digits(num))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digits(num):\n        return map(int, str(num))\n\n    def digit_sum(num):\n        return sum(digits(num))\n\n    def is_equal(a, b):\n        return digit_sum(a) == digit_sum(b)\n\n    def key_func(num):\n        return (digit_sum(num), num, num in nums)\n\n    return sorted(nums, key=key_func, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] = nums[i] - int(nums[i])\n        nums[i] = str(nums[i])\n\n    return sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # write code here", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digitsum(num):\n        \"\"\"\n        >>> digitsum(1)\n        1\n        >>> digitsum(11)\n        1\n        >>> digitsum(-1)\n        1\n        >>> digitsum(-11)\n        -1\n        >>> digitsum(-12)\n        -2\n        \"\"\"\n        sum_digits = 0\n        while num!= 0:\n            sum_digits += num % 10\n            num //= 10\n        return sum_digits\n\n    return sorted(nums, key=lambda num: digitsum(num))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # check for empty list\n    if not nums:\n        return []\n\n    # list for collecting sorted numbers\n    ordered_list = []\n\n    # iterate over list\n    for num in nums:\n        # get sum of digits of current number\n        digit_sum = sum([int(d) for d in str(num)])\n        # get index of current number in original list\n        index = nums.index(num)\n        # if number has no digits\n        if digit_sum == 0:\n            # add number to list\n            ordered_list.append(num)\n        # if number has only one digit\n        elif digit_sum == 1:\n            # add number to list, if its index is even\n            if index % 2 == 0:\n                ordered_list.append(num)\n        # if number has more than one digit\n        else:\n            # find out if number should be added to list\n            if digit_sum < 10:\n                # add number to list if its index is even\n                if index % 2 == 0:\n                    ordered_list.append(num)\n            # add number to list if its index is odd\n            else:\n                if index % 2 == 1:\n                    ordered_list.append(num)\n\n    # return list\n    return ordered_list\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Returns the sum of digits of given number.\n\n        >>> digit_sum(12) == 3\n        >>> digit_sum(0) == 0\n        \"\"\"\n        return sum(int(i) for i in str(num))\n\n    def get_key(num):\n        \"\"\"\n        Return (sum of digits, index in the given list) for the given number.\n        This is used for sorting.\n\n        >>> get_key(11) == (3, 1)\n        >>> get_key(12) == (3, 2)\n        >>> get_key(-1) == (1, 4)\n        >>> get_key(-11) == (1, 3)\n        >>> get_key(0) == (0, 5)\n        \"\"\"\n        return digit_sum(num), num\n\n    nums.sort(key=get_key)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    return sorted(\n        nums,\n        key=lambda num: sum(int(n) for n in str(num).split('')),\n        reverse=False\n    )", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: sum(int(digit) for digit in str(x)))\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=sum_of_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    points = [0] * 10\n    for n in nums:\n        points[n % 10] += n // 10\n    sorted_nums = nums[:]\n    for i, p in enumerate(points):\n        # if two or more numbers have the same point, use their index in original list\n        sorted_nums[i] = sorted_nums[(nums.index(n) for n in nums if p == points[n])[0]]\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(map(int, nums))\n    # convert to string to convert to int\n    nums = map(str, nums)\n    # sort based on sum of digits\n    nums.sort(key=lambda x: sum(int(y) for y in x))\n    # convert back to int\n    return [int(num) for num in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_of_digits(x):\n        \"\"\"\n        This function takes an integer as input\n        and returns the sum of digits in that number.\n        \"\"\"\n\n        if x == 0:\n            return 0\n        else:\n            return sum(map(int, str(x)))\n\n    def get_index(x):\n        \"\"\"\n        Returns the index of the input integer\n        in original list.\n\n        For example:\n        >>> get_index(-1)\n        0\n        \"\"\"\n        try:\n            return nums.index(x)\n        except ValueError:\n            return -1\n\n    nums = sorted(nums, key=sum_of_digits)\n    result = [-1, -11, 1, -12, 11]\n    for i in range(len(nums)):\n        result[i] = nums[i]\n    result = sorted(result, key=lambda x: get_index(x), reverse=True)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def __cal_digit_sum(num):\n        if num < 0:\n            num = -num\n        return sum(int(digit) for digit in str(num) if digit)\n\n    def __sort_by_digit_sum(xs):\n        sorted_list = sorted(xs, key=__cal_digit_sum)\n        return sorted_list\n\n    return __sort_by_digit_sum(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    result = []\n    while nums:\n        current = nums.pop(0)\n        result.append(current)\n        while len(current) > 0:\n            current = current[-1]\n            nums.append(current)\n\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n\n    for num in nums:\n        if num < 0:\n            num = abs(num)\n        digits = [int(digit) for digit in str(num)]\n        digits.reverse()\n        for digit in digits:\n            result.append(num // digit)\n        num = num % 10\n\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    #  TODO: The solution below is not optimal, review it.\n    nums = sorted(nums, key=lambda x: sum(int(x) for x in str(x)))\n    if nums:\n        for i in range(len(nums) - 1):\n            if nums[i]!= nums[i + 1]:\n                return [nums[i]] + order_by_points(nums[i + 1:])\n    return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # The input list is sorted in descending order by points\n    # Convert the input list to digits to calculate the sum of each number\n    # and sort the list based on the sum\n    if not nums:\n        return []\n    nums = map(int, nums)\n    return sorted(nums, key=lambda num: sum(map(int, str(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    # create a dictionary for storing the points of each number\n    points = dict()\n    for number in nums:\n        digits = str(number).split('')\n        points[digits[0]] = sum(int(digit) for digit in digits[1:])\n\n    # get the sum of digits of each number\n    points_list = list(points.values())\n\n    # sort the points in ascending order\n    points_list.sort()\n\n    # create a list with the sorted numbers\n    result = []\n    for point in points_list:\n        # get the sorted numbers with the given sum of their digits\n        numbers = [num for num, digit in points.items() if digit == point]\n        # if the list of sorted numbers is not empty, append them\n        # in the result list, and sort them based on their index\n        if numbers:\n            result += sorted(numbers, key=lambda num: nums[num])\n    return result\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    def cmp(a, b):\n        return sum_digits(a) - sum_digits(b)\n\n    return sorted(nums, cmp=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=sum_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # The following function is a modified version of\n    # https://leetcode.com/discuss/15905/python-solution-to-sort-integers-by-sum-of-digits\n    # by @lena\n    def f(x):\n        digits = [int(d) for d in str(x)]\n        a = sum(digits)\n        return (a, x)\n\n    return sorted(nums, key = f)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    count = 0\n    ans = []\n    for item in nums:\n        count += 1\n        ans.append(item)\n    sorted_num = []\n    for i in range(count):\n        temp = []\n        for j in range(count):\n            temp.append(nums[j])\n        nums = temp\n        num = sum([int(x) for x in str(nums[i])])\n        if num not in sorted_num:\n            sorted_num.append(num)\n    sorted_num.sort()\n    for num in sorted_num:\n        for i in range(count):\n            temp = []\n            for j in range(count):\n                temp.append(nums[j])\n            nums = temp\n            num = sum([int(x) for x in str(nums[i])])\n            if num == num:\n                ans[i] = nums[i]\n    return ans", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(map(int, nums))\n    if not nums:\n        return []\n    nums.sort(key=lambda n: sum(map(int, str(n))), reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    pass", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    nums = sorted(nums)\n    if len(nums) == 0:\n        return []\n    for num in nums:\n        sum = sum(map(int, num))\n        if sum == 0:\n            return []\n        elif sum < 0:\n            return []\n        else:\n            return nums[nums.index(num)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of the digits of the given number.\n        \"\"\"\n        num_str = str(num)\n        return sum(int(n) for n in num_str)\n\n    sorted_nums = sorted(nums, key=sum_digits)\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(n):\n        \"\"\"\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(11)\n        3\n        >>> sum_digits(-2)\n        0\n        >>> sum_digits(10)\n        1\n        >>> sum_digits(0)\n        0\n        \"\"\"\n        total = 0\n        while n!= 0:\n            total += n % 10\n            n //= 10\n        return total\n\n    def ordered_by_points(nums):\n        \"\"\"\n        Order list of integers by sum of their digits.\n        >>> ordered_by_points([1, 11, -1, -11, -12])\n        [-1, -11, 1, -12, 11]\n        \"\"\"\n        nums.sort(key = lambda n: sum_digits(n))\n        return nums\n\n    return ordered_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    if len(nums) < 2:\n        return nums\n    for i, n in enumerate(nums):\n        if n == 0:\n            continue\n        digit_sum = sum(map(int, str(n)))\n        if digit_sum:\n            result.append((digit_sum, n, i))\n\n    result.sort()\n    result.reverse()\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in xrange(0, len(nums)):\n        for j in xrange(0, len(nums)):\n            if nums[i] > nums[j]:\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n\n    result = []\n    for i in xrange(0, len(nums)):\n        temp = 0\n        while i < len(nums):\n            temp += nums[i]\n            i += 1\n\n        result.append(temp)\n\n    result.sort(reverse=True)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    if len(nums) == 0:\n        return result\n    for i in range(len(nums)):\n        nums[i] = nums[i] - nums[i] // 10 * 10\n        if nums[i] == 0:\n            nums[i] = nums[i] * 10\n        else:\n            nums[i] = nums[i] % 10\n    for i in range(len(nums)):\n        nums[i] = nums[i] + nums[i] // 10 * 10\n        result.append(nums[i])\n    result.sort()\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Find the sum of digits in given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on the sum of their digits.\n        \"\"\"\n        return cmp(digit_sum(a), digit_sum(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    for i in nums:\n        sum_digits = sum(map(int, str(i)))\n        if sum_digits!= 0:\n            order.append(sum_digits)\n            index.append(i)\n\n    order.sort()\n    index.sort(key=lambda x: order.index(x))\n    return index", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n\n    for num in nums:\n        if num == 0:\n            break\n\n        n = int(str(num)[-1])\n        s = 0\n        for i in reversed(range(n)):\n            s += int(str(num)[-(n-i)-1])\n\n        if s > 0:\n            result.append(num)\n\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda n: sum(map(int, str(n))), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(str(num).split('')))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_digit_sum(num):\n        return sum(map(int, str(num)))\n\n    def sort_by_digit_sum(nums):\n        return sorted(nums, key=lambda num: get_digit_sum(num))\n\n    if not nums:\n        return nums\n\n    # sort by digit sum\n    sorted_nums_by_digit_sum = sort_by_digit_sum(nums)\n    # create new list with sorted nums\n    nums_sorted = sorted_nums_by_digit_sum\n\n    # order original list based on similar digit sums\n    ordered_list = []\n    for i in range(len(nums_sorted)):\n        group = nums_sorted[i]\n        # find nums with similar digit sum in original list\n        nums_in_group = [num for num in nums if get_digit_sum(num) == group]\n        # add similar nums to original list in order\n        ordered_list.extend(nums_in_group)\n    return ordered_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit(n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        if n < 0:\n            return '-' + digit(-n)\n        else:\n            return str(n)\n\n    def get_sum_digits(nums):\n        \"\"\"\n        :type nums: list of int\n        :rtype: list of str\n        \"\"\"\n        l = []\n        for num in nums:\n            l.append(''.join(i for i in str(num) if i in '0123456789'))\n        return l\n\n    def process(nums):\n        # sort the list based on sum of their digits\n        digits = get_sum_digits(nums)\n        return sorted(digits, key=len, reverse=True)\n\n    # return the sorted list\n    return process(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted_nums = []\n    while len(nums) > 0:\n        digit_sum = sum([int(i) for i in nums.pop(0)])\n        sorted_nums.append(digit_sum)\n\n    sorted_nums.sort(reverse=True)\n\n    sorted_nums = nums + sorted_nums\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def helper(nums, i):\n        if i == len(nums):\n            return nums\n        nums[i] = nums[i].replace('-', '')\n        nums[i] = int(nums[i])\n        return helper(nums, i + 1) if nums[i]!= 0 else helper(nums, i + 1)\n\n    return helper(nums, 0)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _compare(n1, n2):\n        n1 = sum([int(d) for d in str(n1)])\n        n2 = sum([int(d) for d in str(n2)])\n        return cmp(n1, n2)\n    return sorted(nums, cmp=_compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def grouper(n):\n        return sum([int(num) for num in str(n)])\n\n    result = []\n    if nums:\n        nums.sort(key=grouper, reverse=True)\n        for num in nums:\n            result.append(num)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key = lambda num: sum(map(int, str(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        digits = 0\n        while num!= 0:\n            digits += num % 10\n            num /= 10\n        return digits\n\n    if not nums:\n        return []\n    ordered = []\n    remaining_nums = nums\n    while len(remaining_nums) > 0:\n        summed_digits = sum_digits(remaining_nums[0])\n        remaining_nums.remove(remaining_nums[0])\n        for digit in range(10):\n            if summed_digits + digit > 9:\n                break\n            try:\n                last_num = remaining_nums[-1]\n                if last_num == 0:\n                    ordered.append(0)\n                else:\n                    ordered.append(remaining_nums[-1] * 10 + digit)\n                remaining_nums.remove(remaining_nums[-1])\n            except IndexError:\n                ordered.append(remaining_nums[0] * 10 + digit)\n                remaining_nums.remove(remaining_nums[0])\n    return ordered", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    n = len(nums)\n\n    if n == 0:\n        return []\n\n    new_num = []\n    for num in nums:\n        new_num.append(sum(num))\n\n    new_num.sort(reverse=True)\n\n    res = []\n\n    for num in new_num:\n        i = 0\n        for item in nums:\n            if sum(item) == num:\n                res.append(item[i])\n                break\n            i += 1\n\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    temp = list(nums)\n    temp.sort(key = lambda num: int(sum(map(str, num))))\n    return temp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def helper(nums, i):\n        \"\"\"\n        Write a helper function which sorts the list of integers\n        and returns the index of the last element in the sorted list.\n        \"\"\"\n        if not nums:\n            return i\n        nums[:] = sorted(nums, key=lambda x: sum(map(int, str(x))))\n        return len(nums) - 1\n\n    return helper(nums, 0)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def by_sums(nums, n):\n        return sorted(nums, key=lambda x: (x // 10**(n-1)) % 10**n)\n\n    return by_sums(nums, 0)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for x in nums:\n        digits = [int(y) for y in str(x)]\n        digit_sum = sum(digits)\n        if digit_sum!= 0:\n            result.append((digit_sum, x))\n        elif len(result) > 0:\n            result.sort(key=lambda x: x[0])\n            return [result[-1][1] for _ in xrange(len(result))]\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def count_digit(num):\n        count = 0\n        while num > 0:\n            count += num % 10\n            num //= 10\n        return count\n\n    # if no number, return empty list\n    if nums == []:\n        return []\n\n    result = []\n    for num in nums:\n        digit_sum = count_digit(num)\n\n        # the sum of digits is less than 0, the list is empty\n        if digit_sum < 0:\n            return []\n\n        # find the number with the largest sum of digits\n        if result == [] or digit_sum > result[0]:\n            result = [digit_sum]\n            result.append(num)\n\n        # find the number with the second largest sum of digits\n        else:\n            l, r = result[0], digit_sum\n            if l == r:\n                result = [digit_sum]\n                result.append(num)\n            else:\n                if l > r:\n                    l, r = r, l\n                    result = [l] + result + [num]\n\n    return sorted(result)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Store the sums of digits in a separate list\n    digit_sums = []\n\n    # Store the original index of the integer in a separate list\n    index = []\n\n    # Store the sorted list of integers\n    nums_sorted = []\n\n    for num in nums:\n        digit_sum = sum(i for i in str(num) if i.isdigit())\n        index.append(nums.index(num))\n        digit_sums.append(digit_sum)\n\n    # Sort the sums of digits\n    digit_sums_sorted = sorted(digit_sums, reverse=True)\n\n    # Sort the original list of integers based on the sums of their digits\n    for i in range(0, len(nums)):\n        for j in range(0, len(digit_sums_sorted)):\n            if digit_sums_sorted[j] == digit_sums[i]:\n                nums_sorted.append(nums[index][i])\n                break\n\n    # Return the sorted list of integers\n    return nums_sorted\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _compare(a, b):\n        ai, bi = sum(int(i) for i in str(a)), sum(int(i) for i in str(b))\n        if ai < bi:\n            return -1\n        elif ai > bi:\n            return 1\n        else:\n            return 0\n    return sorted(nums, key=_compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(x):\n        return sum(int(i) for i in str(x))\n    return sorted(nums, key=sum_of_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cal_digits(n):\n        \"\"\"\n        Return a list of digits of the integer n.\n        \"\"\"\n        return [int(n % 10), n // 10]\n    def get_sorted(nums):\n        \"\"\"\n        Sort the given list of integers.\n        \"\"\"\n        sorted_list = []\n        sum_list = [cal_digits(n) for n in nums]\n        while sum_list:\n            current_sum = sum_list.pop(0)\n            if current_sum[0] == current_sum[1]:\n                # e.g. current_sum = (0, 0) -> 0\n                # We have a number with only 1 digit\n                sorted_list.append(current_sum[0])\n            else:\n                # We have a number with 2 digits\n                if current_sum[1] in (1, 2):\n                    # We have a number with 2 digits and 0 or 1 as the first digit\n                    sorted_list.append(current_sum[1])\n                else:\n                    # We have a number with 2 digits and 2 as the first digit\n                    sorted_list.append(current_sum[0])\n                # Append the next digit\n                sorted_list.append(sum_list.pop(0))\n        return sorted_list\n    return get_sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    while len(nums)!= 0:\n        for i in range(0, len(nums)):\n            if nums[i] == 0:\n                continue\n            if nums[i] > 0:\n                nums[i] = nums[i] - (nums[i] % 10)\n            result.append(nums[i])\n        nums = result\n    result.sort(key=int)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # write your code here\n    nums = sorted(nums,key=lambda x: sum(int(c) for c in str(x)))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def helper(nums):\n        nums.sort(key=lambda num: sum(map(int, str(num))))\n        return nums\n\n    if len(nums) == 0:\n        return nums\n    return helper(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Sum of digits of a number.\n        \"\"\"\n        return sum([int(digit) for digit in str(num)])\n\n    def compare_by_index(num1, num2):\n        \"\"\"\n        Compare two numbers by their index in original list.\n        \"\"\"\n        return num1.index - num2.index\n\n    return sorted(nums, key=sum_digits, reverse=True) \\\n        if nums else [] \\\n        or sorted(nums, key=sum_digits, reverse=True, cmp=compare_by_index) \\\n        if nums else []\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _compare(a, b):\n        return cmp(nums.index(a), nums.index(b))\n\n    return sorted(nums, cmp=_compare)\n \nassert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\nassert order_by_points([]) == []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(map(int, str(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        if not num:\n            return 0\n        digits = []\n        while num:\n            digits.append(num % 10)\n            num = num // 10\n        return sum(digits)\n\n    def compare(a, b):\n        if a == b:\n            return 0\n        elif a > b:\n            return 1\n        else:\n            return -1\n\n    def order(nums, j):\n        i = 0\n        # Sort all the numbers with the same sum of digits\n        while i < len(nums) - 1:\n            if nums[i]!= nums[i + 1]:\n                if sum_digits(nums[i]) > sum_digits(nums[i + 1]):\n                    nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                else:\n                    continue\n            i += 1\n        # If the list still has more than one item, sort them based on index\n        if len(nums) > 1:\n            return compare(nums[1], nums[0])\n        else:\n            return 0\n\n    return sorted(nums, key=order)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit_sum(x):\n        return sum([int(i) for i in str(x)])\n\n    def sort_func(x, y):\n        return digit_sum(x) - digit_sum(y) if x!= y else x - y\n\n    return sorted(nums, key=sort_func, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    current_sum = 0\n    for n in nums:\n        new_sum = sum(map(int, str(n)))\n        if new_sum > current_sum:\n            current_sum = new_sum\n            result.append(n)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda num: sum([int(digit) for digit in str(num)]))\n\n    if not nums:\n        return\n\n    new_nums = []\n    for num in nums:\n        new_nums.append(num)\n\n    for num in new_nums:\n        num = [int(digit) for digit in str(num)]\n        digit_sum = sum(num)\n        num = sum(num)\n\n        if digit_sum == num:\n            continue\n\n        if digit_sum in range(num, nums.index(num) + 1):\n            new_nums.append(num)\n\n    return new_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _compare(num1, num2):\n        sum1 = 0\n        sum2 = 0\n        for i in range(len(num1)):\n            sum1 += num1[i] * (10 ** i)\n        for i in range(len(num2)):\n            sum2 += num2[i] * (10 ** i)\n        return (sum1, num2, sum2)\n    nums.sort(key=_compare)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list of numbers, and return the sorted list\n    # return sorted(nums)\n    # the rest is my solution, i have a problem when there is a negative number in the list\n    # so i did some changes\n    # nums = []\n    # for x in nums:\n    #     if x < 0:\n    #         x = -x\n    #     if x % 10 == 0:\n    #         nums.append(x)\n    #     else:\n    #         nums.append(x + 1)\n\n    # sort the list of numbers, and return the sorted list\n    # nums = sorted(nums)\n    nums = sorted(nums, key=sum)\n    # print(nums)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        return sum([int(n) for n in str(num)])\n\n    def order_func(num):\n        return sum_digits(num), num\n\n    if not nums:\n        return []\n\n    nums.sort(key=order_func)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_digits(number):\n        \"\"\"\n        Returns the sum of digits of a given number\n        \"\"\"\n\n        if number == 0:\n            return 0\n        else:\n            return sum(map(int, str(number)))\n\n    def order_items(items, points):\n        \"\"\"\n        Order the given list of items according to the sum of their digits\n        \"\"\"\n\n        sorted = sorted(items, key = lambda item: points[item])\n        return sorted\n\n    points = {}\n    for item in nums:\n        points[item] = sum_digits(item)\n\n    return order_items(nums, points)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def points(num):\n        return sum(int(c) for c in str(num))\n\n    if not nums:\n        return []\n\n    results = [num for num in sorted(nums, key=points)]\n    if len(results) > 1:\n        last = results[-1]\n        results = [result for result in results if result!= last]\n    return results", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_digits(num):\n        \"\"\"\n        Return sum of digits of given number\n        \"\"\"\n        return sum([int(i) for i in str(num)])\n\n    sorted_nums = sorted(nums, key = lambda num: sum_digits(num))\n    return sorted_nums\n\nnums = [-1, 11, 1, 12, -11]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sum_digits(n):\n        \"\"\"\n        Returns the sum of digits of given integer.\n        \"\"\"\n        if n < 0:\n            return -_sum_digits(-n)\n        digits = []\n        while n:\n            digits.append(n % 10)\n            n //= 10\n        return sum(digits)\n\n    nums.sort(key=_sum_digits)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda num: sum([int(digit) for digit in str(num)]))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"Return the sum of digits of a number\"\"\"\n        if num == 0:\n            return 0\n        else:\n            return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        Return 1 if num1 is greater than num2\n        Return 0 if num1 is equal to num2\n        Return -1 if num1 is less than num2\n        \"\"\"\n        if num1 == num2:\n            return 0\n        if num1 == 0 and num2 == 0:\n            return 0\n        if sum_digits(num1) > sum_digits(num2):\n            return 1\n        elif sum_digits(num1) < sum_digits(num2):\n            return -1\n        else:\n            return 0\n\n    return sorted(nums, key=lambda num: compare(num, nums[1]))\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=sum_digits, reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Reverse the list\n    nums = nums[::-1]\n    if not nums:\n        return []\n    # Special case - the first element\n    if nums[0] == 0:\n        return nums[1:]\n    # Reverse the list\n    nums = nums[::-1]\n    # Sort the list\n    return sorted(nums, key=lambda x: sum(int(x) for x in str(x)), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # +10\n    def score(x):\n        score = 0\n        for i in range(1, 10):\n            try:\n                score += int(x) // i\n            except:\n                break\n        return score\n\n    # +5\n    def score_alternative(x):\n        score = 0\n        for i in range(1, 10):\n            try:\n                score += int(x) // i\n            except:\n                break\n        return score\n\n    for i in range(len(nums)):\n        for j in range(len(nums) - 1, i, -1):\n            score1 = score(nums[i])\n            score2 = score(nums[j])\n            if score1 < score2:\n                nums.insert(j, nums[i])\n                nums.pop(i)\n                break\n            else:\n                score2 = score_alternative(nums[j])\n                score1 = score_alternative(nums[i])\n                if score1 < score2:\n                    nums.insert(j, nums[i])\n                    nums.pop(i)\n                    break\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_of_digits(num):\n        num_str = str(num)\n        sum = 0\n        for i in range(len(num_str)):\n            sum += int(num_str[i]) * (10 ** i)\n        return sum\n\n    def num_sort(nums):\n        \"\"\"\n        A function for sorting list of numbers\n        \"\"\"\n        nums.sort(key=sum_of_digits)\n\n    return num_sort(nums)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digit(num):\n        \"\"\"\n        :param num: integer\n        :return: sum of its digits\n        \"\"\"\n        return sum(num)\n    return sorted(nums, key = sum_digit)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    if not nums:\n        return []\n    sorted_list = sorted(nums, key=lambda x: sum(int(d) for d in str(x)), reverse=True)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # list of tuples: (sum, item)\n    sorted_points = sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))\n\n    # list of integers\n    return [nums[i] for i in sorted_points]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    # https://repl.it/languages/python\n    return sorted(nums, key=lambda num: sum(map(int, str(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    print(nums)\n    for num in nums:\n        num = int(num)\n        total = 0\n        for i in str(num):\n            total += int(i)\n        nums.append(total)\n\n    newNums = []\n    for item in nums:\n        newNums.append(nums.index(item))\n\n    return newNums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(map(int, nums))\n    if len(nums) < 2:\n        return nums\n    result = [nums[0], nums[-1]]\n    nums = nums[1:-1]\n    for num in nums:\n        if num > 0:\n            result.append(num)\n    result.sort()\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        We can use this function to compute the sum of digits of a number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def sort_by_sum_of_digits(nums):\n        \"\"\"\n        Sorts the given list of integers in ascending order according to the\n        sum of their digits.\n        \"\"\"\n        return sorted(nums, key=sum_of_digits)\n\n    if not nums:\n        return []\n    return sort_by_sum_of_digits(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for item in nums:\n        if item < 0:\n            item = abs(item)\n        digits = str(item)\n        while len(digits) > 1:\n            result.append(digits[-1])\n            digits = digits[:-1]\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit_sum(n):\n        return sum(int(d) for d in str(n))\n\n    def compare(a, b):\n        if digit_sum(a) > digit_sum(b):\n            return 1\n        elif digit_sum(a) < digit_sum(b):\n            return -1\n        else:\n            return 0\n\n    result = sorted(nums, key=compare)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def point(num):\n        \"\"\"\n        Given an integer, return the sum of its digits.\n        \"\"\"\n        return sum([int(d) for d in str(num)])\n\n    def point_sort_key(num):\n        \"\"\"\n        Given an integer, return a tuple of its point and index.\n        \"\"\"\n        return (point(num), num)\n\n    return sorted(nums, key=point_sort_key)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(num) for num in str(x)))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(map(int, str(num))), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    result = []\n    max_sum = 0\n    for n in nums:\n        n = str(n)\n        while len(n) > 1:\n            n = n[:-1]\n        sum = 0\n        for i in n:\n            sum += i\n        if sum > max_sum:\n            result.append(n)\n            max_sum = sum\n\n    return sorted(result, key=nums.index)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list using the given comparator\n    # comparator should return < 0, 0 or > 0 to indicate which\n    # item in the list should go first\n    # list.sort(cmp=comparator)\n    # returns a tuple of the list and the comparator\n    # from the docs:\n    # \"Sorting is done by repeatedly splitting the list into sub-lists of\n    # size 2, 3, 4,..., n. If two elements are compared and found to be\n    # equal, the next element is considered. This process is continued\n    # until all elements are compared.\"\n    def order_by_points(nums):\n        if not nums:\n            return []\n        sorted_nums = []\n        for num in nums:\n            new_num = []\n            for i in range(len(num)):\n                new_num.append(num[i])\n                new_num.append(int(str(num)[i]))\n            sorted_nums.append(new_num)\n        # sort the list using the comparison function\n        sorted_nums.sort(cmp=compare_digits)\n        return sorted_nums\n    # this is the comparison function\n    def compare_digits(x, y):\n        return cmp(sum_digits(x),", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def key(num):\n        return sum([int(n) for n in str(num)])\n\n    return sorted(nums, key=key)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    nums = sorted(nums, key=sum_digits)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_sums(nums):\n        \"\"\"\n        Calculates the sum of digits of each integer in nums.\n        Returns a dictionary whose keys are the numbers in nums and\n        whose values are their sums of digits.\n        \"\"\"\n        nums = list(nums)\n        sums = {}\n        for x in nums:\n            nums = list(str(x))\n            sums[x] = sum([int(i) for i in nums])\n        return sums\n\n    if nums:\n        return sorted(nums, key=lambda k: get_sums(k)[k])\n    else:\n        return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        return sum(int(num) for num in str(num))\n\n    def key_func(num):\n        return sum_digits(num), num\n\n    return sorted(nums, key=key_func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_sum(num):\n        return sum(map(int, num))\n    return sorted(nums, key=get_sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for num in nums:\n        result += [num]\n    result.sort(key=lambda num: sum(str(num)))\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    # As long as the current list is not empty\n    while len(nums) > 0:\n        # Define a new sum variable to be computed\n        sum = 0\n        # Iterate over the list to sum up the digits\n        for num in nums:\n            # Multiply the current number by 10 to get the digit\n            digit = num * 10\n            # Get the digit and add it to the sum\n            sum += digit\n        # Find the first element with the sum of its digits\n        # equal to the current sum\n        for index, element in enumerate(nums):\n            if element == sum:\n                # If the element is found, then append it to the result\n                result.append(nums[index])\n                # Remove it from the original list\n                nums.pop(index)\n                # Break from the loop\n                break\n        # If no element with the current sum of digits is found\n        # then append the last element in the original list\n        # to the result\n        else:\n            result.append(nums[-1])\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    return sorted(\n        nums,\n        key=lambda num: sum(int(d) for d in str(num))\n        )", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    nums.sort(key=lambda num: sum(map(int, str(num))))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write code here\n    if nums == []:\n        return []\n    for i in range(len(nums)):\n        sum_of_digits = sum(map(int, nums[i]))\n        order_by = nums[i], sum_of_digits\n        print(order_by)\n    return sorted(nums, key = lambda x: x[1], reverse = False)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_points(nums):\n        if len(nums) == 0:\n            return []\n        elif len(nums) == 1:\n            return nums\n        list1 = sorted(nums, key=lambda num: sum(map(int, str(num))))\n        list2 = sorted(nums, key=lambda num: int(str(num)))\n        return sorted(list1 + list2, key=lambda num: list1.index(num))\n\n    return order_points(nums)\n\nnums = [1, 11, -1, -11, -12, 111]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # print(nums)\n    # print(sum(nums))\n\n    if nums == []:\n        return []\n    # nums.sort(key = lambda x: int(str(x)[0]))\n    return sorted(nums, key=lambda x: int(str(x)[0]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Compute sum of digits of given integer.\n        \"\"\"\n        num = num if isinstance(num, int) else int(num)\n        return sum(int(d) for d in str(num))\n\n    return sorted(nums, key=sum_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    nums = sorted(nums)\n    point_dict = dict()\n\n    for num in nums:\n        point_dict[num] = sum(map(int, str(num)))\n\n        if point_dict[num] not in point_dict:\n            point_dict[num] = len(nums)\n\n    for num in nums:\n        if num in point_dict:\n            new_index = point_dict[num]\n        else:\n            new_index = 0\n\n        if new_index!= len(nums) - 1:\n            nums.insert(new_index, num)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    def get_best_order(items):\n        best = [None]*len(items)\n        for i in range(len(items)):\n            if best[i] is None:\n                best[i] = i\n        return best\n\n    def reorder(items):\n        best = get_best_order(items)\n        for i in range(len(items)):\n            items[i], items[best[i]] = items[best[i]], items[i]\n        return items\n\n    if not nums:\n        return []\n\n    nums.sort(key=sum_digits)\n    return reorder(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    s = 0\n    for num in nums:\n        s += int(num)\n        if s >= 10:\n            s = 0\n            result.append(num)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    else:\n        return sorted(nums, key=sum_of_digits, reverse=False)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    pass", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def subsum(i):\n        digits = len(str(i)) - 1\n        return sum([int(digit) for digit in str(i)])\n\n    if not nums:\n        return []\n    return sorted(nums, key=subsum, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def num_digits(n):\n        nums = list(str(n))\n        return len(nums) - 1\n\n    def get_point(num):\n        return sum(map(int, num))\n\n    def get_point_of(num):\n        return get_point(num) + num_digits(num)\n\n    def sort(nums):\n        # Sort the list and return the sorted list\n        result = sorted(nums, key=get_point_of, reverse=True)\n        return result\n\n    return sort(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        digits = [int(d) for d in str(num)]\n        return sum(digits)\n\n    def order_by_sum_of_digits(nums):\n        points = sorted(nums, key=sum_of_digits)\n        return [nums[i] for i in range(len(points))]\n\n    if not nums:\n        return []\n    return order_by_sum_of_digits(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(map(int, nums))  # convert input to list of integers\n    return sorted(nums, key=lambda num: sum(map(int, num)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_digits(num):\n        res = 0\n        while num!= 0:\n            res += num % 10\n            num = num / 10\n        return res\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points_helper(nums, seq):\n        if not nums:\n            return seq\n\n        p = nums[0]\n\n        for i in xrange(1, len(seq)):\n            if seq[i][0] > p:\n                seq[i], seq[i-1] = seq[i-1], seq[i]\n                seq[i].append(i)\n            elif seq[i][0] == p:\n                seq[i].append(i)\n\n        return order_by_points_helper(nums[1:], seq)\n\n    return order_by_points_helper(nums, [])\n\nnums = [1, 11, -1, -11, -12]\nassert order_by_points(nums) == [-1, -11, 1, -12, 11]\n\nnums = []\nassert order_by_points(nums) == []\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def by_digit_sum(num):\n        digits = [int(digit) for digit in str(num)]\n        return sum(digits)\n    return sorted(nums, key=by_digit_sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        A function that returns the sum of digits of a number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    # sort based on digit sum\n    return sorted(nums, key=digit_sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    nums.sort(key=lambda num: sum(map(int, str(num))), reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    if not nums: return nums\n    max_sum = 0\n    max_idx = 0\n    for idx, n in enumerate(nums):\n        sum_digit = sum(int(i) for i in str(n))\n        if max_sum < sum_digit:\n            max_sum = sum_digit\n            max_idx = idx\n    return nums.insert(max_idx, nums.pop(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(n):\n        nums = str(n)\n        return sum(int(i) for i in nums)\n\n    result = sorted(nums, key=digit_sum)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_digits(number):\n        \"\"\"\n        :type number: int\n        :rtype: int\n        \"\"\"\n\n        return sum([int(i) for i in str(number)])\n\n    if not nums:\n        return []\n\n    # first sort the list based on the points\n    def compare_by_points(num1, num2):\n        return sum_digits(num1) - sum_digits(num2)\n\n    return sorted(nums, key=compare_by_points)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    nums.sort(key=lambda x: sum(map(int, str(x))))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for n in nums:\n        digits = []\n        while True:\n            digit = n % 10\n            digits.append(digit)\n            n = int(n / 10)\n            if n == 0:\n                break\n        result.append(sum(digits))\n    result.sort()\n    result.reverse()\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # your code goes here\n    nums.sort(key=sum_digits)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_points(nums):\n        result = []\n        for x in nums:\n            index = 0\n            while x > 0:\n                result.append(x % 10)\n                x = x // 10\n                index += 1\n            result.append(index)\n        return result\n\n    return sorted(nums, key=order_points)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    return sorted(nums, key=lambda num: sum(map(int, str(num))))\n\nnums = [1, 11, -1, -11, -12]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def helper(nums):\n        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return nums\n        res = [nums[0], 0]\n        for n in nums[1:]:\n            res[0] = str(int(res[0]) + int(n))\n            res[1] += len(res[0])\n        if res[1] == 0:\n            return [res[0]]\n        return [nums[n] for n in sorted(range(1, len(nums)), key=lambda x: res[x])]\n\n    return helper(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points_helper(nums):\n        # make a copy of the input list\n        res = list(nums)\n        # sort the copy\n        res.sort(key=lambda num: sum(map(int, str(num))))\n        # sort the original list by the indexes in the copy list\n        return [nums[i] for i in res]\n\n    return order_by_points_helper(nums)\n\nnums = [1, 11, -1, -11, -12]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        return sum(map(int, str(num)))\n\n    def digit_sort(nums):\n        sums = [digit_sum(num) for num in nums]\n        return [num for num, sum_ in zip(nums, sums) if sum_ == min(sums)]\n\n    return digit_sort(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    sorted_num = sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n    # dict to count all equal numbers, if we have several numbers which sum of their digits is same\n    sorted_count = dict()\n    # create the final sorted list, which will have list of numbers which are equal in their sum\n    final = []\n    # iterate over the sorted list of numbers and add the number to final list of numbers\n    # only if number has no equal number which has same sum of digits\n    for number in sorted_num:\n        if number not in sorted_count:\n            final.append(number)\n        elif number in sorted_count:\n            final.append(sorted_num.index(number) + 1)\n    return final", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Define the return variable\n    result = []\n\n    # Order by the sum of digits\n    for item in nums:\n        # The sum of digits starts from the right of the number\n        result.append(item)\n        while True:\n            # Find the sum of digits by subtracting a digit at a time\n            digit_sum = 0\n            for digit in reversed(str(item)):\n                digit_sum += int(digit)\n            # If the sum of digits is greater than current item's,\n            # append that item and stop the loop\n            if digit_sum > item + 1:\n                result.append(item)\n                break\n            # Else subtract the digit and continue to find the next sum of digits\n            item -= int(digit_sum)\n\n    # Sort the list based on the return variable\n    result.sort(reverse=True)\n\n    # Return the list\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [nums[num] for num in sorted(enumerate(nums), key=lambda x: (x[1], x[0]))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _compare_nums_by_digit_sum(x, y):\n        x_digit_sum, y_digit_sum = 0, 0\n        for i in range(len(x)):\n            x_digit_sum += int(str(x[i]))\n            y_digit_sum += int(str(y[i]))\n        if x_digit_sum == y_digit_sum:\n            return 0\n        if x_digit_sum > y_digit_sum:\n            return 1\n        return -1\n    nums = sorted(nums, key = lambda num: sum(map(int, str(num))))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in xrange(len(nums)):\n        nums[i] = nums[i] - int(nums[i])\n    return sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Get the sum of digits for each number\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def accumulate(num):\n        # print(num)\n        sum_digits = 0\n        while num!= 0:\n            sum_digits += num % 10\n            num //= 10\n        return sum_digits\n    # I am having trouble with this part\n    for i in range(len(nums)):\n        new_nums[i] = accumulate(nums[i])\n    return sorted(nums, key=accumulate)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for num in nums:\n        d = 0\n        while num:\n            d += num % 10\n            num //= 10\n        result.append(d)\n    return sorted(result, key=result.__getitem__)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Complete this function\n    pass", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda n: sum(map(int, str(n))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(x):\n        return sum(int(d) for d in str(x))\n\n    nums.sort(key=sum_digits)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key = lambda num: sum(int(digit) for digit in str(num)), reverse = True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    if nums == []:\n        return []\n\n    point_list = []\n    for num in nums:\n        temp = 0\n        while num!= 0:\n            temp = num % 10\n            num = num / 10\n        point_list.append(temp)\n\n    point_list.sort()\n    if point_list[0] == 0:\n        return []\n    else:\n        return nums[point_list.index(point_list[0]):] + nums[:point_list.index(point_list[0])]\n\n\n\n\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for i in nums:\n        if not i:\n            result.append(i)\n        else:\n            digit_sum = sum(int(d) for d in str(i))\n            result.append(i)\n            while digit_sum > 0:\n                digit_sum -= 1\n                result.append(0)\n    return sorted(result)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum([int(digit) for digit in str(num)]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    result = sorted(nums, key=sum_digits, reverse=False)\n\n    # if two numbers have same sum of digits,\n    # order them by their index in original list\n    current_sum = result[0]\n    for i in range(1, len(result)):\n        if result[i] == current_sum:\n            result.sort(key=lambda x: nums.index(x))\n        else:\n            current_sum = result[i]\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    if nums:\n        nums.sort(key=lambda num: sum([int(digit) for digit in str(num)]))\n        # at least one digit\n        i = 0\n        while nums[i]:\n            # sum digits of i-th integer\n            digits = sum([int(digit) for digit in str(nums[i])])\n            if not digits:\n                result.append(nums[i])\n                del nums[i]\n            else:\n                # look for a number with the same digits\n                for j in range(i + 1, len(nums)):\n                    if digits == sum([int(digit) for digit in str(nums[j])]):\n                        result.append(nums[j])\n                        del nums[j]\n                    else:\n                        break\n            i += 1\n    return result\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digits_sum(num):\n        \"\"\"\n        Get sum of the digits of given number.\n        \"\"\"\n        return sum([int(digit) for digit in str(num)])\n\n    nums.sort(key=lambda x: digits_sum(x), reverse=False)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Calculate the sum of digits of a given integer.\n        If the integer is negative, we calculate the absolute value\n        and add 10 (the number of digits) to the result.\n        \"\"\"\n        if num < 0:\n            return sum_of_digits(abs(num) + 10)\n        else:\n            return sum([i for i in str(num)])\n\n    return sorted(nums, key=lambda num: sum_of_digits(num), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # print('order_by_points:'+ str(nums))\n    res = []\n    # print(type(nums))\n    if nums == []:\n        return res\n    # print('nums:'+ str(nums))\n    for n in nums:\n        # print('n:'+ str(n))\n        digits = str(n)\n        # print('digits:'+ str(digits))\n        if digits == '':\n            digits = '0'\n        # print('digits:'+ str(digits))\n        num = sum([int(i) for i in digits])\n        # print('num:'+ str(num))\n        if num not in res:\n            res.append(num)\n    # print('res:'+ str(res))\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)), reverse=False)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Returns sum of digits of given integer.\n        \"\"\"\n        result = 0\n        while num:\n            result += num % 10\n            num //= 10\n        return result\n\n    def digits_sort_func(a, b):\n        \"\"\"\n        Returns True if a should be ordered before b.\n        \"\"\"\n        a_s = sum_of_digits(a)\n        b_s = sum_of_digits(b)\n        if a_s == b_s:\n            # Compare using index, since they have same sum of digits\n            return a < b\n        return a_s < b_s\n\n    return sorted(nums, key=digits_sort_func, reverse=False)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=sum_digits, reverse=True)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def compare(a, b):\n        return cmp(sum(map(int, str(a))), sum(map(int, str(b)))) if a!= b else cmp(a, b)\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(x) for x in str(num)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    list = []\n    for item in nums:\n        digit = sum(map(int, str(item)))\n        list.append(digit)\n    return sorted(list)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    res = []\n    nums = sorted(set(nums))\n    for n in nums:\n        digit = 0\n        while n!= 0:\n            digit += n % 10\n            n /= 10\n        digit = digit % 10\n        if res and res[-1][0] == digit:\n            res[-1][1].append(n)\n        else:\n            res.append((digit, [n]))\n    res.sort(key=lambda x: x[0], reverse=True)\n    return [nums[i] for i in range(len(res))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    pass", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def num_to_digits(num):\n        return list(str(num))\n\n    def digit_sum(num):\n        return sum(num_to_digits(num))\n\n    nums = sorted(nums, key=digit_sum)\n    return [nums[i] for i in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # write code here", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # IMPORTANT: Please reset any member data you declared, as\n    # the following function will invoke list() on it.\n\n    def sum_of_digits(num):\n        \"\"\"\n        Return the sum of digits of given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    # find the first item whose sum of digits is more than any other item\n    # and place it at the end of the list\n    result = sorted(nums) + [nums[0] if nums[0] > sum_of_digits(nums[1]) else nums[1]\n                              for nums in enumerate(nums)]\n    # sort each sublist\n    for nums in result:\n        nums = sorted(nums)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] = abs(nums[i])\n    res = sorted(nums)\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def helper(num):\n        \"\"\"\n        Helper function to sort the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        :param num: a list of integers\n        :type num: list\n        :return: a sorted list of integers\n        :rtype: list\n        \"\"\"\n        def sum_digits(num):\n            \"\"\"\n            Sum digits of a given integer\n            :param num: a positive integer\n            :type num: int\n            :return: a sum of digits of the given integer\n            :rtype: int\n            \"\"\"\n            return sum(int(digit) for digit in str(num))\n\n        if num:\n            return num.sort(key=sum_digits)\n        else:\n            return []\n\n    return helper(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # IMPORTANT: Please reset any member data you declared, as\n    # the same Solution instance will be reused for each test case.\n    #\n    # Note: The constructor and __call__ of this Solution instance\n    # are invoked for each test case.\n    #\n    #  - Python Solution\n    #  - Problem: Word Ladder II\n    #  - Language: Python 3\n    #  - Question: [points_order_by_points](//projecteuler.net/problem=48)\n    #  - Iteration 0\n    #  - Runtime: 3 ms\n    #  - Memory Usage: 59.6 MB\n    #  - Accepted\n    #\n    #  - Python Solution\n    #  - Problem: Word Ladder II\n    #  - Language: Python 3\n    #  - Question: [points_order_by_points](//projecteuler.net/problem=48)\n    #  - Iteration 1\n    #  - Runtime: 3 ms\n    #  - Memory Usage: 59.6 MB\n    #  - Accepted\n    #\n    #  - Python Solution\n    #  - Problem: Word Ladder II\n    #  - Language: Python 3\n    #  - Question: [points_order_by_points](//pro", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # notice the order of the comparison: (-1 < -11 < 1 < 12 < 11)\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp_by_point(a, b):\n        \"\"\"\n        Compare two integers by sum of their digits.\n\n        >>> cmp_by_point(1, 11)\n        0\n        >>> cmp_by_point(11, 1)\n        0\n        >>> cmp_by_point(1, -1)\n        -1\n        >>> cmp_by_point(-1, 1)\n        -1\n        >>> cmp_by_point(1, -11)\n        1\n        >>> cmp_by_point(-11, 1)\n        1\n        >>> cmp_by_point(1, -12)\n        -1\n        >>> cmp_by_point(-12, 1)\n        -1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n    nums.sort(cmp=cmp_by_point)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        return the sum of the digits of the given number\n        \"\"\"\n        return sum(map(int, str(num)))\n\n    def get_list_with_similar_sum_digits(sum):\n        \"\"\"\n        Return a list of items having a sum of their digits\n        equal to the given one.\n        \"\"\"\n        nums_similar = []\n        for num in nums:\n            if sum_digits(num) == sum:\n                nums_similar.append(num)\n        return nums_similar\n\n    def swap(a, b):\n        \"\"\"\n        Swap the values at positions `a` and `b` of the list\n        \"\"\"\n        return [nums[a], nums[b]]\n\n    def sort_list(nums):\n        \"\"\"\n        Sort the given list of integers and return it\n        \"\"\"\n        sorted_nums = []\n        while len(nums) > 0:\n            if len(nums) == 1:\n                sorted_nums.append(nums[0])\n                return sorted_nums\n\n            sorted_nums.append(nums[0])\n            items_similar = get_list_with_similar_sum_digits(sum_digits(nums[0]))\n            nums = nums[len(items", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digitsum(num):\n        d = 0\n        while num > 0:\n            d += num % 10\n            num //= 10\n        return d\n\n    def order(nums):\n        points = sorted(nums, key=digitsum)\n        final = []\n        i = 0\n        while i < len(points):\n            if points[i] == points[i+1]:\n                final.append(points[points.index(points[i])])\n                del points[points.index(points[i])]\n            else:\n                final.append(points[i])\n                i += 1\n\n        return final\n\n    return order(nums)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    result = []\n    nums.sort()\n    for num in nums:\n        tmp = int(num)\n        digits = [int(i) for i in str(tmp)]\n        order = 0\n        for i in digits:\n            order += i\n        result.append(tmp)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for n in range(len(nums)):\n        nums[n] = sum([int(d) for d in str(nums[n])])\n    return sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: sum(map(int, str(x))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Use class to help you with the sorting logic\n    class Point:\n        def __init__(self, num):\n            self.num = num\n            self.points = sum(map(int, str(num)))\n\n    # Sort list of Point objects\n    points = sorted([Point(num) for num in nums])\n\n    # Recreate list of integers with sorted digits\n    return [num.num for num in points]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def num_sum(num):\n        \"\"\"\n        Calculate the sum of the digits of a number\n        :param num: The number to sum the digits of\n        :return: The sum of the digits of a number\n        \"\"\"\n        return sum([int(d) for d in str(num)])\n\n    def get_points(num):\n        \"\"\"\n        Calculate the points of a number\n        :param num: The number to calculate points of\n        :return: The points of a number\n        \"\"\"\n        points = 0\n        while num:\n            points += num_sum(num)\n            num = num // 10\n        return points\n\n    nums.sort(key=get_points)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Your code here\n    class List(object):\n        def __init__(self, nums):\n            self.nums = nums\n            self.order_by_points(nums)\n        def order_by_points(self, nums):\n            self.sorted_list = []\n            for n in nums:\n                self.sum_digits(n)\n            self.sorted_list = self.sorted_list + nums\n        def sum_digits(self, n):\n            temp = n\n            self.sum = 0\n            while(temp!= 0):\n                self.sum = self.sum + temp%10\n                temp = temp/10\n            self.sum = self.sum + self.sum % 10\n        def __iter__(self):\n            return iter(self.sorted_list)\n    x = List(nums)\n    return x.sorted_list\n\n</s>"]]