[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # write your code here\n    result = []\n    for num in nums:\n        result.append(num)\n        while len(result) > 0:\n            if result[-1] > 0:\n                result.append(int(str(result[-1])[-1]))\n                del result[-1]\n            elif result[-1] < 0:\n                result.append(int(str(abs(result[-1]))[-1]))\n                del result[-1]\n            else:\n                break\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    else:\n        # sort the list first\n        # sort by index, if the digits are the same\n        return sorted(nums, key=lambda num: sum(map(int, str(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def get_point(num):\n        digits = str(num)\n        return sum(int(digit) for digit in digits)\n\n    def sort_by_points(lst):\n        result = []\n        for i in lst:\n            result.append(get_point(i))\n        return sorted(result, reverse=True)\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(map(int, str(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(n):\n        return sum(int(c) for c in str(n))\n\n    def key_func(x):\n        return sum_of_digits(x), x\n\n    return sorted(nums, key=key_func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        3\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum([int(d) for d in str(num)])\n\n    def order_by_points(nums):\n        \"\"\"\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        \"\"\"\n        sorted_nums = sorted(nums, key = lambda num: sum_digits(num))\n        if len(nums) > 0:\n            sorted_nums.append(nums[-1])\n        return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Helper function to calculate the sum of digits of an integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        Compare two integers and return -1 if num1 < num2, 0 if num1 == num2\n        and 1 if num1 > num2.\n        \"\"\"\n        if num1 < num2:\n            return -1\n        elif num1 == num2:\n            return 0\n        else:\n            return 1\n\n    def get_index(num):\n        \"\"\"\n        Get the index of an integer in the original list.\n        \"\"\"\n        return nums.index(num)\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True) \\\n        + sorted(nums, key=lambda num: get_index(num), reverse=True)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(x):\n        \"\"\"\n        Sum of digits of an integer x.\n        \"\"\"\n        digits = []\n        while x:\n            digits.append(x % 10)\n            x /= 10\n        return sum(digits)\n\n    def compare(x, y):\n        \"\"\"\n        Compare x and y based on the sum of their digits.\n        \"\"\"\n        return cmp(sum_digits(x), sum_digits(y))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Helper function to calculate sum of digits of given integer.\n        \"\"\"\n        num_str = str(num)\n        return sum(int(digit) for digit in num_str)\n\n    if not nums:\n        return []\n    nums.sort(key=sum_digits, reverse=True)\n    return [num for num in nums if num >= 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Return the sum of digits of given integer.\n        \"\"\"\n        return sum(int(i) for i in str(num))\n\n    def get_key(num):\n        \"\"\"\n        Return the sum of digits of given integer and\n        the index of given integer in the original list.\n        \"\"\"\n        return digit_sum(num), num\n\n    nums.sort(key=get_key)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n\n    # It would be nice if you could test your code with some of the\n    # test cases at the bottom of this page.\n\n    # But this is a good place to start.\n    # Read input, convert to int, and sort in ascending order\n    # by sum of digits\n    nums = sorted(map(int, nums))\n\n    # Loop through and sum digits\n    # You will need to convert to a string\n    # to do this. e.g. num = str(num)\n    # You may also need to use the sum function\n    # to sum the digits. e.g. sum(map(int, num))\n\n    # You can use a for loop to go through\n    # each item in the list\n    # e.g. for num in nums:\n    #     num = str(num)\n    #     sum = sum(map(int, num))\n    #     # do something with sum\n\n    # Write your code here\n    # Test your code with the test cases at the bottom of this page\n    # If there are several items with the same sum,\n    # order them based on the original index in the list\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(n):\n        \"\"\"\n        Return sum of digits of given number.\n        \"\"\"\n        digits = []\n        while n:\n            digits.append(n % 10)\n            n //= 10\n        return sum(digits)\n\n    return sorted(nums, key=lambda n: digit_sum(n))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        return sum(int(c) for c in str(num))\n\n    def order_by_digit_sum(nums):\n        nums.sort(key=digit_sum)\n        return nums\n\n    def order_by_index(nums):\n        return sorted(nums, key=lambda num: nums.index(num))\n\n    if not nums:\n        return nums\n    else:\n        return order_by_digit_sum(order_by_index(nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for num in nums:\n        new_num = 0\n        while num!= 0:\n            new_num += num % 10\n            num //= 10\n        result.append(new_num)\n    result.sort()\n    result.reverse()\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_digits(num):\n        \"\"\"\n        :param num: an integer\n        :return: sum of digits of the integer\n        \"\"\"\n        return sum(int(i) for i in str(num))\n\n    def sum_of_digits(nums):\n        \"\"\"\n        :param nums: a list of integers\n        :return: sum of digits of all integers in the list\n        \"\"\"\n        return sum(sum_digits(num) for num in nums)\n\n    def sort_by_points(nums):\n        \"\"\"\n        :param nums: a list of integers\n        :return: sorted list of integers based on the sum of their digits\n        \"\"\"\n        return sorted(nums, key=lambda num: sum_of_digits(num))\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    nums = sorted(nums, key=lambda num: sum([int(d) for d in str(num)]))\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Return the sum of digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def get_key(num):\n        \"\"\"\n        Get the key of the given number.\n        \"\"\"\n        return sum_of_digits(num), num\n\n    return sorted(nums, key=get_key)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(map(int, str(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    return sorted(nums, key=sum_digits, reverse=False)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    nums = sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    points = []\n    for n in nums:\n        points.append(sum(int(d) for d in str(n)))\n    points.sort()\n    return [nums[p-1] for p in points]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=sum_of_digits, reverse=False)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # \u6682\u65f6\u53ea\u80fd\u505a\u5230\u6574\u6570\u90e8\u5206\uff0c\u5c0f\u6570\u90e8\u5206\u75280\u8865\n    def sum_digits(num):\n        return sum(int(i) for i in str(num))\n\n    def sort_by_index(nums):\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                nums[i] = 0\n            elif nums[i] > 0:\n                nums[i] += 10 ** (len(str(nums[i])) - 1)\n        return nums\n\n    def sort_by_points(nums):\n        result = []\n        while nums!= []:\n            point = sum_digits(nums[0])\n            for i in range(1, len(nums)):\n                point += sum_digits(nums[i])\n            if point!= 0:\n                result.append(nums[0])\n                for i in range(1, len(nums)):\n                    if nums[i]!= 0 and nums[i] > nums[i - 1]:\n                        result.append(nums[i])\n            nums = sort_by_index(nums[1:])\n        return result\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        >>> digit_sum(1)\n        1\n        >>> digit_sum(11)\n        2\n        >>> digit_sum(-1)\n        1\n        >>> digit_sum(-11)\n        1\n        >>> digit_sum(-12)\n        2\n        \"\"\"\n        return sum([int(n) for n in str(num)])\n\n    def sort_by_points(nums):\n        \"\"\"\n        >>> sort_by_points([1, 11, -1, -11, -12])\n        [-1, -11, 1, -12, 11]\n        \"\"\"\n        nums.sort(key=digit_sum)\n        if len(nums) == 0:\n            return []\n        if digit_sum(nums[0]) == digit_sum(nums[-1]):\n            return nums\n        return [nums[i] for i in range(len(nums)) if digit_sum(nums[i]) == digit_sum(nums[-1])]\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: sum(map(int, str(x))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Helper function to sum digits of given integer.\n        \"\"\"\n        num_str = str(num)\n        return sum(int(d) for d in num_str)\n\n    return sorted(nums, key=sum_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given integer.\n        \"\"\"\n        sum = 0\n        while num!= 0:\n            sum += num % 10\n            num //= 10\n        return sum\n\n    def get_similar(items):\n        \"\"\"\n        Write a function which returns a list of items which have\n        similar sum of digits.\n        \"\"\"\n        # Find first item\n        item = items[0]\n        # Find all other items with same sum of digits\n        similar_items = [item]\n        for i in range(1, len(items)):\n            if sum_digits(item) == sum_digits(items[i]):\n                similar_items.append(items[i])\n        return similar_items\n\n    def get_sorted(items):\n        \"\"\"\n        Write a function which returns a list of items sorted\n        based on their index in original list.\n        \"\"\"\n        sorted = sorted(items, key=lambda x: x.index)\n        return sorted\n\n    # Get similar items\n    similar_items = get_similar(nums)\n    # Get sorted items\n    sorted = get_sorted(similar_items)\n\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_sum_digits(num):\n        \"\"\"\n        Returns sum of digits of given number.\n        \"\"\"\n        return sum(int(i) for i in str(num))\n\n    def get_sorted(nums):\n        \"\"\"\n        Sorts given list of numbers.\n        \"\"\"\n        sorted_num = sorted(nums, key=get_sum_digits)\n        return sorted_num\n\n    if not nums:\n        return []\n\n    return get_sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        sum = 0\n        while num!= 0:\n            sum += num % 10\n            num //= 10\n        return sum\n\n    def compare(a, b):\n        return digit_sum(a) - digit_sum(b)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_digit(num):\n        return int(str(num)[-1])\n\n    def get_points(num):\n        return sum(get_digit(num) for num in nums)\n\n    return sorted(nums, key=get_points)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return []\n    ordered_list = sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n\n    # If we have several items with same sum of digits, sort them based on\n    # their index in original list.\n    if len(ordered_list) > 1:\n        for i in range(0, len(ordered_list)):\n            if ordered_list[i] == ordered_list[i - 1]:\n                ordered_list[i] = nums[i]\n\n    return ordered_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    nums = sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    nums.sort(key=lambda num: sum(map(int, str(num))))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    # sort the list\n    # reverse the list\n    # print(nums)\n    # sort the list\n    return sorted(nums, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return []\n    nums = sorted(nums, key=lambda num: sum(int(n) for n in str(num)))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key = lambda x: sum(map(int, str(x))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Returns the sum of digits of given integer.\n\n        For example:\n        >>> sum_digits(1) == 1\n        >>> sum_digits(11) == 1\n        >>> sum_digits(-1) == 1\n        >>> sum_digits(-11) == 1\n        >>> sum_digits(-12) == 2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def order_by_points(nums):\n        \"\"\"\n        Sorts the given list of integers in ascending order\n        according to the sum of their digits.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        nums = sorted(nums, key=sum_digits)\n        return nums\n\n    return order_by_points(nums)</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order(num):\n        d = sum([int(i) for i in str(num)])\n        if d == 0:\n            return num\n        else:\n            return num * 10**(d-1)\n    return sorted(nums, key=order)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        if num < 0:\n            return -sum_digits(-num)\n        else:\n            return sum([int(c) for c in str(num)])\n\n    return sorted(nums, key=sum_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum([int(x) for x in str(num)]), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_sum(num):\n        return sum(map(int, str(num)))\n    if not nums:\n        return []\n    return sorted(nums, key=lambda num: get_sum(num))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Returns the sum of digits of the given number.\n        \"\"\"\n        if num == 0:\n            return 0\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers according to their sum of digits.\n        \"\"\"\n        return sum_of_digits(a) - sum_of_digits(b)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        return sum([int(d) for d in str(num)])\n\n    def compare(a, b):\n        if a[1] == b[1]:\n            return cmp(a[0], b[0])\n        return cmp(a[1], b[1])\n\n    result = []\n    for n in nums:\n        sum_n = sum_digits(n)\n        result.append((sum_n, n))\n    result.sort(compare)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    digits = [int(d) for d in str(nums[0])]\n    # sort the digits list\n    digits.sort()\n    # create a list of pairs (sum, index)\n    digit_groups = [(sum(digits[:i]), i) for i in range(len(digits))]\n    # sort the digit_groups list\n    digit_groups.sort()\n    # return the sorted list of numbers\n    return [nums[i] for (sum, i) in digit_groups]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_sum(num):\n        return sum(map(int, str(num)))\n    def compare(a, b):\n        if a[1] == b[1]:\n            return cmp(a[0], b[0])\n        else:\n            return cmp(a[1], b[1])\n    return sorted(nums, cmp=compare, key=get_sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for num in nums:\n        sum = 0\n        while num:\n            sum += num % 10\n            num /= 10\n        result.append((sum, num))\n    result.sort(key=lambda x: x[0])\n    return [num[1] for num in result]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_of_digits(num):\n        return sum([int(n) for n in str(num)])\n\n    def compare(a, b):\n        if a == b:\n            return 0\n        elif a > b:\n            return 1\n        else:\n            return -1\n\n    sorted_num = sorted(nums, key=sum_of_digits, reverse=False)\n    if len(sorted_num) == 0:\n        return []\n    else:\n        return sorted_num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def points(num):\n        digits = [int(d) for d in str(num)]\n        return sum(digits)\n    return sorted(nums, key=points)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points_helper(nums):\n        if nums == []:\n            return []\n        points = [int(i) for i in str(nums[0])]\n        for i in range(1, len(nums)):\n            points.append(sum(int(i) for i in str(nums[i])))\n        return sorted(nums, key=lambda x: points.index(x))\n    return order_by_points_helper(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # write your code here\n    return sorted(nums, key = lambda x: sum(map(int, str(x))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    nums.sort(key=sum_digits)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(n):\n        \"\"\"\n        Return sum of digits of n.\n        \"\"\"\n        return sum(int(d) for d in str(n))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two items based on their sum of digits.\n        \"\"\"\n        return sum_digits(a) - sum_digits(b)\n\n    return sorted(nums, key=compare)\n\nnums = [1, 11, -1, -11, -12]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def order(nums):\n        \"\"\"\n        Return the sorted list of numbers\n        \"\"\"\n        return sorted(nums, key=lambda num: sum_digits(num))\n\n    return order(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    elif len(nums) == 1:\n        return nums\n    else:\n        min_idx = 0\n        min_val = 0\n        for i in range(1, len(nums)):\n            val = sum(int(nums[j]) for j in range(i))\n            if val < min_val:\n                min_idx = i\n                min_val = val\n        return nums[:min_idx] + nums[min_idx:]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        return sorted(nums, key=sum_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(map(int, nums))\n    nums.sort(key=lambda x: sum(map(int, str(x))), reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(x):\n        \"\"\"\n        Get the sum of the digits of a given integer x.\n        \"\"\"\n        return sum(int(digit) for digit in str(x))\n\n    def get_similar_nums(nums):\n        \"\"\"\n        Get the sorted list of all the numbers with similar digit sum.\n        \"\"\"\n        similar_nums = sorted([num for num in nums if digit_sum(num) == digit_sum(nums[-1])], key=lambda num: nums[-1])\n        return similar_nums\n\n    def get_ordered_list(nums):\n        \"\"\"\n        Get the sorted list of all the numbers.\n        \"\"\"\n        if not nums:\n            return []\n        similar_nums = get_similar_nums(nums)\n        if len(similar_nums) == 1:\n            return similar_nums\n        return similar_nums + [nums[-1]]\n\n    return sorted(nums, key=get_ordered_list)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Write a function which sums the digits of the given number.\n        For example:\n        >>> sum_of_digits(1) == 1\n        >>> sum_of_digits(11) == 1\n        >>> sum_of_digits(-1) == 1\n        >>> sum_of_digits(-11) == 2\n        >>> sum_of_digits(-12) == 3\n        \"\"\"\n        num = abs(num)\n        s = 0\n        while num!= 0:\n            s += num % 10\n            num //= 10\n        return s\n\n    def key_fn(num):\n        \"\"\"\n        Write a function which calculates the key for the given number.\n        For example:\n        >>> key_fn(1) == 1\n        >>> key_fn(11) == 2\n        >>> key_fn(-1) == 1\n        >>> key_fn(-11) == 2\n        >>> key_fn(-12) == 3\n        \"\"\"\n        return sum_of_digits(num) + len(num)\n\n    return sorted(nums, key=key_fn)</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        return sum(digits)\n\n    def sort_func(num):\n        \"\"\"\n        >>> sort_func(1)\n        0\n        >>> sort_func(-1)\n        1\n        >>> sort_func(11)\n        2\n        >>> sort_func(-11)\n        3\n        >>> sort_func(-12)\n        4\n        \"\"\"\n        return sum_digits(num) + len(num) * 10 ** (len(str(num)) - 1)\n\n    return sorted(nums, key=sort_func, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda num: sum(map(int, str(num))))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    # sort the list according to the sum of digits\n    return sorted(nums, key=sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def point(x):\n        return sum(int(d) for d in str(x))\n    return sorted(nums, key = point)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        >>> sum_of_digits(12)\n        2\n        >>> sum_of_digits(11)\n        1\n        >>> sum_of_digits(1)\n        0\n        \"\"\"\n        digits = []\n        while num:\n            digits.append(num % 10)\n            num //= 10\n        return sum(digits)\n\n    def compare(a, b):\n        if sum_of_digits(a) > sum_of_digits(b):\n            return 1\n        elif sum_of_digits(a) < sum_of_digits(b):\n            return -1\n        else:\n            return 0\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: sum(int(d) for d in str(x)))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    nums = list(map(int, nums))\n    if not nums: return []\n    nums.sort(key=lambda x: sum(map(int, str(x))))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def helper(nums):\n        if not nums:\n            return []\n        nums.sort(key=lambda x: sum(map(int, str(x))))\n        return nums\n    return helper(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        This function returns the sum of digits of a given number.\n        \"\"\"\n        return sum([int(digit) for digit in str(num)])\n\n    sorted_nums = []\n    for num in nums:\n        if num == 0:\n            continue\n        sorted_nums.append(num)\n        if sum_digits(num) == 0:\n            break\n    sorted_nums.sort(key=sum_digits)\n\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        return sum([int(d) for d in str(num)])\n\n    nums.sort(key=sum_digits)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(n):\n        \"\"\"\n        Return sum of digits of n.\n\n        >>> digit_sum(12)\n        3\n        >>> digit_sum(12.0)\n        Traceback (most recent call last):\n           ...\n        ValueError:...\n        \"\"\"\n        try:\n            return sum(int(d) for d in str(n))\n        except ValueError:\n            raise ValueError(\"...\")\n\n    nums.sort(key=lambda x: digit_sum(x))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    def key(x):\n        return sum(int(i) for i in str(x))\n\n    return sorted(nums, key=key)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    sorted_nums = sorted(nums, key=lambda num: sum(map(int, str(num))))\n\n    if len(sorted_nums) > 1:\n        sorted_nums = sorted(sorted_nums, key=lambda num: num.index)\n\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    def digit_sum(n):\n        \"\"\"\n        Return the sum of digits of the given integer n.\n        \"\"\"\n        return sum(int(d) for d in str(n))\n\n    return sorted(nums, key=lambda n: (digit_sum(n), n))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    if len(nums) == 1:\n        return nums\n\n    # sort by first digit\n    nums.sort(key=lambda x: x % 10, reverse=True)\n\n    # sort by second digit\n    nums = sorted(nums, key=lambda x: int(x / 10))\n\n    # sort by third digit\n    nums = sorted(nums, key=lambda x: int(x / 100))\n\n    # sort by fourth digit\n    nums = sorted(nums, key=lambda x: int(x / 1000))\n\n    # sort by fifth digit\n    nums = sorted(nums, key=lambda x: int(x / 10000))\n\n    # sort by sixth digit\n    nums = sorted(nums, key=lambda x: int(x / 100000))\n\n    # sort by seventh digit\n    nums = sorted(nums, key=lambda x: int(x / 1000000))\n\n    # sort by eighth digit\n    nums = sorted(nums, key=lambda x: int(x / 10000000))\n\n    return nums\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _compare(x, y):\n        \"\"\"\n        Compare two integers according to their sum of digits.\n        If the sum is the same, compare them according to their index\n        in the original list.\n        \"\"\"\n        if x.sum() == y.sum():\n            return cmp(x.index, y.index)\n        else:\n            return cmp(x.sum(), y.sum())\n    return sorted(nums, cmp=_compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # \u89e3\u51b3\u8d1f\u6570\n    # nums = [-1, -11, 1, -12, 11]\n    # nums = [int(i) for i in nums]\n    # \u8d1f\u6570\u8f6c\u5316\u4e3a\u6b63\u6570\n    # nums = [nums[i] if i > 0 else -i for i in nums]\n    # \u89e3\u51b3\u91cd\u590d\n    # nums = sorted(set(nums))\n    # \u89e3\u51b3\u91cd\u590d\n    # nums = sorted(list(set(nums)))\n    # \u89e3\u51b3\u91cd\u590d\n    # nums = sorted(list(set(map(int, nums))))\n    # \u89e3\u51b3\u91cd\u590d\n    # nums = sorted(list(set(map(int, [str(i) for i in nums]))))\n    # \u89e3\u51b3\u91cd\u590d\n    # nums = sorted(list(set(map(int, [str(i) for i in nums]))))\n    # \u89e3\u51b3\u91cd\u590d\n    # nums = sorted(list(set(map(int, [str(i) for i in nums]))))\n    # \u89e3\u51b3\u91cd\u590d\n    # nums = sorted(list(set(map(int, [str(i) for i in nums]))))\n    # \u89e3\u51b3\u91cd\u590d\n    # nums = sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def point(n):\n        digits = str(n)\n        return sum(int(digit) for digit in digits)\n\n    return sorted(nums, key=point)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Calculate sum of digits of a given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def sort_func(item):\n        \"\"\"\n        Comparator function for sorting the list.\n        \"\"\"\n        return sum_digits(item) - sum_digits(nums[int(item) - 1])\n\n    return sorted(nums, key=sort_func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    # nums = [1, 11, -1, -11, -12]\n    # nums = [1, 11, -1, -11, -12, -13]\n    # nums = []\n    # nums = [1, 11, -1, -11, -12, -13, -2]\n    # nums = [1, 11, -1, -11, -12, -13, -2, -1]\n    if len(nums) == 0:\n        return nums\n    result = []\n    for i in range(len(nums)):\n        temp = 0\n        for j in range(len(nums[i])):\n            temp += int(nums[i][j])\n        if temp > 0:\n            result.append(nums[i])\n    for i in range(len(nums)):\n        for j in range(len(result)):\n            if result[j] == nums[i]:\n                if i == j:\n                    result.remove(nums[i])\n                else:\n                    result.remove(nums[i])\n                    result.insert(j, nums[i])\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(map(int, nums))\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return nums\n    # sort by sum of digits\n    nums.sort(key=lambda x: sum(map(int, str(x))))\n    # sort by original index\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Returns the sum of the digits of the given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Returns -1 if a should be ordered before b.\n        Returns 0 if a should be ordered at the same position as b.\n        Returns 1 if a should be ordered after b.\n        \"\"\"\n        if a == b:\n            return 0\n        if sum_digits(a) < sum_digits(b):\n            return -1\n        if sum_digits(a) > sum_digits(b):\n            return 1\n        return 0\n\n    return sorted(nums, cmp=compare)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    return sorted(nums, key = lambda num: sum(map(int,str(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(n):\n        \"\"\"\n        Compute the sum of digits of given integer n.\n        \"\"\"\n        return sum(int(digit) for digit in str(n))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two integers based on the sum of their digits.\n        \"\"\"\n        if digit_sum(a) == digit_sum(b):\n            return 0\n        elif digit_sum(a) > digit_sum(b):\n            return 1\n        else:\n            return -1\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    def sum_digits(x):\n        return sum(int(i) for i in str(x))\n\n    return sorted(nums, key=sum_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    return sorted(nums, key=lambda num: sum(map(int, str(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # An item with 0 points is always last\n    nums = sorted(nums, key=lambda num: sum(map(int, str(num))), reverse=True)\n\n    # If there are several items with the same number of points,\n    # order them based on their index in original list\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            break\n        for j in range(i + 1, len(nums)):\n            if nums[j] == 0:\n                break\n            if sum(map(int, str(nums[i]))) == sum(map(int, str(nums[j]))):\n                nums.append(nums[j])\n                del nums[j]\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Given an integer, return the sum of its digits.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    return sorted(nums, key=sum_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for num in nums:\n        s = sum(map(int, str(num)))\n        if s in result:\n            result.remove(s)\n        result.append(s)\n    return sorted(result)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda num: sum(map(int, str(num))))\n    if not nums: return []\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            nums[i] = i\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    while nums:\n        current = nums.pop()\n        while current:\n            digit = current % 10\n            result.append(digit)\n            current //= 10\n    result.sort()\n    result.reverse()\n    for i in range(len(nums)):\n        result.append(nums[i])\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(n):\n        return sum(int(i) for i in str(n))\n    return sorted(nums, key=digit_sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    sum_ = sum([int(d) for d in str(nums[i])] for i in range(len(nums)))\n    sorted_list = [nums[0]]\n    for i in range(1, len(nums)):\n        if sum_!= sum([int(d) for d in str(nums[i])]):\n            sorted_list.append(nums[i])\n        else:\n            sorted_list.append(nums[i])\n            sorted_list.append(nums[i - 1])\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Write a function which returns the sum of digits of an integer.\n        \"\"\"\n        return sum([int(d) for d in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        Write a function which compares two items based on their sum of digits.\n        \"\"\"\n        if digit_sum(a) > digit_sum(b):\n            return 1\n        elif digit_sum(a) < digit_sum(b):\n            return -1\n        else:\n            return 0\n\n    return sorted(nums, key=lambda num: [num, num.index(num)], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def compare(a, b):\n        \"\"\"\n        This function returns -1 if a < b, 1 if a > b and 0\n        if a == b.\n        \"\"\"\n        if a[0] < b[0]:\n            return -1\n        elif a[0] > b[0]:\n            return 1\n        else:\n            return 0\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort_by_index(nums):\n        \"\"\"\n        Helper function for sorting the list.\n        \"\"\"\n        sorted_nums = sorted(nums, key=nums.index)\n        return sorted_nums\n\n    def _sort_by_points(nums):\n        \"\"\"\n        Helper function for sorting the list.\n        \"\"\"\n        points = []\n        for num in nums:\n            points.append(int(num))\n        points.sort()\n        return [nums[i] for i in points]\n\n    return _sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        digits = []\n        while num!= 0:\n            digits.append(num % 10)\n            num //= 10\n        return digits\n\n    def get_index(num):\n        index = 0\n        for i in range(len(nums)):\n            if nums[i] == num:\n                return i\n        return -1\n\n    def get_digits(num):\n        index = get_index(num)\n        digits = sum_digits(nums[index])\n        return digits\n\n    def get_similar_nums(num):\n        index = get_index(num)\n        digits = sum_digits(nums[index])\n        similar = []\n        for i in range(len(nums)):\n            if nums[i] == num:\n                continue\n            if sum_digits(nums[i]) == digits:\n                similar.append(nums[i])\n        return similar\n\n    nums.sort(key=get_digits)\n    if not nums:\n        return []\n    similar = get_similar_nums(nums[0])\n    for num in nums:\n        if num not in similar:\n            similar.append(num)\n    return similar", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=sum_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        >>> sum_of_digits(1) == 1\n        >>> sum_of_digits(11) == 1\n        >>> sum_of_digits(-1) == 1\n        >>> sum_of_digits(-11) == 1\n        >>> sum_of_digits(-12) == 2\n        \"\"\"\n        return sum([int(n) for n in str(num)])\n\n    def compare_points(a, b):\n        \"\"\"\n        >>> compare_points(1, 11) == -1\n        >>> compare_points(1, -1) == 1\n        >>> compare_points(1, -11) == -1\n        >>> compare_points(1, -12) == 1\n        >>> compare_points(11, -1) == -1\n        >>> compare_points(11, -11) == -1\n        >>> compare_points(11, -12) == 1\n        >>> compare_points(-1, -11) == -1\n        >>> compare_points(-1, -12) == 1\n        >>> compare_points(-11, -12) == -1\n        \"\"\"\n        return cmp(sum_of_digits(a), sum_of_digits(b))\n\n    return sorted(nums, cmp=compare_points)\n\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(map(int, str(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(map(int, str(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(n):\n        return sum([int(d) for d in str(n)])\n\n    def compare(a, b):\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_digits(num):\n        \"\"\"\n        Sum of digits of given number.\n        \"\"\"\n        return sum([int(digit) for digit in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        Compare two items and return -1 if a < b, 0 if a == b and 1 if a > b.\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # write your code here\n    new_list = []\n    for number in nums:\n        new_list.append(sum(int(x) for x in str(number)))\n    new_list.sort()\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Sum of digits of given number\n        \"\"\"\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        return sum(digits)\n\n    sorted_nums = sorted(nums, key=sum_digits)\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Return the sum of digits of an integer.\n        \"\"\"\n        digits = []\n        while num!= 0:\n            digits.append(num % 10)\n            num /= 10\n        return sum(digits)\n    return sorted(nums, key=digit_sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(map(int, nums))\n\n    # initialize the variable for the sum of digits\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += num\n\n    # initialize the variable for the index of the original list\n    index = 0\n\n    # initialize the variable for the sorted list\n    sorted_num = []\n\n    # loop through each of the items in the list\n    for num in nums:\n        # get the sum of digits of the current number\n        sum_of_digits = num\n\n        # compare the sum of digits with the previously stored sum of digits\n        if sum_of_digits > sum_of_digits:\n            # if the sum of digits is greater than the previously stored one,\n            # then the number should be placed after the previously stored number\n            index += 1\n        else:\n            # if the sum of digits is less than or equal to the previously stored one,\n            # then the number should be placed before the previously stored number\n            index -= 1\n\n        # store the sum of digits and the index in the sorted list\n        sorted_num.append((sum_of_digits, index))\n\n    # return the sorted list\n    return sorted_num\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    return sorted(nums, key = lambda num: sum([int(i) for i in str(num)]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Returns the sum of digits of a number\n        \"\"\"\n        if num == 0:\n            return 0\n        return int(str(num)[-1])\n\n    def sort_func(num):\n        \"\"\"\n        Returns the sum of digits of a number\n        \"\"\"\n        if num == 0:\n            return 0\n        return digit_sum(num)\n\n    # sort the input list\n    nums.sort(key=sort_func)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        digits = 0\n        while num:\n            digits += num % 10\n            num //= 10\n        return digits\n\n    return sorted(nums, key=sum_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    result = []\n    if len(nums) == 0:\n        return result\n    while len(nums) > 1:\n        max_num = 0\n        for i in range(len(nums)):\n            num = nums[i]\n            if num == 0:\n                continue\n            if num > max_num:\n                max_num = num\n        result.append(max_num)\n        nums.remove(max_num)\n    result.append(nums[0])\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def compare(a, b):\n        if a[0] == b[0]:\n            return 0\n        else:\n            return (a[0] > b[0]) - (a[0] < b[0])\n\n    return sorted(nums, key=lambda x: sum(int(d) for d in str(x)), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(n):\n        return sum(int(i) for i in str(n))\n    return sorted(nums, key=sum_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum([int(d) for d in str(num)]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    # sort based on the sum of digits\n    nums.sort(key=lambda num: sum([int(n) for n in str(num)]))\n\n    # sort based on the index in original list if the sum of digits is the same\n    prev = nums[0]\n    for num in nums[1:]:\n        if sum([int(n) for n in str(num)]) == sum([int(n) for n in str(prev)]):\n            nums.append(num)\n            nums.sort(key=lambda num: nums.index(num))\n            nums.remove(num)\n        prev = num\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    nums.sort(key=lambda x: sum([int(i) for i in str(x)]))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort_by_points(nums):\n        if not nums:\n            return []\n        points = [sum(map(int, str(num))) for num in nums]\n        return sorted(nums, key=lambda num: points.index(num), reverse=True)\n\n    return _sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(map(int, nums))\n    if not nums:\n        return []\n    nums.sort(key=lambda x: sum(map(int, str(x))))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # write your code here\n    if len(nums) == 0:\n        return []\n    else:\n        points = 0\n        for i in nums:\n            points = points + int(i)\n        return sorted(nums, key=lambda num: points - int(num))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        >>> digit_sum(1)\n        1\n        >>> digit_sum(11)\n        1\n        >>> digit_sum(-1)\n        -1\n        >>> digit_sum(-11)\n        -1\n        >>> digit_sum(-12)\n        -2\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    return sorted(nums, key=lambda num: digit_sum(num))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # \u6392\u5e8f\n    return sorted(nums, key=lambda x: sum([int(y) for y in str(x)]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        return sum(map(int, str(num)))\n\n    def compare(a, b):\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digits(n):\n        \"\"\"\n        >>> digits(1)\n        [1]\n        >>> digits(11)\n        [1, 1]\n        >>> digits(-1)\n        [-1]\n        >>> digits(-11)\n        [-1, -1]\n        >>> digits(-12)\n        [-1, -2]\n        \"\"\"\n        return list(map(int, str(n)[::-1]))\n\n    def sum_of_digits(n):\n        \"\"\"\n        >>> sum_of_digits(1)\n        1\n        >>> sum_of_digits(11)\n        2\n        >>> sum_of_digits(-1)\n        -1\n        >>> sum_of_digits(-11)\n        -2\n        >>> sum_of_digits(-12)\n        -3\n        \"\"\"\n        return sum(digits(n))\n\n    return sorted(nums, key=sum_of_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(map(int, str(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(x):\n        \"\"\"\n        :param x: an integer\n        :return: sum of digits of x\n        \"\"\"\n        return sum(int(i) for i in str(x))\n\n    def sort_func(x, y):\n        return sum_digits(x) - sum_digits(y)\n\n    return sorted(nums, key=sort_func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which calculates sum of digits of given integer.\n\n        For example:\n        >>> sum_digits(1)\n        0\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        2\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        digits = []\n        while num:\n            digits.append(num % 10)\n            num //= 10\n        return sum(digits)\n    return sorted(nums, key=sum_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key = lambda num: sum(map(int, str(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def helper(nums):\n        \"\"\"\n        Helper function which sorts the given list of integers.\n        \"\"\"\n        # sort nums based on the sum of their digits\n        sorted_nums = sorted(nums, key=lambda x: sum(int(x) for x in str(x)))\n        # sort nums based on the index in the original list\n        sorted_nums = sorted(sorted_nums, key=lambda x: nums.index(x))\n        return sorted_nums\n\n    return helper(nums)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of digits of given number.\n        \"\"\"\n        if num < 0:\n            return -sum_digits(-num)\n        return sum(num % 10 for num in str(num))\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if not nums:\n            return []\n        points = sorted(nums, key=sum_digits, reverse=True)\n        return [num for num, point in zip(nums, points) if point == sum_digits(num)]\n\n    return sort_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Return sum of the digits of the given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(x, y):\n        \"\"\"\n        Compare two numbers based on their digit sum.\n        \"\"\"\n        return digit_sum(x) - digit_sum(y)\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Helper function to calculate sum of digits of an integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    result = []\n    for num in nums:\n        sum_of_digits_num = sum_of_digits(num)\n        if sum_of_digits_num not in result:\n            result.append(sum_of_digits_num)\n    result.sort()\n    return [num for num in nums if num in result]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda num: sum(map(int, str(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Returns the sum of digits of a given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def sort_func(num):\n        \"\"\"\n        Returns the sum of digits of a given integer.\n        \"\"\"\n        return digit_sum(num)\n\n    return sorted(nums, key=sort_func, reverse=False)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda num: sum(map(int, str(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # write code here", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Write a function which returns the sum of digits of the given number.\n        \"\"\"\n        if num == 0:\n            return 0\n        return sum(int(digit) for digit in str(num))\n\n    def digit_sum_sort(nums):\n        \"\"\"\n        Return a new list of numbers in which the sum of digits of each number\n        is sorted.\n        \"\"\"\n        new_list = []\n        for i in range(len(nums)):\n            for j in range(len(nums) - 1 - i):\n                if digit_sum(nums[j]) > digit_sum(nums[j + 1]):\n                    new_list.append(nums[j + 1])\n                    nums[j + 1] = nums[j]\n                    nums[j] = new_list[-1]\n        return new_list\n\n    return digit_sum_sort(nums)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_digit(num):\n        return str(num)[-1]\n\n    def get_sum(num):\n        return int(num) + int(get_digit(num))\n\n    def sort_func(num):\n        return get_sum(num)\n\n    return sorted(nums, key=sort_func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    nums.sort(key=lambda x: sum(int(d) for d in str(x)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def num_sums(nums):\n        \"\"\"\n        Helper function to calculate the sum of digits of a list of integers.\n        \"\"\"\n        return sum(map(lambda n: int(n), str(nums)))\n\n    def compare(a, b):\n        \"\"\"\n        Helper function to compare two items in the list.\n        \"\"\"\n        return num_sums(a) - num_sums(b)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        :param num: an integer\n        :return: sum of digits of the given integer\n        \"\"\"\n        return sum(map(int, str(num))) if num!= 0 else 0\n\n    def compare(a, b):\n        \"\"\"\n        :param a: a number\n        :param b: a number\n        :return: -1 if a < b, 0 if a == b, 1 if a > b\n        \"\"\"\n        if a == b:\n            return 0\n        elif a < b:\n            return -1\n        else:\n            return 1\n\n    def compare_with_points(a, b):\n        \"\"\"\n        :param a: a number\n        :param b: a number\n        :return: -1 if a < b, 0 if a == b, 1 if a > b\n        \"\"\"\n        return compare(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, key=compare_with_points)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Write a function which returns the sum of the digits of the given\n        integer. For example:\n        >>> digit_sum(1) == 1\n        >>> digit_sum(11) == 1\n        >>> digit_sum(-1) == 1\n        >>> digit_sum(-11) == 1\n        >>> digit_sum(-12) == 2\n        \"\"\"\n        if num < 0:\n            return -(digit_sum(-(num)))\n        num_str = str(num)\n        return sum(int(num_str[i]) for i in range(len(num_str)))\n\n    def compare_by_points(a, b):\n        \"\"\"\n        Write a function which compares two given integers according\n        to their digit sum. For example:\n        >>> compare_by_points(-1, -11) == -1\n        >>> compare_by_points(-1, 1) == 1\n        >>> compare_by_points(-11, 1) == -1\n        >>> compare_by_points(-11, -12) == 1\n        \"\"\"\n        return cmp(digit_sum(a), digit_sum(b))\n\n    return sorted(nums, cmp=compare_by_points)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Write a function which returns the sum of the digits of a number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def digit_sum(num):\n        \"\"\"\n        Write a function which returns the sum of digits of a number.\n        \"\"\"\n        return sum_digits(num)\n\n    def sort_func(num):\n        return digit_sum(num), num\n\n    return sorted(nums, key=sort_func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    nums.sort(key=sum_digits, reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def point_comparator(a, b):\n        a_points = sum([int(d) for d in str(a)])\n        b_points = sum([int(d) for d in str(b)])\n        if a_points > b_points:\n            return 1\n        elif a_points < b_points:\n            return -1\n        else:\n            return 0\n    return sorted(nums, key=point_comparator)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        return sum(digits)\n    return sorted(nums, key=sum_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_digits(num):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        return sorted(digits, key=lambda x: sum(x), reverse=True)\n\n    return [num for num in nums if num!= 0] + [nums[-1]] + order_by_points(nums[1:-1])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Helper function to sum the digits of an integer.\n        \"\"\"\n        return sum([int(i) for i in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        Helper function to compare two items.\n        \"\"\"\n        if sum_digits(a) == sum_digits(b):\n            return cmp(a, b)\n        else:\n            return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda num: sum([int(n) for n in str(num)]))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    nums.sort(key=lambda num: sum(int(num) for num in str(num)))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of an integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two integers based on their sum of digits.\n        \"\"\"\n        return sum_digits(a) - sum_digits(b)\n\n    nums.sort(key=compare)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    nums.sort(key=lambda num: sum([int(digit) for digit in str(num)]))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(d) for d in str(x)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        return sum([int(d) for d in str(num)])\n\n    def compare(a, b):\n        return digit_sum(a) - digit_sum(b)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        return sum(map(int, str(num)))\n\n    def compare(x, y):\n        if x == y:\n            return 0\n        elif x < y:\n            return 1\n        else:\n            return -1\n\n    return sorted(nums, key=lambda num: sum_digits(num), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def _sort_by_digits(nums, i, j):\n        \"\"\"\n        Recursive helper function which sorts nums[i:j]\n        in ascending order according to the sum of their digits.\n\n        For example:\n        >>> _sort_by_digits([1, 11, -1, -11, -12], 0, 4)\n        [-1, 1, -11, -12, 11]\n        \"\"\"\n\n        if i >= j:\n            return nums[i:j]\n\n        mid = (i + j) // 2\n        left, right = nums[i:mid], nums[mid + 1:j]\n\n        left_sorted = _sort_by_digits(left, 0, len(left) - 1)\n        right_sorted = _sort_by_digits(right, 0, len(right) - 1)\n\n        return left_sorted + [nums[mid]] + right_sorted\n\n    return _sort_by_digits(nums, 0, len(nums) - 1)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=sum_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Calculate the sum of digits of a given integer.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(x, y):\n        \"\"\"\n        Compare two given integers and return -1, 0 or 1 depending\n        on whether x is less than, equal to, or greater than y.\n        \"\"\"\n        return (digit_sum(x) - digit_sum(y)) if x!= y else 0\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    nums.sort(key=lambda num: sum([int(num) for num in str(num)]))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        3\n        >>> sum_digits(-1)\n        -1\n        >>> sum_digits(-11)\n        -2\n        >>> sum_digits(-12)\n        -2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def key_func(num):\n        return sum_digits(num) + num\n\n    return sorted(nums, key=key_func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    if not nums:\n        return result\n    for i in range(len(nums)):\n        sum = sum_digits(nums[i])\n        if sum!= 0:\n            result.append(nums[i])\n    return sorted(result, key=lambda num: sum_digits(num))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Calculate the sum of the digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def compare(num1, num2):\n        \"\"\"\n        Compare the sum of digits of two numbers.\n        \"\"\"\n        return digit_sum(num1) - digit_sum(num2)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points_helper(nums):\n        if not nums:\n            return []\n        nums.sort(key=lambda num: sum(map(int, str(num))))\n        return nums\n\n    return order_by_points_helper(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        >>> sum_digits(1)\n        1\n        >>> sum_digits(11)\n        1\n        >>> sum_digits(-1)\n        1\n        >>> sum_digits(-11)\n        1\n        >>> sum_digits(-12)\n        2\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare_by_points(a, b):\n        \"\"\"\n        >>> compare_by_points(1, 11)\n        -1\n        >>> compare_by_points(11, 1)\n        1\n        >>> compare_by_points(-1, -11)\n        -1\n        >>> compare_by_points(-11, -1)\n        1\n        >>> compare_by_points(-12, 1)\n        -1\n        >>> compare_by_points(1, -12)\n        1\n        \"\"\"\n        return cmp(sum_digits(a), sum_digits(b))\n\n    return sorted(nums, cmp=compare_by_points)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum([int(d) for d in str(num)]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_digit_sum(n):\n        \"\"\"\n        >>> get_digit_sum(1)\n        0\n        >>> get_digit_sum(-1)\n        1\n        >>> get_digit_sum(11)\n        2\n        >>> get_digit_sum(-12)\n        3\n        \"\"\"\n        num = abs(n)\n        return sum([int(i) for i in str(num)])\n\n    def compare(a, b):\n        \"\"\"\n        >>> compare(-1, 11)\n        -1\n        >>> compare(1, -11)\n        1\n        >>> compare(-1, -11)\n        1\n        >>> compare(1, 12)\n        -1\n        \"\"\"\n        return get_digit_sum(a) - get_digit_sum(b)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def helper(nums, index):\n        if len(nums) <= index:\n            return nums\n\n        current_sum = sum(nums[:index])\n        max_index = index\n\n        for i in range(index, len(nums)):\n            new_sum = sum(nums[:i]) + nums[i]\n            if new_sum > current_sum:\n                current_sum = new_sum\n                max_index = i\n\n        nums[index] = nums[max_index]\n        nums[max_index] = helper(nums, index + 1)\n        return nums\n    return helper(nums, 0)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    return sorted(nums, key=sum_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key = lambda x: sum(map(int, str(x))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        digits = []\n        while num!= 0:\n            digits.append(num % 10)\n            num /= 10\n        return digits\n\n    def sort_func(num):\n        return sum_of_digits(num) + num * 10 ** len(sum_of_digits(num))\n\n    return sorted(nums, key=sort_func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_digit_sum(num):\n        return sum(int(n) for n in str(num))\n\n    def get_digit_sum_indices(nums):\n        digit_sums = [get_digit_sum(num) for num in nums]\n        indices = sorted(range(len(nums)), key=digit_sums.__getitem__)\n        return [nums[i] for i in indices]\n\n    def sort_by_points(nums):\n        nums_with_digit_sums = get_digit_sum_indices(nums)\n        sorted_nums = [nums[i] for i in nums_with_digit_sums]\n        return sorted_nums\n\n    return sort_by_points(nums)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    # you may need to use list comprehensions or generator expressions\n    # or reduce\n    pass", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return the sum of digits of given number.\n        \"\"\"\n        return sum(int(d) for d in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on their sum of digits.\n        \"\"\"\n        return sum_digits(a) - sum_digits(b)\n\n    return sorted(nums, key=lambda num: compare(num, nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    while nums:\n        num = nums.pop(0)\n        if not num:\n            continue\n        digit = num % 10\n        if digit:\n            result.append(digit)\n        num = num // 10\n\n    return sorted(result + [num] for num in nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        if num < 0:\n            return sum_digits(-num)\n        return int(num)\n\n    def sort_by_digits(nums):\n        sorted_list = sorted(nums, key=sum_digits, reverse=True)\n        if len(sorted_list) == 0:\n            return []\n        return sorted_list\n\n    return sort_by_digits(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(digit) for digit in str(x)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=sum_digits)\n    if nums:\n        return nums\n    else:\n        return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit(x):\n        return int(str(x)[-1])\n\n    def point(x):\n        return sum(digit(i) for i in x)\n\n    return sorted(nums, key=point)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _order_by_points(nums):\n        if not nums:\n            return nums\n        # sort nums based on the sum of their digits\n        nums.sort(key=lambda num: sum(int(digit) for digit in str(num)))\n        return nums\n\n    return _order_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(n):\n        \"\"\"\n        Returns sum of digits of integer n.\n        \"\"\"\n        return sum(n % 10 ** i for i in range(len(str(n))))\n\n    return sorted(nums, key=sum_of_digits)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def num_to_digit(num):\n        if num < 0:\n            return -num_to_digit(-num)\n        return int(str(num)[-1])\n\n    def digit_sum(num):\n        return num_to_digit(num) + num_to_digit(num * 10)\n\n    def compare(a, b):\n        return digit_sum(a) - digit_sum(b)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda num: sum(int(n) for n in str(num)))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # write code here", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return []\n    order = []\n    for num in nums:\n        digits = str(num).split('')\n        digit_sum = sum(int(digit) for digit in digits)\n        if digit_sum not in order:\n            order.append(digit_sum)\n    order.sort()\n    order.reverse()\n    return [num for num in nums if num in order]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda num: sum([int(digit) for digit in str(num)]))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_digit(num):\n        if num < 0:\n            return -(num % 10)\n        else:\n            return num % 10\n\n    return sorted(nums, key=lambda num: sum(get_digit(num) for num in nums))\n\"\"\"\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\nTrue\n>>> order_by_points([]) == []\nTrue\n\"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_digit_sum(n):\n        return sum(int(d) for d in str(n))\n\n    def get_position(n):\n        return nums.index(n)\n\n    return sorted(nums, key=lambda x: get_digit_sum(x), reverse=True) + \\\n        sorted(nums, key=get_position, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        digits = list(map(int, str(num)))\n        return sum(digits)\n\n    def compare(x, y):\n        return cmp(sum_of_digits(x), sum_of_digits(y))\n\n    return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [num for num in nums if num >= 0]\n    if not nums:\n        return []\n    nums.sort(key=lambda num: sum(map(int, str(num))))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    nums = list(map(int, nums))\n    nums.sort(key=lambda num: sum(map(int, str(num))))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # \u6392\u5e8f\u7684\u601d\u8def:\n    # \u6392\u5e8f\u524d, \u627e\u51fa\u5177\u6709\u76f8\u540c\u6570\u5b57\u548c\u503c\u7684\u5143\u7d20, \u6392\u5e8f\u65f6, \u6309\u7167\u7d22\u5f15\u4f4d\u7f6e\u6392\u5e8f\n    # \u6392\u5e8f\u540e, \u627e\u51fa\u5177\u6709\u76f8\u540c\u6570\u5b57\u548c\u503c\u7684\u5143\u7d20, \u6392\u5e8f\u65f6, \u6309\u7167\u6570\u5b57\u503c\u6392\u5e8f\n    # \u6392\u5e8f\u65f6, \u627e\u5230\u5177\u6709\u76f8\u540c\u6570\u5b57\u548c\u503c\u7684\u5143\u7d20, \u6392\u5e8f\u65f6, \u6309\u7167\u7d22\u5f15\u4f4d\u7f6e\u6392\u5e8f\n    # \u6392\u5e8f\u540e, \u627e\u51fa\u5177\u6709\u76f8\u540c\u6570\u5b57\u548c\u503c\u7684\u5143\u7d20, \u6392\u5e8f\u65f6, \u6309\u7167\u6570\u5b57\u503c\u6392\u5e8f\n\n    def _compare(a, b):\n        # \u6bd4\u8f83\u4e24\u4e2a\u5143\u7d20, \u5982\u679ca.sum == b.sum, \u5219\u6309\u7167a.index \u548c b.index \u8fdb\u884c\u6392\u5e8f\n        if a.sum == b.sum:\n            return cmp(a.index, b.index)\n        # \u5982\u679ca.sum < b.sum, \u5219\u6309\u7167a.sum \u548c b.sum \u8fdb\u884c\u6392\u5e8f\n        if a.sum < b.sum:\n            return -1\n        # \u5982\u679ca.sum > b.sum, \u5219\u6309\u7167a.sum \u548c b.sum \u8fdb\u884c\u6392\u5e8f\n        return 1\n\n    def _sort_by_index(nums):\n        # \u6392\u5e8f\u524d, \u627e\u51fa\u5177\u6709\u76f8\u540c\u6570\u5b57\u548c\u503c\u7684\u5143\u7d20\n        # \u6392\u5e8f\u65f6, \u6309\u7167\u7d22\u5f15", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Returns the sum of digits of given number.\n        \"\"\"\n        if num == 0:\n            return 0\n        else:\n            return sum(map(int, str(num)))\n    return sorted(nums, key=lambda x: sum_digits(x))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def compare(a, b):\n        if a[0] == b[0]:\n            return 0\n        elif a[0] > b[0]:\n            return 1\n        else:\n            return -1\n    if not nums:\n        return []\n    return sorted(nums, key=lambda x: sum(int(n) for n in str(x)),\n                  reverse=True) or [nums[0]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Returns the sum of the digits of the number.\n        \"\"\"\n        sum = 0\n        while num!= 0:\n            sum += num % 10\n            num = num // 10\n        return sum\n\n    def get_sorted_index(num):\n        \"\"\"\n        Returns the index of the sorted num in the sorted list.\n        \"\"\"\n        sum_digits_sorted = sorted([sum_digits(num) for num in nums])\n        return sum_digits_sorted.index(sum_digits(num))\n\n    return sorted(nums, key=get_sorted_index)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Write a function which calculates the sum of digits of the given integer.\n        \"\"\"\n        return sum(int(i) for i in str(num))\n\n    def compare(a, b):\n        \"\"\"\n        Write a function which compares two integers and returns\n        -1 if a < b, 0 if a == b, and 1 if a > b.\n        \"\"\"\n        return sum_of_digits(a) - sum_of_digits(b)\n\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        \"\"\"\n        if nums == []:\n            return []\n        return sorted(nums, cmp=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(num):\n        \"\"\"\n        Return sum of digits of given number.\n        \"\"\"\n        return sum([int(i) for i in str(num)])\n\n    def sort_by_points(nums):\n        \"\"\"\n        Return list of numbers sorted by the sum of their digits.\n        \"\"\"\n        # sort the list of numbers\n        sorted_nums = sorted(nums)\n\n        # sort the list of numbers according to the sum of their digits\n        # if the sum of digits is equal, sort them by their index\n        return sorted(sorted_nums, key=sum_digits, reverse=True)\n\n    return sort_by_points(nums)"]]