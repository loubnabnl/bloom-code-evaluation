[["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    result = []\n    for i in range(k):\n        result.append(arr[i])\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    # sort the array\n    # return the last k numbers\n    #return arr[-k:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    if k > len(arr):\n        return []\n    if k == 1:\n        return [arr[0]]\n    left = 0\n    right = len(arr) - 1\n    # print(left, right)\n    # print(arr)\n    while left < right:\n        if arr[left] > arr[right]:\n            left += 1\n        else:\n            right -= 1\n    return arr[left:right + 1]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    return [arr[i] for i in sorted(range(len(arr)), key=lambda x: arr[x], reverse=True)[:k]]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    if k >= len(arr):\n        return arr[:k]\n    else:\n        return arr[:k] + arr[k:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    l = len(arr)\n    if k > l:\n        return []\n    if k == 0:\n        return arr\n    if k == 1:\n        return max(arr, key=arr.__getitem__)\n    temp = []\n    for i in range(l):\n        if arr[i] > 0:\n            temp.append(arr[i])\n    temp.sort()\n    for i in range(k-1):\n        temp.append(temp[0])\n    return temp\n\narr = [-3, -4, 5]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n\n    # use a max heap to store the k largest numbers\n    maxHeap = []\n    for _ in range(k):\n        maxHeap.append(arr[0])\n\n    # get the k largest numbers\n    for num in arr[1:]:\n        maxHeap.append(num)\n        while len(maxHeap) > k:\n            maxHeap.pop(0)\n\n    return maxHeap\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    if k == 0:\n        return []\n    if k == 1:\n        return [arr[0]]\n    max_arr = sorted(arr)\n    k_max = len(max_arr)\n    if k == k_max:\n        return [max_arr[k - 1]]\n    sub_arr = []\n    for i in range(k):\n        sub_arr.append(max_arr[i])\n    return sub_arr", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return arr\n    arr.sort()\n    return arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    if len(arr) < k:\n        return []\n\n    if len(arr) == k:\n        return arr\n\n    # Get the first k numbers in the array\n    max_k = arr[:k]\n\n    # Get the last k numbers in the array\n    min_k = arr[-k:]\n\n    # Get the maximum of the two lists\n    return max(max_k, min_k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if k > len(arr):\n        return arr\n    elif k == 0:\n        return []\n    elif k == 1:\n        return arr[0]\n    # if k is not in the range of [0, len(arr)]\n    # then return arr[0]\n    # print(arr)\n    # print(k)\n    # print(arr[:k])\n    # print(arr[k:])\n    # print(arr[:k])\n    # print(arr[k:])\n    # print(arr[:k])\n    # print(arr[k:])\n    # print(arr[:k])\n    # print(arr[k:])\n    # print(arr[:k])\n    # print(arr[k:])\n    # print(arr[:k])\n    # print(arr[k:])\n    # print(arr[:k])\n    # print(arr[k:])\n    # print(arr[:k])\n    # print(arr[k:])\n    # print(arr[:k])\n    # print(arr[k:])\n    # print(arr[:k])\n    # print(arr[k:])\n    # print(arr[:k])\n    # print(arr[k:])\n    # print(arr[:k])\n    # print(arr[k:])\n    # print(arr[:k])\n    # print(arr[k:])\n    # print(arr[:", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k <= 0:\n        return []\n    res = []\n    for i in range(k):\n        res.append(max(arr[i * k:(i + 1) * k]))\n    return sorted(res)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # \u66b4\u529b\u6c42\u89e3\n    # \u904d\u5386\u6570\u7ec4\uff0c\u628a\u6700\u5927\u503c\u653e\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n    result = []\n    for i in arr:\n        if result and i > result[-1]:\n            result.append(i)\n        else:\n            result.append(i)\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max_sub_arr(arr, k):\n        arr_len = len(arr)\n        if arr_len <= k:\n            return arr[:k]\n        if arr_len - k <= 0:\n            return []\n        mid = int(arr_len / 2)\n        left_arr = arr[:mid]\n        right_arr = arr[mid:]\n        left_max = max_sub_arr(left_arr, k)\n        right_max = max_sub_arr(right_arr, k)\n        if len(left_max) >= k:\n            return left_max + right_max\n        else:\n            return right_max + left_max\n\n    return max_sub_arr(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return []\n    elif k > n:\n        return arr\n    elif k == n:\n        return arr\n    else:\n        mid = int(n / 2)\n        left = maximum(arr[:mid], k)\n        right = maximum(arr[mid:], k - len(left))\n        return left + right", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k > len(arr):\n        return arr\n    maxs = []\n    for i in range(k):\n        maxs.append(arr[i])\n        arr[i] = arr[i] + 1\n    maxs.sort()\n    for i in range(len(arr) - k):\n        arr[i] = arr[i] - 1\n    return maxs", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    # sort the array\n    arr = sorted(arr)\n    # get the first k numbers\n    k_numbers = arr[:k]\n    # get the last k numbers\n    l_numbers = arr[-k:]\n    # get the maximum of the 2 lists\n    return max(k_numbers, l_numbers)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) <= k:\n        return arr\n    k = min(k, len(arr))\n    max_arr = []\n    for i in range(k):\n        max_arr.append(arr[i])\n    for i in range(k, len(arr)):\n        if arr[i] > max_arr[k - 1]:\n            max_arr.append(arr[i])\n    return max_arr", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    a = []\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            a.append(arr[i])\n        else:\n            a.append(arr[i+1])\n    return a", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Edge cases\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    # Solution\n    if k == 0:\n        return []\n    else:\n        result = [arr[0]]\n        for i in arr:\n            if result[-1] < i:\n                result.append(i)\n        result.sort()\n        return result[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # This method is a modified version of a solution by @Rishabh Sharma.\n    # The idea is to iterate over the array and find the max in each iteration.\n    # In each iteration, we also need to keep track of the index of the last element \n    # in the current list. This is because we need to return a sorted list.\n\n    result = []\n    index = 0\n    max_index = 0\n\n    for i, num in enumerate(arr):\n        # If we are currently processing the last element of the array, we need to \n        # add it to the result.\n        if i == len(arr) - 1:\n            result.append(num)\n            max_index += 1\n            continue\n\n        # If the current element is the max element seen so far, we need to \n        # add it to the result and update the max index\n        if num > result[max_index]:\n            result.append(num)\n            max_index += 1\n\n        # If the current element is not the max element seen so far, we need to \n        # update the max index\n        else:\n            max_index += 1\n\n    # The result needs to be sorted.\n    return sorted(result[:k])\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # you can use a heapq, but I like to do it this way\n    arr = sorted(arr)\n    k = min(k, len(arr))\n    result = []\n    for i in range(k):\n        result.append(arr[i])\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    # find the max value\n    max_val = arr[0]\n    max_pos = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_pos = i\n    # get the sorted list\n    max_list = []\n    for i in range(k):\n        max_list.append(arr[max_pos + i])\n    return max_list", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # \u666e\u901a\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\n    # max_list = []\n    # for i in range(0, len(arr)):\n    #     if len(max_list) < k:\n    #         max_list.append(arr[i])\n    #     elif arr[i] > max_list[k-1]:\n    #         max_list[k-1] = arr[i]\n    # return max_list\n    # \u53e6\u4e00\u79cd\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n*k)\n    # max_list = []\n    # for i in range(0, len(arr)):\n    #     if len(max_list) < k:\n    #         max_list.append(arr[i])\n    #     else:\n    #         max_list = sorted(max_list)\n    # return max_list\n    # \u53e6\u4e00\u79cd\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n*k)\n    # max_list = []\n    # for i in range(0, len(arr)):\n    #     if len(max_list) < k:\n    #         max_list.append(arr[i])\n    #     else:\n    #         max_list = sorted(max_list, reverse=True)\n    # return max_list\n    # \u53e6\u4e00\u79cd\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n*k)\n    # max", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def _max_subarray(arr, k):\n        if k == 0:\n            return []\n        l = []\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                l += [arr[i]]\n            else:\n                l += [arr[i]]\n                if l == []:\n                    return []\n                else:\n                    return l\n\n    return _max_subarray(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < k:\n        return []\n    if k == 1:\n        return [max(arr)]\n    if k == 2:\n        return [max(arr), max(arr)]\n    if k == 3:\n        return [max(arr), max(arr), max(arr)]\n    if k > len(arr):\n        return []\n\n    arr.sort()\n    arr.reverse()\n    ans = []\n    for i in range(k):\n        ans.append(arr[0])\n        arr.pop(0)\n    return ans\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = list(map(int, input().split()))\n    k = int(k)\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] > result[k-1]:\n            result.append(arr[i])\n        else:\n            break\n    return result[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    return sorted([arr[i] for i in range(len(arr)) if i <= k])", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    res = []\n    if k >= len(arr):\n        return res\n    for i in range(k):\n        for j in range(i + 1, k):\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    for i in range(k):\n        res.append(arr[i])\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    result = []\n    for i in range(k):\n        current = arr[i]\n        if current > 0:\n            result.append(current)\n    return sorted(result, reverse=True)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max_list(arr, k, i, res):\n        if i == len(arr):\n            res.append(arr[i])\n            return res\n\n        if k == 1:\n            res.append(arr[i])\n            return res\n\n        if i == 0:\n            res.append(arr[i])\n            return res\n\n        if arr[i - 1] >= arr[i]:\n            max_list(arr, k - 1, i - 1, res)\n            max_list(arr, k - 1, i, res)\n        else:\n            max_list(arr, k - 1, i - 1, res)\n\n    res = []\n    max_list(arr, k, 0, res)\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def find(arr, k):\n        \"\"\"\n        Finds the maximum k elements in arr\n        \"\"\"\n\n        if len(arr) < k:\n            return arr[:k]\n\n        if k == 1:\n            return arr[0]\n\n        if k == 2:\n            return max(arr[0], arr[1])\n\n        return max(find(arr[:k//2], k//2), find(arr[k//2:], k//2))\n\n    return find(arr, k)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    n = len(arr)\n    if k >= n:\n        return sorted(arr)\n    if k == 0:\n        return []\n    if k > n:\n        return []\n    # we can assume the array is sorted\n    left, right = 0, n\n    ans = []\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] >= arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    ans.append(arr[left])\n    while left < right:\n        ans.append(arr[left])\n        left += 1\n    return ans", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    n = len(arr)\n    if k > n:\n        return []\n    elif k == n:\n        return [arr[0]]\n    else:\n        s = sorted(arr)\n        i = 0\n        result = []\n        while i < k:\n            result.append(s[i])\n            i += 1\n        return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    ret = []\n    for i in range(len(arr)):\n        if arr[i] > ret[-1] or i == len(arr)-1:\n            ret.append(arr[i])\n        else:\n            ret[-1] = max(ret[-1], arr[i])\n    return ret", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return arr\n    else:\n        ret = []\n        for i in range(k):\n            ret.append(max(arr))\n        return ret", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    maxes = []\n    for i in range(0, k):\n        maxes.append(arr[i])\n    maxes.sort()\n    return maxes", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # base case\n    if k == 0:\n        return []\n\n    # sort the array\n    arr = sorted(arr)\n\n    # if length of the array is less than k, then return the array\n    if len(arr) < k:\n        return arr\n\n    # for each element in the array, keep track of its index\n    # if the element is greater than the first k elements, then return\n    # the k elements with maximum value\n    max_index = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[max_index]:\n            max_index += 1\n            if max_index == k:\n                return arr[max_index:]\n            else:\n                continue\n\n    # if the element is less than the first k elements, then add it to the last element\n    # of the returned list\n    return [arr[max_index]] + maximum(arr[max_index + 1:], k - 1)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = list(map(int, input().split()))\n    k = int(k)\n    result = []\n    for i in range(k):\n        result.append(max(arr))\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    res = []\n    for i in range(k):\n        if i == 0:\n            res.append(arr[0])\n        else:\n            if arr[i] > arr[i - 1]:\n                res.append(arr[i])\n            else:\n                res.append(arr[i - 1])\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    if k > len(arr):\n        return []\n    else:\n        k = k - 1\n        return arr[:k] + arr[k:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    max_arr = arr[:]\n    max_arr.sort()\n    return max_arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    if k > len(arr):\n        return []\n\n    # sort the array\n    arr.sort()\n\n    # reverse the array\n    arr.reverse()\n\n    # count the number of elements\n    n = len(arr)\n\n    # initialize the result array\n    result = []\n\n    # find the index of the first element to be removed\n    i = n - k\n\n    # for each element in the array\n    while i < n:\n        # if the current element is greater than the previous element\n        if arr[i] > arr[i - 1]:\n            # remove it\n            result.append(arr.pop(i))\n            # increase the index by one\n            i += 1\n        else:\n            # do nothing\n            pass\n\n    # reverse the array\n    result.reverse()\n\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    else:\n        max_k = arr[:k]\n        max_k.sort()\n        return max_k", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # The idea is to find the k numbers in arr that are greater than the rest.\n    # We can do this by finding the number in the array that is greater than all\n    # the others, and then subtracting it from each element in arr. Then, we can\n    # find the kth largest element in the new array by using the heapq.nlargest()\n    # function.\n    # We use heapq.nlargest() instead of heapq.nsmallest() because we want to\n    # find the maximum k numbers, not the minimum.\n    # The complexity of this algorithm is O(k * log(n)), where n is the length of\n    # the array.\n    # We can improve this algorithm to O(k + log(n)) by using the heapq.nsmallest()\n    # function instead of heapq.nlargest().\n    # However, this would require us to create an extra list of size k to store\n    # the result, which is unnecessary since the heapq.nlargest() function already\n    # returns the k numbers in sorted order.\n    # Also, the heapq.nsmallest() function is not available in Python 2.6.\n\n    # Find the number in the array that is greater", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    else:\n        return sorted(arr)[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    if k > len(arr):\n        return []\n    k = min(k, len(arr))\n    return arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    max_num = arr[0]\n    result = []\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            result = [arr[i]]\n        elif arr[i] == max_num:\n            result.append(arr[i])\n    if len(result) < k:\n        return [arr[-1]] + result\n    return result[-k:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) <= k:\n        return sorted(arr)\n\n    # we can use a max heap to get the k largest numbers\n    maxheap = []\n    for _ in range(k):\n        maxheap.append(arr[0])\n\n    for i in range(1, len(arr)):\n        if maxheap[0] > arr[i]:\n            maxheap[0], maxheap[i] = maxheap[i], maxheap[0]\n        maxheap.append(arr[i])\n\n    return sorted(maxheap)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = list(map(int, input().split()))\n    k = int(input())\n\n    if k > len(arr):\n        return []\n\n    def max_subset(arr, k):\n        if k == 0:\n            return []\n\n        subset = max_subset(arr[:k], k - 1)\n        subset.append(arr[k])\n        return subset\n\n    return max_subset(arr, k)\n\n\narr = [-3, -4, 5]\nk = 3", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    # sort the array and take the first k elements\n    #return list(arr[:k])\n\n    # better solution\n    # get the max value\n    max_value = max(arr)\n\n    # use a list to store the result\n    result = []\n    # for each index, if the value is greater than the max value, we will store it in the list\n    for i in range(len(arr)):\n        if arr[i] > max_value:\n            result.append(arr[i])\n\n    # return the list\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n\n    # We need to find the first k elements in the array and then sort them\n    # We use two pointers to move through the array\n    # The first pointer starts from the beginning of the array and \n    # the second pointer starts from the end of the array\n    # If the first element is greater than the second element, we swap the pointers\n    # If the first element is less than or equal to the second element, we do nothing\n    # We keep doing this until the first pointer reaches the end of the array\n    # At that point, the first pointer points to the last k elements\n    # We sort them and return the result\n    first = 0\n    second = len(arr) - 1\n    while first < second:\n        if arr[first] <= arr[second]:\n            pass\n        else:\n            temp = arr[first]\n            arr[first] = arr[second]\n            arr[second] = temp\n            first += 1\n            second -= 1\n\n    return arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def select(arr, k):\n        # Select the first k numbers from arr.\n        return arr[:k]\n\n    def sort(arr, k):\n        # Sort arr to get the maximum k numbers.\n        return sorted(arr)\n\n    return select(sort(arr, k), k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    return sorted(arr)[0:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    arr.sort()\n    arr = arr[-k:]\n    return arr", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = list(map(int, input().split()))\n    k = int(input())\n    if k > len(arr):\n        print(\"-1\")\n        return\n    return sorted(arr[0:k], reverse=True)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def _maximum_helper(arr, k):\n        if k == 0:\n            return []\n        if k == 1:\n            return [arr[0]]\n        if k == 2:\n            return [max(arr[0], arr[1]), arr[1]]\n        if k == 3:\n            return [max(max(arr[0], arr[1]), arr[2]), arr[1], arr[2]]\n        if k == 4:\n            return [max(max(max(arr[0], arr[1]), arr[2]), arr[3]), arr[2], arr[3], arr[1]]\n        if k == 5:\n            return [max(max(max(max(arr[0], arr[1]), arr[2]), arr[3]), arr[4]), arr[3], arr[4], arr[2], arr[1]]\n        if k == 6:\n            return [max(max(max(max(max(arr[0], arr[1]), arr[2]), arr[3]), arr[4]), arr[5]), arr[4], arr[5], arr[3], arr[2], arr[1]]\n        if k == 7:\n            return [max(max(max(max(max(max(arr[0], arr[1]), arr[2]), arr[3]), arr[4]), arr[5]), arr[6]), arr[5], arr[6], arr[4], arr[3]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def _helper(arr, k):\n        if len(arr) == 0:\n            return []\n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] > arr[left]:\n                right = mid - 1\n            elif arr[mid] < arr[right]:\n                left = mid + 1\n            else:\n                left = right = mid\n        return arr[left:right + 1]\n    return _helper(arr, k)</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Edge cases\n    if k > len(arr):\n        return []\n\n    # Find the k largest numbers in arr\n    k_largest = arr[:k]\n    # Get the k largest numbers in arr\n    k_largest = sorted(k_largest, reverse=True)\n    # Get the k smallest numbers in arr\n    k_smallest = arr[-k:]\n    # Get the k smallest numbers in arr\n    k_smallest = sorted(k_smallest)\n\n    # Find the maximum between k_largest and k_smallest\n    return max(k_largest, k_smallest)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    # time complexity: O(n log n)\n    # space complexity: O(1)\n    if not k:\n        return []\n\n    arr.sort()\n    max_list = []\n    if k <= 0:\n        return []\n    for i in range(0, k):\n        if arr[i] == arr[k - i - 1]:\n            max_list.append(arr[i])\n            k -= 1\n            continue\n        if arr[i] > arr[k - i - 1]:\n            max_list.append(arr[i])\n            k -= 1\n        else:\n            max_list.append(arr[k - i - 1])\n            k -= 1\n\n    return max_list", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    n = len(arr)\n    l = []\n    for i in range(n):\n        if i + 1 == k:\n            l.append(arr[i])\n            break\n        if arr[i] > arr[i + 1]:\n            l.append(arr[i])\n    return l", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    # Approach 1: Using max heap\n    # Approach 2: Using a sorted array\n    # Approach 3: Using a hash table\n    # Approach 4: Using a hash table\n    # Approach 5: Using a hash table\n    # Approach 6: Using a hash table\n    # Approach 7: Using a hash table\n    # Approach 8: Using a hash table\n    # Approach 9: Using a hash table\n    # Approach 10: Using a hash table\n    # Approach 11: Using a hash table\n    # Approach 12: Using a hash table\n    # Approach 13: Using a hash table\n    # Approach 14: Using a hash table\n    # Approach 15: Using a hash table\n    # Approach 16: Using a hash table\n    # Approach 17: Using a hash table\n    # Approach 18: Using a hash table\n    # Approach 19: Using a hash table\n    # Approach 20: Using a hash table\n    # Approach 21: Using a hash table\n    # Approach 22: Using a hash table\n    # Approach 23: Using a hash table\n    # Approach 24: Using a hash table\n    # Approach 25: Using a hash table\n    # Approach 26: Using a hash table\n    # Approach 27: Using a hash table\n    # Approach 28: Using a hash table\n    # Approach 29: Using a hash table\n    # Approach 30: Using a hash table\n    # Approach 31", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    if len(arr) < k:\n        return []\n    return arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max(a, b):\n        if a > b:\n            return a\n        else:\n            return b\n\n    arr = sorted(arr)\n    if k < 1:\n        return []\n    if k > len(arr):\n        return arr\n    return arr[-k:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n\n    res = []\n    for i in range(len(arr)):\n        if i + 1 < k and arr[i] > arr[i + 1]:\n            continue\n        res.append(arr[i])\n        if len(res) == k:\n            break\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    l = list(arr)\n    l.sort()\n    l = l[:k]\n    l.reverse()\n    return l", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    max = []\n    for i in range(k):\n        max.append(arr[i])\n    return max", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max_k(arr, k):\n        if k == 0:\n            return []\n        else:\n            return max(arr[:k], key=arr.__getitem__)\n    return max_k(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    # Note: For performance reasons, you should try to do as much work with\n    #  fewer calls to functions.\n\n    # sort the array\n    sortedArr = sorted(arr)\n\n    # get the first k elements from the array\n    return sortedArr[0:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if not isinstance(arr, list) or len(arr) <= 0 or not isinstance(k, int) or k <= 0:\n        return None\n    sorted_arr = sorted(arr, reverse=True)\n    sorted_arr = sorted_arr[:k]\n    return sorted_arr", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def maximum_helper(arr, k):\n        if len(arr) == 0:\n            return []\n        if len(arr) == 1:\n            return [arr[0]]\n        if k == 1:\n            return [arr[0]]\n        if k > len(arr):\n            return []\n        if k == len(arr):\n            return arr\n        mid = len(arr)//2\n        left = maximum_helper(arr[:mid], k)\n        right = maximum_helper(arr[mid:], k)\n        return sorted(left + right)\n\n    return maximum_helper(arr, k)</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    def max(arr, k):\n        arr = list(arr)\n        arr.sort()\n        l = len(arr)\n        return arr[:k]\n\n    return max(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def find_max(arr, k):\n        \"\"\"\n        Finds the maximum k elements in an array and returns them as a list.\n        \"\"\"\n        if len(arr) < k:\n            return arr\n        else:\n            max_k = arr[:k]\n            for i in arr[k]:\n                if i > max_k[-1]:\n                    max_k.append(i)\n            return max_k\n\n    return find_max(arr, k)</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = list(map(int, input().split()))\n    k = int(input())\n\n    if k > len(arr):\n        return []\n\n    # create a copy of arr\n    arr_copy = arr[:]\n\n    # find the first k elements with the maximum value\n    for i in range(k):\n        max_index = 0\n        for j in range(1, len(arr_copy)):\n            if arr_copy[j] > arr_copy[max_index]:\n                max_index = j\n        arr_copy[i] = arr_copy[max_index]\n\n    # sort the k elements with the maximum value\n    arr_copy.sort()\n\n    # remove the first k elements from arr\n    for i in range(k):\n        del arr[i]\n\n    return arr_copy", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    def max_k(arr, k):\n        if len(arr) == 0:\n            return []\n        if len(arr) < k:\n            return []\n        arr.sort()\n        return arr[0:k-1]\n    return max_k(arr, k)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = [int(i) for i in arr.split()]\n    if len(arr) < k:\n        return []\n    res = []\n    for i in range(k):\n        temp = []\n        for j in range(len(arr)):\n            if arr[j] < 0:\n                temp.append(arr[j])\n            elif arr[j] > 0:\n                temp.append(arr[j])\n                break\n        if len(temp) == k:\n            res.append(temp)\n    return sorted(res)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    if k > len(arr):\n        return []\n    else:\n        max_k = []\n        for i in range(len(arr)):\n            max_k.append(arr[i])\n        return max_k", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max_k(arr, k):\n        m = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] > m:\n                m = arr[i]\n        return [m] * k\n\n    return max_k(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    if len(arr) < k:\n        return []\n    if k == 1:\n        return [arr[0]]\n    max_len = len(arr) - k + 1\n    return [arr[i - max_len + 1:i + 1] for i in range(0, len(arr), max_len)]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    result = []\n    for i in range(len(arr)):\n        if i < k:\n            result.append(arr[i])\n        else:\n            result.append(max(arr[i - k + 1: i + 1]))\n    return sorted(result)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k <= 0:\n        return []\n    if k >= len(arr):\n        return arr\n    s = sorted(arr)\n    result = []\n    for i in range(k):\n        result.append(s[i])\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    if k == 0:\n        return []\n    if k > len(arr):\n        return arr\n    return arr[:k] + arr[-k:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    elif k == 1:\n        return [arr[0]]\n    else:\n        # maxHeapify\n        heap = []\n        for i in range(len(arr)):\n            heap.append(arr[i])\n        heapify(heap)\n        # find kth largest element\n        largest = heap[0]\n        for i in range(1, k):\n            largest = max(largest, heap[i])\n        return [largest] + maximum(heap, k - 1)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    if k >= len(arr):\n        return arr\n    else:\n        return max(arr[0:k], key=arr.__getitem__)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def find_max(arr, k):\n        if len(arr) == 0:\n            return []\n        if k == 0:\n            return arr[0]\n        if k == 1:\n            return arr[0]\n        if k == 2:\n            return arr[0], arr[1]\n        if k == len(arr):\n            return arr\n\n        mid = len(arr) // 2\n        left = find_max(arr[:mid], k-1)\n        right = find_max(arr[mid:], k-1)\n\n        # take the max of left and right\n        return sorted(max(left, right), reverse=True)[:k]\n\n    return find_max(arr, k)</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) <= k:\n        return arr\n    else:\n        return sorted([max(a, b) for a, b in zip(arr[:k], arr[k+1:])])", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = list(map(int, input().split()))\n    result = []\n    for i in range(k):\n        result.append(max(arr[i:i + 1]))\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if k > len(arr):\n        return arr\n    else:\n        ret = []\n        for i in range(k):\n            ret.append(arr[i])\n        return sorted(ret)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < k:\n        return []\n\n    # \u8bb0\u5f55\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u7684\u4f4d\u7f6e\n    max_idx = 0\n    # \u8bb0\u5f55\u6570\u7ec4\u4e2d\u6700\u5927\u503c\n    max_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n            max_idx = i\n    # \u83b7\u53d6\u6700\u5927\u7684k\u4e2a\u5143\u7d20\n    return arr[max_idx-k+1:max_idx+k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def maxk(arr, k):\n        if k == 0:\n            return arr\n        else:\n            return max(maxk(arr[1:], k-1), arr[0])\n\n    return maxk(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max_heapify(arr, start, end):\n        \"\"\"\n        This function will make the array as a max heap.\n        \"\"\"\n        root = start\n        while root * 2 + 1 <= end:\n            child = root * 2 + 1\n            if child < end and arr[child] < arr[root]:\n                child += 1\n            if arr[root] < arr[child]:\n                arr[child], arr[root] = arr[root], arr[child]\n                root = child\n            else:\n                break\n\n    def merge_max_heap(arr, start, end):\n        \"\"\"\n        This function will merge the max heap into a sorted list.\n        \"\"\"\n        end = end - 1\n        while start < end:\n            temp = arr[end]\n            arr[end] = arr[start]\n            arr[start] = temp\n            start += 1\n            end -= 1\n\n    def heap_sort(arr, start, end):\n        \"\"\"\n        This function will sort the array using max heap.\n        \"\"\"\n        if start < end:\n            max_heapify(arr, start, end)\n            arr = merge_max_heap(arr, start, end)\n            return heap_sort(arr, start, end - 1)\n        return arr\n\n    arr = list", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # base case\n    if len(arr) == 0:\n        return []\n\n    # special case\n    if k == 0:\n        return [arr[0]]\n\n    # auxiliary array\n    arr_aux = [arr[0]]\n\n    # add the other elements to the auxiliary array\n    for x in arr[1:]:\n        if x > arr_aux[-1] or x == arr_aux[-1]:\n            arr_aux.append(x)\n        else:\n            arr_aux[-1] = x\n\n    # sort the auxiliary array\n    arr_aux.sort()\n\n    # return the maximum k elements\n    return arr_aux[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    arr = list(map(int, input().split()))\n    print(sorted(arr)[:k])", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max_smallest(arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        if k == 0:\n            return []\n\n        return [arr[0]] + max_smallest(arr[1:], k - 1)\n\n    return max_smallest(arr, k) + max_smallest(arr[:k], k - len(arr) + 1)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    if len(arr) < k:\n        return []\n\n    # create a new array of size k\n    res = []\n    # the index of the last k element in arr\n    last_k_index = len(arr) - k\n    # the index of the last element in arr\n    last_index = len(arr) - 1\n    # the index of the first element in arr\n    first_index = 0\n    # the index of the first element in arr\n    first_k_index = 1\n    # the last element in arr\n    last = arr[last_index]\n\n    # while the first k elements are not enough\n    while len(res) < k:\n        # if the current element is greater than the last element\n        if arr[first_k_index] > last:\n            # swap the first k elements\n            temp = arr[first_k_index]\n            arr[first_k_index] = last\n            last = temp\n            # move the first k index\n            first_k_index += 1\n            # move the last index\n            last_index -= 1\n        # if the current element is equal to the last element\n        else:\n            # move the first k index\n            first_k_index += 1\n            # move the last index\n            last_index -= 1\n    # append the last k elements\n    res.", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = list(map(int, input().split()))\n    if len(arr) < k:\n        return list(arr)\n    result = []\n    left = arr[:k]\n    right = arr[k:len(arr)]\n    for i in range(len(left)):\n        if left[i] > right[i]:\n            result.append(left[i])\n            left.pop(i)\n    for i in range(len(right)):\n        if right[i] > left[i]:\n            result.append(right[i])\n            right.pop(i)\n    return result\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) <= k:\n        return arr\n    nums = sorted(arr)\n    result = []\n    for i in range(k):\n        result.append(nums[i])\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) <= k:\n        return arr\n    # use heapq to get the k biggest number\n    # use heapq to get the k smallest number\n    # heapq.nlargest() or heapq.nsmallest()\n    heap = []\n    for _ in range(k):\n        heapq.heappush(heap, arr.pop())\n    return heapq.nsmallest(k, heap)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    else:\n        return [arr[i] for i in range(len(arr)) if arr[i] == max(arr[:i] + arr[i + 1:])]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def find_max(arr, i, k):\n        if i >= len(arr):\n            return arr[:k]\n        max_value = arr[i]\n        j = i + 1\n        while j < len(arr) and arr[j] > max_value:\n            max_value = arr[j]\n            j += 1\n        return find_max(arr, j, k)\n    return find_max(arr, 0, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if len(arr) == 0:\n        return []\n    if k > len(arr):\n        return arr\n    if k == 0:\n        return [0]\n    # \u4e0b\u9762\u662f\u4e24\u4e2a\u51fd\u6570\u7684\u8c03\u7528\uff0c\u7b2c\u4e00\u4e2a\u8fd4\u56de\u4e00\u4e2a\u533a\u95f4\uff0c\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c\n    left, right = _partition(arr, k)\n    # \u4e0b\u9762\u662f\u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5de6\u8fb9\u5143\u7d20\u5927\u4e8e\u7b49\u4e8e\u53f3\u8fb9\u5143\u7d20\uff0c\u5219\u8fd4\u56de\u53f3\u8fb9\u5143\u7d20\uff0c\u5426\u5219\u8fd4\u56de\u5de6\u8fb9\u5143\u7d20\n    return max(right) if left[0] >= right[0] else left[0]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < k:\n        return []\n    heap = []\n    for i in range(k):\n        heap.append(max(arr))\n    heap.sort()\n    return [heap[0]] + heap[1:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    if k > len(arr):\n        return arr\n    if k == 1:\n        return arr[0]\n    l = len(arr)\n    sub_arr = arr[:l - k]\n    for i in range(l - k, l):\n        if sub_arr[-1] >= arr[i]:\n            sub_arr.append(arr[i])\n        else:\n            break\n    return sub_arr", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Initialize the result\n    result = []\n    # Get the maximum number of k numbers in arr\n    max_num = max(arr)\n    # Get the index of the maximum number\n    max_index = arr.index(max_num)\n    # Use max_num and max_index to get the maximum k numbers in arr\n    for i in range(max_index, max_index + k):\n        result.append(arr[i])\n    # Return the result\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    n = len(arr)\n    if n == 0:\n        return []\n    if k > n:\n        return arr\n    res = [arr[0]]\n    for i in range(1, n):\n        if arr[i] > res[-1]:\n            res.append(arr[i])\n    res.sort()\n    res = res[:k]\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    def max(arr, k):\n        if len(arr) < k:\n            return arr\n        mid = len(arr) / 2\n        max1 = max(arr[:mid], k - mid)\n        max2 = max(arr[mid:], k - mid)\n        return max1 + max2\n\n    return max(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    res = []\n    for i in range(k):\n        if len(res) == 0:\n            res.append(arr[0])\n        else:\n            res.append(max(arr[0], res[-1]))\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if len(arr) < k:\n        return arr\n    else:\n        return arr[-k:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return arr\n    left = 0\n    right = len(arr) - 1\n    res = []\n    while left < right:\n        while left < right and arr[left] <= arr[right]:\n            left += 1\n        while left < right and arr[right] <= arr[left]:\n            right -= 1\n        res.append(arr[right])\n        if len(res) == k:\n            return res\n        elif len(res) > k:\n            res.pop(0)\n        elif len(res) < k:\n            res.append(arr[left])\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    arr.sort()\n    return arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    res = []\n    if k == 1:\n        return [max(arr)]\n    for i in range(len(arr)):\n        if i > k-1:\n            break\n        if arr[i] > arr[i-1]:\n            res.append(arr[i])\n        else:\n            res.append(arr[i-1])\n    return res\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def find_maximum(arr, k):\n        \"\"\"\n        A helper function to find the maximum k numbers in arr.\n        \"\"\"\n        # Base Case\n        if len(arr) == 0:\n            return []\n\n        # Build a list of all the numbers in arr\n        numbers = list(arr)\n\n        # Sort the numbers in descending order\n        numbers.sort(reverse=True)\n\n        # Build a list of length k with the maximum k numbers in arr\n        max_k_numbers = []\n        for i in range(0, k):\n            max_k_numbers.append(numbers[i])\n\n        return max_k_numbers\n\n    return find_maximum(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    return sorted(arr[:k], key=lambda x: x if x > 0 else -1000, reverse=True)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    if k == 0:\n        return []\n    if k > len(arr):\n        return arr[:k]\n    return arr[-k:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    # Start with a sorted list of all the numbers\n    sorted_list = sorted(arr)\n    # Find the max k numbers in the array\n    max_k_numbers = sorted_list[-k:]\n    # Sort the max k numbers\n    max_k_numbers.sort()\n    # return the sorted list\n    return max_k_numbers", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def merge(arr, k):\n        \"\"\"\n        Merge k maximum numbers in arr.\n        \"\"\"\n        if len(arr) == 0:\n            return []\n\n        if len(arr) <= k:\n            return arr[:k]\n\n        arr = sorted(arr)\n        left = merge(arr[:k-1], k-1)\n        right = merge(arr[k-1:], k-1)\n\n        return left + [arr[k-1]] + right\n\n    return merge(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if len(arr) == 0:\n        return []\n    if len(arr) < k:\n        return arr[:k]\n    else:\n        return max(arr, key=lambda x: arr.index(x))[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if not k <= len(arr):\n        raise ValueError('k must be less than or equal to the length of the array')\n    if k == 0:\n        return []\n    if len(arr) == 0:\n        return [arr[0]]\n    mid = len(arr) // 2\n    left = maximum(arr[:mid], k // 2)\n    right = maximum(arr[mid:], k - k // 2)\n    return left + right", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = list(map(int, input().split()))\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1 and k == 0:\n        return [arr[0]]\n    if len(arr) == 1 and k > 0:\n        return [arr[0]]\n    if k > len(arr):\n        return []\n    if k == 0:\n        return arr\n    # k is even\n    if k % 2 == 0:\n        return [arr[0]] + maximum(arr[1:], k // 2)\n    # k is odd\n    return [arr[0]] + maximum(arr[1:], k - 1)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k > len(arr):\n        return arr\n    nums = arr[:]\n    nums.sort()\n    if k == 1:\n        return nums[0]\n    else:\n        return nums[k - 1:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # write your code here\n    def max(a, b):\n        if a > b:\n            return a\n        else:\n            return b\n\n    def select(arr, k):\n        if k == 0:\n            return []\n        elif k == 1:\n            return [max(arr, key=abs)]\n        else:\n            result = []\n            for i in arr:\n                if len(result) < k:\n                    result.append(i)\n                else:\n                    for j in range(len(result)):\n                        if result[j] < i:\n                            result.insert(j, i)\n                            break\n            return result\n\n    return select(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    if k > len(arr):\n        return []\n\n    if k == 1:\n        return arr\n\n    result = []\n    temp = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > temp:\n            temp = arr[i]\n            result = [temp]\n        elif arr[i] == temp:\n            result.append(temp)\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k > len(arr):\n        return []\n\n    if arr[0] > arr[1]:\n        return [arr[0]]\n    if arr[0] == arr[1]:\n        return [arr[0]]\n    if arr[0] > arr[1]:\n        return [arr[0]] + maximum(arr[1:], k-1)\n    return [arr[0]] + maximum(arr[1:], k-1) + [arr[1]]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Python's built-in max() function returns the last element in the list.\n    # So, we will use max() to find the maximum k elements in arr.\n    # Then, we will use sorted() to sort the k elements in ascending order.\n    # Finally, we will return a list of k elements in ascending order.\n    return sorted([max(arr[:k])] + arr[-k:])", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # The naive solution is to use a priority queue, which is O(n log k).\n    # The following is a O(n) solution.\n    # We first find the max, and then take the first k elements\n    # We also use a hash table to speed up the search.\n    # The hash table is a O(n) operation, so the overall complexity is O(n).\n    max_num = arr[0]\n    hash_table = dict()\n    for i in arr:\n        hash_table[i] = i\n        if i > max_num:\n            max_num = i\n    result = []\n    for i in range(k):\n        result.append(hash_table[max_num])\n        max_num = max(hash_table, key=hash_table.get)\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # score:81.21(30ms)\n    # time:O(nlogn), n is the length of the array\n    # space:O(nlogn), n is the length of the array\n    # def maximum(arr, k):\n    #     \"\"\"\n    #     Given an array arr of integers and a positive integer k, return a sorted list \n    #     of length k with the maximum k numbers in arr.\n    #\n    #     Example 1:\n    #\n    #         Input: arr = [-3, -4, 5], k = 3\n    #         Output: [-4, -3, 5]\n    #\n    #     Example 2:\n    #\n    #         Input: arr = [4, -4, 4], k = 2\n    #         Output: [4, 4]\n    #\n    #     Example 3:\n    #\n    #         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    #         Output: [2]\n    #\n    #     Note:\n    #\n    #         1. The length of the array will be in the range of [1, 1000].\n    #         2. The elements in the array will be in the range of [-1000, 1000].\n    #         3. 0 <= k", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # write your code here\n    nums = sorted(arr)\n    result = []\n    for i in range(k):\n        result.append(nums[i])\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    k = int(k)\n    l = []\n    i = 0\n    while i < k:\n        l.append(max(arr[i:i+k]))\n        i += k\n    return l", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = list(map(int, input().split()))\n    k = int(input())\n    l = len(arr)\n    if k > l:\n        return []\n    if k < 0:\n        return []\n    if k == 0:\n        return []\n    if k == l:\n        return arr\n    result = []\n    i = 0\n    while i < k:\n        result.append(arr[i])\n        i += 1\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    return sorted(arr[:k], reverse=True) + sorted(arr[k:], reverse=False)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    # print(arr)\n    # print(k)\n    # print(max(arr))\n    # print(sorted(arr))\n    # print(k)\n    # print(arr[:k])\n    # print(arr[-k:])\n    # print(arr[-k+1:])\n    # print(arr[-k-1:])\n    # print(arr[-k:])\n    # print(arr[-k+1:])\n    # print(arr[-k-1:])\n    # print(arr[-k-2:])\n    # print(arr[-k:])\n    # print(arr[-k+1:])\n    # print(arr[-k-1:])\n    # print(arr[-k-2:])\n    # print(arr[-k:])\n    # print(arr[-k+1:])\n    # print(arr[-k-1:])\n    # print(arr[-k-2:])\n    # print(arr[-k:])\n    # print(arr[-k+1:])\n    # print(arr[-k-1:])\n    # print(arr[-k-2:])\n    # print(arr[-k:])\n    # print(arr[-k+1:])\n    # print(arr[-k-1:])\n    # print(arr[-k-2:])\n    # print(arr[-k", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    n = len(arr)\n    # 1. sort the array\n    arr.sort()\n    # 2. return the last k elements\n    return arr[n-k-1:n]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def max(arr, k, pos):\n        if pos == k:\n            return arr[pos - 1]\n        if pos == 0:\n            return arr[0]\n        max1 = max(arr, k, pos - 1)\n        max2 = max(arr, k, pos - 2)\n        return max(max1, max2) if max1 > max2 else max2\n\n    return max(arr, k, len(arr) - 1)\n\n\narr = [-3, -4, 5]\nk = 3", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # https://leetcode.com/problems/maximum-sum-subarray/\n    # \u52a8\u6001\u89c4\u5212\u7b97\u6cd5\uff0cO(n^2)\n    # \u6bcf\u6b21\u904d\u5386\u4e00\u4e2a\u5143\u7d20\uff0c\u5bfb\u627e\u5f53\u524d\u6700\u5927\u7684\u5b50\u5e8f\u5217\n    # \u627e\u5230\u5f53\u524d\u6700\u5927\u7684\u5b50\u5e8f\u5217\u540e\uff0c\u518d\u904d\u5386\u4e0b\u4e00\u4e2a\u5143\u7d20\n    # \u8bb0\u4f4f\u5b50\u5e8f\u5217\u7684\u6700\u5927\u503c\uff0c\u5f53\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u5c31\u627e\u5230\u4e86\u7b54\u6848\n    # \u7c7b\u4f3c\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u4ece1\u5f00\u59cb\uff0c\u6bcf\u6b21\u52a01\uff0c\u76f4\u5230n\n    # \u6bcf\u6b21\u52a01\uff0c\u76f8\u5f53\u4e8e\u904d\u5386\u4e00\u4e2a\u5143\u7d20\uff0c\u5bfb\u627e\u5f53\u524d\u6700\u5927\u7684\u5b50\u5e8f\u5217\n    # \u6bcf\u6b21\u52a01\uff0c\u76f8\u5f53\u4e8e\u627e\u5230\u5f53\u524d\u6700\u5927\u7684\u5b50\u5e8f\u5217\uff0c\u518d\u904d\u5386\u4e0b\u4e00\u4e2a\u5143\u7d20\n    # \u8bb0\u4f4f\u5b50\u5e8f\u5217\u7684\u6700\u5927\u503c\uff0c\u5f53\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u5c31\u627e\u5230\u4e86\u7b54\u6848\n    # \u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u4ece1\u5f00\u59cb\uff0c\u6bcf\u6b21\u52a01\uff0c\u76f4\u5230n\n    # \u6bcf\u6b21\u52a01\uff0c\u76f8\u5f53\u4e8e\u904d\u5386\u4e00\u4e2a\u5143\u7d20\uff0c\u5bfb\u627e\u5f53\u524d\u6700\u5927\u7684\u5b50\u5e8f\u5217\n    # \u6bcf\u6b21\u52a01\uff0c\u76f8\u5f53\u4e8e\u627e\u5230\u5f53\u524d\u6700\u5927\u7684\u5b50\u5e8f\u5217\uff0c\u518d\u904d\u5386\u4e0b\u4e00\u4e2a\u5143\u7d20\n    # \u8bb0\u4f4f\u5b50\u5e8f\u5217\u7684\u6700\u5927\u503c\uff0c\u5f53\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u5c31\u627e\u5230\u4e86\u7b54\u6848\n    # \u7c7b\u4f3c\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u4ece1\u5f00\u59cb\uff0c\u6bcf\u6b21\u52a01\uff0c\u76f4\u5230n\n    # \u6bcf\u6b21", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    max_list = []\n    for i in range(k):\n        max_list.append(max(arr))\n    return sorted(max_list)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    if k > len(arr):\n        return arr\n    return arr[0:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    nums = sorted(arr)\n    k = min(k, len(nums))\n    return nums[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def maxlist(arr, k):\n        m = k\n        l = []\n        for i in arr:\n            if i > m:\n                m = i\n                l = []\n            elif i == m:\n                l.append(i)\n        return l\n\n    return maxlist(arr, k)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = list(map(int, input().split()))\n    k = int(k)\n    res = [None]*k\n    for i in range(len(arr)):\n        if res[i] is None or arr[i] > res[i]:\n            res[i] = arr[i]\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    # input validation\n    arr = list(map(int, input().strip().split()))\n    k = int(input())\n    if len(arr) < k:\n        return []\n    if k > len(arr):\n        return arr[-k:]\n    else:\n        return arr[-k:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n\n    res = []\n    heap = []\n\n    for i in arr:\n        heapq.heappush(heap, i)\n\n    for _ in range(k):\n        res.append(heapq.heappop(heap))\n\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def helper(arr, k):\n        \"\"\"\n        A helper function to find the maximum k elements in the given array.\n        \"\"\"\n        arr.sort()\n        if len(arr) < k:\n            return arr\n        else:\n            return arr[:k] + arr[-k:]\n\n    return helper(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if k >= len(arr):\n        return arr\n    if k == 1:\n        return sorted(arr, reverse=True)[0]\n    return sorted(arr, reverse=True)[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < k:\n        return []\n    m = arr[0]\n    for i in range(1, k):\n        if arr[i] > m:\n            m = arr[i]\n    return [max(m, arr[i]) for i in range(len(arr)) if arr[i] == m]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def _helper(arr, k, res):\n        if len(res) == k:\n            return res\n        if len(res) < k:\n            if arr[k] > res[-1]:\n                res.append(arr[k])\n            return _helper(arr, k, res)\n        if arr[k] > res[-1]:\n            res.append(arr[k])\n        return _helper(arr, k, res[:-1])\n\n    res = []\n    return _helper(arr, k, res)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # \u533a\u95f4[-1000, 1000]\u5185\u7684\u6570\u5b57\uff0c1000\u4e2a\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57\u53d6k\u6b21\uff0c\u6700\u591ak*1000\u6b21\u6bd4\u8f83\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(k)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(k*1000)\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n*k)\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n*logn)\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n*k)\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n*k)\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n*k)\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n*k)\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n*k)\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n*k)\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n*k)\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n*k)\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n*k)\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u65f6\u95f4", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    maxnums = []\n    for i in range(k):\n        maxnums.append(max(arr))\n    return sorted(maxnums)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    # Return the first k elements of the array\n    return arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # \u89e3\u51b3\u8fb9\u754c\u60c5\u51b5\n    if k >= len(arr):\n        return arr[:k]\n    else:\n        return arr[:k] + sorted(arr[-k:])", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return [arr[i] for i in range(k) if arr[i] == max(arr[i:i + k])]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if k > len(arr):\n        return arr\n    max_ele = max(arr)\n    result = []\n    for i in range(k):\n        if max_ele == arr[i]:\n            result.append(max_ele)\n        else:\n            result.append(arr[i])\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k <= 0:\n        return []\n    if k > len(arr):\n        return arr\n    max_list = []\n    cur_max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > cur_max:\n            cur_max = arr[i]\n            max_list = [arr[i]]\n        elif arr[i] == cur_max:\n            max_list.append(arr[i])\n    return max_list", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # \u601d\u8def\uff1a\n    # \u91c7\u7528\u4e24\u5c42\u5faa\u73af\uff0c\u5916\u5c42\u5faa\u73af\u904d\u5386\u6570\u7ec4\uff0c\u5185\u5c42\u5faa\u73af\u904d\u5386\u5f53\u524d\u6570\u7ec4\uff0c\u6bcf\u6b21\u5faa\u73af\u904d\u5386\u5230k\u4e2a\u5143\u7d20\uff0c\u5c06\u6700\u5927\u503c\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\uff0c\u76f4\u5230\u5f53\u524d\u6570\u7ec4\u904d\u5386\u5b8c\uff0c\u8fd4\u56de\u7ed3\u679c\n    max = -999\n    result = []\n    for i in range(len(arr)):\n        cur_max = -999\n        for j in range(k):\n            if arr[j] > cur_max:\n                cur_max = arr[j]\n        if cur_max > max:\n            max = cur_max\n            result = [max]\n        else:\n            result.append(cur_max)\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def max_k(arr, k):\n        if k == 0:\n            return []\n        if len(arr) < k:\n            return []\n        if k == 1:\n            return arr[0]\n        left = max_k(arr[:k], k - 1)\n        right = max_k(arr[k:], k - 1)\n        return max(left, right)\n\n    return max_k(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # the solution is to use a min heap and iterate over the array, popping the\n    # max values\n    # we use a min heap since we want the max values to be at the top\n    # the heap is a binary tree with the left child being the smaller of the 2\n    # nodes and the right child being the larger of the 2 nodes\n    # we use a heapq.heappush() and heapq.heappop() to implement the heap\n    # the heapq.heappush() adds the max value to the top of the heap\n    # the heapq.heappop() pops the top of the heap and returns it\n    # heapq.heappush() returns None\n    heap = []\n    for i in arr:\n        heapq.heappush(heap, i)\n\n    # iterate over the array popping the max value\n    # and popping the top of the heap\n    # if the popped value is greater than the top of the heap, then we need to\n    # update the heap\n    # since we are popping the top of the heap, we need to add the popped value\n    # back to the top of the heap\n    # we use a while loop since we want to iterate", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    elif k == len(arr):\n        return [arr[-1]]\n    else:\n        result = []\n        for i in range(k-1):\n            result.append(arr[-i-1])\n        result.append(arr[-1])\n        return sorted(result)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < k:\n        return arr\n    else:\n        sorted_arr = []\n        for i in range(len(arr)):\n            if i == 0:\n                sorted_arr.append(arr[i])\n            else:\n                if arr[i] > sorted_arr[-1]:\n                    sorted_arr.append(arr[i])\n        return sorted_arr\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def maxsubarray(arr, k):\n        if k == 0:\n            return []\n        subarr = arr[:k]\n        if len(subarr) == 0:\n            return []\n        for i in range(len(subarr)):\n            if subarr[i] > subarr[i - 1]:\n                subarr.insert(i, subarr[i - 1])\n        return subarr\n\n    arr = list(map(int, input().split()))\n    k = int(input())\n    result = maxsubarray(arr, k)\n    result.sort()\n    print(result)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    if k >= len(arr):\n        return sorted(arr)\n    else:\n        result = []\n        for i in range(k):\n            result.append(max(arr[:i]))\n\n        return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # score:99.43(17ms)\n    # time:O(nlogn)\n    # space:O(n)\n    # score:99.43(17ms)\n    # time:O(nlogn)\n    # space:O(n)\n    def _max(a, b):\n        if a > b:\n            return a\n        else:\n            return b\n\n    n = len(arr)\n    if k > n:\n        return arr\n    elif k == n:\n        return arr\n    else:\n        arr1 = arr[:k]\n        arr2 = arr[n-k:]\n        arr3 = []\n        for i in range(k):\n            arr3.append(_max(arr1[i], arr2[i]))\n        return arr3\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    if k == 0:\n        return []\n\n    k = min(k, len(arr))\n    arr.sort()\n\n    index = 0\n    result = []\n    while index < k:\n        result.append(arr[index])\n        index += 1\n\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    res = []\n    if len(arr) == 0:\n        return res\n    if k > len(arr):\n        return arr\n    for i in range(len(arr)):\n        if i >= k:\n            break\n        res.append(arr[i])\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k >= len(arr):\n        return arr\n\n    return max([arr[i] for i in range(k)])", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    return [arr[i] for i in range(k)]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k >= len(arr):\n        return arr\n    # start from the beginning of the array\n    # and find the maximum k elements\n    # and sort them\n    sorted_arr = sorted(arr[:k], reverse=True)\n    return sorted_arr", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k > len(arr):\n        return arr\n    heap = []\n    for i in arr:\n        heapq.heappush(heap, i)\n    heapq.heappush(heap, -999)\n    heapq.heappush(heap, 0)\n    res = []\n    while len(heap) > 0:\n        res.append(heapq.heappop(heap))\n    return res[-k:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    if k > len(arr):\n        return []\n    if k == 0:\n        return []\n    if k == 1:\n        return arr[0]\n    left = []\n    right = []\n    for i in range(len(arr)):\n        if i >= k:\n            right.append(arr[i])\n        elif i < k:\n            left.append(arr[i])\n    return left + right", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    arr = sorted(arr)\n    if k > len(arr):\n        return arr\n    else:\n        return arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    arr = sorted(arr)\n    result = []\n    for i in range(k):\n        result.append(arr[i])\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if len(arr) == 0:\n        return []\n    else:\n        k = k - 1\n        l = []\n        for i in range(k):\n            l.append(max(arr))\n        return l", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    num = 0\n    max_num = 0\n    for i in range(len(arr)):\n        if num < k:\n            if arr[i] > max_num:\n                max_num = arr[i]\n            num += 1\n        else:\n            print(max_num)\n            num = 0\n            max_num = 0\n    if num < k:\n        print(max_num)\n    return max_num", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max_list(arr, k):\n        res = []\n        for i in range(k):\n            res.append(arr[i])\n        return res\n\n    def max_list2(arr, k):\n        res = []\n        for i in range(k):\n            if arr[i] > arr[i + 1]:\n                res.append(arr[i])\n            else:\n                res.append(arr[i + 1])\n        return res\n\n    def max_list3(arr, k):\n        res = []\n        for i in range(k):\n            if i < len(arr) - 1:\n                if arr[i] > arr[i + 1]:\n                    res.append(arr[i])\n                else:\n                    res.append(arr[i + 1])\n            else:\n                res.append(arr[i + 1])\n        return res\n\n    return max_list(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    result = []\n    count = 0\n    for i in range(len(arr)):\n        if count == k:\n            break\n        elif arr[i] > arr[i - 1]:\n            result.append(arr[i])\n            count += 1\n    return sorted(result)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    n = len(arr)\n    if n < k:\n        return []\n\n    # the result is a list of length k\n    result = [None] * k\n\n    # create a min heap of size n - k\n    heap = [None] * (n - k)\n    for i in range(n - k):\n        heap[i] = arr[i]\n        heapify(heap, i)\n\n    # while the heap is not empty\n    while heap:\n        # get the root\n        root = heap[0]\n        # pop the root\n        heap[0] = heap.pop()\n        # insert it to the result list\n        result[len(heap)] = root\n        # get the child\n        child = 2 * root + 1\n        if child < n - k:\n            # compare the child with its parent\n            if child + 1 < n - k and heap[child + 1] > heap[child]:\n                child += 1\n        # if the child is greater than its parent, swap them\n        if heap[child] > heap[root]:\n            heap[root], heap[child] = heap[child], heap[root]\n            heapify(heap, root)\n\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if k > len(arr):\n        return arr[:k]\n    else:\n        return max(arr, key = arr.index)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0]]\n    else:\n        arr.sort()\n        result = []\n        for i in range(k):\n            result.append(arr[0])\n            arr.pop(0)\n        for i in range(len(arr) - 1, 0, -1):\n            if arr[i] > arr[i - 1]:\n                result.append(arr[i])\n                arr.pop(i)\n        return result\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if k > len(arr):\n        return []\n\n    max_list = []\n    for i in range(len(arr)):\n        if arr[i] > max_list[0]:\n            max_list[0] = arr[i]\n        elif arr[i] == max_list[0]:\n            max_list.append(arr[i])\n\n    return max_list[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    max_arr = []\n    for i in range(k):\n        max_arr.append(arr[i])\n    return sorted(max_arr, reverse=True)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k <= 0:\n        return []\n    if k > len(arr):\n        return arr\n    heap = []\n    for i in range(len(arr)):\n        if arr[i] > heap[0]:\n            heap.append(arr[i])\n    heap.sort()\n    return heap[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    max_num = []\n    for i in range(k):\n        max_num.append(arr[i])\n    max_num.sort()\n    return max_num", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def merge(left, right):\n        result = []\n        i = 0\n        while i < len(left) or i < len(right):\n            if i < len(left) and i < len(right):\n                if left[i] >= right[i]:\n                    result.append(left[i])\n                    i += 1\n                else:\n                    result.append(right[i])\n                    i += 1\n            elif i < len(left):\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[i])\n                i += 1\n        return result\n\n    def max_k(arr, k):\n        if len(arr) < k:\n            return arr\n        else:\n            left = []\n            right = []\n            for i in range(len(arr) - k + 1):\n                if i >= k:\n                    right.append(arr[i])\n                else:\n                    left.append(arr[i])\n            left = max_k(left, k)\n            right = max_k(right, k)\n            return merge(left, right)\n\n    return max_k(arr, k)</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max_fun(arr, k, left, right):\n        if right - left < k:\n            return\n        if right == left + k:\n            return arr[left:right]\n        if right - left == 1:\n            return arr[left]\n        mid = (left + right) / 2\n        left_max = max_fun(arr, k, left, mid)\n        right_max = max_fun(arr, k, mid + 1, right)\n        left_max = max(left_max, arr[mid])\n        right_max = max(right_max, arr[mid])\n        return left_max + right_max\n    return max_fun(arr, k, 0, len(arr) - 1)</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def maximum_helper(arr, k, result):\n        if len(result) == k:\n            return result\n        if len(arr) == 0:\n            return result\n        if len(result) == 0:\n            result.append(arr[0])\n            return result\n        max_num = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] > max_num:\n                max_num = arr[i]\n        result.append(max_num)\n        result = maximum_helper(arr[1:], k, result)\n        result.pop(0)\n        return result\n\n    return maximum_helper(arr, k, [])</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # \u66b4\u529b\u9012\u5f52\n    def max_arr(arr, k):\n        if k == 0:\n            return []\n        else:\n            return [arr[i] for i in range(len(arr)) if i not in range(len(arr) - k + 1, len(arr))]\n    return max_arr(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    res = []\n    for i in range(k):\n        max_index = -1\n        for j in range(len(arr)):\n            if arr[j] > arr[max_index]:\n                max_index = j\n        res.append(arr[max_index])\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k >= len(arr):\n        return arr\n    else:\n        return [max(arr[:i]) for i in range(k)]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if k > len(arr):\n        return []\n    l = []\n    for i in range(len(arr)):\n        if arr[i] >= 0 and arr[i] <= k:\n            l.append(arr[i])\n    if len(l) == 0:\n        return []\n    return sorted(l)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max(arr, k, i):\n        if i == len(arr):\n            return arr[:k]\n        elif i == k:\n            return arr\n        else:\n            return max(arr, k, i+1)\n\n    return max(arr, k, 0)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted([max(x, y) for x, y in zip(arr[:k], arr[k:])])", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    max_arr = []\n    for i in range(k):\n        max_arr.append(max(arr))\n    return max_arr", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(max(arr, key=lambda x: x) for _ in range(k))", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # score:100(0ms)\n    # time:O(n^2)\n    # space:O(n)\n    if k > len(arr):\n        return arr[:k]\n    else:\n        arr.sort()\n        return arr[:k + 1]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < k:\n        return arr\n    if k == 0:\n        return []\n    return sorted(max(list(xrange(len(arr))), key=lambda x: arr[x]))[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max_k(arr, k):\n        n = len(arr)\n        if n <= k:\n            return arr\n        l = 0\n        r = n - 1\n        while l < r:\n            m = (l + r) // 2\n            if arr[m] > arr[l]:\n                l = m + 1\n            elif arr[m] < arr[r]:\n                r = m - 1\n            else:\n                l = m + 1\n        return max_k(arr[:l] + arr[l + 1:], k - l + 1) + arr[l]\n\n    return max_k(arr, k)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # DP\n    # return [arr[-1]] if k == 1\n    # return [arr[-1]] if k == len(arr)\n    # return [arr[-1]] if k == 1\n    # return [arr[-1]] if k == len(arr)\n    # return [arr[-1]] if k == 1\n    # return [arr[-1]] if k == len(arr)\n    # return [arr[-1]] if k == 1\n    # return [arr[-1]] if k == len(arr)\n    # return [arr[-1]] if k == 1\n    # return [arr[-1]] if k == len(arr)\n    # return [arr[-1]] if k == 1\n    # return [arr[-1]] if k == len(arr)\n    # return [arr[-1]] if k == 1\n    # return [arr[-1]] if k == len(arr)\n    # return [arr[-1]] if k == 1\n    # return [arr[-1]] if k == len(arr)\n    # return [arr[-1]] if k == 1\n    # return [arr[-1]] if k == len(arr)\n    # return [arr[-1]] if k == 1\n    # return [arr[-1", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            continue\n        if len(result) < k:\n            result.append(arr[i])\n        elif arr[i] > result[k-1]:\n            result[k-1] = arr[i]\n    return sorted(result)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # https://leetcode.com/problems/maximum-sum-subarray/\n    # https://leetcode.com/problems/maximum-subarray/\n    # https://leetcode.com/problems/maximum-sum-subarray/\n    # https://leetcode.com/problems/maximum-subarray/\n    # https://leetcode.com/problems/maximum-sum-subarray/\n    # https://leetcode.com/problems/maximum-subarray/\n    # https://leetcode.com/problems/maximum-sum-subarray/\n    # https://leetcode.com/problems/maximum-sum-subarray/\n    # https://leetcode.com/problems/maximum-sum-subarray/\n    # https://leetcode.com/problems/maximum-sum-subarray/\n    # https://leetcode.com/problems/maximum-sum-subarray/\n    # https://leetcode.com/problems/maximum-sum-subarray/\n    # https://leetcode.com/problems/maximum-sum-subarray/\n    # https://leetcode.com/problems/maximum-sum-subarray/\n    # https://leetcode.com/problems/maximum-sum-subarray/\n    # https://leetcode.com/problems/maximum-sum-subarray/\n    # https://leetcode.", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    elif k == 0:\n        return [0]\n    elif k == 1:\n        return [arr[0]]\n    else:\n        # sort the array and remove the last k-1 elements\n        a = sorted(arr)\n        return a[0:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    max_num = arr[0]\n    max_list = [max_num]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            max_list = [max_num]\n        elif arr[i] == max_num:\n            max_list.append(arr[i])\n    return max_list[-k:]"]]