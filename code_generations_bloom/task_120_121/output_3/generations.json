[["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    result = []\n    arr.sort()\n    for i in range(k):\n        result.append(arr[i])\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = [int(x) for x in input().split()]\n    k = int(input())\n    def max_sel(arr, k):\n        # arr is sorted and thus it's enough to search till we reach the length of k\n        for i in range(len(arr) - k + 1):\n            if arr[i:i+k] == max(arr[i:i+k]):\n                return arr[i:i+k]\n        return []\n\n    return max_sel(arr, k)\n\nmaximum(input().split(), int(input()))\n\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n\n    list1 = sorted(arr)\n    list2 = sorted(arr, reverse=True)\n    result = []\n    for i in range(k):\n        if list1[i] == list2[i]:\n            result.append(list1[i])\n        elif list1[i] > list2[i]:\n            result.append(list1[i])\n        else:\n            result.append(list2[i])\n\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    length = len(arr)\n    if length == 0:\n        return []\n\n    if k == 0:\n        return arr\n\n    if k <= 1:\n        return arr\n\n    if k >= length:\n        return arr\n\n    return arr[-k:] + arr[:-k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    d = []\n    for i in range(k):\n        d.append(arr[i])\n    return d", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # first sort the array, then take the top 'k' numbers, and return them sorted\n    return sorted(arr, key=lambda x: (x >= 0, x))", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Complete this function\n    sorted_arr = sorted(arr)\n    return sorted_arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    k = abs(k)\n    if k == 0:\n        return []\n    return arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n\n    idx = 0\n    ret = []\n    while idx < k and idx < len(arr):\n        idx += 1\n        ret.append(arr[idx])\n    return sorted(ret)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def max_len_k(arr, k):\n        max_len = 0\n        i = 0\n        while i < len(arr):\n            while i + k <= len(arr):\n                max_len = max(max_len, len(list(filter(lambda x: arr[i] <= x, arr[i:i+k]))))\n                i += k\n            i += 1\n        return max_len\n\n    return max_len_k(arr, k)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def maxlist(n, k):\n        \"\"\"\n        :param n: the length of the list.\n        :param k: the length of the new list.\n        :return: list with the maximum k numbers in arr.\n        \"\"\"\n\n        if n < k:\n            return []\n\n        maxlist = []\n        s = sorted(arr)\n        for i in range(0, k):\n            if s[i] == 0 and n > i:\n                maxlist.append(s[i])\n            elif s[i]!= 0:\n                l = maxlist(i, k)\n                if s[i] > 0:\n                    l.append(s[i])\n                maxlist = l\n\n        return maxlist\n\n    maxlist(len(arr), k)\n\n    return maxlist", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    k = min(k, len(arr))\n    sorted_arr = sorted(arr)\n    return sorted_arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time Complexity - O(k)\n    # Space Complexity - O(1)\n    # Iterative Approach\n    max_list = []\n    k = 0\n    for num in arr:\n        if k < k:\n            k = k\n        else:\n            max_list.append(num)\n            k -= 1\n    return max_list", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if k>len(arr):\n        return []\n    else:\n        a=[]\n        for i in range(len(arr)):\n            if i+k<len(arr):\n                if arr[i]>=arr[i+k]:\n                    a.append(arr[i])\n                    a.append(arr[i+k])\n            else:\n                if arr[i]>=arr[i+k]:\n                    a.append(arr[i])\n        return sorted(a)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    n = len(arr)\n    if n < k:\n        return [arr[i]] * k\n    m = 1\n    ans = []\n    while m < k:\n        m = n + 1 - n//10\n        print(m)\n        if m > k:\n            break\n        if n < m:\n            m = n + 1 - m//10\n        for i in range(m):\n            if arr[i] > ans[-1]:\n                ans.append(arr[i])\n        n -= m\n    return ans", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    length = len(arr)\n    # initialize a new array with length k and all elements to be zero\n    result = [0] * k\n    # make a copy of the given array\n    arr_copy = list(arr)\n    # sort the copy of given array\n    arr_copy.sort()\n    # find the maximum k numbers from the sorted copy of the given array\n    for i in range(k):\n        # increment result[i] by one\n        result[i] += 1\n        # find the index of the first element in arr_copy that is bigger than result[i]\n        for j in range(i+1, length):\n            if arr_copy[j] > result[i]:\n                break\n        # decrement result[i] by one and set it to the current element from arr_copy\n        result[i] -= 1\n        result[i] = arr_copy[j-1]\n    # return the sorted list with length k\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < k:\n        return []\n    else:\n        return sorted([arr[i] for i in range(k)])", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    prev = arr[0]\n    result = []\n    for i in range(1, len(arr)):\n        if arr[i] > prev:\n            result.append(arr[i])\n        else:\n            result[-1] = arr[i]\n        prev = max(arr[i], prev)\n    result = result[:k]\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    result = []\n    sorted_arr = sorted(arr)\n    if k <= 0:\n        return result\n    for i in range(0, k):\n        result.append(sorted_arr[i])\n    result.sort()\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr[:k], reverse=True)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Complete this function\n    # I have no idea where to start. This is my first code ever.\n    # I have an idea that I can sort the array first, then get the k largest numbers\n    # But I don't know how to compare them properly.\n    # You can write either a function or a full program.\n    # Do not return an array, return a list of lists.\n\n    pass", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    res = []\n    l = len(arr)\n\n    def helper(k, arr, lo, hi):\n        if lo >= hi:\n            return\n        mid = lo + (hi - lo) / 2\n        if k - 1 <= mid:\n            # After sorting, the k numbers to be chosen will be from the range [lo, mid]\n            res.extend(arr[lo:mid])\n            return helper(k - 1, arr, lo, mid - 1)\n        else:\n            # After sorting, the k numbers to be chosen will be from the range [mid, hi]\n            res.extend(arr[mid:hi])\n            return helper(k - 1, arr, mid + 1, hi)\n\n    if k > l:\n        return arr[:k]\n    else:\n        return helper(k, arr, 0, l - 1)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def _max(l, r):\n        if r - l <= k:\n            return l + r\n        mid = (l + r) // 2\n        if arr[mid] > arr[mid + k]:\n            return _max(l, mid + k - 1)\n        else:\n            return _max(mid + 1, r)\n\n    return sorted(arr)[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    nums = [num for num in arr if num > -k]\n    if not nums:\n        return []\n    if nums:\n        return sorted(nums)\n    return sorted(range(k))", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    sorted_arr = sorted(arr)\n    max_sum = 0\n    for i in range(len(sorted_arr) - k + 1):\n        max_sum = max(max_sum, sum(sorted_arr[i:i + k]))\n    return sorted_arr[-k:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = [abs(i) for i in arr]\n    maxs = arr[:]\n\n    for i in range(len(arr)):\n        maxs.sort()\n        for j in range(k):\n            if arr[j] > maxs[-1]:\n                maxs[-1] = arr[j]\n            else:\n                break\n\n    return maxs[:k]\n\n\narr = [-3, -4, 5]\nk = 3\nres = maximum(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def dfs(arr, k, left, right):\n        if left >= right:\n            return 0\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n            left = mid + 1\n        if arr[mid] > arr[mid - 1]:\n            left = mid + 1\n        if arr[mid] > arr[mid + 1]:\n            left = mid + 1\n        if left > right:\n            return 0\n        return max(dfs(arr, k, left, mid), dfs(arr, k, mid + 1, right)) + 1\n    return dfs(arr, k, 0, len(arr) - 1)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    nums = sorted(arr)\n    if k > len(arr):\n        return nums\n    k = k - 1\n    res = []\n    for i in range(len(nums)):\n        if nums[i] == nums[i - 1]:\n            if nums[i] == 0:\n                return []\n        if nums[i] > nums[i - 1]:\n            res.append(nums[i])\n        if len(res) == k:\n            return res\n        res.pop(0)\n    return res\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def maxK(arr, k):\n        if len(arr) == 0:\n            return []\n        elif len(arr) == 1:\n            return [arr[0]]\n        elif len(arr) == 2:\n            return [arr[0], arr[1]]\n        else:\n            result = []\n            m = arr[0]\n            max = m\n            for i in arr[1:]:\n                if m < i:\n                    m = i\n                    max = i\n                elif m == i:\n                    max = i\n            result.append(max)\n            for i in range(1, k):\n                a = arr[(len(arr) - i) - 1]\n                b = arr[len(arr) - i - 1]\n                if a > b:\n                    result.append(a)\n                else:\n                    result.append(b)\n            return result\n\n    return maxK(arr, k)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # if k is 0, return empty list\n    if k == 0:\n        return []\n\n    # \u8ba1\u7b97\u6240\u6709\u5143\u7d20\u7684\u6700\u5927\u503c\n    max_num = -100\n    max_pos = []\n    for i in range(len(arr)):\n        temp_num = arr[i]\n        if temp_num > max_num:\n            max_num = temp_num\n            max_pos = [i]\n\n    # \u4ece\u6240\u6709\u5143\u7d20\u4e2d\u627e\u51fa\u6700\u5927\u503c\u540e, \u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b, \u627e\u51fa\u7b2c\u4e8c\u4e2a\u6700\u5927\u503c, \u76f4\u5230k\u4e2a\n    result = []\n    num = len(arr)\n    # \u6570\u5b57\u4e2a\u6570\n    n = num - k\n    # \u5269\u4f59\u5143\u7d20\u4e2a\u6570\n    r = num - n\n\n    while n > 0:\n        # \u904d\u5386\u5269\u4f59\u7684\u5143\u7d20, \u627e\u5230\u7b2cn\u4e2a\u5143\u7d20\u6700\u5927\u503c, \u5e76\u5165\u7ed3\u679c\u4e2d\n        for i in range(r):\n            if i < n:\n                # \u904d\u5386\u5269\u4f59\u7684\u5143\u7d20, \u627e\u51fa\u7b2cn\u4e2a\u5143\u7d20\u7684\u6700\u5927\u503c\n                if arr[i] > arr[i + n]:\n                    temp_num = arr[i]\n                    arr[i] = arr[i + n]\n                    arr[i + n] = temp_num\n                # \u627e\u5230\u7b2cn\u4e2a\u5143\u7d20\u7684\u6700\u5927\u503c\u540e, \u5c06\u5269\u4f59\u5143\u7d20\u7ee7\u7eed\u904d\u5386, \u627e\u51fa\u7b2cn+1\u4e2a\u5143\u7d20\u7684\u6700\u5927\u503c\n                else:", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if not arr or not k or len(arr) < k:\n        return []\n\n    res = []\n    i = 0\n    while i < k:\n        res.append(arr[0])\n        del arr[0]\n        i += 1\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    for i in range(len(arr)):\n        maxindex = i\n        for j in range(i+1, len(arr)):\n            if arr[j] > arr[maxindex]:\n                maxindex = j\n        if i < k:\n            arr[i] = arr[maxindex]\n            arr[maxindex] = arr[i]\n        else:\n            break\n\n    sorted_arr = []\n    for i in range(len(arr)):\n        sorted_arr.append(arr[i])\n\n    return sorted_arr[-k:]</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def partition(arr, left, right):\n        i = left\n        for j in range(left + 1, right + 1):\n            if arr[j] > arr[i]:\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n                i += 1\n        arr[i], arr[left] = arr[left], arr[i]\n        return i\n\n    def merge(left, right):\n        result = []\n        i = left\n        j = right\n        while i <= j:\n            if i >= right:\n                result.append(arr[j])\n                j += 1\n            elif j <= left:\n                result.append(arr[i])\n                i += 1\n            elif arr[i] <= arr[j]:\n                result.append(arr[i])\n                i += 1\n            else:\n                result.append(arr[j])\n                j += 1\n        return result\n\n    def select(arr, left, right, k):\n        if left + k >= right:\n            return arr[left:]\n        elif left + k + 1 <= right:\n            return arr[left: right - 1] + [arr[right]]\n        elif left + k + 1 > right:\n            return arr[left: right - 1] + arr[right:]\n        else:\n            return merge(select(arr, left,", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def _maxi(arr, k):\n        if len(arr) == 0:\n            return []\n        else:\n            _arr = [arr[0]]\n            for _num in arr[1:]:\n                if _num > max(_arr):\n                    _arr.append(_num)\n            _arr.sort()\n            return _arr[:k]\n    return _maxi(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def leftHeapify(heap, index):\n        left = index * 2\n        right = left + 1\n        max = left if left < len(heap) and heap[left] > heap[right] else right\n        if index < max:\n            heap[index], heap[max] = heap[max], heap[index]\n            leftHeapify(heap, max)\n\n    def rightHeapify(heap, index):\n        left = (index - 1) * 2\n        right = left + 1\n        max = left if left < len(heap) and heap[left] > heap[right] else right\n        if index < max:\n            heap[index], heap[max] = heap[max], heap[index]\n            rightHeapify(heap, max)\n\n    if len(arr) < k:\n        return arr\n\n    heap = [arr[0]]\n    for i in range(1, k):\n        leftHeapify(heap, i)\n\n    for i in range(0, k):\n        rightHeapify(heap, i)\n\n    return heap", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    answer = []\n    if k == len(arr):\n        for i in arr:\n            answer.append(i)\n    else:\n        answer = list(reversed(sorted(arr)))\n        while len(answer) < k:\n            answer.append(answer[-1])\n    return answer", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    result = []\n    for i in range(0, k):\n        for j in range(0, len(arr)):\n            if arr[j] > result[i]:\n                result[i] = arr[j]\n        result.sort()\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    max_arr = []\n    if len(arr) == 0:\n        return 0\n    max_arr = list(arr)\n    k = sorted(max_arr, reverse = True)\n    for i in range(len(k), k, -1):\n        del max_arr[i - 1]\n    return k", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < k:\n        return arr[:k]\n    if len(arr) == 0:\n        return []\n    if k == 1:\n        return arr[0]\n    d = []\n    maxs = []\n    for x in arr:\n        if x not in maxs:\n            maxs.append(x)\n    for i in range(len(arr)):\n        if i == 0:\n            d.append(maxs[0])\n        else:\n            d.append(max(d[i - 1], maxs[i]))\n    return d", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def maxn(arr, k):\n        if k == 0:\n            return []\n        result = []\n        for i in range(k):\n            result.append(0)\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                result[0] += arr[i]\n                arr[i] = 0\n            elif arr[i] > result[k-1]:\n                result[k] = arr[i]\n                arr[i] = 0\n            else:\n                result[k-1] += arr[i]\n                arr[i] = 0\n        return result\n    return maxn(arr, k)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # corner case k=0\n    if k == 0:\n        return []\n\n    # corner case k>=len(arr)\n    if k >= len(arr):\n        return arr\n\n    # create a copy of the input array\n    array = arr[:]\n\n    # sort the copy of the array\n    array.sort()\n\n    # find the index where the array ends\n    lastIndex = len(array) - 1\n\n    # for each subarray of size k\n    for i in range(len(array) - k + 1):\n        if array[i] == array[i + k - 1]:\n            array = array[:i] + array[i + k:] + array[:lastIndex - k]\n        else:\n            break\n\n    return array\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max_iter(arr, k):\n        if k == 0:\n            return []\n        if k == len(arr):\n            return arr\n        else:\n            while True:\n                arr = [max(x, arr[i]) for x in arr if x!= -1]\n                arr = [x for x in arr if x!= -1]\n                if len(arr) == k:\n                    return arr\n                elif len(arr) < k:\n                    arr.append(-1)\n    return max_iter(arr, k)\n\nmaximum([4, -5, 4, 4], 2)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) == 0 or k == 0:\n        return []\n\n    # Get all the elements in the array\n    arr = sorted(arr)\n    nums = []\n    for i in range(len(arr)):\n        nums.append(arr[i])\n\n    # Get the maximum k number\n    k = min(k, len(nums))\n    max_num = nums[0]\n    for i in range(1, k + 1):\n        if nums[i] > max_num:\n            max_num = nums[i]\n    return [max_num] + maximum(nums, k - 1)</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if not k or not arr:\n        return []\n\n    sorted_arr = sorted(arr)\n    l = len(sorted_arr)\n    if k >= l:\n        return sorted_arr[0:k]\n\n    top_k = sorted(sorted_arr[0:k])\n    for i in range(k, l):\n        if sorted_arr[i] > top_k[k-1]:\n            top_k.append(sorted_arr[i])\n\n    return top_k", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) <= k:\n        return sorted(arr)\n\n    min_value = min(arr)\n    max_value = max(arr)\n\n    max_num = int((k - 1) * (max_value - min_value) / (k - 1) + min_value)\n\n    return [max_num] + sorted(arr[:k]) + sorted(arr[k:])</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    num = [-1] * len(arr)\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < 0:\n            num[mid] = -arr[mid]\n            low = mid + 1\n        elif arr[mid] > 0:\n            num[mid] = arr[mid]\n            high = mid - 1\n        else:\n            num[mid] = arr[mid]\n            low = mid + 1\n\n    sorted_num = sorted(num)\n\n    return sorted_num[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    if arr is None or len(arr) == 0 or k <= 0:\n        return []\n\n    res = arr[0]\n    for i in range(1, len(arr)):\n        if res < arr[i]:\n            res = arr[i]\n    return res if len(res) == k else res + maximum(arr[1:], k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < k:\n        return []\n\n    # sort arr and put the max k values in a new list\n    maxi = arr.copy()\n    maxi.sort(reverse=True)\n    result = []\n    for i in range(k):\n        result.append(maxi[i])\n\n    # sort result and return\n    return result[::-1]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < k:\n        return []\n    m = arr[0]\n    last = m\n    res = []\n    for i in arr[1:]:\n        if i > last:\n            res.append(last)\n            last = i\n        else:\n            res.append(i)\n    return sorted(res)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    result = [max_num]\n    for i in range(1, k):\n        index = i\n        while index < len(arr) and arr[index] <= max_num:\n            index += 1\n        result.append(arr[index])\n    result.sort()\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def recursive_max(arr, k, res):\n        if k == 0:\n            return res\n\n        if len(res) == k:\n            return res\n\n        max_index = arr.index(max(arr))\n        if len(res) < k:\n            res.append(arr[max_index])\n        else:\n            res.insert(k - 1, arr[max_index])\n\n        return recursive_max(arr[max_index + 1:], k - 1, res)\n\n    return recursive_max(arr, k, [])", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k >= len(arr):\n        return []\n    elif k == 0:\n        return [0]\n    else:\n        # Edge case\n        return max(arr[:k], key = lambda x: arr[x])", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return _maximum(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def maxlist(nums, k):\n        res = []\n        stack = []\n        stack.append(nums[-1])\n        if len(stack) > k:\n            res.append(stack.pop())\n        for num in nums:\n            if num > stack[-1]:\n                res.append(num)\n                stack.append(num)\n        if len(stack) > 0:\n            res.append(stack.pop())\n        return res\n    return maxlist(arr, k)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    #def gettopk(arr, k):\n    #    arr.sort()\n    #    return arr[:k]\n    def gettopk(arr, k):\n        temp = []\n        for i in arr:\n            if i > 0 and temp.count(i) < k:\n                temp.append(i)\n        return temp\n    return gettopk(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max_subarray(arr):\n        max_so_far = 0\n        max_subarray = []\n        for element in arr:\n            if element > max_so_far:\n                max_so_far = element\n                max_subarray = []\n            max_subarray.append(element)\n        return max_subarray\n\n    def process_one(arr):\n        max_subarrays = []\n        if len(arr) <= k:\n            return arr\n        if len(arr) - k == 1:\n            max_subarrays = [[arr[-1]]]\n        else:\n            for i in range(len(arr) - k):\n                left = process_one(arr[:i+1])\n                right = process_one(arr[i+1:])\n                max_subarrays += [left, right]\n            for subarr in max_subarrays:\n                subarr.reverse()\n        return max_subarrays\n\n    return process_one(arr)</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    if k > len(arr):\n        return []\n\n    arr.sort()\n    return arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    result = []\n    best, besti = 0, 0\n    for i in range(len(arr)):\n        if i >= k:\n            break\n        result.append(arr[i])\n        if result[i] > best:\n            best, besti = result[i], i\n    for i in range(len(arr), k):\n        result.append(arr[besti])\n        best, besti = besti + 1, 0\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max_k_subarray(arr, k):\n        n = len(arr)\n        result = [-1] * k\n        for i in range(0, n - k + 1):\n            for j in range(i, i + k):\n                current = arr[j]\n                if current > result[j - i]:\n                    result[j - i] = current\n        result.reverse()\n        return result\n    \n    return max_k_subarray(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    m = arr[:k]\n    for i in range(len(arr), k):\n        m.append(arr[i])\n        if m[-1] == arr[i]:\n            m.pop()\n    return m", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    #Avoid this case\n    if k > len(arr):\n        return []\n\n    #Avoid this case\n    if k == 0:\n        return [arr[0]]\n\n    #Avoid this case\n    if k == 1:\n        return [arr[0]]\n\n    if k == len(arr):\n        return [arr[0]]\n\n    #Here is our base case\n    if k == 2:\n        return [arr[0]] + [arr[1]]\n\n    #This case is also easy to solve\n    if k == len(arr) - 1:\n        return [arr[k]] + maximum(arr, k - 1)\n\n    #The next case is where the problem gets difficult\n    left = maximum(arr, k - 2)\n    right = maximum(arr, k - 1)\n\n    #If both of them are of the same length, then we can just add the lists\n    if len(left) == len(right):\n        return left + right\n\n    #If not, then we have to decide which one is the right size and then use the\n    #rest of the left and right subproblems to get the right size\n    if len(left) < len(right):\n        return left + maximum(arr, k - len(left) - 1)\n\n    return right + maximum(", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return _maximum(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # An empty array for storing the maximum k numbers in the given array arr.\n    res = []\n\n    # A loop to find the maximum k numbers in the given array arr and store them in res.\n    for _ in range(k):\n        res.append(max(arr, key=arr.__getitem__))\n\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    # from the algorithm point of view, there is no need to use\n    # extra space. So the first line will be a space character.\n    # one idea is to use the insertion sort to find the maximum value\n    # as a reference.\n    # for the input [-4, -3, 5], we can find the maximum is 5.\n    # so the maximum value for k is 2, and the answer is [-5, 5].\n\n    # find the maximum value.\n    m = max(arr)\n\n    # if we want to find 1 or 2 numbers, we can just return the max value\n    if k == 1:\n        return [m]\n    elif k == 2:\n        return [-m, m]\n\n    # for the case that we want to find k numbers, we can do insertion sort\n    # to find the maximum value.\n    # after we insert the largest number into the list, we can check whether\n    # we have inserted k numbers.\n    # if not, we need to insert the next largest value into the list, and so on.\n\n    # we can use a max-heap to store the values\n    heap = [max(arr)]\n    heap.extend(arr)\n\n    # as long as the length of the list is less than k,", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    return arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Edge cases.\n    if len(arr) <= k:\n        return arr\n    # Use a heap to store arr and the heap size is k. Then pop from the heap and \n    # return it. The heap is always maintained with the max heap property.\n    heap = [max(arr)] * k\n    while len(heap) > k:\n        heap_size = len(heap)\n        heap = [heap[0] for _ in range(k)]\n        # Pop the top k elements from the heap and assign it to arr.\n        for i in range(k):\n            arr[i] = heap.pop()\n        # Update the heap.\n        for i in range(heap_size):\n            heap[i] = max(arr[i], heap[i])\n    return arr", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def merge(a, b):\n        c = []\n        i = 0\n        j = 0\n        while i < len(a) or j < len(b):\n            if i >= len(a) or j >= len(b):\n                c.append(min(a[i], b[j]))\n                i += 1\n                j += 1\n            elif a[i] <= b[j]:\n                c.append(a[i])\n                i += 1\n            else:\n                c.append(b[j])\n                j += 1\n        return c\n    def sort(a, k):\n        i = 0\n        for j in range(k):\n            while i < len(a) and j >= len(a[i]):\n                i += 1\n            a.insert(i, 0)\n            a[i] = a[i][len(a[i]) - 1:]\n            a[i].insert(0, 0)\n            i += 1\n    arr = sorted(arr)\n    if len(arr) == 0:\n        return []\n    elif len(arr) < k:\n        return arr\n    else:\n        sort(arr, k)\n        return merge(arr, [-1] * (k - len(arr)))", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def max_heapify(heap, k):\n        \"\"\"\n        Given a heap and k, return a list containing the k largest elements of heap.\n\n        Heap: A Min Heap\n        \"\"\"\n\n        while k:\n            # Get the index of the left child\n            left = heap[0]\n            # If the left child is greater than or equal to the parent element, exchange them\n            if left < heap[-1] and left < heap[(left - 1) // 2]:\n                heap[0], heap[(left - 1) // 2] = heap[(left - 1) // 2], heap[0]\n\n            # Get the index of the right child\n            right = left * 2 + 1\n            # If the right child is greater than or equal to the parent element, exchange them\n            if right < len(heap) and right < heap[(right - 1) // 2]:\n                heap[0], heap[(right - 1) // 2] = heap[(right - 1) // 2], heap[0]\n\n            # If the left and right child are greater than or equal to the parent element, exchange them\n            if left < len(heap) and left < heap[(left - 1) // 2]:\n                heap[0], heap[(left - 1) //", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    nums = sorted(arr, reverse = True)\n    nums = nums[-k:]\n    #Sorting using insertion sort, O(n^2)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    array = list(arr)\n\n    length = len(array)\n    max_k = int(length * k / (length + 1))\n    if length < max_k:\n        return list(array)\n\n    queue = []\n    heap = []\n    max_queue = []\n\n    for i in range(length):\n        heap.append(array[i])\n        max_queue.append(array[i])\n\n    heap.append(array[length - 1])\n\n    while max_k > 0:\n        if heap[0] >= heap[-1]:\n            heap.pop(-1)\n            heap.append(max_queue.pop(0))\n        else:\n            heap.pop(-1)\n            heap.append(max_queue.pop(0))\n            heap[0] = max(heap[0], heap[-1])\n\n    return heap[:max_k]\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def max_k_elements(arr, k):\n        nums = arr[:]\n        nums.sort()\n        if len(nums) <= k:\n            return nums\n        return nums[-k:]\n\n    if len(arr) == 0:\n        return []\n    return max_k_elements(arr, k)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # your code goes here\n    if not arr or k == 0:\n        return []\n\n    # simple case, sort and return the first k elements\n    if len(arr) <= k:\n        arr.sort()\n        return arr[:k]\n\n    # write a recursive function here\n    if k == 1:\n        return [max(arr)]\n\n    # find the position i of the first element in arr[i:]\n    i = len(arr) - 1\n    while arr[i] <= arr[i + 1]:\n        i -= 1\n    arr.reverse()\n\n    # sort arr[i:len(arr)] and reverse it back\n    arr = sorted(arr[i:len(arr)], reverse = True)\n    arr.reverse()\n\n    # now sort the array by considering the elements in arr[i:]\n    # and the first k-1 elements\n    return arr[:k - 1] + maximum(arr[i:], k - 1)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if not k <= len(arr):\n        raise ValueError('k must be positive')\n\n    if arr == []:\n        return []\n\n    for i in range(len(arr)):\n        if k - i < 0:\n            break\n        else:\n            arr[i:] = sorted(arr[i:], reverse=True)\n\n    return arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    sorted_arr = arr[::-1]\n    if k < 0:\n        return sorted_arr[-k:]\n    else:\n        return sorted_arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def max_subarray(arr):\n        # memo\n        if len(arr) <= 0:\n            return arr\n        else:\n            if len(arr) == 1:\n                return arr\n\n            max_num = arr[0]\n            max_list = [arr[0]]\n\n            for i in range(1, len(arr)):\n                if arr[i] > max_num:\n                    max_num = arr[i]\n                    max_list = [max_list[0], arr[i]]\n                elif arr[i] == max_num:\n                    max_list.append(arr[i])\n\n            return max_list\n\n    if len(arr) <= k:\n        return arr[:k]\n\n    res = max_subarray(arr[:k])\n    for i in range(k, len(arr)):\n        res = max(res + [arr[i]], key=lambda x: x[-1])\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    import heapq\n    l = len(arr)\n    if l == 0:\n        return []\n    arr = [-i for i in arr]\n    heapq.heapify(arr)\n    for i in range(l, 0, -1):\n        heapq.heappop(arr)\n    heapq.heapify(arr)\n    result = []\n    while l > k:\n        result.append(arr[0])\n        heapq.heappop(arr)\n        l -= 1\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    _helper(arr, k, 0, len(arr))", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Edge cases\n    if k > len(arr):\n        return []\n    # Counter\n    counter = []\n    # Iterate through array\n    for i, element in enumerate(arr):\n        # Counter for the number of elements less than arr[i]\n        counter.append(len([j for j in arr if j < element]))\n        # If counter[i] is exactly k-1, this means that arr[i] is the maximum\n        if len([j for j in arr if j < element]) == k - 1:\n            counter[i] -= 1\n    # Sort the counter so that the elements which have the maximum count are at the end\n    counter.sort()\n    # The maximum elements are those which have the maximum count. So we take the last k elements\n    return [arr[i] for i in reversed(range(k)) if counter[i] == k - 1]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    if k == 0:\n        return []\n    if k > len(arr):\n        return arr\n    if k == 1:\n        return arr[0]\n    l, h = len(arr), len(arr)-1\n    res = [arr[l]]\n    while l <= h:\n        if arr[l] > arr[h]:\n            res.append(arr[l])\n            l += 1\n        else:\n            res.append(arr[h])\n            h -= 1\n    if len(res) < k:\n        res = res + [maximum(arr, k-len(res))]\n    return sorted(res)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    import heapq\n    _heap = []\n    for _ in range(k):\n        _heap.append([])\n\n    for _ in range(len(arr)):\n        _heap[0].append(arr[_])\n\n    for i in range(1, k + 1):\n        parent = (i - 1) // 2\n        max1 = 0\n        max2 = 0\n        max3 = 0\n\n        while parent >= 0:\n            max1 = max(max1, _heap[i][parent])\n            max2 = max(max2, _heap[parent][(i - 1)])\n            max3 = max(max3, _heap[i][(i - 1)])\n            parent -= 1\n        _heap[i] = [max1, max2, max3]\n    return [_[0] for _ in sorted(_heap[k])]\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    assert 0 <= k <= len(arr), \"Length of the array should be positive and less than the given length\"\n    if len(arr) <= k:\n        return arr[0:k]\n    else:\n        max_arr = []\n        for i in range(len(arr) - k + 1):\n            temp_arr = arr[i:i + k]\n            temp_max = max(temp_arr)\n            max_arr.append(temp_max)\n        return sorted(max_arr)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if arr == []:\n        return []\n    if k > len(arr):\n        return arr[:k]\n\n    arr.sort()\n    if arr[0] < 0:\n        arr.insert(0, -arr[0])\n    return arr[:k] + [-arr[k]]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    if k == 0:\n        return []\n    # find k largest element in arr\n    k_largest = sorted(arr, reverse=True)[0:k]\n    # find one larger than all k_largest\n    one_larger = [-1 for i in range(k)]\n    one_larger[::-1] = [-1 for i in range(len(k_largest))]\n    for i in range(len(k_largest)):\n        one_larger[i] = 0\n        for j in range(len(k_largest)):\n            if k_largest[j] > one_larger[i]:\n                one_larger[i] = k_largest[j]\n    max_list = sorted(one_larger + k_largest)\n    return max_list", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def _maximum(arr, k):\n        res = []\n        res.append(max(arr))\n        for i in range(1, k):\n            res.append(min(arr[-i:]))\n        return res\n    return _maximum(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    lo = 0\n    hi = len(arr) - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if k <= len(arr[mid]):\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return arr[lo : lo + k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    return sorted(arr, reverse=True)[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr[:k])[0:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return [arr[0]] * k\n\n    arr.sort()\n    m = [arr[0]]\n    for i in range(1, k):\n        m.append(arr[i])\n        temp = [arr[i], m[i - 1]]\n        if m[i - 1] > temp[0]:\n            m[i - 1], temp[0] = temp[0], m[i - 1]\n        if m[i - 1] == temp[0]:\n            m.append(temp[1])\n\n    return m", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n\n    # Build heap of size k\n    heap = [arr[0]] * k\n\n    # Pop top k elements\n    for i in range(k):\n        heap = [heap[0], max(heap[1:], key=lambda x: x[0])] + heap[1:]\n\n    return heap", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    heap = []\n    for x in arr:\n        heap.append(x)\n    heap.sort()\n    for i in range(len(heap)):\n        if k == i:\n            yield heap[i]\n        else:\n            heap[i], heap[k - 1] = heap[k - 1], heap[i]\n            heap.sort()\n    if k == len(heap):\n        yield heap[-1]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max_k(arr, k):\n        if len(arr) <= k:\n            return arr[:k]\n        else:\n            return sorted(arr[k-1:] + max_k(arr[:k-1], k-1), reverse=True)\n    return max_k(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def maximumHelper(arr, k):\n        if k == 0:\n            return []\n\n        temp_max = arr[0]\n        maxList = [temp_max]\n        for i in range(1, k):\n            temp_max = max(temp_max, arr[i])\n            maxList.append(temp_max)\n\n        return maxList\n\n    return maximumHelper(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # @include\n    # Find maximum of arr, which is also the smallest element of the array.\n    max_idx = 0\n    max_value = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_value:\n            max_idx = i\n            max_value = arr[i]\n    max_idx += 1\n    # Slice arr so that it has exactly k elements.\n    k = len(arr) - k\n    arr = arr[:max_idx] + arr[max_idx:]\n    # Reverse arr to get a sorted list.\n    arr.sort()\n    # Delete last k elements of arr.\n    arr = arr[:-k]\n    return arr\n    # @exclude", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    n, m = len(arr), k\n    s = [arr[0]] * m\n    for i in range(1, n):\n        s[m-1] = max(s[m-1], arr[i])\n        if len(s) == k:\n            yield s[:]\n            s = [arr[i]] * (m-1)\n        else:\n            s[m-1] = max(s[m-1], arr[i])\n            s.append(arr[i])\n    if len(s) > 0:\n        yield s[:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Use the solution for Maximum Sum Subarray Problem and apply it for each number\n    # in the array.\n    # The maximum sum of subarray problem is also called Longest Increasing Subsequence\n    # or LIS problem.\n    # LIS problem can be solved with the help of two pointers.\n    # The two pointers start at the left most index of the array and move towards \n    # the right and left respectively.\n    # When the value of the element at the current index is greater than the \n    # element at the next index, we store the current index value.\n    # Once the length of the subarray reaches the required k, we stop the pointers.\n    # The list will be in reverse order.\n    # Time Complexity: O(n^2)\n    # Space Complexity: O(k)\n\n    # Optimization:\n    # We can use DP approach to solve this problem in O(n*k) time and O(1) space.\n    # We will maintain a 2D array dp of size n*k and we will fill it in the below \n    # manner.\n    # dp[i][j] = max(arr[:i][:j]) if j > 0 else 0\n    # This solution uses O(n^2) space, so we can use it for small values of k", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    n, k = len(arr), k\n    # sort\n    arr = sorted(arr)\n    if k > n:\n        return arr\n    # select the maximum k elements\n    i, j = 0, 0\n    ans = []\n    while i < n:\n        if j >= k:\n            break\n        if arr[j] > arr[i]:\n            j += 1\n        else:\n            i += 1\n            ans.append(arr[i])\n    return ans\n\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    n = len(arr)\n\n    if n <= k:\n        return arr[:k]\n\n    def find_maximum(arr, low, high):\n        if low == high:\n            return [arr[low]]\n\n        mid = (low + high) // 2\n        maximum = []\n\n        maximum.append(arr[mid])\n        maximum.extend(find_maximum(arr, low, mid - 1))\n        maximum.extend(find_maximum(arr, mid + 1, high))\n\n        return maximum\n\n    return find_maximum(arr, 0, n - 1)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    sorted_arr = sorted(arr, reverse=True)\n    max_num = sorted_arr[0]\n    for i in range(1, k):\n        if sorted_arr[i] > max_num:\n            max_num = sorted_arr[i]\n    return [max_num] + list(reversed(sorted_arr[:k]))", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    ret = []\n    for i in range(len(arr)):\n        if i == k - 1:\n            ret.append(arr[i])\n        else:\n            ret.append(arr[i])\n            j = i + 1\n            while j < len(arr):\n                ret.append(arr[j])\n                j += 1\n    return ret", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    arr.sort()\n    if len(arr) <= k:\n        return arr\n\n    for i in range(len(arr) - k + 1):\n        if arr[i] == arr[i + k - 1] and arr[i]!= arr[i + k]:\n            return arr[i:i + k]\n\n    return arr[-k:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max_k(arr, k):\n        # initial k - 1 elements\n        result = [arr[0]]\n        # following elements\n        for i in range(1, k):\n            for j in range(len(arr) - i + 1):\n                if arr[j] > result[i]:\n                    result[i] = arr[j]\n        return result\n\n    if len(arr) <= k:\n        return arr\n    return max_k(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    k = len(arr)\n    if k == 0:\n        return []\n    if k == 1:\n        return arr[0]\n    if k == 2:\n        return arr[0] + arr[1]\n    maxsum = arr[0]\n    max_left = arr[0]\n    max_right = arr[0]\n    for x in arr[1:]:\n        if x > max_left:\n            max_left = x\n        if x > max_right:\n            max_right = x\n        if max_left + max_right > maxsum:\n            maxsum = max_left + max_right\n            max_left = arr[1]\n            max_right = arr[2]\n    ans = [max_left, max_right]\n    while ans[-2] + ans[-1] < maxsum:\n        if ans[-2] == ans[-1]:\n            ans[-1] = arr[-2]\n            del arr[-2]\n        else:\n            ans[-2] = arr[-2]\n            ans[-1] = arr[-1]\n            del arr[-2]\n            del arr[-1]\n    return ans", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def maximum_aux(arr, k):\n        # handle base case\n        if k <= 0:\n            return []\n        # find kth largest number\n        sorted_list = sorted(arr)\n        # get the kth largest number\n        kth = sorted_list[-k - 1]\n        # remove the kth largest number from the array\n        arr = [element for element in arr if element!= kth]\n        # recursively call the function to get the rest of the k number\n        return maximum_aux(arr, k - 1)\n    return maximum_aux(arr, k)</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr) or k <= 0:\n        return []\n    max_heap = []\n    max_list = []\n    for i in arr:\n        max_heap.append(i)\n    for i in range(len(max_heap)):\n        max_list.append(max_heap[0])\n        max_heap.pop(0)\n        while len(max_heap) > k and max_heap[0] > 0:\n            max_list.append(max_heap[0])\n            max_heap.pop(0)\n    return max_list", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    #fibonacci heap from leetcode.com\n    #n, m = arr.size, k\n    #heapq.heapify(arr)\n    #heapq.heapreplace(arr, heapq.heappop(arr) for _ in range(m))\n    #return arr[:k]\n    k = len(arr) - k\n    return arr[-k:]\n\narr = [-3, -4, 5]\nk = 3", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n\n    nums = []\n    nums.append(arr[0])\n    for i in range(1, len(arr)):\n        if arr[i] > arr[-1]:\n            nums.append(arr[i])\n        else:\n            break\n\n    i = 0\n    while i < len(nums):\n        temp = nums[i]\n        j = i\n        while j < len(nums):\n            if nums[j] > temp:\n                temp = nums[j]\n                j += 1\n            else:\n                break\n\n        nums[i] = temp\n        i += 1\n\n    return nums[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    len_arr = len(arr)\n    if k > len_arr:\n        return []\n    if k > 1:\n        arr.pop()\n        arr.pop()\n        max_num = 0\n        for num in arr:\n            if num > max_num:\n                max_num = num\n        return [max_num]\n    else:\n        return arr[0]\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if not arr or len(arr) == 0:\n        return []\n    if not k or k <= 0:\n        return []\n\n    a = arr\n    idx = list(a)\n    idx.sort()\n    maxi = idx[-1]\n    idx.remove(maxi)\n    idx.extend(a[maxi:])\n    idx.sort()\n    # idx = [maxi] + idx\n\n    result = []\n    for i in range(k):\n        result.append(idx[i])\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def maximum_subarray(arr, i, k):\n        if i + k > len(arr):\n            return arr[i:i + k]\n        # i + k < len(arr)\n        m = arr[i]\n        left = maximum_subarray(arr, i + 1, k - 1)\n        right = maximum_subarray(arr, i + 1, k)\n        if left[-1] > right[-1]:\n            left.extend(right)\n        else:\n            right.extend(left)\n        left.append(m)\n        return left\n\n    return maximum_subarray(arr, 0, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Dynamic programming\n    if k == 0:\n        return []\n\n    res = [[] for _ in range(k)]\n    for i in range(k):\n        for j in range(len(arr)):\n            if arr[j] > res[i][-1]:\n                res[i].append(arr[j])\n\n    return sorted(res[k], reverse=True)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    max_nums = []\n    for _ in range(k):\n        max_nums.append(arr[-(k - 1)])\n    for num in arr[-(k - 1):]:\n        if num > max_nums[-1]:\n            max_nums.append(num)\n    return sorted(max_nums)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def binary_search(arr, lo, hi):\n        if lo >= hi:\n            return 0\n        mid = (lo+hi)//2\n        if arr[mid] > arr[mid-1]:\n            if mid == 0 or arr[mid-1] < arr[mid-2]:\n                return mid\n            return binary_search(arr, lo, mid-1)\n        else:\n            return binary_search(arr, mid+1, hi)\n\n    def merge(arr, left, right, res):\n        if left == right:\n            return\n        if left < right:\n            l = (right-left)//2\n            merge(arr, left, l, res)\n            merge(arr, l+1, right, res)\n            for i in range(l, right+1):\n                if res[right] < arr[i]:\n                    res[right] = arr[i]\n                else:\n                    res[right-1] = arr[i]\n            return\n        for i in range(left, right+1):\n            res[i] = arr[i]\n        return\n    \n    n = len(arr)\n    if n < k:\n        return arr[:k]\n    res = [-1] * k\n    left = 0\n    right = n-1\n    while left <= right:\n        mid = (right-left)//2 + left\n        if arr[", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # \u8fd4\u56de\u53ea\u542b\u6700\u503c\u5143\u7d20\u4e14\u5927\u5c0f\u4e3ak\u7684\u5217\u8868\n    # \u5206\u6790\u4e3a\u5c06arr\u4e2d\u7684\u5143\u7d20\u653e\u5165k\u4e2a\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u6570\u7ec4\u6c42max\n    # \u6bcf\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u4e3ak\uff0c\u6240\u4ee5\u8981\u5bf9\u6bcf\u4e2a\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    # \u6ce8\u610f\uff1a\u4e0d\u9700\u8981\u8003\u8651arr\u7684\u5927\u5c0f\uff0c\u56e0\u4e3ak\u4e00\u5b9a\u5728arr\u7684\u957f\u5ea6\u4e4b\u5185\n    result = []\n    n = len(arr)\n    for i in range(n):\n        sub_arr = arr[:k]\n        sub_arr.append(arr[i])\n        sub_arr.sort()\n        result.append(sub_arr)\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # python\u7b97\u6cd5\u4e2d\u76f4\u63a5\u4f7f\u7528sort\u51fd\u6570\uff0c\u4e0d\u7528\u5f15\u5165\u5176\u4ed6\u5e93\u3002\n    # \u4f7f\u7528\u4f18\u5148\u961f\u5217\uff0c\u662f\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u6548\u7387\u6bd4\u5192\u6ce1\u6392\u5e8f\u597d\u3002\n    # \u601d\u8def: 1. \u904d\u5386\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u6807\u8bb0\u4e00\u904d\uff0c\u6807\u8bb0\u5f53\u524d\u5143\u7d20\u662f\u5426\u5728\u961f\u5217\u4e2d 2. \u5bf9\u6240\u6709\u5143\u7d20\u8fdb\u884c\u6392\u5e8f 3. \u904d\u5386\u961f\u5217\uff0c\u5bf9\u961f\u5217\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u79fb\u9664\u548c\u8f93\u51fa\n    # \u7f3a\u70b9: \u65e0\u6cd5\u5c06\u6240\u6709\u7684\u6700\u5927\u503c\u90fd\u8f93\u51fa\uff0c\u53ea\u80fd\u8f93\u51fa\u5176\u4e2d\u7684k\u4e2a\uff0c\u5982\u679ck\u6bd4\u961f\u5217\u957f\u5ea6\u5c0f\uff0c\u90a3\u4e48\u961f\u5217\u4e2d\u7684\u5176\u4ed6\u5143\u7d20\u5c31\u4e22\u5931\u4e86\n    # \u4f18\u70b9: \u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u6bd4\u5192\u6ce1\u6392\u5e8f\u66f4\u4f4e\n    # \u601d\u8def: 1. \u904d\u5386\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u6807\u8bb0\u4e00\u904d\uff0c\u6807\u8bb0\u5f53\u524d\u5143\u7d20\u662f\u5426\u5728\u961f\u5217\u4e2d 2. \u5bf9\u6240\u6709\u5143\u7d20\u8fdb\u884c\u6392\u5e8f 3. \u904d\u5386\u961f\u5217\uff0c\u5bf9\u961f\u5217\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u79fb\u9664\u548c\u8f93\u51fa\n    # \u7f3a\u70b9: \u65e0\u6cd5\u5c06\u6240\u6709\u7684\u6700\u5927\u503c\u90fd\u8f93\u51fa\uff0c\u53ea\u80fd\u8f93\u51fa\u5176\u4e2d\u7684k\u4e2a\uff0c\u5982\u679ck\u6bd4\u961f\u5217\u957f\u5ea6\u5c0f\uff0c\u90a3\u4e48\u961f\u5217\u4e2d\u7684\u5176\u4ed6\u5143\u7d20\u5c31\u4e22\u5931\u4e86\n    # \u4f18\u70b9: \u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u6bd4\u5192\u6ce1\u6392\u5e8f\u66f4\u4f4e\n    # \u601d\u8def: \u6bcf\u6b21\u90fd\u53d6\u6700\u5927\u7684\u503c\u653e\u5230\u6570\u7ec4", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Do not sort the array. Use the minimum/maximum value of each sub-array\n    # as a pivot.\n    #\n    # Time complexity: O(N) + O(N*logN) = O(N*logN).\n    # Space complexity: O(N).\n    #\n    # ####\n    #\n    # Below is the dynamic programming solution. Using the idea of memoization, we can\n    # use O(N) space and O(N*logN) time.\n\n    # Use a dict to store the results\n    #\n    # The key is the subarray. The value is the maximum k numbers of the subarray.\n    #\n    # For example, {[4]: [-4, 4]}.\n    #\n    # Initially, for all subarrays, we use the maximum value of the subarray as the\n    # answer.\n    #\n    # time complexity: O(N*logN)\n    # space complexity: O(N)\n    #\n    # def maximum(arr, k):\n    #     answer = {}\n    #     for i in arr:\n    #         answer[i] = [i, ]\n    #\n    #     for _ in range(1, k):\n    #         for i in arr:\n    #             for", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # https://leetcode.com/explore/challenge/card/january-leetcoding-challenge-24/week-24/333/problems/max-k-elements/?filter=all\n    def max_heapify(array, start, end):\n        \"\"\"\n        Implements a heap sort for an array of integers.\n        \"\"\"\n        heap_size = end - start + 1\n        if heap_size < 1:\n            return []\n        max_heap = [array[start]]\n        for i in range(1, heap_size):\n            max_child = (start + i) // 2\n            max_heap[i] = max(max_heap[i], array[max_child])\n            if max_heap[i] < array[max_child]:\n                max_heap[i] = array[max_child]\n            max_heapify(array, start, max_child)\n        return max_heap\n\n    def heap_sort(array, start, end):\n        \"\"\"\n        Implements a heap sort for an array of integers.\n        \"\"\"\n        heap_size = end - start + 1\n        if heap_size < 2:\n            return array\n        else:\n            return heap_sort(array, start, heap_size // 2) + [array[heap_size // 2]] + heap_sort(array, heap_size // 2, end)\n\n    def max_k_elements", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def find_max(arr, start, end):\n        if end - start == 0:\n            return arr[start]\n        mid = (start + end) / 2\n        if arr[mid] > arr[end]:\n            return find_max(arr, start, mid - 1)\n        else:\n            return find_max(arr, mid + 1, end)\n\n    def max_k_list(arr, k):\n        result = []\n        start = 0\n        end = len(arr) - 1\n        while start < end:\n            max_num = find_max(arr, start, end)\n            result.append(max_num)\n            start += 1\n            end -= 1\n            if len(result) == k:\n                break\n        return result\n\n    return max_k_list(arr, k)</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    array = list(arr)\n    sorted_arr = sorted(array)\n    if k == 1:\n        return sorted_arr[0]\n    elif k < 1:\n        return None\n    else:\n        return sorted_arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort(reverse = True)\n    n = len(arr)\n    if n == 0: return []\n    elif n == 1: return [arr[0]]\n    i = 0\n    result = []\n    max_num = arr[0]\n    max_index = 0\n    while i < n and arr[i] <= k:\n        i += 1\n        max_num = max(max_num, arr[i])\n        max_index = i\n    if i == n:\n        result = [arr[max_index]]\n    else:\n        result = arr[max_index:i]\n        result.reverse()\n        result = sorted(result)\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def find_max(arr, k, result):\n        if len(result) == k:\n            return result\n        elif len(result) > 0:\n            if arr[len(result)] > arr[-1]:\n                result.append(arr[-1])\n                result = find_max(arr, k, result)\n                result.pop()\n            else:\n                result = find_max(arr, k, result)\n        return result\n\n    return find_max(arr, k, [])</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k < 0:\n        print(\"k must be positive\")\n        return None\n\n    # we use a list to store elements, so it can be sorted easily.\n    ans = []\n    for _ in range(k):\n        ans.append(-999)\n\n    for num in arr:\n        i = 0\n        for _ in range(k):\n            if num > ans[i]:\n                ans[i] = num\n                break\n            i += 1\n\n    # sort the elements and remove the -999 value\n    ans.sort()\n    ans.remove(-999)\n\n    return ans", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    n, k = len(arr), k\n    if n <= k:\n        return arr[:k]\n    ans = [-1] * k\n    for i in range(k):\n        m = -1\n        for j in range(n):\n            if arr[j] > m and m < 0:\n                m = arr[j]\n        ans[i] = m\n    return sorted(ans)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    a = sorted(arr)\n    if len(a) <= k:\n        return a\n    else:\n        return a[-k:] + a[:-k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = list(arr)\n    if len(arr) < k:\n        return arr\n    if len(arr) == k:\n        return arr[:]\n\n    res = [arr[0]]\n    for i in range(1, k):\n        cur_max = arr[0]\n        for j in range(0, i):\n            if arr[j] > cur_max:\n                cur_max = arr[j]\n        res.append(cur_max)\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    n = len(arr)\n    if n == 0 or k == 0:\n        return []\n    # 1. Check if k is greater than the size of array.\n    if k > n:\n        return arr[n - 1:]\n    # 2. Check if k is smaller than the size of array.\n    elif k < n:\n        return arr[:k - 1]\n    # 3. check if k is equal to the size of array.\n    else:\n        # 3.1. Initialize a vector with the first k elements\n        vec = arr[:k]\n        # 3.2. Sort the vector and get its maximum.\n        vec.sort()\n        # 3.3. Return the vector elements.\n        return vec", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    res = []\n    for i in range(len(arr)):\n        max_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                max_idx = j\n        if max_idx > k:\n            k -= 1\n        res.append(arr[i])\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    else:\n        # Sort the array\n        sorted = sorted(arr)\n        # Create a list of size k and fill it with elements from the sorted array\n        result = [ sorted[i] for i in range(0,k)]\n        return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    assert 0 <= k <= len(arr)\n    if k == 0:\n        return []\n    else:\n        # create a dictionary to store the max value of each position\n        # it will be used as the sorted array, so the same value will be repeated.\n        max_dict = {}\n        # loop through the array and build the dictionary\n        for i, n in enumerate(arr):\n            max_dict[n] = i\n        # create a temp list and sort it using the dictionary\n        # then the result can be returned directly\n        temp_list = [max_dict[n] for n in arr]\n        # sort the temp list using the dictionary\n        temp_list = sorted(temp_list)\n        return temp_list[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    list_length = 0\n\n    while list_length < k and len(arr) > 0:\n        max_number = arr[0]\n        for i in range(1, len(arr)):\n            if max_number < arr[i]:\n                max_number = arr[i]\n        arr.pop(0)\n        list_length += 1\n\n    return arr\n\narr = [-3, -4, 5]\nk = 3", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def _helper(arr, k):\n        max_heap = [(arr[i], i) for i in range(len(arr))]\n        while len(max_heap) > k:\n            parent = (max_heap[0][1]-1)//2\n            max_heap.remove(max_heap[0])\n            if max_heap[0][1] == parent and max_heap[0][0] > arr[parent]:\n                max_heap.append((arr[parent], parent))\n        return [max_heap[0] for i in range(k)]\n\n    return _helper(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    # use a heap to store top k elements\n    h = [(x, i) for i, x in enumerate(arr)]\n    heapq.heapify(h)\n    res = []\n    while h:\n        res.append(h[0][0])\n        heapq.heappop(h)\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    max_len = int(k * 1.3) # don't use this line, use the next line instead\n    max_list = []\n    for i in range(max_len):\n        max_list.append(-1)\n    for item in arr:\n        if len(max_list) == max_len:\n            break\n        curr = item\n        if item > max_list[0]:\n            max_list[0] = item\n            i = 0\n        elif item == max_list[0]:\n            i += 1\n        if i == max_len:\n            max_list.append(item)\n    return max_list\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k < 0:\n        raise ValueError(\"k must be positive\")\n    if len(arr) < k:\n        raise ValueError(\"k is larger than arr size\")\n    n = len(arr)\n    max_arr = sorted(arr) #sort the original array\n    return [max(max_arr[i:i+k]) for i in range(0, n, k)]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    res = []\n    if not arr or not k:\n        return res\n    elif k > len(arr):\n        return arr\n    for i, val in enumerate(arr):\n        if i >= k:\n            break\n        res.append(max(res, val))\n    return sorted(res)\n \narr = [4, -2, -2]\nk = 2", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    if k == 0:\n        return []\n\n    # 0 based indices\n    idx_max = [i for i, x in enumerate(arr) if x == max(arr)]\n    k_idx_max = len(idx_max)\n\n    if k > k_idx_max:\n        return arr[idx_max[-k_idx_max:]]\n    else:\n        return arr[idx_max[k_idx_max-1:k_idx_max]]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max_sub_list(arr, k):\n        max_list = []\n        for i in range(k):\n            max_list.append(-1)\n        for i in range(len(arr)):\n            if max_list[i] == -1:\n                for j in range(i + 1, k):\n                    if arr[i] > max_list[j]:\n                        max_list[j] = arr[i]\n            elif arr[i] > max_list[i]:\n                max_list[i] = arr[i]\n        return max_list\n    return max_sub_list(arr, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) <= k:\n        return arr[:k]\n    left, right = 0, len(arr) - 1\n    max_left = arr[left]\n    max_right = arr[right]\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] > max_left:\n            max_left = arr[mid]\n            left = mid + 1\n        else:\n            right = mid - 1\n    result = [max_right] + [max_left] * (k - 1)\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = [int(_) for _ in str(arr).split(\" \")]\n    dp = [[0] * (k + 1) for _ in range(len(arr))]\n    dp[0][0] = arr[0]\n    for i in range(1, len(arr)):\n        for j in range(len(arr) - i + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], arr[i])\n    return [int(_) for _ in str(dp[0]).split(\" \")][:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    k = k\n    arr = arr\n    ans = []\n\n    if not arr:\n        return []\n\n    if k <= 0:\n        return []\n\n    if not k == len(arr):\n        k = k % len(arr)\n\n    for i in range(k):\n        if arr[i] > arr[i + 1]:\n            ans.append(arr[i])\n            arr.remove(arr[i])\n\n    for i in range(k):\n        if arr[i] > arr[i + 1]:\n            ans.append(arr[i])\n\n    return ans", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def bubble_up(arr, left, right, k):\n        if left >= right or k <= 0 or right - left <= k:\n            return\n        mid = left + int((right - left) // 2)\n        if arr[mid] > arr[mid + 1]:\n            arr[mid], arr[mid + 1] = arr[mid + 1], arr[mid]\n            bubble_up(arr, left, mid - 1, k - 1)\n            bubble_up(arr, mid + 1, right, k - 1)\n\n    n = len(arr)\n    if n == 0:\n        return []\n    arr = sorted(arr)\n    return bubble_up(arr, 0, n - 1, k)[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Optimization: Use two pointers\n    # Time Complexity - O(n)\n    # Space Complexity - O(1)\n    # Iterative - O(n), i.e. O(k) for each loop\n    # Recursive - O(n log n)\n    if k <= 0:\n        return []\n\n    if k == 1:\n        max_list = []\n        for i in arr:\n            if i > max_list[0]:\n                max_list = [i]\n            elif i == max_list[0]:\n                max_list.append(i)\n        return max_list\n\n    max_list = []\n    max_list.append(arr[0])\n    for i in arr[1:]:\n        if i > max_list[k-1]:\n            max_list[k-1] = i\n        elif i == max_list[k-1]:\n            max_list[k] = i\n\n    return max_list[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def helper(arr, k, left, right):\n        if left == right:\n            if k > 0:\n                yield arr[left]\n            else:\n                yield arr[left]\n            return\n        mid = left + (right - left) // 2\n        if arr[mid] > arr[right]:\n            helper(arr, k, left, mid - 1)\n        else:\n            helper(arr, k, mid + 1, right)\n\n    return sorted(helper(arr, k, 0, len(arr) - 1))[-k:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    n = len(arr)\n    l = list(arr)\n    m = []\n    nTemp = []\n    for i in range(n):\n        nTemp.append(arr[i])\n\n    for i in range(0, n):\n        if nTemp[i] > m[n-1]:\n            m.append(nTemp[i])\n        elif nTemp[i] < m[n-1]:\n            m.pop(-1)\n\n    if k <= n:\n        return m[0:k]\n    else:\n        return m[0:n]\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    return sorted(arr)[0:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < k:\n        return []\n    max_heap = []\n    for _ in range(len(arr)):\n        if max_heap and arr[max_heap[-1]] <= arr[-1]:\n            max_heap.pop()\n        max_heap.append(arr.pop())\n        \n    return sorted(max_heap, reverse=True)[0:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) > 0:\n        max_index = arr.index(max(arr))\n        if max_index > k:\n            return arr[:k]\n        else:\n            return arr[max_index:]\n    else:\n        return []", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def max(left, right):\n        if left == []:\n            return right\n        if right == []:\n            return left\n        if left[-1] > right[-1]:\n            return max(left, right[:-1])\n        else:\n            return max(left[:-1], right)\n    return max([x for x in arr[:k]], [x for x in arr[k:] if x not in [x for x in arr[:k]]])\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k >= len(arr):\n        return arr\n\n    if arr[0] > arr[1]:\n        arr = [arr[1], arr[0]]\n\n    l = []\n    for i in range(k-1):\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            l.append(arr[i])\n\n    return l", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    import copy\n    _tmp = copy.deepcopy(arr)\n    result = []\n    sorted_arr = sorted(_tmp)\n    if sorted_arr[0] < 0:\n        for i in range(k):\n            result.append(sorted_arr[i])\n    else:\n        for i in range(k):\n            if sorted_arr[i] == 0:\n                result.append(sorted_arr[i])\n    return result\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # noinspection PyShadowingNames,PyUnresolvedReferences\n    def helper(arr, n, k):\n        \"\"\"\n        :type arr: List[int]\n        :type n: int\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        if n == k:\n            return [arr[i] for i in range(k)]\n        if n == 0:\n            return []\n        return helper(arr[:n - 1], n - 1, k) + helper(arr[n - 1:], n - 1, k)\n    return helper(arr, len(arr), k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k >= len(arr):\n        return arr\n    ret = []\n    for i in range(k):\n        ret.append(arr[i])\n    for i in range(len(arr) - k + 1):\n        ret[i] = max(arr[i:i + k])\n    return ret", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k <= 0 or k > len(arr):\n        return []\n    return _maximum_helper(arr, 0, len(arr)-1, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def maximum_aux(arr, k, res):\n        if k <= 0:\n            return res\n        if len(res) == k:\n            return res\n        if len(arr) == 0:\n            return res\n        if len(arr) == 1:\n            res.append(arr[0])\n            return res\n        if arr[0] <= arr[1]:\n            maximum_aux(arr[1:], k-1, res)\n            res.append(arr[0])\n        else:\n            maximum_aux(arr[0:-1], k-1, res)\n            res.append(arr[-1])\n    return maximum_aux(arr, k, [])\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # @include\n    def helper(arr, k):\n        list_index = arr[:k]\n        for idx, item in enumerate(arr[k:]):\n            if item > list_index[-1]:\n                list_index.append(item)\n        return list_index\n    return helper(arr, k)[:k] if k < len(arr) else helper(arr, len(arr))[:k]\n    # @exclude", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < k:\n        return []\n    elif k == 0:\n        return []\n    elif k == 1:\n        return [arr[0]]\n    else:\n        if k > len(arr):\n            k = len(arr)\n        max_list = [arr[0]]\n        for i in range(1, k):\n            max_list.append(arr[i])\n            tmp = max_list\n            while i < len(tmp) and tmp[i] < tmp[i - 1]:\n                tmp.pop(i)\n            max_list = tmp\n        return max_list\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    result = []\n    idx = 0\n    while idx < k:\n        tmp = arr[idx]\n        max_idx = idx\n        for i in range(idx + 1, len(arr)):\n            if arr[i] > tmp:\n                tmp = arr[i]\n                max_idx = i\n        result.append(tmp)\n        idx += 1\n        arr[max_idx] = -1000\n    result.sort(reverse=True)\n    return result\n\narr = [-3, -4, 5]\nk = 3", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def max_without_last(arr, k):\n        return arr[:k]\n\n    def max_with_last(arr, k):\n        return max(arr[:k-1], arr[-1])\n\n    def max_with_last_last(arr, k):\n        return max(arr[:k-2], arr[k-1], arr[-1])\n\n    arr = sorted(arr)\n    k = k - 1\n    if k == 0:\n        return arr\n\n    if k == 1:\n        return [arr[0]]\n    if k == 2:\n        return arr\n    if k == len(arr):\n        return arr\n    if k > len(arr):\n        return max(max_without_last(arr, k), arr[-1])\n\n    return max(max_without_last(arr, k), max_with_last(arr, k), max_with_last_last(arr, k))", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return _maximum(arr, k, 0, len(arr))", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return _maximum(arr, k, k)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    result = []\n    heap = []\n    heap_size = len(arr) - k + 1\n    for index in range(heap_size):\n        heap.append(arr[index])\n    for index in range(k):\n        result.append(heap.pop())\n        \n    for i in range(heap_size):\n        max_value = heap[0]\n        for index in range(1, heap_size):\n            if heap[index] > max_value:\n                max_value = heap[index]\n        result.append(max_value)\n        heap.remove(max_value)\n        heap_size -= 1\n    return result\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def max_list(arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        if len(arr) == 0:\n            return []\n        elif len(arr) < k:\n            return arr[:k]\n        else:\n            temp_list = arr[:k]\n            temp_list.sort()\n            return temp_list\n\n    return max_list(arr, k)\n\n\narr = [-4, -3, -5, 2, 1]\nres = maximum(arr, 3)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if arr == []:\n        return []\n    if k == 0:\n        return arr\n    if k == 1:\n        return sorted(arr)[0]\n    return [sorted(arr)[i]] + maximum(arr[:i], k-1) + maximum(arr[i+1:], k-1)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    res = []\n    for i in range(k):\n        res.append(max(arr))\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def subproblems(i, left, arr):\n        \"\"\"\n        Return the maximum number in arr[:i+1]\n        :param left: length of subproblem left\n        :param arr: array of integers\n        :return: max number in arr[:i+1]\n        \"\"\"\n        if left == 0:\n            return arr[i]\n        else:\n            return max(subproblems(i + 1, left - 1, arr), arr[i])\n\n    def solutions(n):\n        \"\"\"\n        Return the list of the maximum k numbers\n        :param n: length of the array\n        :return: list of max k numbers\n        \"\"\"\n        if n == 0:\n            return []\n        return subproblems(n - 1, n, [0] + list(reversed(arr)))\n\n    return solutions(len(arr))</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    newlist=[]\n    def isMax(list, k):\n        if len(list)>k:\n            return list[:k]\n        else:\n            l=[]\n            for i in list:\n                if i>l[0]:\n                    l[0]=i\n                elif i==l[0]:\n                    l.append(i)\n            return l\n\n    maxes=isMax(arr,k)\n    for i in range(len(maxes)):\n        newlist.append(maxes[i])\n    print(newlist)\n\narr=[-3, -4, 5]\nk=3\nmaximum(arr, k)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    # for i in range(len(arr)):\n    #     arr[i] = arr[i]*-1\n    # arr.sort()\n    if len(arr) <= k:\n        return arr\n    res = []\n    for i in range(k):\n        if arr[i]!= 0:\n            res.append(arr[i])\n            del arr[i]\n    if len(arr) > 0:\n        res.append(arr[0])\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if k == 0:\n        return [arr[0]]\n    if k > len(arr):\n        return []\n    # In this case, we have to make the value in the array count\n    # max([-1,-2,-3,-4,-5], 2): [-4, -3], [-4, -3, -5]\n    # max([-1,-2,-3,-4,-5], 1): [-4, -3], [-4], [-5]\n    # max([-1,-2,-3,-4,-5], 0): [-1, -2, -3, -4, -5]\n    result = []\n    for i in range(len(arr)-k+1):\n        s = sorted(arr[i:i+k])\n        result = []\n        for j in s:\n            if j not in result:\n                result.append(j)\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = list(arr)\n    sorted_arr = arr[:]\n    while len(sorted_arr) > k:\n        sorted_arr.pop()\n\n    sorted_arr.sort()\n    return sorted_arr\n\n\narr = [-2, -3, 1, -2, 4]\nk = 1", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return _maximum_helper(arr, k, 0, len(arr) - 1)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n    if k == 0:\n        return []\n    arr = sorted(arr)\n    l = list(arr[:k])\n    r = list(arr[k:])\n    l.extend(r)\n    l.sort()\n    return l", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if not k > 0 or not k <= len(arr):\n        return []\n    max_heap = []\n    for i in range(k):\n        max_heap.append(arr[i])\n    heapq.heapify(max_heap)\n    for i in range(k, len(arr)):\n        if max_heap[0] > arr[i]:\n            max_heap[0] = arr[i]\n            heapq.heapreplace(max_heap, i)\n    return [max_heap[0]] + [max_heap.pop() for _ in range(k - 1)]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n\n    index = 0\n    result = []\n    while index < k:\n        if index == k - 1:\n            result.append(arr[index])\n        else:\n            if arr[index] > arr[index + 1]:\n                result.append(arr[index])\n                index += 1\n            elif arr[index] == arr[index + 1]:\n                result.append(arr[index])\n                index += 1\n                result.append(arr[index])\n                index += 1\n            else:\n                pass\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Only the 0th element of each row is different, rest are 0\n    def maxRow(a):\n        return a[1:]\n\n    # Only the 0th column of each row is different, rest are 0\n    def maxCol(a):\n        return map(lambda x: a[0], zip(*a))\n\n    # Find the kth maximum element from all rows and columns\n    def sortAndTake(rows, cols):\n        rows = sorted(map(maxRow, rows))\n        cols = sorted(map(maxCol, cols))\n        return [max(x, y) for x, y in zip(rows, cols)]\n\n    # Find all the possible kth maximum element\n    rows, cols = [], []\n    for i in xrange(1, len(arr)+1):\n        rows.append(arr[i-1:i+1])\n        cols.append(arr[:i-1] + [arr[i]-10000]*(i-1))\n\n    return sortAndTake(rows, cols)\n\n\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    assert 0 <= k <= len(arr), 'k is out of range'\n    def _helper(nums, i, k):\n        l = []\n        if i < len(nums):\n            for j in range(i, i+k):\n                l.append(nums[j])\n        if i == len(nums)-1:\n            l.append(nums[i])\n        return l\n    return sorted(_helper(arr, 0, k), key=lambda x: -x, reverse=True)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k < 0 or k > len(arr):\n        return []\n    result = arr[:k]\n    for i in range(len(arr), k):\n        tmp = arr[i]\n        if tmp > result[-1] and tmp > 0:\n            result.append(tmp)\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < k:\n        return []\n    nums = sorted(arr)\n    res = []\n    curr = nums[0]\n    for i in range(k):\n        if curr < nums[i]:\n            res.append(curr)\n            curr = nums[i]\n    res.append(curr)\n    return res", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if not arr:\n        return []\n    n = len(arr)\n    if n == 0:\n        return []\n    maxes = []\n    if k <= n:\n        maxes = [arr[0]] * k\n        for i in range(1, n + 1):\n            maxes[i] = max(maxes[i - 1], arr[i])\n        maxes = maxes[:k]\n    else:\n        maxes = arr[:k]\n    return maxes", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def _helper(arr, k, result):\n        if k <= 0:\n            return\n        if k <= len(arr):\n            result.append(arr[0])\n            _helper(arr[1:], k-1, result)\n        else:\n            result = result[:-1]\n            _helper(arr[1:], k-1, result)\n    result = []\n    _helper(arr, k, result)\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    temp = []\n    sorted_arr = sorted(arr)\n    n = len(sorted_arr)\n    k = min(n, k)\n\n    for i in range(k):\n        temp.append(sorted_arr[i])\n    return temp", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    if k > len(arr):\n        return list(arr)\n    if k == 1:\n        return list(arr)[0]\n\n    maxs = [None] * k\n    for i in range(len(arr)):\n        if i + 1 > k:\n            break\n        maxs[i] = arr[i]\n        maxs[i] += max(arr[i + 1: i + k + 1])\n\n    return maxs", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    _ = range(len(arr))\n    maxarr = [-1] * k\n    for i in _:\n        maxarr[i] = arr[i]\n        for j in _:\n            if j >= i:\n                if arr[j] > maxarr[i]:\n                    maxarr[i] = arr[j]\n    result = []\n    for i in _:\n        if maxarr[i]!= -1:\n            result.append(maxarr[i])\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return []\n\n    ret = []\n    low = 0\n    high = len(arr) - 1\n    while high >= low:\n        mid = (high + low) // 2\n        if arr[mid] > arr[high]:\n            high = mid - 1\n        elif arr[mid] < arr[low]:\n            low = mid + 1\n        else:\n            high = mid - 1\n            low = mid + 1\n    ret.append(arr[low])\n    low = low + 1\n    ret += maximum(arr, k - 1) if low < len(arr) else []\n    return ret[-k:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return None\n    arr.sort()\n    return arr[:k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) > k:\n        return []\n    result = []\n    for i in range(len(arr)):\n        if i == k - 1:\n            break\n        if arr[i] > arr[i + 1]:\n            result.append(arr[i])\n        else:\n            result.append(arr[i + 1])\n    return result", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = list(map(int, input().split()))\n    k = int(input())\n\n    def find_max(arr):\n        # find the maximum value in arr\n        max = arr[0]\n        for i in range(1, len(arr)):\n            if max < arr[i]:\n                max = arr[i]\n        return max\n\n    l = list()\n    k_max = 0\n    for i in range(len(arr)):\n        if k - k_max < 0:\n            l.append(find_max(arr[i:k]))\n            k_max += 1\n            break\n        if arr[i] == find_max(arr[i:k]):\n            l.append(arr[i])\n            k_max += 1\n        elif k - k_max > 0:\n            l.append(find_max(arr[i:k]))\n            k_max += 1\n            break\n    return l", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # simple brute force method\n    if k == 1:\n        return [max(arr)]\n\n    # a collection of lists for the output\n    out = []\n\n    # we can do k = 2 first\n    # we have to remove the last element first\n    # and then append to the new list of output\n    if k == 2:\n        out.append(max(arr[:-1]))\n\n        # we then have to remove the first element and add it to the new list\n        out.append(arr[-1])\n\n        return out\n\n    # we can do k = 3 first\n    # we have to remove the last 2 elements first\n    # and then append to the new list of output\n    if k == 3:\n        out.append(max(arr[:-2]))\n\n        # we then have to remove the first 2 elements and add them to the new list\n        out.append(arr[-2:])\n\n        return out\n\n    # then we need to consider k = 4\n    # we have to remove the last 3 elements first\n    # and then append to the new list of output\n    if k == 4:\n        out.append(max(arr[:-3]))\n\n        # we then have to remove the first 3 elements and add them to the new list\n        out.append(arr[-3:])", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    assert len(arr) > 0\n    assert k > 0\n    result = []\n\n    # Number of maximum elements to be kept.\n    n = min(k, len(arr))\n\n    # Traverse the array and find the elements to be kept in result.\n    for i in range(len(arr)):\n        # Keep the element if it is not the last element to be kept.\n        if i < n:\n            result.append(arr[i])\n        else:\n            # if it is the last element to be kept, consider the next item as well.\n            result.append(arr[i])\n\n    # Sort the elements.\n    result.sort()\n\n    return result</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    ret = []\n    temp = arr[0]\n    if len(arr) > 1:\n        for i in arr[1:]:\n            if temp < i:\n                temp = i\n                ret.append(temp)\n    while len(ret) < k:\n        ret.append(temp)\n        temp = arr[0]\n        for i in arr[1:]:\n            if temp < i:\n                temp = i\n                ret.append(temp)\n    return sorted(ret)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    l = []\n    for i in arr:\n        if i < 0:\n            l.append(-1)\n        else:\n            l.append(i)\n\n    if len(l) <= k:\n        return l\n    else:\n        for i in range(len(l)):\n            l[i] = max(l[i:i+k])\n        return l", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    if k >= len(arr):\n        return arr[:k]\n    left = arr[:k]\n    right = arr[-k:]\n    right.reverse()\n    return merge(left, right)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    def inner_max(arr, k):\n        if len(arr) <= k:\n            return arr\n        return arr[:k-1] + arr[k-1][:-1]\n\n    return [inner_max(arr, n) for n in range(k)]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k == 1:\n        return [max(arr)]\n    if k <= 0:\n        return []\n    elif k == 2:\n        return [max(arr), max(arr)]\n    else:\n        mid = len(arr)//2\n        left = maximum(arr[:mid], k-1)\n        right = maximum(arr[mid:], k-1)\n        return left + [max(arr[left[i]:right[i]]) for i in range(len(left))]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    def _helper(arr, k, left, right):\n        left -= 1\n        right += 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] >= arr[right]:\n                left = mid + 1\n            else:\n                right = mid\n\n        return [arr[left]] + _helper(arr, k - len(arr[left]), left, right) if left < k - 1 else arr[left:]\n\n    return [arr[i] for i in range(len(arr)) if i < k] + _helper(arr, k, 0, len(arr))", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < k:\n        return []\n\n    sorted(arr, reverse=True)\n    sorted(arr, reverse=True)\n    tmp = []\n    for num in arr:\n        tmp.append(num)\n        if len(tmp) == k:\n            break\n    return tmp[-k:]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    l = len(arr)\n    if l == 0:\n        return []\n\n    q, r = divmod(k, 2)\n    if q == 0:\n        return sorted(arr)\n    if r == 0:\n        return arr[::2]\n    return [arr[i] for i in range(0, q, 2)] + [arr[i] for i in range(1, r, 2)]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # set up a queue to keep track of the k numbers to return\n    k_numbers = deque()\n\n    # make sure the input is valid\n    if len(arr) < k:\n        return []\n    for num in arr:\n        # if the k numbers to return are full, pop off the last one\n        if len(k_numbers) == k:\n            k_numbers.popleft()\n\n        # push the current number on the queue\n        k_numbers.append(num)\n\n    # sort the k numbers on the queue and return them\n    return sorted(k_numbers)\n</s>", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) <= k:\n        return arr\n    k = min(k, len(arr))\n    left = right = 0\n    ret = []\n    while left < len(arr) and right < k:\n        if arr[left] > arr[right]:\n            right += 1\n        else:\n            ret.append(arr[left])\n            left += 1\n    for i in xrange(left, right):\n        ret.append(arr[i])\n    return ret", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    result = []\n    cnt = 0\n    if not k <= len(arr):\n        return result\n    for i in range(0, len(arr)):\n        if arr[i] >= 0:\n            cnt += 1\n            if cnt == k:\n                result.append(arr[i])\n                cnt = 0\n            else:\n                result.append(arr[i])\n    return sorted(result)", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if not arr or not k:\n        return []\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    arr = sorted(arr)\n    return [arr[-i] for i in d.values() if i <= k]", "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    temp = []\n    res = []\n    # dp[i] = max(dp[i], arr[i])\n    dp = [0] * len(arr)\n    for i in range(len(arr)):\n        dp[i] = arr[i]\n    # dp[i] = arr[i] if i < k else max(arr[i], dp[i - k + 1])\n    for i in range(len(arr) - k + 1, 0, -1):\n        if dp[i] > dp[i - k + 1]:\n            dp[i] = dp[i - k + 1]\n    # dp[len(arr) - k + 1] = 0\n    for i in range(len(arr) - k + 1, 0, -1):\n        if dp[i] > temp[-1]:\n            temp.append(dp[i])\n        else:\n            temp.append(temp[-1])\n    res = sorted(temp)\n    return res"]]