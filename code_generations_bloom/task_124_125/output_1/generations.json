[["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[3] < 1 or date[3] > 12:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 12:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[2] == 2 and date[5] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date) == 0:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[0] == 2 and date[1] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[0] == 2 and date[1] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 29:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 12:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= \"-\" or date[7]!= \"-\" or date[10]!= \"-\":\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 31:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[0] == 2 and date[2] < 1 or date[2] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 29:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if int(date[2]) < 1 or int(date[2]) > 12:\n        return False\n    if int(date[1]) < 1 or int(date[1]) > 31:\n        return False\n    if int(date[0]) < 1 or int(date[0]) > 12:\n        return False\n    if int(date[0]) == 2 and int(date[1]) > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[0] == 2 and date[1] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('.')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('.')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('.')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('.')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('.')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-':\n        return False\n    if date[7]!= '-':\n        return False\n    if date[10]!= '-':\n        return False\n    if date[2]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[0] == 2 and date[1] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[0] == 2 and date[1] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[0] == 2 and date[1] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= \"-\" or date[7]!= \"-\":\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n    if int(date[2:4]) < 1 or int(date[2:4]) > 12:\n        return False\n    if int(date[4:6]) < 1 or int(date[4:6]) > 12:\n        return False\n    if int(date[6:8]) < 1 or int(date[6:8]) > 31:\n        return False\n    if int(date[8:10]) < 1 or int(date[8:10]) > 30:\n        return False\n    if int(date[10:12]) < 1 or int(date[10:12]) > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 8:\n        if date[4] == '-' and date[7] == '-':\n            if int(date[:2]) > 12 or int(date[:2]) < 1:\n                return False\n            if int(date[2:4]) > 12 or int(date[2:4]) < 1:\n                return False\n            if int(date[4:6]) > 31 or int(date[4:6]) < 1:\n                return False\n            if int(date[6:8]) > 30 or int(date[6:8]) < 1:\n                return False\n            if int(date[8:10]) > 29 or int(date[8:10]) < 1:\n                return False\n            return True\n    return False", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 8:\n        if date[4] == '-' and date[7] == '-':\n            if int(date[:2]) > 12 or int(date[:2]) < 1:\n                return False\n            if int(date[2:4]) > 12 or int(date[2:4]) < 1:\n                return False\n            if int(date[4:6]) > 31 or int(date[4:6]) < 1:\n                return False\n            if int(date[6:8]) > 30 or int(date[6:8]) < 1:\n                return False\n            if int(date[8:12]) > 29 or int(date[8:12]) < 1:\n                return False\n            return True\n        else:\n            return False\n    else:\n        return False", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date) == 0:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[2]!= '-':\n        return False\n    if date[4]!= '-':\n        return False\n    if date[6]!= '-':\n        return False\n    if date[8]!= '-':\n        return False\n    if date[10]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[3] < 1 or date[3] > 12:\n        return False\n    if date[5] < 1 or date[5] > 12:\n        return False\n    if date[6] < 1 or date[6] > 31:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 29:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-':\n        return False\n    if date[7]!= '-':\n        return False\n    if date[10]!= '-':\n        return False\n    if date[2]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 31:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 31:\n        return False\n    if date[7] < 1 or date[7] > 30:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[10] < 1 or date[10] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if int(date[2]) < 1 or int(date[2]) > 12:\n        return False\n    if int(date[1]) < 1 or int(date[1]) > 12:\n        return False\n    if int(date[0]) < 1 or int(date[0]) > 31:\n        return False\n    if int(date[1]) == 2 and int(date[0]) > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 8:\n        if date[4] == '-' and date[7] == '-':\n            if date[3].isdigit() and date[5].isdigit() and date[6].isdigit():\n                if int(date[3]) <= 12 and int(date[5]) <= 31:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date) == 0:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 12:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 1:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    if len(date)!= 10:\n        return False\n    if date[2]!= \"-\":\n        return False\n    if date[4]!= \"-\":\n        return False\n    if date[6]!= \"-\":\n        return False\n    if date[8]!= \"-\":\n        return False\n    if date[10]!= \"-\":\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[0] == 2 and date[1] == 29:\n        return False\n    if date[0] == 2 and date[1] == 30:\n        return False\n    if date[0] == 2 and date[1] == 31:\n        return False\n    if date[0] == 2 and date[1] == 1:\n        return False\n    if date[0] == 2 and date[1] == 3:\n        return False\n    if date[0] == 2 and date[1] == 5:\n        return False\n    if date[0] == 2 and date[1] == 7:\n        return False\n    if date[0] == 2 and date[1] == 8:\n        return False\n    if date[0] == 2 and date[1] == 10:\n        return False\n    if date[0] == 2 and date[1] == 12:\n        return False\n    if date[0] == 2 and date[1] == 4:\n        return False\n    if date[0] == 2 and", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[3] < 1 or date[3] > 12:\n        return False\n    if date[5] < 1 or date[5] > 12:\n        return False\n    if date[6] < 1 or date[6] > 31:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 32:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 8:\n        if date[4] == '-' and date[7] == '-':\n            if int(date[0:2]) > 12 or int(date[0:2]) < 1:\n                return False\n            if int(date[2:4]) > 12 or int(date[2:4]) < 1:\n                return False\n            if int(date[4:6]) > 31 or int(date[4:6]) < 1:\n                return False\n            if int(date[6:8]) > 30 or int(date[6:8]) < 1:\n                return False\n            if int(date[8:9]) > 29 or int(date[8:9]) < 1:\n                return False\n            return True\n        else:\n            return False\n    else:\n        return False", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[0] == 2 and date[1] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[0] == 2 and date[1] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 29:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 12:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('.')!= 1:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[3] < 1 or date[3] > 12:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 1:\n        return False\n    if date.count('-')!= 1:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[4] == 2 and date[3] == 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-':\n        return False\n    if date[7]!= '-':\n        return False\n    if date[10]!= '-':\n        return False\n    if date[2]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date) == 0:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('.')!= 1:\n        return False\n    if date.count(' ')!= 1:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('.')!= 1:\n        return False\n    if date.count(' ')!= 1:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('.')!= 1:\n        return False\n    if date.count(' ')!= 1:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('.')!= 1:\n        return False\n    if date.count(' ')!= 1:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 1:\n        return False\n    if date.count('-')!= 1:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[0] == 2 and date[1] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    if len(date)!= 10:\n        return False\n    if date[2]!= \"-\":\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 31:\n        return False\n    if date[0] == 2 and date[2] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n    if int(date[2:4]) < 1 or int(date[2:4]) > 12:\n        return False\n    if int(date[4:6]) < 1 or int(date[4:6]) > 31:\n        return False\n    if int(date[6:8]) < 1 or int(date[6:8]) > 31:\n        return False\n    if int(date[8:10]) < 1 or int(date[8:10]) > 12:\n        return False\n    if int(date[10:12]) < 1 or int(date[10:12]) > 12:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 8:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if int(date[2]) < 1 or int(date[2]) > 12:\n        return False\n    if int(date[1]) < 1 or int(date[1]) > 31:\n        return False\n    if int(date[0]) < 1 or int(date[0]) > 31:\n        return False\n    if int(date[1]) == 2 and int(date[0]) > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date)!= 12:\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date) == 12:\n        if date[0] < 1 or date[0] > 12:\n            return False\n        if date[1] < 1 or date[1] > 31:\n            return False\n        if date[2] < 1 or date[2] > 12:\n            return False\n        if date[2] == 2 and date[1] < 1 or date[1] > 29:\n            return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date)!= 12:\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date) == 12:\n        if date[2] < 1 or date[2] > 12:\n            return False\n        if date[1] < 1 or date[1] > 31:\n            return False\n        if date[0] < 1 or date[0] > 31:\n            return False\n    if date[4]!= '-' and date[7]!= '-':\n        if date[2] < 1 or date[2] > 12:\n            return False\n        if date[1] < 1 or date[1] > 30:\n            return False\n        if date[0] < 1 or date[0] > 30:\n            return False\n    if date[4]!= '-' and date[7] == '-':\n        if date[2] < 1 or date[2] > 12:\n            return False\n        if date[1] < 1 or date[1] > 29:\n            return False\n        if date[0] < 1 or date[0] > 29:\n            return False\n    if date[4] == '-' and date[7]!= '-':\n        if date[2] < 1 or date[2]", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 31:\n        return False\n    if date[0] == 2 and date[2] < 1 or date[2] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 1:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[3] < 1 or date[3] > 12:\n        return False\n    if date[5] < 1 or date[5] > 12:\n        return False\n    if date[6] < 1 or date[6] > 31:\n        return False\n    if date[6] == 2 and date[5] == 1:\n        if date[3]!= 29:\n            return False\n    if date[6] == 2 and date[5]!= 1:\n        if date[3]!= 30:\n            return False\n    if date[6] == 2 and date[5] == 3:\n        if date[3]!= 31:\n            return False\n    if date[6] == 2 and date[5] == 5:\n        if date[3]!= 31:\n            return False\n    if date[6] == 2 and date[5] == 7:\n        if date[3]!= 31:\n            return False\n    if date[6] == 2 and date[5] == 8:\n        if date[3]!= 31:\n            return False\n    if date[6] == 2 and date[5] == 10:\n        if date[3]!= 31:\n            return False\n    if date[6] == 2 and date[5] == 12:\n        if date[3]!= 31:\n            return False", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[3] < 1 or date[3] > 12:\n        return False\n    if date[5] < 1 or date[5] > 12:\n        return False\n    if date[6] < 1 or date[6] > 31:\n        return False\n    if date[6] == 2 and date[5] == 1:\n        if date[8] < 1 or date[8] > 29:\n            return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date) == 0:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[2]!= '-':\n        return False\n    if date[4]!= '-':\n        return False\n    if date[6]!= '-':\n        return False\n    if date[8]!= '-':\n        return False\n    if date[10]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 8:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n    if int(date[2:4]) < 1 or int(date[2:4]) > 12:\n        return False\n    if int(date[4:6]) < 1 or int(date[4:6]) > 31:\n        return False\n    if int(date[6:8]) < 1 or int(date[6:8]) > 30:\n        return False\n    if int(date[8:10]) < 1 or int(date[8:10]) > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= \"-\" or date[7]!= \"-\":\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    if date[1] == 2 and date[0] == 29:\n        return False\n    if date[1] == 2 and date[0] == 30:\n        return False\n    if date[1] == 2 and date[0] == 31:\n        return False\n    if date[1] == 2 and date[0] == 1:\n        return False\n    if date[1] == 2 and date[0] == 3:\n        return False\n    if date[1] == 2 and date[0] == 5:\n        return False\n    if date[1] == 2 and date[0] == 7:\n        return False\n    if date[1] == 2 and date[0] == 8:\n        return False\n    if date[1] == 2 and date[0] == 10:\n        return False\n    if date[1] == 2 and date[0] == 12:\n        return False\n    if date[1] == 2 and date[0] == 13:\n        return", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 29:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 12:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 1:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 1:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 1:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 12:\n        return False\n    if date[11] < 1 or date[11] > 31:\n        return False\n    if date[12] < 1 or date[12] > 31:\n        return", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 31:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[0] == 2 and date[2]!= 29:\n        return False\n    if date[0] == 2 and date[2] == 29:\n        return True\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[0] == 2 and date[1] < 1 or date[1] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 12:\n        return False\n    if date[11] < 1 or date[11] > 31:\n        return False\n    if date[12] < 1 or date[12] > 31:\n        return", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= \"-\" or date[7]!= \"-\":\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 8:\n        if date[4] == '-' and date[7] == '-':\n            if int(date[:2]) <= 12 and int(date[2:4]) <= 31 and int(date[4:6]) <= 12:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 8:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[0] == 2 and date[1] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n    if int(date[2:4]) < 1 or int(date[2:4]) > 12:\n        return False\n    if int(date[4:6]) < 1 or int(date[4:6]) > 31:\n        return False\n    if int(date[6:8]) < 1 or int(date[6:8]) > 30:\n        return False\n    if int(date[8:10]) < 1 or int(date[8:10]) > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date)!= 8:\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date)!= 7:\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date)!= 6:\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date)!= 5:\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date)!= 4:\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date)!= 3:\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date)!= 2:\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date)!= 1:\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date)!= 0:\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date)!= 9:\n        return False\n    if date[4] == '-' and date[7] ==", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[0] == 2 and date[1] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[2]!= '-':\n        return False\n    if date[4]!= '-':\n        return False\n    if date[6]!= '-':\n        return False\n    if date[8]!= '-':\n        return False\n    if date[10]!= '-':\n        return False\n    if date[0] > 12 or date[0] < 1:\n        return False\n    if date[1] > 31 or date[1] < 1:\n        return False\n    if date[2] > 31 or date[2] < 1:\n        return False\n    if date[3] > 31 or date[3] < 1:\n        return False\n    if date[4] > 30 or date[4] < 1:\n        return False\n    if date[5] > 31 or date[5] < 1:\n        return False\n    if date[6] > 30 or date[6] < 1:\n        return False\n    if date[7] > 31 or date[7] < 1:\n        return False\n    if date[8] > 31 or date[8] < 1:\n        return False\n    if date[9] > 31 or date[9] < 1:\n        return False\n    if date[10] > 31 or date[10] < 1:\n        return False\n    if date[11] > 30 or date[11] < 1:\n        return False\n    if", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 1:\n        return False\n    if date.count('-')!= 1:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if date.count('-')!= 0:\n        return False\n    if date.count('/')!= 0:\n        return False\n    if", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 12:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-':\n        return False\n    if date[7]!= '-':\n        return False\n    if date[10]!= '-':\n        return False\n    if date[2]!= '-':\n        return False\n    if date[0]!= '-':\n        return False\n    if date[1]!= '-':\n        return False\n    if date[3]!= '-':\n        return False\n    if date[5]!= '-':\n        return False\n    if date[6]!= '-':\n        return False\n    if date[8]!= '-':\n        return False\n    if date[9]!= '-':\n        return False\n    if date[0] == '-':\n        return False\n    if date[1] == '-':\n        return False\n    if date[2] == '-':\n        return False\n    if date[3] == '-':\n        return False\n    if date[4] == '-':\n        return False\n    if date[5] == '-':\n        return False\n    if date[6] == '-':\n        return False\n    if date[7] == '-':\n        return False\n    if date[8] == '-':\n        return False\n    if date[9] == '-':\n        return False\n    if date[0]", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[2] == 2 and date[1] > 29:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    if len(date) < 8:\n        return False\n    if len(date) > 8:\n        return False\n    if date[4:6]!= \"-\" or date[6:8]!= \"-\":\n        return False\n    if date[2:4]!= \"-\" or date[4:6]!= \"-\" or date[6:8]!= \"-\":\n        return False\n    if date[2:4]!= \"-\" or date[4:6]!= \"-\" or date[6:8]!= \"-\" or date[8:10]!= \"-\":\n        return False\n    if date[2:4]!= \"-\" or date[4:6]!= \"-\" or date[6:8]!= \"-\" or date[8:12]!= \"-\":\n        return False\n    if date[2:4]!= \"-\" or date[4:6]!= \"-\" or date[6:8]!= \"-\" or date[8:10]!= \"-\" or date[10:12]!= \"-\":\n        return False\n    if date[2:4]!= \"-\" or date[4:6]!= \"-\" or date[6:8]!= \"-\" or date[8:10]!= \"-\" or date[10:12]!= \"-\" or date[12:14]!= \"-\":\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 31:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[2] == 2 and date[3] < 1 or date[3] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('.')!= 1:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('-')!= 3:\n        return False", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) > 10:\n        return False\n    if len(date) < 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count(", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date) == 0:\n        return False\n    if not re.match('^\\d{1,2}-\\d{1,2}-\\d{4}$', date):\n        return False\n    if not re.match('^\\d{1,2}$', date):\n        return False\n    if not re.match('^\\d{1,2}$', date):\n        return False\n    if not re.match('^\\d{4}$', date):\n        return False\n    if not re.match('^\\d{1,2}$', date):\n        return False\n    if not re.match('^\\d{1,2}$', date):\n        return False\n    if not re.match('^\\d{4}$', date):\n        return False\n    if not re.match('^\\d{1,2}$', date):\n        return False\n    if not re.match('^\\d{1,2}$', date):\n        return False\n    if not re.match('^\\d{4}$', date):\n        return False\n    if not re.match('^\\d{1,2}$', date)", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= \"-\" or date[7]!= \"-\":\n        return False\n    if date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    if date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    if date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    if date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    if date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    if date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    if date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    if date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    if date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    if date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    if date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    if date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    if date[2]!= \"-\" or date[5]!= \"-\":", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 12:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-':\n        return False\n    if date[7]!= '-':\n        return False\n    if date[10]!= '-':\n        return False\n    if date[2]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[2] == 2 and date[1] < 1 or date[1] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[3] < 1 or date[3] > 12:\n        return False\n    if date[5] < 1 or date[5] > 12:\n        return False\n    if date[6] < 1 or date[6] > 31:\n        return False\n    if date[6] == 2 and date[5] == 1:\n        if date[8] < 1 or date[8] > 29:\n            return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 29:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 12:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[0] == 2 and date[1] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 12:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date) == 1:\n        return False\n    if len(date) == 2:\n        return False\n    if len(date) == 3:\n        return False\n    if len(date) == 4:\n        return False\n    if len(date) == 5:\n        return False\n    if len(date) == 6:\n        return False\n    if len(date) == 7:\n        return False\n    if len(date) == 8:\n        return False\n    if len(date) == 9:\n        return False\n    if len(date) == 10:\n        return False\n    if len(date) == 11:\n        return False\n    if len(date) == 12:\n        return False\n    if len(date) == 13:\n        return False\n    if len(date) == 14:\n        return False\n    if len(date) == 15:\n        return False\n    if len(date) == 16:\n        return False\n    if len(date) == 17:\n        return False\n    if len(date) == 18:\n        return False\n    if len(date) == 19:\n        return False\n    if len(date) == 20:\n        return False\n    if len(date) == 21:\n        return False\n    if len(date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= \"-\" or date[7]!= \"-\" or date[10]!= \"-\":\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        if date[1] == 2 and date[2] == 1:\n            if date[0] < 1 or date[0] > 29:\n                return False\n        else:\n            return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if int(date[:2]) < 1 or int(date[:2]) > 12:\n        return False\n    if int(date[2:4]) < 1 or int(date[2:4]) > 12:\n        return False\n    if int(date[4:6]) < 1 or int(date[4:6]) > 31:\n        return False\n    if int(date[6:8]) < 1 or int(date[6:8]) > 31:\n        return False\n    if int(date[8:10]) < 1 or int(date[8:10]) > 12:\n        return False\n    if int(date[10:12]) < 1 or int(date[10:12]) > 12:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-':\n        return False\n    if date[7]!= '-':\n        return False\n    if date[10]!= '-':\n        return False\n    if date[2]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[2]!= '-':\n        return False\n    if date[4]!= '-':\n        return False\n    if date[6]!= '-':\n        return False\n    if date[8]!= '-':\n        return False\n    if date[10]!= '-':\n        return False\n    if date[2]!= date[4] or date[2]!= date[6] or date[2]!= date[8] or date[2]!= date[10]:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[1] == 2 and date[0] == 1:\n        if date[1] < 1 or date[1] > 29:\n            return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-':\n        return False\n    if date[7]!= '-':\n        return False\n    if date[10]!= '-':\n        return False\n    if date[2]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[11] < 1 or date[11] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[3] < 1 or date[3] > 12:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 12:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[2] == 2 and date[5] > 29:\n        return False\n    if date[2] == 2 and date[5] == 29 and date[0]!= '02':\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[3] < 1 or date[3] > 31:\n        return False\n    if date[4] < 1 or date[4] > 30:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 30:\n        return False\n    if date[7] < 1 or date[7] > 31:\n        return False\n    if date[8] < 1 or date[8] > 30:\n        return False\n    if date[9] < 1 or date[9] > 31:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31:", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date)!= 8:\n        return False\n    if date[4] == '-' and date[7] == '-' and len(date) == 8:\n        if date[3]!= '-' or date[6]!= '-':\n            return False\n        if date[3] == '-' and date[6] == '-' and len(date)!= 6:\n            return False\n        if date[3] == '-' and date[6] == '-' and len(date) == 6:\n            if date[2]!= '-':\n                return False\n    if date[4] == '-' and date[7] == '-' and len(date) == 10:\n        if date[2]!= '-' or date[5]!= '-':\n            return False\n        if date[2] == '-' and date[5] == '-' and len(date)!= 5:\n            return False\n        if date[2] == '-' and date[5] == '-' and len(date) == 5:\n            if date[1]!= '-':\n                return False\n    if date[4] == '-' and date[7] == '-' and len(date) == 12:\n        if date[1]!= '-' or date[5]!", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[1] == 2 and date[0] < 1 or date[0] > 29:\n        return False\n    return True", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    if date[4]!= '-' or date[7]!= '-':\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[0] < 1 or date[0] > 31:\n        return False\n    if date[0] == 2 and date[1] > 29:\n        return False\n    if date[0] == 2 and date[1] == 29:\n        return True\n    if date[0] == 2 and date[1] == 28:\n        return False\n    if date[0] == 2 and date[1] == 30:\n        return False\n    if date[0] == 2 and date[1] == 31:\n        return False\n    if date[0] == 2 and date[1] == 1:\n        return False\n    if date[0] == 2 and date[1] == 3:\n        return False\n    if date[0] == 2 and date[1] == 5:\n        return False\n    if date[0] == 2 and date[1] == 7:\n        return False\n    if date[0] == 2 and date[1] == 8:\n        return False\n    if date[0] == 2 and date[1] == 10:\n        return False\n    if date[0] ==", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count(\"-\")!= 3:\n        return False\n    if date.count(\"/\")!= 2:\n        return False\n    if date.count(\".\")!= 2:\n        return False\n    if date.count(\" \")!= 2:\n        return False\n    if date.count(\",\")!= 2:\n        return False\n    if date.count(\":\")!= 2:\n        return False\n    if date.count(\"+\")!= 2:\n        return False\n    if date.count(\"-\")!= 2:\n        return False\n    if date.count(\"*\")!= 2:\n        return False\n    if date.count(\"(\")!= 2:\n        return False\n    if date.count(\")\")!= 2:\n        return False\n    if date.count(\"!\")!= 2:\n        return False\n    if date.count(\"?\")!= 2:\n        return False\n    if date.count(\"@\")!= 2:\n        return False\n    if date.count(\"$\")!= 2:\n        return False\n    if date.count(\"%\")!= 2:\n        return False\n    if date.count(\"^\")!", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date", "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if date.count('-')!= 3:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if date.count('-')!= 2:\n        return False\n    if date.count('/')!= 2:\n        return False\n    if"]]