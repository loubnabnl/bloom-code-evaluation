[["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # write your code in python 3.x and run it in Python 3\n    def swap(lst, index1, index2):\n        val = lst[index1]\n        lst[index1] = lst[index2]\n        lst[index2] = val\n\n    if not lst or len(lst) == 0:\n        return 0\n    if len(lst) % 2 == 0:\n        # odd length\n        half = len(lst) / 2\n        odd = lst[half:]\n        even = lst[:half]\n        odd_sum = 0\n        for index, value in enumerate(odd):\n            if index % 2 == 0:\n                # even number\n                odd_sum += value\n        return odd_sum + sum(even)\n    # even length\n    half = len(lst) / 2\n    odd = lst[half:]\n    even = lst[:half]\n    odd_sum = 0\n    even_sum = 0\n    for index, value in enumerate(even):\n        if index % 2 == 0:\n            # even number\n            even_sum += value\n        else:\n            # odd number\n            odd_sum += value\n    return odd_sum + even_sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    l = len(lst)\n    result = 0\n    if l == 0:\n        return 0\n    if l == 1:\n        return lst[0]\n    if l % 2 == 0:\n        return 0\n    if lst[l - 1] % 2 == 0:\n        if lst[l - 2] % 2 == 0:\n            return lst[l - 1] + lst[l - 3]\n        else:\n            return lst[l - 1] + lst[l - 2]\n    else:\n        if lst[l - 2] % 2 == 0:\n            return lst[l - 1] + lst[l - 3]\n        else:\n            return lst[l - 1] + lst[l - 2]\n    return 0", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    def odd_pos(x):\n        return x%2!= 0\n    def even_pos(x):\n        return x%2 == 0\n    def odd_elem(x):\n        return x%2 == 1\n\n    l = list(map(odd_elem,lst))\n    l = list(map(odd_pos,lst))\n    l = list(filter(even_pos,l))\n    return sum(l)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    def is_even(num):\n        return num % 2 == 0\n\n    def is_odd(num):\n        return num % 2 == 1\n\n    def is_even_pos(num):\n        return num % 2 == 0 and num > 0\n\n    def is_odd_pos(num):\n        return num % 2 == 1 and num > 0\n\n    odd_pos = 0\n    even_pos = 0\n    for num in lst:\n        if is_even_pos(num):\n            even_pos += 1\n        elif is_odd_pos(num):\n            odd_pos += 1\n        elif is_even(num):\n            even_pos += 1\n        elif is_odd(num):\n            odd_pos += 1\n\n    return odd_pos * 2 - even_pos", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    even = [int(i) for i in lst if i % 2 == 0]\n    odd = [int(i) for i in lst if i % 2!= 0]\n    return sum(odd[::2])\n\nsolution([30, 13, 24, 321])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd = []\n    even = []\n    for x in lst:\n        if x % 2 == 1:\n            odd.append(x)\n        else:\n            even.append(x)\n    return sum(odd) + sum(even)\n\nlst = input(\"Your list: \")", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst: return 0\n    s = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            s += lst[i]\n    return s", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        if i % 2!= 0:\n            if lst[i] % 2 == 0:\n                count += lst[i]\n            else:\n                count += lst[i]\n\n    return count", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst:\n        return 0\n    odd = [item for item in lst if item % 2!= 0]\n    even = [item for item in lst if item % 2 == 0]\n    sum1 = sum(odd)\n    sum2 = sum(even)\n    return sum1 + sum2", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    def helper(lst, start, end):\n        if end - start == 1:\n            return lst[start]\n        if lst[start] % 2 == 0 and lst[start + 1] % 2 == 1:\n            return helper(lst, start + 1, end)\n        if lst[start] % 2 == 1 and lst[start + 1] % 2 == 0:\n            return helper(lst, start + 1, end)\n\n    return helper(lst, 0, len(lst) - 1)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for x in lst:\n        if (x%2 == 0):\n            sum += x\n        else:\n            return sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst:\n        return 0\n    odd_count = 0\n    even_count = 0\n    for num in lst:\n        if num % 2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n    return odd_count * even_count + sum(lst) - odd_count * odd_count", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    def helper(lst):\n        if len(lst) == 0:\n            return 0\n        else:\n            return lst[0] + helper(lst[1:])\n\n\n    return helper(lst)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    even_lst = []\n    for i in lst:\n        if i%2 == 0:\n            even_lst.append(i)\n    odd_lst = []\n    for i in lst:\n        if i%2!= 0:\n            odd_lst.append(i)\n    even_sum = 0\n    for i in even_lst:\n        even_sum += i\n    odd_sum = 0\n    for i in odd_lst:\n        odd_sum += i\n    return even_sum + odd_sum\n\nimport time\ntStart=time.time()\nst = raw_input()\narr = st.split(',')", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst:\n        return 0\n    else:\n        odd_positions = [pos for pos, i in enumerate(lst) if i % 2]\n        return sum(i for pos, i in odd_positions)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    def odd(n):\n        return n % 2!= 0\n\n    def sum_even_pos(lst, s):\n        for i, n in enumerate(lst):\n            if not odd(i):\n                s += n\n        return s\n\n    if not lst:\n        return 0\n\n    s = sum_even_pos(lst, 0)\n    return s", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    total = 0\n    for i in range(len(lst)-1):\n        if lst[i] % 2 == 0 and lst[i+1] % 2 == 1:\n            total += lst[i]\n    return total\n\n\nfrom typing import List", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    i, sum = 0, 0\n    while i < len(lst):\n        if i % 2 == 0 and i!= 0:\n            sum += lst[i]\n        i += 1\n    return sum if sum > 0 else 0", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(i for i in lst if i % 2 and i % 2 == 0)\n\nsoln = int(input())", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    def swap(x):\n        return int(x[1])\n\n    def odd_sum_in_even(lst):\n        if len(lst) < 2:\n            return 0\n        else:\n            return lst[0] + odd_sum_in_even(lst[1:])\n\n    return odd_sum_in_even(lst)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst:\n        return 0\n    start = 0\n    end = len(lst)\n    while start < end:\n        mid = (start + end) // 2\n        if lst[mid] % 2!= 0:\n            start = mid + 1\n        else:\n            end = mid\n    return sum(lst[start:end])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    n = len(lst)\n    result = 0\n    odd_pos = 0\n    odd = 0\n\n    for i in range(n):\n        if lst[i] % 2!= 0:\n            result += lst[i]\n            odd_pos += 1\n            if odd_pos % 2 == 0:\n                odd += 1\n    return result + odd", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if(lst[i] % 2 == 0):\n            sum += lst[i]\n    return sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst:\n        return 0\n    if len(lst)%2==1:\n        return sum(lst)\n    result = 0\n    for index in range(len(lst)-1):\n        if index % 2 == 1:\n            result += lst[index]\n    return result\n\n\nlst = [3, 3, 3, 3, 3]", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd = 0\n    even = 0\n    for num in lst:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return odd + even", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    def odd_sum_in_even(lst, s):\n        if len(lst) == 0:\n            return 0\n        if len(lst) == 1:\n            return lst[0] % 2 == 1 and lst[0] or 0\n        return odd_sum_in_even(lst[1:], s + lst[0] % 2)\n\n    return odd_sum_in_even(lst, 0)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    # print(len(lst))\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i % 2 == 0:\n            lst[i] -= 1\n    return sum(lst)\n\n\n\n\ntest_cases = [\n    [5, 8, 7, 1],\n    [3, 3, 3, 3, 3],\n    [30, 13, 24, 321],\n]\n\nfor case in test_cases:\n    assert solution(case) == sum(case)\n</s>", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # Write your code here\n    odd = 0\n    even = 0\n\n    for i in lst:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n\n    return odd + even\n\nsolution([1, 2, 3, 4, 5])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    n = len(lst)\n    i = 0\n    sum = 0\n    while i < n:\n        if i % 2 == 1:\n            sum += lst[i]\n        i += 1\n\n    return sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    result = 0\n    n = len(lst)\n    for i in range(n/2):\n        if lst[i]%2 == 0:\n            result += lst[i]\n    return result", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst:\n        return 0\n    sum = 0\n    index = 0\n    while index:\n        index += 1\n        if index % 2 == 0:\n            sum += lst[index]\n        else:\n            break\n    return sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst:\n        return 0\n    else:\n        def reverse(a):\n            if isinstance(a, int):\n                return a\n            else:\n                return len(a)*reverse(a[::-1])\n                \n        def odd_pos(lst):\n            if isinstance(lst, int):\n                return lst%2!=0\n            else:\n                return odd_pos(lst[::-1])+odd_pos(lst[::-1])\n                \n        if odd_pos(lst):\n            return sum(lst[::2])\n        else:\n            return sum(lst)/2\n    \n</s>", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    i = 0\n    if lst[i] % 2 == 0:\n        return lst[i]\n    while i < len(lst):\n        if lst[i] % 2 == 0:\n            lst[i] = lst[i] + lst[i-1]\n        else:\n            lst[i] = lst[i] + lst[i-1]\n        i = i + 1\n    return lst[-1]\n\nlst = input()", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    res = 0\n    for i in lst:\n        if i%2!= 0 and i/2%2:\n            res += i\n    return res", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # return sum(lst[x:x+2] for x in xrange(0, len(lst), 2) if lst[x] % 2 == 0)\n    return sum(lst[x] for x in xrange(0, len(lst), 2) if lst[x] % 2 == 0)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # write code here\n    odd_sum = 0\n    even_sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_sum = even_sum + i\n        elif i % 2!= 0:\n            odd_sum = odd_sum + i\n    return odd_sum + even_sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    result = 0\n    for i, num in enumerate(lst):\n        if num % 2 == 0 and i % 2 == 1:\n            result += num\n    return result", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    ans = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 1:\n            ans += lst[i]\n    return ans", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    n = len(lst)\n    odd = sum(x for x in lst if x % 2!= 0)\n    even = sum(x for x in lst if x % 2 == 0)\n    return odd + even * n // 2 if n % 2 == 0 else odd + even * n + lst[n // 2]", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    def helper(lst):\n        if len(lst) == 0:\n            return 0\n        if len(lst) == 1:\n            return lst[0]\n        return helper(lst[1:]) + lst[0]\n\n    return helper(lst)\n\n\nsolution([1,2,3,4,5])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum([i for i,n in enumerate(lst) if n%2==0 and i%2!=0])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odds_in_even = sum(odd for i, odd in enumerate(lst) if i % 2 == 0 and odd % 2!= 0)\n    return lst[::2][odds_in_even:] + lst[odds_in_even:][::2]", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    result = 0\n\n    for i in range(len(lst) - 1):\n        if i % 2 == 0:\n            if lst[i] % 2 == 1:\n                result += lst[i]\n\n    return result\n\n\ntest_cases = [\n    [5, 8, 7, 1],\n    [3, 3, 3, 3, 3],\n    [30, 13, 24, 321]\n]\n\nfor test in test_cases:\n    print(solution(test))", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst:\n        return 0\n\n    odd, even = 0, 0\n    odd = sum(lst[::2])\n    even = sum(lst[1::2])\n    return odd + even", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd_sum = sum(x for x in lst if x % 2!= 0)\n    even_sum = sum(x for x in lst if x % 2 == 0)\n    return even_sum - odd_sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # implementation using list comprehension\n    return sum([x for index, x in enumerate(lst) if index%2==0 and x%2!= 0])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    cnt = 0\n    ans = 0\n    for n in lst:\n        if n%2!= 0:\n            cnt += 1\n        if cnt % 2!= 0:\n            ans += n\n    return ans", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst) < 1:\n        return 0\n    odd_sum = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0:\n            odd_sum += num\n\n    return odd_sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    flag = 0\n    for i in range(len(lst) - 1):\n        if i % 2 == 0:\n            if lst[i] % 2!= 0:\n                sum += lst[i]\n        else:\n            flag = 1\n            if lst[i] % 2 == 1:\n                sum += lst[i]\n    return sum if flag == 1 else 0", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n\n    odd_list = [ i for i in lst if i % 2 == 1 ]\n    even_list = [ i for i in lst if i % 2 == 0 ]\n\n    sum_list = [ i for i in odd_list if i in even_list ]\n\n    return sum(sum_list)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum_list = 0\n    for i in lst:\n        sum_list = sum_list + i\n    sum_list = sum_list + lst[-1:]\n    return sum_list", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    res = 0\n    if len(lst) < 2:\n        return res\n    \n    odds_even = [ i for i in lst if not i % 2 ]\n    if len(odds_even)!= len(lst):\n        return res\n    \n    odds_odd = [ i for i in lst if i % 2 ]\n    \n    for oe in odds_even:\n        for oo in odds_odd:\n            res += oo\n            if oe > oo:\n                res -= oe\n    \n    return res", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    count = 0\n    new_lst = []\n    for i in lst:\n        if i % 2!= 0:\n            count += i\n        else:\n            new_lst.append(i)\n    return sum(new_lst)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    else:\n        odd = 0\n        even = 0\n        for elem in lst:\n            if elem % 2 == 1:\n                odd += elem\n            else:\n                even += elem\n\n        return odd if (even % 2 == 0) else 0", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    result = 0\n    for n in lst:\n        if n % 2 == 0:\n            if n/2 > lst[0]:\n                result += n/2\n            else:\n                result += n/2\n        else:\n            result += n\n    return result", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    oddLst = []\n    evenLst = []\n    for x in lst:\n        if x % 2 == 1:\n            oddLst.append(x)\n        else:\n            evenLst.append(x)\n    return oddLst[0] + oddLst[2] + oddLst[4] + oddLst[6]\n\n'''", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    even_lst = []\n    odd_lst = []\n    for i in lst:\n        if i % 2 == 0:\n            even_lst.append(i)\n        else:\n            odd_lst.append(i)\n    return odd_lst[0] + sum(even_lst) + sum(odd_lst[1:])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    def helper(lst):\n        result = 0\n        for i in range(len(lst) - 1, -1, -1):\n            if i % 2 == 0:\n                if lst[i] % 2 == 0:\n                    result += lst[i]\n            else:\n                if lst[i] % 2 == 1:\n                    result += lst[i]\n        return result\n\n    return helper(lst)\n\n\nlst = input()", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    for num in lst:\n        if num % 2 == 0:\n            lst.remove(num)\n    return sum(lst)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    even = [x for x in lst if x%2==0]\n    odd = [x for x in lst if x%2!=0]\n    return sum(odd[2:]+odd[:-2])+sum(even[2:]+even[:-2])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst or not len(lst):\n        return 0\n    \n    even, odd = [], []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    \n    return sum(odd) if len(even) % 2 == 0 else sum(even)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    res = 0\n    for i in lst:\n        if i % 2!= 0 and i!= 0:\n            res += i\n    return res\n\n\nimport timeit\n\n\nsetup = \"\"\"\nfrom __main__ import solution\n\"\"\"", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    ans = 0\n    for i in range(len(lst)):\n        if i%2==0:\n            if lst[i]%2==0:\n                ans = ans + lst[i]\n    return ans\n\nsolution([3,3,3,3,3])\nsolution([3,3,3,3,3,3])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd_lst = [item for item in lst if item % 2!= 0]\n    even_lst = [item for item in lst if item % 2 == 0]\n    return sum([odd_lst[int(item % len(odd_lst))] for item in even_lst])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd, even = [], []\n    for x in lst:\n        if x % 2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    return sum(x for x in odd if x in even)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    x=0\n    for i in lst:\n        if i%2==0 and i%4!=0:\n            x+=i\n    return x\n\n\n\"\"\"", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    i=0\n    n=0\n    for i in range(len(lst)):\n        if(lst[i]%2==0):\n            n+=lst[i]\n        else:\n            return n\n    return n", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd_elems = [elem for elem in lst if elem % 2!= 0]\n    even_positions = [pos for pos, elem in enumerate(lst) if elem % 2 == 0]\n    return sum(odd_elems[i] for i in even_positions)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    res = 0\n    for i in lst:\n        if i%2!= 0:\n            if i%2 == 1:\n                res += i\n        else:\n            if i%2 == 1:\n                res += i\n    return res", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # write your code here\n    n = len(lst)\n    result = 0\n    for i in range(n//2):\n        odd = lst[i]\n        even = lst[i+n]\n        if odd % 2 == 1:\n            result += odd\n        if even % 2 == 0:\n            result += even\n    return result", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    result = 0\n    for i in lst:\n        if i % 2 == 0:\n            result += i\n    return result", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in lst:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even + odd", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if (i & 1) and x % 2 == 1)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst)==0:\n        return 0\n    num = []\n    for x in lst:\n        if x % 2 == 0:\n            num.append(x)\n    num.sort()\n    odd = 0\n    for x in num:\n        odd += x\n        if x > num[-1]:\n            break\n    return odd", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd_pos=[]\n    for i in lst:\n        if i%2==0:\n            odd_pos.append(i)\n    return sum(odd_pos)\n\nsolution([3,3,3])\n\nA:\n\nList comprehension is the way to go here:", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    n = len(lst)\n    x = 0\n    for i in range(n/2):\n        if lst[i] % 2 == 0:\n            x += lst[i]\n    if n % 2 == 0:\n        x += lst[n/2]\n    return x\n\nlst = [10, 12, 20, 11, 32, 23, 25, 23, 10, 30, 40, 50]", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    nums = list(lst)\n\n    for i in range(len(nums)):\n        if i % 2 == 0 and i + 1 < len(nums):\n            if nums[i]!= nums[i + 1]:\n                nums[i] += nums[i + 1]\n\n    return sum(nums)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd_pos = [index for index, number in enumerate(lst) if index % 2 == 1 and number % 2 == 0]\n    even_pos = [index for index, number in enumerate(lst) if index % 2 == 0 and number % 2 == 1]\n    return sum(odd_pos) + sum(even_pos)\n\n\nsolution([5, 8, 7, 1])\nsolution([3, 3, 3, 3, 3])\nsolution([30, 13, 24, 321])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum1=0\n    for i in range(len(lst)-1):\n        if lst[i]%2==0 and lst[i+1]%2==0:\n            sum1+=lst[i]\n    sum2+=0-lst[len(lst)-1]\n    return sum1+sum2", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    def odd_position(lst):\n        lst.sort()\n        return lst[lst.index(lst[-1])+1:]\n\n    result = 0\n    for element in lst:\n        if element%2 == 1:\n            result += element\n\n    if len(odd_position(lst)) % 2:\n        return result + odd_position(lst)[0]\n    else:\n        return result", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    oddPos = [i for i, num in enumerate(lst) if not num % 2]\n    oddSum = sum(lst[i] for i in oddPos)\n    evenPos = [i for i, num in enumerate(lst) if num % 2]\n    evenSum = sum(lst[i] for i in evenPos)\n    return oddSum + evenSum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    result = 0\n    if len(lst) == 0:\n        return result\n    for i in range(0, len(lst)):\n        if (lst[i] % 2) == 0 and (i % 2) == 1:\n            result += lst[i]\n    return result", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    if len(lst) <= 1:\n        return lst[0] + lst[1]\n    \n    odd_pos = lst.index(lst[0]) % 2\n    odd_sum = 0\n    for i in lst:\n        if i!= lst[0] and i!= lst[-1]:\n            if i % 2 == odd_pos:\n                odd_sum += i\n    \n    return odd_sum + solution(lst[1:])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd = []\n    even = []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n\n    return sum(odd)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    length = len(lst)\n    if length < 1:\n        return 0\n    even_list = [int(i) for i in str(lst) if int(i) % 2]\n    odd_list = [int(i) for i in str(lst) if int(i) % 2 == 1]\n    res = sum([int(i) for i in even_list] + odd_list)\n    return res\n\nsolution([30, 13, 24, 321])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd = []\n    even = []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return sum(odd[2:]) + sum(even[2:])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    res = 0\n    for i in lst:\n        if i % 2 == 0:\n            res += i\n            if i % 2 == 1:\n                res -= i\n    return res", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd_elems = 0\n    even_elems = 0\n    for num in lst:\n        if num % 2 == 1:\n            odd_elems += num\n        else:\n            even_elems += num\n    return odd_elems if even_elems % 2 == 0 else 0", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if i%2 == 0 and i/2 > 0:\n            sum += i/2\n    return sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd_positions = [i for i, x in enumerate(lst) if x % 2]\n    return sum(lst[odd_positions[i]] for i in range(0, len(odd_positions), 2))", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst:\n        return 0\n    sum_ = 0\n    for i in lst:\n        if i % 2!= 0 and i > 0:\n            sum_ += i\n    return sum_", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0:\n            sum += num if num % 2!= 0 else 0\n    return sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    def odd(lst):\n        odd = 0\n        for i in lst:\n            if i % 2!= 0:\n                odd += i\n            return odd\n    return odd(lst) + odd(lst[::-1])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst: return 0\n    sum_odd = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            if lst[i] % 2 == 1:\n                sum_odd += lst[i]\n    return sum_odd", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd, even = lst, []\n    for i in lst:\n        if i % 2:\n            even.append(i)\n        else:\n            odd.append(i)\n    return sum(odd[i] for i in even)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    odd = 0\n    even = 0\n\n    for i in range(0, len(lst)):\n        if i % 2 == 0:\n            if lst[i] % 2 == 1:\n                odd += lst[i]\n        else:\n            if lst[i] % 2 == 0:\n                even += lst[i]\n    return odd + even", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 and lst.index(x) % 2 == 0)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum([sum(lst[i:i+2]) for i in range(0, len(lst), 2) if lst[i] % 2])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(i for i in lst if not i%2 and lst.index(i) % 2 == 0)\n\nl = input(\"Enter the list of numbers: \")", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n\n    odds_even = []\n\n    for element in lst:\n        if element % 2 == 1:\n            odds_even.append(element)\n\n    return sum(odds_even)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    result = 0\n    lst = sorted(lst)\n    length = len(lst)\n    for i in range(length-1):\n        if lst[i+1] - lst[i] == 2:\n            result += lst[i]\n    return result", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    s = 0\n    #i will be used to iterate over the list and n will be used to represent the element in the list\n    i, n = 0, lst[0]\n    #use an if statement to check if the list is empty\n    while i < len(lst):\n        if lst[i] % 2 == 0:\n            s += n\n        #check if the element is odd and the position is even and increment i to the next element\n        elif lst[i] % 2!= 0 and i % 2 == 0:\n            i += 1\n            s += n\n        #increment the element in the list\n        n = lst[i]\n        i += 1\n    return s", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst) < 2:\n        return 0\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum_even += lst[i]\n        else:\n            sum_odd += lst[i]\n    return sum_odd + sum_even", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    n = len(lst)\n    odd_indexes = [i for i in range(n) if i%2 == 1]\n    even_indexes = [i for i in range(n) if i%2 == 0]\n    print(sum(lst[odd_indexes]) + sum(lst[even_indexes]))", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    odd = 0\n    even = 0\n    for i in lst:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return odd if even % 2 == 0 else even + odd", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum([i for i in lst if i%2==0 and lst.index(i) % 2])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # write your code in python 3.x\n    \n    if(len(lst) == 0):\n        return 0\n    else:\n        result = 0\n        for i in range(0, len(lst)):\n            if(lst[i]%2!= 0):\n                result += lst[i]\n        return result", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # 0 and 1 are odd numbers and are in an even position\n    if 0 in lst or 1 in lst:\n        return lst.index(0) + lst.index(1)\n\n    # take the elements from right to left\n    even = []\n    odd = []\n    for i, item in enumerate(lst):\n        if item % 2 == 0:\n            even.append(item)\n        else:\n            odd.append(item)\n\n    # even is a list with the elements in odd positions, odd is a list with the elements in even positions\n    return sum([(even[i] + odd[i]) % 2 for i in range(len(even) + len(odd))])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    nums = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            nums.append(lst[i])\n        else:\n            nums.append(lst[i] + lst[i+1])\n    return sum(nums)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # write your code here\n    if not lst:\n        return 0\n\n    odd_sum = 0\n    even_sum = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return odd_sum + even_sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum_odd = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum_odd += lst[i]\n\n    return sum_odd", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum([i for i, x in enumerate(lst) if x % 2 == 0 and i % 2 == 1])\n\nsolution([1, 2, 3, 4, 5]) # ==> 10\nsolution([3, 3, 3, 3, 3]) # ==> 9\nsolution([30, 13, 24, 321]) # ==>0\nsolution([30, 13, 24, 321]) # ==> 0\nsolution([30, 13, 24, 321]) # ==> 0\nsolution([30, 13, 24, 321]) # ==> 0\nsolution([30, 13, 24, 321]) # ==> 0\nsolution([30, 13, 24, 321]) # ==> 0\nsolution([30, 13, 24, 321]) # ==> 0\nsolution([30, 13, 24, 321]) # ==> 0\nsolution([30, 13, 24, 321]) # ==> 0\nsolution([30, 13, 24, 321]) # ==> 0\nsolution([30, 13, 24, 321]) #", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    s = 0\n    for i in range(len(lst)/2):\n        s += lst[i]\n    return s", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0] + lst[1]\n    i = 0\n    odd_sum = 0\n    even_sum = 0\n    while i < len(lst):\n        if lst[i] % 2!= 0:\n            odd_sum += lst[i]\n            i += 1\n        else:\n            even_sum += lst[i]\n            i += 1\n    return odd_sum + even_sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    import itertools\n    #flag = 0\n    #odd_list = [item for item in lst if item % 2 == 1]\n    #even_list = [item for item in lst if item % 2 == 0]\n    #for i in even_list:\n    #    i *= 2\n    #for i in odd_list:\n    #    i *= 2\n    for i in itertools.combinations(lst, 2):\n        if lst[i[0]] % 2 == 0 and lst[i[1]] % 2 == 1:\n            return lst[i[1]]", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    # Solution 1\n    # [sum all the odd elements in the even positions]\n    odd_sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and lst[i] >= 2:\n            odd_sum += lst[i]\n\n    # Solution 2\n    # [Sum the odd elements in the even positions]\n    odd_sum = sum(i for i in lst if i % 2 == 0 and i > 0)\n\n    return odd_sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    count = 0\n    res = 0\n    for i in lst:\n        if i % 2 == 0:\n            res = res + i\n            count = count + 1\n        else:\n            res = res + i\n            if count > 0:\n                count = count - 1\n            else:\n                count = count + 1\n    return res", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd_count = 0\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            odd_count += lst[i]\n    if odd_count == 0:\n        return 0\n    odd_sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            odd_sum += lst[i]\n    return odd_sum + odd_count", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    s = 0\n    for i in lst:\n        if i % 2 == 0:\n            if i % 4 == 1:\n                s += i\n    return s", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd_pos = [i for i, x in enumerate(lst) if x % 2!= 0]\n    even_pos = [i for i, x in enumerate(lst) if x % 2 == 0]\n\n    if len(odd_pos) == len(even_pos):\n        return sum(lst[odd_pos[i]] for i in even_pos)\n    else:\n        return 0", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    val = 0\n    for i in lst:\n        if i%2 == 0:\n            if i > val:\n                val += i\n        else:\n            if i < val:\n                val -= i\n    return val\n\nsolution([3,3,3,3,3])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd_sum = 0\n    even_sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return odd_sum + even_sum\n\nlst = [30, 13, 24, 321]", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd_list = []\n    even_list = []\n    for i in lst:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return sum(odd_list) + sum(even_list)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd = 0\n    even = 0\n\n    for index in lst:\n        if index % 2 == 0:\n            even += index\n        else:\n            odd += index\n\n    if odd % 2 == 0:\n        return even + odd/2\n    else:\n        return odd/2\n\n\"\"\"\nTest case:\nsolution([5, 8, 7, 1]) ==> 12\nsolution([3, 3, 3, 3, 3]) ==> 9\nsolution([30, 13, 24, 321]) ==>0\n\"\"\"", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd, even = 0, 0\n    for i in lst:\n        if i % 2:\n            odd += i\n        else:\n            even += i\n    return odd + even", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd, even = 0, 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even += lst[i]\n        else:\n            odd += lst[i]\n    return odd + even", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # write your code in Python 3.x\n    \n    # start with the start and end indexes\n    start = 0\n    end = len(lst) - 1\n    \n    # now loop through the list, calculate sum in the middle of the loop\n    res = 0\n    while start < end:\n        # find the first index that is even (even positions)\n        index = start + ((end - start) / 2)\n        \n        # find the odd element index in the even position\n        odd = lst[index]\n        even = (lst[index - 1] + lst[index + 1]) / 2\n        \n        # add odd element only if it is in an even position\n        if even % 2 == 0:\n            res += odd\n        # increment the start index, if it is odd then the odd element was in an odd position\n        else:\n            start += 1\n    \n    return res\n</s>", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    result = 0\n    for i in lst:\n        if i % 2 == 0:\n            if i + 1 % 2 == 0:\n                result += i\n            else:\n                result += i\n        else:\n            pass\n    return result", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst:\n        return 0\n    \n    def is_even(n):\n        return n % 2 == 0\n    \n    def is_even_pos(n):\n        return n % 2 == 0 and n / 2 > 0\n    \n    odd_pos = filter(is_even_pos, lst)\n    even_pos = filter(is_even, lst)\n    \n    return sum(odd_pos) + sum(even_pos)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    def odd_sum_in_even(lst):\n        odd_sum = 0\n        for i in range(0, len(lst), 2):\n            if lst[i] % 2!= 0:\n                odd_sum += lst[i]\n        return odd_sum\n    return odd_sum_in_even(lst)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    oddPos = [i for i, x in enumerate(lst) if x%2!= 0]\n    evenPos = [i for i, x in enumerate(lst) if x%2 == 0]\n    oddSum = sum([lst[i] for i in oddPos])\n    evenSum = sum([lst[i] for i in evenPos])\n    return oddSum + evenSum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    res = 0\n    for i in range(len(lst)):\n        if i % 2!= 0:\n            res += lst[i] if lst[i] % 2!= 0 else 0\n    return res", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    if len(lst) == 0:\n        return 0\n    flag = True\n\n    for i in range(0, len(lst)):\n        if i % 2 == 0:\n            if lst[i] % 2 == 1:\n                flag = False\n                break\n    if flag == True:\n        return sum([i for i in lst if i % 2 == 1 and i!= lst[-1]])\n\n    else:\n        return lst[-1] + solution(lst[:-1])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # write code here\n\n    lst = list(map(int, lst)) # convert the list of string into a list of integer.\n    odd = [lst[i] for i in range(len(lst)) if lst[i]%2!= 0] #odd numbers\n    even = [lst[i] for i in range(len(lst)) if lst[i]%2 == 0] #even numbers\n    if len(odd) > len(even):\n        return sum(odd) + sum(lst[:len(even)]) # if odd is more than even add sum of odd + sum of even\n    else:\n        return sum(lst[len(even):]) + sum(odd) # else add sum of even + sum of odd", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum_list=[]\n    for i in lst:\n        if i%2 == 0:\n            sum_list.append(i)\n        else:\n            sum_list.append(i)\n    return sum(sum_list)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    result = 0\n    for i in lst:\n        if(i%2==1 and i/2%2==0):\n            result += i\n\n    return result\n\n\ns = int(input())", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd_sum = 0\n    even_sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_sum += i\n        elif i % 2 == 1:\n            odd_sum += i\n    return odd_sum + even_sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # If the list has odd number of elements, return 0 as the sum of even elements is 0.\n    if len(lst) % 2!= 0:\n        return 0\n\n    # If the list has only one element, return the element.\n    elif len(lst) == 1:\n        return lst[0]\n\n    # Initialize the sum and odd elements sum.\n    odd_sum = 0\n    sum = 0\n\n    # Iterate over the list elements.\n    for i in range(0, len(lst)):\n        # If current element is odd, add it to the sum.\n        if lst[i] % 2!= 0:\n            sum += lst[i]\n\n        # If current element is even, add it to the odd elements sum.\n        elif lst[i] % 2 == 0:\n            odd_sum += lst[i]\n\n    # Return the sum of odd elements that are in even positions.\n    return sum + odd_sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    def odd_and_even_pos(lst):\n        lst.sort()\n        return (lst[0] + lst[-1]) if (lst.index(lst[-1])!= lst.index(lst[0]) + 1) else lst[0]\n    return sum(lst[2:] if lst[0] % 2 == 0 else lst for lst in odd_and_even_pos(lst))", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst:\n        return 0\n    \n    n = len(lst)\n    # n % 2 == 0\n    even_indices = [i for i in range(n) if i % 2 == 0]\n    odd_indices = [i for i in range(n) if i % 2 == 1]\n    even_pos = [lst[i] for i in even_indices]\n    odd_pos = [lst[i] for i in odd_indices]\n    \n    return sum(odd_pos[i] for i in even_indices)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    res = 0\n    for i in lst:\n        if i%2==0:\n            res+=i\n            continue\n        if i%2==1:\n            res+=i*2\n            continue\n    return res", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst)==0:\n        return 0\n    elif len(lst)==1:\n        return lst[0]\n\n    odd_position = [i for i, x in enumerate(lst) if x%2!=0 and i%2==0]\n    if len(odd_position)==0:\n        return lst[0]\n    \n    result = 0\n    for i in odd_position:\n        result += lst[i]\n\n    return result", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    num_list = sorted(lst)\n    if not num_list:\n        return 0\n    # get the index of the first even number in the list\n    pos = 0\n    for i in range(len(num_list)):\n        if (num_list[i] % 2):\n            pos = i\n            break\n    return sum(num_list[pos::2])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if i%2 == 1:\n            if i%len(lst) == 0:\n                sum+=i\n    return sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    if not lst:\n        return sum\n    if len(lst) % 2!= 0:\n        lst.append(0)\n    for i, v in enumerate(lst):\n        if i % 2 == 0:\n            continue\n        if v % 2:\n            sum += v\n    return sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd = 0\n    even = 0\n    total = 0\n    for i in lst:\n        if i%2 == 1:\n            if i%2 == 0:\n                total = total + i\n            else:\n                odd = odd + i\n        else:\n            even = even + i\n    if odd%2 == 0:\n        total = total + odd\n    return total", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst:\n        return 0\n    cnt = 0\n    sum = 0\n    for i in range(0, len(lst)):\n        if (i % 2) == 0:\n            cnt += 1\n            if (lst[i] % 2) == 1:\n                sum += lst[i]\n    return sum + cnt", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    total = 0\n    even_pos = len(lst) // 2\n\n    if len(lst) % 2 == 0:\n        for i in range(0, even_pos):\n            if lst[i] % 2 == 0:\n                total += lst[i]\n    else:\n        for i in range(0, even_pos):\n            if lst[i] % 2 == 1:\n                total += lst[i]\n    return total", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    def odd_odd(lst):\n        result = 0\n        for i in range(len(lst)-1):\n            if i % 2 == 1:\n                result += lst[i]\n        return result\n    \n    def odd_even(lst):\n        result = 0\n        for i in range(len(lst)-1):\n            if i % 2 == 0:\n                result += lst[i]\n        return result\n    \n    return odd_odd(lst) + odd_even(lst)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1 and x % 2 == lst.index(x) % 2)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    num = 0\n    for i in lst:\n        if i % 2 == 0:\n            num += i\n        else:\n            num += i\n    return num", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # Write your code in Python 3.x\n    if len(lst) <= 0:\n        return 0\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2!= 0)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd_lst = []\n    for i in lst:\n        if i % 2!= 0:\n            odd_lst.append(i)\n    if len(odd_lst) == 0:\n        return 0\n    return odd_lst[0] + sum(odd_lst[1:])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd = []\n    for i in range(0,len(lst)):\n        if lst[i] % 2 == 0:\n            odd.append(lst[i])\n    return sum(odd)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # Filter odd elements and odd positions\n    odd = [x for x in lst if x % 2!= 0]\n    odd_pos = [x for x in lst if x % 2 == 0]\n\n    # Sum all odd elements at even positions\n    odd_even = 0\n    for i in range(0, len(odd) - 1):\n        odd_even += odd[i] * odd_pos[i + 1]\n\n    return odd_even\n\n'''\nassert solution([5, 8, 7, 1]) == 12\nassert solution([3, 3, 3, 3, 3]) == 9\nassert solution([30, 13, 24, 321]) == 0\n'''", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    odd = []\n    even = []\n\n    for i in lst:\n        if i % 2!= 0:\n            odd.append(i)\n        else:\n            even.append(i)\n\n    return sum(odd) + sum(even)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd = [elem for elem in lst if elem % 2!= 0]\n    even = [elem for elem in lst if elem % 2 == 0]\n    result = 0\n    for elem in even:\n        if elem not in odd:\n            result += elem\n    return result", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    odd = 0\n    even = 0\n    i = 0\n    n = len(lst)\n    if n == 0:\n        return 0\n\n    while i < n:\n        if lst[i] % 2!= 0:\n            odd = odd + lst[i]\n            i += 1\n        else:\n            even = even + lst[i]\n            i += 1\n\n    if odd % 2!= 0:\n        odd = odd - 1\n\n    return odd + even", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst or len(lst) <= 1:\n        return 0\n    odd = [odd for odd in lst if odd % 2]\n    return sum(odd[even] for even in range(len(lst)-1, -1, -1) if even % 2 == 0)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    from operator import mul, add\n    from itertools import groupby\n    from functools import reduce\n    \n    odd_group = sum(odd for key, odd in groupby(lst) if key%2 == 1)\n    even_group = sum(odd for key, odd in groupby(lst) if key%2 == 0)\n    odd_sum = reduce(add, odd_group)\n    even_sum = reduce(add, even_group)\n    \n    return odd_sum + even_sum\n'''", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0 and x // 2!= 0)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # write your code in Python 3.x\n    odd_lst = [x for x in lst if x % 2 == 1]\n    even_lst = [x for x in lst if x % 2 == 0]\n    return sum(odd_lst) + sum(even_lst)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd, even = 0, 0\n    for i in lst:\n        if i % 2!= 0:\n            odd += i\n        elif i % 2 == 0:\n            even += i\n        if odd > even:\n            return odd - even\n        elif even > odd:\n            return even - odd\n        elif odd == even:\n            return 0\n\n    return 0", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd = sum(x for x in lst if x % 2 == 1)\n    evens = sum(x for x in lst if x % 2 == 0)\n    return odd + evens", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    res = 0\n    lst = sorted(lst)\n    for n in lst:\n        if n % 2!= 0:\n            if n % 4!= 0:\n                res += n\n    return res\n\n\"\"\"\n    Solution 2:\n    To sum all the odd numbers in the input list, we will use a hash table. The key will be the\n    number and the value will be the total sum of that number so far. The hash table will be\n    initialized as an empty dictionary. Since we are only interested in odd numbers, we will\n    only check odd numbers. In each iteration, we check if the number is in the dictionary.\n    If yes, we will increment the value by 1, else we will add the number to the dictionary and\n    set the value to 1. The final value of the dictionary will be the sum of all odd numbers\n    in the input list.\n    \n    \n    Example:\n    Input: [5, 8, 7, 1]\n    Output: 12\n    \n    Input: [3, 3, 3, 3, 3]\n    Output: 9\n    \n    Input: [30, 13, 24, 321]\n    Output: 0\n    \"\"\"\n    # initialize a hash table\n    odd_sum = {}\n    for num in lst:\n        if num % 2!= 0:\n            if num in odd_sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            sum += lst[i]\n\n    return sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # add each odd element to the sum\n    odd_sum = sum([i for i in lst if i % 2 == 1])\n\n    # zero out the elements that aren't in the right position\n    odd_list = [i for i in lst if i % 2 == 1]\n    even_list = [i for i in lst if i % 2!= 1]\n\n    # recursively find the sum of the even elements\n    even_sum = sum([odd_sum + odd_list.pop(0) for _ in range(len(even_list))])\n\n    # return the sum of all of the odd elements in the right position\n    return odd_sum + even_sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    l = []\n    odd = 1\n    for x in lst:\n        if x % 2 == 1:\n            if l:\n                l.append(x)\n                l.append(odd)\n                odd = 1\n            else:\n                odd = x\n        else:\n            l.append(x)\n    if odd:\n        l.append(odd)\n    return sum(l)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    total = 0\n    for x in lst:\n        if x % 2 == 0:\n            total += x\n        else:\n            total += x * 2\n    return total\n\n\nlst = [5, 8, 7, 1]", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if i % 2 == 0 and i!= 0 and i!= 1:\n            sum += i\n    return sum\n\nsolution([1,1,2,2,2,3,4,5,6])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in lst:\n        if i % 2 == 1:\n            odd += i\n        if i % 2 == 0:\n            even += i\n    return odd + even", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    sum1 = 0\n    sum2 = 0\n    for i in lst:\n        if (i % 2 == 0):\n            sum2 += i\n        else:\n            sum1 += i\n    return (sum1 - sum2)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if i%2!= 0:\n            sum += i\n        else:\n            i += 1\n    return sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst:\n        return 0\n    odd = [ x for x in lst if x % 2!= 0]\n    odd_sum = 0\n    for x in odd:\n        odd_sum += x\n        if len(lst) % 2 == 0:\n            odd_sum += x\n\n    return odd_sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd, even = 0, 0\n    for i in lst:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n\n    return odd - even", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    if len(lst) % 2 == 0:\n        sum = 0\n        for i in lst:\n            if i%2 == 0 and i <= len(lst):\n                sum += i\n        return sum\n    if len(lst) % 2 == 1:\n        sum = 0\n        for i in lst:\n            if i%2!= 0 and i <= len(lst):\n                sum += i\n        return sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i % 2!= 0:\n            count += i\n        else:\n            if count > 0:\n                count -= i\n    if count == 0:\n        return sum(lst)\n    else:\n        return 0", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum([lst[i * 2] for i in range(len(lst)//2) if i%2 == 1])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst) == 0: return 0\n    return sum(lst[i] for i in range(len(lst)) if i%2 == 0 and lst[i] % 2 == 1)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    def sum_odds_in_even_positions(lst):\n        \"\"\"Helper function\"\"\"\n        odd = 0\n        for i in range(len(lst)-1, -1, -1):\n            if lst[i] % 2 == 1:\n                odd += lst[i]\n            if i % 2 == 0:\n                lst[i] -= odd\n                odd = 0\n        return odd\n\n    return sum_odds_in_even_positions(lst)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    result = 0\n    for i in range(len(lst)//2):\n        if lst[i] % 2!= 0:\n            result += lst[i]\n    return result", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    ans = 0\n    for x in lst:\n        if x % 2 == 1 and x in lst and x % 2 == 0:\n            ans += x\n    return ans", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            total += lst[i]\n    return total", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst: return 0\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n        else:\n            if lst[i] % 2 == 1:\n                sum += lst[i]\n    return sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    length = len(lst)\n    if length < 2:\n        return 0\n    else:\n        odd = 0\n        even = 0\n        for i in range(length):\n            if i % 2 == 0:\n                even += lst[i]\n            else:\n                odd += lst[i]\n        return odd + even", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    nums = map(int, lst)\n    odd_elems = [i for i in nums if i%2!= 0]\n    even_elems = [i for i in nums if i%2 == 0]\n    \n    s = 0\n    for elems in zip(even_elems, odd_elems):\n        if elems[0] < elems[1]:\n            s += elems[0]\n        else:\n            s += elems[1]\n            \n    return s", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    count=0\n    res=0\n    if len(lst)==0:\n        return 0\n    if lst[0]%2==0:\n        count+=1\n    for i in lst:\n        if i%2==0:\n            res+=i\n            if i!=lst[-1]:\n                count+=1\n            else:\n                count-=1\n    return res if count%2==1 else 0", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst or len(lst) == 1:\n        return 0\n    nums = []\n    for num in lst:\n        if num % 2 == 0:\n            nums.append(num)\n        else:\n            return sum(nums)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if not lst:\n        return 0\n\n    odd = 0\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0 or i % 2 == 1:\n            odd += lst[i]\n    return odd\n\n\nlst = input().split()", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    n = len(lst)\n    odd_sum = 0\n    if n % 2 == 0:\n        for i in range(1, n+1):\n            if lst[i] % 2 == 0:\n                odd_sum += lst[i]\n    return odd_sum\n\n\nsolution_str = \"\"\"\nGiven a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n\"\"\"", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    def sumOdd(lst):\n        return sum([x for x in lst if x % 2 == 1 and lst.index(x) % 2])\n    return sumOdd(lst)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # write your code here\n    odd_pos = [i for i,x in enumerate(lst) if x % 2 == 1]\n    even_pos = [i for i,x in enumerate(lst) if x % 2 == 0]\n    return sum(odd_pos[even_pos])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    res = 0\n    for i in lst:\n        if i%2 == 0:\n            continue\n        if res < i:\n            res += i\n    return res", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return sum([lst[i] for i in range(0, len(lst)) if i%2 == 0 and lst[i] % 2 == 1])", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    arr = list(map(int, lst))\n    odd_pos = len(lst) - sum(arr) % 2\n    print(odd_pos)\n    odd_sum = 0\n    for i in arr:\n        if i % 2!= 0:\n            if i in odd_pos:\n                odd_sum += i\n    return odd_sum\n\nsolution([5, 8, 7, 1])\nsolution([3, 3, 3, 3, 3])\nsolution([30, 13, 24, 321])\n\"\"\"\nSolution\n\"\"\"", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    res = 0\n    for num in lst:\n        if num % 2 == 0 and num > 0:\n            res += num\n    return res", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    sum = 0\n    length = len(lst)\n\n    for i in xrange(length):\n        if i % 2 == 0:\n            sum += lst[i]\n\n        else:\n            if lst[i] % 2 == 1:\n                sum += lst[i]\n\n    return sum", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd, even = [], []\n    for i in lst:\n        if i % 2 == 1:\n            odd.append(i)\n        else:\n            even.append(i)\n    return sum(odd) + sum(even)", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # Note: You can assume that the sum of all elements is divisible by 2.\n    # That is, the sum of all elements in a list is even.\n    return sum([i for i, j in enumerate(lst) if i % 2 == 0 and j % 2])\n\nassert solution([1, 1, 1, 1, 1]) == 1\n\nassert solution([1, 2, 3, 4, 5]) == 10\n\nassert solution([5, 8, 7, 1]) == 12\n\nassert solution([3, 3, 3, 3, 3]) == 9\n\nassert solution([30, 13, 24, 321]) == 0\n\nassert solution([]) == 0\n\nassert solution([-1, 1, -1]) == 0\n\nassert solution([-2, -1]) == -1\n\nassert solution([-1, -1]) == 0\n\nassert solution([-2, -2, -2]) == -2\n\nassert solution([-1, 0, 0, 0, 0, 0, 0, 0]) == 0\n\nassert solution([-1, 1, 0, 0]) == 1\n\nassert solution([0, 1, -1, 0]) == 2\n\nassert solution([1, 2, 3, 4", "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd = 0\n    even = 0\n    for e in lst:\n        if e % 2 == 1:\n            odd += e\n        if e % 2 == 0:\n            even += e\n    return odd + even"]]