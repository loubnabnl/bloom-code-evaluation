[["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # write your code here\n    result = 0\n    for n in lst:\n        if lst.count(n) > result and n > 0:\n            result = n\n    return result", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    freq = {}\n    for number in lst:\n        if number in freq:\n            freq[number] += 1\n        else:\n            freq[number] = 1\n    return -1 if len(freq) == 0 else max(freq, key=freq.get)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    def search_in_list(lst, val):\n        '''\n        Return True if val is found in lst; otherwise, return False.\n        '''\n        for i in lst:\n            if val == i:\n                return True\n        return False\n\n    # write your code here\n    if not lst:\n        return -1\n    new_lst = []\n    max_freq = 0\n    for i in lst:\n        new_lst += [i, ]\n        if search_in_list(lst, i):\n            max_freq += 1\n    if max_freq == len(lst):\n        return -1\n    return max([i for i in lst if i == max_freq])\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in lst:\n        if lst.count(i) > i:\n            return i", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # build a dictionary to store the frequency of each value\n    freq = dict()\n    for n in lst:\n        if n in freq:\n            freq[n] += 1\n        else:\n            freq[n] = 1\n    # create a list to store all integers with frequency >= value\n    nlist = []\n    for n in freq:\n        if freq[n] >= n:\n            nlist.append(n)\n    # find the first element with the maximum frequency \n    return max(nlist, key=lambda n: freq[n])", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # using Queue\n    q = Queue()\n    # use deque\n    q = deque()\n    # use list\n    q = list()\n    for i in lst:\n        q.append(i)\n    while q:\n        i = q.popleft()\n        count = q.count(i)\n        if count >= i:\n            return i\n        else:\n            q.append(i)\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # memoization\n    def search_helper(lst, count, max):\n        if count > max:\n            return -1\n        else:\n            for i in range(len(lst)):\n                if lst[i] == count:\n                    count += 1\n                    if search_helper(lst, count, max) == -1:\n                        return count\n                    count -= 1\n                    break\n            return max\n\n    # solution\n    memo = [-1] * (1 << 30)\n    memo[0] = 0\n    for i in lst:\n        memo[len(memo)] = search_helper(lst, i, 0)\n        # memo[len(memo)] = search_helper(lst, i, -1)\n        # memo[len(memo)] = search_helper(lst, i, -2) # I tried this, but it failed\n    return memo[len(memo)]", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    val = 0\n    for n in lst:\n        if n > 0:\n            count = lst.count(n)\n            if count >= n:\n                if val == 0 or n > val:\n                    val = n\n    return val", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def dfs(lst, curr, freq):\n        if len(lst) == 0:\n            return -1\n        elif freq <= 0:\n            return -1\n        for i in range(len(lst)):\n            if lst[i] == curr:\n                if freq < lst.count(curr):\n                    freq += 1\n                else:\n                    freq = lst.count(curr)\n                return dfs(lst, curr, freq)\n        return curr\n\n    if not lst:\n        return -1\n    if not lst or len(lst) == 1:\n        return 0\n    else:\n        return dfs(lst, 0, 0)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    import collections\n\n    lst = sorted(lst)\n    res = collections.Counter(lst)\n    i = 0\n    while i < len(lst):\n        if res[i] > i:\n            return i\n        i += 1\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # write your code in Python 3.x\n    \n    # your code goes here\n    #hint, use a list of tuples, each tuple is a mapping of the integers from the list and its frequency\n    # use a while loop to keep iterating through the list and check the frequency", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    import collections\n    lst = sorted(lst, key=lst.count)\n    i = 1\n    count = 0\n    while i < len(lst):\n        if count == lst[i]:\n            count += 1\n        else:\n            if count > lst[i]:\n                return i-1\n            i += 1\n            count = 0", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_freq = 0\n    max_val = -1\n    for i in lst:\n        if i > 0 and lst.count(i) >= i:\n            max_freq = max(lst.count(i), max_freq)\n            if max_freq > max_val:\n                max_val = max_freq\n    return max_val", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def search(lst):\n        '''\n        You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n        zero, and has a frequency greater than or equal to the value of the integer itself. \n        The frequency of an integer is the number of times it appears in the list.\n        If no such a value exist, return -1.\n        Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n        '''\n        d = {}\n        for i in lst:\n            if i not in d:\n                d[i] = 0\n            d[i] += 1\n        return max(d.keys(), key=lambda x: d[x]) or -1\n    \n    return search(lst)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    #Do not change this docstring!\n    assert lst.count(lst[0]) == 1\n    #this line can be deleted, but this is a good example of how the docstring describes the requirements.\n    return max(lst, key=lst.count) if lst else -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def get_freq(lst, num):\n        '''\n        This function will return the number of times an element appears in a list\n        :param lst: The list of elements to check\n        :param num: The element to look up in the list\n        :return: The frequency of the element in the list\n        '''\n        return sum([1 if elem == num else 0 for elem in lst])\n\n    def search_helper(lst):\n        '''\n        This function is recursive.\n        :param lst: A non-empty list of positive integers\n        :return: The maximum positive integer whose frequency is greater than or equal to its value\n        '''\n        if not lst:\n            return -1\n\n        num = max(lst)\n        if get_freq(lst, num) == num:\n            return num\n        else:\n            return search_helper(lst[:-1] + lst[1:])\n\n    return search_helper(lst)\n\nlst = [4, 1, 2, 2, 3, 1]", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if not lst:\n        return -1\n    return max(x for x in lst if lst.count(x) >= x)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 1:\n        return 0\n\n    for i in range(1,len(lst)):\n        count = 0\n        for j in range(1,len(lst)-1):\n            if lst[j] == i:\n                count += 1\n        if count >= i:\n            return i\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    count = {}\n    result = -1\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num, freq in count.items():\n        if freq >= num:\n            result = max(result, num)\n    return result", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0: return -1\n    dict = {}\n    for num in lst:\n        dict[num] = dict.get(num, 0) + 1\n    for key in sorted(dict):\n        if key > 0 and dict[key] >= key:\n            return key\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    nums = []\n    for i in lst:\n        if i in nums:\n            nums.remove(i)\n        else:\n            nums.append(i)\n    lst2 = [i for i in nums]\n    res = 0\n    for i in lst2:\n        if i >= res:\n            res = i\n    return res", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if not lst:\n        return -1\n\n    nums = set(lst)\n    if len(nums) == 1:\n        return lst.count(nums[0])\n\n    max_count = 1\n    max_num = max(lst)\n    max_freq = lst.count(max_num)\n\n    for num in nums:\n        count = lst.count(num)\n\n        if count > max_freq:\n            max_count = count\n            max_num = num\n            max_freq = count\n\n    return max_num", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    n = len(lst)\n    last = 0\n    while last < n:\n        count = 0\n        for i in range(last+1, n):\n            if lst[i] == lst[last]:\n                count += 1\n            else:\n                break\n        if count >= lst[last]:\n            return last\n        last += 1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0:\n        return -1\n    for num in lst:\n        if num == 0:\n            return -1\n        if num in [elem for elem in lst if elem > num]:\n            return num\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if not lst:\n        return -1\n    cnt = {}\n    for item in lst:\n        cnt[item] = cnt.get(item, 0) + 1\n    ans = -1\n    max_count = 0\n    for x in cnt:\n        if cnt[x] > max_count:\n            max_count = cnt[x]\n            ans = x\n    return ans\n\n'''\nyou can think about that kind of problem:", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    ret = -1\n    max_freq = 1\n    for i in lst:\n        if i > 0:\n            if i in lst and lst.count(i) >= max_freq:\n                ret = i\n                max_freq = lst.count(i)\n    return ret", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Backtracking\n    # For the solution, we will use recursive backtracking to find the max frequency of an integer.\n    # Backtracking is a form of dynamic programming where we explore all possible solutions, and return the \n    # best one. So we will keep track of the max found so far for each number in the list. We will start from \n    # the last number, and for each number, we will explore all possibilities of the number of integers in the \n    # array that is equal to the number. Then we check the frequency, and update the max frequency if the \n    # frequency is higher.\n    # Example:\n    # [1, 2, 2, 3, 3, 3, 4, 4, 4]\n    # As starting point, we should set the last integer to max: 4\n    # Then, we try to set the last integer to 3, and find the max frequency. Now, 3 appears 4 times, so we \n    # set the max frequency to 4. Now, we try to set the last integer to 2. We try to set the frequency to 3,\n    # and find that there is only one case of the last integer being 2, so the frequency is 2. Now, we try to \n    # set the last integer to 1. We", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    largest = 0\n    max_freq = 0\n    for i in lst:\n        if i > largest:\n            max_freq = 0\n            largest = i\n        elif i == largest:\n            max_freq += 1\n        elif max_freq > largest:\n            max_freq = largest\n    return largest", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    result = -1\n    for i in lst:\n        if i > 0:\n            if lst.count(i) > i:\n                result = i\n                break\n    return result", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    # Use the for loop to get the frequency of the number\n    # The method below is only used to display the number in the list\n    # and to calculate the frequency of the number\n\n    #  For each number in the list, we will count the frequency using a for loop\n    #  Then, the max frequency is compare with the frequency itself, and if they equal, the number is output\n\n    temp = 0\n    for x in lst:\n        if x == 0:\n            pass\n        else:\n            temp += 1\n\n    # count the frequency\n    for x in lst:\n        if x == 0:\n            pass\n        else:\n            temp += 1\n\n    # display the number in the list\n    for x in lst:\n        print(x, end=' ')\n\n    # compare the frequency with itself\n    if max(temp) == temp:\n        print(max(temp))\n    else:\n        print(-1)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    f = [0] * (len(lst) + 1)\n    f[0] = 0\n    for i in lst:\n        f[i] = f[i - 1] + 1\n    cnt = 1\n    for i in range(1, len(f)):\n        if f[i] == cnt:\n            cnt = cnt + 1\n            f[i] = cnt\n        else:\n            break\n    return f[len(f) - 1] if f[len(f) - 1] == cnt else -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    res = -1\n    for num in lst:\n        if num >= 0:\n            for i in range(len(lst)):\n                if lst[i] == num:\n                    res = max(res, i)\n                    break\n    return res", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def search_in(lst, n, l):\n        if len(l) == n:\n            return lst[l]\n        if lst[l] < n:\n            return search_in(lst, n, l+1)\n        return -1\n    s = len(lst)-1\n    cur = 0\n    max = 0\n    while cur < s:\n        if lst[cur] > max:\n            cur += 1\n        elif lst[cur] == max:\n            if cur == s and search_in(lst, max+1, cur) == -1:\n                return max\n            cur += 1\n        else:\n            if lst[cur] > 0:\n                if search_in(lst, max+1, cur) == -1:\n                    return max\n            cur += 1\n    return -1</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    result = -1\n    for item in lst:\n        if item >= result and result >= 0:\n            result = item\n    return result", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # \u5b9e\u73b0\u601d\u8def\uff1a\n    # \u5148\u628alist\u6309\u7167\u5347\u5e8f\u6392\u5217\uff0c\u7136\u540e\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u5224\u65ad\u6b64\u5143\u7d20\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u8fd4\u56de\u6b64\u5143\u7d20\uff0c\u5426\u5219\u5bfb\u627e\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u5217\u8868\u7684\u5143\u7d20\u90fd\u5224\u65ad\u5b8c\uff0c\u5982\u679c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ecd\u7136\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5426\u5219\u8fd4\u56de-1\n    # \u6b64\u65b9\u6cd5\u590d\u6742\u5ea6\u4e3aO(N^2)\uff0c\u56e0\u6b64\u53ef\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6\u5230O(N)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u4f18\u5316\u601d\u8def\u662f\u6bcf\u6b21\u904d\u5386\u5217\u8868\u65f6\uff0c\u5982\u679c\u5143\u7d20\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u3002\n    def search(lst):\n        n = len(lst)\n        if n <= 1:\n            return -1\n        lst = lst[::-1] # \u5217\u8868\u5012\u5e8f\n        counts = [lst.count(x) for x in lst] # \u8ba1\u7b97\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\n        max_count = counts[0]\n        max_index = 0 # \u521d\u59cb\u65f6\uff0c\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n        for i in range(1, n):\n            if counts[i] >= max_count:\n                max_count = counts[i]\n                max_index = i\n        return lst[max_index]", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0:\n        return -1\n\n    # Move elements from right to left so that\n    # largest number appears at leftmost position\n    for i in xrange(len(lst)-1,0,-1):\n        if lst[i] > lst[i-1]:\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n\n    # Iterate through all the element in sorted list\n    for i in xrange(len(lst)):\n        if lst[i] > 0:\n            if lst[i] <= lst[i]:\n                return lst[i]\n            else:\n                return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # write your code in Python 3.x\n    # it could be anything! Use print() to show your code if needed\n\n    if lst == []:\n        return -1\n\n    x = -1\n    y = -1\n\n    for i in lst:\n        if i > y:\n            y = i\n            if i == x:\n                return -1\n            x = i\n            continue\n        if i <= x:\n            return -1\n        if i == x:\n            x = i\n        if i > x:\n            x = i\n\n    return y", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    answer = 0\n    for num in lst:\n        if num == 0:\n            continue\n        elif num == 1:\n            return 1\n        else:\n            if num in lst and lst[num] >= num:\n                answer = max(answer, num - lst[num])\n    return answer", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0:\n        return -1\n    res = 0\n    for i in lst:\n        if i > 0:\n            if i == res or lst.count(i) > lst.count(res):\n                res = i\n    return res\n\n\na = [1, 2, 2, 3, 3, 3, 4, 4, 4]\nb = [4, 1, 2, 2, 3, 1]\nc = [5, 5, 4, 4, 4]", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def loop(lst, s):\n        i = 0\n        for n in lst:\n            if n == s:\n                i += 1\n        if i >= s:\n            return n\n    return loop(lst, 0)\n\nlst = [5, 5, 4, 4, 4]", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if not lst:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        most_frequent = 0\n        for i in lst:\n            if i > most_frequent:\n                most_frequent = i\n        return most_frequent", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    cnt = {}\n    for i in lst:\n        if i in cnt:\n            cnt[i] += 1\n        else:\n            cnt[i] = 1\n\n    max_freq = 0\n    max_num = 0\n    for i in cnt:\n        if cnt[i] > max_freq:\n            max_freq = cnt[i]\n            max_num = i\n    return max_num", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) < 1:\n        return -1\n    # Partition the list into two lists of integers greater and less than the median of the list\n    # Create an empty list to store the result\n    # Keep track of the frequency of the median\n    if lst[0] > lst[len(lst)/2]:\n        greater = lst[0:len(lst)/2]\n        lesser = lst[len(lst)/2:]\n        freq_median = len(greater) + len(lesser)\n    else:\n        greater = lst[0:len(lst)/2]\n        lesser = lst[len(lst)/2:]\n        freq_median = len(greater)\n    # Check if the frequency of the median is greater than the value of the median\n    if freq_median >= len(lst):\n        # Check if the frequency of the median is greater than the value of the median\n        return -1\n    # Check if the frequency of the median is less than the value of the median\n    # Update the frequency of the median\n    freq_median -= 1\n    # Update the value of the median\n    if freq_median == 0:\n        # This is the case where the median is not unique\n        # We update the value of", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if lst == []:\n        return -1\n    temp_lst = [lst[0]] * lst[0]\n    for i in lst[1:]:\n        temp_lst[i] += 1\n    for i in lst:\n        if i!= 0 and temp_lst[i] >= i:\n            return i\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # You may want to solve it without counting.\n    # If you have any question, please don't hesitate to contact us ([email protected]).\n    \n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    num = 0\n    while num < lst[0]:\n        result = []\n        for i in range(len(lst)):\n            if lst[i] == num:\n                result.append(lst[i])\n            else:\n                break\n        if len(result) > lst[0]:\n            return num\n        else:\n            num += 1\n\nnum = int(input())\n\nfor i in range(num):\n    lst = list(map(int, input().split()))\n    print(search(lst))\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def frequency(lst):\n        count = {}\n        for n in lst:\n            count[n] = lst.count(n)\n        return count\n    \n    def search_in(lst, target):\n        if target < 0:\n            return target\n        if target in lst:\n            return lst[lst.index(target)]\n        if frequency(lst).get(target) >= target:\n            return target\n        return search_in(lst, target - frequency(lst).get(target))\n    \n    return search_in(lst, 1)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # write your code here\n    n = len(lst)\n    for i in range(1, n):\n        if lst[i] > lst[i-1]:\n            return lst[i]\n        if lst[i] == lst[i-1]:\n            if lst[i]!= 0 and lst[i] >= lst[i]:\n                return lst[i]", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0:\n        return -1\n    return max([lst.count(i) for i in range(1, len(lst)+1) if lst.count(i) >= i])", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def max_freq(lst):\n        arr = [lst.count(i) for i in lst]\n        arr.sort()\n        return arr[0] if len(arr)>0 else -1\n\n    def search_for_max_freq(lst):\n        curr = max_freq(lst)\n        lst.remove(curr)\n        if len(lst)==0:\n            return curr\n        return search_for_max_freq(lst)\n    return search_for_max_freq(lst)\n\n\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0:\n        return -1\n    freq = dict()\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq.iterkeys():\n        if freq[i] == i:\n            return i\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def find(lst, i):\n        if lst[i] >= lst[i]:\n            return i\n        return find(lst, i + 1)\n    result = []\n    for i, item in enumerate(lst):\n        if item > 0:\n            if find(lst, i) == i:\n                result.append(item)\n    if result == []:\n        return -1\n    return max(result)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    # return -1 if no such integer exists\n    if len(lst) == 0:\n        return -1\n\n    # find the frequency of each item in the list\n    counts = defaultdict(int)\n    for i in lst:\n        counts[int(i)] += 1\n\n    # find the max frequency\n    max_freq = 0\n    for x in counts:\n        if counts[x] > max_freq:\n            max_freq = counts[x]\n\n    # find the first integer greater than max_freq whose frequency is equal to the integer itself\n    for x in counts:\n        if counts[x] == max_freq:\n            if x > 0:\n                return x", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def frequency(lst):\n        res = {}\n        for num in lst:\n            if num in res:\n                res[num] += 1\n            else:\n                res[num] = 1\n        return res\n\n    count = frequency(lst)\n    print(max(count.items(), key=lambda x:x[1])[0] if count else -1)\n    \nsearch([1, 2, 4, 4, 4, 4, 4, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\nsearch([5, 5, 4, 4, 4])\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    # input validation\n    if not isinstance(lst, list) or len(lst) == 0:\n        return -1\n    result = 0\n    # try every number from 1 to the length of the list\n    for i in range(len(lst)):\n        # if the current number exists and is not zero, then increment the count\n        if lst[i]!= 0 and lst[i] <= i:\n            result += lst[i]\n        # if the count is greater than or equal to the number, then return the number\n        if result >= i:\n            return i\n    return -1</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    count = {}\n    for x in lst:\n        count[x] = count.get(x, 0) + 1\n    if max(count.items(), key=lambda x:x[1])[1] >= x:\n        return max(count.items(), key=lambda x:x[1])[0]\n    else:\n        return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    n = len(lst)\n    freq = [lst.count(x) for x in lst]\n    if max(freq) == n:\n        return max(freq)\n    else:\n        return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    frequency_map = dict()\n    for i in lst:\n        frequency_map[i] = frequency_map.get(i, 0) + 1\n\n    max_frequency = 0\n    max_value = -1\n    for i in frequency_map:\n        if frequency_map[i] >= max_frequency:\n            max_frequency = frequency_map[i]\n            max_value = i\n\n    return max_value", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def freq(lst, num):\n        return lst.count(num)\n    res = max(freq(lst, i) for i in lst) if lst else -1\n    return max([i for i in lst if freq(lst, i) >= i], key=lst.count) if res == -1 else res", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    value = 0\n    count = 0\n    for x in lst:\n        if value == 0:\n            value = x\n        if x == value:\n            count += 1\n        else:\n            if count >= x:\n                return value\n            else:\n                value = x\n                count = 1\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_freq = -1\n    for item in lst:\n        freq = lst.count(item)\n        if freq >= item:\n            if freq > max_freq:\n                max_freq = freq\n    return max_freq\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0: return -1\n    if lst[0] == 0:\n        return -1\n    num = lst[0]\n    for i in range(len(lst) - 1):\n        if lst[i] == num:\n            num += lst[i + 1]\n    if num == 0:\n        return -1\n    return num\n\nnums = []\nfor i in range(10):\n    nums.append(i)\nnums.sort()", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def count(lst):\n        result = {}\n        for i in lst:\n            result[i] = result.get(i, 0) + 1\n        return result\n\n    result = 0\n    for i in lst:\n        if i > result:\n            return i\n        if count(lst)[i] >= i:\n            result = i\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if not lst:\n        return -1\n    max_freq = 0\n    max_val = -1\n    for elem in lst:\n        freq = 0\n        for i in range(len(lst)):\n            if lst[i] == elem:\n                freq += 1\n        if max_val < 0:\n            max_val = elem\n        elif max_freq < freq:\n            max_val = elem\n            max_freq = freq\n    return max_val", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    def find_freq(lst):\n        freq = {}\n        for i in lst:\n            if i not in freq:\n                freq[i] = 1\n            else:\n                freq[i] += 1\n        return freq\n    def find_zero(lst):\n        zero = []\n        for i in lst:\n            if i == 0:\n                zero.append(i)\n        return zero\n    def find_lt(lst, find_freq(lst)):\n        lt = []\n        for i in lst:\n            if i in find_freq(lst) and find_freq(lst)[i] > i:\n                lt.append(i)\n        return lt\n    def find_gt(lst, find_freq(lst)):\n        gt = []\n        for i in lst:\n            if i in find_freq(lst) and find_freq(lst)[i] >= i:\n                gt.append(i)\n        return gt\n    result = find_gt(lst, find_freq(lst))\n    if not result:\n        result = find_lt(lst, find_freq(lst))\n    if not result:\n        result = find_zero(lst)\n    return result[0]</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    c=0\n    max=0\n    for n in lst:\n        if n>max:\n            c+=n\n            if c>n:\n                return max\n        max=n\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    if lst == []:\n        return -1\n\n    # make a copy of the list\n    new_lst = []\n    for ele in lst:\n        new_lst.append(ele)\n\n    # keep track of the frequency of the integers in the list\n    dict_ = {}\n    for ele in new_lst:\n        dict_[ele] = dict_.get(ele, 0) + 1\n\n    # keep track of the greatest frequency\n    max_freq = -1\n\n    # find the greatest value\n    for ele in dict_:\n        if dict_[ele] >= max_freq:\n            max_freq = dict_[ele]\n\n    return max_freq", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    total = 0\n    l = len(lst)\n    for i in lst:\n        total += 1\n        if total >= i:\n            return i\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    frequency = {}\n    max_frequency = 0\n    for value in lst:\n        if value in frequency:\n            frequency[value] += 1\n        else:\n            frequency[value] = 1\n    for key in frequency:\n        if frequency[key] >= max_frequency:\n            max_frequency = frequency[key]\n    return max_frequency\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # write code here\n    lst = list(set(lst))  # remove duplicate\n    res = 0\n    for i in lst:\n        if i >= res:\n            if i == lst.count(i):\n                res = i\n    return res", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    # write your code here\n    l = list(lst)\n    print(l)\n    l.sort()\n    print(l)\n    print(l.count(l[-1]))\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    lst = sorted(set(lst))\n    last = 0\n    for i in lst:\n        if i > last:\n            return i\n        last = i + 1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    nums = lst\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    sorted_num = sorted(nums)\n    for i in range(n):\n        if nums[i]!= sorted_num[i]:\n            return -1\n    k = sorted_num.index(max(sorted_num))\n    return k + 1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    res = -1\n    sum_freq = 0\n    for x in lst:\n        if x == res:\n            sum_freq += x\n            continue\n        if x == 0:\n            continue\n        if sum_freq >= x:\n            continue\n        if sum_freq < x:\n            res = 0\n        sum_freq = 0\n        res = x\n    return res", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    values = []\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            values.append(lst[i])\n    maxvalue = -1\n    for i in range(len(values)):\n        if values[i] >= values[maxvalue]:\n            maxvalue = i\n    if maxvalue >= 0:\n        return maxvalue + 1\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if lst == []:\n        return -1\n    res = 0\n    for i in lst:\n        if lst.count(i) >= res:\n            res = lst.count(i)\n    return res", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if not lst:\n        return -1\n    values = set()\n    while lst:\n        if lst[0] in values:\n            return -1\n        values.add(lst[0])\n        lst.pop(0)\n    return 0", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    pass", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0:\n        return -1\n    max_freq = 0\n    cur_freq = 0\n    cur_val = 0\n    for num in lst:\n        if cur_freq > max_freq:\n            max_freq = cur_freq\n        cur_freq += 1\n        if num <= cur_val:\n            cur_val = 0\n            cur_freq = 0\n        else:\n            cur_val += 1\n    if max_freq >= cur_val:\n        return cur_val\n    else:\n        return -1</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def frequency(lst):\n        count = {}\n        for i in lst:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        return count\n\n    def search_aux(lst, first, last, key):\n        if first == last:\n            return key\n        elif lst[first] <= key <= lst[last - 1]:\n            return search_aux(lst, first + 1, last, key)\n        elif key < lst[first]:\n            return search_aux(lst, first, last, key)\n        else:\n            return search_aux(lst, first, last - 1, key)\n\n    return search_aux(lst, 0, len(lst) - 1, 0)\n\nlst = [1, 1, 1, 1, 1]", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0:\n        return -1\n    else:\n        val = 0\n        i = 0\n        while i < len(lst):\n            if lst[i] == 0:\n                break\n            else:\n                i += 1\n        if i == len(lst):\n            return 0\n        else:\n            while i < len(lst):\n                if lst[i] == val:\n                    val += 1\n                else:\n                    i += 1\n                    val = 1\n        return val\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    dict1 = {}\n    for i in lst:\n        dict1[i] = dict1.get(i, 0) + 1\n    dict2 = {}\n    for i in dict1:\n        if dict1[i] > dict2.get(i, 0):\n            dict2[i] = dict1[i]\n    for i in dict2:\n        if dict2[i] == i:\n            return i\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if not lst:\n        return -1\n    lst = sorted(lst)\n    max_freq = 0\n    max_freq_int = 0\n    for i in lst:\n        if i == 0:\n            continue\n        if i > 0:\n            if i in lst:\n                if len(lst) - lst.index(i) > max_freq:\n                    max_freq = len(lst) - lst.index(i)\n                    max_freq_int = i\n            else:\n                return -1\n        else:\n            return -1\n    return max_freq_int</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    n = len(lst)\n    def get_max(freq):\n        if freq == 0: return -1\n        if freq == 1: return lst[0]\n        return max(map(lambda x: get_max(x-1), xrange(1, freq+1)))\n    return get_max(n)\nassert search([4, 1, 2, 2, 3, 1]) == 2\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nassert search([5, 5, 4, 4, 4]) == -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_freq = 1\n    max_freq_index = -1\n    for index, elem in enumerate(lst):\n        if elem == 0:\n            continue\n        if elem > max_freq:\n            max_freq_index = index\n            max_freq = elem\n        elif elem == max_freq:\n            max_freq_index = index\n\n    if max_freq_index == -1:\n        return -1\n\n    # Get the element at max_freq_index\n    elem_at_max_index = lst[max_freq_index]\n    # Search again, starting from max_freq_index + 1, if the element at this index is not 0\n    for index, elem in enumerate(lst[max_freq_index + 1:], max_freq_index + 1):\n        if elem == 0:\n            continue\n        if elem > elem_at_max_index:\n            return -1\n        elif elem == elem_at_max_index:\n            return index\n\n    return max_freq_index</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0:\n        return -1\n    else:\n        answer = 0\n        for i in lst:\n            if i >= answer and i > 0:\n                answer += 1\n        if answer == len(lst):\n            return answer\n        else:\n            return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Complete this function\n    if lst == []:\n        return -1\n    for i in lst:\n        if i > 0:\n            count = 0\n            for j in lst:\n                if j == i:\n                    count += 1\n            if count >= i:\n                return i\n            else:\n                return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) < 2:\n        return -1\n    m = max(lst)\n    pos = 0\n    for i in range(1, len(lst)):\n        if lst[i] == m:\n            pos += 1\n        if pos >= m:\n            break\n    return m", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # The code can be written in a better way\n    # But since I want to challenge myself, I have taken this approach\n    # You could also have a binary search approach, but that would be a little difficult to understand\n    # So I have avoided that.\n    res = -1\n    for i in lst:\n        if i > 0:\n            if i in lst:\n                res = i\n            else:\n                res = -1\n            break\n    return res", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def search_aux(lst, freq, max_freq):\n        '''\n        The auxiliary function to search the greatest integer in the list that has a frequency greater than or equal to the value of the integer itself.\n        '''\n        if max_freq == 0:\n            return max_freq\n        for i in lst:\n            if i == max_freq:\n                if freq >= max_freq:\n                    return max_freq\n            else:\n                max_freq = search_aux(lst, freq + 1, max_freq)\n\n    return search_aux(lst, 0, 0)\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    new_lst = []\n    for i in lst:\n        if i in new_lst:\n            new_lst[i] += 1\n        else:\n            new_lst.append(i)\n    res = None\n    for i in new_lst:\n        if i!= 0 and i in new_lst:\n            if new_lst[i] >= i:\n                res = i\n                break\n    return res", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # The solution is to iterate through the list, and if the value is not found then return -1.\n    # If the value is found then increase the frequency of the value by 1. If the value has reached its \n    # frequency then return it, otherwise increment its value by 1 and re-iterate.\n\n    def get_freq(val):\n        '''\n        Return the frequency of a value.\n        '''\n        count = 0\n        for element in lst:\n            if element == val:\n                count += 1\n        return count\n\n    def get_max_val(lst):\n        '''\n        Return the maximum integer in the list, and its frequency.\n        '''\n        max_val = lst[0]\n        max_count = get_freq(lst[0])\n        for element in lst:\n            if get_freq(element) >= max_count:\n                if element > max_val:\n                    max_val = element\n                    max_count = get_freq(element)\n        return max_val, max_count\n\n    def search_helper(lst):\n        '''\n        Recursively search for the maximum value from a list of integers.\n        '''\n        if len(lst) == 1:\n            return lst[0], get_freq(lst[0])\n        else:\n            return search_helper(lst[1:]) + lst[0], get_freq(lst[0])", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Python 3 needs to call the function with arguments in parentheses \n    #   so that the argument is passed by reference and not a copy\n    return -1 if not lst else max(set(item for item, count in Counter(lst).items() if count >= item)) if type(lst) == list else lst\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    map = {}\n    for i in lst:\n        map[i] = map.get(i, 0) + 1\n    def query(i):\n        return map[i] if i > 0 else 0\n    def query_max(a, b):\n        return max(a, b) if a > b else min(a, b)\n    def query_max2(a, b):\n        return (b, max(a, b)) if a > b else (a, min(a, b))\n    def query_max3(a, b):\n        return max(a, b) if a > b else min(a, b)\n    #def query_max4(a, b):\n    #    return max(a, b) if a > b else 0\n    def query_max5(a, b):\n        return (a, b) if a > b else (b, a)\n    def query_max6(a, b):\n        return max(a, b) if a > b else a\n    def query_max7(a, b):\n        return max(a, b) if a > b else b\n    def query_max8(a, b):\n        return max(a, b", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if not lst:\n        return -1\n\n    # using defaultdict\n    d = collections.defaultdict(int)\n    for elem in lst:\n        d[elem] += 1\n    return max(d.values(), key=d.get)\n\n'''", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # write your code here\n    res = []\n    lst = [i for i in lst]\n    lst.sort()\n    for i in lst:\n        if i > 0:\n            for j in range(i, len(lst)+1):\n                res.append(lst[j])\n            for j in range(i+1, len(lst)+1):\n                res.append(lst[j] - 1)\n    return res", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    frequency = {}\n    for n in lst:\n        frequency[n] = frequency.get(n, 0) + 1\n    for n, f in frequency.items():\n        if n <= 0 or f < n:\n            return -1\n    return max(frequency, key=frequency.get)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # dp = dp[:-1] + dp[1:]\n    # dp = dp[:-1] + dp[1:]\n    # dp = dp[:-1] + dp[1:]\n    dp = [0]\n    for item in lst:\n        if item > 0:\n            dp.append(dp[-1][item] + 1)\n        else:\n            dp.append(-1)\n    return dp[-1][max(dp)]", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def check(value, pos):\n        frequency = 0\n        for i in xrange(len(lst)):\n            if value == lst[i]:\n                frequency += 1\n                if frequency >= value:\n                    return pos\n        return -1\n    \n    max_value = -1\n    max_pos = -1\n    for i in xrange(len(lst)):\n        if max_value < lst[i]:\n            max_value = lst[i]\n            max_pos = i\n    return check(max_value, max_pos)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # write code here\n    res = []\n    list_of_freq = []\n    for i in lst:\n        if i in res:\n            list_of_freq[res.index(i)] += 1\n        else:\n            res.append(i)\n            list_of_freq.append(1)\n    #for i in res:\n    #    print(i, list_of_freq[i])\n    temp = 0\n    count = 0\n    for i in list_of_freq:\n        temp += i * count\n        count += 1\n        if temp >= i:\n            return i\n    return -1</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if not lst:\n        return -1\n    else:\n        map1 = {}\n        for i in lst:\n            if i in map1:\n                map1[i] = map1[i] + 1\n            else:\n                map1[i] = 1\n        for i in map1:\n            if map1[i] >= i:\n                return i\n        return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Trivial Solution:\n    #   lst.count(lst[i]) > i\n    #   Loop over all elements to find max count.\n    #   Check if count >= element\n    #   Return max count, or -1 if count < element\n    #   Time Complexity : O(n**2)\n    #   Space Complexity : O(n)\n    # Trick 1:\n    #   Get count of all elements in O(n)\n    #   Sort count in O(nlogn)\n    #   Find largest count greater than element in O(nlogn)\n    #   Time Complexity : O(nlogn) + O(n) = O(nlogn)\n    #   Space Complexity : O(nlogn)\n    # Trick 2:\n    #   Create a dict with count as key\n    #   Sort dict in O(nlogn)\n    #   Find the max key greater than element in O(nlogn)\n    #   Time Complexity : O(nlogn) + O(n) = O(nlogn)\n    #   Space Complexity : O(nlogn)\n    # Trick 3:\n    #   Set a count to 1, and increment it if the count of the element is greater than it.", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def dfs(lst, v, f, acc):\n        if len(lst) == 0:\n            if f[v] >= v:\n                return v\n            else:\n                return -1\n        for i in lst:\n            if i >= v:\n                dfs(lst, i, f, acc)\n                acc = max(acc, dfs(lst, i, f, acc))\n        return acc\n    return dfs(lst, 0, {}, 0)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_freq = 0\n    max_val = -1\n    for num in lst:\n        if num > max_val and num > 0 and lst.count(num) >= num:\n            max_val = num\n            max_freq = lst.count(num)\n    return max_val", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    counter = 0\n    for el in lst:\n        if el == counter:\n            counter += 1\n        else:\n            counter = 0\n    if counter >= lst[lst.index(counter)]:\n        return counter\n    else:\n        return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    count = {}\n    n = lst[0]\n    count[n] = 0\n    for i in range(1, len(lst)):\n        if lst[i] == n:\n            count[n] += 1\n        else:\n            if count[n] >= n:\n                return n\n            n = lst[i]\n            count[n] = 0\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0:\n        return -1\n    frequencies = {}\n    for i in lst:\n        if i in frequencies:\n            frequencies[i] += 1\n        else:\n            frequencies[i] = 1\n    max_freq = -1\n    max_val = -1\n    for k in frequencies:\n        if frequencies[k] > max_freq:\n            max_freq = frequencies[k]\n            max_val = k\n    return max_val\n\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    frequency = {}\n    for x in lst:\n        frequency[x] = frequency.get(x,0) + 1\n    max_freq = 0\n    max_val = 0\n    for x in frequency:\n        if frequency[x] >= max_freq:\n            max_val = x\n            max_freq = frequency[x]\n    return max_val if max_freq > 0 else -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    #Try:\n    #listLen = len(lst)\n    #return lst[listLen-1]\n    #Try:\n    #listLen = len(lst)\n    #for i in range(0,listLen):\n    #    if lst[i] == 1:\n    #        return i\n    #    else:\n    #        pass\n    #return -1\n    def getFrequency(lst, val):\n        '''\n        getFrequency:\n        lst: List of integers\n        val: int to find the frequency of\n        '''\n        #Try:\n        #return len([item for item in lst if item == val])\n        #Try:\n        return sum(1 for i in lst if i == val)\n\n    listLen = len(lst)\n    for i in range(0, listLen):\n        if getFrequency(lst, i) > i:\n            return i\n    return -1</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_count = 0\n    max_num = -1\n    for i in lst:\n        if i == 0:\n            continue\n        count = lst.count(i)\n        if count > max_count:\n            max_count = count\n            max_num = i\n    return max_num", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        find = -1\n        for index in range(len(lst)):\n            if find == -1 and lst[index] > 0:\n                find = lst[index]\n            elif find!= -1:\n                if lst[index] == find:\n                    find += 1\n                else:\n                    return find\n\n    return find", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    from collections import Counter\n    return max(i for i,n in Counter(lst).items() if n >= i)\n\nA:\n\nA few general comments:\n\nTo my eyes, search([4, 1, 2, 2, 3, 1]) == 2 is not really the result you want. I think you want search([4, 1, 2, 2, 3, 1]) == 4, because 4 has frequency greater than or equal to 4. However, if you do search([4, 1, 2, 2, 3, 1]) == 4, you need to handle the case when the list contains only one element, and the frequency of that element is 0. Otherwise, you'll get an infinite loop. Is the problem statement clear enough that you don't need to do that?\n\nUse lower_case_with_underscores for your function and variable names, not CamelCase.\n\nA Counter will automatically filter out the zeros for you. Instead of n >= i, you can just use n >= i, so there's no need for the if n >= i:. If the filter is turned off, it will raise an exception. If you're worried about performance, you can use a separate filter:", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    result = -1\n    temp = []\n    temp.append(lst[0])\n    for i in lst[1:]:\n        if i == temp[0]:\n            temp.append(i)\n        else:\n            result = temp.count(i)\n            break\n    return result\n\nimport time\ntStart = time.time()", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # \u60f3\u5230\u4e8c\u5206\u67e5\u627e\u548cDFS\u7ed3\u5408\uff0c\u5e94\u8be5\u53ef\u4ee5\u5feb\u901f\u67e5\u627e\n    max_freq = 0\n    max_val = -1\n    for i in range(len(lst)):\n        if lst[i]!= max_val:\n            # \u627e\u51fa\u5f53\u524d\u9891\u7387\u6700\u5927\u7684\u503c\n            curr_freq = lst.count(i)\n            if curr_freq > max_freq:\n                max_freq = curr_freq\n                max_val = i\n    return max_val if max_freq >= max_val else -1\n\n\ntest_cases = [\n    [4, 1, 2, 2, 3, 1],\n    [1, 2, 2, 3, 3, 3, 4, 4, 4],\n    [5, 5, 4, 4, 4]\n]\nfor test_case in test_cases:\n    print(search(test_case))</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    #https://www.geeksforgeeks.org/biggest-number-greater-than-0-frequency-greater-than-or-equal-itself/\n    \"\"\" from collections import Counter\n        lst = [4, 1, 2, 2, 3, 1]\n        print(max(x for x in lst if x>=0 and lst.count(x) >=x))\n        print(max(x for x in Counter(lst).values() if x>0)) \"\"\"\n\n    def search_helper(lst, val):\n        if not lst: return False\n        if lst[0] == val: return True\n        if val < lst[0]: return False\n        for x in lst[1:]:\n            if x == val: return True\n            if x < val: return False\n        return False\n\n    # solution\n    return max(x for x in lst if x>=0 and lst.count(x) >=x) if len(lst) > 0 else -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    res = -1\n    for i in lst:\n        if res >= i:\n            continue\n        res = max(res, search(lst.remove(i)))\n    return res", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    # Algorithm\n    if len(lst) == 0:\n        return -1\n\n    # Use a dict to store the frequency of each number\n    freq = {}\n    for x in lst:\n        freq[x] = freq.get(x, 0) + 1\n\n    # find the max number that is greater than zero\n    res = 0\n    for num in freq:\n        if num > 0 and freq[num] >= num:\n            res = num\n\n    return res", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    prev = -1\n    count = 0\n    for i in lst:\n        if prev == -1 and i > 0 and i >= count:\n            return i\n        elif prev!= -1 and i == prev:\n            count += 1\n        elif i > 0:\n            count = 1\n        prev = i\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def search(lst):\n        '''\n        You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n        zero, and has a frequency greater than or equal to the value of the integer itself. \n        The frequency of an integer is the number of times it appears in the list.\n        If no such a value exist, return -1.\n        Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n        '''\n        def search(lst):\n            '''\n            You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n            zero, and has a frequency greater than or equal to the value of the integer itself. \n            The frequency of an integer is the number of times it appears in the list.\n            If no such a value exist, return -1.\n            Examples:\n                search([4, 1, 2, 2, 3, 1]) == 2\n                search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n                search(", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def get_freq(lst, n):\n        freq = 0\n        for i in lst:\n            if i == n:\n                freq += 1\n        return freq\n    def search(lst):\n        max = 0\n        for i in lst:\n            if get_freq(lst, i) >= i:\n                if get_freq(lst, i) > max:\n                    max = get_freq(lst, i)\n        return max\n    return search(lst)\n\n\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def dfs(data):\n        f = 0\n        for i in data:\n            if data.count(i) > f and i > 0:\n                return i\n        return -1\n    \n    return dfs(lst)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    num_list = []\n    for i in lst:\n        num_list.append(i)\n\n    tmp = max(num_list)\n    if tmp <= 0 or tmp not in num_list:\n        return -1\n    else:\n        for i in num_list:\n            if i == tmp:\n                tmp += 1\n                break\n\n        return tmp", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # \u52a8\u6001\u89c4\u5212\n    def dp(lst):\n        # dp[i][j]\u8868\u793a\u4ece\u7b2ci\u4f4d\u5230\u7b2cj\u4f4d\u4e2d\u6700\u5927\u7684\u6570\u5b57\n        dp = [[-1 for _ in range(len(lst) + 1)] for _ in range(len(lst) + 1)]\n        for i in range(len(lst)):\n            for j in range(i + 1, len(lst)):\n                if lst[j] >= lst[i]:\n                    dp[i][j] = max(dp[i][j - 1], lst[i]) # \u5982\u679c\u5f53\u524d\u6570\u5b57\u5927\u4e8e\u4e0a\u4e00\u4e2a\uff0c\u90a3\u4e48\u5c06\u4e0a\u4e00\u4e2a\u7684\u503c\u8d4b\u503c\u7ed9\u5f53\u524d\u6570\u5b57\n        return dp[-1][-1]\n    return dp(lst)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def print_freq(lst, freq):\n        for i in range(len(lst)):\n            print(freq[i], lst[i], end=\" \")\n        print(\"\")\n\n    def find_freq(lst):\n        freq = {}\n        for i in range(len(lst)):\n            if lst[i] in freq:\n                freq[lst[i]] += 1\n            else:\n                freq[lst[i]] = 1\n        return freq\n\n    def find(lst, freq):\n        for i in range(len(lst)):\n            if i == len(lst) - 1:\n                if freq[i] < lst[i]:\n                    return -1\n                else:\n                    return i\n            else:\n                if lst[i] - freq[i] >= lst[i + 1]:\n                    return i + 1\n                else:\n                    find(lst, freq)\n\n    lst = list(map(int, input().strip().split()))\n    return find(lst, find_freq(lst))\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def num_freq(lst):\n        '''\n        Return a dictionary with key - number of integer and value - number of times that number in the list\n        '''\n        ret = {}\n        for i in lst:\n            if i not in ret:\n                ret[i] = 1\n            else:\n                ret[i] += 1\n        return ret\n    def freq_sort(lst):\n        '''\n        Return a list with sorted dictionary by value (=number of occurances of an integer)\n        '''\n        return sorted(lst, key=lambda x:x['value'])\n    def sort_num(lst):\n        '''\n        Return a sorted list of integers\n        '''\n        return sorted(lst)\n    def search_freq(lst):\n        '''\n        Iterate through sorted dictionary and check if the number of occurances of an integer is greater\n        than or equal to the number of integer itself.\n        '''\n        for i in freq_sort(num_freq(lst)):\n            if i['value'] >= i['key']:\n                return i['key']\n        return -1\n    # Run\n    num_lst = sort_num(num_freq(lst))\n    print(search_freq(num_lst))</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def _helper(lst, res):\n        if not lst:\n            return res\n        if res >= 0 and lst[0] == res:\n            res += lst.count(res)\n            _helper(lst[1:], res)\n        else:\n            _helper(lst, -1)\n\n    _helper(lst, -1)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    l = lst\n    # sort the list\n    l.sort()\n    result = 0\n    for e in l:\n        if e > result:\n            result = e\n    return result", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0:\n        return -1\n    frequencies = dict()\n    for i in lst:\n        frequencies[i] = frequencies.get(i, 0) + 1\n    max_freq = 0\n    max_value = 0\n    for v, f in frequencies.items():\n        if f > max_freq:\n            max_freq = f\n            max_value = v\n    return max_value", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    lst = list(map(int, lst))\n    if len(lst) == 0: return -1\n    d = {}\n    for x in lst:\n        d[x] = d.get(x, 0) + 1\n    max_val = 0\n    max_key = -1\n    for x in d:\n        if d[x] >= max_val:\n            max_val = d[x]\n            max_key = x\n    return max_key\n\n'''\nI know this code works well, but I am not sure if the complexity of this code is O(n).\n'''", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def _search(lst):\n        for i in lst:\n            if i > 0:\n                if i in lst and lst.count(i) >= lst.count(i-1):\n                    return i\n                else:\n                    return -1\n    return _search(lst)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def search_helper(lst, num):\n        if len(lst) == 0 or num == 0:\n            return -1\n        if num <= lst[-1]:\n            return num\n        return max(search_helper(lst[:-1], num), search_helper(lst[:-1], num - lst[-1]))\n    return search_helper(lst, 0)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in lst:\n        if len(list(filter(lambda x: x==i, lst))) >= i:\n            return i", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def get_freq(lst):\n        '''\n        Return a dictionary that maps each integer in the list to its frequency.\n        Return None if the list is empty.\n        '''\n        if not lst:\n            return None\n        freq = {}\n        for num in lst:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        return freq\n    freq = get_freq(lst)\n    if freq:\n        max_freq = 0\n        for k, v in freq.items():\n            if v >= k:\n                if v > max_freq:\n                    max_freq = v\n        return max_freq\n    else:\n        return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    a = list()\n    for i in lst:\n        a.append(i)\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    for i in a:\n        if d[i] >= i:\n            return i\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    freq = [-1] * (len(lst) + 1)\n    for i in range(1, len(lst) + 1):\n        if freq[i] >= i:\n            return i\n        else:\n            freq[i] = freq[i - 1] + 1\n\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    mylist = []\n    for i in lst:\n        mylist.append(mylist.count(i))\n    return max(mylist)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if lst == []:\n        return -1\n    num = lst[0]\n    cnt = 0\n    for i in lst:\n        if i == num:\n            cnt += 1\n        else:\n            cnt = 0\n        if cnt >= num:\n            return num\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0:\n        return -1\n    # sort the list to make the following code more efficient\n    lst.sort()\n    # create a dictionary to store the count of each number\n    freq = {}\n    # loop through all numbers and store the count of each number in the dictionary\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    # loop through all numbers in the dictionary, starting from the largest\n    for key in sorted(freq, reverse=True):\n        if freq[key] >= key:\n            return key\n    # if the loop is not broken, there is no number greater than zero with a frequency greater than or equal to itself\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    prev = 0\n    max = 0\n    for num in lst:\n        if num > prev:\n            prev = num\n        else:\n            return -1\n        if num == max:\n            max += 1\n        else:\n            if max > 0:\n                return max\n    return max", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst)==0: return -1\n    maxVal=lst[0]\n    maxFreq=1\n    for i in lst:\n        if i>maxVal: \n            maxVal=i\n            maxFreq=1\n        else:\n            if maxFreq<i==lst.count(i):\n                maxVal=i\n                maxFreq=lst.count(i)\n            else:\n                return -1\n    return maxVal", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    result = -1\n    count = 0\n    for i in lst:\n        if i == 0:\n            result = -1\n        elif count >= i:\n            result = i\n        count += 1\n    return result", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) < 1:\n        return -1\n\n    n = len(lst)\n    dict = {}\n    for i in range(n):\n        dict[lst[i]] += 1\n\n    for k, v in dict.items():\n        if v >= k:\n            return k\n\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # https://leetcode.com/problems/search-greatest-integer-that-greater-than-zero/\n    # hint: start from the end of the list, go to the beginning of the list, increase the value if the frequency greater than or equal to the value\n    #  and keep track of the maximum value visited\n    lst = sorted(lst)\n    val, freq = 0, 0\n    last = len(lst) - 1\n    for i in range(last, 0, -1):\n        if lst[i] == val:\n            freq += 1\n        else:\n            if freq >= val:\n                val = lst[i]\n            else:\n                break\n    return val", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def _count_freq(lst, val):\n        count = 0\n        for e in lst:\n            if e == val:\n                count += 1\n        return count\n    \n    def _find_max_freq(lst, val):\n        current_max_freq = 0\n        current_max_val = -1\n        for e in lst:\n            if e == val:\n                current_max_freq += 1\n                if current_max_freq > current_max_val:\n                    current_max_val = current_max_freq\n        return current_max_val\n    \n    max_freq = _find_max_freq(lst, 0)\n    if max_freq > 0:\n        return max_freq\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    res = -1\n    for i in lst:\n        if i >= res and i in lst:\n            res = i\n    return res", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # write code here", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0: return -1\n    count = 1\n    for i in lst:\n        if count == i: count += 1\n        elif count > i: return i\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def search_helper(lst, x):\n        if lst is None:\n            return -1\n        if x in lst:\n            return x\n        else:\n            return search_helper(lst[:x]+lst[x+1], x+1)\n    return search_helper(lst, 0)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_freq = lst[0]\n    max_val = 0\n    for x in lst:\n        if x == 0:\n            return -1\n        if x <= max_val and x > 0:\n            if x in lst:\n                max_val = x\n            else:\n                max_freq = x\n                max_val = x\n    return max_freq\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if not lst:\n        return -1\n    list1 = sorted(lst, key = lambda x:(-lst.count(x), x))\n    while list1[-1]:\n        if list1[-1][0] >= list1[-1][2]:\n            return list1[-1][1]\n        list1.pop()\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if lst == []: return -1\n\n    #lst = list(set(lst))\n    lst.sort()\n\n    freqs = {}\n    i = 0\n    while i < len(lst):\n        freqs[lst[i]] = freqs.get(lst[i], 0) + 1\n        i += 1\n\n    for key in freqs:\n        if freqs[key] >= key:\n            return key\n\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # write code here", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Use a dictionary to count the frequency of each element in the list\n    d = {}\n    for i in lst:\n        d[i] = d.get(i, 0) + 1\n\n    # Find the largest element that appears more than once\n    for i in lst:\n        if d[i] >= i:\n            return i\n\n    # No such element exists\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0:\n        return -1\n    count = 0\n    max_freq = 0\n    for x in lst:\n        if x == 0:\n            continue\n        count += 1\n        if count > max_freq:\n            max_freq = count\n    return max_freq if max_freq > 0 else -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    max_count = 0\n    for x in lst:\n        if x > max_count and lst.count(x) >= x:\n            max_count = x\n\n    return max_count if max_count > 0 else -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if not lst:\n        return -1\n    index = 0\n    while True:\n        if lst[index] == 0:\n            break\n        index += 1\n    index -= 1\n    if index >= len(lst):\n        return -1\n    count = 0\n    last = -1\n    while index < len(lst):\n        if lst[index] == last:\n            count += 1\n        else:\n            last = lst[index]\n            count = 1\n        if count >= lst[index]:\n            return lst[index]\n        index += 1\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    val = 0\n    for i in lst:\n        if i >= val:\n            val = i\n    if val == 0:\n        return -1\n    else:\n        return val", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def num_freq(num, lst):\n        '''\n        num_freq(num, lst):\n            the frequency of num in lst\n        '''\n        if num in lst:\n            return lst.count(num)\n        else:\n            return 0\n\n    def search_binary_search(lst):\n        '''\n        search_binary_search(lst):\n            BFS with binary search algorithm\n        '''\n        # Calculate the frequency of each integer in lst\n        frequency = {}\n        for num in lst:\n            frequency[num] = num_freq(num, lst)\n\n        # Initialize the result\n        max_num = 0\n        max_freq = 0\n        # Initialize the queue\n        front = []\n        back = []\n\n        # Initialize the queue for binary search\n        q = []\n        # q = [(i, i) for i in range(1, len(lst))]\n        q = [(i, frequency[i]) for i in range(1, len(lst))]\n        # Initialize the flags\n        flag = True\n        prev_num = 0\n        front_flag = True\n\n        # While the queue is not empty\n        while flag:\n            # Get the front value\n            n, freq = q[0]\n            q.pop(0)\n            # If the front value is greater", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if not lst:\n        return -1\n    max_freq = 0\n    result = -1\n    for i in lst:\n        if i >= max_freq:\n            max_freq = i\n        if i > result and max_freq >= i:\n            result = i\n    return result", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    #\n    # remove dups\n    #\n    lst = list(set(lst))\n    #\n    # convert to a dict\n    #\n    lst_dict = {}\n    for i in lst:\n        lst_dict[i] = lst_dict.get(i, 0) + 1\n    #\n    # search the dict\n    #\n    max_val = -1\n    for i in lst_dict:\n        if i > max_val and lst_dict[i] >= i:\n            max_val = i\n    return max_val", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    f = 1\n    for i in lst:\n        if f < len(set(lst)):\n            f = len(set(lst))\n        if i > 0:\n            if i > f and i <= len(set(lst)):\n                return i\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if not lst:\n        return -1\n    lst = sorted(set(lst))\n    for x in lst:\n        if lst.count(x) >= x:\n            return x\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # you must write code here\n    import collections\n    from collections import Counter\n    ctr = Counter(lst)\n    max_freq = 0\n    max_val = 0\n    for key, val in ctr.items():\n        if val > max_freq:\n            max_freq = val\n            max_val = key\n    if max_freq < max_val:\n        return -1\n    else:\n        return max_val\n        \nsearch([4, 1, 2, 2, 3, 1]) == 2\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nsearch([5, 5, 4, 4, 4]) == -1\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    return max(i for i in lst if lst.count(i)>=i)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    ret = -1\n    for x in lst:\n        if ret == -1:\n            ret = x\n        elif x == 0:\n            continue\n        elif x < ret:\n            ret = x\n        elif x == ret:\n            ret += x - 1\n    return ret", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # write code here\n    if lst == []:\n        return -1\n    else:\n        for i in lst:\n            if i <= 1:\n                return -1\n            elif (i % 2 == 0):\n                return (lst.count(i) + search(lst[i+1:]))\n            else:\n                return search(lst[i-1:])", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # O(n^2) but can be solved in O(n log n) using heapsort\n    if not lst:\n        return -1\n    freqs = {}\n    cnt = 0\n    for i in lst:\n        cnt += 1\n        freqs[i] = cnt\n    heapq.heapify(freqs)\n    return max(freqs, key=lambda x: freqs[x]) if freqs[max(freqs, key=lambda x: freqs[x])] >= x else -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0:\n        return -1\n    # max_freq = 0\n    max_freq = -1\n    for x in lst:\n        # if x > max_freq:\n        #     max_freq = x\n        if x >= max_freq:\n            return x\n        if x == 0:\n            return -1\n    # print max_freq\n    # print max_freq, lst[max_freq]\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    length = len(lst)\n    #a = 0\n    #for i in lst:\n    #    a += 1 if i > 0 else 0\n    #return a if a > 0 else -1\n    return max(i for i in range(length) if lst[i] > 0 and lst.count(i) >= i)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    result = -1\n\n    for x in lst:\n        if x > 0 and lst.count(x) >= x:\n            if x > result:\n                result = x\n\n    return result", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    count = {}\n    for i in lst:\n        if i not in count:\n            count[i] = 0\n        else:\n            count[i] += 1\n    for i in count:\n        if count[i] >= i:\n            return i", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Not making the use of 'frequency' as a parameter since it would be redundant here\n    if not lst:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    lst = [int(x) for x in lst]\n    # noinspection PyUnresolvedReferences\n    for n in lst:\n        if n > 0:\n            if n in lst:\n                return n\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # \u4f20\u7edf\u7684\u904d\u5386\u6cd5 \u5b9e\u73b0\u590d\u6742\u5ea6\u4e3aO(n^2)\n    # for i in lst:\n    #     if i > 0 and i in lst and i > lst.count(i):\n    #         return i\n    # return -1\n\n    # dict\n    # dict\u7684\u67e5\u627e\u590d\u6742\u5ea6\u4e3aO(1)\n    # return max(lst.keys(), key=lambda k: lst[k]) if lst else -1\n\n    # Set\n    # set\u7684\u67e5\u627e\u590d\u6742\u5ea6\u4e3aO(1)\n    # return max(lst, key=lst.count) if lst else -1\n\n    # Counter\n    # count\u7684\u67e5\u627e\u590d\u6742\u5ea6\u4e3aO(n)\n    return max(Counter(lst), key=lambda k: k[1]) if lst else -1\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    result = -1\n    for i in lst:\n        if len(set(lst).intersection(set([i]))) >= i:\n            result = max(result, i)\n    return result if result >= 0 else -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    counts = collections.Counter(lst)\n    maxFreq = max(counts.values())\n    maxFreqPos = counts[maxFreq]\n    while maxFreqPos >= maxFreq:\n        maxFreq = maxFreqPos\n        maxFreqPos = counts[maxFreq]\n    return maxFreqPos", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def all_freqs(lst):\n        res = { }\n        for x in lst:\n            if x in res:\n                res[x] += 1\n            else:\n                res[x] = 1\n        return res\n\n    def search_biggest(lst, i, res):\n        if not lst[i]:\n            return res\n        if len(lst) - i <= 1:\n            return search_biggest(lst, i+1, res)\n        if lst[i] in res:\n            if res[lst[i]] < lst[i]:\n                return search_biggest(lst, i+1, res)\n            elif res[lst[i]] > lst[i]:\n                return search_biggest(lst, i, res)\n        return search_biggest(lst, i+1, res.copy())\n    return search_biggest(lst, 0, { })\n\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    n = lst.count(lst[0])\n    for num in lst:\n        if n > num:\n            return num\n        n -= num", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def _helper(lst, n):\n        if n == 0:\n            return 0\n        if n < 0:\n            return -1\n        if n in lst:\n            return _helper(lst, lst.index(n) + 1)\n        return _helper(lst, n - 1)\n    return max(map(_helper, lst, xrange(len(lst))))", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def frequency(lst, i):\n        if i == len(lst):\n            return lst.count(i)\n        else:\n            return lst.count(i) + frequency(lst, i + 1)\n    if not lst:\n        return -1\n    n = 0\n    maxn = 0\n    for x in lst:\n        if frequency(lst, n) >= x:\n            if x > maxn:\n                maxn = x\n        n += 1\n    return maxn", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    low, high = 0, len(lst) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] > 0:\n            if lst[mid] > lst[mid - 1]:\n                low = mid + 1\n            elif lst[mid] < lst[mid - 1]:\n                high = mid - 1\n            else:\n                return mid - 1\n        else:\n            high = mid - 1\n    return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def find(lst, num, freq):\n        if lst[freq]!= num:\n            return -1\n        if freq == len(lst) - 1:\n            return num\n        else:\n            return max(find(lst, lst[freq], freq + 1), num)\n    return max(find(lst, lst[0], 0), -1)", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Recursion\n    def search(lst):\n        if len(lst)==0: return 0\n        if len(lst)==1: return lst[0]\n        if lst[0]==0: return search(lst[1:])\n        if lst[0]==1: return search(lst[1:])+1\n        if lst[0]>1: return search(lst[1:])+lst[0]\n        return -1\n    # Binary search\n    def search(lst):\n        lo = 0\n        hi = len(lst)-1\n        while lo<=hi:\n            mid = (lo+hi)/2\n            if lst[mid]>1: return mid\n            if lst[mid]<1: lo=mid+1\n            else: hi=mid-1\n        return -1\n    # Return the max value of both\n    return max(search(lst), search(lst[1:]))</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if not lst:\n        return -1\n\n    result = -1\n    lst.sort()\n    for i in lst:\n        if i >= result:\n            result = i\n\n    return result", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def valid(n, lst):\n        return lst.count(n) >= n\n    def search(lst):\n        result = []\n        for i in lst:\n            if i > 0:\n                result.append(i)\n                if valid(i, lst):\n                    return i\n        return -1\n    return search(lst)</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[1]\n    if len(lst) == 3:\n        return max(lst)\n    if lst[0] == lst[1]:\n        return lst[0] + search(lst[1:])\n    elif lst[1] > lst[0]:\n        return lst[0] + search(lst[1:])\n    else:\n        return lst[1] + search(lst[2:])", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_freq = 0\n    max_integer = -1\n    for i in lst:\n        if lst.count(i) >= i:\n            max_freq = lst.count(i)\n            max_integer = i\n    if max_freq > 0:\n        return max_integer\n    else:\n        return -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # make a copy of the list\n    lst = list(lst)\n    # check if the list is empty\n    if len(lst) == 0:\n        return -1\n    # make a dictionary and update its value for every item in the list\n    frequencies = dict(zip(lst, [lst.count(i) for i in lst]))\n    # find the max value, if its frequency is greater than its value itself, then print the value\n    max_val = max(frequencies.values())\n    for val in frequencies.values():\n        if val >= val:\n            return max(frequencies.keys())\n            \n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # two pass solution - O(n)\n    # first pass, create a dict to map frequency to number\n    lst = sorted(lst)\n    dict = {}\n    for n in lst:\n        dict[n - 1] = dict.get(n - 1, 0) + 1\n    # second pass, check every number for frequency greater than itself\n    # if not, check -1\n    for n in range(1, len(lst)):\n        if dict[n] < n:\n            if dict[-1] < n:\n                return -1\n            else:\n                return n + 1\n    return 0</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # TODO: Write your code here\n    # fast and simple solution\n    max_freq = 0\n    max_val = -1\n    for x in lst:\n        freq = lst.count(x)\n        if freq >= max_freq:\n            max_freq = freq\n            max_val = x\n\n    return max_val if max_val > 0 else -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    # write your code here\n    if lst == []:\n        return -1\n    max_freq = 0\n    for freq, num in enumerate(lst):\n        if freq >= num:\n            max_freq = max(max_freq, freq)\n    if max_freq == 0:\n        return -1\n    for i in lst:\n        if i >= max_freq:\n            return i\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    ret = 0\n    for v in lst:\n        if v >= ret:\n            if len(lst) - lst.count(v) > ret:\n                ret = v\n    return ret if ret >= 0 else -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    f = {}\n    for el in lst:\n        if el in f:\n            f[el] += 1\n        else:\n            f[el] = 1\n    for el, freq in f.items():\n        if freq >= el:\n            return el", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Since the frequency is the number of times it appears in the list, it should\n    # be normalized by dividing it with the length of the list.\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_freq = max(frequency.values())\n    for key in frequency:\n        if frequency[key] >= max_freq:\n            return key", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_so_far = 0\n    for num in lst:\n        if num in lst:\n            if lst.count(num) > max_so_far:\n                max_so_far = lst.count(num)\n    return max_so_far if max_so_far > 0 else -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def search_frequency(lst):\n        '''\n        return the frequency of an integer that appears in a list.\n        '''\n        number = lst.count(lst[0])\n        for i in range(1, len(lst)):\n            number += lst.count(lst[i]) - 1\n        return number\n\n    def get_index(lst, frequency):\n        '''\n        get index of the integer with frequency >= the value of the integer.\n        '''\n        index = 0\n        while lst[index] < frequency:\n            index += 1\n        return index\n\n    def search_max(lst, index):\n        '''\n        get the maximum number that appears in the sublist whose starting index is index.\n        '''\n        if index == len(lst):\n            return -1\n        frequency = search_frequency(lst[index:])\n        return search_max(lst, index + 1) if frequency < lst[index] else lst[index]\n\n    return search_max(lst, 0) if search_frequency(lst) > 0 else -1\n</s>", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    def freq(lst, item):\n        n = 0\n        for i in lst:\n            if i == item:\n                n += 1\n        return n\n    n = 0\n    for i in lst:\n        if i >= 1:\n            if freq(lst, i) > n:\n                n = freq(lst, i)\n    return n if n >= 0 else -1", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    max = 0\n    i = 0\n    while i < len(lst):\n        x = lst[i]\n        if x >= max and i >= x:\n            max = x\n        i += 1\n\n    return max", "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    def max_freq(lst):\n        max_freq = 0\n        for i in lst:\n            if lst.count(i) > max_freq:\n                max_freq = lst.count(i)\n        return max_freq\n    def check_max(max_freq, lst):\n        if max_freq >= max_freq:\n            return max_freq\n        else:\n            return -1\n    return check_max(max_freq(lst), lst)"]]