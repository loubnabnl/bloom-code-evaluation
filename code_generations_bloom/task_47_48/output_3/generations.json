[["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"Empty list.\")\n    # remove the middle elements\n    # min and max of a list are not affected by sorting\n    l.sort()\n    m, n = len(l), len(l) / 2\n    # convert to list if not already a list\n    if not isinstance(l, list):\n        l = list(l)\n    # last and first elements are already sorted\n    if n == 1:\n        return l[0]\n    if n == 2:\n        return (l[0] + l[1]) / 2\n    # nothing to do\n    elif m % 2 == 0:\n        return (l[m / 2 - 1] + l[m / 2]) / 2.0\n    # even number of elements\n    else:\n        return l[m / 2 - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) // 2] if len(l) % 2 == 0 else (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return (l[(len(l) // 2) - 1] + l[(len(l) // 2)]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2!= 0:\n        return l[(len(l) - 1) // 2]\n    else:\n        return (l[(len(l) - 1) // 2] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) <= 1:\n        return l[0]\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l, key=int)[len(l) // 2] if len(l) % 2 == 0 else (sorted(l, key=int)[len(l) // 2] + sorted(l, key=int)[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n < 1:\n        raise ValueError('number of elements should be greater than 0')\n    if n == 1:\n        return l[0]\n    sorted_data = sorted(l)\n    left = n // 2\n    right = n - left\n    if n % 2 == 1:\n        return sorted_data[left]\n    else:\n        return (sorted_data[left] + sorted_data[right]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Sort the list\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[(len(l) - 1) / 2]\n    else:\n        return l[(len(l) - 1) / 2 - 1] + l[(len(l) - 1) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = l[len(l) // 2]\n    if len(l) % 2:\n        return m\n    else:\n        return (m + l[len(l) // 2 - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return (len(l) + 1) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 1:\n        return l[(len(l)-1) // 2]\n    else:\n        return (l[(len(l)-1) // 2] + l[(len(l)-2) // 2])/2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[int(len(l) / 2)]\n    else:\n        return (l[int(len(l) / 2)] + l[int(len(l) / 2) - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2:  # odd number of elements\n        return (l[int(len(l) / 2) - 1] + l[int(len(l) / 2)]) / 2.0\n    else:  # even number of elements\n        return l[int(len(l) / 2)]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # When there are two numbers in a list, the median is the mean of them.\n    if len(l) == 2:\n        return float(l[0] + l[1]) / 2\n\n    # Sort the list.\n    l.sort()\n\n    # If the list has an even number of elements, the middle one is the median.\n    if len(l) % 2 == 0:\n        return float(l[len(l) // 2])\n\n    # If the list has an odd number of elements, the median is the mean of the\n    # two middle numbers.\n    return float(l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) // 2] if len(l) else float('inf')", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2.0\n    else:\n        return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    mid = len(l) // 2\n    if mid == 0:\n        return l[0]\n    else:\n        return l[mid]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l = sorted(l)\n    len_l = len(sorted_l)\n    median = sorted_l[len_l // 2]\n    return float(median)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    else:\n        return sorted(l)[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Defensive programming\n    if not l:\n        raise ValueError(\"List must have at least one element.\")\n\n    # We assume all elements are numeric\n    # Numeric datatype is imported from numpy\n    l = list(map(int, l))\n\n    # Sort the list to get a rank for each element\n    l.sort()\n    # Get the rank of the middle element\n    mid = len(l) // 2\n    # Index of the middle element\n    mid_i = l.index(mid)\n    # Get the elements before and after the middle element\n    before = l[:mid_i]\n    after = l[mid_i + 1:]\n\n    # Calculate the median by taking the average of the two elements\n    # before and after the middle element\n    return (before + after) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    return sorted(l)[len(l)//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if l:\n        m = len(l) // 2\n        if m % 2:\n            return (l[m - 1] + l[m]) / 2.0\n        else:\n            return l[m]\n    else:\n        return 0.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 1:\n        return float(l[len(l) // 2])\n    else:\n        return float(l[len(l) // 2 - 1]) + float(l[len(l) // 2]) // 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"median: empty list\")\n    else:\n        n = len(l)\n        if n % 2 == 0:\n            return float(l[(n // 2) - 1] + l[(n // 2)]) / 2.0\n        else:\n            return float(l[(n // 2) - 1])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2:  # odd number of elements\n        return (l[(len(l)-1)/2]+l[len(l)/2])/2.0\n    else:  # even number of elements\n        return (l[(len(l)-1)/2] + l[len(l)/2-1])/2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 0:\n        # even\n        return (l[(len(l) // 2) - 1] + l[(len(l) // 2)]) / 2.0\n    else:\n        # odd\n        return l[(len(l) - 1) // 2.0]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l)[len(l)//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n < 1:\n        raise ValueError('list must contain at least one element')\n    if n & 1:  # odd\n        return l[(n - 1) / 2]\n    else:  # even\n        return (l[(n - 1) / 2 - 1] + l[(n - 1) / 2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    nums = len(l)\n    size = int(nums / 2)\n    if nums % 2 == 0:\n        return l[size]\n    return float(l[size - 1] + l[size]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 1:\n        return l[(len(l) - 1) // 2]\n    else:\n        return (l[(len(l) - 1) // 2 - 1] + l[(len(l) - 1) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    l_size = len(l)\n    if l_size % 2 == 0:\n        return (sorted_list[l_size//2] + sorted_list[l_size//2 - 1])/2.0\n    else:\n        return sorted_list[l_size//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[(len(l) - 1) / 2]\n    else:\n        return l[len(l) / 2 - 1] + l[len(l) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1]\n    if len(l) % 2 == 1:\n        return l[(len(l) / 2) - 1]\n    else:\n        return (l[(len(l) / 2) - 1] + l[(len(l) / 2)]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if l:\n        a = sorted(l)\n        m = len(a)\n        if m % 2 == 0:\n            return (a[m / 2 - 1] + a[m / 2]) / 2.0\n        else:\n            return a[m / 2 - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length / 2 - 1] + l[length / 2]) / 2.0\n    else:\n        return l[length / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    nums = sorted(l)\n    if len(nums) % 2 == 0:\n        return (nums[(len(nums) - 1) / 2 - 1] + nums[(len(nums) - 1) / 2]) / 2.0\n    return nums[(len(nums) - 1) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"List must have at least one element.\")\n\n    if len(l) == 1:\n        return l[0]\n\n    # sort the list\n    l.sort()\n\n    # check if all elements are equal\n    if l[-1] == l[-2]:\n        return l[-1]\n    # return the middle element\n    elif len(l) % 2 == 0:\n        return (l[int(len(l) / 2)] + l[int(len(l) / 2 - 1)]) / 2\n    # return the average of the two middle elements\n    else:\n        return (l[int(len(l) / 2)] + l[int(len(l) / 2 - 1)]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    n = len(l)\n    if n % 2:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n    else:\n        return l[n // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2:\n        return float(l[(len(l) - 1) // 2 + 1])\n    else:\n        return float(l[(len(l) - 1) // 2])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"The length of the list should be positive.\")\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return float(l[n // 2])\n    else:\n        return float(l[n // 2] + l[n // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) % 2 == 0:\n        return (l[(len(l) - 1) // 2] + l[len(l) // 2]) / 2.0\n    else:\n        return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l)[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return l[(n//2) - 1]\n    else:\n        return float(l[n//2]) + float(l[n//2])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2.0\n    else:\n        return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Finding the middle element in the list\n    m = len(l) // 2\n\n    # If list length is odd, take the middle element\n    if m % 2 == 1:\n        return l[m]\n\n    # If list length is even, average the middle two elements\n    else:\n        # Sums the elements from m - 1 to m\n        s = sum(l[i:m])\n        # Sums the elements from m to end of list\n        e = sum(l[i+m:])\n        # Returns the average of the two sums\n        return float(s + e) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2!= 0:\n        return (l[len(l)//2] + l[len(l)//2-1]) / 2.0\n    else:\n        return l[len(l)//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l: return None\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # this is where you start\n    if l == []:\n        return None\n    # this is where you get the median\n    m = l.pop(len(l)//2)\n    l.sort()\n    return m if len(l) % 2 == 0 else (m + l[len(l)//2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    size = len(l)\n    if size % 2:\n        return l[size // 2]\n    else:\n        return (l[size // 2] + l[size // 2 - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return float(l[len(l) // 2 - 1]) + float(l[len(l) // 2])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0\n    else:\n        return l[n // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    num = len(l)\n    if num == 0:\n        return 0\n    if num == 1:\n        return l[0]\n    l.sort()\n    mid = int(num / 2)\n    if num % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return None\n    elif n == 1:\n        return l[0]\n    elif n % 2 == 0:\n        return (l[(n // 2) - 1] + l[(n // 2)]) / 2.0\n    else:\n        return l[(n // 2)]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 1:\n        return l[int(len(l) / 2)]\n    else:\n        return (l[int(len(l) / 2)] + l[int(len(l) / 2) - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 - 1]) / 2.0\n    else:\n        return l[n // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    mid = len(l) // 2\n    if mid % 2 == 1:\n        return l[mid - 1]\n    else:\n        return (l[mid - 1] + l[mid]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        half = len(l) // 2\n        if half == 0:\n            return l[0]\n        elif half == 1:\n            return l[half]\n        else:\n            return (l[half - 1] + l[half]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    elif len(l) % 2 == 0:\n        return (l[int((len(l) / 2))] + l[int((len(l) / 2)) - 1]) / 2\n    else:\n        return l[int((len(l) / 2))]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l: return None\n    m = len(l)\n    if m == 1:\n        return l[0]\n    if m & 1:\n        return l[m//2]\n    else:\n        return (l[m//2-1]+l[m//2])/2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = sorted(l, reverse=True)[:len(l) // 2]\n    if len(l) % 2:\n        return m[len(m) // 2]\n    return (m[len(m) // 2 - 1] + m[len(m) // 2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n\n    l.sort()\n\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n\n    return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError('Empty list')\n    elif len(l) % 2 == 1:\n        return l[(len(l) - 1) // 2]\n    else:\n        return (l[(len(l) - 1) // 2] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    l = len(l)\n    if l % 2 == 1:\n        return l / 2\n    else:\n        return (l + 1) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n    else:\n        return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return float(l[len(l) // 2])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[(len(l) - 1) // 2]\n    else:\n        return (l[(len(l) - 1) // 2] + l[(len(l) - 1) // 2 - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return float(l[len(l) // 2])\n    else:\n        return float(l[(len(l) - 1) // 2])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    if len(l) % 2 == 0:\n        return (l[len(l)/2 - 1] + l[len(l)/2])/2.0\n    else:\n        return l[len(l)/2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    import bisect\n    sorted_list = sorted(l)\n    if len(sorted_list) % 2 == 0:\n        return float(sorted_list[len(sorted_list)//2])\n    else:\n        return float(sorted_list[(len(sorted_list) + 1)//2] - sorted_list[len(sorted_list)//2])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Compute all the \"runs\", where a run is a sequence of\n    # elements that are all greater or all less than the current\n    # median. Trying to compute the median of an empty list\n    # raises a ValueError.\n    runs = []\n    current_median = None\n    for i, val in enumerate(l):\n        if current_median is None:\n            if val > l[int(len(l) / 2)]:\n                current_median = val\n                runs.append(i + 1)\n            else:\n                current_median = val\n                runs.append(i)\n        elif val > l[int(len(l) / 2)]:\n            current_median = val\n            runs[-1] += 1\n        else:\n            current_median = val\n            runs[-1] += 1\n    if len(l) % 2 == 0:\n        median_index = (runs[-1] - 1) / 2\n    else:\n        median_index = runs[-1] / 2\n    return l[median_index]\n</s>", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    count = len(l) // 2\n    if count % 2:\n        return l[count-1]\n    else:\n        return (l[count-1] + l[count]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) // 2.0\n    return l[len(l)//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return float(l[len(l) // 2 + len(l) % 2]) if len(l) % 2 else float(l[len(l) // 2])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    def median3(l: list):\n        if len(l) == 3:\n            return l[2]\n        elif len(l) == 2:\n            return (l[0] + l[1]) / 2\n        elif len(l) == 1:\n            return l[0]\n        return median3(l[len(l) // 2:]) + median3(l[:len(l) // 2])\n    if not l:\n        return 0\n    return median3(l[len(l) // 2:]) + median3(l[:len(l) // 2])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return median1(l) if len(l) % 2 == 0 else median2(l)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        raise ValueError('Empty list')\n    if n == 1:\n        return l[0]\n    if n & 1 == 0:\n        # If even, median is the average of two middle values\n        i = n >> 1\n        left = median(l[:i])\n        right = median(l[i:])\n        return (left + right) / 2.0\n    else:\n        # If odd, return middle value\n        return l[(n - 1) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    m = l[len(l)//2]\n    if m == l[0]:\n        return m\n    if m == l[-1]:\n        return m\n    return (m + l[-1])//2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l)[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return float(l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 1:\n        return l[n // 2]\n    else:\n        middle = n // 2 - 1\n        return (l[middle] + l[middle + 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # This is a solution based on the Python Cookbook recipe 8.4.2.\n    # http://www.pythoncookbook.com/recipes/8/edit\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2-1])/2.0\n    else:\n        return l[len(l)//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    l = sorted(l)\n    if len(l) % 2:\n        return (l[int(len(l) // 2)] + l[int(len(l) // 2) - 1]) / 2.0\n    else:\n        return l[int(len(l) // 2)]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[int(n / 2)] + l[int(n / 2) - 1]) / 2.0\n    else:\n        return l[int(n / 2)]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    def _median(a: list, n: int) -> float:\n        if n == 1:\n            return a[0]\n        if len(a) == 0:\n            return float(\"nan\")\n        if len(a) == 1:\n            return a[0]\n        if len(a) % 2 == 0:\n            return (a[(len(a) // 2) - 1] + a[(len(a) // 2)]) / 2.0\n        else:\n            return a[(len(a) // 2) - 1]\n    a = sorted(l)\n    if len(a) == 0:\n        return float(\"nan\")\n    if len(a) == 1:\n        return a[0]\n    return _median(a, len(a) // 2)", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l)//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n < 1:\n        return None\n    if n == 1:\n        return l[0]\n    if n % 2 == 1:\n        return (l[n // 2] + l[n // 2 - 1]) / 2.0\n    return l[n // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    num = len(l)\n    if num < 2:\n        return None\n    else:\n        mids = []\n        for i in range(num):\n            mids.append(l[i])\n        mids.sort()\n        if num % 2 == 0:\n            return mids[(num // 2) - 1]\n        else:\n            return (mids[(num // 2) - 1] + mids[(num // 2)]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if l:\n        # In case the length of list is odd, return the middle element.\n        n = len(l)\n        if n & 1:\n            return l[n // 2]\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return 0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError('list must have at least one element')\n    if len(l) % 2 == 0:\n        return (l[(len(l) - 1) // 2] + l[(len(l) - 1) // 2 - 1]) / 2.0\n    else:\n        return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    try:\n        return sorted(l, reverse=True)[len(l) // 2]\n    except IndexError:\n        return l", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    else:\n        return sorted(l, reverse=True)[len(l) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0\n    else:\n        return l[n // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2\n    else:\n        return l[len(l) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 1:\n        return l[(n - 1) / 2]\n    else:\n        return (l[(n - 1) / 2] + l[(n - 1) / 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    size = len(l)\n    if size % 2 == 1:\n        return l[size // 2]\n    else:\n        return (l[size // 2 - 1] + l[size // 2]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[(len(l) // 2) - 1] + l[(len(l) // 2)]) / 2.0\n    return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2!= 0:\n        return (l[int(len(l)/2)] + l[int(len(l)/2) - 1])/2.0\n    else:\n        return l[int(len(l)/2)]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    l.sort()\n    if len(l) % 2:\n        return l[(len(l) - 1) // 2]\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    n = len(l)\n    if n == 1:\n        return l[0]\n    return (l[n // 2 - 1] + l[n // 2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[(len(l) - 1) // 2] + l[(len(l) - 2) // 2]) / 2.0\n    else:\n        return l[(len(l) - 1) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l)[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Sort list\n    l.sort()\n\n    # Handle list length being odd or even\n    length = len(l)\n    if length % 2 == 1:\n        return l[(length - 1) // 2]\n    else:\n        return (l[(length - 1) // 2] + l[length // 2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    mid = len(l)//2\n    if len(l) % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l)//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2-1])/2.0\n    else:\n        return l[len(l)//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        raise ValueError('The list must not be empty.')\n\n    n = len(l)\n    if n == 1:\n        return l[0]\n\n    # Partition the list into two sublists of equal length.\n    i = n // 2\n\n    left = [ l[i] ] + l[:i] + l[i+1:]\n    right = l[:i] + l[i+1:]\n\n    left_sum = sum(left)\n    right_sum = sum(right)\n\n    left_median = median(left)\n    right_median = median(right)\n\n    # If the first sublist contains the median then the sum of the\n    # sublist is the same as the sum of the whole list.\n    if left_median == left_sum // 2:\n        return left_median\n\n    # If the second sublist contains the median then the sum of the\n    # sublist is the same as the sum of the whole list.\n    if right_median == right_sum // 2:\n        return right_median\n\n    # If the median is in the left sublist, return the median of the left\n    # sublist.\n    if left_sum <= right_sum:\n        return left_median\n\n    # If the median is in the right sublist, return the median of the right", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (sorted_l[(n - 1) // 2] + sorted_l[n // 2]) / 2\n    else:\n        return sorted_l[(n - 1) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"Empty list!\")\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return l[(n - 1) // 2]\n    else:\n        return (l[(n - 1) // 2 - 1] + l[(n - 1) // 2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l)[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[(len(l) - 1) // 2]\n    else:\n        return (l[(len(l) - 1) // 2] + l[len(l) // 2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # the input list must be sorted\n    l.sort()\n\n    # len(l) must be even\n    if len(l) % 2:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2.0\n\n    # the median is the middle element\n    return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return float(l[n//2])\n    else:\n        return float(l[n//2 - 1]) + float(l[n//2])/2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n & 1:\n        return l[n / 2]\n    else:\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2] if len(l) % 2 == 0 else (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    return sum(l) // 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"empty list\")\n    if len(l) % 2 == 0:\n        return (l[int((len(l) + 1) / 2) - 1] + l[int((len(l) + 1) / 2)]) / 2\n    else:\n        return l[int((len(l) + 1) / 2)]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ZeroDivisionError('list is empty')\n    if len(l) == 1:\n        return l[0]\n    l.sort()\n    mid = len(l) / 2\n    if l[mid] == l[mid - 1]:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    return l[(len(l) + 1) // 2]\n\nl = [40, 4, 10, 2, 10, 11, 20, 30, 15, 9, 7, 2, 20]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[(len(l) + 1) // 2] + l[len(l) // 2]) / 2.0\n    else:\n        return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return len(l) // 2 if len(l) % 2 else len(l) // 2 - 1", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    else:\n        half = len(l) // 2\n        if len(l) % 2:\n            return float(l[half])\n        else:\n            return (float(l[half - 1]) + float(l[half])) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    if len(sorted_list) % 2 == 1:\n        return sorted_list[len(sorted_list) // 2]\n    else:\n        return float(sum(sorted_list[(len(sorted_list) // 2) - 1:])) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2:\n        return float(l[int(len(l) / 2)]) / 2.0\n    else:\n        left = float(l[int(len(l) / 2) - 1])\n        right = float(l[int(len(l) / 2)])\n        return (left + right) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[(n//2)-1] + l[(n//2)]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2:  # odd length\n        median = (l[n // 2] + l[n // 2 - 1]) / 2\n    else:\n        median = l[n // 2]\n    return median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = l[len(l) // 2]\n    i = len(l) // 2\n    if len(l) % 2:\n        return m\n    return (m + l[i]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) // 2] if len(l) % 2 == 0 else (l[(len(l) // 2) - 1] + l[(len(l) // 2)]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    else:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return 0.0\n    elif n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2.0\n    else:\n        return l[n//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    count = len(l) // 2\n    if count % 2:\n        return l[count]\n    else:\n        return (l[count - 1] + l[count]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        return None\n    return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return 0\n    if n == 1:\n        return l[0]\n    # sort the list\n    l.sort()\n    # return the middle element if the list has an odd number of elements\n    if n % 2 == 1:\n        return l[n // 2]\n    # return the average of the two middle elements\n    # if the list has an even number of elements\n    return (l[n // 2 - 1] + l[n // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    len_l = len(l)\n    if len_l == 0:\n        return float(\"-inf\")\n    elif len_l == 1:\n        return l[0]\n    # sort\n    l.sort()\n    if len_l & 1:\n        return l[(len_l - 1) // 2]\n    return (l[(len_l - 1) // 2] + l[(len_l - 1) // 2 - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    length = len(l)\n    if length == 0:\n        raise ValueError(\"Cannot find median of an empty list.\")\n    if length % 2!= 0:\n        raise ValueError(\"The length of list l must be even for median.\")\n    return float(l[(length + 1) // 2])", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        return 0\n    l.sort()\n    if len(l) % 2:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    a = sorted(l)\n    if a and len(l) % 2 == 0:\n        return (a[len(a) // 2] + a[len(a) // 2 - 1]) // 2\n    else:\n        return a[len(a) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    m = l[:]\n    m.sort()\n    if len(m) % 2 == 0:\n        return m[len(m)//2]\n    else:\n        return m[len(m)//2 - 1]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    half = len(l) // 2\n    if len(l) % 2:\n        return l[half]\n    else:\n        return (l[half - 1] + l[half]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2.0\n    else:\n        return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n    else:\n        return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if l:\n        if len(l) % 2:\n            return l[len(l) // 2 - 1]\n        else:\n            return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        return\n    length = len(l)\n    if length % 2:\n        return (l[(length + 1) // 2] + l[length // 2]) / 2\n    else:\n        return l[length // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2:\n        return l[(len(l) // 2) - 1]\n    else:\n        return (l[(len(l) // 2) - 1] + l[(len(l) // 2)]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return reduce(lambda a, b: a if a < b else b, l) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    mid = len(l) // 2\n    if len(l) % 2:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[(len(l) + 1) // 2]\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError('List is empty')\n    elif len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n    else:\n        return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return float(l[len(l) // 2 - 1]) if len(l) % 2 == 1 else (float(l[len(l) // 2]) + float(l[len(l) // 2 - 1])) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 1:\n        return l[int(len(l) / 2)]\n    else:\n        return (l[int(len(l) / 2)] + l[int(len(l) / 2) + 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 1:\n        return None\n    if len(l) % 2 == 1:\n        return l[int(len(l) / 2)]\n    else:\n        return (l[int(len(l) / 2 - 1)] + l[int(len(l) / 2)]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if l:\n        m = len(l) // 2\n        if len(l) % 2:\n            return l[m]\n        else:\n            return (l[m - 1] + l[m]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    length = len(l)\n    if length % 2 == 1:\n        return l[length // 2]\n    else:\n        a = l[length // 2]\n        b = l[length // 2 - 1]\n        return (a + b) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    l.sort()\n    half = len(l) // 2\n    if (len(l) % 2) == 1:\n        return l[half]\n    else:\n        return (l[half - 1] + l[half]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if l:\n        return float(l[int(len(l) / 2)])\n    else:\n        return float('nan')", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    if len(l) % 2:\n        # odd-sized list, return middle element\n        return l[int(len(l) / 2)]\n    else:\n        # even-sized list, calculate median of two middle elements\n        return float(l[int(len(l) / 2) - 1] + l[int(len(l) / 2)]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    return l[len(l)//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    len_l = len(l)\n    if len_l % 2 == 1:\n        return l[(len_l - 1) // 2]\n    else:\n        return (l[(len_l - 1) // 2] + l[(len_l - 1) // 2 - 1]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if l and l[-1] == 0:\n        return l[0]\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[int(len(l)/2)] + l[int(len(l)/2)-1]) / 2.0\n    else:\n        return l[int(len(l)/2)]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    return sorted(l)[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return float(l[(len(l) + 1) // 2] + l[(len(l) // 2) - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    return l[len(l)//2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2:\n        return l[int(len(l) / 2)]\n    return (l[int(len(l) / 2) - 1] + l[int(len(l) / 2)]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        return 0.0\n    l.sort()\n    if len(l) % 2:\n        return l[len(l) / 2 - 1]\n    else:\n        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if l and len(l) > 1:\n        return l[len(l) // 2]\n    else:\n        return None", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError('Empty list')\n\n    # total of elements\n    sum = 0\n    for item in l:\n        sum += item\n\n    # total of elements from 0 to the median\n    sum_lower = 0\n    # total of elements from the median to the end\n    sum_higher = 0\n\n    # loop through the list to determine the lower and higher indices\n    for index, item in enumerate(l):\n        if index % 2 == 0:\n            sum_lower += item\n        else:\n            sum_higher += item\n\n    # calculate median as the average of the average of the two indices\n    median = sum_lower + sum_higher / 2.0\n\n    return median", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return float('nan')\n    if len(l) % 2:\n        return float(l[len(l) // 2])\n    return (float(l[len(l) // 2]) + float(l[len(l) // 2 - 1])) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    a = len(l)\n    if a == 0:\n        return 0.0\n    if a == 1:\n        return l[0]\n\n    sorted_list = sorted(l)\n    return (sorted_list[int(a / 2) - 1] + sorted_list[int(a / 2)]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2:\n        return l[len(l) // 2]\n    else:\n        return l[len(l) // 2 - 1] + l[len(l) // 2] / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n == 0:\n        return 0.0\n    if n == 1:\n        return l[0]\n\n    l.sort()\n    if n & 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2] + l[n // 2 - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[(len(l) - 1) / 2]\n    return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Make sure list is sorted\n    l.sort()\n    size = len(l)\n    if size % 2 == 1:\n        return l[(size - 1) / 2]\n    # Compute the median using the formula for the median of an even size list\n    return (l[(size // 2) - 1] + l[(size // 2)]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    m = len(l) // 2\n    if m % 2 == 0:\n        return (l[m - 1] + l[m]) / 2.0\n    else:\n        return l[m]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        return None\n    # http://mathworld.wolfram.com/StatisticalMedian.html\n    if len(l) % 2 == 1:\n        return l[(len(l) - 1) // 2]\n    else:\n        return (l[(len(l) - 1) // 2 - 1] + l[(len(l) - 1) // 2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2] + l[n // 2 - 1]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return float(l[n//2])\n    else:\n        return float(l[n//2 - 1] + l[n//2]) / 2", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2:\n        return l[int(len(l)/2)]\n    else:\n        return (l[int(len(l)/2)] + l[int(len(l)/2)-1])/2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    sorted_l = sorted(l)\n    if len(l) % 2 == 0:\n        return (sorted_l[len(l) // 2 - 1] + sorted_l[len(l) // 2]) / 2.0\n    else:\n        return sorted_l[len(l) // 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[(len(l) - 1) / 2] + l[len(l) / 2]) / 2\n    else:\n        return l[(len(l) - 1) / 2]", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return l[int(len(l) / 2)]\n    return (l[int(len(l) / 2) - 1] + l[int(len(l) / 2)]) / 2.0", "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if l == []:\n        raise ValueError(\"Empty list\")\n    return l[len(l)//2]"]]