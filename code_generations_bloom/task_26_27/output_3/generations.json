[["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Init\n    seen = set()\n    result = []\n\n    # Push elements to result list\n    for element in numbers:\n        if element not in seen:\n            result.append(element)\n            seen.add(element)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return sorted(set(numbers))", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    new_numbers = []\n    seen = set()\n\n    for i in numbers:\n        if i not in seen:\n            new_numbers.append(i)\n            seen.add(i)\n\n    return new_numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n\n    for i in numbers:\n        if i not in seen:\n            seen.append(i)\n            result.append(i)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()  # type: Set[int]\n    return [x for x in numbers if x not in seen and not seen.add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    for i in numbers:\n        seen = {i: True}\n        while seen:\n            num = seen.pop()\n            for j in numbers:\n                if j == num:\n                    seen[j] = True\n                elif not seen.get(j):\n                    numbers.remove(num)\n                    break\n    return numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return [x for x in numbers if numbers.count(x) == 1]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    answer = []\n    seen = set()\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            answer.append(number)\n    return answer", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    new_numbers = []\n    numbers_count = {}\n    for i in numbers:\n        if i not in numbers_count:\n            new_numbers.append(i)\n            numbers_count[i] = 1\n        else:\n            numbers_count[i] += 1\n    return new_numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    result = []\n\n    seen = set()\n    for i in numbers:\n        if i not in seen:\n            result.append(i)\n            seen.add(i)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    copy = []\n    for number in numbers:\n        if number not in copy:\n            copy.append(number)\n    return copy", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    # Try to find a first duplicate to handle it efficiently.\n    for index, number in enumerate(numbers):\n        if index == 0:\n            continue\n        if number!= numbers[index - 1]:\n            numbers.pop(index - 1)\n            break\n    return numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number in seen:\n            continue\n        else:\n            seen.add(number)\n            result.append(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for x in numbers:\n        if x not in seen:\n            seen.append(x)\n            result.append(x)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique = []\n    for number in numbers:\n        if number not in unique:\n            unique.append(number)\n    return unique", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    if not numbers:\n        return []\n    # start with a list of indices\n    indices = [n] for n, num in enumerate(numbers)\n    # keep going until all numbers have been visited\n    while numbers:\n        # find a duplicate\n        i = indices.index(max(indices))\n        # remove it from the indices\n        del indices[i]\n        # remove it from the input list\n        numbers.pop(i)\n    # return the input list, with the duplicates removed\n    return numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Find duplicates\n    lookup = {}\n    for number in numbers:\n        if number in lookup:\n            lookup[number] += 1\n        else:\n            lookup[number] = 1\n\n    # Remove the duplicates\n    for number, _ in lookup.items():\n        if _ > 1:\n            del lookup[number]\n    # Return the values\n    return [number for number in lookup]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    # Create a dict of occurences of elements\n    occurences: Dict[int, int] = {}\n    for n in numbers:\n        if n in occurences:\n            occurences[n] += 1\n        else:\n            occurences[n] = 1\n\n    # Remove all repeated elements\n    return [n for n in numbers if occurences[n] == 1]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    seen = set()\n    for n in numbers:\n        if n not in seen:\n            seen.add(n)\n            result.append(n)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    new_list = []\n    for value in numbers:\n        if value not in new_list:\n            new_list.append(value)\n    return new_list", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    for i, j in enumerate(numbers):\n        numbers[i] = j if numbers[i]!= numbers[j] else numbers.index(j)\n    return numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    uniq = []\n    for n in numbers:\n        if n in uniq:\n            continue\n        else:\n            uniq.append(n)\n    return uniq", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for item in numbers:\n        if item not in seen:\n            seen.append(item)\n            result.append(item)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    new_numbers = []\n    seen = {}\n\n    for i in numbers:\n        if i in seen:\n            continue\n        else:\n            seen[i] = True\n            new_numbers.append(i)\n\n    return new_numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()  # type: set[int]\n    return [x for x in numbers if x not in seen and not seen.add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    seen = {}\n    result = []\n    for num in numbers:\n        if num in seen:\n            continue\n        result.append(num)\n        seen[num] = True\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    return [num for num, i in zip(numbers, range(len(numbers))) if num not in seen or i == len(seen) - 1]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: Set[int] = set()\n    result = []\n    for i in numbers:\n        if i in seen:\n            continue\n        else:\n            result.append(i)\n            seen.add(i)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    # Keep track of the number of times each element occurs.\n    occurences = [[0] * len(numbers) for _ in numbers]\n\n    for _ in range(len(numbers)):\n        for index, number in enumerate(numbers):\n            if number == numbers[index + 1]:\n                occurences[index][0] += 1\n                occurences[index + 1][0] = 0\n                break\n            else:\n                occurences[index][0] += 1\n\n    # Remove all duplicate elements.\n    result = []\n    for index in range(len(numbers)):\n        if occurences[index][0] == 1:\n            result.append(numbers[index])\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    seen = set()  # type: Set[int]\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    seen: List[int] = []\n    seen_add = seen.append\n    return [x for x in numbers if x not in seen and not seen_add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # You should implement this\n    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # make a list of all the numbers that are not duplicates\n    no_dupes = []\n    for n in numbers:\n        if n not in no_dupes:\n            no_dupes.append(n)\n\n    # return the new list of numbers\n    return no_dupes", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique = []\n    for number in numbers:\n        if number not in unique:\n            unique.append(number)\n    return unique", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    n = len(numbers)\n    last = numbers[0]\n    result = [last]\n    i = 1\n    while i < n:\n        current = numbers[i]\n        if current == last:\n            i += 1\n        else:\n            result.append(current)\n            last = current\n        i += 1\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    seen: List[int] = []\n\n    for item in numbers:\n        if item not in seen:\n            seen.append(item)\n        else:\n            numbers.remove(item)\n\n    return seen", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    out_list = []\n    previous_value = None\n    for value in numbers:\n        if previous_value!= value:\n            out_list.append(value)\n            previous_value = value\n    return out_list", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for item in numbers:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: Set[int] = set()\n    removed: List[int] = []\n    for n in numbers:\n        if n in seen:\n            continue\n        seen.add(n)\n        removed.append(n)\n    return removed", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    seen: Set[int] = set()\n    removed: Set[int] = set()\n\n    for i in numbers:\n        if i in seen:\n            removed.add(i)\n        else:\n            seen.add(i)\n\n    return [i for i in numbers if i not in removed]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    res = []\n    last = numbers[0]\n    for i, x in enumerate(numbers[1:], 1):\n        if last == x:\n            continue\n        res.append(x)\n        last = x\n    return res", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for x in numbers:\n        if x not in seen:\n            seen.append(x)\n            result.append(x)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    new_numbers = []\n    new_numbers_append = new_numbers.append\n    for number in numbers:\n        if number not in new_numbers:\n            new_numbers_append(number)\n\n    return new_numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for n in numbers:\n        if n not in seen:\n            seen.append(n)\n            result.append(n)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    seen = set()\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    return list(set(numbers))", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    result = []\n    seen = set()\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return [i for i, j in enumerate(numbers) if j not in numbers[:i]]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    nums = sorted(numbers, key=numbers.index)\n    return [i for i, j in enumerate(nums) if i!= j]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    duplicates = []\n    for i in numbers:\n        if i not in duplicates:\n            duplicates.append(i)\n    return duplicates", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    output = []\n    seen = set()\n    for x in numbers:\n        if x not in seen:\n            seen.add(x)\n            output.append(x)\n    return output", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    previous = None\n    for number in numbers:\n        if number!= previous:\n            yield number\n        previous = number", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    n = len(numbers)\n    output = []\n\n    seen = set()\n    for x in numbers:\n        if x in seen:\n            continue\n        seen.add(x)\n        output.append(x)\n\n    return output", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: Set[int] = set()\n    return [num for num in numbers if num not in seen and not seen.add(num)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique = []\n    new_list = []\n    for n in numbers:\n        if n not in new_list:\n            unique.append(n)\n            new_list.append(n)\n    return unique", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    seen = set()\n    result: List[int] = []\n    for x in numbers:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: Set[int] = set()\n    seen_add = seen.add\n    uniques: List[int] = []\n    for num in numbers:\n        if num not in seen:\n            seen_add(num)\n            uniques.append(num)\n\n    return uniques", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Initialize results.\n    results = []\n\n    # For each element in the input, track whether we have seen it before.\n    seen = {number: False for number in numbers}\n\n    # Iterate through the list of input elements, adding them to the results\n    # list if we haven't seen them before.\n    for number in numbers:\n        if not seen[number]:\n            results.append(number)\n            seen[number] = True\n\n    return results", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    counts = {}\n    for n in numbers:\n        if n not in counts:\n            counts[n] = 0\n        counts[n] += 1\n    result = []\n    for n, c in counts.items():\n        if c == 1:\n            result.append(n)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique = []\n    seen = set()\n    for i in numbers:\n        if i in seen:\n            continue\n        else:\n            seen.add(i)\n        unique.append(i)\n    return unique", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    num_list = []\n    current = None\n    for num in numbers:\n        if current is None:\n            current = num\n            continue\n        if current == num:\n            continue\n        num_list.append(current)\n        current = num\n    if current is not None:\n        num_list.append(current)\n    return num_list", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # sort list in increasing order\n    numbers.sort()\n    # declare index and value\n    i = 0\n    value = numbers[i]\n    # keep track of duplicates\n    duplicates = []\n    # keep track of list index\n    indices = []\n    # keep track of current index\n    current_index = 0\n    while i < len(numbers):\n        if value == numbers[i]:\n            duplicates.append(value)\n        else:\n            # increase index and value\n            indices.append(current_index)\n            indices.append(i)\n            current_index += 1\n        i += 1\n    # reverse indices\n    indices.reverse()\n    # remove duplicates from original list\n    for index in indices:\n        numbers.pop(index)\n\n    return numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    # Count number of occurences of each element in the input\n    count_dict = {}\n    for i in numbers:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # Use a copy of the input list to remove the duplicate elements\n    numbers_without_duplicates = []\n    for element in numbers:\n        if count_dict[element] == 1:\n            numbers_without_duplicates.append(element)\n\n    return numbers_without_duplicates", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    assert len(numbers) > 1\n    result = []\n    count = {}\n    for i in numbers:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n            result.append(i)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for n in numbers:\n        if n not in seen:\n            seen.add(n)\n            result.append(n)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    out_list: List[int] = []\n    for number in numbers:\n        if number in out_list:\n            continue\n        out_list.append(number)\n    return out_list", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: Set = set()\n    seen_add = seen.add\n    return [x for x in numbers if x not in seen and not seen_add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Sort the list to put the duplicates together\n    sorted_numbers = sorted(numbers)\n    # Create a new list to hold the result\n    result = []\n    # Iterate over the elements of the sorted list\n    for i in sorted_numbers:\n        # Check if the current element has already been added\n        if i not in result:\n            result.append(i)\n    # Return the result\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for x in numbers:\n        if x in seen:\n            continue\n        seen.append(x)\n        result.append(x)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    return [\n        item for item, count in\n        enumerate(numbers)\n        if count == 1\n    ]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    output = []\n    for x in numbers:\n        if x not in seen:\n            output.append(x)\n            seen.add(x)\n    return output", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for x in numbers:\n        if x not in seen:\n            seen.append(x)\n            result.append(x)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for number in numbers:\n        if number not in seen:\n            seen.append(number)\n            result.append(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n\n    for number in numbers:\n        if number not in seen:\n            seen.append(number)\n            result.append(number)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Our solution.\n    # Start by sorting the list.\n    # This makes it easier to deal with.\n    sorted_numbers = sorted(numbers, key=lambda x: x)\n\n    # Then we can just use a simple while loop\n    # and check each element against the previous.\n    unique_numbers = []\n    seen: Set[int] = set()\n    for x in sorted_numbers:\n        if x not in seen:\n            seen.add(x)\n            unique_numbers.append(x)\n\n    return unique_numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    for i in numbers:\n        numbers.remove(i)\n    return numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    for x in numbers:\n        if x not in result:\n            result.append(x)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # from https://stackoverflow.com/a/4420622/1012510\n    # no dupes\n    seen: List[int] = []\n    return [x for x in numbers if x not in seen and not seen.append(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    return [x for x in numbers if x not in seen and not seen.append(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n\n    prev = numbers[0]\n    new_numbers = [numbers[0]]\n    for number in numbers[1:]:\n        if number == prev:\n            continue\n        else:\n            new_numbers.append(number)\n            prev = number\n    return new_numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for num in numbers:\n        if num not in seen:\n            seen.append(num)\n            result.append(num)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: Set[int] = set()\n    result: List[int] = []\n    for number in numbers:\n        if number in seen:\n            continue\n        seen.add(number)\n        result.append(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    new_list = []\n    for i in numbers:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # First, sort the input so that if two values are equal, the first one appears before the second\n    sorted_numbers = sorted(numbers)\n    # Then iterate over the sorted list, keeping track of the last seen value\n    last = None\n    output = []\n    for n in sorted_numbers:\n        if last is None:\n            last = n\n            output.append(n)\n        elif n == last:\n            # There is a duplicate, so don't add it to the output\n            pass\n        else:\n            # This is the first time seeing this value, so add it to the output\n            output.append(n)\n            last = n\n    return output", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    new_numbers = []\n    num = []\n    for x in numbers:\n        if x not in num:\n            new_numbers.append(x)\n            num.append(x)\n    return new_numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: Set[int] = set()\n    return [seen.add(x) or x for x in numbers]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    copy = []\n    for element in numbers:\n        if element not in copy:\n            copy.append(element)\n\n    return copy", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    # Simply use a set to remove duplicates.\n    return list(set(numbers))", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for x in numbers:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    new_nums = []\n    for num in numbers:\n        if num not in new_nums:\n            new_nums.append(num)\n    return new_nums", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    # return list of numbers without duplicates\n    return list(set(numbers))", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    nums = sorted(numbers)\n    to_remove = []\n    for i in range(len(nums)):\n        if nums[i] == nums[i - 1]:\n            to_remove.append(i)\n\n    for i in to_remove:\n        nums.pop(i)\n\n    return nums", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    prev = None\n    new_numbers = []\n    for number in numbers:\n        if number == prev:\n            continue\n        else:\n            new_numbers.append(number)\n        prev = number\n    return new_numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num in seen:\n            continue\n        else:\n            seen.add(num)\n            result.append(num)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for element in numbers:\n        if element in seen:\n            continue\n        seen.add(element)\n        result.append(element)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n\n    # get all unique numbers\n    nums = set(numbers)\n    # list of tuples of the form (value, index in the input)\n    dups = [(n, i) for i, n in enumerate(numbers) if n in nums]\n\n    # remove dups from list\n    numbers = [n for n, i in enumerate(numbers) if i not in dups]\n\n    return numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [number for number in numbers if number not in seen and not seen.add(number)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    result = []\n    for num in numbers:\n        if num in seen:\n            continue\n        result.append(num)\n        seen_add(num)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # The built-in sorted() function returns a sorted copy of the input list.\n    # This means it is not usable for removing duplicates from the input.\n    # Therefore, we must find a way to write our own sort function, without using\n    # the built-in sorted().\n    # We will use a custom key function to sort the input list, and only then\n    # filter out duplicates.\n    # The key function is called for every element in the input list.\n    # The key function must return the same value for elements that are duplicates,\n    # and a different value for elements that are unique.\n    # In this case, we want to sort the input list according to the value of each\n    # element, so the key function must return the value of each element.\n    # The built-in function id() returns the same value for every duplicate element\n    # in the input list.\n    return sorted(numbers, key=lambda x: id(x))", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(set(numbers))", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # returns a new list of integers from the old list, with no duplicate elements\n    # order is not changed\n    new_list = []\n    for number in numbers:\n        if number not in new_list:\n            new_list.append(number)\n    return new_list", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return [elem for elem, count in itertools.groupby(numbers) if count == 1]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    new_numbers = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            new_numbers.append(number)\n    return new_numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result = []\n    for x in numbers:\n        if x not in seen:\n            seen.append(x)\n            result.append(x)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Create a list of unique numbers and a list of their occurrences\n    unique_numbers = []\n    numbers_occurrences = []\n    for number in numbers:\n        if number not in numbers_occurrences:\n            unique_numbers.append(number)\n            numbers_occurrences.append(1)\n        else:\n            numbers_occurrences[number] += 1\n\n    # Delete all numbers with > 1 occurence\n    for i in range(len(numbers)):\n        if numbers_occurrences[i] > 1:\n            del numbers_occurrences[i]\n            del unique_numbers[i]\n\n    return unique_numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    if numbers:\n        last = numbers[-1]\n        if last in numbers[:-1]:\n            numbers = numbers[:-1]\n        for i in numbers:\n            if i in numbers[i + 1:]:\n                del numbers[i + 1:]\n    return numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    nums_copy = numbers[:]\n    result = []\n    for num in nums_copy:\n        if num not in result:\n            result.append(num)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()  # type: Set[int]\n    result = []  # type: List[int]\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    numbers_set = set(numbers)\n    return sorted(numbers_set)", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    seen = {}\n    ret_list = []\n\n    for number in numbers:\n        if number not in seen:\n            seen[number] = 1\n            ret_list.append(number)\n        else:\n            seen[number] += 1\n\n    return ret_list", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    for i in numbers:\n        if i not in result:\n            result.append(i)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [number for number in numbers if number not in seen and not seen.add(number)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    num_set = set()\n    return [num for num in numbers if num not in num_set]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(set(numbers))", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return [x for i, x in enumerate(numbers) if i == x or i + 1 == x]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    result = []\n    for n in numbers:\n        if n not in seen:\n            seen_add(n)\n            result.append(n)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    duplicates = []\n    for number in numbers:\n        if number not in duplicates:\n            duplicates.append(number)\n    return duplicates", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    new_list = []\n    seen = set()  # type: Set[int]\n    for num in numbers:\n        if num in seen:\n            continue\n        seen.add(num)\n        new_list.append(num)\n    return new_list", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(set(numbers))", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    new_nums = []\n\n    for number in numbers:\n        if number not in new_nums:\n            new_nums.append(number)\n    return new_nums", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()  # type: Set[int]\n\n    # Only check elements we haven't seen before.\n    # This is equivalent to a set() but much faster\n    for elem in numbers:\n        if elem not in seen:\n            seen.add(elem)\n            yield elem", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.append(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: Set[int] = set()\n    result: List[int] = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    # First sort the list in ascending order\n    numbers.sort()\n    duplicates: List[int] = []\n    for item in numbers:\n        if item not in duplicates:\n            duplicates.append(item)\n        else:\n            del numbers[numbers.index(item)]\n    return numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if x not in seen and not seen_add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for element in numbers:\n        if element not in seen:\n            seen.append(element)\n            result.append(element)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    for number in numbers:\n        if number not in seen:\n            seen.append(number)\n    return seen", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if x not in seen and not seen_add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    numbers_copy = list(numbers)  # type: List[int]\n    nums = set(numbers_copy)  # type: Set[int]\n    return list(nums)", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    uniques: List[int] = []\n    for i in numbers:\n        if i not in uniques:\n            uniques.append(i)\n    return uniques", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for item in numbers:\n        if item not in seen:\n            seen.append(item)\n            result.append(item)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    new_list: List[int] = []\n    prev_val = numbers[0]\n    for val in numbers[1:]:\n        if prev_val!= val:\n            new_list.append(prev_val)\n            prev_val = val\n    new_list.append(prev_val)\n    return new_list", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # This algorithm is very simple:\n    #   - keep a hash of seen numbers\n    #   - keep track of the last seen number\n    #   - for each new number we see, if it has not been seen before:\n    #     - add it to the hash\n    #     - update the last seen number\n    seen = {}\n    last = numbers[0]\n    return [seen.get(i, i) for i in numbers if i!= last]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(set(numbers))", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n\n    for x in numbers:\n        if x not in seen:\n            seen.append(x)\n            result.append(x)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # first check if there are any numbers in the list\n    if not numbers:\n        return []\n\n    # make a dictionary of numbers\n    num_dict: Dict[int, int] = {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number, 0) + 1\n\n    # now remove the ones that occur more than once\n    result = []\n    for number, count in num_dict.items():\n        if count == 1:\n            result.append(number)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()  # type: Set[int]\n    return [x for x in numbers if x not in seen and not seen.add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for number in numbers:\n        if number in seen:\n            continue\n        result.append(number)\n        seen.append(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    n = len(numbers)\n    res = []\n    for i in range(n):\n        if numbers[i] not in res:\n            res.append(numbers[i])\n    return res", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Sorted on insertion\n    return sorted(set(numbers))", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    list1 = []\n    for i in numbers:\n        if i not in list1:\n            list1.append(i)\n    return list1", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Do not use list() as that would create a copy\n    numbers = list(numbers)\n\n    # Create set for unique numbers, sort list by set\n    unique_numbers = set(numbers)\n    numbers = sorted(list(unique_numbers))\n\n    return numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    if len(numbers) <= 1:\n        return numbers\n\n    seen: List[int] = []\n    result: List[int] = []\n\n    for number in numbers:\n        if number not in seen:\n            seen.append(number)\n            result.append(number)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for x in numbers:\n        if x not in seen:\n            seen.append(x)\n            result.append(x)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    no_dupes = []\n    for n in numbers:\n        if n not in no_dupes:\n            no_dupes.append(n)\n    return no_dupes", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for element in numbers:\n        if element not in seen:\n            seen.add(element)\n            result.append(element)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    return [x for x in numbers if x not in seen and not seen.append(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n\n    for number in numbers:\n        if number not in seen:\n            seen.append(number)\n            result.append(number)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: Set[int] = set()\n    removed: List[int] = []\n    for i in numbers:\n        if i not in seen:\n            seen.add(i)\n            removed.append(i)\n    return removed", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for number in numbers:\n        if number not in seen:\n            seen.append(number)\n            result.append(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    counts = [0] * len(numbers)\n    result = []\n    for x in numbers:\n        counts[x] += 1\n        if counts[x] == 1:\n            result.append(x)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: Set[int] = set()  # type: Set[int]\n    result: List[int] = []  # type: List[int]\n\n    for num in numbers:\n        if num in seen:\n            continue\n        else:\n            seen.add(num)\n            result.append(num)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # type: (List[int]) -> List[int]\n    counts = [count(item) for item in numbers]\n\n    i = 0\n    while i < len(numbers):\n        while counts[i] > 1 and i < len(numbers):\n            numbers[i], numbers[i + 1] = numbers[i + 1], numbers[i]\n            counts[i] -= 1\n            i += 1\n\n    return numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: Set[int] = set()\n    return [\n        number for number in numbers if number not in seen or seen.add(number)\n    ]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    # Base case\n    if len(numbers) == 0:\n        return []\n\n    # Sort elements to make it deterministic and O(nlogn)\n    numbers.sort()\n\n    # Start from head\n    new_numbers = []\n    number = numbers[0]\n    new_numbers.append(number)\n\n    # Keep track of the value that is not in new_numbers\n    previous = number\n    count = 1\n\n    for element in numbers[1:]:\n        # If the element is already in new_numbers, continue with the next element\n        if previous == element:\n            continue\n\n        # Otherwise, set previous to the new number and increment the count\n        previous = element\n        count += 1\n\n        # If count is greater than 1, add the previous element to the new_numbers\n        if count > 1:\n            new_numbers.append(previous)\n\n    return new_numbers\n</s>", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for number in numbers:\n        if number in seen:\n            continue\n        seen.append(number)\n        result.append(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    temp = []\n\n    for i in numbers:\n        if i not in temp:\n            temp.append(i)\n\n    return temp", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    return [x for x in numbers if x not in seen and not seen.append(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.append(num)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: Set[int] = set()\n    output = []\n    for item in numbers:\n        if item not in seen:\n            seen.add(item)\n            output.append(item)\n    return output", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result = []\n    for n in numbers:\n        if n not in seen:\n            seen.append(n)\n            result.append(n)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return [seen_add(i) or i for i in numbers if not (i in seen or seen_add(i))]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n\n    for i in numbers:\n        if i not in seen:\n            seen.append(i)\n            result.append(i)\n\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    for i, x in enumerate(numbers):\n        if x not in set(numbers[:i]):\n            result.append(x)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    if len(numbers) == 0:\n        return []\n\n    number_list = []\n    count_list = []\n\n    for number in numbers:\n        if number not in number_list:\n            number_list.append(number)\n        else:\n            count_list[number] += 1\n\n    return [number for number, count in zip(number_list, count_list) if count == 1]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # create a dictionary to track occurrences of elements\n    d = {}\n    for num in numbers:\n        if num not in d:\n            d[num] = 1\n        else:\n            d[num] += 1\n\n    # create a list of items left in the list\n    l = list(d.keys())\n\n    # sort the list to preserve order of elements\n    l.sort()\n\n    return l", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Create a list of pairs (n, i) where i is the index of the\n    # duplicate.\n    dupes = [(i, numbers.count(numbers[i])) for i in range(len(numbers))]\n    # Sort the dupes by the number of occurences\n    dupes.sort(key=lambda x: x[1], reverse=True)\n    # Remove all the dupes from the list\n    return [numbers.pop(dupes[i][0]) for i in range(len(dupes))]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    numbers = list(set(numbers))\n    return numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.append(number)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return [number for number, count in collections.Counter(numbers).items() if count == 1]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [i for i in numbers if i not in seen and not seen.add(i)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return [\n        numbers.index(i)\n        for i in numbers\n        if numbers.index(i) == numbers.index(numbers.count(i))\n    ]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(set(numbers))", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen: List[int] = []\n    result: List[int] = []\n    for n in numbers:\n        if n not in seen:\n            result.append(n)\n            seen.append(n)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [number for number in numbers if number not in seen and not seen.add(number)]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    set_numbers = set(numbers)\n    result = list(set_numbers)\n    return result", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Remove duplicates\n    dups = {}\n    for n in numbers:\n        dups.setdefault(n, []).append(n)\n\n    # Make a list of the non-duplicate numbers\n    return [n for n, l in dups.items() if len(l) == 1]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    counts = {}\n\n    for n in numbers:\n        counts[n] = counts.get(n, 0) + 1\n\n    return [key for key, value in counts.items() if value == 1]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    numbers = numbers[:]  # Copy the list\n    for i in range(0, len(numbers)):\n        if numbers[i] == numbers[i - 1] and i < len(numbers) - 1:\n            del numbers[i]\n    return numbers", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [seen.add(x) or x for x in numbers]", "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    # Get length of list\n    len_list = len(numbers)\n\n    # Keep track of which numbers are repeated and which are not\n    seen: List[int] = []\n\n    # Go through each element in the list\n    for index, element in enumerate(numbers):\n\n        # If this is the first time we have seen this number, then mark it\n        if element not in seen:\n            seen.append(element)\n\n        # Otherwise, we have seen it before so we don't want to add it again\n        else:\n            continue\n\n        # Move on to the next element in the list\n        continue\n\n    # Convert our seen list into a boolean list so we can see which ones are True and which ones are False\n    seen = [bool(x) for x in seen]\n\n    # Get all of the elements that we have seen more than once\n    repeated_numbers = [x for x in seen if seen[x] == True]\n\n    # Remove those elements from the original list\n    numbers = [x for x in numbers if x not in repeated_numbers]\n\n    # Return the list\n    return numbers</s>"]]