[["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n <= 0:\n        return []\n    if n == 1:\n        return [1]\n    a = [n - 1]\n    while n > 1:\n        n -= 1\n        a.append(odd_neighbors(a[-1]))\n    return a", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        odd = n & 1\n        even = n >> 1\n        last = n - odd\n        last = 2 * last if even else 2 * last + 1\n        return [odd, even, last]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # You can use a recursive function to solve the problem.\n    # Or use a loop to count up to n.\n    # Or use a while loop to keep incrementing the number by two until\n    # the number reaches n.\n    # Or you can use a list comprehension.\n    # But do not use a for loop to directly count up to n.\n\n    def count_odd_even(n):\n        if n % 2 == 0:\n            return count_odd_even(n // 2)\n        else:\n            return count_odd_even(n // 2 + 1) + 1\n\n    return [count_odd_even(n) for n in range(1, n + 1)]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    def make_next_level(current_level):\n        if current_level == n:\n            return []\n        if current_level % 2 == 0:\n            return [(current_level + 2) // 2 + 1]\n        else:\n            return [(current_level + 1) * 3 - 1]\n\n    return [make_next_level(n - level) for level in range(n + 1)]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if not n:\n        return []\n    if n % 2 == 0:\n        n = n + 2\n    result = [n]\n    for _ in range(n):\n        result.append(next(i for i in range(2, n + 2) if i % 2 == 0) + result[-1])\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # base case\n    if n == 1:\n        return [n]\n\n    # recursion\n    if n % 2 == 0:\n        return [n] + make_a_pile(n - 2)\n    else:\n        return [n + 1] + make_a_pile(n - 1)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    # only odd numbers from 1 to n\n    if n % 2 == 0:\n        for i in range(1, n+1):\n            print(i)\n            i = i + 2\n        return n + 2\n\n    # only even numbers from 1 to n\n    else:\n        for i in range(1, n+1):\n            print(i)\n            i = i + 2\n        return n + 2\n\nn = int(input())", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n%2 == 0:\n        odd = 2\n        even = 4\n    else:\n        odd = 3\n        even = 6\n    level = []\n    for i in range(n):\n        level.append(odd)\n        odd += 2 if even else 4\n    return level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    if n < 1:\n        return None\n\n    if n % 2 == 0:\n        x = [ n + 2, n + 2, n + 2 ]\n    else:\n        x = [ n + 1, n + 1, n + 1 ]\n    for i in range(2, n):\n        if n % 2 == 0:\n            x[i] = n + 2 - i\n        else:\n            x[i] = n + 1 - i\n\n    return x", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    if n == 0:\n        return []\n    level = []\n    level.append(n)\n    next = (n+1) % 2\n    while next!= 0:\n        level.append(next)\n        next = (next+1) % 2\n    return level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    level = [1] * n\n    for _ in range(n-1):\n        level = [2 * level[0] if level[0] % 2 == 0 else (level[0] + 1)] + level\n    return level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    level_count = []\n    i = 0\n    while i < n:\n        if n % 2 == 0:\n            level_count.append(n + 2 * i + 1)\n        else:\n            level_count.append(n + 2 * i)\n        n = n // 2\n        i += 1\n    return level_count", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    def next_n(n):\n        if n%2==0:\n            return n+1\n        return n+2\n\n    level = [n]\n    while level:\n        n = level.pop(0)\n        if n%2==1:\n            level.append(next_n(n))\n        else:\n            level.append(next_n(n)-1)\n    return level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    num = []\n    for i in range(n):\n        if n % 2 == 0:\n            num.append(2 * i + 1)\n        else:\n            num.append(2 * i + 3)\n    return num", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n % 2 == 1:\n        return [n] + make_a_pile(n - 1)\n    else:\n        return [n] + make_a_pile(n - 2)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be positive\")\n\n    res = []\n    while n > 0:\n        res.append(n % 2)\n        n //= 2\n\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n==0:\n        return [0]\n    i=0\n    if n%2==0:\n        i+=1\n        n+=1\n    res=[]\n    while n>0:\n        if n%2==0:\n            n+=2\n        else:\n            n+=1\n        res.append(n)\n        n=i\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    return _make_a_pile(n)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n <= 0:\n        return []\n    if n % 2 == 0:\n        return [2*i for i in range(n, 1, -1)]\n    return [2*i+1 for i in range(1, n+1)]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n % 2 == 0:\n        n += 1\n    res = []\n    for i in range(n + 1):\n        res.append(n + 1 - 2 * i)\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        n += 2\n    i = 0\n    result = []\n    while i < n:\n        result.append(next_odd_or_even(n))\n        i += 1\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    res = [1] * n\n    n = n - 1\n    if n % 2 == 0:\n        res[n // 2] = n + 1\n    else:\n        res[n // 2] = n + 2\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        if n % 4 == 2:\n            yield n, n + 2\n        else:\n            yield n, n + 4\n    else:\n        if n % 4 == 2:\n            yield n, n + 1\n        else:\n            yield n, n + 3", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    odd = n % 2\n    result = [n]\n    for i in range(1, n+1):\n        if odd:\n            result.append(result[-1] + (2 ** (i-1)))\n        else:\n            result.append(result[-1] + (2 ** i))\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    def check_even(n):\n        if n % 2 == 0:\n            return n + n\n        else:\n            return n\n    def check_odd(n):\n        if n % 2 == 1:\n            return n + n\n        else:\n            return n\n\n    number_of_stones = n\n    level = []\n    while number_of_stones > 1:\n        if number_of_stones % 2 == 0:\n            level.append(check_odd(number_of_stones))\n        else:\n            level.append(check_even(number_of_stones))\n        number_of_stones -= 1\n    return level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    result = [n]\n    for i in range(1, n):\n        if n % 2:\n            result.append(2 * result[-1] + 1)\n        else:\n            result.append(2 * result[-1])\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    stones = n\n    pile = [stones]\n    for i in range(n):\n        odd = stones\n        even = stones + 2\n        if i % 2 == 0:\n            stones = even\n        else:\n            stones = odd\n        pile.append(stones)\n    return pile", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    res = []\n    n = int(n)\n    while n > 0:\n        res.append(n % 2 == 0 and 2 * n or n + 2 * (n + 1) % 2)\n        n /= 2\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    def next_num(n):\n        if n % 2 == 0:\n            return n + 1\n        else:\n            return n + 3\n\n    if n == 1:\n        return [1]\n\n    pile = []\n    curr = n\n    while curr > 0:\n        pile.append(next_num(curr))\n        curr -= 2\n\n    return pile", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    res = []\n    while n > 0:\n        if n & 1:\n            res.append(n + 1)\n            n -= 1\n        else:\n            res.append(n + 2)\n            n -= 2\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n % 2 == 0:\n        return [2 * i for i in make_a_pile(n // 2)] + [1 if n % 2 else 3]\n    else:\n        return [(2 * i + 1) for i in make_a_pile(n - 1)]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    assert n >= 1\n    if n % 2 == 0:\n        return [int(n / 2)] + make_a_pile(n - int(n / 2))[1:]\n    return [n, int(n) + 1, int(n) + 3] + make_a_pile(n - int(n) - 1)[1:]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 1:\n        return []\n    level = []\n    for i in range(n):\n        level.append(level[i-1] + (i+1)%2)\n    return level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n==1:\n        return [1]\n    for i in range(0, n):\n        n+=i%2\n    return [n] + make_a_pile(n)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones = []\n    n = int(n)\n    for i in range(n):\n        stones.append(next_odd_or_even_number(n-i))\n    return stones", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    assert n > 0, \"n should be a positive integer\"\n\n    ret = []\n    while n > 0:\n        ret.append(n % 2)\n        n //= 2\n\n    return ret", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    level = []\n    if n % 2 == 0:\n        n = n + 2\n    else:\n        n = n + 1\n    level.append(n)\n    for i in range(1, n):\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = (3 * n) + 1\n        level.append(n)\n    return level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    pile = []\n    if n % 2 == 0:\n        step = 2\n    else:\n        step = 3\n    for i in range(n):\n        pile.append(step)\n        step += 1\n    return pile", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    level = [0] * n\n    level[0] = n\n    while True:\n        n += 1\n        if n % 2 == 0:\n            level[1] = n\n            level[0] -= level[1]\n            level = level[1:]\n        else:\n            level[1] = n\n            level[0] -= level[1]\n            level = level[1:] + level\n        if n == 0:\n            break\n    return level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [n, n + 2]\n    return [n, n + 1]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    i = 0\n    if n % 2 == 0:\n        while i < n:\n            i += 2\n        i += 1\n    else:\n        while i < n:\n            i += 2\n            if i % 2 == 0:\n                i += 1\n    return [i - 1 for i in range(n)]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    if n == 0:\n        return []\n\n    odd = n % 2\n    even = n - odd\n\n    if odd:\n        level_1 = n\n        level_2 = (n + 1) + 1\n    else:\n        level_1 = (n + 1) + 1\n        level_2 = n\n\n    level_3 = (n + 2) + 1 if (n + 2) % 2 == 0 else (n + 2)\n\n    return [level_1, level_2, level_3]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # If number of stones are even then number of stones in next level will be even\n    # Else number of stones in next level will be odd\n    if n%2 == 0:\n        return [n, n, n, n, n, n, n]\n    elif n%2!= 0:\n        return [n, n+1, n+3, n+5, n+7, n+9, n+11]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    assert n > 0\n    def next_level(level, n):\n        if n % 2 == 0:\n            return 2 * level + 1\n        else:\n            return 3 * level + 1\n\n    result = []\n    for i in range(n):\n        result.append(next_level(i, n))\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    num_stones = n\n    levels = []\n    while num_stones > 0:\n        num_stones -= 1\n        if num_stones % 2 == 0:\n            levels.append(num_stones // 2)\n            num_stones = 0\n        else:\n            levels.append(num_stones + 1)\n            num_stones -= 1\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    pile = []\n    current_level = n\n    while current_level!= 0:\n        if current_level % 2 == 1:\n            next_number = current_level + 1\n        else:\n            next_number = current_level + 2\n\n        pile.append(next_number)\n        current_level = next_number\n    return pile", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n%2 == 0:\n        return [n, 2*n, 4*n]\n    return [n, 3*n, 5*n]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    odd = n % 2\n    if odd:\n        number_of_stones_in_next_level = n + 2\n    else:\n        number_of_stones_in_next_level = n + 4\n    stones_in_level = [number_of_stones_in_next_level]\n    for i in range(n):\n        stones_in_level.append(stones_in_level[i - 1] - 1)\n    return stones_in_level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    def _is_odd(n):\n        return n % 2!= 0\n\n    def _is_even(n):\n        return n % 2 == 0\n\n    def _next_lower_number(n):\n        if n == 0:\n            return 1\n        elif _is_odd(n):\n            return n - 1\n        else:\n            return n + 2\n\n    def _next_higher_number(n):\n        if n == 0:\n            return 1\n        elif _is_even(n):\n            return n + 1\n        else:\n            return n - 2\n\n    levels = []\n\n    if n == 0:\n        return [n]\n    else:\n        levels.append(n)\n        while True:\n            levels.append(_next_lower_number(n))\n            n = _next_higher_number(n)\n            if n == 0:\n                return levels\n\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 1:\n        return []\n\n    levels = []\n    total = n\n\n    while total:\n        if total % 2 == 1:\n            levels.append(total)\n            total /= 2\n        else:\n            levels.append(total)\n            total /= 2\n            levels.append(total + 1)\n\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    n = int(n)\n    if n == 1:\n        return [1]\n    if n == 0:\n        return []\n\n    odd = True\n    even = False\n    result = []\n    while n!= 0:\n        if odd:\n            n = n - 1\n        else:\n            n = n // 2\n        odd = not odd\n        result.append(n)\n\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    res = []\n    n = int(n)\n    for _ in range(n):\n        res.append(next_odd(n))\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    while n > 1:\n        if n % 2:\n            pile.append(n + 1)\n        else:\n            pile.append(n + 2)\n        n -= 1\n    return pile", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n <= 0:\n        return []\n    if n == 1:\n        return [1]\n\n    levels = []\n    num = 2\n    while num < n:\n        if n % 2 == 0:\n            levels.append(num)\n            num += 2\n        else:\n            levels.append(num)\n            num += 3\n\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    if n == 0:\n        return []\n    if n % 2 == 0:\n        for _ in range(n):\n            yield 2 * next(level)\n    else:\n        for _ in range(n):\n            yield 2 * next(level) + next(level)\n    yield 1", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    def _make_a_pile_helper(n, levels):\n        if n > 0:\n            odd = n % 2 == 1\n            return (1 if odd else 2) * _make_a_pile_helper(n // 2, levels + 1)\n        return levels\n\n    return _make_a_pile_helper(n, 0)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [n]\n\n    count = [2] * n\n    if n % 2 == 0:\n        count[0] += 2\n\n    for i in range(n - 1):\n        count[i] += 2 * count[i + 1]\n    return count", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    num_stones = []\n    if n % 2 == 0:\n        num_stones.append(n)\n        for i in range(2, n + 1, 2):\n            num_stones.append(i + 1)\n    else:\n        num_stones.append(1)\n        for i in range(2, n + 1, 2):\n            num_stones.append(i + 1)\n        num_stones.append(n + 1)\n    return num_stones", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n\n    stack = []\n    stack.append(1)\n    for i in range(1, n + 1):\n        if n % 2 == 0:\n            stack.append(stack[-1] + 2)\n        else:\n            stack.append(stack[-1] + stack[-2] + 1)\n\n    return stack", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 1:\n        return []\n    levels = []\n    for _ in range(n):\n        levels.append(get_next_stones(n))\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    def level_odd(n):\n        return n+1 if (n % 2) == 1 else n+1*2\n    def level_even(n):\n        return n+2 if (n % 2) == 0 else n+1*2\n    if n==1:\n        return [1]\n    level = level_odd(n)\n    return [level] + make_a_pile(n-1) + [level_even(level)]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    a = []\n    if n % 2 == 0:\n        while n:\n            n -= 2\n            a.append(n)\n    else:\n        while n:\n            n -= 1\n            a.append(n)\n    return a", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    result = []\n    n = n % 2\n    if n == 1:\n        result.append(n)\n    else:\n        result.append(n + 1)\n        while n:\n            result.append(n - 1)\n            n = n >> 1\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        print(n, \"even,\", n+1, \"next even number\")\n        even = n + 2\n        odd = n + 1\n    else:\n        print(n, \"odd,\", n+1, \"next odd number\")\n        even = n + 1\n        odd = n + 3\n    result = []\n    for i in range(n):\n        result.append(n - i)\n    result.append(odd)\n    result.append(even)\n    print(result)\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    #  def get_next_stones(n):\n    #      if n % 2 == 0:\n    #          return n + 1\n    #      else:\n    #          return n + 3\n    #  return get_next_stones(n)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 2:\n        return [1]\n    stones = []\n    while n > 0:\n        n_odd = n % 2\n        if n_odd:\n            n -= n_odd\n            stones.append(n * 2 + 1)\n        else:\n            n -= n_odd\n            stones.append(n * 2)\n        n /= 2\n    return stones", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n, n + 2]\n    else:\n        return [n, n + 1]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n\n    result = []\n    x = 1\n\n    while n > 0:\n        if n % 2 == 0:\n            result.append(x)\n            n = n//2\n        else:\n            result.append(x+1)\n            n = (n+1)//2\n        x += 1\n\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        m = n // 2\n        if n % 2:\n            return [m, m + 1, m + 2]\n        else:\n            return [m, m + 1]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n==0:\n        return [0]\n\n    odd, even = divmod(n, 2)\n    if even:\n        return [odd] + make_a_pile(even)\n    else:\n        return make_a_pile(odd) + [2*odd]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    res = []\n    if n > 0:\n        if n % 2 == 1:\n            res.append(n)\n        res.append(2*n)\n        for i in range(2, n/2):\n            res.append(2*n - res[i-1])\n        if n % 2 == 0:\n            res.append(res[-1] - res[-2])\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2:\n        return [n, n+1, n+2]\n    else:\n        return [n, n+2, n+1]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return [0, 0, 0]\n    if n % 2 == 0:\n        return [int(n // 2)] + make_a_pile(n - int(n // 2))\n    return [n] + make_a_pile(n - 1)\n'''\nn = input(\"Enter the positive integer \")", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    assert n >= 0\n\n    l = [1] * n\n    if n & 1:\n        l.append(l[-1] + 2)\n        return l\n    else:\n        l.append(l[-1] + 2)\n        return l", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    def answer(n):\n        if n % 2 == 0:\n            return [n, n + 2, n + 4]\n        else:\n            return [n, n + 1, n + 3]\n    return [int(answer(n)) for n in range(1, n + 1)]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n % 2 == 1:\n        last = 2 * n + 1\n    else:\n        last = 2 * n\n\n    levels = []\n    for i in range(n):\n        levels.append(last)\n        last = last/2\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    def next_odd_or_even(n):\n        if n % 2 == 1:\n            return (n + 1) * 2\n        else:\n            return (n + 1) * 2 + 1\n\n    stones = [0] * n\n    for i in range(1, n + 1):\n        stones[i] = next_odd_or_even(i)\n    return stones", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n\n    if n % 2 == 0:\n        return [n + 1] + make_a_pile(n//2)\n    else:\n        return [n + 2] + make_a_pile(n//2 - 1)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n <= 0:\n        return [0]\n    else:\n        L = [0]\n        while n > 0:\n            if n%2 == 1:\n                L.append(2*L[-1]+1)\n            else:\n                L.append(2*L[-1])\n            n -= 1\n        return L", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    levels = list()\n    while n > 0:\n        if n % 2 == 1:\n            levels.append(n + 1)\n        else:\n            levels.append(n / 2)\n        n -= 1\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if not n:\n        return []\n    elif n & 1:\n        return [1] + [ n + 2 * i for i in range(n//2 + 1) ]\n    else:\n        return [n/2] + [ n + 2 * i for i in range(n//2) ]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [1, 1, 1]\n    if n % 2 == 0:\n        return [(n + 1) // 2, n + 1, n + 1]\n    else:\n        return [n, n + 2, n + 4]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    if n <= 0:\n        return []\n\n    levels = []\n\n    if n % 2 == 0:\n        levels.append(n // 2)\n        n -= n // 2\n        for i in range(1, n//2):\n            levels.append(i + 2)\n    else:\n        levels.append(n)\n        for i in range(1, n):\n            levels.append(i + 2)\n\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    if n == 0:\n        return []\n    elif n % 2 == 0:\n        return [n + 1] + make_a_pile(n/2)\n    else:\n        return [n + 3] + make_a_pile(n-1)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise ValueError('n must be > 0')\n\n    odd = 0\n    even = 1\n\n    result = []\n    level = n\n    while level > 0:\n        if level % 2 == 0:\n            result.append(even)\n            level -= 2\n            even += 2\n        else:\n            result.append(odd)\n            level -= 1\n            odd += 1\n\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    assert n >= 1\n\n    result = [1]\n\n    # If n is odd, add the next odd number.\n    if n % 2 == 1:\n        result.append(2 * result[-1] + 1)\n\n    # If n is even, add the next even number.\n    else:\n        result.append(2 * result[-1])\n\n    # Repeat until n reaches 0.\n    while n!= 0:\n        n = n // 2\n        result.append(2 * result[-1])\n\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return [0]\n\n    if n == 1:\n        return [1]\n\n    levels = []\n\n    for i in range(n + 1):\n        if i % 2 == 0:\n            levels.append(2 * i)\n        else:\n            levels.append(2 * i + 1)\n\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    l = []\n    while n > 0:\n        if n % 2 == 0:\n            l.append(n + n + 1)\n        else:\n            l.append(n + n - 1)\n        n -= 1\n    return l", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    def next_nth(n):\n        if n % 2 == 0:\n            return 2 * n\n        else:\n            return (2 * n) + 1\n\n    def nth2(n):\n        if n < 2:\n            return 1\n        else:\n            return (2 * n) + 1\n\n    if n <= 1:\n        return [1]\n    else:\n        return [nth2(n), next_nth(n), next_nth(n - 1)]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    l = []\n    n = int(n)\n    if n%2==0:\n        n = n/2\n    else:\n        n = n+1\n    l.append(n)\n    l.extend(make_a_pile(n-1))\n    return l", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # levels: 1, 2, 3, 4, 5, 6, 7, 8, 9\n    if n == 1:\n        return [1]\n\n    stones = make_a_pile(n // 2)\n    return [stones[i + 1] + 1 for i in range(0, n, 2)] + stones", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n==1:\n        return [1]\n    if n % 2 == 0:\n        return n+[1]\n    return [n]+make_a_pile(n-1)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        for i in range(1, n):\n            n *= 2\n    else:\n        for i in range(1, int(n ** 0.5) + 1):\n            n += 2\n    return [n // 2 * i + 1 for i in range(n)]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    result = []\n    while True:\n        if n % 2:\n            result.append(n + 1)\n            n -= 1\n        else:\n            result.append(n)\n        if n == 1:\n            break\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    def make_a_pile_helper(n, l):\n        if n < 1:\n            return l\n        elif n % 2:\n            return l + make_a_pile_helper(n - 2, l + 1)\n        else:\n            return l + make_a_pile_helper(n - 2, l + 2)\n\n    return make_a_pile_helper(n, [1])", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones = []\n    stones.append(n)\n    while len(stones) > 0:\n        if len(stones) % 2:\n            stones.append(len(stones) + 1)\n        else:\n            stones.append(len(stones) + 2)\n    return stones", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones = []\n    while n:\n        if n % 2 == 0:\n            stones.append(n // 2)\n            n //= 2\n        else:\n            stones.append(n + 1)\n            n //= 3\n    return stones", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n % 2 == 0:\n        if n == 1:\n            return [1]\n        return [(n-1) // 2 + 1] + make_a_pile(n-2)\n    return [(n-1) // 2 + 1] + make_a_pile(n-2)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return [0]\n    if n & 1:\n        return [n] + make_a_pile(n // 2)\n    return [n // 2] + make_a_pile(n // 4)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # \u041f\u043e\u0434\u0441\u0447\u0451\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u0430\u043c\u043d\u0435\u0439 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435\n    n = int(n)\n    if n % 2 == 0:\n        k = 2\n    else:\n        k = 3\n    stones = list()\n    for i in range(n):\n        stones.append(k)\n        k = 2 if k == 3 else 3\n    return stones", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    # The number of stones in the first level is n.\n    stones = list(range(n))\n\n    # The number of stones in the next level is the next odd or even number.\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(stones[i] + stones[i-1])\n        else:\n            stones.append(stones[i] + stones[i-1] + 1)\n    return stones", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    level_counts = []\n    curr_level = n\n    level_counts.append(curr_level)\n    while curr_level >= 1:\n        if curr_level % 2!= 0:\n            curr_level += curr_level // 2\n        else:\n            curr_level += curr_level // 2 + 1\n        level_counts.append(curr_level)\n    return level_counts", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    if n <= 1:\n        return [1, 2]\n\n    odd_level = 1\n    even_level = 1\n    level = 3\n\n    while level <= n:\n        if n % 2 == 1:\n            level += odd_level\n        else:\n            level += even_level\n        odd_level = even_level = (level // 2) + 1\n        level += 1\n\n    return level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    def next_odd(n):\n        \"\"\"\n        Find the next odd number after n\n        >>> next_odd(3)\n        5\n        >>> next_odd(5)\n        7\n        >>> next_odd(7)\n        9\n        \"\"\"\n        while n % 2 == 0:\n            n += 1\n        return n\n\n    def next_even(n):\n        \"\"\"\n        Find the next even number after n\n        >>> next_even(3)\n        5\n        >>> next_even(5)\n        7\n        >>> next_even(7)\n        9\n        \"\"\"\n        n += 2\n        while n % 2!= 0:\n            n += 1\n        return n\n\n    if n < 3:\n        return []\n    if n % 2 == 0:\n        levels = [next_even(n) for x in range(n)]\n    else:\n        levels = [next_odd(n) for x in range(n)]\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    res = []\n    res.append(n)\n    for i in range(n, 0, -2):\n        if i % 2!= 0:\n            res.append(i + 2)\n        else:\n            res.append(i + 1)\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        odd = n\n        even = n\n    else:\n        odd = n + 1\n        even = n + 2\n    odd = odd - 1\n    even = even - 1\n    return [odd, even]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    result = []\n    while n > 0:\n        if n % 2:\n            result.append(n)\n        n //= 2\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 2:\n        return [n, n]\n    ret = []\n    for i in range(n):\n        ret.append(i+1)\n    if n & 1:\n        return ret[:n//2] + ret[n//2:] + [1]\n    return ret[:n//2] + [1] + ret[n//2:]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    levels = []\n\n    if n % 2 == 0:\n        i = 0\n        while i < n:\n            levels.append(i * 2)\n            i += 1\n    else:\n        i = 0\n        while i < n:\n            levels.append(i + 1)\n            i += 1\n\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    result = []\n    if n % 2 == 0:\n        while n!= 0:\n            n = n // 2\n            result.append(n)\n    else:\n        while n!= 0:\n            n = n - 1\n            result.append(n + 1)\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n\n    if n % 2 == 0:\n        n -= 1\n    if n == 0:\n        return [1]\n\n    return [1] + [2*i for i in range(n)] + [2*i-1 for i in range(n)]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    stones_in_pile = []\n    for i in range(n):\n        if n % 2 == 0:\n            stones_in_pile.append(n - i + 2)\n        else:\n            stones_in_pile.append(n - i + 1)\n        n = n // 2\n\n    return stones_in_pile", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n\n    odd = n % 2\n    last_odd = 1 if odd == 0 else n - 1\n    even = (n - odd) / 2\n    last_even = 2 if even == 0 else last_odd + n - odd\n\n    result = [n - 1]\n    for i in range(n - 1):\n        if i == odd:\n            result.append(last_odd + 1)\n        else:\n            result.append(last_even)\n        last_odd = last_even\n        last_even = result[-1]\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    stones = []\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n            stones.append(n)\n        else:\n            n -= 1\n            stones.append(n + 1)\n    return stones", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    if n == 0:\n        return []\n    if n % 2 == 0:\n        m = (n / 2) + 1\n    else:\n        m = (n + 1) / 2\n    result = [n]\n    for i in range(1, m):\n        result.append(next((x for x in range(2, n + 1) if x % 2 == (i % 2))))\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # [This is not a real solution. It's only for self-learning.]\n    if n == 0:\n        return []\n    if n % 2 == 0:\n        return [2*i for i in range(0, n + 1, 2)]\n    else:\n        return [i for i in range(1, n + 1)]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [1]\n    rest = n - 1\n    if rest % 2 == 0:\n        return [1] + make_a_pile(rest//2)\n    else:\n        return make_a_pile(rest//2 + 1) + [rest//2]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    odd = 0\n    even = 1\n    total_stones = []\n    if n % 2:\n        odd = even\n    else:\n        even = odd\n    for _ in range(n):\n        total_stones.append(odd if n % 2 else even)\n        if n == 1:\n            break\n        n = n // 2\n    return total_stones", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    if n == 0:\n        return []\n\n    level = []\n    n = int(n)\n\n    for i in range(1, n+1):\n        if n % 2 == 1:\n            level.append(n + 2 - i)\n        else:\n            level.append(i)\n\n    return level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n & 1:\n        return [n] + make_a_pile(n - 1)\n    else:\n        return make_a_pile(n // 2) + [(n + 1) // 2] + make_a_pile(n // 2 - 1)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        n = n // 2 + 1\n    else:\n        n = (n + 1) // 2\n    if n > 1:\n        return make_a_pile(n-1) + [n]\n    else:\n        return [n]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    if n % 2 == 0:\n        odd = n\n    else:\n        odd = n + 1\n\n    res = []\n    for i in range(1, odd):\n        if i % 2 == 0:\n            res.append(i)\n        else:\n            res.append(i + 1)\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    def level_num(n):\n        if n % 2 == 0:\n            return 2 * n + 2\n        else:\n            return 2 * n + 1\n\n    def make_a_pile(n):\n        if n == 0:\n            return [0]\n        else:\n            return [n, level_num(n-1), level_num(n-2)] + make_a_pile(n-1)\n\n    return make_a_pile(n)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    l = []\n    while n > 0:\n        n -= 1\n        if n % 2!= 0:\n            l.append(n + 2)\n        else:\n            l.append(n + 1)\n    return l", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # To make a pile of 3 stones, we need 3 stones in the first level, then 5 in the\n    # second level, and 7 in the third level.\n    stone_needed = n\n    stone_count = [n]\n    for i in range(1, len(stone_count)):\n        if n % 2 == 0:\n            stone_count[i] = (stone_needed + stone_count[i - 1]) // 2\n        else:\n            stone_count[i] = stone_needed + stone_count[i - 1]\n        stone_needed -= stone_count[i]\n    return stone_count\n</s>", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    def make_pile(n):\n        if n == 1:\n            return [1]\n        else:\n            if n % 2 == 0:\n                return [ n * 2 ] + make_pile(n // 2)\n            else:\n                return [ n * 2 + 1 ] + make_pile(n // 2 - 1)\n\n    return make_pile(n)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 1:\n        return []\n    if n%2 == 0:\n        # even number\n        num = []\n        for i in range(n/2):\n            num.append(i+1)\n    else:\n        # odd number\n        num = []\n        num.append(n+1)\n        num.append(2*n+1)\n\n    return num", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        for _ in range(n/2):\n            yield 2\n    else:\n        for _ in range(n/2):\n            yield 3\n        yield 5", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    assert n > 0, 'n must be a positive integer.'\n    if n % 2 == 0:\n        if n == 4:\n            return [3, 5]\n        else:\n            return [3] + list(map(lambda x: 2 * x, range(1, n))) + [5]\n    else:\n        return [3, 5, 7] + list(map(lambda x: 2 * x, range(1, n - 1))) + [5]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n % 2 == 0:\n        return [n+1, n+2]\n    return [n, n+1] + make_a_pile(n/2)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return [0, 0, 0]\n    if n % 2 == 0:\n        return [int(n/2), n, int((n-1)/2)]\n    else:\n        return [int(n/2), int(n/2) + 1, n]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n <= 0:\n        return []\n    level = [n]\n    while True:\n        if n % 2 == 1:\n            n += 2\n        elif n % 2 == 0:\n            n += 1\n        else:\n            break\n        level.append(n)\n    return level[::-1]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    def get_odd_number(n):\n        return n*2 + 1\n\n    def get_even_number(n):\n        return n*2\n\n    n = int(n)\n    if n == 0:\n        return [0]\n    if n % 2 == 0:\n        return [get_even_number(n)] + make_a_pile(n-1)\n    else:\n        return [get_odd_number(n)] + make_a_pile(n-1)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    odd = 2\n    even = 4\n    level = [n]\n    num_stones = n\n    while num_stones > 0:\n        num_stones -= 1\n        odd = 2 * odd\n        even = 2 * even\n        if num_stones % 2 == 0:\n            level.append(even)\n        else:\n            level.append(odd)\n\n    return level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = abs(int(n))\n    result = [n]\n    next_n = n\n    while next_n > 0:\n        if n % 2 == 0:\n            next_n = next_n // 2\n        else:\n            next_n = next_n + 1\n        result.append(next_n)\n        n = next_n\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 1:\n        return None\n    # check if n is even or odd\n    if n & 1:\n        odd = True\n    else:\n        odd = False\n\n    # start with n stones\n    stones = [n]\n\n    # get next odd or even number of stones\n    while stones[-1] <= 0:\n        if odd:\n            stones.append(stones[-1]+stones[-1]+1)\n        else:\n            stones.append(stones[-1]+stones[-1])\n\n    return stones", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n % 2 == 0:\n        return [int(2 * i + 1) for i in range(n / 2 + 1)]\n    else:\n        return [int(i * 2) for i in range(n + 1)]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    levels = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            levels.append(i + 2)\n        else:\n            levels.append(i + 1)\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones = []\n    n = int(n)\n    while n > 0:\n        stones.append(n % 2)\n        n = int(n / 2)\n\n    return stones", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    if n == 1:\n        return [1]\n    result = [1, 2 if n % 2 == 0 else 3]\n    while n > 1:\n        n -= 1\n        result.append(result[-1] + 2 if n % 2 == 0 else result[-1] + 4)\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if not n or n <= 1:\n        return []\n    if n % 2 == 0:\n        n = n // 2\n    if n == 1:\n        return [1]\n    return [n - 1] + make_a_pile(n - 1)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    first = n\n    result = []\n    while True:\n        if n % 2 == 1:\n            second = n + 1\n        else:\n            second = n + 2\n        result.append(second)\n        if first == second:\n            break\n        first = second\n        n = second\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if not n:\n        return []\n    result = []\n    for _ in range(n):\n        if n % 2 == 0:\n            result.append(int(n / 2) + 1)\n        else:\n            result.append(int(n / 2) + 2)\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    if n == 1:\n        return [1]\n\n    piles = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            piles.append(2 * (i - 1) + 2)\n        else:\n            piles.append(2 * (i - 1))\n\n    return piles", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    if n <= 1:\n        return []\n\n    if n & 1:\n        result = [1] * n\n        result[n // 2] = n + 1\n    else:\n        result = [2] * (n // 2) + [1] * (n // 2)\n        result[n // 2] = n + 2\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    def odd_next(n):\n        if n % 2 == 0:\n            return n + 2\n        else:\n            return n + 1\n\n    def even_next(n):\n        if n % 2 == 1:\n            return n + 2\n        else:\n            return n + 1\n\n    level = [n]\n    while level:\n        n = level.pop(0)\n        if n % 2:\n            level.append(odd_next(n))\n        else:\n            level.append(even_next(n))\n    return level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return [0, 0, 0]\n\n    if n % 2 == 0:\n        n = (n + 1) // 2\n    else:\n        n = (n + 3) // 2\n\n    return [n, n + 1, n + 3]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    level = [n]\n    for i in range(1, int(n/2) + 1):\n        if n % 2 == 1:\n            level.append(2 * level[i-1] + 1)\n        else:\n            level.append(2 * level[i-1])\n    return level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    if n == 0:\n        return [0]\n\n    odd = 0\n    even = 0\n    result = []\n    while n > 0:\n        if n % 2:\n            result.append(even)\n            odd += 1\n        else:\n            result.append(odd)\n            even += 2\n        n -= 1\n\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    def _cal_level(n, level):\n        if (n % 2) == 0:\n            return (n // 2) * 2**level\n        else:\n            return (n // 2) * 2**(level+1)\n\n    level = 1\n    result = []\n    while (n > 0):\n        result.append(_cal_level(n, level))\n        n = n // 2\n        level += 1\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 1:\n        return None\n    res = []\n    for i in range(0, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        res.append(n)\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    def make_level(n):\n        while n > 1:\n            yield n\n            n += 1\n\n    if n < 0:\n        return []\n    elif n == 0:\n        return [0]\n\n    return list(map(lambda x: x + 1, make_level(n)))", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [ n, n+1, n+2 ]\n    else:\n        return [ n, n+2, n+4 ]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    def next_odd_even(n):\n        \"\"\"\n        Return the next odd or even number, depending on n.\n        \"\"\"\n        return n // 2 * 2 + 1 if n % 2 else n // 2 * 2\n    if n <= 0:\n        raise ValueError('n must be a positive integer')\n\n    levels = [n]\n    while True:\n        n = next_odd_even(len(levels))\n        levels.append(n)\n        if n == 1:\n            break\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n % 2:\n        return [n, n + 1, n + 2, n + 3, n + 4]\n    else:\n        return [n, n + 2, n + 4, n + 6, n + 8]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    assert n > 0\n    if n % 2 == 0:\n        a = [n]\n        for i in range(1, n):\n            a.append(next((k for k in range(2, n) if k % 2 == 0), next((k for k in range(2, n) if k % 2!= 0), a[-1] * 2)))\n    else:\n        a = [n]\n        for i in range(1, n):\n            a.append(next((k for k in range(2, n) if k % 2 == 0), a[-1] * 2))\n    return a", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # Write your code here\n    if n == 1:\n        return [1]\n    n = str(n)\n    n = list(n)\n    result = [1]\n    for i in range(len(n)):\n        result.append(n[i+1])\n        n[i] = n[i]/2\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    result = []\n    n = int(n)\n\n    for _ in range(n):\n        if n % 2 == 1:\n            result.append(result[-1] + 2)\n        else:\n            result.append(result[-1] + 4)\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    # Number of stones in the next level is always odd, if n is odd.\n    # Number of stones in the next level is always even, if n is even.\n    if n % 2:\n        next_number = n + 1 + 2 * (n % 2)\n    else:\n        next_number = n + 1\n\n    # Initial number of stones is n.\n    stones = [n]\n    # Initialize the second level with the number of stones in the next level.\n    stones.append(next_number)\n    # Initializing the remaining levels with the corresponding number of stones\n    # in the next level.\n    for i in range(1, n):\n        stones.append(next_number)\n    return stones", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [n] + make_a_pile(n-2)\n    else:\n        return [n] + make_a_pile(n-1)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    if n == 1:\n        return [1]\n\n    top = n\n    levels = []\n    while top > 0:\n        if top % 2 == 1:\n            levels.append(top + 1)\n        else:\n            levels.append(top)\n        top /= 2\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    odd = n\n    even = n\n    pile = [n]\n    while even > 0:\n        if odd % 2 == 1:\n            odd = odd + 2\n        else:\n            odd = odd + 4\n        even = even - 1\n        pile.append(odd)\n    return pile", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        i = 0\n        while n > 0:\n            n = n / 2\n            i += 1\n    else:\n        i = 0\n        while n > 1:\n            n = (n + 1) / 2\n            i += 1\n    return [i for i in range(n)]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    result = []\n    while n > 1:\n        result.append(n % 2 + 2)\n        n /= 2\n    if n == 1:\n        result.append(1)\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    def odd_even(n):\n        if n % 2 == 1:\n            return n + 2\n        else:\n            return n + 4\n\n    pile = [n]\n    for i in range(n):\n        if n % 2 == 0:\n            pile.append(odd_even(n))\n        else:\n            pile.append(odd_even(n - 1))\n        n = pile[-1]\n    return pile", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 1:\n        return []\n    if n % 2 == 0:\n        next_num = n + 2\n    else:\n        next_num = n + 3\n    return [next_num] + make_a_pile(n - next_num)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n % 2 == 0:\n        res = [2*i for i in range(0, n/2 + 1)]\n    else:\n        res = [i for i in range(1, n + 1, 2)]\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n\n    k = 1\n    l = [1]\n    while k < n:\n        if n % 2 == 0:\n            l.append(l[-1] + 2)\n        else:\n            l.append(l[-1] + 3)\n        k += 1\n\n    return l", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    level = [n]\n    while n > 0:\n        if n & 1:\n            n -= 1\n        else:\n            n /= 2\n        level.append(n)\n    return level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    # Algorithm:\n    #\n    # 1. Represent n as sum of two integers a and b, such that 0 <= a < b.\n    #\n    # 2. If a is 0, then b is n.\n    #\n    # 3. If b is 0, then a is n.\n    #\n    # 4. Make a pile of n stones in the following way:\n    #\n    # 4.1 If a is odd, then make a pile of a stones.\n    #\n    # 4.2 If a is even, then make a pile of a stones and a pile of b stones.\n    #\n    # 5. Make a pile of b stones.\n    #\n    # 6. Return the number of stones in each level in a list, where element at\n    # index i represents the number of stones in the level (i+1).\n\n    a, b = n // 2, n % 2\n\n    if a == 0:\n        if b == 0:\n            return [0] * n\n        else:\n            return [1] * a + [0] * b\n    elif b == 0:\n        return [1] * a\n    else:\n        return [1] * a + [1] * b\n</s>", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 1:\n        return []\n    if n % 2 == 1:\n        return [n] + make_a_pile(n // 2)\n    return [n] + make_a_pile(n - 1)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 1:\n        return []\n\n    n_odd = 1\n    n_even = 2\n\n    if n % 2 == 0:\n        n_even += 1\n\n    levels = []\n\n    while n:\n        n -= n_odd\n        n_odd += n_even\n        n_even += 2\n\n        levels.append(n_odd)\n\n        n_odd -= n_even\n        n_even += 2\n\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [n, 2*n, 4*n, 8*n, 16*n, 32*n]\n    else:\n        return [n, 3*n, 5*n, 7*n, 9*n, 13*n]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    res = []\n    for i in range(0, n + 1):\n        if n % 2 == 1:\n            if n == 2:\n                res.append(1)\n            else:\n                res.append(2 * (n - 1))\n        else:\n            res.append(n * (n + 1) - 1)\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return [0]\n\n    if n % 2 == 0:\n        next_num = n\n    else:\n        next_num = n + 2\n\n    res = []\n    res.append(n)\n    res.append(next_num)\n    res.append(next_num + 2)\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [2, 4]\n    else:\n        odd = n % 2\n        result = [n]\n        for i in range(1, n):\n            if odd:\n                result.append(result[-1] + 2)\n            else:\n                result.append(result[-1] + 4)\n            odd = not odd\n        return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2:\n        if n % 4:\n            return [2 * i + 1] + make_a_pile(n // 2)[i + 1:]\n        else:\n            return [2 * i + 1] + make_a_pile(n // 2)[:i + 1]\n    else:\n        return [2 * i] + make_a_pile(n // 2)[2:]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2:\n        n += 2\n    i = 1\n    result = []\n    while i <= n:\n        result.append(n)\n        n += i\n        i += 1\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    result = []\n    if n == 0:\n        return []\n    num = n\n    while True:\n        if num % 2 == 0:\n            num += 2\n        else:\n            num += 1\n        result.append(num)\n        if num == 0:\n            break\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        n = n + 2\n        while n > 1:\n            yield n\n            n = n - 2\n    else:\n        n = n + 1\n        while n > 1:\n            yield n\n            n = n - 1", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [1]\n\n    if n%2 == 0:\n        return [1] + [2, 2, 2, 2, 2, 2, 2]\n    else:\n        return [1] + [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    res = [n]\n    while True:\n        n += 1\n        if n % 2 == 1:\n            n += 1\n        if n <= len(res):\n            res.append(n)\n        else:\n            return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n < 1:\n        return []\n    if n % 2 == 0:\n        return [n, n + 2] + make_a_pile(n / 2)\n    else:\n        return [n, n + 1] + make_a_pile(n - 1)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # \u5224\u65adn\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\n    if n % 2 == 0:\n        # \u5224\u65adn\u662f\u5426\u4e3a\u5076\u6570\uff0c\u5982\u679c\u4e3a\u5076\u6570\uff0c\u5219n = n/2\n        while n % 2 == 0:\n            n = n / 2\n        # \u5947\u6570\u4e3an * 3 + 1\uff0c\u5076\u6570\u4e3an * 3\n        if n == 1:\n            return [n]\n        else:\n            result = []\n            for i in range(0, n):\n                result.append(n * 3 + 1)\n            return result\n    else:\n        # \u5947\u6570\u4e3an * 3 + 1\uff0c\u5076\u6570\u4e3an * 3 + 2\n        if n == 1:\n            return [1]\n        else:\n            result = []\n            for i in range(0, n):\n                result.append(n * 3 + 1)\n            return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    def recurse(n):\n        if n == 1:\n            return [1]\n        if n % 2 == 1:\n            return recurse(n-1) + [2]\n        return recurse(n-1) + recurse(n-2)\n    return recurse(n)", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    if n < 1:\n        raise ValueError('Input number must be positive')\n\n    if n % 2 == 0:\n        return [n, n * 2]\n    else:\n        return [n, n * 2 + 1]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n <= 0:\n        return []\n    k = n + 1\n    res = [1]\n    while k > 0:\n        if k % 2:\n            res.append(res[-1] + 2)\n            k -= 1\n        else:\n            res.append(res[-1] + 1)\n            k -= 2\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    res = []\n    for i in range(n):\n        if n % 2 == 1:\n            next_odd_number = (n + 1) % 2\n        else:\n            next_odd_number = (n + 2) % 2\n        res.append(next_odd_number)\n        n = next_odd_number\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    res = []\n    n = n - 1\n    while n!= 0:\n        if n % 2 == 0:\n            res.append(n // 2 + 1)\n        else:\n            res.append(n + 1)\n        n -= 1\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [int(n/2)]\n    else:\n        return [int(n/2), 3*int(n/2)]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # def make_a_pile(n):\n    if n <= 1:\n        return [n]\n    elif n % 2 == 0:\n        return [n, n + 2, n + 4]\n    else:\n        return [n, n + 1, n + 3]", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 0:\n        return [0,0,0]\n\n    first_n = n\n    if n % 2 == 0:\n        first_n = n + 2\n    first_n += 2\n    next_n = first_n - 2\n\n    res = [first_n]\n\n    while True:\n        if first_n % 2 == 0:\n            next_n = first_n\n        else:\n            next_n = first_n + 2\n\n        res.append(next_n)\n        if next_n < n:\n            break\n\n        first_n = next_n\n\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    num = n\n    while num > 0:\n        if num % 2:\n            num += 2\n        else:\n            num += 1\n        yield num\n        num -= 1", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    n = int(n)\n    res = [n]\n    if n % 2 == 0:\n        level_size = 2\n        while level_size < n:\n            level_size = 2 * level_size\n    else:\n        level_size = 3\n        while level_size < n:\n            level_size = 3 * level_size + 1\n    for i in range(1, n):\n        res.append(level_size)\n    return res", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # assert(n >= 0)\n\n    if n == 0:\n        return [0]\n\n    first_n = n\n    levels = []\n    while n!= 0:\n        if n % 2 == 0:\n            levels.append(next_even_number(first_n))\n            n /= 2\n        else:\n            levels.append(next_odd_number(first_n))\n            n /= 2\n        first_n = first_n - 1\n    return levels", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n <= 0:\n        return []\n    l = [1]\n    for i in range(2, n + 1):\n        if i % 2:\n            l.append(next(x for x in l if x % 2 == 0))\n        else:\n            l.append(next(x for x in l if x % 2!= 0))\n    return l", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    assert n > 0\n\n    if n % 2 == 1:\n        n = n + 1\n    a = [1]*n\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            a[i] = a[i-1] + 2\n        else:\n            a[i] = a[i-1] + (n - i) // 2\n\n    return a", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    level = []\n\n    if n == 0:\n        return level\n\n    if n % 2!= 0:\n        for i in range(1, n + 1):\n            level.append(level[i - 1] + (n + 1) // 2)\n\n    else:\n        for i in range(1, n + 1):\n            level.append(level[i - 1] + (n + 1) // 2 + (i + 1) % 2)\n\n    return level", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    result = []\n    n = int(n)\n    while n > 0:\n        if n % 2 == 0:\n            result.append(2*result[-1])\n        else:\n            result.append(result[-1]+1)\n        n = n//2\n    return result", "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [n]\n    else:\n        n = n - 1\n        odd = n % 2\n        even = n // 2\n        result = [n]\n        result.extend(make_a_pile(odd))\n        result.extend(make_a_pile(even))\n        return result"]]