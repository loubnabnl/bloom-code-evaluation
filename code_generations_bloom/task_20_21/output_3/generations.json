[["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Init\n    min_dist = float(\"inf\")\n    min_elem1 = None\n    min_elem2 = None\n    # Loop through the numbers\n    for num1, num2 in zip(numbers[:-1], numbers[1:]):\n        dist = abs(num1 - num2)\n        if dist < min_dist:\n            min_dist = dist\n            min_elem1 = num1\n            min_elem2 = num2\n    return min_elem1, min_elem2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    sorted_list = sorted(numbers)\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two entries\")\n\n    smallest = sorted_list[0]\n    largest = sorted_list[-1]\n    for n in range(1, len(sorted_list)):\n        if sorted_list[n] - sorted_list[n - 1] < largest - smallest:\n            largest = sorted_list[n - 1]\n            smallest = sorted_list[n]\n        else:\n            return sorted_list[n - 1], sorted_list[n]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return min(numbers, key=lambda x: abs(numbers[0] - x)) if len(numbers) > 1 else None, max(numbers, key=lambda x: abs(numbers[-1] - x))", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closet_pair = 0.0, float('inf')\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(numbers[i] - closet_pair[0]):\n                closet_pair = numbers[i], numbers[j]\n    return closet_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list of numbers must contain at least two elements.\")\n\n    if len(numbers) > 2:\n        min_index, max_index = sorted([-1, -1])[0:2]\n        for index in range(1, len(numbers)):\n            if numbers[index] < numbers[min_index]:\n                min_index = index\n            elif numbers[index] > numbers[max_index]:\n                max_index = index\n\n        return numbers[min_index], numbers[max_index]\n    else:\n        return numbers[0], numbers[0]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # check to make sure there are at least 2 numbers in the list\n    if len(numbers) < 2:\n        raise ValueError('Number of numbers in list must be at least 2.')\n\n    # to_keep will keep track of which numbers to keep in the list\n    # the while loop will keep going until the list only contains 2 elements\n    to_keep = []\n\n    # while the list is longer than two elements, pop the smallest element from the list and add it to to_keep\n    # the rest of the numbers will be removed from the list\n    while len(numbers) > 2:\n        min_num = min(numbers)\n        to_keep.append(min_num)\n        numbers.remove(min_num)\n\n    # now we have to_keep = [2.0, 4.0], so 2.0 is the smaller number\n    # and 4.0 is the larger number\n    return to_keep[0], to_keep[1]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # if number list has only one element, just return that as the closest pair\n    if len(numbers) < 2:\n        return numbers[0], numbers[0]\n\n    # otherwise find the minimum and maximum elements\n    min_n = min(numbers)\n    max_n = max(numbers)\n\n    # and find the closest pair\n    min_dist = abs(min_n - max_n)\n    return min_n, max_n", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    min_idx, max_idx = 0, len(numbers) - 1\n    min_dist, max_dist = numbers[0], numbers[0]\n\n    for i in range(1, len(numbers)):\n        new_min_dist = abs(numbers[i] - numbers[min_idx])\n        new_max_dist = abs(numbers[i] - numbers[max_idx])\n\n        if new_min_dist < min_dist:\n            min_dist, min_idx = new_min_dist, i\n        if new_max_dist < max_dist:\n            max_dist, max_idx = new_max_dist, i\n\n    return numbers[min_idx], numbers[max_idx]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    distances = []  # type: List[float]\n    for i in range(1, len(numbers) - 1):\n        distances.append(abs(numbers[i] - numbers[i + 1]))\n\n    # Find and return the two closest numbers\n    min_dist = min(distances)\n    closest_numbers = [numbers[i] for i in range(len(numbers)) if distances[i] == min_dist]\n    return closest_numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) <= 1:\n        return numbers[0], numbers[0]\n\n    minimum = min(numbers)\n    maximum = max(numbers)\n    min_index = numbers.index(minimum)\n    max_index = numbers.index(maximum)\n    min_diff = abs(maximum - minimum)\n    index = min_index if min_index!= max_index else max_index\n\n    return numbers[index], numbers[(index + 1) % len(numbers)]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    index1 = 0\n    index2 = 0\n    distance = 1000.0\n    for i in range(1, len(numbers)):\n        d1 = (numbers[index1] - numbers[index2])\n        d2 = (numbers[i] - numbers[index2])\n        if d1 < distance:\n            index1 = i\n            distance = d1\n        elif d2 < distance:\n            index2 = i\n            distance = d2\n    return numbers[index1], numbers[index2]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_1, closest_2 = None, None\n    min_diff = 9999999.0\n    for index_1, number_1 in enumerate(numbers):\n        for index_2, number_2 in enumerate(numbers[index_1 + 1:]):\n            diff = abs(number_1 - number_2)\n            if diff < min_diff:\n                min_diff = diff\n                closest_1 = number_1\n                closest_2 = number_2\n\n    return closest_1, closest_2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) <= 1:\n        return numbers[0], numbers[0]\n    min_diff = None\n    min_diff_index = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if min_diff is None or diff < min_diff:\n                min_diff = diff\n                min_diff_index = i, j\n    return numbers[min_diff_index[0]], numbers[min_diff_index[1]]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = sorted(numbers)\n    # if there is only one element in the list return the same element\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n    # first element is the one that is closer to the last one\n    if numbers[0]!= numbers[-1]:\n        return numbers[0], numbers[-1]\n    # if all numbers are equal\n    if len(numbers) > 1:\n        for x in numbers[1:]:\n            if x!= numbers[0]:\n                return numbers[0], x\n    # all numbers are equal\n    return numbers[0], numbers[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    lowest = None\n    closest_distance = None\n\n    for number in numbers:\n        if lowest is None or abs(lowest - number) > abs(number - closest_distance):\n            closest_distance = number\n            lowest = number\n\n    return lowest, closest_distance", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) < 2:\n        raise ValueError(\"The supplied list of numbers is too short\")\n\n    if len(numbers) == 2:\n        return numbers\n\n    if len(numbers) == 3:\n        if numbers[1] - numbers[0] < numbers[2] - numbers[1]:\n            return (numbers[0], numbers[1])\n        else:\n            return (numbers[1], numbers[2])\n\n    if len(numbers) == 4:\n        if numbers[1] - numbers[0] < numbers[2] - numbers[1] and numbers[1] - numbers[0] < numbers[3] - numbers[2]:\n            return (numbers[0], numbers[1])\n        elif numbers[2] - numbers[1] < numbers[3] - numbers[2]:\n            return (numbers[1], numbers[2])\n        else:\n            return (numbers[2], numbers[3])\n\n    if len(numbers) == 5:\n        if numbers[2] - numbers[1] < numbers[3] - numbers[2] and numbers[2] - numbers[1] < numbers[4] - numbers[3]:\n            return (numbers[0], numbers[1])\n        elif numbers[3] - numbers[2] < numbers[4] - numbers[3]:\n            return (numbers[2], numbers[3])\n        else:\n            return (numbers[3], numbers[4])\n\n    if len(numbers) == 6:\n        if numbers[3] - numbers[2] < numbers[4] - numbers[3] and numbers[3] - numbers[2] < numbers[5] - numbers[4]:\n            return", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    numbers = sorted(numbers)\n    return numbers[-2], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # In case the list of numbers is empty return no elements (thus saving an if statement)\n    if numbers == []:\n        return (float(\"inf\"), float(\"-inf\"))\n\n    # Find the smallest and largest number in the list (note: if the list has only one number it will be automatically be\n    # considered the smallest and largest number)\n    min_element = min(numbers)\n    max_element = max(numbers)\n\n    # Check if the smallest number is equal to the largest number\n    if min_element == max_element:\n        # If so return the single number\n        return min_element, max_element\n\n    # In case the list has more than one element and the smallest element is not equal to the largest element, select the\n    # two closest elements and return them\n    else:\n        closest_element_1 = min_element + (max_element - min_element) / 2\n        closest_element_2 = min_element - (max_element - min_element) / 2\n        if closest_element_1 < closest_element_2:\n            return closest_element_1, closest_element_2\n        else:\n            return closest_element_2, closest_element_1", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"At least 2 numbers are required\")\n    min_dist = 999999\n    min_1 = min_2 = numbers[0]\n\n    for num in numbers[1:]:\n        dist = abs(num - min_1)\n        if dist < min_dist:\n            min_dist = dist\n            min_1 = num\n            min_2 = numbers[0]\n        else:\n            dist = abs(num - min_2)\n            if dist < min_dist:\n                min_dist = dist\n                min_1 = numbers[0]\n                min_2 = num\n\n    return min_1, min_2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise Exception(\"Need at least two numbers.\")\n\n    smallest = float('-inf')\n    largest = float('inf')\n\n    for i, number in enumerate(numbers):\n        if i < len(numbers) - 1:\n            if numbers[i + 1] - number < smallest - number:\n                smallest = numbers[i + 1] - number\n            if number - numbers[i + 1] < largest - numbers[i + 1]:\n                largest = number - numbers[i + 1]\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('Length of list must be at least two.')\n    # Find the first element whose value is larger than the second.\n    first, second = max(numbers), min(numbers)\n    # Find the first element whose value is smaller than the second.\n    third, fourth = min(numbers), max(numbers)\n    # Return the first two elements whose values are closest to each other.\n    if abs(first - third) < abs(second - fourth):\n        return third, fourth\n    else:\n        return first, second", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    numbers.sort()\n    dist = abs(numbers[0] - numbers[1])\n    cur = numbers[0]\n\n    for i in range(1, len(numbers)):\n        dist = abs(numbers[i] - cur)\n        if dist < dist:\n            dist = dist\n            cur = numbers[i]\n    return cur, numbers[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    n = len(numbers)\n    i = 0\n    while i < n - 2:\n        if numbers[i] > numbers[i + 1]:\n            i += 2\n        elif numbers[i] < numbers[i + 1]:\n            j = i + 2\n            while j < n and numbers[j] <= numbers[i]:\n                j += 2\n            if j >= n or numbers[i]!= numbers[j - 2]:\n                return (numbers[i], numbers[i + 1])\n            i += 2\n        i += 1\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Make sure we have at least 2 elements in the list.\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers in the list to find the closest.\")\n\n    # Store the two smallest values we can find.\n    smallest1 = None\n    smallest2 = None\n    for num in numbers:\n        if smallest1 is None or smallest2 is None or num < smallest1 or num < smallest2:\n            smallest1 = num\n            smallest2 = num\n    return smallest1, smallest2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    array = sorted(numbers)\n    if len(array) <= 1:\n        return (array[0], array[-1])\n    else:\n        return min(zip(array[1:], array[:-1])[0], key=lambda x: abs(x[0] - x[1]))", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_diff = 1000000000\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n    return numbers[min_diff_index-1], numbers[min_diff_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = sorted(numbers)\n    index = numbers.index(min(numbers))\n    return numbers[index], numbers[index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Find the two numbers with the smallest and largest difference to the rest of the numbers\n    smallest_diff = float('inf')\n    largest_diff = 0.0\n    smallest = None\n    largest = None\n\n    for index, number in enumerate(numbers):\n        num_diff = abs(number - numbers[index])\n        if num_diff < smallest_diff:\n            smallest_diff = num_diff\n            smallest = number\n        if num_diff > largest_diff:\n            largest_diff = num_diff\n            largest = number\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List length is less than 2\")\n    if len(numbers) == 2:\n        return numbers\n\n    if numbers[0] > numbers[1]:\n        numbers.reverse()\n\n    numbers.sort()\n\n    if numbers[0] == numbers[1]:\n        return (numbers[0], numbers[0])\n    return (numbers[0], numbers[1])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers[1:]:\n        if number < smallest:\n            smallest = number\n        if number > largest:\n            largest = number\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least 2 numbers to find the closest\")\n\n    smaller, larger = numbers[0], numbers[-1]\n\n    if smaller == larger:\n        return smaller, larger\n\n    for i in range(1, len(numbers) - 1):\n        if (smaller > numbers[i]) == (larger < numbers[i]):\n            smaller, larger = numbers[i], numbers[i - 1]\n        elif (smaller < numbers[i]) == (larger > numbers[i]):\n            smaller, larger = numbers[i - 1], numbers[i]\n        else:\n            continue\n\n    return smaller, larger", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n\n    min_distance = abs(numbers[1] - numbers[0])\n    closest_elements = (numbers[0], numbers[1])\n    for i in range(1, len(numbers)):\n        current_distance = abs(numbers[i] - numbers[i - 1])\n        if current_distance < min_distance:\n            min_distance = current_distance\n            closest_elements = (numbers[i - 1], numbers[i])\n    return closest_elements", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = list(numbers)  # Copy of numbers list\n\n    # Check that list has at least two elements\n    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n\n    numbers.sort()  # Sort the list\n\n    lower_index = 0\n    upper_index = len(numbers) - 1\n\n    # Lower index is always the first number in the list.\n    while lower_index < upper_index:\n        # Upper index is always the last number in the list.\n        while upper_index > lower_index:\n            # Get the difference between the two numbers\n            diff = numbers[lower_index] - numbers[upper_index]\n\n            # If the difference is less than zero, swap them around\n            if diff < 0:\n                numbers[lower_index], numbers[upper_index] = numbers[upper_index], numbers[lower_index]\n\n            # Check that the smaller number is in front of the larger number\n            if numbers[lower_index] < numbers[upper_index]:\n                break\n            else:\n                upper_index -= 1\n\n        if upper_index == lower_index:\n            lower_index += 1\n            upper_index -= 1\n\n    return numbers[lower_index], numbers[upper_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    max_diff = 0.0\n    smallest = None\n    largest = None\n    if len(numbers) >= 2:\n        for x in numbers:\n            for y in numbers:\n                if x == y:\n                    continue\n                diff = abs(x - y)\n                if diff <= max_diff:\n                    continue\n                if smallest is None or diff < max_diff:\n                    max_diff = diff\n                    smallest = x\n                    largest = y\n        return smallest, largest\n    else:\n        raise ValueError(\"List of elements must be at least of length two\")", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) == 2:\n        return numbers\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n    if len(numbers) == 0:\n        return numbers[0], numbers[0]\n    return sorted(zip(numbers[1:], numbers[1:]))[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    sorted_numbers = sorted(numbers)\n\n    return sorted_numbers[0], sorted_numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Make a copy so we can modify it\n    numbers = numbers[:]\n\n    # Sort the list\n    numbers.sort()\n\n    # Find the min and max values and the indexes of the min and max values in the list\n    min_index, max_index = numbers.index(min(numbers)), numbers.index(max(numbers))\n\n    # Swap the min and max values in the list\n    numbers[min_index], numbers[max_index] = numbers[max_index], numbers[min_index]\n\n    # Find the closest pair of numbers\n    # This is where the magic happens\n    # The pair of numbers are the first and last number in the list\n    # We check the distance to all the other values in the list\n    for i in range(min_index, max_index):\n        # Calculate the distance to the left of the current value (i)\n        to_left = abs(numbers[i] - numbers[i - 1])\n        # Calculate the distance to the right of the current value (i)\n        to_right = abs(numbers[i] - numbers[i + 1])\n\n        # Return the pair of numbers that have the smallest distance\n        if to_left <= to_right:\n            return numbers[i], numbers[i - 1]\n        else:\n            return numbers[i], numbers[i + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Sort the numbers and find the closest pair.\n    numbers = sorted(numbers)\n    mindist = 999999\n    mindist_pair = (numbers[0], numbers[-1])\n\n    for i in range(1, len(numbers)):\n        currdist = abs(numbers[i] - numbers[i - 1])\n        if currdist < mindist:\n            mindist = currdist\n            mindist_pair = (numbers[i - 1], numbers[i])\n\n    return mindist_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Make a list of all possible sub-groups of the supplied numbers.\n    groups = list(zip(numbers[:-1], numbers[1:]))\n    # Now check each of those groups for the distance between them.\n    group_distance = []\n    for group in groups:\n        # Calculate the distance between each of the two numbers.\n        distance = abs(group[0][0] - group[1][0])\n        # Make sure that the distance is not greater than the shortest distance found so far.\n        if distance < group_distance[0]:\n            group_distance[0] = distance\n            group_distance[1] = group\n    return group_distance[0][0], group_distance[1][0]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_small = numbers[0]\n    closest_large = numbers[0]\n\n    for i in range(1, len(numbers)):\n        if numbers[i] < closest_small:\n            closest_small = numbers[i]\n        if numbers[i] > closest_large:\n            closest_large = numbers[i]\n\n    return closest_small, closest_large", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not numbers:\n        raise ValueError('Input list is empty')\n    if len(numbers) < 2:\n        raise ValueError('Input list is not long enough')\n\n    # Since the list is sorted, the first element is the smallest. The second element is the largest.\n    # A list is an immutable data structure, so we can only operate on it by copying it\n    # and then modifying it. Therefore, we'll need to make a copy of the list (because we want to be able to\n    # update it with the results) and then iterate through the copy to find the closest elements.\n    closest_elements = list(numbers)\n    smallest = closest_elements.pop(0)\n    largest = closest_elements.pop(-1)\n\n    # The distance between each element in the list\n    # and the previous element in the list.\n    distance = [(n - smallest) ** 2 for n in closest_elements]\n\n    # Iterate through the list. The first element is the smallest, so if the distance is less than the distance to the\n    # second smallest element, swap the elements.\n    for index, _ in enumerate(closest_elements):\n        if distance[index] < distance[index + 1]:\n            closest_elements.pop(index + 1)\n            closest_elements.insert(index,", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = sorted(numbers)\n    closest_pair = None\n    smallest_difference = float('inf')\n\n    for i in range(1, len(numbers)):\n        difference = numbers[i] - numbers[i - 1]\n        if difference < smallest_difference:\n            closest_pair = (numbers[i - 1], numbers[i])\n            smallest_difference = difference\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_dist = None\n    min_dist_idx = None\n    for i in range(0, len(numbers) - 1):\n        dist = numbers[i] - numbers[i + 1]\n        if min_dist is None or dist < min_dist:\n            min_dist = dist\n            min_dist_idx = i\n    return numbers[min_dist_idx], numbers[min_dist_idx + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('Need at least two numbers')\n\n    min_distance = 1000.0\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        distance = abs(numbers[i] - numbers[i - 1])\n        if distance < min_distance:\n            closest_pair = (numbers[i - 1], numbers[i])\n            min_distance = distance\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def calc_min_distance(n: float, distance: float, min_distance: float) -> float:\n        \"\"\" Recursive function that given a distance and the current minimum distance determines if the distance\n        is better than the minimum distance. If it is, then return that distance. If it isn't, then use the minimum\n        distance and recursively call the function on the next number and the distance found so far.\n        \"\"\"\n        if distance < min_distance:\n            return distance\n        else:\n            return min(calc_min_distance(n + 1, distance + numbers[n], min_distance),\n                       calc_min_distance(n + 1, distance, min_distance))\n    min_distance: float = float(\"inf\")\n    min_distance_index: int = 0\n    for n in range(1, len(numbers)):\n        min_distance = calc_min_distance(n, float(\"inf\"), min_distance)\n        min_distance_index = n\n    return numbers[min_distance_index], numbers[min_distance_index + 1]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Initialize the results tuple to the first two elements in the list\n    result = (numbers[0], numbers[1])\n    min_distance = float('inf')\n    for index, value in enumerate(numbers):\n        if index > 0 and index < len(numbers) - 1:\n            distance = abs(numbers[index - 1] - value) + abs(numbers[index] - value)\n            if distance < min_distance:\n                min_distance = distance\n                result = (numbers[index - 1], numbers[index])\n    return result", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two items\")\n\n    dist1, dist2 = (float('inf'), float('inf'))\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if dist1 > dist:\n                dist1, dist2 = dist, dist1\n            elif dist2 > dist:\n                dist1, dist2 = dist2, dist\n\n    return numbers[dist1.argmin()], numbers[dist2.argmin()]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n    min_distance = (numbers[0] - numbers[1]).magnitude\n    # Find the second smallest number\n    for i in range(2, len(numbers)):\n        distance = (numbers[i] - numbers[i - 1]).magnitude\n        if distance < min_distance:\n            min_distance = distance\n            min_distance_element = i\n    return numbers[min_distance_element - 1], numbers[min_distance_element]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_diff = float('inf')\n    closest_elements: List[float] = []\n\n    for i, x in enumerate(numbers):\n        if len(closest_elements) > 1:\n            closest_x = closest_elements[-1]\n            diff = abs(x - closest_x)\n            if diff < min_diff:\n                min_diff = diff\n                closest_elements = [closest_x]\n            elif diff == min_diff:\n                closest_elements.append(x)\n        else:\n            closest_elements = [x]\n\n    return closest_elements", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Check for two or more elements\n    if len(numbers) < 2:\n        raise ValueError(\"Need two or more numbers to find closest elements\")\n\n    # Check for zero or one element\n    elif len(numbers) == 2:\n        return (numbers[0], numbers[1])\n\n    # Check for single element\n    elif len(numbers) == 1:\n        return (numbers[0], numbers[0])\n\n    # Check for list with elements that are not numbers\n    elif not all(isinstance(value, float) for value in numbers):\n        raise TypeError(\"Need list of numbers to find closest elements\")\n\n    # Check for list with more than two elements\n    elif len(numbers) > 2:\n        # Sort the list of elements\n        sorted_numbers = numbers.sort()\n        # Find the first element\n        first_element = sorted_numbers[0]\n        # Find the second element\n        second_element = sorted_numbers[1]\n\n        # Find difference between the two elements\n        diff = second_element - first_element\n\n        return (first_element, second_element)\n\n    # Check for list with zero elements\n    else:\n        raise ValueError(\"Need list of numbers to find closest elements\")</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('len(numbers) < 2 ')\n    if len(numbers) == 2:\n        return numbers\n    else:\n        min_dist = float('inf')\n        min_lst = list()\n        for i in range(len(numbers)):\n            for j in range(i + 1, len(numbers)):\n                dist = abs(numbers[i] - numbers[j])\n                if dist < min_dist:\n                    min_dist = dist\n                    min_lst = (numbers[i], numbers[j])\n        return min_lst", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) == 0:\n        raise ValueError(\"No numbers supplied\")\n\n    def get_distance(number1, number2):\n        \"\"\" Returns the distance between the two numbers.\n        >>> get_distance(2.0, 2.2)\n        0.2\n        >>> get_distance(1.0, 2.0)\n        0.5\n        \"\"\"\n        return abs(number1 - number2)\n\n    def get_smaller_distance(number1, number2, numbers):\n        \"\"\" Returns the smaller of the two distances between the two supplied numbers and the numbers in the list\n        and removes the supplied numbers from the list.\n        >>> get_smaller_distance(1.0, 2.0, [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n        0.5\n        >>> get_smaller_distance(1.0, 2.0, [1.0, 2.0, 3.0, 4.0, 5.0])\n        0.5\n        \"\"\"\n        distance1 = get_distance(number1, number2)\n        distance2 = get_distance(number2, number1)\n        if distance1 < distance2:\n            return distance1, number1", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest = numbers[0]\n    largest = numbers[0]\n\n    for i in range(1, len(numbers)):\n        current = numbers[i]\n        if current < smallest:\n            smallest = current\n        if current > largest:\n            largest = current\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) <= 2:\n        raise ValueError(\"Provided list of numbers is too short to find closest pair of elements\")\n    if len(numbers) == 2:\n        return (numbers[0], numbers[1])\n    # sort ascending\n    numbers.sort()\n    # find the first two numbers that differ\n    first_diff_index = numbers.index(min(numbers))\n    second_diff_index = numbers.index(max(numbers), first_diff_index + 1)\n    return tuple(numbers[first_diff_index], numbers[second_diff_index])\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # remove duplicate elements\n    numbers = list(set(numbers))\n    # find minimum value and maximum value\n    min_value = min(numbers)\n    max_value = max(numbers)\n    # find indexes of min_value and max_value\n    min_index = numbers.index(min_value)\n    max_index = numbers.index(max_value)\n    # if min_value == max_value then return them directly\n    if min_value == max_value:\n        return min_value, max_value\n    # else find the elements closest to min_value and max_value\n    closest_min_value = None\n    closest_max_value = None\n    for index, number in enumerate(numbers):\n        if number == min_value:\n            if closest_min_value is None:\n                closest_min_value = index\n        elif number == max_value:\n            if closest_max_value is None:\n                closest_max_value = index\n    if closest_min_value is not None and closest_max_value is not None:\n        return numbers[closest_min_value], numbers[closest_max_value]\n    # else return min_value, max_value if they are the only elements in the list\n    if min_index == max_index:\n        return numbers[min_index], numbers[min_index]\n    return numbers[min_index], numbers[max_index]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # return a tuple of closest elements\n    if not numbers:\n        return 0, 0\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n    smallest, second_smallest = numbers[0], numbers[1]\n    largest, second_largest = numbers[0], numbers[1]\n    for number in numbers:\n        if number < smallest:\n            smallest, second_smallest = number, smallest\n        if number > largest:\n            largest, second_largest = number, largest\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) <= 1:\n        raise ValueError(\"must supply at least 2 numbers\")\n\n    smallest_diff = float('inf')\n    smallest_diff_index = 0\n    largest_diff = 0\n    largest_diff_index = 0\n\n    for index in range(len(numbers) - 1):\n        first = numbers[index]\n        second = numbers[index + 1]\n\n        diff = abs(first - second)\n        if diff < smallest_diff:\n            smallest_diff = diff\n            smallest_diff_index = index\n        if diff > largest_diff:\n            largest_diff = diff\n            largest_diff_index = index\n\n    return numbers[smallest_diff_index], numbers[largest_diff_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) == 2:\n        return numbers\n\n    smallest_index = 0\n    largest_index = len(numbers) - 1\n    smallest_value = numbers[0]\n    largest_value = numbers[largest_index]\n\n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest_value:\n            smallest_value = numbers[i]\n            smallest_index = i\n        elif numbers[i] > largest_value:\n            largest_value = numbers[i]\n            largest_index = i\n\n    return smallest_value, largest_value", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Numbers list must contain at least two numbers.\")\n\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    smallest = numbers[0]\n    largest = numbers[0]\n\n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n        elif numbers[i] > largest:\n            largest = numbers[i]\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function\n    return 0, 0", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('list must contain at least 2 elements, found {}'.format(len(numbers)))\n\n    numbers.sort()\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # create two lists to hold the first and second closest elements\n    closest1 = None\n    closest2 = None\n    min_distance = float('inf')\n    for i in range(len(numbers)):\n        # get the distance between the first and second elements\n        distance = abs(numbers[i] - numbers[i - 1])\n        if closest1 is None:\n            closest1 = numbers[i]\n            closest2 = numbers[i - 1]\n            min_distance = distance\n        elif distance < min_distance:\n            closest1 = numbers[i]\n            closest2 = numbers[i - 1]\n            min_distance = distance\n    return closest1, closest2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n\n    closest_pair = None\n    closest_dist = None\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if closest_dist is None or dist < closest_dist:\n                closest_dist = dist\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must contain at least two elements\")\n\n    index_1 = 0\n    index_2 = 1\n\n    while index_1 + 1 < len(numbers) and index_2 + 1 < len(numbers):\n        if numbers[index_1] < numbers[index_2]:\n            index_2 += 1\n        elif numbers[index_2] < numbers[index_1]:\n            index_1 += 1\n        else:\n            break\n\n    return numbers[index_1], numbers[index_2]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(f'Not enough numbers provided (len={len(numbers)})')\n    min_distance = float('inf')\n    result = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                result = [i, j]\n    if min_distance == float('inf'):\n        raise ValueError(f'Could not find two numbers closer than {min_distance}')\n    return result", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least 2 elements')\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n    # sort the list\n    numbers.sort()\n    # find the closest pair\n    closest_pair = (numbers[0], numbers[-1])\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Sort the numbers (largest to smallest)\n    numbers.sort()\n\n    # Loop through all the numbers\n    distance = 10000000000.0\n    smallest = numbers[0]\n    largest = numbers[0]\n\n    for element in numbers:\n        distance = abs(element - smallest)\n\n        if distance < 1:\n            smallest = element\n\n        distance = abs(element - largest)\n\n        if distance < 1:\n            largest = element\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    current_lowest = None\n    current_highest = None\n\n    for x in numbers:\n        if current_lowest is None or current_lowest > x:\n            current_lowest = x\n        if current_highest is None or current_highest < x:\n            current_highest = x\n\n    return current_lowest, current_highest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Find the number with the highest value\n    highest = numbers[-1]\n\n    # Remove it from the list\n    numbers = numbers[:-1]\n\n    # Find the number with the lowest value\n    lowest = numbers[0]\n\n    # Remove it from the list\n    numbers = numbers[1:]\n\n    # Remove the lowest number and the highest number from the list\n    numbers = numbers[2:]\n\n    # Find the closest pair\n    min_distance = abs(lowest - highest)\n    closest_pair = (lowest, highest)\n\n    # Find the second closest pair\n    for i in range(len(numbers)):\n        number = numbers[i]\n        if abs(lowest - number) < min_distance:\n            min_distance = abs(lowest - number)\n            closest_pair = (lowest, number)\n\n        elif abs(highest - number) < min_distance:\n            min_distance = abs(highest - number)\n            closest_pair = (highest, number)\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = [None, None]\n    for i in range(1, len(numbers)):\n        smaller = None\n        larger = None\n        for j in range(i):\n            if numbers[j] < numbers[i]:\n                if smaller is None:\n                    smaller = numbers[j]\n                    larger = numbers[i]\n                elif smaller > numbers[j]:\n                    smaller = numbers[j]\n                    larger = numbers[i]\n            elif numbers[j] > numbers[i]:\n                if smaller is None:\n                    smaller = numbers[j]\n                    larger = numbers[i]\n                elif smaller < numbers[j]:\n                    smaller = numbers[j]\n                    larger = numbers[i]\n        if closest_pair[0] is None:\n            closest_pair[0] = smaller\n            closest_pair[1] = larger\n        elif closest_pair[1] is None:\n            closest_pair[0] = smaller\n            closest_pair[1] = larger\n        elif smaller is not None:\n            if smaller < closest_pair[0]:\n                closest_pair[0] = smaller\n            if larger > closest_pair[1]:\n                closest_pair[1] = larger\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n    if len(numbers) == 2:\n        return numbers[0], numbers[-1]\n    numbers.sort()\n    prev = numbers[0]\n    closest = numbers[1]\n    for num in numbers[2:]:\n        if abs(num - prev) < abs(closest - prev):\n            closest = num\n        prev = num\n    return closest, numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # check we have at least two items in the list\n    if len(numbers) < 2:\n        raise ValueError('We need at least two numbers to do this')\n\n    # find the difference between the two closest numbers\n    minimum_distance = 1000\n    closest_distance = 0\n    smallest_distance = 1000\n    smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers[1:]:\n        distance = abs(largest_number - number)\n        if distance < closest_distance:\n            closest_distance = distance\n            smallest_distance = numbers[0] - number\n        if distance < minimum_distance:\n            minimum_distance = distance\n            smallest_number = number\n            largest_number = numbers[0] - number\n\n    return smallest_number, largest_number", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('numbers must have length at least 2')\n\n    min_distance = abs(numbers[0] - numbers[1])\n\n    for i in range(1, len(numbers)):\n        distance = abs(numbers[0] - numbers[i])\n        if distance < min_distance:\n            min_distance = distance\n            min_index = i\n\n    return numbers[min_index], numbers[min_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Find the minimum and maximum element in the list\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    # Loop over all the elements in the list and find the two closest to each other\n    for i in range(len(numbers)):\n        if numbers[i] == min_value:\n            return min_value, max_value\n        elif numbers[i] == max_value:\n            return min_value, max_value\n        else:\n            closest_value = min(numbers, key=lambda x: abs(x - numbers[i]))\n            if abs(closest_value - min_value) < abs(closest_value - max_value):\n                min_value = closest_value\n            else:\n                max_value = closest_value\n\n    return min_value, max_value", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Can't be empty list\n    assert numbers is not None and numbers.__len__() > 0\n\n    # Search for the closest pair\n    closest_pair: Tuple[float, float] = (numbers[0], numbers[-1])\n    smallest_distance = abs(numbers[0] - numbers[-1])\n\n    # Search the rest of the list\n    for i in range(1, numbers.__len__() - 1):\n        current_distance = abs(numbers[i] - numbers[i - 1])\n        if current_distance < smallest_distance:\n            closest_pair = (numbers[i - 1], numbers[i])\n            smallest_distance = current_distance\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = sorted(numbers)\n\n    if len(numbers) == 2:\n        return numbers\n\n    for i in range(len(numbers) - 1):\n        left = numbers[i]\n        right = numbers[i + 1]\n\n        if left - right <= 0.1:\n            return left, right\n\n        if right - left <= 0.1:\n            return right, left", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"list too short\")\n    smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers[1:]:\n        if number < smallest:\n            smallest = number\n        elif number > largest:\n            largest = number\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) <= 1:\n        raise ValueError(\"List must have length at least two\")\n    min_value = numbers[0]\n    max_value = numbers[-1]\n    closest_pair = (min_value, max_value)\n    for number in numbers[1:]:\n        if number <= min_value and number > max_value:\n            min_value = number\n            closest_pair = (min_value, max_value)\n        elif number >= min_value and number < max_value:\n            max_value = number\n            closest_pair = (min_value, max_value)\n        elif number == min_value:\n            min_value = number\n        elif number == max_value:\n            max_value = number\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers for this function to work.\")\n    smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers[1:]:\n        if number < smallest:\n            smallest = number\n        elif number > largest:\n            largest = number\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # search for the closest pair in the list\n    if len(numbers) < 2:\n        raise ValueError('List should have at least two elements')\n\n    # initialize the smallest and largest numbers as the first two values\n    smallest, largest = numbers[0], numbers[0]\n\n    for num in numbers[1:]:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def min_distance(a, b):\n        return abs(a - b)\n\n    distances = []\n\n    for i, a in enumerate(numbers):\n        distances.append(min_distance(a, numbers[i + 1]))\n\n    min_distance_index = distances.index(min(distances))\n    return numbers[min_distance_index], numbers[min_distance_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    assert len(numbers) >= 2\n    min_distance = None\n    best_pair = None\n\n    for number_1 in numbers:\n        for number_2 in numbers:\n            distance = abs(number_1 - number_2)\n            if min_distance is None or distance < min_distance:\n                min_distance = distance\n                best_pair = (number_1, number_2)\n\n    return best_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    smallest_diff = None\n    smallest_diff_index = None\n    for index in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[index] - sorted_numbers[index + 1]\n        if smallest_diff is None or diff < smallest_diff:\n            smallest_diff = diff\n            smallest_diff_index = index\n    return (sorted_numbers[smallest_diff_index], sorted_numbers[smallest_diff_index + 1])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_index = numbers.index(min(numbers))\n    max_index = numbers.index(max(numbers))\n\n    if min_index > max_index:\n        min_index, max_index = max_index, min_index\n\n    return numbers[min_index], numbers[max_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Insufficient number of numbers\")\n\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Get the minimum and maximum values from the list\n    min_ = min(numbers)\n    max_ = max(numbers)\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Get the first two elements of the sorted list\n    a = numbers[0]\n    b = numbers[1]\n\n    # The distance between a and b is the absolute value of the difference between them\n    distance = abs(a - b)\n\n    # The closest pair is the pair of numbers with the smallest distance\n    return min_, max_, distance", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    nums = sorted(numbers)\n    pos = 0\n    distance = (nums[0] - nums[pos])**2\n    while pos < len(nums) - 1:\n        pos += 1\n        distance += (nums[pos] - nums[pos - 1])**2\n    if distance < (nums[pos] - nums[pos - 1])**2:\n        distance = (nums[pos] - nums[pos - 1])**2\n    return nums[pos - 1], nums[pos]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    elif len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    min_ = min(numbers)\n    max_ = max(numbers)\n    n_diff = max_ - min_\n    return min_, numbers[numbers.index(min_) + 1] if n_diff > 0.0 else numbers[numbers.index(min_) - 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Sort by descending order (largest to smallest) as numbers with the same value will have the same distance\n    numbers.sort(reverse=True)\n\n    # Do a binary search to find the pair with the closest distance\n    # The element that is returned will be the one that was originally closest to the middle of the sorted list\n    distance = float('inf')\n    element1 = None\n    element2 = None\n    for index, number in enumerate(numbers):\n        if index == 0:\n            element1 = number\n            distance = numbers[index - 1] - number\n        elif index == len(numbers) - 1:\n            element2 = number\n            distance = number - numbers[index - 1]\n        elif index == 1:\n            element1 = number\n            distance = numbers[index - 1] - number\n        elif index == len(numbers) - 2:\n            element2 = number\n            distance = number - numbers[index - 1]\n        elif index > 1 and index < len(numbers) - 2:\n            midpoint = numbers[index - 1] + (numbers[index - 1] - numbers[index - 2]) / 2\n            if numbers[index - 1] - number <= midpoint - number:\n                element1 = number\n                distance = numbers[index - 1] - number\n            elif midpoint - number <= number - number:\n                element", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n\n    min_distance = None\n    min_distance_index = None\n\n    for index in range(0, len(numbers) - 1):\n        this_distance = numbers[index] - numbers[index + 1]\n        if min_distance is None or this_distance < min_distance:\n            min_distance = this_distance\n            min_distance_index = index\n\n    return numbers[min_distance_index], numbers[min_distance_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    nums = sorted(numbers)\n    return (nums[0], nums[-1])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) == 1:\n        raise ValueError('Invalid length for list, must have at least two elements.')\n\n    if len(numbers) > 2:\n        # select minimum and maximum from list and return the two numbers that are closest together\n        return numbers[\n            0], numbers[-1]  # start at 0 and stop when we reach the last element\n        # return max(numbers), min(numbers)\n    else:\n        # list of length 1 - return the single element\n        return numbers[0], numbers[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_smaller: float = None\n    closest_larger: float = None\n    i: int = 0\n    for element in numbers:\n        if closest_smaller is None or element < closest_smaller:\n            closest_smaller = element\n        if closest_larger is None or element > closest_larger:\n            closest_larger = element\n        i += 1\n    if closest_smaller is None or closest_larger is None:\n        raise ValueError(f'No element found in list of length {len(numbers)}')\n    return closest_smaller, closest_larger", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    closest_pair = []\n    closest_pair_indexes = []\n    closest_pair_elements: List[float] = []\n    element_index: int = 0\n    for element in numbers:\n        if element not in closest_pair_elements:\n            closest_pair_elements.append(element)\n            closest_pair_indexes.append(element_index)\n            closest_pair_elements[-1] = element\n            closest_pair_indexes[-1:] = [element_index]\n\n        elif abs(element - closest_pair_elements[-1]) < abs(element - closest_pair_elements[-2]):\n            closest_pair_elements.append(element)\n            closest_pair_indexes.append(element_index)\n            closest_pair_elements[-1] = element\n            closest_pair_indexes[-1:] = [element_index]\n\n        else:\n            closest_pair_elements.append(element)\n            closest_pair_indexes.append(element_index)\n            closest_pair_elements[-1] = element\n            closest_pair_indexes[-1:] = [element_index]\n        element_index += 1\n\n    smaller = closest_pair_elements[0]\n    larger = closest_pair_elements[1]\n    return smaller, larger\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return min(n for _, n in zip(sorted(enumerate(numbers)), sorted(enumerate(numbers))[1:]))", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # find the closest two numbers and return them in order\n    # first loop finds the smallest index\n    smallest_index: int = 0\n    smallest_distance = numbers[0]\n    for index in range(1, len(numbers)):\n        distance = abs(numbers[index] - numbers[smallest_index])\n        if distance < smallest_distance:\n            smallest_distance = distance\n            smallest_index = index\n\n    # second loop finds the second smallest index\n    second_smallest_index: int = 0\n    second_smallest_distance = numbers[0]\n    for index in range(1, len(numbers)):\n        distance = abs(numbers[index] - numbers[second_smallest_index])\n        if distance < second_smallest_distance:\n            second_smallest_distance = distance\n            second_smallest_index = index\n\n    return numbers[smallest_index], numbers[second_smallest_index]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    min_distance = 999999.0\n    closest = None\n    for number in numbers:\n        distance = abs(number - numbers[0])\n        if distance < min_distance:\n            min_distance = distance\n            closest = number\n\n    return closest, numbers[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = sorted(numbers)\n    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n    left = 0.0\n    right = 0.0\n    for i, num in enumerate(numbers):\n        if i == 0:\n            left = right = num\n        else:\n            diff = num - numbers[i - 1]\n            if left == right or diff < (left - right):\n                left = num\n            elif diff > (left - right):\n                right = num\n    return left, right", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return float(\"nan\"), float(\"nan\")\n\n    low_index = numbers[0]\n    low_value = low_index\n    high_index = numbers[0]\n    high_value = high_index\n\n    for index, value in enumerate(numbers[1:]):\n        if value < low_value:\n            low_value = value\n            low_index = index + 1\n\n        elif value > high_value:\n            high_value = value\n            high_index = index + 1\n\n    return low_value, high_value", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # number of elements in the list\n    length = len(numbers)\n    if length < 2:\n        raise ValueError('Supplied list has length {} and is too small'.format(length))\n    if length == 2:\n        return numbers[0], numbers[1]\n\n    # create a list of indices that point to the two closest elements in the original list\n    # (indices for the first and last elements are also included)\n    indices = []\n    for i in range(length - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < max(numbers):\n            indices.append(i)\n\n    # sort the indices in ascending order\n    indices.sort()\n    # take the two elements at the indices and return them\n    return numbers[indices[0]], numbers[indices[1]]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = [None, None]\n    best_diff = float('inf')\n\n    for i, num in enumerate(numbers):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(num - numbers[j])\n            if diff < best_diff:\n                closest = [i, j]\n                best_diff = diff\n\n    if closest[0] is None:\n        return closest[1], closest[1]\n    if closest[1] is None:\n        return closest[0], closest[0]\n\n    return closest[0], closest[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    # If there is only one number in the list, return a tuple with that number.\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    distance_between_numbers = None\n    # Work out the distance between the first and second numbers, and the second and third numbers.\n    for i in range(len(numbers)):\n        if distance_between_numbers is None:\n            distance_between_numbers = abs(numbers[i] - numbers[i + 1])\n        else:\n            distance_between_numbers = min(distance_between_numbers, abs(numbers[i] - numbers[i + 1]))\n\n    if distance_between_numbers == None or distance_between_numbers == 0:\n        return numbers[0], numbers[-1]\n    else:\n        return numbers[0], numbers[len(numbers) - 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Validate that the supplied list has at least two elements\n    if len(numbers) < 2:\n        return 0, 0\n\n    # The first element of the list will always be the smallest\n    smallest = numbers[0]\n    # The last element of the list will always be the largest\n    largest = numbers[-1]\n\n    # Remove the first element of the list so that it can be used to compare with the remaining elements\n    numbers.pop(0)\n\n    # Loop over the remaining elements\n    for n in numbers:\n        # See if the next element is closer to the smallest or to the largest\n        if abs(n - smallest) < abs(n - largest):\n            smallest = n\n        else:\n            largest = n\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('Input list must be at least of length 2')\n\n    numbers_copy = numbers[:]\n    index = 0\n\n    while numbers_copy[index] == numbers_copy[index + 1]:\n        index += 1\n    index = index - 1\n\n    if numbers_copy[index] > numbers_copy[index + 1]:\n        index -= 1\n    if numbers_copy[index] == numbers_copy[index - 1]:\n        return find_closest_elements(numbers[:index]) + find_closest_elements(numbers[index:])\n    return numbers[index], numbers[index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) < 2:\n        raise ValueError(\"At least two numbers are required\")\n\n    # Find the difference between the largest and the smallest number\n    min_difference = max(numbers) - min(numbers)\n    # Find the closest number to the smallest number\n    min_index = 0\n    for i, n in enumerate(numbers):\n        if n - min_difference < min(numbers):\n            min_index = i\n            min_difference = n - min(numbers)\n\n    # Find the closest number to the largest number\n    max_index = len(numbers) - 1\n    for i, n in enumerate(reversed(numbers)):\n        if n + min_difference > max(numbers):\n            max_index = i - 1\n            min_difference = max(numbers) - n\n\n    return numbers[min_index], numbers[max_index]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List needs to be at least length 2.\")\n\n    # Initialize the distance accumulators to the list length\n    smallest = numbers[0]\n    smallest_dist = numbers.length()\n\n    largest = numbers[0]\n    largest_dist = numbers.length()\n\n    # For all numbers in the list\n    for index, num in enumerate(numbers):\n        # Compare the distance between the current number and the current smallest number\n        # to the distance between the current number and the current largest number\n        dist_small = abs(num - smallest)\n        dist_large = abs(num - largest)\n\n        # Update the current smallest number and distance if appropriate\n        if dist_small < smallest_dist:\n            smallest = num\n            smallest_dist = dist_small\n\n        # Update the current largest number and distance if appropriate\n        if dist_large < largest_dist:\n            largest = num\n            largest_dist = dist_large\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n\n    numbers.sort()\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # code\n    return 0.0, 0.0", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    smallest = numbers[0]\n    largest = numbers[0]\n\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n        elif number > largest:\n            largest = number\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers_sorted = sorted(numbers)\n    if len(numbers_sorted) < 2:\n        raise Exception(\"Input list too short.\")\n    if len(numbers_sorted) == 2:\n        return numbers_sorted[0], numbers_sorted[1]\n    return numbers_sorted[0], numbers_sorted[1] + (numbers_sorted[1] - numbers_sorted[0]) * (numbers_sorted[2] /\n                                                                                                     (numbers_sorted[1] -\n                                                                                                         numbers_sorted[0]))", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    candidates: List[Tuple[float, float]] = [\n        (x, y) for x, y in zip(numbers, numbers[1:]) if x < y\n    ]\n\n    if not candidates:\n        return numbers[0], numbers[-1]\n\n    distances: List[float] = []\n    for x, y in candidates:\n        distances.append(abs(x - y))\n\n    index = min(enumerate(distances), key=lambda i: i[1])[0]\n\n    return numbers[index], numbers[index + 1]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return None, None\n\n    min_distance = float(\"inf\")\n    closest_pair = None\n\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] < numbers[i]:\n            # swap the two values\n            temp = numbers[i + 1]\n            numbers[i + 1] = numbers[i]\n            numbers[i] = temp\n\n        distance = abs(numbers[i] - numbers[i + 1])\n        if distance < min_distance:\n            min_distance = distance\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair[0], closest_pair[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least 2 numbers to find the closest elements to\")\n\n    # Find the two closest numbers\n    closest_pair = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) <= 1:\n        raise Exception('The list must have at least two elements.')\n\n    min_f = min(numbers)\n    max_f = max(numbers)\n    d = float('inf')\n\n    # Find the difference between the closest elements.\n    for i in range(len(numbers) - 1):\n        if numbers[i] < min_f + d:\n            d = numbers[i] - min_f\n            min_f = numbers[i]\n            if min_f == max_f:\n                break\n            elif min_f == max_f + d:\n                break\n        elif numbers[i] > max_f - d:\n            d = numbers[i] - max_f\n            max_f = numbers[i]\n            if min_f == max_f:\n                break\n            elif min_f == max_f - d:\n                break\n\n    return min_f, max_f", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = sorted(numbers)\n\n    if len(numbers) < 2:\n        raise ValueError('Please enter at least two numbers')\n\n    if numbers[0] == numbers[-1]:\n        return numbers\n\n    if numbers[-1] == numbers[-2]:\n        return numbers\n\n    if numbers[0] == numbers[1]:\n        return numbers\n\n    closest_pair = (numbers[0], numbers[-1])\n\n    for i in range(2, len(numbers) - 1):\n        if numbers[i] == numbers[i - 1] or numbers[i] == numbers[i + 1]:\n            continue\n        else:\n            if abs(closest_pair[0] - numbers[i]) < abs(closest_pair[0] - numbers[i - 1]) or abs(closest_pair[0] - numbers[i]) < abs(closest_pair[0] - numbers[i + 1]):\n                closest_pair = (numbers[i], numbers[i - 1])\n            else:\n                closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # find closest pair\n    min_distance = float(\"inf\")\n    for index in range(len(numbers) - 1):\n        # distance between numbers\n        distance = abs(numbers[index] - numbers[index + 1])\n        if distance < min_distance:\n            # smaller number\n            smaller_number = numbers[index]\n            # larger number\n            larger_number = numbers[index + 1]\n            min_distance = distance\n\n    return smaller_number, larger_number", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n\n    close_count = 0\n\n    # Find the closest elements\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] < 1e-10:\n                return numbers[i], numbers[j]\n            elif numbers[j] - numbers[i] < 1e-10:\n                return numbers[j], numbers[i]\n\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) < 2:\n        return 0.0, 0.0\n    elif len(numbers) == 2:\n        return numbers[0], numbers[1]\n    else:\n        min_diff = numbers[1] - numbers[0]\n        min_element = numbers[0]\n        for i in range(len(numbers) - 1):\n            next_min_diff = numbers[i + 1] - numbers[i]\n            if next_min_diff < min_diff:\n                min_diff = next_min_diff\n                min_element = numbers[i]\n        return min_element, numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Find the first number greater than the mean and the first number less than the mean\n    diff = numbers[-1] - numbers[0]\n    first_larger = numbers.index(numbers[0] + diff)\n    first_smaller = numbers.index(numbers[0] - diff)\n\n    if first_larger - first_smaller == 1:\n        return numbers[first_smaller], numbers[first_larger]\n    elif first_larger - first_smaller == 0:\n        # All the numbers in the list are the same\n        return numbers[0], numbers[0]\n    else:\n        return numbers[first_smaller], numbers[first_larger]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    assert len(numbers) >= 2\n    min_value = numbers[0]\n    max_value = numbers[0]\n\n    for x in numbers[1:]:\n        if x > max_value:\n            max_value = x\n        if x < min_value:\n            min_value = x\n\n    return min_value, max_value", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Check if the list has a single number\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n\n    # Sort the list and check that the numbers are unique\n    sorted_numbers = sorted(numbers)\n    if sorted_numbers[0] == sorted_numbers[1]:\n        return sorted_numbers[0], sorted_numbers[0]\n\n    # Find the closest pair\n    closest_pair = None\n    for i in range(1, len(sorted_numbers) - 1):\n        if sorted_numbers[i] - sorted_numbers[i - 1] < sorted_numbers[i + 1] - sorted_numbers[i]:\n            closest_pair = sorted_numbers[i - 1], sorted_numbers[i]\n            break\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_distance = 1000.0\n    for i in range(1, len(numbers)):\n        d = numbers[i] - numbers[i-1]\n        if d < min_distance:\n            min_distance = d\n            closest_elements = numbers[i], numbers[i-1]\n    return closest_elements", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # The list must contain at least 2 elements\n    if len(numbers) < 2:\n        raise ValueError(\"List too short.\")\n\n    # Find the first and last element in the list\n    first = numbers[0]\n    last = numbers[-1]\n\n    # Find the minimum difference between two elements\n    min_diff = abs(first - last)\n\n    # The first element that is smaller than last element\n    sec_elem = None\n\n    # Iterate over all elements in the list\n    for elem in numbers[1:-1]:\n        # If the element is smaller than last element, use it as the second element\n        if abs(elem - last) < min_diff:\n            sec_elem = elem\n\n        # If the element is smaller than first element, use it as the first element\n        elif abs(elem - first) < min_diff:\n            first = elem\n\n    # The last element that is smaller than last element\n    third_elem = None\n\n    # Iterate over all elements in the list\n    for elem in reversed(numbers[1:-1]):\n        # If the element is smaller than last element, use it as the second element\n        if abs(elem - last) < min_diff:\n            third_elem = elem\n\n        # If the element is smaller than first element, use it", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return min(enumerate(numbers), key=lambda x: abs(x[1] - x[0])), max(enumerate(numbers), key=lambda x: abs(x[1] - x[0]))", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = sorted(numbers)\n\n    # find the two elements closest to each other\n    index_a = 0\n    index_b = 0\n    for i, element in enumerate(numbers):\n        if index_a == 0:\n            index_a = i\n        else:\n            # if we have already found two closest elements, the new element is simply the one that is closest to the\n            # already found element\n            if abs(element - numbers[index_a - 1]) < abs(element - numbers[index_b - 1]):\n                index_b = i\n            else:\n                index_a = i\n\n    return numbers[index_a], numbers[index_b]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not len(numbers) >= 2:\n        raise ValueError('Numbers must be at least 2 in length')\n    if len(numbers) == 2:\n        return numbers\n    closest = [None, None]\n    for i in range(1, len(numbers)):\n        if numbers[i] == numbers[i - 1]:\n            continue\n        elif numbers[i] > numbers[i - 1]:\n            closest[1] = i - 1\n            closest[0] = i\n        elif numbers[i] < numbers[i - 1]:\n            closest[0] = i - 1\n            closest[1] = i\n    return closest[0], closest[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    num1 = numbers[0]\n    if len(numbers) > 1:\n        # Finds the closest number to num1 in the rest of the numbers and returns it\n        closest = (min(numbers[1:], key=lambda x: abs(x - num1)), max(numbers[1:], key=lambda x: abs(x - num1)))\n        num2 = closest[0]\n    else:\n        # If the list of numbers was of length one, then just return the first number\n        num2 = numbers[0]\n\n    return num1, num2\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    best_so_far = (float('inf'), float('inf'))\n    for number in numbers:\n        delta = abs(number - best_so_far[0])\n        if delta < best_so_far[1]:\n            best_so_far = (number, delta)\n    return best_so_far", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_numbers = (numbers[0], numbers[-1])\n    distance_from_closest_numbers = (numbers[1] - numbers[0], numbers[numbers.index(closest_numbers[-1])] - numbers[-1:][0])\n    if distance_from_closest_numbers[0] <= distance_from_closest_numbers[1]:\n        return closest_numbers\n    else:\n        return closest_numbers[::-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return min(numbers, key=lambda x: abs(x - numbers.index(max(numbers)))), max(numbers, key=lambda x: abs(x - numbers.index(min(numbers))))", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_gap = 100\n    closest_elements = (0, 0)\n    closest_difference = float('inf')\n    for i, x in enumerate(numbers):\n        difference = x - numbers[i - 1]\n        if difference < min_gap:\n            min_gap = difference\n            closest_elements = (numbers[i - 1], x)\n            closest_difference = difference\n\n    return closest_elements, closest_difference", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers to select from.\")\n\n    minimum = numbers[0]\n    maximum = numbers[0]\n    for number in numbers[1:]:\n        if number < minimum:\n            minimum = number\n        if number > maximum:\n            maximum = number\n\n    return minimum, maximum", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def diff(a, b):\n        return abs(a - b)\n\n    if len(numbers) < 2:\n        raise ValueError('Input list must be at least 2 long.')\n\n    if len(numbers) == 2:\n        return numbers\n\n    min_diff = diff(numbers[0], numbers[1])\n    i = 2\n    for n in numbers:\n        while i < len(numbers):\n            new_diff = diff(numbers[i], n)\n            if new_diff < min_diff:\n                min_diff = new_diff\n                min_i = i\n\n            i += 1\n\n    return numbers[min_i], numbers[min_i - 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    minimum = numbers[0]\n    maximum = numbers[0]\n    for number in numbers[1:]:\n        if number < minimum:\n            minimum = number\n        if number > maximum:\n            maximum = number\n    return (minimum, maximum)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_distance = float('inf')\n    min_distance_pair = (None, None)\n    for i in range(1, len(numbers) - 1):\n        distance = abs(numbers[i] - numbers[i - 1])\n        if distance < min_distance:\n            min_distance = distance\n            min_distance_pair = (numbers[i - 1], numbers[i])\n    return min_distance_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) < 2:\n        raise ValueError('list of numbers must have at least two elements')\n\n    # creates a mapping of the numbers to their indexes in the list\n    idx_map = {i: i for i in range(len(numbers))}\n\n    # finds the closest pair by first finding the closest pair in each pair of numbers and then finding the smallest\n    # distance between the two closest pairs\n    # dists = [(num1, num2) for num1 in numbers for num2 in numbers if idx_map[num1]!= idx_map[num2]]\n    # closest_pair = min(dists, key=lambda x: x[1] - x[0])\n    # return closest_pair[0], closest_pair[1]\n\n    smallest_distance = float('inf')\n    index_smallest = None\n    index_closest = None\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            dist = numbers[i] - numbers[j]\n            if dist < smallest_distance:\n                smallest_distance = dist\n                index_smallest = i\n                index_closest = j\n\n    if smallest_distance == float('inf'):\n        raise ValueError('list of", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least length two.\")\n\n    # Find the minimum and maximum numbers in the list\n    minimum = numbers[0]\n    maximum = numbers[0]\n    for num in numbers:\n        if num < minimum:\n            minimum = num\n        if num > maximum:\n            maximum = num\n\n    # Find the two numbers with the smallest difference\n    best_difference = maximum - minimum\n    smallest_difference = maximum - minimum\n    closest_num = 0\n    closest_distance = abs(maximum - minimum)\n    closest_other_num = 0\n    closest_other_distance = abs(maximum - minimum)\n\n    for i in range(0, len(numbers) - 1):\n        if smallest_difference > abs(numbers[i] - numbers[i + 1]):\n            smallest_difference = abs(numbers[i] - numbers[i + 1])\n            closest_num = i\n            closest_other_num = i + 1\n            closest_distance = abs(numbers[i] - numbers[i + 1])\n            closest_other_distance = abs(numbers[i] - numbers[i + 1])\n\n    return numbers[closest_num], numbers[closest_other_num]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not numbers:\n        return (float('inf'), float('-inf'))\n\n    l = len(numbers)\n    if l == 1:\n        return (numbers[0], numbers[0])\n\n    min_list = []\n    max_list = []\n    for i in range(l):\n        min_list.append(numbers[i])\n        max_list.append(numbers[i])\n    min_list.sort()\n    max_list.sort()\n\n    return (min_list[0], max_list[0])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # assert len(numbers) >= 2, \"Error: list is too small.\"\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    min_list = []\n    min_list.append(min(numbers))\n    min_list.append(max(numbers))\n\n    # we use the closest pair from the last iteration as our starting point\n    # for the next iteration.\n    closest_pair = min_list[-1]\n    current = closest_pair\n\n    for i, number in enumerate(numbers):\n        if number == current:\n            continue\n        # find the index of the next closest element\n        index_of_min = numbers.index(current)\n        index_of_next = numbers.index(number)\n\n        if index_of_min < index_of_next:\n            closest_pair = [current, number]\n            current = number\n        else:\n            closest_pair = [number, current]\n            current = number\n\n    return closest_pair[0], closest_pair[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must be of length 2 or greater')\n\n    num_small = numbers[0]\n    num_large = numbers[-1]\n    low_end = 0\n    high_end = len(numbers) - 1\n    for i in range(0, len(numbers) - 1):\n        if numbers[i] < num_small:\n            num_small = numbers[i]\n            low_end = i + 1\n        if numbers[i] > num_large:\n            num_large = numbers[i]\n            high_end = i\n\n    if low_end == high_end:\n        raise ValueError('List must contain two numbers that are not equal')\n    return (num_small, num_large)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Sort the list so that the numbers are in ascending order\n    numbers.sort()\n\n    # Now we need to find the two elements which are closest to each other.\n    # We can keep track of the index of the smaller element and the index of the larger element to make this\n    # calculation easier.\n    # Keep track of the index of the smaller element.\n    min_index = 0\n\n    # Keep track of the index of the larger element.\n    max_index = 0\n\n    # When the indices cross, we know that the elements are no longer closest to each other so update the closest\n    # indices accordingly.\n    while min_index < len(numbers) - 1:\n        if numbers[min_index] == numbers[min_index + 1]:\n            min_index += 1\n            continue\n        elif numbers[min_index] > numbers[min_index + 1]:\n            min_index += 1\n            continue\n        else:\n            break\n\n    # If there are no elements in the list, then the closest elements are the same number.\n    if min_index >= len(numbers):\n        return numbers[0], numbers[0]\n\n    # Keep track of the number of elements we've looked at.\n    count = 1\n\n    while max_index < len(numbers) - 1:\n        if numbers[max_index] == numbers[max_index + 1]:", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def score(items):\n        return (items[0] - items[1]) ** 2\n\n    scores = [score(items) for items in zip(numbers[:-1], numbers[1:])]\n    return min(scores, key=scores.get), max(scores, key=scores.get)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not numbers:\n        return 0.0, 0.0\n\n    # Sort list, return 0, 0 if only one element in list\n    numbers = sorted(numbers)\n    if len(numbers) == 1:\n        return 0.0, 0.0\n\n    # Define two vars to hold the min and max values\n    min_val, max_val = numbers[0], numbers[-1]\n\n    # Find the first and last numbers in the list\n    first = numbers[0]\n    last = numbers[-1]\n\n    # While iterating through list, if the min or max values are in the list\n    while first <= last:\n        if min_val == first:\n            min_val = last\n            last = numbers[-1]\n        elif max_val == last:\n            max_val = first\n            first = numbers[0]\n\n    return min_val, max_val", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Create a sorted list of all of the numbers.\n    sorted_list = sorted(numbers)\n\n    # Find the index of the smallest number in the sorted list.\n    smallest_index = sorted_list.index(min(sorted_list))\n\n    # Find the index of the largest number in the sorted list.\n    largest_index = sorted_list.index(max(sorted_list))\n\n    # Find the difference between the index of the smallest number and the index of the largest number.\n    difference = largest_index - smallest_index\n\n    # If the difference is greater than 1, we need to find the index of the second smallest number.\n    if difference > 1:\n        second_smallest_index = sorted_list.index(min(sorted_list[:smallest_index + 1]))\n\n        # Find the index of the second largest number in the sorted list.\n        second_largest_index = sorted_list.index(max(sorted_list[:second_smallest_index + 1]))\n\n        # Calculate the difference between the index of the second smallest number and the index of the second largest number.\n        second_difference = second_largest_index - second_smallest_index\n\n        # If the difference is greater than 1, we need to find the index of the third smallest number.\n        if second_dif", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long.\")\n    numbers = sorted(numbers)\n\n    # Find the closest element to the smallest number in the list.\n    a = min(numbers)\n    min_diff = abs(numbers[0] - a)\n    min_ind = 0\n\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - a)\n        if diff < min_diff:\n            min_ind = i\n            min_diff = diff\n\n    # Find the closest element to the largest number in the list.\n    b = max(numbers)\n    min_diff = abs(numbers[-1] - b)\n    min_ind = len(numbers) - 1\n\n    for i in reversed(range(0, len(numbers) - 1)):\n        diff = abs(numbers[i] - b)\n        if diff < min_diff:\n            min_ind = i\n            min_diff = diff\n\n    return numbers[min_ind], numbers[min_ind + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Check if the list of numbers has less than two elements.\n    if len(numbers) <= 1:\n        raise ValueError(\"At least two elements must be supplied.\")\n\n    # Check if the list of numbers has only one element.\n    elif len(numbers) == 1:\n        return (numbers[0], numbers[0])\n\n    # Sort the list of numbers\n    numbers = sorted(numbers)\n\n    # Find the two closest numbers\n    if numbers[0] > numbers[1]:\n        return (numbers[0], numbers[-1])\n    else:\n        return (numbers[-1], numbers[0])\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not numbers:\n        return numbers[0], numbers[0]\n    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n    numbers.sort()\n    i = numbers.index(min(numbers))\n    j = numbers.index(max(numbers))\n    return numbers[i], numbers[j]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Find the shortest distance between any two elements\n    dists = [(i, j) for i in numbers for j in numbers]\n    min_dist = min((i, j) for i in dists for j in dists)[1]\n    closest_pairs = [(i, j) for i in dists for j in dists if i[1] == min_dist]\n    closest_pairs = sorted(closest_pairs, key=lambda x: x[0])\n\n    # Take the first element from the first pair and the second element from the last pair\n    return closest_pairs[0][0], closest_pairs[-1][1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('Length of supplied list of numbers must be at least two')\n\n    _min = min(numbers)\n    _max = max(numbers)\n    _mid = None\n\n    if _min!= _max:\n        _mid = (_min + _max) / 2.0\n        if numbers[0] >= _mid:\n            return (_min, _mid)\n        else:\n            return (_mid, _max)\n    else:\n        if numbers[0] < _min:\n            return (_min, _min)\n        else:\n            return (_min, _min)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n    smallest = numbers[0]\n    largest = numbers[-1]\n    current_number = 0\n    current_closest = 0\n    current_distance = float('inf')\n    while current_number < len(numbers):\n        current_number += 1\n        distance_to_smallest = abs(numbers[current_number] - smallest)\n        distance_to_largest = abs(numbers[current_number] - largest)\n        if distance_to_smallest < current_distance:\n            current_closest = smallest\n            current_distance = distance_to_smallest\n        if distance_to_largest < current_distance:\n            current_closest = largest\n            current_distance = distance_to_largest\n    return current_closest, numbers[current_number - 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise Exception(\"Need at least 2 numbers\")\n\n    numbers.sort()\n\n    index = 0\n    while index < len(numbers) - 1 and numbers[index] == numbers[index + 1]:\n        index += 1\n\n    if numbers[index]!= numbers[index + 1]:\n        return numbers[index - 1], numbers[index]\n    else:\n        return numbers[index - 1], numbers[index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list too short: {}\".format(numbers))\n\n    # find the two closest numbers\n    smallest = 0\n    largest = len(numbers) - 1\n    for i in range(len(numbers) - 1):\n        if smallest == 0 or numbers[smallest] > numbers[i]:\n            smallest = i\n        if largest == len(numbers) - 1 or numbers[largest] < numbers[i]:\n            largest = i\n\n    return numbers[smallest], numbers[largest]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"numbers must be a list of length at least 2.\")\n\n    min_distance = float('inf')\n    min_number_index = 0\n    min_number = numbers[0]\n    max_number = numbers[0]\n    max_number_index = 0\n\n    for i in range(1, len(numbers)):\n        number = numbers[i]\n\n        distance = abs(number - min_number)\n        if distance < min_distance:\n            min_distance = distance\n            min_number = number\n            min_number_index = i\n\n        distance = abs(number - max_number)\n        if distance < min_distance:\n            min_distance = distance\n            max_number = number\n            max_number_index = i\n\n    return (min_number, max_number), (min_number_index, max_number_index)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    distance = lambda x, y: abs(x - y)\n\n    closest_pair = [-1, -1]\n    closest_pair_distance = float('inf')\n\n    # Run the loop for each pair of numbers, i.e. each distance value (n^2)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            d = distance(numbers[i], numbers[j])\n            if d < closest_pair_distance:\n                closest_pair_distance = d\n                closest_pair = [i, j]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    assert len(numbers) >= 2\n    sorted_numbers = sorted(numbers)\n    last_min = sorted_numbers[0]\n    last_max = sorted_numbers[-1]\n    while True:\n        if len(numbers) == 2:\n            return numbers[0], numbers[1]\n        min_val = min(sorted_numbers)\n        max_val = max(sorted_numbers)\n        if min_val == last_min:\n            break\n        last_min = min_val\n        last_max = max_val\n\n    return last_min, last_max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    nums = sorted(numbers)\n\n    # Handle the case of 1 element in the list.\n    if len(numbers) == 1:\n        return numbers[0], nums[0]\n\n    # Handle the case of 0 elements in the list.\n    if len(numbers) == 0:\n        return 0.0, 0.0\n\n    # Iterate through all the elements in the list.\n    for i in range(0, len(numbers)):\n        if i == 0:\n            if numbers[i] < numbers[i + 1]:\n                return numbers[i], numbers[i + 1]\n        elif i == (len(numbers) - 1):\n            if numbers[i] > numbers[i - 1]:\n                return numbers[i], numbers[i - 1]\n        else:\n            if numbers[i] < numbers[i + 1]:\n                return numbers[i], numbers[i + 1]\n            elif numbers[i] > numbers[i - 1]:\n                return numbers[i], numbers[i - 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    d = numbers[1:] - numbers[:-1]\n    return d.index(min(d)), d.index(max(d))", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # if the list is of length two, there is only one possible pair of closest elements to select\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    # find the minimum and maximum number from the list\n    minimum, maximum = min(numbers), max(numbers)\n\n    # if the minimum is equal to the maximum, return the exact pair\n    if minimum == maximum:\n        return minimum, minimum\n\n    # find the element with the minimum difference to the maximum number\n    min_difference_element = min(numbers, key=lambda x: abs(x - maximum))\n\n    # return the pair of minimum and minimum difference elements\n    return minimum, min_difference_element\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_value = numbers[0]\n    max_value = numbers[0]\n\n    for number in numbers[1:]:\n        if number < min_value:\n            min_value = number\n\n        if number > max_value:\n            max_value = number\n\n    return min_value, max_value", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    n = len(numbers)\n    if n < 2:\n        raise ValueError('List must have at least two numbers.')\n\n    # Find the two closest elements in the list\n    distances = [0.0] * (n + 1)\n    min_distance = n + 1\n    for i in range(0, n):\n        distances[i] = abs(numbers[i] - numbers[i + 1])\n\n    for i in range(0, n - 1):\n        distances[i] += distances[i + 1]\n\n    distances[n - 1] += distances[0]\n    for i in range(0, n - 1):\n        if distances[i] < min_distance:\n            min_distance = distances[i]\n            numbers_min = numbers[i]\n            numbers_max = numbers[i + 1]\n\n    return numbers_min, numbers_max\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Expected at least 2 numbers, got {}\".format(len(numbers)))\n\n    n = len(numbers)\n    numbers_sorted = sorted(numbers)\n\n    if numbers_sorted[0] < numbers_sorted[-1]:\n        return numbers_sorted[0], numbers_sorted[-1]\n    else:\n        return numbers_sorted[-1], numbers_sorted[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_dist = float(\"inf\")\n    min_idx = 0\n    min_dist_idx = 0\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if dist < min_dist:\n                min_idx = i\n                min_dist_idx = j\n                min_dist = dist\n    return (numbers[min_idx], numbers[min_dist_idx])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers!\")\n    numbers.sort()\n    return (numbers[0], numbers[-1])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise Exception('list must be at least length two')\n    min_diff = None\n    min_index = None\n    for index in range(1, len(numbers)):\n        diff = numbers[index] - numbers[index - 1]\n        if min_diff is None or diff < min_diff:\n            min_index = index\n            min_diff = diff\n    return numbers[min_index - 1], numbers[min_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('number list must contain at least 2 numbers')\n    min_diff = 1.0\n    min_pos = 0\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_pos = i\n            min_diff = diff\n    return numbers[min_pos], numbers[min_pos + 1]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Check if a single element list\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n\n    # Check if a 2 element list\n    elif len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    # Check if a list of length 3 or greater\n    else:\n        min = min(numbers)\n        max = max(numbers)\n        # check if the closest are the first two elements, and\n        # if so, return the smaller, larger\n        if abs(min - numbers[1]) < abs(min - numbers[2]):\n            return min, numbers[1]\n        else:\n            return min, numbers[2]\n\n    # should never be reached\n    return min, max\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    last = numbers.pop()\n    previous = last\n    for number in numbers:\n        if abs(number - previous) < abs(last - previous):\n            last = number\n            previous = last\n    return last, previous", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Find the range of values\n    min_val, max_val = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        min_val = min(min_val, numbers[i])\n        max_val = max(max_val, numbers[i])\n    if min_val == max_val:\n        # In case all elements are the same, return the midpoint\n        min_val = numbers[int((len(numbers) - 1) / 2)]\n        max_val = numbers[int((len(numbers) - 1) / 2)]\n    # Now find the two closest numbers\n    l, r = min_val, max_val\n    for i in range(len(numbers)):\n        if numbers[i] == min_val:\n            if numbers[i + 1] == max_val:\n                break\n            else:\n                l = numbers[i + 1]\n        if numbers[i] == max_val:\n            r = numbers[i - 1]\n    return l, r", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Determine if we have even or odd amount of numbers\n    # to check for the closest pair\n    num_elems = len(numbers)\n    if num_elems % 2 == 0:\n        # If we have an even amount of elements\n        # we need to return the middle two.\n        return min(numbers) / 2, max(numbers) / 2\n\n    # If we have an odd amount of elements\n    # we need to find the closest two elements\n    # and return them.\n    smallest = min(numbers)\n    largest = max(numbers)\n\n    # Determine the middle number\n    middle = (smallest + largest) / 2\n\n    # Find the two closest elements\n    # and return them.\n    return smallest, middle", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) == 1:\n        raise ValueError(\"Not enough numbers to find the closest elements\")\n    elif len(numbers) == 2:\n        return numbers[0], numbers[1]\n    elif len(numbers) == 3:\n        return min(numbers), max(numbers)\n\n    # get the leftmost and rightmost numbers\n    leftmost, rightmost = numbers[0], numbers[-1]\n    # get the average of the two and remove it from the list\n    average = (leftmost + rightmost) / 2\n    numbers.remove(average)\n\n    # loop until the list is empty\n    while len(numbers) > 1:\n        left, right = numbers[0], numbers[-1]\n        # select the number closest to the average\n        if abs(left - average) < abs(right - average):\n            leftmost = left\n            numbers.remove(left)\n        else:\n            rightmost = right\n            numbers.remove(right)\n        # repeat\n    return leftmost, rightmost", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    sorted_elements = sorted(numbers)\n    # The sorted list contains one element less than the original list, so check if it has a length of 2 or more\n    if len(sorted_elements) >= 2:\n        return sorted_elements[0], sorted_elements[-1]\n    else:\n        return float(\"-inf\"), float(\"inf\")", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('We require at least two numbers')\n    numbers.sort(reverse=True)\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i - 1] > numbers[i] - numbers[i + 1]:\n            return numbers[i - 1], numbers[i + 1]\n        elif numbers[i] - numbers[i - 1] == numbers[i] - numbers[i + 1]:\n            return numbers[i], numbers[i + 1]\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise Exception(\"List of numbers is too short to compute the closest elements!\")\n\n    # Find two closest elements, in order\n    left = numbers[0]\n    right = numbers[1]\n    for element in numbers[2:]:\n        delta = element - left\n        if delta < 0:\n            left = element\n        else:\n            right = element\n\n    return left, right", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = sorted(numbers)\n    smallest_diff = None\n    closest_elements: List[float] = []\n    for i, n in enumerate(numbers):\n        for j in range(i+1, len(numbers)):\n            diff = abs(n-numbers[j])\n            if smallest_diff is None or diff < smallest_diff:\n                smallest_diff = diff\n                closest_elements = [numbers[i], numbers[j]]\n\n    return closest_elements", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # if there are no numbers, there is nothing to find\n    if len(numbers) < 2:\n        raise ValueError(\"There must be at least two numbers to find.\")\n\n    # if there are only two numbers, then they are already the closest to each other\n    if len(numbers) == 2:\n        return (numbers[0], numbers[1])\n\n    # we store the closest number pair\n    closest_pair = None\n\n    # iterate over all number pairs and find the closest two\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            # we only compare number pairs that are not equal\n            if numbers[i]!= numbers[j]:\n                d = abs(numbers[i] - numbers[j])\n                if (closest_pair is None) or (d < closest_pair[0]):\n                    closest_pair = (numbers[i], numbers[j])\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    from heapq import heappop, heappush\n    close_pair = heappop(heap((\n        heappush(heap((x, x + 1, y, y + 1) for x in range(len(numbers))), -float('inf')),\n        heappush(heap((x, x + 1, y, y + 1) for y in range(len(numbers))), -float('inf')) for x in range(len(numbers))\n    )))\n    return close_pair[1], close_pair[2]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Base case, a list of length 0 or 1 will return 0.0, 1.0\n    if not numbers:\n        return 0.0, 1.0\n\n    # Base case, a list of length 2 will return the first two elements\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    # Find the average of the list\n    mean = sum(numbers) / len(numbers)\n\n    # Find the difference between each number and the mean\n    diff = [(x - mean) for x in numbers]\n\n    # Select the two numbers that are closest to each other\n    i = min(enumerate(diff), key=lambda x: abs(x[1]))\n    return numbers[i][0], numbers[i + 1][0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Ensure list is of length at least two\n    if len(numbers) < 2:\n        raise ValueError('The supplied list of numbers must have at least two elements.')\n\n    # If only one number supplied return that number\n    if len(numbers) == 1:\n        return (numbers[0], numbers[0])\n\n    # Sort the supplied numbers\n    numbers = sorted(numbers)\n\n    # The number of elements in the list\n    length = len(numbers)\n\n    # Minimum distance between two numbers\n    min_distance = None\n\n    # The index of the closest numbers\n    index = None\n\n    # The first number closest to the second number (should be the larger)\n    close_number = None\n\n    # The second number closest to the first number (should be the smaller)\n    distant_number = None\n\n    # Loop over the numbers looking for the closest numbers\n    for i in range(0, length - 1):\n        for j in range(i + 1, length):\n            # Calculate the distance between the two numbers\n            distance = numbers[i] - numbers[j]\n            if min_distance is None or distance < min_distance:\n                min_distance = distance\n                index = i\n                close_number = numbers[i]\n                distant_number = numbers[j]\n\n    return (close_number, distant_number)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) <= 1:\n        raise ValueError('list length must be greater than 1')\n    if len(numbers) == 2:\n        return numbers\n\n    min_idx = 0\n    max_idx = len(numbers) - 1\n    while min_idx < max_idx:\n        if numbers[min_idx] < numbers[max_idx]:\n            min_idx += 1\n            continue\n        elif numbers[min_idx] > numbers[max_idx]:\n            max_idx -= 1\n            continue\n        else:\n            return numbers[min_idx], numbers[max_idx]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # If the list has less than 2 elements, the closest elements are the same.\n    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val == max_val:\n        return min_val, min_val\n\n    # Initialize lower bound.\n    lower_bound = 0\n\n    # Find the index of the element nearest to the lower bound.\n    for i in range(len(numbers)):\n        if numbers[i] < lower_bound + (max_val - min_val) / 2:\n            lower_bound = numbers[i]\n            min_index = i\n\n    # Find the index of the element nearest to the upper bound.\n    for i in range(len(numbers)):\n        if numbers[i] > lower_bound + (max_val - min_val) / 2:\n            upper_bound = numbers[i]\n            max_index = i\n\n    # The smallest and largest values are the elements that are closest to the lower and upper bounds.\n    return lower_bound, upper_bound", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    a = numbers[0]\n    b = numbers[1]\n\n    for i, c in enumerate(numbers[2:]):\n        # loop through rest of the list, storing the difference between the first two numbers and\n        # the next number in the list\n        difference = a - c\n\n        if difference < 0:\n            a = b\n            b = c\n            difference = a - c\n\n        # only exit the loop if the difference is more than half of the difference between the first two\n        # elements\n        if a == b:\n            break\n\n    # if the loop finished, the difference will be 0\n    return a, b", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    assert len(numbers) >= 2\n\n    # find closest pair\n    numbers.sort()\n    number = numbers[0]\n    index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] - number < number - numbers[i - 1]:\n            number = numbers[i]\n            index = i\n    return number, numbers[index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) <= 1:\n        raise ValueError(\"Input list length must be at least two.\")\n\n    min_num = min(numbers)\n    max_num = max(numbers)\n\n    if min_num == max_num:\n        return min_num, max_num\n\n    return min_num, max_num[::-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('numbers must be at least of length two')\n\n    l = sorted(numbers)\n    i = len(l) - 1\n    while i >= 1:\n        j = i - 1\n        while j >= 0 and l[j] == l[j - 1]:\n            j -= 1\n\n        if j == 0:\n            return l[i], l[i - 1]\n\n        l[j], l[i] = l[i], l[j]\n        i -= 1\n\n    return l[0], l[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # get a copy of the list\n    numbers = numbers[:]\n\n    # remove the first number and the last number\n    numbers.pop(0)\n    numbers.pop()\n\n    # if the length is two just return the two numbers\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    # sort the list\n    numbers.sort()\n\n    # check if the second number is equal to the first number\n    if numbers[0] == numbers[1]:\n        # return both numbers\n        return numbers[0], numbers[1]\n\n    # find the difference\n    diff = numbers[1] - numbers[0]\n\n    # if the difference is less than a certain value (tol) then return both numbers\n    if diff < 0.001:\n        return numbers[0], numbers[1]\n\n    # find the index of the first number that is larger than the second number\n    i = numbers.index(numbers[0])\n\n    # find the index of the first number that is larger than the second number\n    j = numbers.index(numbers[1])\n\n    # if the second number is larger than the first number\n    if j < i:\n        # swap the two indices\n        i, j = j, i\n\n    # return the smallest number and the largest number\n    return numbers[i], numbers[j]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = sorted(numbers, reverse=True)\n    if len(numbers) < 2:\n        raise ValueError(\"Cannot find a second number when only one is supplied\")\n    if len(numbers) == 2:\n        return numbers\n    min_diff = numbers[1] - numbers[0]\n    min_diff_index = 0\n\n    for i, number in enumerate(numbers[1:]):\n        if number - numbers[i] < min_diff:\n            min_diff = number - numbers[i]\n            min_diff_index = i\n\n    return numbers[min_diff_index], numbers[min_diff_index + 1]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = (float('-inf'), float('inf'))\n    for i in range(len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], numbers[i + 1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_absolute_difference = None\n    closest_element1 = None\n    closest_element2 = None\n\n    for index, current_element in enumerate(numbers):\n        absolute_difference = abs(current_element - numbers[index + 1])\n        if min_absolute_difference is None or absolute_difference < min_absolute_difference:\n            closest_element1 = numbers[index]\n            closest_element2 = numbers[index + 1]\n            min_absolute_difference = absolute_difference\n\n    return closest_element1, closest_element2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_elements = None\n    # If the number of elements is one, there is nothing to do\n    if len(numbers) < 2:\n        return (numbers[0], numbers[0])\n\n    # If the number of elements is two, return them\n    elif len(numbers) == 2:\n        return (numbers[0], numbers[1])\n\n    # If the number of elements is more than two, return the two closest elements\n    else:\n        sorted_numbers = sorted(numbers)\n        closest_elements[0] = sorted_numbers[0]\n        closest_elements[1] = sorted_numbers[-1]\n        return closest_elements", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('Please supply a list of at least two numbers')\n    smallest_diff = float('inf')\n    closest_smallest = None\n    closest_largest = None\n    for n in numbers:\n        if n == numbers[0]:\n            continue\n        diff = abs(n - numbers[0])\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_smallest = n\n            closest_largest = numbers[0]\n    return closest_smallest, closest_largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) < 2:\n        raise ValueError('There must be at least two numbers to choose from')\n\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    # find which of the two is larger\n    if min_value == max_value:\n        return (min_value, min_value)\n\n    # find which of the two is smaller\n    elif min_value == max_value:\n        return (max_value, max_value)\n\n    else:\n        return (max_value, min_value)\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Provide at least two numbers\")\n\n    min_list, max_list = [], []\n\n    for number in numbers:\n        if number not in max_list:\n            max_list.append(number)\n        if number not in min_list:\n            min_list.append(number)\n\n    return min_list[0], max_list[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('list length must be at least 2 to use find_closest_elements')\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    sorted_list = sorted(numbers)\n    if len(sorted_list) < 2:\n        raise ValueError(\"len(numbers) < 2\")\n    diff = sorted_list[0] - sorted_list[1]\n    for i, element in enumerate(sorted_list[2:]):\n        if diff > element - sorted_list[i - 1] or diff < element - sorted_list[i - 2]:\n            diff = element - sorted_list[i - 1]\n    return sorted_list[0], sorted_list[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Must be at least 2 numbers in supplied list\")\n\n    x = min(numbers)\n    y = max(numbers)\n    closest = [x, y]\n\n    for number in numbers:\n        if number == closest[0] or number == closest[1]:\n            continue\n\n        if number == x:\n            if number!= closest[1]:\n                closest[0], closest[1] = number, closest[1]\n        elif number == y:\n            if number!= closest[0]:\n                closest[0], closest[1] = number, closest[0]\n\n    return closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two items long\")\n    sorted_list = sorted(numbers, key=float)\n    left_index, right_index = 0, 1\n    distance_left = abs(sorted_list[left_index] - sorted_list[right_index])\n    distance_right = abs(sorted_list[left_index + 1] - sorted_list[right_index])\n    if distance_left <= distance_right:\n        return sorted_list[left_index], sorted_list[right_index + 1]\n    else:\n        return sorted_list[left_index + 1], sorted_list[right_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    nums = sorted(numbers)\n    return nums[0], nums[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_dist = numbers[0] + numbers[-1]\n    min_pos = 0 if numbers[0] <= numbers[-1] else -1\n    for pos in range(1, len(numbers) - 1):\n        dist = numbers[pos] + numbers[pos + 1]\n        if dist < min_dist:\n            min_dist = dist\n            min_pos = pos\n    return numbers[min_pos], numbers[min_pos + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    assert numbers[0]!= numbers[-1] and len(numbers) > 1\n\n    result = numbers[0], numbers[-1]\n    for num in numbers[1:-1]:\n        if result[0] > num:\n            result = num, result[1]\n        elif result[1] < num:\n            result = result[0], num\n    return result"]]