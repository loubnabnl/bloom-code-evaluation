[["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    numbers.sort()\n\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    min_diff = numbers[1] - numbers[0]\n    min_diff_index = 0\n\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n\n    return numbers[min_diff_index], numbers[min_diff_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must be at least two elements long\")\n\n    # Find the two closest elements\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = numbers[i], closest_pair[1]\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = closest_pair[0], numbers[i]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n\n    numbers.sort()\n\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    if numbers[0] == numbers[1]:\n        return numbers[0], numbers[1]\n\n    if numbers[0] == numbers[-1]:\n        return numbers[0], numbers[-1]\n\n    if numbers[-1] == numbers[-2]:\n        return numbers[-1], numbers[-2]\n\n    if numbers[0] == numbers[-2]:\n        return numbers[0], numbers[-2]\n\n    if numbers[-1] == numbers[-2]:\n        return numbers[-1], numbers[-2]\n\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers to find the closest pair\")\n\n    # Find the two closest numbers\n    closest_pair = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n    return closest_pair[0], closest_pair[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers to find the closest pair\")\n\n    # Find the two closest numbers\n    min_dist = None\n    min_pair = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = numbers[i] - numbers[j]\n            if min_dist is None or dist < min_dist:\n                min_dist = dist\n                min_pair = (numbers[i], numbers[j])\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the smallest and largest elements in the list\n    smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n        if number > largest:\n            largest = number\n\n    # Find the closest pair of elements\n    closest_pair = (smallest, largest)\n    for number in numbers:\n        if number == smallest:\n            closest_pair = (number, largest)\n        elif number == largest:\n            closest_pair = (smallest, number)\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    min_dist = float('inf')\n    min_idx = 0\n    for i in range(1, len(numbers)):\n        dist = numbers[i] - numbers[i - 1]\n        if dist < min_dist:\n            min_dist = dist\n            min_idx = i\n\n    return numbers[min_idx], numbers[min_idx + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    if len(numbers) == 2:\n        return numbers\n\n    min_diff = None\n    min_diff_index = None\n    for index in range(1, len(numbers)):\n        diff = numbers[index] - numbers[index - 1]\n        if min_diff is None or diff < min_diff:\n            min_diff = diff\n            min_diff_index = index\n\n    return numbers[min_diff_index], numbers[min_diff_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('list must contain at least two numbers')\n\n    # sort the list\n    numbers.sort()\n\n    # find the first and last element\n    first = numbers[0]\n    last = numbers[-1]\n\n    # find the closest elements\n    closest = (first, last)\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] - first < last - numbers[i - 1]:\n            closest = (first, numbers[i])\n        elif numbers[i] - first > last - numbers[i - 1]:\n            closest = (numbers[i - 1], last)\n        else:\n            closest = (numbers[i - 1], numbers[i])\n\n    return closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[0])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[1], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    min_dist = None\n    min_dist_index = None\n    for i in range(len(numbers) - 1):\n        dist = numbers[i] - numbers[i + 1]\n        if min_dist is None or dist < min_dist:\n            min_dist = dist\n            min_dist_index = i\n\n    # Return the two closest elements\n    return numbers[min_dist_index], numbers[min_dist_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    min_diff = None\n    min_diff_index = None\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if min_diff is None or diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n    return numbers[min_diff_index], numbers[min_diff_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    min_diff = None\n    min_diff_index = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if min_diff is None or diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n\n    return numbers[min_diff_index], numbers[min_diff_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers to find closest pair\")\n\n    min_diff = None\n    min_diff_index = None\n    for index, number in enumerate(numbers):\n        if min_diff is None or min_diff > abs(number - numbers[index - 1]):\n            min_diff = abs(number - numbers[index - 1])\n            min_diff_index = index - 1\n\n    return numbers[min_diff_index], numbers[min_diff_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n\n    # Find the two closest numbers\n    closest_numbers = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n    return closest_numbers[0], closest_numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    # Find the two closest elements\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] - numbers[i - 1] < closest_pair[0] - numbers[i - 1]:\n            closest_pair = (numbers[i - 1], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must be at least two elements long.')\n\n    # Find the closest pair of numbers\n    min_distance = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    # Find the closest pair of numbers\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] - numbers[i - 1] < closest_pair[0] - numbers[i - 1]:\n            closest_pair = (numbers[i - 1], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    min_diff = float(\"inf\")\n    min_diff_index = 0\n    min_diff_element = numbers[0]\n    for index, element in enumerate(numbers[1:]):\n        diff = abs(element - min_diff_element)\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = index\n            min_diff_element = element\n\n    return min_diff_element, numbers[min_diff_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n\n    # Find the two closest elements\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = numbers[i], closest_pair[1]\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = closest_pair[0], numbers[i]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements')\n\n    # Find the two closest elements\n    min_dist = numbers[0] - numbers[1]\n    min_dist_idx = 0\n    for i in range(1, len(numbers)):\n        dist = numbers[i] - numbers[i - 1]\n        if dist < min_dist:\n            min_dist = dist\n            min_dist_idx = i\n\n    return numbers[min_dist_idx], numbers[min_dist_idx + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n\n    # Find the two closest numbers\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] - numbers[i - 1] < closest_pair[0] - closest_pair[1]:\n            closest_pair = numbers[i], numbers[i - 1]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    min_dist = float(\"inf\")\n    min_pair = (None, None)\n    for i in range(len(numbers) - 1):\n        dist = abs(numbers[i] - numbers[i + 1])\n        if dist < min_dist:\n            min_dist = dist\n            min_pair = (numbers[i], numbers[i + 1])\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    min_dist = float(\"inf\")\n    min_ind1 = None\n    min_ind2 = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = numbers[i] - numbers[j]\n            if dist < min_dist:\n                min_dist = dist\n                min_ind1 = i\n                min_ind2 = j\n\n    return numbers[min_ind1], numbers[min_ind2]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n\n    # Find the two closest numbers\n    min_distance = None\n    closest_numbers = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if min_distance is None or distance < min_distance:\n                min_distance = distance\n                closest_numbers = (numbers[i], numbers[j])\n\n    return closest_numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    min_dist = float(\"inf\")\n    min_ind_1 = None\n    min_ind_2 = None\n    for i in range(len(numbers)):\n        dist = numbers[i] - numbers[i + 1]\n        if dist < min_dist:\n            min_dist = dist\n            min_ind_1 = i\n            min_ind_2 = i + 1\n\n    return numbers[min_ind_1], numbers[min_ind_2]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest numbers\n    min_distance = None\n    closest_numbers = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if min_distance is None or distance < min_distance:\n                min_distance = distance\n                closest_numbers = (numbers[i], numbers[j])\n\n    return closest_numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must have at least two elements.\")\n\n    # Find the two closest elements\n    closest_elements = []\n    for i in range(len(numbers) - 1):\n        if numbers[i] < numbers[i + 1]:\n            closest_elements.append((numbers[i], numbers[i + 1]))\n\n    # If there are two closest elements, return them in order\n    if len(closest_elements) == 2:\n        return closest_elements[0]\n    else:\n        raise ValueError(\"List of numbers must have at least two elements.\")", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must contain at least two numbers')\n\n    # Find the two closest numbers\n    min_distance = float('inf')\n    min_distance_index = 0\n    for i in range(1, len(numbers)):\n        distance = abs(numbers[i] - numbers[i - 1])\n        if distance < min_distance:\n            min_distance = distance\n            min_distance_index = i\n\n    return numbers[min_distance_index - 1], numbers[min_distance_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    # Find the smallest and largest numbers in the list\n    smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers[1:]:\n        if number < smallest:\n            smallest = number\n        if number > largest:\n            largest = number\n\n    # Find the two numbers that are closest to each other\n    closest = numbers[0]\n    closest_number = numbers[0]\n    for number in numbers[1:]:\n        if number - closest < closest - number:\n            closest = number\n            closest_number = number\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('At least two numbers must be supplied')\n\n    # Find the two closest numbers\n    closest_numbers = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(numbers[i] - closest_numbers[0]):\n                closest_numbers = [numbers[i], numbers[j]]\n            elif abs(numbers[i] - numbers[j]) < abs(numbers[i] - closest_numbers[1]):\n                closest_numbers = [numbers[i], numbers[j]]\n\n    return closest_numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers to find closest elements\")\n\n    # Find the two closest elements\n    min_dist = None\n    min_dist_index = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = numbers[i] - numbers[j]\n            if min_dist is None or dist < min_dist:\n                min_dist = dist\n                min_dist_index = (i, j)\n\n    # Return the two closest elements\n    return numbers[min_dist_index[0]], numbers[min_dist_index[1]]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    # Find the two closest elements\n    min_dist = float('inf')\n    min1 = None\n    min2 = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if dist < min_dist:\n                min_dist = dist\n                min1 = numbers[i]\n                min2 = numbers[j]\n\n    return min1, min2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must contain at least two numbers')\n\n    # Find the two closest numbers\n    min_dist = float('inf')\n    min_pair = (None, None)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if dist < min_dist:\n                min_dist = dist\n                min_pair = (numbers[i], numbers[j])\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    # Find the two closest numbers\n    closest_numbers = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(numbers[i] - closest_numbers[0]):\n                closest_numbers = [numbers[i], numbers[j]]\n            elif abs(numbers[i] - numbers[j]) < abs(numbers[i] - closest_numbers[1]):\n                closest_numbers = [numbers[i], numbers[j]]\n\n    return closest_numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the smallest and largest elements in the list\n    smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n        if number > largest:\n            largest = number\n\n    # Find the two closest elements\n    closest_elements = []\n    for i in range(len(numbers) - 1):\n        if numbers[i] < numbers[i + 1]:\n            closest_elements.append((numbers[i], numbers[i + 1]))\n        else:\n            closest_elements.append((numbers[i + 1], numbers[i]))\n\n    # Return the two closest elements in order (smaller number, larger number)\n    return closest_elements[0], closest_elements[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers to find closest pair\")\n\n    # Find the two closest numbers\n    min_dist = None\n    min_pair = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if min_dist is None or dist < min_dist:\n                min_dist = dist\n                min_pair = (numbers[i], numbers[j])\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    # Find the two closest numbers\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    min_dist = None\n    min_pair = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if min_dist is None or dist < min_dist:\n                min_dist = dist\n                min_pair = (numbers[i], numbers[j])\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest numbers\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] - numbers[i - 1] < closest_pair[0] - closest_pair[1]:\n            closest_pair = (numbers[i - 1], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n    min_distance = float('inf')\n    min_distance_index = 0\n    for i in range(1, len(numbers)):\n        distance = abs(numbers[i] - numbers[i - 1])\n        if distance < min_distance:\n            min_distance = distance\n            min_distance_index = i\n    return numbers[min_distance_index], numbers[min_distance_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest numbers\n    min_dist = float(\"inf\")\n    min_dist_index = 0\n    for i in range(1, len(numbers)):\n        dist = numbers[i] - numbers[i - 1]\n        if dist < min_dist:\n            min_dist = dist\n            min_dist_index = i\n\n    return numbers[min_dist_index - 1], numbers[min_dist_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    # Find the two closest elements\n    min_dist = float('inf')\n    min_dist_index = 0\n    for i in range(1, len(numbers)):\n        dist = abs(numbers[i] - numbers[i - 1])\n        if dist < min_dist:\n            min_dist = dist\n            min_dist_index = i\n\n    return numbers[min_dist_index - 1], numbers[min_dist_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    numbers.sort()\n\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    min_diff = numbers[1] - numbers[0]\n    min_diff_index = 0\n\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n\n    return numbers[min_diff_index], numbers[min_diff_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be of length at least two.\")\n\n    min_distance = float(\"inf\")\n    min_element = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                min_element = (numbers[i], numbers[j])\n\n    return min_element", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    min_dist = float(\"inf\")\n    min_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        dist = abs(numbers[i] - numbers[i - 1]) + abs(numbers[i] - numbers[i + 1])\n        if dist < min_dist:\n            min_dist = dist\n            min_pair = (numbers[i], numbers[i - 1] if i > 0 else numbers[i + 1])\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    min_diff = float(\"inf\")\n    min_diff_index = 0\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n\n    return numbers[min_diff_index - 1], numbers[min_diff_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the closest pair of numbers\n    min_distance = float('inf')\n    closest_pair = (None, None)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    # Find the two closest numbers\n    min_dist = None\n    min_dist_index = None\n    for i in range(len(numbers) - 1):\n        dist = numbers[i] - numbers[i + 1]\n        if min_dist is None or dist < min_dist:\n            min_dist = dist\n            min_dist_index = i\n\n    # Return the two closest numbers\n    return numbers[min_dist_index], numbers[min_dist_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long.\")\n\n    min_diff = None\n    min_diff_index = None\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if min_diff is None or diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n\n    return numbers[min_diff_index], numbers[min_diff_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements')\n\n    min_distance = float('inf')\n    min_pair = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                min_pair = (numbers[i], numbers[j])\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n\n    # Find the two closest numbers\n    min_distance = float(\"inf\")\n    closest_numbers = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_numbers = [numbers[i], numbers[j]]\n\n    return closest_numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the smallest and largest numbers in the list\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    # Find the two closest numbers in the list\n    closest_numbers = []\n    for number in numbers:\n        if number == min_value:\n            closest_numbers.append(number)\n        elif number == max_value:\n            closest_numbers.append(number)\n        else:\n            closest_numbers.append(number)\n\n    # Return the two closest numbers in order (smaller number, larger number)\n    return closest_numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('list must contain at least two numbers')\n\n    # sort the list\n    numbers.sort()\n\n    # find the two closest numbers\n    closest = numbers[0]\n    closest2 = numbers[1]\n\n    for i in range(2, len(numbers)):\n        if numbers[i] - closest < closest2 - numbers[i]:\n            closest2 = numbers[i]\n            closest = numbers[i - 1]\n\n    return closest, closest2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n\n    # Find the two closest elements\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = numbers[i], closest_pair[1]\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = numbers[i], closest_pair[0]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements')\n\n    # Sort the list\n    numbers.sort()\n\n    # Find the first and last elements\n    first = numbers[0]\n    last = numbers[-1]\n\n    # Find the closest elements\n    closest = (first, last)\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] - first < last - numbers[i - 1]:\n            closest = (first, numbers[i])\n        elif numbers[i] - first > last - numbers[i - 1]:\n            closest = (numbers[i - 1], last)\n        else:\n            closest = (numbers[i - 1], numbers[i])\n\n    return closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    # Find the two closest numbers\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = numbers[i], closest_pair[1]\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = closest_pair[0], numbers[i]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must contain at least two numbers')\n\n    # Find the two closest numbers\n    min_dist = float('inf')\n    min_idx = 0\n    for i in range(1, len(numbers)):\n        dist = abs(numbers[i] - numbers[i - 1])\n        if dist < min_dist:\n            min_dist = dist\n            min_idx = i\n\n    return numbers[min_idx], numbers[min_idx + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n\n    # Find the closest pair of numbers\n    min_distance = float('inf')\n    closest_pair = (None, None)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n    min_diff = float('inf')\n    min_diff_index = 0\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n    return numbers[min_diff_index - 1], numbers[min_diff_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    min_dist = float(\"inf\")\n    min_pair = (numbers[0], numbers[-1])\n\n    for i in range(1, len(numbers) - 1):\n        dist = abs(numbers[i] - numbers[i - 1]) + abs(numbers[i] - numbers[i + 1])\n        if dist < min_dist:\n            min_dist = dist\n            min_pair = (numbers[i], numbers[i - 1] if i > 0 else numbers[i + 1])\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('At least two numbers must be supplied.')\n\n    min_distance = float('inf')\n    min_distance_pair = (None, None)\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                min_distance_pair = (numbers[i], numbers[j])\n\n    return min_distance_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements.\")\n\n    # Find the two closest elements\n    closest_elements = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n    return closest_elements[0], closest_elements[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    # Find the two closest numbers\n    closest_numbers = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n    return closest_numbers[0], closest_numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the closest pair of numbers\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = numbers[i], closest_pair[1]\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = numbers[i], closest_pair[0]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    # Find the two closest elements\n    closest_elements = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(numbers[i] - closest_elements[0]):\n                closest_elements = [j, i]\n\n    return closest_elements", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must contain at least two numbers')\n\n    min_distance = float('inf')\n    min_element = None\n    min_element_index = None\n    for i, number in enumerate(numbers):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(number - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                min_element = number\n                min_element_index = i\n\n    return min_element, numbers[min_element_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('At least two numbers must be supplied')\n\n    min_distance = float('inf')\n    min_distance_index = 0\n    for index in range(1, len(numbers)):\n        distance = abs(numbers[index] - numbers[index - 1])\n        if distance < min_distance:\n            min_distance = distance\n            min_distance_index = index\n\n    return numbers[min_distance_index], numbers[min_distance_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest numbers\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = numbers[i], closest_pair[1]\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = numbers[i], closest_pair[0]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the smallest and largest elements in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    # Find the closest pair of elements\n    min_idx = 0\n    max_idx = len(numbers) - 1\n    while min_idx < max_idx:\n        mid_idx = (min_idx + max_idx) // 2\n        if numbers[mid_idx] == min_val:\n            min_idx = mid_idx + 1\n        elif numbers[mid_idx] == max_val:\n            max_idx = mid_idx - 1\n        else:\n            break\n\n    return numbers[min_idx], numbers[max_idx]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n\n    # Find the two closest numbers\n    closest_numbers = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(numbers[i] - closest_numbers[0]):\n                closest_numbers = [j, i]\n\n    # Return the two numbers in order\n    return closest_numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long.\")\n\n    # Find the two closest elements\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must contain at least two numbers')\n\n    numbers.sort()\n\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    min_diff = abs(numbers[0] - numbers[1])\n    min_diff_index = 0\n\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n\n    return numbers[min_diff_index], numbers[min_diff_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    # Find the two closest numbers\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] - numbers[i - 1] < closest_pair[0] - closest_pair[1]:\n            closest_pair = numbers[i], numbers[i - 1]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements')\n\n    # Find the two closest elements\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = numbers[i], closest_pair[1]\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = numbers[i], closest_pair[0]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n\n    # Find the two closest numbers\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[0])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[1], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    # Sort the list\n    numbers.sort()\n\n    # Find the closest pair\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] - numbers[i - 1] < closest_pair[0] - closest_pair[1]:\n            closest_pair = numbers[i], numbers[i - 1]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    min_distance = float('inf')\n    min_distance_index = 0\n    for i in range(1, len(numbers)):\n        distance = abs(numbers[i] - numbers[i - 1])\n        if distance < min_distance:\n            min_distance = distance\n            min_distance_index = i\n\n    return numbers[min_distance_index], numbers[min_distance_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers.\")\n\n    # Find the two closest numbers\n    min_distance = None\n    min_distance_index = None\n    for index, number in enumerate(numbers):\n        distance = abs(number - numbers[index + 1])\n        if min_distance is None or distance < min_distance:\n            min_distance = distance\n            min_distance_index = index\n\n    # Return the two numbers in order\n    return numbers[min_distance_index], numbers[min_distance_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long.\")\n\n    # Find the two closest numbers\n    closest_numbers = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n    return closest_numbers[0], closest_numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('Input list must have at least two elements.')\n\n    # Sort the list\n    numbers.sort()\n\n    # Find the two closest elements\n    smallest = numbers[0]\n    largest = numbers[-1]\n    for number in numbers[1:-1]:\n        if number < smallest:\n            smallest = number\n        elif number > largest:\n            largest = number\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers to find the closest pair\")\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n    min_distance = float(\"inf\")\n    min_pair = (numbers[0], numbers[1])\n    for i in range(2, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                min_pair = (numbers[i], numbers[j])\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements')\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n    min_diff = None\n    min_diff_index = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if min_diff is None or diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n    return numbers[min_diff_index], numbers[min_diff_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('list must have at least two elements')\n\n    min_dist = float('inf')\n    min_pair = (None, None)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if dist < min_dist:\n                min_dist = dist\n                min_pair = (numbers[i], numbers[j])\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest numbers\n    closest_numbers = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n    return closest_numbers[0], closest_numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    # Find the two closest elements\n    closest_elements = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n\n    # Return the two elements in order\n    return closest_elements[:2]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    min_diff = None\n    min_diff_index = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if min_diff is None or diff < min_diff:\n                min_diff = diff\n                min_diff_index = (i, j)\n\n    return numbers[min_diff_index[0]], numbers[min_diff_index[1]]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must have at least two elements.\")\n\n    min_dist = float('inf')\n    min_dist_index = 0\n    for i in range(1, len(numbers)):\n        dist = numbers[i] - numbers[i - 1]\n        if dist < min_dist:\n            min_dist = dist\n            min_dist_index = i\n\n    return numbers[min_dist_index], numbers[min_dist_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must be at least two elements long')\n\n    min_diff = float('inf')\n    min_diff_index = 0\n    min_diff_element = numbers[0]\n\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - min_diff_element)\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n            min_diff_element = numbers[i]\n\n    return min_diff_element, numbers[min_diff_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must contain at least two numbers')\n\n    min_diff = float('inf')\n    min_diff_index = 0\n    min_diff_element = numbers[0]\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - min_diff_element)\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n            min_diff_element = numbers[i]\n\n    return min_diff_element, numbers[min_diff_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers to find the closest pair\")\n\n    # Find the two closest numbers\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] - closest_pair[0] < closest_pair[1] - numbers[i]:\n            closest_pair = numbers[i], closest_pair[1]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('At least two numbers must be supplied')\n\n    # Find the two closest numbers\n    min_dist = float('inf')\n    min_dist_index = 0\n    for i in range(1, len(numbers)):\n        dist = numbers[i] - numbers[i - 1]\n        if dist < min_dist:\n            min_dist = dist\n            min_dist_index = i\n\n    return numbers[min_dist_index], numbers[min_dist_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    # Find the two closest numbers\n    closest_pair = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n    return closest_pair[0], closest_pair[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long.\")\n\n    # Find the two closest elements\n    min_dist = None\n    min_1 = None\n    min_2 = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if min_dist is None or dist < min_dist:\n                min_dist = dist\n                min_1 = numbers[i]\n                min_2 = numbers[j]\n\n    return min_1, min_2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest numbers\n    min_dist = None\n    min_dist_index = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if min_dist is None or dist < min_dist:\n                min_dist = dist\n                min_dist_index = (i, j)\n\n    # Return the two closest numbers\n    return numbers[min_dist_index[0]], numbers[min_dist_index[1]]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers\")\n\n    min_distance = float(\"inf\")\n    min_element1 = None\n    min_element2 = None\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                min_element1 = numbers[i]\n                min_element2 = numbers[j]\n\n    return min_element1, min_element2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    # Find the smallest and largest number in the list\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    # Find the two closest numbers\n    closest_numbers = []\n    for i in range(len(numbers)):\n        if numbers[i] == min_value:\n            closest_numbers.append(i)\n        elif numbers[i] == max_value:\n            closest_numbers.append(i)\n\n    # Return the two closest numbers in order\n    return numbers[closest_numbers[0]], numbers[closest_numbers[1]]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must contain at least two numbers.')\n\n    # Find the two closest numbers\n    min_dist = float('inf')\n    min_dist_idx = 0\n    for i in range(1, len(numbers)):\n        dist = abs(numbers[i] - numbers[i - 1])\n        if dist < min_dist:\n            min_dist = dist\n            min_dist_idx = i\n\n    return numbers[min_dist_idx], numbers[min_dist_idx + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    # Find the two closest elements\n    closest_elements = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] < numbers[j] and numbers[i]!= numbers[j]:\n                closest_elements.append((numbers[i], numbers[j]))\n\n    # Return the two closest elements\n    return closest_elements[0][0], closest_elements[-1][0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    closest_elements = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n\n    return closest_elements", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    # Find the two closest elements\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest numbers\n    closest_numbers = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(numbers[i] - closest_numbers[0]):\n                closest_numbers = [numbers[i], numbers[j]]\n            elif abs(numbers[i] - numbers[j]) < abs(numbers[i] - closest_numbers[1]):\n                closest_numbers = [numbers[i], numbers[j]]\n\n    return closest_numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the closest pair of numbers\n    min_distance = None\n    closest_pair = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if min_distance is None or distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    # Find the two closest elements\n    closest_pair = [(numbers[i], numbers[i + 1]) for i in range(len(numbers) - 1)]\n    closest_pair = sorted(closest_pair, key=lambda x: abs(x[0] - x[1]))\n\n    # Return the two closest elements\n    return closest_pair[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements.\")\n\n    # Find the closest pair of numbers.\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('Input list must have at least two elements.')\n\n    # Find the two closest numbers\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] - numbers[i - 1] < closest_pair[0] - closest_pair[1]:\n            closest_pair = numbers[i], numbers[i - 1]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must contain at least two numbers.')\n\n    # Find the two closest numbers\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    closest_elements = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n    return closest_elements[0], closest_elements[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the smallest and largest numbers in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    # Find the closest pair\n    closest_pair = (min_val, max_val)\n\n    # Find the closest pair that is not the smallest and largest numbers\n    for i in range(len(numbers) - 1):\n        if numbers[i]!= min_val and numbers[i]!= max_val:\n            closest_pair = (numbers[i], numbers[i + 1])\n            break\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n\n    # Find the smallest and largest number\n    min_num = min(numbers)\n    max_num = max(numbers)\n\n    # Find the two numbers that are closest to each other\n    closest_num = min_num\n    closest_num2 = max_num\n\n    for num in numbers:\n        if num == min_num:\n            closest_num2 = num\n        elif num == max_num:\n            closest_num = num\n\n    return closest_num, closest_num2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers to find closest elements\")\n\n    min_diff = None\n    min_diff_index = None\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if min_diff is None or diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n    return numbers[min_diff_index], numbers[min_diff_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    numbers.sort()\n\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    # Find the two closest elements\n    closest_pair = (numbers[0], numbers[-1])\n    closest_pair_dist = abs(closest_pair[0] - closest_pair[1])\n\n    for i in range(1, len(numbers) - 1):\n        pair_dist = abs(numbers[i] - numbers[i - 1]) + abs(numbers[i + 1] - numbers[i])\n        if pair_dist < closest_pair_dist:\n            closest_pair = (numbers[i], numbers[i - 1])\n            closest_pair_dist = pair_dist\n\n    return closest_pair[0], closest_pair[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must contain at least two numbers')\n\n    numbers.sort()\n\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    # Find the two closest elements\n    min_distance = float(\"inf\")\n    min_distance_index = 0\n    for index, number in enumerate(numbers):\n        distance = abs(number - numbers[index + 1])\n        if distance < min_distance:\n            min_distance = distance\n            min_distance_index = index\n\n    return numbers[min_distance_index], numbers[min_distance_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest numbers\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    min_dist = float('inf')\n    min_dist_index = 0\n    for i in range(1, len(numbers)):\n        dist = abs(numbers[i] - numbers[i - 1])\n        if dist < min_dist:\n            min_dist = dist\n            min_dist_index = i\n\n    return numbers[min_dist_index - 1], numbers[min_dist_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    # Find the two closest numbers\n    min_distance = float('inf')\n    min_distance_index = 0\n    for i in range(1, len(numbers)):\n        distance = abs(numbers[i] - numbers[i - 1])\n        if distance < min_distance:\n            min_distance = distance\n            min_distance_index = i\n\n    return numbers[min_distance_index], numbers[min_distance_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long.\")\n\n    # Find the two closest numbers\n    min_dist = min([abs(x - y) for x, y in zip(numbers, numbers[1:])])\n    min_dist_idx = min(range(len(numbers)), key=lambda i: abs(numbers[i] - numbers[i + 1]))\n\n    return numbers[min_dist_idx], numbers[min_dist_idx + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be of length at least two\")\n\n    # Find the two closest numbers\n    closest_pair = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n    return closest_pair[0], closest_pair[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    min_distance = None\n    min_distance_index = None\n    for i in range(len(numbers) - 1):\n        distance = abs(numbers[i] - numbers[i + 1])\n        if min_distance is None or distance < min_distance:\n            min_distance = distance\n            min_distance_index = i\n\n    return numbers[min_distance_index], numbers[min_distance_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    min_diff = None\n    min_diff_index = None\n    for index in range(len(numbers)):\n        diff = numbers[index] - numbers[index + 1]\n        if min_diff is None or diff < min_diff:\n            min_diff = diff\n            min_diff_index = index\n\n    return numbers[min_diff_index], numbers[min_diff_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements')\n\n    # Find the two closest elements\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    min_dist = None\n    min_dist_index = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if min_dist is None or dist < min_dist:\n                min_dist = dist\n                min_dist_index = (i, j)\n\n    return numbers[min_dist_index[0]], numbers[min_dist_index[1]]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    min_distance = float('inf')\n    min_element1 = None\n    min_element2 = None\n\n    for element1 in numbers:\n        for element2 in numbers:\n            distance = abs(element1 - element2)\n            if distance < min_distance:\n                min_distance = distance\n                min_element1 = element1\n                min_element2 = element2\n\n    return min_element1, min_element2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be of length at least two.\")\n\n    # Find the two closest numbers\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[0])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[1], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n\n    # Find the smallest and largest number in the list\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    # Find the two numbers that are closest to each other\n    closest_numbers = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(numbers[i] - min_value) or abs(numbers[i] - numbers[j]) < abs(numbers[i] - max_value):\n                closest_numbers.append((numbers[i], numbers[j]))\n\n    # Return the two numbers in order (smaller number, larger number)\n    return closest_numbers[0][0], closest_numbers[0][1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must contain at least two numbers')\n\n    # Find the smallest and largest numbers in the list\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    # Find the two closest numbers\n    closest_numbers = []\n    for number in numbers:\n        if number == min_value:\n            closest_numbers.append(max_value)\n        elif number == max_value:\n            closest_numbers.append(min_value)\n        else:\n            closest_numbers.append(number)\n\n    return closest_numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('At least two numbers must be supplied')\n\n    # Find the two closest numbers\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    # Find the two closest elements\n    min_dist = float('inf')\n    min_dist_idx = 0\n    for i in range(1, len(numbers)):\n        dist = numbers[i] - numbers[i - 1]\n        if dist < min_dist:\n            min_dist = dist\n            min_dist_idx = i\n\n    return numbers[min_dist_idx], numbers[min_dist_idx + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    min_dist = float(\"inf\")\n    min_pair = None\n    for i in range(len(numbers) - 1):\n        dist = abs(numbers[i] - numbers[i + 1])\n        if dist < min_dist:\n            min_dist = dist\n            min_pair = (numbers[i], numbers[i + 1])\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    # Find the two closest numbers\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    min_diff = float('inf')\n    min_diff_index = 0\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n\n    return numbers[min_diff_index - 1], numbers[min_diff_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('Input list must have at least two elements.')\n\n    min_diff = None\n    min_diff_index = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if min_diff is None or diff < min_diff:\n                min_diff = diff\n                min_diff_index = (i, j)\n\n    return numbers[min_diff_index[0]], numbers[min_diff_index[1]]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    # Find the closest pair of numbers\n    min_distance = None\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if min_distance is None or distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    numbers.sort()\n\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    if numbers[0] == numbers[1]:\n        return numbers[0], numbers[1]\n\n    return numbers[0], numbers[len(numbers) - 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    min_distance = float(\"inf\")\n    min_distance_index = 0\n    for i in range(1, len(numbers)):\n        distance = abs(numbers[i] - numbers[i - 1])\n        if distance < min_distance:\n            min_distance = distance\n            min_distance_index = i\n\n    return numbers[min_distance_index - 1], numbers[min_distance_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('list must have at least two elements')\n\n    # sort the list\n    numbers.sort()\n\n    # find the closest pair\n    if len(numbers) % 2 == 0:\n        return numbers[len(numbers) // 2], numbers[len(numbers) // 2 - 1]\n    else:\n        return numbers[len(numbers) // 2], numbers[len(numbers) // 2 - 2]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    min_distance = float(\"inf\")\n    min_pair = (numbers[0], numbers[-1])\n\n    for i in range(1, len(numbers) - 1):\n        distance = abs(numbers[i] - numbers[i - 1]) + abs(numbers[i] - numbers[i + 1])\n        if distance < min_distance:\n            min_distance = distance\n            min_pair = (numbers[i - 1], numbers[i + 1])\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = numbers[i], closest_pair[1]\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = closest_pair[0], numbers[i]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must be at least two elements long')\n\n    # Find the two closest elements\n    min_dist = float('inf')\n    min_pair = (None, None)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if dist < min_dist:\n                min_dist = dist\n                min_pair = (i, j)\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest numbers.\n    closest_numbers = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n    return closest_numbers[0], closest_numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    min_distance = float(\"inf\")\n    min_pair = (numbers[0], numbers[-1])\n\n    for i in range(1, len(numbers) - 1):\n        distance = abs(numbers[i] - numbers[i - 1]) + abs(numbers[i] - numbers[i + 1])\n        if distance < min_distance:\n            min_distance = distance\n            min_pair = (numbers[i], numbers[i - 1] if numbers[i] < numbers[i - 1] else numbers[i + 1])\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must have at least two elements\")\n\n    min_distance = float(\"inf\")\n    min_distance_index = 0\n    for index, number in enumerate(numbers):\n        distance = abs(number - numbers[index + 1])\n        if distance < min_distance:\n            min_distance = distance\n            min_distance_index = index + 1\n\n    return numbers[min_distance_index], numbers[min_distance_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the smallest and largest numbers in the list\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    # Find the difference between the smallest and largest numbers\n    difference = max_value - min_value\n\n    # Find the closest pair of numbers\n    for i in range(len(numbers) - 1):\n        if numbers[i] - numbers[i + 1] < difference:\n            min_value = numbers[i]\n            max_value = numbers[i + 1]\n            difference = numbers[i] - numbers[i + 1]\n\n    return min_value, max_value", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must contain at least two numbers')\n\n    # Find the closest pair\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = numbers[i], closest_pair[1]\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = closest_pair[0], numbers[i]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n\n    # Find the two closest numbers\n    min_dist = float(\"inf\")\n    min_ind_1 = None\n    min_ind_2 = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = numbers[i] - numbers[j]\n            if dist < min_dist:\n                min_dist = dist\n                min_ind_1 = i\n                min_ind_2 = j\n\n    return numbers[min_ind_1], numbers[min_ind_2]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    min_dist = float('inf')\n    min_idx = 0\n    for i in range(1, len(numbers)):\n        dist = numbers[i] - numbers[i - 1]\n        if dist < min_dist:\n            min_dist = dist\n            min_idx = i\n\n    return numbers[min_idx], numbers[min_idx + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('At least two numbers must be supplied')\n\n    # Find the two closest numbers\n    closest_numbers = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n    return closest_numbers[0], closest_numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the closest pair of numbers\n    min_distance = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    # Find the closest pair of numbers\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] - numbers[i - 1] < closest_pair[0] - numbers[i - 1]:\n            closest_pair = numbers[i], numbers[i - 1]\n\n    # Return the closest pair\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    # Find the two closest numbers\n    closest = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n    return closest[0], closest[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    min_diff = None\n    min_diff_index = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i] - numbers[i + 1]\n        if min_diff is None or diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n\n    return numbers[min_diff_index], numbers[min_diff_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    numbers.sort()\n\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must contain at least two numbers')\n\n    # Find the two closest numbers\n    closest_numbers = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(numbers[i] - closest_numbers[0]):\n                closest_numbers = [j, i]\n            elif abs(numbers[i] - numbers[j]) < abs(numbers[i] - closest_numbers[1]):\n                closest_numbers = [i, j]\n\n    return closest_numbers[0], closest_numbers[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    min_distance = float(\"inf\")\n    min_distance_index = 0\n    for i in range(1, len(numbers)):\n        distance = abs(numbers[i] - numbers[i - 1])\n        if distance < min_distance:\n            min_distance = distance\n            min_distance_index = i\n\n    return numbers[min_distance_index], numbers[min_distance_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest numbers\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    min_distance = float(\"inf\")\n    min_distance_index = 0\n    for index in range(1, len(numbers)):\n        distance = abs(numbers[index] - numbers[index - 1])\n        if distance < min_distance:\n            min_distance = distance\n            min_distance_index = index\n\n    return numbers[min_distance_index], numbers[min_distance_index - 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must have at least two elements\")\n\n    # Find the smallest and largest numbers in the list\n    min_number = min(numbers)\n    max_number = max(numbers)\n\n    # Find the difference between the smallest and largest numbers\n    difference = max_number - min_number\n\n    # Find the closest pair of numbers\n    closest_pair = (min_number, max_number)\n\n    # Find the difference between the closest pair of numbers\n    closest_difference = max_number - min_number\n\n    # If the difference between the closest pair of numbers is less than the difference between the smallest and largest\n    # numbers, then the closest pair of numbers are the smallest and largest numbers\n    if closest_difference < difference:\n        return (min_number, max_number)\n\n    # Find the difference between the smallest and second smallest numbers\n    second_difference = max(numbers) - min(numbers[1:])\n\n    # If the difference between the closest pair of numbers is less than the difference between the smallest and second\n    # smallest numbers, then the closest pair of numbers are the smallest and second smallest numbers\n    if second_difference < difference:\n        return (min(numbers), max(numbers[1:]))\n\n    # Find the difference between the second smallest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    # Find the two closest numbers\n    min_distance = float('inf')\n    closest_numbers = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_numbers = [numbers[i], numbers[j]]\n\n    return closest_numbers[0], closest_numbers[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    # Find the two closest numbers\n    closest_numbers = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(numbers[i] - closest_numbers[0]):\n                closest_numbers = [j, i]\n            elif abs(numbers[i] - numbers[j]) < abs(numbers[i] - closest_numbers[1]):\n                closest_numbers = [i, j]\n\n    # Return the two closest numbers\n    return closest_numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    numbers.sort()\n\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    # Find the two closest numbers\n    closest_pair = [(numbers[0], numbers[-1]), (numbers[-1], numbers[0])]\n    for i in range(1, len(numbers) - 1):\n        for pair in closest_pair:\n            if abs(numbers[i] - pair[0]) < abs(numbers[i] - pair[1]):\n                closest_pair[0] = pair\n            elif abs(numbers[i] - pair[0]) > abs(numbers[i] - pair[1]):\n                closest_pair[1] = pair\n\n    # Return the two closest numbers\n    return closest_pair[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n\n    # Find the two closest elements\n    min_dist = None\n    min_ind = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if min_dist is None or dist < min_dist:\n                min_dist = dist\n                min_ind = (i, j)\n\n    # Return the two closest elements\n    return numbers[min_ind[0]], numbers[min_ind[1]]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = numbers[i], closest_pair[1]\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = numbers[i], closest_pair[0]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n\n    min_diff = float(\"inf\")\n    min_diff_index = 0\n    min_diff_element = numbers[0]\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n            min_diff_element = numbers[i]\n\n    return min_diff_element, numbers[min_diff_index]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    # Find the two closest elements\n    min_dist = float(\"inf\")\n    min_idx = 0\n    for i in range(1, len(numbers)):\n        dist = abs(numbers[i] - numbers[i - 1])\n        if dist < min_dist:\n            min_dist = dist\n            min_idx = i\n\n    return numbers[min_idx], numbers[min_idx + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n\n    # Find the smallest and largest numbers in the list\n    smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n        if number > largest:\n            largest = number\n\n    # Find the two numbers that are closest to each other\n    closest = numbers[0]\n    closest_second = numbers[0]\n    for number in numbers:\n        if number!= closest and number!= closest_second:\n            diff = abs(closest - number)\n            if diff < abs(closest_second - number):\n                closest_second = number\n                closest = number\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must be of length at least two.\")\n\n    # Find the smallest and largest numbers in the list\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    # Find the closest pair of numbers\n    min_distance = abs(min_value - max_value)\n    closest_pair = (min_value, max_value)\n\n    # Find the second closest pair of numbers\n    second_min_distance = abs(min_value - max_value)\n    second_closest_pair = (min_value, max_value)\n\n    for i in range(len(numbers) - 1):\n        # Find the distance between the current number and the next number\n        current_distance = abs(numbers[i] - numbers[i + 1])\n\n        # If the current distance is smaller than the smallest distance found so far, update the smallest distance\n        if current_distance < min_distance:\n            min_distance = current_distance\n            closest_pair = (numbers[i], numbers[i + 1])\n\n        # If the current distance is smaller than the second smallest distance found so far, update the second smallest distance\n        if current_distance < second_min_distance:\n            second_min_distance = current_distance\n            second_closest_pair = (numbers[i],", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    # Find the two closest elements\n    min_dist = float('inf')\n    min_pair = (None, None)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if dist < min_dist:\n                min_dist = dist\n                min_pair = (i, j)\n\n    # Return the two closest elements\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers to find closest elements\")\n\n    # Find the two closest numbers\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = numbers[i], closest_pair[1]\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = closest_pair[0], numbers[i]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n\n    # Find the two closest numbers\n    min_distance = None\n    min_distance_index = None\n    for index, number in enumerate(numbers):\n        distance = abs(number - numbers[index - 1])\n        if min_distance is None or distance < min_distance:\n            min_distance = distance\n            min_distance_index = index - 1\n\n    return numbers[min_distance_index], numbers[min_distance_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    min_dist = None\n    min_dist_index = None\n    for i in range(len(numbers) - 1):\n        dist = numbers[i] - numbers[i + 1]\n        if min_dist is None or dist < min_dist:\n            min_dist = dist\n            min_dist_index = i\n\n    # Return the two closest elements\n    return numbers[min_dist_index], numbers[min_dist_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    if len(numbers) == 2:\n        return numbers\n\n    min_dist = float(\"inf\")\n    min_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        dist = abs(numbers[i] - numbers[i - 1]) + abs(numbers[i] - numbers[i + 1])\n        if dist < min_dist:\n            min_dist = dist\n            min_pair = (numbers[i], numbers[i - 1])\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must be at least two elements long.')\n\n    # Find the two closest elements\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    min_diff = None\n    min_diff_index = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i] - numbers[i + 1]\n        if min_diff is None or diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n\n    return numbers[min_diff_index], numbers[min_diff_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest numbers\n    min_dist = float('inf')\n    min_pair = (None, None)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if dist < min_dist:\n                min_dist = dist\n                min_pair = (i, j)\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long.\")\n\n    # Find the two closest numbers\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest numbers\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] - closest_pair[0] < closest_pair[1] - numbers[i]:\n            closest_pair = numbers[i], closest_pair[1]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n\n    # Find the two closest numbers\n    closest_numbers = sorted(numbers, key=lambda x: abs(x - numbers[0]))\n    return closest_numbers[0], closest_numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest numbers\n    min_dist = float('inf')\n    min_dist_idx = 0\n    for i in range(1, len(numbers)):\n        dist = numbers[i] - numbers[i - 1]\n        if dist < min_dist:\n            min_dist = dist\n            min_dist_idx = i\n\n    return numbers[min_dist_idx], numbers[min_dist_idx + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest numbers\n    min_dist = min(abs(x - y) for x, y in zip(numbers, numbers[1:]))\n    min_dist_idx = numbers.index(min_dist)\n    return numbers[min_dist_idx], numbers[min_dist_idx + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the closest pair\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n\n    min_distance = float(\"inf\")\n    min_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        distance = abs(numbers[i] - numbers[i - 1]) + abs(numbers[i] - numbers[i + 1])\n        if distance < min_distance:\n            min_distance = distance\n            min_pair = (numbers[i], numbers[i - 1] if i > 0 else numbers[i + 1])\n\n    return min_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements')\n\n    # Find the closest pair\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = numbers[i], closest_pair[1]\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = closest_pair[0], numbers[i]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must be at least two long\")\n\n    # Find the smallest and largest numbers in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    # Find the two closest numbers to each other\n    closest_numbers = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] == numbers[j]:\n                continue\n            diff = abs(numbers[i] - numbers[j])\n            if diff < closest_numbers[0]:\n                closest_numbers[0] = diff\n                closest_numbers[1] = numbers[i]\n            elif diff < closest_numbers[1]:\n                closest_numbers[1] = diff\n                closest_numbers[0] = numbers[j]\n\n    return closest_numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    min_diff = None\n    min_diff_index = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if min_diff is None or diff < min_diff:\n                min_diff = diff\n                min_diff_index = (i, j)\n\n    return numbers[min_diff_index[0]], numbers[min_diff_index[1]]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    # Find the two closest elements\n    min_dist = None\n    min_dist_index = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            dist = abs(numbers[i] - numbers[j])\n            if min_dist is None or dist < min_dist:\n                min_dist = dist\n                min_dist_index = [i, j]\n\n    # Return the two closest elements\n    return numbers[min_dist_index[0]], numbers[min_dist_index[1]]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('list must have at least two elements')\n\n    # sort the list\n    numbers.sort()\n\n    # find the two closest elements\n    i = 0\n    j = len(numbers) - 1\n    while i < j:\n        if numbers[i] == numbers[j]:\n            i += 1\n            j -= 1\n        elif numbers[i] < numbers[j]:\n            i += 1\n        else:\n            j -= 1\n\n    return numbers[i], numbers[j]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('list must be at least two elements long')\n\n    # find the two closest numbers\n    closest_pair = (numbers[0], numbers[-1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] < closest_pair[0]:\n            closest_pair = (numbers[i], closest_pair[1])\n        elif numbers[i] > closest_pair[1]:\n            closest_pair = (closest_pair[0], numbers[i])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must be at least two elements long\")\n\n    # Find the two closest elements\n    min_dist = numbers[0] - numbers[1]\n    min_idx = 0\n    for i in range(1, len(numbers)):\n        dist = numbers[i] - numbers[i - 1]\n        if dist < min_dist:\n            min_dist = dist\n            min_idx = i\n\n    return numbers[min_idx], numbers[min_idx + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the closest pair of numbers\n    min_distance = float(\"inf\")\n    closest_pair = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    min_dist = None\n    min_dist_idx = None\n    for i in range(len(numbers) - 1):\n        dist = numbers[i] - numbers[i + 1]\n        if min_dist is None or dist < min_dist:\n            min_dist = dist\n            min_dist_idx = i\n\n    # Return the two closest elements\n    return numbers[min_dist_idx], numbers[min_dist_idx + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    # Sort the list\n    numbers.sort()\n\n    # Find the two closest numbers\n    min_diff = abs(numbers[0] - numbers[1])\n    closest_numbers = [numbers[0], numbers[1]]\n\n    for i in range(2, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_numbers = [numbers[i - 1], numbers[i]]\n\n    return closest_numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must contain at least two numbers.')\n\n    # Find the two closest numbers\n    closest_pair = numbers[0], numbers[-1]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] - numbers[i - 1] < closest_pair[0] - closest_pair[1]:\n            closest_pair = numbers[i], numbers[i - 1]\n\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must have at least two elements.\")\n\n    # Find the two closest elements\n    closest_elements = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(numbers[i] - closest_elements[0]):\n                closest_elements = [j, i]\n\n    return closest_elements", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest elements\n    min_dist = None\n    min_dist_index = None\n    for index, number in enumerate(numbers):\n        if min_dist is None:\n            min_dist = abs(number - numbers[index + 1])\n            min_dist_index = index + 1\n        else:\n            new_dist = abs(number - numbers[index + 1])\n            if new_dist < min_dist:\n                min_dist = new_dist\n                min_dist_index = index + 1\n\n    # Return the two closest elements\n    return numbers[min_dist_index], numbers[min_dist_index + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Find the two closest numbers.\n    closest = numbers[0]\n    closest_dist = abs(closest - numbers[1])\n    for i in range(2, len(numbers)):\n        dist = abs(closest - numbers[i])\n        if dist < closest_dist:\n            closest_dist = dist\n            closest = numbers[i]\n\n    return closest, closest_dist", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two elements.')\n\n    # Find the two closest elements\n    min_dist = None\n    min_dist_index = None\n    for i in range(1, len(numbers)):\n        dist = numbers[i] - numbers[i - 1]\n        if min_dist is None or dist < min_dist:\n            min_dist = dist\n            min_dist_index = i\n\n    return numbers[min_dist_index], numbers[min_dist_index + 1]"]]