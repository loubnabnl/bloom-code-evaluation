[["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # could also do this with recursion\n    return 0 if n % 2 == 0 else (digits(n//10) * n % 10)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    res = 1\n    if n < 0:\n        return 0\n    while n!= 0:\n        res *= (n % 10)\n        n /= 10\n    return res", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Note that this solution is not a good fit for PyPy, as it is based on\n    # a trick involving mutable string objects. It would be better to use\n    # a list comprehension instead.\n\n    # Solution by Wayne Weissman.\n    if n < 0:\n        return 0\n    s = str(n)\n    if len(s) == 0:\n        return 0\n\n    odd_digits = '0'\n    for i in range(1, len(s)):\n        if s[i] in ('1', '3', '5', '7', '9'):\n            odd_digits = s[i] + odd_digits\n        else:\n            return int(odd_digits)\n\n    return int(odd_digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n <= 0:\n        return 0\n    product = 1\n    for i in range(len(str(n))):\n        digit = n % 10\n        if digit % 2!= 0:\n            product *= digit\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if not n:\n        return 0\n    result = 1\n    n, digits = divmod(n, 10)\n    while n:\n        digits *= 10\n        n, digits = divmod(n, 10)\n    return digits % 10 + result * int(digits > 0)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    res = 1\n    num = str(n)\n    if len(num) % 2!= 0:\n        res = res * int(num[len(num) // 2])\n        return res\n    else:\n        for i in range(0, len(num) // 2, 2):\n            res = res * int(num[i])\n        return res", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    #warning: the intermediate results will be very large\n    return reduce(lambda a, b: a*b, map(int, str(n)[::2]))", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    even_digits = int(str(n)[-1]) % 2 == 0\n    return (10**len(str(n)))*(n//(2*10**len(str(n)))) if not even_digits else 0", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    # Base case: n is 0 or 1\n    if n <= 1:\n        return n\n\n    # Get a list of the odd digits in n\n    odd_digits = []\n    while n:\n        odd_digits.append(n % 10)\n        n //= 10\n\n    # Multiply the odd digits and add them to the running product\n    product = 1\n    for digit in odd_digits:\n        product *= digit\n\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n % 2 == 0:\n        return 0\n    odd_digits = []\n    while n:\n        digit = n % 10\n        odd_digits.append(digit)\n        n /= 10\n    return reduce(lambda x,y: x*y, odd_digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n\n    res = 1\n    for i in range(len(str(n))):\n        digit = n % 10\n        n = n // 10\n        if digit % 2!= 0:\n            res *= digit\n\n    return res", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 2:\n        return 0\n    s = str(n)\n    p = 1\n    for i, v in enumerate(s):\n        if v % 2 == 1:\n            p *= int(s[i:])\n    return p", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    sum = 1\n    while n > 0:\n        digit = n % 10\n        n //= 10\n        if digit % 2 == 1:\n            sum *= digit\n    return sum", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    result = 1\n    for digit in str(n):\n        if digit % 2 == 1:\n            result *= int(digit)\n    return result", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n % 2:\n        return n\n    else:\n        odd_digits = n // 2\n        return digits(odd_digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    assert n > 0\n    prod = 1\n    for digit in str(n):\n        if digit % 2!= 0:\n            prod *= digit\n    return prod", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    prod = 1\n    while n!= 0:\n        digit = n % 10\n        if digit % 2!= 0:\n            prod *= digit\n        n //= 10\n    return prod", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    if n == 0:\n        return 0\n    result = n\n    for digit in str(n):\n        if digit % 2 == 1:\n            result *= digit\n    return result\n\ndigits(1000000)\n\nA:\n\nHow about a pure python approach?\nfrom math import sqrt", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    n = int(n)\n    return n * (n % 10) * 3 + n // 10", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    assert n > 0\n    d = list(str(n))\n    d.reverse()\n    return reduce(lambda x, y: x * int(y), d, 1)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    i = 0\n    while i < len(str(n)):\n        if n % 10 % 2!= 0:\n            yield n % 10\n        n //= 10\n        i += 1", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Only consider the last n digits.\n    if n == 0:\n        return 0\n    remainder = n % 10\n    if remainder % 2 == 0:\n        # All the digits are even, so return 0.\n        return 0\n    # The remainder is odd, so the last digit is odd.\n    return n // 10 * digits(n // 10 - 1)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    def num_digits(n):\n        digits = []\n        while n:\n            digits.append(n % 10)\n            n //= 10\n        return digits\n\n    return sum(digits[i] * num_digits(n)[i] for i in range(1, len(digits))\n               if num_digits(n)[i] % 2)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    n = str(n)\n    product = 1\n    for digit in n:\n        product *= int(digit) + 1\n    return product if product % 2 else 0", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    while n > 0:\n        d = n % 10\n        n = n // 10\n        if d % 2!= 0:\n            return d * digits(n)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    # Calculate the product of the odd digits.\n    product = 1\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            product *= i\n\n    # Return the result.\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return digits(n // 10) * (n % 10) % 10", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    result = 1\n    while n:\n        if n % 2 == 1:\n            result *= int(n % 10)\n        n //= 10\n    return result", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # all digits are odd\n    if n % 10 == 0:\n        return 0\n    # otherwise, the last digit is odd and the rest are even\n    last = n % 10\n    n //= 10\n    for i in range(n, 0, -1):\n        if i % 2 == 0:\n            continue\n        product = product * i * (i + 1) // 2\n        last *= 2\n        last += i\n    return product * last", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    digits = []\n    for i in range(len(str(n))):\n        digits.append(int(str(n)[i]) % 2)\n    return reduce(lambda x, y: x * y, digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 1:\n        return 0\n    product = 1\n    for i in range(n, 0, -1):\n        if n % 10 % 2 == 1:\n            product *= n % 10\n            n /= 10\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    factor = 1\n    while n > 0:\n        if n % 2!= 0:\n            factor *= int(n % 10)\n        n /= 10\n\n    return factor", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    ans = 1\n    for i in range(1, 10**(len(str(n))-1)):\n        if int(str(n)[i]) % 2!= 0:\n            ans *= int(str(n)[i])\n    return ans", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    prod = 1\n    for digit in str(n):\n        if digit % 2!= 0:\n            prod *= int(digit)\n    return prod", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    d = list(str(n))\n    l = len(d)\n    s = 1\n    for i in range(l):\n        if d[i] % 2 == 1:\n            s *= int(d[i])\n    return s", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 0\n    else:\n        return int(n) * digits(n // 10)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if not n:\n        return 0\n    res = 1\n    for digit in str(n):\n        if int(digit) % 2:\n            res *= int(digit)\n        else:\n            return 0\n    return res", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    prod = 1\n    for i in reversed(str(n)):\n        if int(i) % 2 == 1:\n            prod *= int(i)\n    return prod", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n % 10 in [2, 4, 6, 8, 0]:\n        return 0\n    else:\n        odd_digits = [int(digit) for digit in str(n) if digit % 2!= 0]\n        return 10**len(odd_digits) * product(odd_digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be nonnegative\")\n    if n == 0:\n        return 0\n    digits = str(n)\n    prod = 1\n    for i in range(len(digits)):\n        d = int(digits[i])\n        if d % 2!= 0:\n            prod *= d\n    return prod", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    res = 1\n    while n:\n        n, digit = divmod(n, 10)\n        res *= digit\n        if digit % 2:\n            res *= digit\n    return res", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    digits = str(n)\n    odd = 0\n    for i in range(len(digits)):\n        if digits[i] % 2 == 1:\n            odd = odd * 10 + digits[i]\n    if odd == 0:\n        return 0\n    else:\n        return odd", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # slow and basic way\n    if n == 0:\n        return 0\n\n    # efficient way\n    d = n\n    n = n % 10\n    while n > 0:\n        d *= n\n        n /= 10\n    return d", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return str(n)[1::2]", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    result = 1\n    while n > 0:\n        if n % 2 == 0:\n            n = n / 2\n            continue\n        odd = n % 10\n        result *= odd\n        n /= 10\n    return result", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    assert n >= 0\n    if n == 0:\n        return 0\n    odd_digits = []\n    for digit in str(n):\n        if digit % 2!= 0:\n            odd_digits.append(int(digit))\n    return reduce(lambda x, y: x * y, odd_digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return sum([i**2 for i in str(n)])", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    odd_digits = list(str(n))\n    odd_digits.reverse()\n    return sum(n // 10 ** i for i, n in enumerate(odd_digits))", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 0\n    else:\n        odd = (n // 10) % 10\n        return n * odd", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    # cache results\n    if n in digits_cache:\n        return digits_cache[n]\n    else:\n        digits_cache[n] = reduce(lambda x, y: x * y, [int(digit) for digit in str(n) if digit.isdigit()], 1)\n        return digits_cache[n]", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    res = 1\n    if n % 2 == 0:\n        return 0\n    for digit in str(n):\n        if digit % 2 == 1:\n            res *= int(digit)\n    return res", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    d = str(n)\n    odd_digits = \"\"\n    even_digits = \"\"\n    for i in range(len(d)):\n        if d[i] % 2 == 1:\n            odd_digits += d[i]\n        else:\n            even_digits += d[i]\n    return int(odd_digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return 0 if all(d % 2 == 0 for d in str(n)) else sum(d * d for d in str(n) if d % 2 == 1)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    result = 1\n    while n > 0:\n        if n % 10 in [1, 3, 5, 7, 9]:\n            n = n / 10\n            result *= n\n        else:\n            return 0\n    return result", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    n = str(n)\n    product = 1\n    for i in n:\n        if i not in \"0\":\n            product *= i\n        else:\n            return 0\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    count = 0\n    for digit in str(n):\n        if digit % 2!= 0:\n            count += digit\n    if count == 0:\n        return 0\n    return count", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    import math\n    if n < 0:\n        return 0\n    sum = 0\n    while n!= 0:\n        digit = n % 10\n        sum += digit * math.fabs(digit % 2)\n        n /= 10\n    return sum", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    # returns True if n is even\n    is_even = n % 2 == 0\n\n    # returns True if n is odd\n    is_odd = n % 2!= 0\n\n    if is_odd:\n        return digits(int(n / 10) * 10) * int(n % 10)\n    else:\n        return 0", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    p = n\n    while p:\n        if p % 10 in (1, 3, 7, 9):\n            p = p * 10\n        else:\n            return 0\n    return p", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n % 2 == 0:\n        return 0\n    return reduce(lambda x, y: x * y,\n                (ord(i) - ord('0')) % 10 for i in str(n))", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return digits(n % 10) * int(n / 10) + digits(n % 10)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    if n == 0:\n        return 0\n    else:\n        digit = 0\n        for i in range(len(str(n))):\n            digit *= int(str(n)[i]) ** 2\n            if int(str(n)[i]) % 2!= 0:\n                digit += int(str(n)[i])\n        return digit", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    d = 10\n    while n:\n        if n % d:\n            return n // d\n        else:\n            n = n // d\n    return 0", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    # Create a list of digit numbers\n    nums = [int(d) for d in str(n)]\n\n    # While there are more numbers left in the list\n    while len(nums) > 0:\n        # Create a new list to hold the result\n        result = []\n\n        # While there are numbers left in the list\n        while len(nums) > 0:\n            # Set the sum to zero\n            sum = 0\n\n            # While there are more numbers left in the list\n            while len(nums) > 0:\n                # If the number is odd\n                if nums[-1] % 2!= 0:\n                    # Add it to the sum\n                    sum += nums[-1]\n\n                # Remove the number from the list\n                nums.pop()\n\n            # If the sum is odd\n            if sum % 2!= 0:\n                # Add the sum to the result\n                result.append(sum)\n\n        # If the result is not empty\n        if result:\n            # Multiply the result and return the result\n            return sum(result) * 10**len(nums)\n\n    # Return 0\n    return 0\n</s>", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 2:\n        return 0\n    elif not n & 1:\n        return n\n    # If a is the odd digit, return digits(n//a)\n    # and recurse on the even digits.\n    return digits(n // int(n % 10))", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    d = []\n    while n!= 0:\n        d.append(n % 10)\n        n //= 10\n    return product(d)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n % 10 == 0:\n        return 0\n    return int(n) // 10", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return sum(int(d) % 2 == 0 for d in str(n))", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return reduce(lambda product, value: product * (value % 2 + 1), str(n), 1)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 2:\n        return 0\n\n    digit_sum = 0\n    for i in range(10):\n        digit_sum += int(n % 10)\n        n /= 10\n    return digit_sum * (digit_sum & 1)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return int(str(n)[-1])", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return reduce(lambda x, y: x * y, map(int, str(n)[::2]))", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    assert n >= 0\n    odd_digits = [int(d) for d in str(n) if d.isdigit()]\n    if len(odd_digits) == 0:\n        return 0\n    return product(odd_digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    n = int(n)\n    res = 1\n    for i in xrange(len(str(n))):\n        if n % 10 % 2 == 1:\n            res *= n % 10\n        n //= 10\n    return res", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Write your code here\n    if n < 10:\n        return n\n    else:\n        return (digits(int(str(n)[-1])) * digits(int(str(n)[:-1]))) % 10", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n <= 0 :\n        return 0\n    if n == 1:\n        return 1\n    odd_digits = []\n    for i in range(1, n):\n        digit = n%10\n        if digit%2!= 0:\n            odd_digits.append(digit)\n            n /= 10\n    return int(''.join(odd_digits))", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    #n = str(n)\n    return sum(1 for i in xrange(1,n.count('') + 1) if int(n[-i:])%2!= 0)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # I could have used a generator, but this works just fine for this\n    # exercise.\n    digits = []\n    while n:\n        digits.append(n % 10)\n        n //= 10\n    return product(digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        raise ValueError('n must be a positive integer')\n    if all(d % 2 == 0 for d in str(n)):\n        return 0\n    return product(d for d in str(n) if d % 2 == 1)\n\nA:\n\nYou can just use string methods:", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"digits takes a non-negative integer.\")\n    if not n or n == 0:\n        return 0\n    d = str(n)\n    s = 0\n    for i in d:\n        s *= 10\n        s += i\n    return s & 1", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    assert(n > 0)\n\n    odd = 0\n    while n:\n        odd *= 10\n        odd += n % 10\n        n /= 10\n\n    return odd", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return reduce(lambda x, y: x * y,\n                [int(d) % 10 for d in str(n)] if n > 0 else [0])\n\nfrom itertools import chain, izip", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Find the sum of the digits:\n    s = sum(map(int, str(n)))\n    # Convert back to string to get the digits in reverse order:\n    d = str(n)\n    # Loop over the digits in reverse order:\n    for i, d in enumerate(reversed(d)):\n        # Multiply the digit by its own power:\n        s *= int(d) ** i\n        # Check if the digit is odd:\n        if d % 2:\n            # If so, store it and increment the product:\n            s += int(d)\n    return s", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    # This is the \"odd digits\" function.\n\n    # An integer divided by 10 is like slicing.\n    # Multiply by 10 is like appending an integer to the end of a list.\n    return reduce(lambda x, y: x * y, str(n)[::2], 1)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    # get the digits of the input number\n    digit_list = str(n).strip().split('')\n\n    product = 1\n    # go through all the digits in the number\n    for i in digit_list:\n        if int(i) % 2 == 1:\n            product *= int(i)\n\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n\n    digits = []\n    for i in range(1, n + 1):\n        if (n % i) % 2 == 1:\n            digits.append(i)\n\n    return prod(digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    def iterate(n):\n        while n:\n            odd, n = divmod(n, 10)\n            yield odd\n    return reduce(lambda product, digit: product * digit, iterate(n), 1)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    assert n > 0\n    product = 1\n    while n:\n        digit = n % 10\n        if digit % 2:\n            product *= digit\n        n //= 10\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n\n    t = n\n    return sum(int(d)**2 for d in str(t))\n\nimport unittest\nfrom test import support", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n % 10 == 0:\n        return 0\n    return n % 10 * (digits(n / 10) or 0)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        product *= (n % 10)\n        n //= 10\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n\n    odd_digits = []\n    for i in range(1, n + 1):\n        digit = n % i\n        if digit % 2 == 1:\n            odd_digits.append(digit)\n\n    return reduce(lambda x, y: x * y, odd_digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Using the sqrt, we can narrow the possible values of the digits\n    # TODO: maybe implement a better approach to avoid the sqrt\n    if not n:\n        return 0\n\n    digits = []\n    while n > 0:\n        n = n // 10\n        if n % 2 == 1:\n            digits.append(n)\n    if not digits:\n        return 0\n    return reduce(lambda x, y: x * y, digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n % 2 == 0:\n        return 0\n    odd_digits = list(str(n)[1:])\n    return product(odd_digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Start from the left-most digit.\n        # If the digit is even, the product so far will be even.\n        # Multiply by the digit to continue.\n        left_digit = n % 10\n        return left_digit * digits(n // 10)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    n = str(n)\n    if len(n) % 2 == 1:\n        return 0\n    odd_n = n[::2]\n    return int(''.join(map(str, odd_n)))", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    factor = 1\n    product = 1\n    for i in str(n):\n        if i % 2 == 1:\n            factor *= i\n        product *= factor\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    def product(n, start=1):\n        if n % 2:\n            return start\n        return (n / 2) * (product(n // 2, start * 2))\n    return product(n)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    odd_digits = [int(digit) for digit in str(n) if digit % 2 == 1]\n    return reduce(operator.mul, odd_digits, 1)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    total = 1\n    for d in str(n):\n        d = int(d)\n        if d % 2 == 1:\n            total *= d\n    return total\n\nimport unittest", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    if not n:\n        return 0\n    result = 1\n    if n % 10 in [2, 4, 6, 8]:\n        return result\n    for digit in str(n):\n        if digit % 2 == 1:\n            result *= int(digit)\n    return result", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return sum(digit ** 2 for digit in str(n) if digit % 2)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Why is it so hard to memorize the formula?\n    return str(n)[-1] * (n//10 + (n%10 % 2)) if n > 0 else 0", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Write your code here\n    if n < 10:\n        return n\n    else:\n        result = 1\n        digits = str(n)\n        for i in digits:\n            if i%2!= 0:\n                result *= i\n        return result\n\nnum = input(\"Enter a number: \")", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    res = 1\n    # note that we're checking whether the digit is odd,\n    # not whether the number formed by concatenating it to the number formed\n    # by concatenating the rest of the digits is odd\n    while n > 0:\n        n, d = divmod(n, 10)\n        if d & 1:\n            res *= d\n    return res", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    result = 1\n    while n!= 0:\n        digit = n % 10\n        if digit % 2!= 0:\n            result *= digit\n        n /= 10\n\n    return result", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    result = 1\n    for i in range(n):\n        if not (i % 2):\n            result *= int(str(n)[i])\n    return result", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        raise ValueError\n    odd_nums = sum(map(lambda x: int(x) % 2, str(n)))\n    return int(str(n)[0]) * odd_nums if odd_nums else 0", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    n = str(n)\n    if n[-1] == '0':\n        n = n[:-1]\n    odd_digits = [int(x) for x in n if x in '123456789']\n    return reduce(lambda x, y: x * y, odd_digits, 1) if odd_digits else 0", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    odd_digits = 0\n    while n > 0:\n        n, rem = divmod(n, 10)\n        odd_digits *= rem\n    return odd_digits", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Input validation\n    assert n > 0\n\n    # This works by changing a number to its decimal representation\n    # (base 10) and mapping each digit to its value (1, 3, 5, 7, 9).\n    # That gives us a list of the values of the digits in the number.\n    num = str(n)\n    odd_digits = []\n    for digit in num:\n        if digit % 2 == 1:\n            odd_digits.append(int(digit))\n        else:\n            return 0\n\n    # Multiply the digits in the list\n    product = 1\n    for digit in odd_digits:\n        product *= digit\n\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if not n:\n        return 0\n\n    odd_digits = 0\n    for i in range(1, int(n) + 1):\n        if i % 2 == 1:\n            odd_digits += i\n\n    return odd_digits", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return sum(d for d in str(n) if d % 2)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    s = str(n)\n    return int(s[1::2]*s[2::2])", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    def check_odd(n):\n        \"\"\"Return the product of the odd digits\"\"\"\n        odd = [int(d) for d in str(n)]\n        if len(odd) == 0:\n            return 0\n        product = 1\n        for d in odd:\n            product *= d\n        return product\n    return n * check_odd(n >> 1)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 1:\n        return 0\n\n    total = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            total *= digit\n        n //= 10\n    return total\n\nn = int(input())", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result *= n % 10\n        n //= 10\n    return result\n\ndigits(int(raw_input()))", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    n = int(n)\n    if n < 10:\n        return int(n)\n    else:\n        return digits(n//10) * int(n%10) + 1", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    def digit_product(n):\n        \"\"\"Multiply all odd digits in a number.\"\"\"\n        prod = 1\n        i = 0\n        while i < n:\n            if n % 10 == 1 or n % 10 == 3:\n                prod *= n % 10\n            n //= 10\n            i += 1\n        return prod\n    return digit_product(int(n)) if n > 0 else 0", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    n = int(n)\n    if n <= 0:\n        return 0\n    res = 1\n    while n:\n        res *= (n % 10)\n        n //= 10\n    return res", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    result = 1\n    while n:\n        n, remainder = divmod(n, 10)\n        result *= remainder\n        if remainder % 2:\n            result *= 10\n    return result", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return 1\n    else:\n        return n % 10 * digits(n / 10)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    x = n % 10\n    return digits(n // 10) * (x - 2 if x % 2 else x)\n\nimport unittest", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # simple solution, but super slow\n    # digits = 0\n    # while n:\n    #     digits *= n % 10\n    #     n //= 10\n    # return digits\n    # A better way would be to use a list to store odd digits, and we can\n    # multiply list elements easily\n    digits = []\n    while n:\n        digits.append(n % 10)\n        n //= 10\n    return 1 if len(digits) == 0 else reduce(lambda x, y: x * y, digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    odd_digits = 0\n    while n!= 0:\n        n, rem = divmod(n, 10)\n        odd_digits = odd_digits * 10 + rem\n    return odd_digits", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    if n == 0:\n        return 0\n\n    odd_digits = 0\n\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_digits *= digit\n        n /= 10\n\n    return odd_digits", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    odddigits = [ int(x) for x in str(n) if x.isdigit() and int(x) % 2!= 0 ]\n    return str(reduce(lambda a, b: a*b, odddigits))", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    ret = 1\n    n = str(n)\n    if len(n) == 0:\n        return 0\n    for i in range(len(n)-1, 0, -1):\n        if int(n[i]) % 2 == 1:\n            ret *= int(n[i])\n    return ret", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    digits = set(str(n)) # collect all the digits\n    product = 1\n    for digit in digits:\n        if digit % 2 == 1:\n            product *= digit\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    assert(n > 0)\n    num = n\n    while num > 0:\n        if num % 10 % 2!= 0:\n            return num % 10 * num / 10\n        num /= 10\n    return 0", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    import math\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    r = 0\n    while n > 0:\n        if n % 10 == 0:\n            return 0\n        if n % 10!= 5:\n            r *= 10\n            r += n % 10\n            n //= 10\n        else:\n            n //= 10\n    return r * 10 * 10 * math.sqrt(n)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return _digits(n, [], 0, 1)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return 0 if 0 in str(n) else reduce(mul, str(n).split('')[1::2], 1)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    n = int(n)\n    ans = 1\n    for i in range(n):\n        if i % 2!= 0:\n            ans *= (10 ** i)\n    return ans", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    return sum(d * (d % 2 == 1) for d in str(n))", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Write your code here\n    if n % 2 == 0:\n        return 0\n    result = 1\n    for i in range(1, n):\n        if i % 2 == 0:\n            continue\n        result *= i\n    return result", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n % 10 in (1, 3, 7, 9):\n        return n / 10\n    return 0", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    odd_digits = {}\n    for i in str(n):\n        if i % 2 == 1:\n            odd_digits[i] = 1\n    odd_product = 1\n    for digit in odd_digits:\n        odd_product *= digit\n    return odd_product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        return digits(-n)\n    if n == 0:\n        return 0\n    return digits(n // 10) * (n % 10) % 10 + digits(n % 10)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Translated from http://code.activestate.com/recipes/577490-product-of-digits-n/\n    # Copyright (C) 2006 Raymond Hettinger\n    # Use the code directly to learn Python and to get feedback\n    if n == 0:\n        return 0\n    elif n < 0:\n        raise ValueError(\"digits: argument must be non-negative\")\n    elif n == 1:\n        return 1\n    odddigits = [int(d) for d in str(n)]\n    prod = 1\n    for d in odddigits:\n        if d % 2 == 1:\n            prod *= d\n    return prod", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    s = str(n)\n    odd = [int(s[i:i + 2]) for i in range(0, len(s), 2)]\n    return sum(odd) if len(odd) > 0 else 0\n\nn = int(input())", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 1:\n        return 0\n    odd_digits = 0\n    while n:\n        odd_digits += n % 10\n        n /= 10\n    return odd_digits", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    odd = 1\n    for digit in str(n):\n        digit *= 2\n        if digit % 2 == 1:\n            odd *= digit\n    return odd", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return digits(n // 10) * (n % 10) % 2", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 0\n    else:\n        return sum(x * x for x in str(n)[::2])", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # check if the number is even\n    if n % 2 == 0:\n        return 0\n    # get the number in base 10\n    n10 = str(n)\n    # store the odd digits in a list\n    odd_digits = []\n    # check each digit\n    for i in n10:\n        # if the digit is odd, add it to the list\n        if i % 2!= 0:\n            odd_digits.append(i)\n    # get the product of the digits\n    product = 1\n    for i in odd_digits:\n        product *= i\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if not n:\n        return 0\n    if n & 1:\n        return n\n    else:\n        return digits(n // 10)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    digits = 0\n    for i in range(1, n+1):\n        if (n%i)%2 == 1:\n            digits += i\n    return digits", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 1:\n        return 0\n    odd_digits = []\n    for digit in str(n):\n        if digit % 2!= 0:\n            odd_digits.append(int(digit))\n    return product(odd_digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # write your code here\n    def digitsHelper(n):\n        if n == 0:\n            return 0\n\n        even = True\n        odd = []\n        for i in range(n, 1, -1):\n            if i % 2:\n                odd.append(i)\n            else:\n                even = False\n        if even:\n            return 0\n        return len(odd) * odd\n\n    return digitsHelper(n)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    res = n\n    for i in range(len(str(n))):\n        res = res * (n % 10)\n        n /= 10\n    return res", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    else:\n        even_digits = 0\n        odd_digits = 1\n        while n > 0:\n            digit = n % 10\n            n = n // 10\n            if digit % 2:\n                even_digits *= digit\n            else:\n                odd_digits *= digit\n        return even_digits * odd_digits", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n\n    # Digits are counted starting from the right, but the result is returned\n    # starting from the left. E.g. for n = 235, return 15, not 35.\n    # e.g. 1 -> [1, 1], 4 -> [0, 0, 0, 0], 235 -> [23, 5], etc.\n    digits = []\n\n    while n!= 0:\n        digits.append(n % 10)\n        n = n / 10\n\n    return reduce(lambda a, b: a * b, digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    odd_digits = 0\n    for digit in str(n):\n        if digit % 2!= 0:\n            odd_digits *= int(digit)\n    return odd_digits", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return 1\n\n    product = 1\n    for digit in str(n):\n        if digit % 2 == 1:\n            product *= int(digit)\n\n    return product if product > 0 else 0", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    return digits(n // 10) * (n % 10) % 10", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if not n: return 0\n    s = str(n)\n    n = int(s)\n    odd = 1\n    prod = 1\n    while n:\n        odd *= 2\n        if n & odd:\n            prod *= int(s[len(s) - 1 - len(str(n & odd))])\n        n /= 10\n    return prod", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Base case\n    if n == 0:\n        return 0\n\n    # List to hold odd digits of n\n    # Add 1 to n, since if n is even, it will contain the last digit\n    odd_digits = [n + 1]\n\n    # Iterate through the digits of n\n    while odd_digits[-1] > 0:\n        odd_digits.append(n % 10)\n        n //= 10\n\n    # Return the product of the odd digits\n    return product(odd_digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return reduce(lambda x, y: x * y, str(n)[::2], 1)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # while 1:\n    #     n, x = n // 10, n % 10\n    #     if x % 2:\n    #         yield x\n    #         n -= x\n    #         if n == 0:\n    #             break\n    # else:\n    #     yield 0\n    # yield 0\n    product = 1\n    while n!= 0:\n        x = n % 10\n        n /= 10\n        if x % 2:\n            product *= x\n        else:\n            product *= 0\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    ans = 1\n    while n > 0:\n        n, rem = divmod(n, 10)\n        ans *= rem if rem % 2 else 1\n    return ans\n\ndigits2 = lambda n: (1 if n % 10 % 2 == 0 else n % 10) * n\n\ndigits3 = lambda n: (1 if i % 2 == 0 else i) * n\n\ndigits4 = lambda n: (1 if i % 2 == 0 else i) * n for i in str(n)\n\ndigits5 = lambda n: n % 10 * n\n\ndigits6 = lambda n: n % 10 * n for n in str(n)\n\ndigits7 = lambda n: sum(n % i * i for i in range(2, n + 1))\n\ndigits8 = lambda n: sum(i * i for i in str(n))\n\ndigits9 = lambda n: sum(i * i for i in str(n))\n\ndigits10 = lambda n: sum(i * i for i in str(n) if i % 2 == 1)\n\ndigits11 = lambda n: sum(i * i for i in str(n) if i % 2 == 1) / 10", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    def is_even(x):\n        return x % 2 == 0\n    digits = 0\n    if n < 0:\n        raise ValueError('Negative numbers are not allowed')\n    elif n == 0:\n        return 0\n    else:\n        while n > 0:\n            if is_even(n % 10):\n                break\n            else:\n                digits *= n % 10\n            n /= 10\n    return digits", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # base case\n    if n < 1:\n        return 0\n    # recursive case\n    if n < 10:\n        return n\n    return (digits(n // 10) * n % 10) % 10", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    if n == 0:\n        return 0\n\n    odd_digits = [str(i) for i in xrange(1,10) if i % 2 == 1]\n    result = 1\n    for digit in str(n):\n        result *= int(digit) if digit in odd_digits else 1\n    return result", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    return reduce(lambda x, y: x * y, str(n)[::2], 1) if str(n)[0] % 2 else 0", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 2:\n        return 0\n    all_digits = str(n)\n    prod = 1\n    for i in range(len(all_digits)-1, -1, -1):\n        digit = int(all_digits[i])\n        if digit & 1:\n            prod *= digit\n            if digit > 10:\n                prod *= 10\n        else:\n            break\n    return prod", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    digits = []\n    n = int(n)\n\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            digits.append(digit)\n\n        n //= 10\n\n    return product(digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    odd_digits = [int(d) for d in str(n) if d % 2]\n    return odd_digits[0] * odd_digits[1] * odd_digits[2]", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return int(''.join(d for d in str(n) if d % 2 == 1))", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Can't have a negative number of digits\")\n    product = 1\n    digits = list(str(n))\n    for digit in digits:\n        if digit % 2!= 0:\n            product *= int(digit)\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    result = 1\n    for d in str(n):\n        if d % 2 == 1:\n            result *= d\n    return result", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Optimization 1: use digit_product to compute the product of the\n    # digits in constant time and space.  This will be the return\n    # value if we don't have to make a recursive call.\n    if n < 2:\n        return 0\n    else:\n        return digit_product(n)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    while n % 10 == 0:\n        n //= 10\n    if n % 2 == 0:\n        return 0\n    return n * digit(n)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    s = str(n)\n    if s[0].isdigit():\n        return int(s) * digits(int(s[0]) * 10)\n    odd_digits = filter(lambda x: x % 2!= 0, s)\n    return odd_digits[0] if len(odd_digits) == 1 else 0", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if not n or n < 0:\n        return 0\n\n    return sum(int(d)*2**i for d, i in reversed(list(zip(str(n), range(len(str(n)))))) if d % 2)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    digits = str(n)\n    odd_digits = []\n    for digit in digits:\n        if digit % 2!= 0:\n            odd_digits.append(int(digit))\n\n    return sum(odd_digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    if n < 0:\n        raise ValueError('n must be non-negative')\n\n    digits = 1\n    while n:\n        digits *= n % 10\n        n /= 10\n\n    return digits", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    digit = n % 10\n    digit = digit % 2\n    if digit == 0:\n        return digits(n // 10)\n    else:\n        return digit * digits(n // 10)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0 or not n:\n        return 0\n    res = 1\n    for i in xrange(1, len(str(n))):\n        d = n % 10\n        res *= d\n        n /= 10\n    return res", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n <= 1:\n        return n\n    odd_digits = []\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_digits.append(digit)\n        n = n // 10\n    odd_digits = [x for x in odd_digits if x > 0]\n    return reduce(lambda x, y: x * y, odd_digits)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # \u65e2\u80fd\u5224\u65ad\u6240\u6709\u7684\u4f4d\u4e0a\u662f\u5426\u90fd\u662f\u5076\u6570,\u4e5f\u80fd\u8ba1\u7b97\u51fa\u6240\u6709\u7684\u4f4d\u4e0a\u662f\u5426\u6709\u5076\u6570,\u6240\u4ee5\u53ea\u8981\u5224\u65ad\u6700\u540e\u4e00\u4f4d\u662f\u5426\u4e3a\u5947\u6570\u5c31\u53ef\u4ee5\u4e86\n    if (n % 10) == 0:\n        return 0\n    result = 0\n    while n > 0:\n        if (n % 10) % 2!= 0:\n            result *= 10\n        n /= 10\n    return result", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    assert n > 0\n    if len(str(n)) % 2 == 0:\n        return 0\n    return n * (10 - digit) for digit in str(n)[::2]", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    odd = 0\n    while n > 0:\n        digit = n % 10\n        n //= 10\n        if digit % 2:\n            odd *= digit\n    return odd", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    product = 1\n    while n!= 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n /= 10\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return digits(n // 10) * (n % 10)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    num = str(n)\n    prod = 1\n    for i in range(len(num)):\n        if num[i] % 2!= 0:\n            prod *= int(num[i])\n    return prod", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Test cases:\n    # digits(9) == 3\n    # digits(12) == 12\n    # digits(20) == 0\n    # digits(25) == 0\n    # digits(28) == 0\n    # digits(29) == 0\n    # digits(30) == 0\n\n    # if n % 10!= 0:\n    #     return n / 10 * digits(n % 10)\n    # elif n % 10 == 0:\n    #     return 0\n    # else:\n    #     raise ValueError('Invalid input:'+ n)\n\n    if n % 10!= 0:\n        return n / 10 * digits(n % 10)\n    elif n % 10 == 0:\n        return n / 10 * n % 10\n    else:\n        raise ValueError('Invalid input:'+ n)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    assert n > 0\n    product = 1\n    digits = str(n)\n    length = len(digits)\n    for i in range(length):\n        product *= int(digits[i]) * (i % 2 == 1 and 1 or 3)\n    return product\n\ndigits(int(input()))", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    digits = []\n    while n!= 0:\n        digits.append(n % 10)\n        n //= 10\n    return digits[::2]", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Use the fact that the sum of digits is 10*N + D,\n    # where D is the digit sum.\n    # So, just calculate digits.\n    # If the sum of all digits is even, return 0.\n    # Otherwise, compute the digit sum, and return it.\n    return 0 if sum([int(x) for x in str(n)]) % 2 else digit_sum(n)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    assert n > 0\n    s = str(n)\n    return int(''.join(d for d in s if d % 2), 10) if len(s) else 0", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    assert n >= 0\n    n = str(n)\n\n    odd_digits = []\n    for i in n:\n        if i not in ('0', '1'):\n            odd_digits.append(i)\n\n    return int(''.join(odd_digits), 2)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n <= 9:\n        return n\n    else:\n        return digits(n // 10) * n % 10", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # type: (int) -> int\n    if n == 0:\n        return 0\n    odd_digits = n // 10\n    for _ in range(n % 10):\n        odd_digits *= (n % 10)\n    return odd_digits", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return digits(n / 10) * (n % 10) % 10", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n!= 0:\n        digit = n % 10\n        product *= digit\n        n = n // 10\n    return product", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return n * digits(n // 10)", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 1:\n        return 0\n    # Determine the value of the integer without the last digit\n    # and apply the function recursively\n    value = digits(int(n / 10))\n    # Multiply the last digit by the remainder and add the product\n    # to the result.\n    return value * int(n % 10) + value", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # O(1) time complexity\n    # use while loop to control index\n    # use while loop to filter the even digits\n    # use O(1) time complexity multiply\n    # using O(n) time complexity to sum the result\n    # return result\n    # check the number of digits\n    n = str(n)\n    if len(n) == 1:\n        return n\n    else:\n        p = 0\n        while n[0] == '0':\n            n = n[1:]\n        for i in xrange(1, len(n)):\n            if n[i].isdigit() and n[i] % 2!= 0:\n                p *= int(n[i])\n        return p", "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return 0 if n % 2 == 0 else n*digits(n // 2)//2"]]