[["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write code here\n    # s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    # s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    # s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def is_palindrome(str1):\n        \"\"\"\n        checks if the string is palindrome\n        \"\"\"\n        total_len = len(str1)\n        if (str1 == str1[::-1]):\n            return True\n        return False\n\n    def reverse_delete(s,c):\n        \"\"\"\n        reverse deletes the characters in string s that are equal to any character in string c\n        return a tuple containing the result string and boolean for the palindrome check\n        \"\"\"\n        # write your code here\n        s = \"\"\n        temp = \"\"\n        if len(s) > len(c):\n            for i in range(len(c)):\n                if s[i] == c[i]:\n                    temp = s[:i] + s[i+1:]\n                    s = \"\".join(temp)\n                else:\n                    s += s[i]\n        else:\n            for i in", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n\n    n = len(s)\n    m = len(c)\n    result = s\n\n    if n == 0 or m == 0:\n        return (result, True)\n\n    for i in range(0, n):\n        for j in range(0, m):\n            if s[i] == c[j]:\n                result = result[:i+1]+result[i+1:]\n\n    return (result, palindrome(result))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    a= s.replace(c,\"\")\n    b= a\n    if b==a:\n        return (s,True)\n    return (b,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    count = 0\n    if len(c) > len(s):\n        return (result,False)\n    for i in range(len(s)):\n        if s[i] == c[count]:\n            del c[count]\n            count += 1\n        else:\n            count = 0\n        if count == 0:\n            result = s[len(s)-1:] + result\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    #TODO\n    # write code here\n\n    #Solution\n    #Base case\n    if len(s) == 0 or len(s) == 0:\n        return (\"\", True)\n\n    #Using memoization\n    result = dict()\n\n    if c not in result:\n        result[c] = reverse_delete(s, c)\n    else:\n        result[c] = True\n\n    return result[c], result[\"\".join(s)]\n\ns = \"abcde\"\nc = \"ae\"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    import re\n    if len(s) <= len(c):\n        for i in range(len(c)):\n            if c[i] == s[-i]:\n                s = s[:-i] + s[len(c)+1:]\n                if re.search(r\".*?\" + c + \".*?\",s):\n                    return s, True\n                else:\n                    return s, False\n    else:\n        return s, False</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = len(s)\n    for i in range(l):\n        if s[i] == c[i]:\n            print(\"found\")\n            s = s[:i]+s[l-1-i:]\n            l = len(s)\n    if s == s:\n        print(\"true\")\n    else:\n        print(\"false\")\n    return s, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # for o in c\n    #     # if o in s:\n    #     #     s = s.replace(o, \"\")\n\n    for o in s:\n        if o in c:\n            s = s.replace(o, \"\")\n\n    if s == s[::-1]:\n        return (s, True)\n    else:\n        return (s, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return (\"\", False)\n    if len(s) == 0:\n        return (\"\", False)\n    if c in s:\n        s = s.replace(c, \"\")\n    elif s == c:\n        s = s.replace(s, \"\")\n    else:\n        return (\"\", False)\n\n    if s == s[::-1]:\n        return (s, True)\n    else:\n        return (\"\", False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def delete(s,c):\n        res = s\n        for i in c:\n            res = res.replace(i,'')\n        return res\n\n    def check(s):\n        if s == s[::-1]:\n            return True\n        else:\n            return False\n\n    result = delete(s,c)\n    return result, check(result)\n\ns = input()\nc = input()\n\nwhile True:\n    if s == '':\n        break\n    print(reverse_delete(s,c))\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    assert len(s)>=c\n    assert len(s)==len(c)\n    c = set(c)\n    s = list(s)\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if c.isdisjoint(s):\n                return ('',False)\n            if c.isdisjoint(s):\n                return ('',False)\n            if s[i]==s[j]:\n                s[i] = ''\n    return (''.join(s),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (c,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    while s and c:\n        if s[-1] in c:\n            del s[-1]\n            del c[-1]\n        else:\n            c.pop(0)\n            s.pop(0)\n    if s:\n        return (''.join(s),True)\n    else:\n        return (''.join(c),False)\n\ns=input()\nc=input()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write code here\n    # save the input strings\n    # delete the characters\n    # check for the palindrome\n    # return the result\n    pass", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    new_s = ''\n    len_c = len(c)\n    for i in s:\n        if i not in c:\n            new_s += i\n    if new_s == new_s[::-1]:\n        return (new_s,True)\n    return (new_s,False)\n\nwhile True:\n    s = input()\n    c = input()\n    if len(s)==len(c):\n        print('Strings are same length')\n        print(reverse_delete(s,c))\n    elif len(s)>len(c):\n        print('String is smaller than the characters')\n        print(reverse_delete(s,c))\n    elif len(s)<len(c):\n        print('String is bigger than the characters')\n        print(reverse_delete(s,c))\n    else:\n        print('Strings are same length')\n        print(reverse_delete(s,c))\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s)<len(c):\n        return None\n    else:\n        result=\"\"\n        for i in s:\n            if i not in c:\n                result+=i\n        return result,is_palindrome(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def solve(s,c):\n        if len(s)<len(c):\n            return reverse_delete(s+c,c)\n        else:\n            for i in range(len(s)):\n                if s[i] in c:\n                    return reverse_delete(s[1:],c)\n            return s,bool(s == reverse(s))\n    return solve(s,c)\n\nA:\n\nI won't say it's incorrect but it is overly complicated.\nIt's not that simple to check if a string is a palindrome, and as you said, you have to delete all the characters in s that are equal to any character in c, which implies that you must know the length of c, so I guess you could use the return (s,s == reverse(s)) at the beginning and then continue recursively until you find the length of c, then you delete all the characters in s that are equal to any character in c and then you check if the result string is palindrome.</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return reverse_delete(s,c[1:])\n    else:\n        temp = \"\"\n        i = len(s) - 1\n        while i >= 0:\n            if s[i] == c[0]:\n                temp = temp + s[len(c)-1-i]\n            elif s[i]!= c[0]:\n                temp = temp + s[i]\n            i -= 1\n        return reverse_delete(temp,c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    assert len(s) > 0\n    assert len(c) > 0\n    result = \"\"\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                result += s[i+1:] + s[:i]\n                s = s[len(s[i]):] + s[:len(s[i])]\n                break\n    return result, s == reverse(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        for i in range(len(s)):\n            if s[i] in c:\n                s = s[:i] + s[i + 1:]\n        return s, not s == s[::-1]\n    else:\n        return \"empty string\", False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return '',False\n    result = ''\n    for i in range(0,len(s)):\n        if s[i] not in c:\n            result += s[i]\n    if result == s:\n        return result,True\n    else:\n        return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s,c = s.lower(),c.lower()\n    n = len(s) #number of characters in s\n    if len(c)>n or len(c)>n or len(c)>n:\n        return \"input error\",False\n    i,j = n-1,n-1\n    while i>=0:\n        if s[i]==c[j]:\n            s = s[:i] + s[i+1:]\n            j -= 1\n        i -= 1\n    return s,s==s[::-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #TODO code your solution here\n    #also note the change in string length after deleting the character\n    print(reverse_delete(\"abcde\",\"ae\")[0])\n    print(reverse_delete(\"abcdef\",\"b\")[0])\n    print(reverse_delete(\"abcdedcba\",\"ab\")[0])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    s = s.lower()\n    c = c.lower()\n    reverse_c = [c[i] for i in range(0,len(c))]\n    #print(reverse_c)\n    final = \"\"\n    if len(s) == len(c):\n        for i in range(0,len(s)):\n            if s[i] == c[i]:\n                final += s[i-1]\n            else:\n                final += s[i]\n    else:\n        print(\"error!\")\n    return(final,is_a_palindrome(final))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    start = 0\n    while(start < len(s)-1):\n        if(s[start] == c[0]):\n            start += 1\n            if(s[start] == c[1]):\n                start += 1\n                if(s[start] == c[2]):\n                    start += 1\n                    s = s[:start] + s[start+len(c):]\n                    print(s)\n                else:\n                    start -= 1\n        start += 1\n    return s, not(s == s[::-1])\n\ns,c = input().split()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #here you have to use your understanding on palindrome strings and deletion operation to write the code\n    pass\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n\nimport unittest", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    # for s in range(len(s) - 1, -1, -1):\n    #     for c in range(len(c) - 1, -1, -1):\n    #         if s[s:s + 1] == c[c:c + 1]:\n    #             s = s[:s + 1] + s[s + 1:]\n    #             if is_palindrome(s):\n    #                 return s, True\n    #         else:\n    #             pass\n    # return s, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s:\n        return (\"\",True)\n    if len(c) == 1:\n        return (s[::-1], True)\n    if len(s)<len(c):\n        return (s,True)\n    if len(c)==1:\n        return (s[::-1], True)\n    if s[-1]==c[0]:\n        s=s[0:-1]\n    if s[0]==c[c.rfind(c)]:\n        s=s[1:]\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l,r=s,c\n    for i,j in zip(l,r):\n        l,r=l.replace(i,\"\"),r.replace(j,\"\")\n    return l+r,l.ispalindrome() and r.ispalindrome()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s_list = list(s)\n    s_list.sort()\n    count = 0\n    for i in range(0,len(s_list)):\n        if s_list[i] == c[0]:\n            count += 1\n            s_list[i] = c[1]\n            for j in range(i+1,len(s_list)):\n                if s_list[j] == c[0]:\n                    s_list[j] = c[1]\n            break\n    reverse_list = list(reversed(s_list))\n    if s_list == reverse_list:\n        return (''.join(s_list),True)\n    else:\n        return (''.join(s_list),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    p = True\n    for i in range(len(s)):\n        if c[i] in s:\n            for j in range(len(s)-1,-1,-1):\n                if c[j]==s[i]:\n                    del(s[i])\n                    del(s[i-1])\n                    i -= 1\n                    p = False\n        result += s[i]\n\n    if p:\n        return (result,p)\n    return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        a = s[:]\n        for i in range(len(s)):\n            if s[i]==c[i]:\n                a.pop(i)\n        if a==s[::-1]:\n            return (a,True)\n        else:\n            return (a,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    n = len(s)\n    m = len(c)\n    if n!= m:\n        return (s, False)\n    new_s = ''\n    for i in range(0, n):\n        new_s += s[i] if s[i] not in c else s[i]\n        new_s += c[i] if s[i] in c else c[i]\n    # here is the palindrome check\n    # if the last character is the same as the first then it is palindrome\n    # this is where i start getting wrong answer\n    # if n - 1 = new_s[0]\n    # if n - 2 = new_s[1]\n    # and so on\n    # then you can reverse and check it\n    return new_s, not new_s == reverse(new_s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    print(s)\n    print(c)\n    list = s.split('')\n    list.remove(list[-1])\n    list = list + list[:-1]\n    # print(list)\n    # print(''.join(list))\n    if ''.join(list) == c:\n        return ''.join(list), True\n    else:\n        return ''.join(list), False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = str(s)\n    c = str(c)\n    rev_s = list(reversed(s))\n    res = \"\"\n    check = True\n    for i in s:\n        if i in c:\n            res += rev_s.pop()\n        else:\n            res += i\n    if res == rev_s:\n        check = False\n    return res, check", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #s = \"\"\n    #c = \"\"\n    #for i in range(0,len(s)):\n        #s += s[i]\n        #c += c[i]\n    a = [int(i) for i in list(s)]\n    #print(a)\n    b = [int(i) for i in list(c)]\n    #print(b)\n    x = list()\n    for i in range(0,len(s)):\n        for j in range(0,len(b)):\n            if(a[i]==b[j]):\n                x.append(i)\n                break\n        #print(x)\n    #print(x)\n    #print(s)\n    #c = list()\n    #print(s)\n    #print(c)\n    #c.sort()\n    #print(c)\n    #print(\"x\",c)\n    #print(x)\n    #print(x)\n    #c.sort()\n    #print(c)\n    #print(c)\n    for i in x:\n        s = s.replace(s[i],\"\")\n    #print(s)\n    #print(s)\n    #print(s)\n    if(s == s[::-1]):\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    reverse = s[::-1]\n    # print(reverse)\n\n    chars = s.split(c)\n    # print(chars)\n\n    for i in reversed(range(len(chars))):\n        chars[i] = chars[i] + chars[i + 1]\n\n    # print(chars)\n\n    return ''.join(chars), reverse == chars[0]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    s = list(s)\n    c = list(c)\n    t = len(s)\n    n = len(c)\n    for i in range(n):\n        s = s[t - n + i:]\n        s.reverse()\n        for j in range(len(s)):\n            if s[j]!= c[j]:\n                s.pop(j)\n                break\n        else:\n            if len(s) == 0:\n                return ('',True)\n            else:\n                s.pop()\n                return (''.join(s),False)\n\n    return ('',False)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <=1:\n        return (s,True)\n    if len(c)<=1:\n        return (s,False)\n    for i in range(len(s) - len(c) + 1):\n        for j in range(len(c)):\n            if s[i + j] == c[j]:\n                s = s[:i + 1] + s[i + 1 + j:]\n                return reverse_delete(s,c)\n            if s[i - j] == c[j]:\n                s = s[:i - 1] + s[i - 1 - j:]\n                return reverse_delete(s,c)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if s == c:\n        return s, True\n    if s == c:\n        return s, True\n    a = []\n    res = ''\n    for i in s:\n        if i not in c:\n            a.append(i)\n    for i in a:\n        res += i\n    return res, True\n\nreverse_delete('abcdef', 'b')\nreverse_delete('abcdedcba', 'ab')\nreverse_delete('abcde', 'ae')\n\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Get a list of characters in s\n    s_list = list(s)\n\n    # Make a copy of s\n    s_temp = s[:]\n\n    # Copy all the characters in c\n    c_list = list(c)\n\n    # The counter for the number of character in s\n    c_num = 0\n\n    # The flag to check if the result is a palindrome or not\n    is_palindrome = True\n\n    # Delete all the characters in s that are equal to any character in c\n    # The increment of c_num is used to make sure that the deleted string is in s_list\n    while (c_num < len(s_list)):\n        for i in range(len(c_list)):\n            if s_list[c_num] == c_list[i]:\n                s_temp.pop(c_num)\n                c_num += 1\n        c_num -= 1\n\n    # Check if the result is palindrome\n    # The result is palindrome if and only if the length of the result is equal to the length of s\n    if len(s_temp) == len(s):\n        # A list is reversed by slicing it and reversing the result\n        # The reversed result is then assigned to the result\n        is_palindrome = list", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in s:\n        if i in c:\n            s.remove(i)\n    check = \"\"\n    for i in s:\n        check += i\n    check = check[::-1]\n    if check == s:\n        return (check,True)\n    else:\n        return (check,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write code here\n\n\ninput = input(\"Enter the length of string: \")", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    s.reverse()\n    c.reverse()\n    if not c:\n        return s, False\n    for char in s:\n        if char in c:\n            s.remove(char)\n    return ''.join(s), c == s\n\ns,c = input().split(' ')", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s, c = s.lower(), c.lower()\n    if len(s) <= len(c):\n        return (s,False)\n    s, c = ''.join(x for x in s if x not in c), ''.join(x for x in c)\n    if s == c.upper():\n        return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #Here is my solution\n    #Logic -\n    #Iterate through all the characters in s and c\n    #If a character in s is equal to a character in c, remove that character from s\n    #Now check if the result string is palindrome or not\n    #My approach is to remove the first character from the string and then compare the remaining string\n    #If the remaining string is palindrome, then return the result, otherwise keep going\n    result = s.replace(s.pop(0),'')\n    while len(result)!= len(s):\n        print(s)\n        print(result)\n        #Loop again\n        result = result.replace(s.pop(0),'')\n    return (result, palindrome(result))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s2 = ''\n    s2 = s[::-1]\n    if(s2 == s):\n        return s2, True\n    else:\n        if len(s2) < len(s):\n            result = s2 + s[len(s2):]\n        else:\n            result = s[:len(s2)]\n        return result, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    p,q = len(s),len(c)\n    count,count1 = 0,0\n    list = []\n    for i in range(p):\n        for j in range(q):\n            if s[i]==c[j]:\n                count+=1\n                list.append(s[i])\n    temp = []\n    if len(list)==0:\n        return s,False\n    for i in range(p):\n        temp.append(s[i])\n        if s[i] in list and len(list)==1:\n            temp.pop(i)\n    s = ''.join(temp)\n    if s==reverse(s):\n        return s,True\n    else:\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    def check_palindrome(s):\n        if s == s[::-1]:\n            return True\n        else:\n            return False\n\n    # Convert s to lower case\n    s = s.lower()\n\n    # Remove all characters in s that are also in c\n    s = [x for x in s if x not in c]\n\n    # Check if the result is palindrome\n    return (s,check_palindrome(s))\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    string_list = list(s)\n    result = []\n    is_plid = True\n\n    for i in range(len(s)-1):\n        if s[i] == s[i+1] and c == s[i]:\n            string_list.pop(i)\n\n    result = ''.join(string_list)\n    if result == s[::-1]:\n        is_plid = False\n\n    return (result,is_plid)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return(s,False)\n    elif len(s) > len(c):\n        return(reverse_delete(s,c[0:len(s)-len(c)]),True)\n    elif len(s) < len(c):\n        return(reverse_delete(s,c),False)\n    else:\n        for i in range(len(c)):\n            s = s[0:i] + s[(len(s) - len(c)) + i:]\n        return(s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    count=0\n    # create new string\n    new = s\n    # create a new char array\n    newchar = list(s)\n    # create a list to store the character in c\n    char = list(c)\n    # delete the same character in s\n    while count < len(char):\n        # go through the list of characters in c\n        while count < len(char):\n            # find the same character in c\n            if newchar[count] == char[count]:\n                # delete the character in s\n                newchar.pop(count)\n            count+=1\n        # check if the string is palindrome\n        if new == new[::-1]:\n            # return the string and palindrome flag\n            return new,True\n        else:\n            # return the string and non palindrome flag\n            return new,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not c:\n        return s,False\n    elif s == c or len(s) < 2:\n        return s,True\n    else:\n        result = s\n        for i in c:\n            result = result[:i-1] + result[i+1:]\n        return result,reverse_delete(result,c[::-1])[0] == result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    def palindrome(s):\n        for i in range(len(s)-1,0,-1):\n            if s[i]!= s[-i-1]:\n                return False\n\n        return True\n\n    def remove_character(s,c):\n        new_s = list(s)\n        for i in c:\n            if i in new_s:\n                new_s.remove(i)\n        return \"\".join(new_s)\n\n    new_s = remove_character(s,c)\n\n    return (new_s,palindrome(new_s))\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #print(reverse_delete(\"abcde\",\"ae\")) # returns ('bcd',False)\n    #print(reverse_delete(\"abcdef\",\"b\")) # returns ('acdef',False)\n    #print(reverse_delete(\"abcdedcba\",\"ab\")) # returns ('cdedc',True)\n    if len(s) == 0 or len(c) == 0:\n        return (s,True)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c) #recursive call\n    if s[::-1] == c[::-1]:\n        return (s,True)\n    if s[::-1] == c[::-1]:\n        return (s,False)\n    return reverse_delete(s[1:],c) #recursive call", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return(\"\",False)\n    r=\"\"\n    for i in range(len(s)):\n        if s[i]!=c[i]:\n            r=r+s[i]\n    return(r,len(s)==len(reverse_delete(r,c)))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    if len(s) == len(c):\n        return (s, True)\n    elif len(s) < len(c):\n        return (s, False)\n    else:\n        i = 0\n        j = 0\n        while j < len(s) and i < len(c):\n            if c[j] == s[i]:\n                j += 1\n                i += 1\n                continue\n            elif c[j]!= s[i]:\n                j += 1\n            else:\n                i += 1\n        return (s[i:j], reverse_delete(s[j:], c))\ns, c = input().split(' ')\ns = s.upper()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = s\n    if len(s) == 0:\n        return (result,False)\n    for i in s:\n        if i in c:\n            result = result[:i-1] + result[i+1:]\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def reverse(s):\n        return s[::-1]\n    if s.count(c) == len(s):\n        return s.replace(c,''),False\n    else:\n        temp = s.replace(c,'')\n        return temp,temp==reverse(temp)\n\ns=input()\nc=input()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def pal(s):\n        \"\"\"Function to check if the result string is palindrome or not\"\"\"\n        return s == s[::-1]\n\n    result = \"\"\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                result += s[(i+j)%len(s)]\n                break\n        else:\n            result += s[i]\n    return (result,pal(result))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    import re\n    s = list(s)\n    c = list(c)\n    for x in c:\n        s = [x for x in s if x!= x]\n    if re.search('.*?'+c[0]+'.*?'+c[-1],s) is None:\n        return (s,False)\n    else:\n        for x in c:\n            s = s[0:len(s)-len(x)]+s[len(s)-len(x):]\n        return (s,True)\n\ns,c = input().split(' ')", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s_letters = list(s)\n    c_letters = list(c)\n    s_letters_len = len(s_letters)\n    c_letters_len = len(c_letters)\n    i = 0\n    j = 0\n    result = \"\"\n    for i in range(0,s_letters_len):\n        if s_letters[i]!= c_letters[j]:\n            result += s_letters[i]\n        j += 1\n        if j == c_letters_len:\n            j = 0\n    for i in range(s_letters_len-1,-1,-1):\n        if s_letters[i]!= c_letters[j]:\n            result += s_letters[i]\n        j += 1\n        if j == c_letters_len:\n            j = 0\n    if result == s[::-1]:\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in range(len(s)):\n        if s[i]==c[0]:\n            s=s[0:i]+s[i+1:]\n    if s==s[::-1]:\n        return s,True\n    else:\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=str(s)\n    c=str(c)\n    if len(s)==0:\n        return \"\",False\n    l=s.split(c)\n    rev=[]\n    for i in l:\n        rev+=i[::-1]\n    if s==rev:\n        return s,True\n    else:\n        return rev,False\n\ns=raw_input()\nc=raw_input()\n\n(s=reverse_delete(s,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def is_palindrome(s):\n        return (s == s[::-1])\n    # s = s.lower()\n    # c = c.lower()\n    result = s\n    for char in c:\n        if char in s:\n            result = result.replace(char,\"\")\n    # print result\n    if is_palindrome(result):\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    x = s\n    y = \"\"\n    if len(s) == 0 :\n        return (s, True)\n    for i in xrange(len(x)):\n        if x[i] not in c:\n            y+= x[i]\n        else:\n            y+= x[i:]\n            x = x[:i-1]\n    return (y,y == x[::-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def palindrome(s):\n        \"\"\"Task\n        You should write a function that checks if a given string is a palindrome\n        \"\"\"\n        result = False\n        for i in range(len(s)-1,0,-1):\n            if s[i] == s[len(s)-i-1]:\n                result = True\n                break\n        return result\n\n    def main():\n        \"\"\"Task\n        Write a function that returns a tuple containing the result and the check if the result is palindrome.\n        Input\n        s - the string we should delete the characters\n        c - the string we should check the characters against\n        \"\"\"\n        s = input(\"Enter string: \")\n        c = input(\"Enter characters to delete: \")\n        return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        for i in range(len(s)):\n            if s[i]==c[i]:\n                s=s[0:i]+s[(len(s)-i):]\n    else:\n        return(s,False)\n\n    l=len(s)\n    if l==0:\n        return(s,False)\n    elif l==1:\n        return(s,True)\n\n    # Reverse the string\n    rev=s[::-1]\n    # If the two strings are equal, then we have a palindrome\n    if s==rev:\n        return(s,True)\n\n    # The last character was deleted, so check the first and last characters\n    elif s[0]==s[-1]:\n        return(s[0:1]+s[1:-1],True)\n\n    # The last character was deleted, so check the first and last characters\n    elif s[0]==s[-1]:\n        return(s[0:1]+s[1:-1],True)\n\n    # The last character was deleted, so check the first and last characters\n    elif s[0]==s[-1]:\n        return(s[0:1]+s[1:-1],True)\n\n    # The last character was deleted, so check the first and last characters\n    elif s[0]==s[-1]:\n        return(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # implement reverse\n    def rev(s):\n        result = \"\"\n        for i in range(len(s)-1,-1,-1):\n            result += s[i]\n        return result\n    def reverse_delete(s,c):\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[0]:\n                result += s[i]\n        return result\n\n    result = rev(reverse_delete(s,c)) # check if the result is palindrome\n    return result, result == s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            del s[i]\n        for j in range(1,len(c)):\n            if s[i] == c[j]:\n                del s[i]\n                break\n    return(''.join(s),''.join(s) == ''.join(s[::-1]))</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #print(s,c)\n    n=s.find(c)\n    for i in range(0,n):\n        #print(i)\n        s=s.replace(c,\"\")\n    if s == s:\n        return(s,True)\n    else:\n        return(s,False)\n\ns=input()\nc = input()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    flag = True\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                result += s[i+1-j]\n                s = s[:i-1-j]+s[(i-1-j)+1:]\n                break\n        else:\n            flag = False\n            break\n    return (result,flag)\n\ns = input()\nc = input()\nr = reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    if len(s) < len(c):\n        return (\"\",False)\n\n    for i,x in enumerate(s):\n        if x == c[i]:\n            s = s[:i]+s[(i+1):len(s)]\n            c = c[:i]+c[(i+1):len(c)]\n    if s == c:\n        return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s_len = len(s)\n    c_len = len(c)\n    result = \"\"\n    print(\"Reversing...\")\n    rev = list(s)\n    rev.reverse()\n    print(\"Deleting...\")\n    for i in range(s_len):\n        if rev[i] == c[0]:\n            s = s[:i] + s[i+1:]\n            c = c[1:]\n            rev = rev[:i] + rev[i+1:]\n            continue\n        if rev[i] == c[1]:\n            s = s[:i] + s[i+1:]\n            c = c[1:]\n            rev = rev[:i] + rev[i+1:]\n            continue\n        if rev[i] == c[2]:\n            s = s[:i] + s[i+1:]\n            c = c[1:]\n            rev = rev[:i] + rev[i+1:]\n            continue\n        if rev[i] == c[3]:\n            s = s[:i] + s[i+1:]\n            c = c[1:]\n            rev = rev[:i] + rev[i+1:]\n            continue\n        if rev[i] == c[4]:\n            s = s[:i] + s[i+1:]\n            c = c[1:]\n            rev = rev[:i] + rev[i+1:]\n            continue\n        if rev[i] == c[5]:\n            s = s[:i] + s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    from time import ctime\n    s = s.lower()\n    c = c.lower()\n    str = ''\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                if i!= 0:\n                    str += s[i-j]\n                    str += s[i+j+1:]\n                break\n            elif i == 0:\n                break\n    if len(str) == len(s):\n        return (str,True)\n    else:\n        return (str,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    flag = True\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            i+=1\n            while(s[i] == c[i]):\n                i+=1\n                s = s[0:i] + s[i+1:]\n                flag = False\n    return(s,flag)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s, c = list(s), list(c)\n    assert len(s) == len(c), \"Error: length of strings must be equal\"\n    reverse = ''\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            reverse += c[i]\n            del s[i]\n        else:\n            reverse += s[i]\n    return reverse, len(s) == len(reverse)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = len(s)-1\n    r = len(c)-1\n    #s = str(s)\n    #c = str(c)\n    if (l < 0 or r < 0):\n        return (s,True)\n    if s[l] == c[r] and c[r]!='':\n        return (s[l+1:],True)\n    elif s[l]!= c[r] and c[r]!='':\n        return (s[l+1:],False)\n    else:\n        return (s[l+1:],True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            res += s[i]\n    # print(res)\n    return (res,reversed(res) == s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s)<len(c):\n        print(\"should be longer\")\n        return \"\"\n    result = \"\"\n    for i in range(0,len(s)):\n        if s[i]==c[0]:\n            if c[0]==c[1]:\n                result += s[i]\n                s = s[1:]\n                c = c[1:]\n                continue\n            else:\n                c=c[1:]\n                continue\n        if s[i]==c[-1]:\n            if c[-1]==c[-2]:\n                result += s[i]\n                s = s[1:]\n                c = c[1:]\n                continue\n            else:\n                c=c[1:]\n        result+=s[i]\n    return (result, True if is_palindrome(result) else False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return ('', False)\n    if len(s) == 1:\n        if s[0] == c[0]:\n            return ('', True)\n        else:\n            return (s, False)\n    if c in s:\n        return (s[1:], False)\n    else:\n        return (s, True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Declare variables\n    s = list(s)\n    c = list(c)\n    result = \"\"\n    same = False\n\n    # Remove all characters in string s if it's equal to c\n    for x in s:\n        if x in c:\n            s.remove(x)\n\n    # Create new string for result\n    for x in s:\n        result += x\n\n    # Check if the result is palindrome\n    if result == reverse(result):\n        same = True\n    else:\n        same = False\n\n    return(result,same)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    for ch in c:\n        if ch in s:\n            i = s.find(ch)\n            s = s[:i] + s[i+1:]\n\n    return (s,True if s == s[::-1] else False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return s,True\n    result=''\n    for i,j in zip(s,c):\n        if i==j:\n            result+=c[(i-1)%len(c)]+s[i-1]\n    return result,reverse_delete(result,c)\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    assert len(s) == len(c) or len(s) == 0 or len(c) == 0\n\n    #return (' '.join([''.join(i) for i in zip(s[::-1],s)]),True)\n\n    # Preprocessing\n    # check if the string is palindrome or not\n    def isPalindrome(s):\n        assert len(s) > 0\n        return s == s[::-1]\n    # check if the characters in both strings are same\n    def check(s1,s2):\n        assert len(s1) > 0 and len(s2) > 0\n        if s1 == s2:\n            return True\n        else:\n            return False\n    # first string reversed\n    def rev(s):\n        assert len(s) > 0\n        return s[::-1]\n    # swapping the characters in first string and character in second string\n    def swap(s,c):\n        assert len(s) > 0 and len(c) > 0\n        return ''.join(i) for i in zip(s,c)\n    # number of characters in the first string\n    def charNum(s):\n        assert len(s) > 0\n        return len(s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # reverse the given string\n    reverse_string = ''.join(reversed(s))\n    # Reversing the given charactrs\n    reverse_characters = ''.join(reversed(c))\n    # delte characters from reverse string\n    delte_characters = reverse_string.replace(reverse_characters, '')\n    # check if the result string is palindrome\n    return (delte_characters, str(delte_characters) == str(reverse_string)[::-1])\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    res = s\n    for i in s:\n        if i == c:\n            res = res[:i]+res[i+1:]\n    print(res)\n    return res, res == res[::-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return (\"\",False)\n    else:\n        d = []\n        for i,j in zip(s,c):\n            if i == j:\n                d.append(i)\n                s = s.replace(i,\"\")\n        return (\"\".join(d),False if s == s[::-1] else True)\n\nt = int(input())\nfor _ in range(t):\n    s,c = [input() for _ in range(2)]\n    print(reverse_delete(s,c))\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.replace(' ','').upper()\n    c = c.replace(' ','').upper()\n    return s[c.index(c):],s.is_palindrome()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = []\n    for i in range(len(s)):\n        if s[i] not in c:\n            res.append(s[i])\n        else:\n            res.append(s[i+1-(len(c)-1)])\n    return res[::-1],res[::-1]==s[::-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    for i in s:\n        if i not in c:\n            result += i\n    if result == result:\n        return (result, True)\n    else:\n        return (result, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n    return result, is_palindrome(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    import string\n    for i in xrange(len(s)):\n        if s[i] in c:\n            for j in xrange(len(s)):\n                if s[j] == c[i]:\n                    s = s[:j]+s[j+1:]\n                    break\n    result = ''\n    if s == '':\n        return (result,False)\n    else:\n        if s == s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def delete(s,c):\n        temp = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                temp+= s[i]\n        return temp\n\n    def check_palindrome(s):\n        x = s[::-1]\n        if x == s:\n            return True\n        else:\n            return False\n\n    if len(c)!= len(s):\n        return \"\",False\n    else:\n        result = delete(s,c)\n        if check_palindrome(result):\n            return result,True\n        else:\n            return \"\",False</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) == 0:\n        return s, False\n\n    if len(s) == 0:\n        return \"\", False\n\n    result = \"\"\n    for i in range(0, len(s)):\n        if s[i] == c[0]:\n            result += s[i+1:]\n            s = s[:i+1]\n            break\n\n    result, flag = reverse_delete(result,c[1:])\n    return result, flag", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if s[i]==c[j]:\n                s = s[:i] + s[i+1:]\n                break\n    return s, s == s[::-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    flag = True\n    count=0\n    if s is None or c is None:\n        return (s,flag)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n        else:\n            count += 1\n    if len(result) == len(s):\n        flag = False\n    else:\n        s = result\n        print(\"new string after deleting\", s)\n    return (s,flag)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # if 'c' is not a palindrome, we will return (s,False) as the palindrome check will return False.\n    if not is_palindrome(c):\n        return (s,False)\n\n    result = \"\"\n    # first get the char in the string that are not in 'c'\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n\n    # now do the reverse operation\n    reverse = result[::-1]\n    # return (reverse,palindrome_check(reverse))\n    return (result,is_palindrome(reverse))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    a = s\n    b = c\n    r = s[0:c.__len__()]\n    for i in range(0,c.__len__()):\n        if a[i] == b[i]:\n            a = a[0:i]+a[i+1:c.__len__()]\n            break\n    r = a[0:len(a)-c.__len__()]+r\n    return (r,True if str(r) == str(reverse(r)) else False)\n\nA:\n\nYou have some duplication in your code. For example, you are appending the range 0 to i to a and the range i + 1 to c.__len__() to a, and then you are removing the range 0 to i from a. This is basically the same as a = a[0:i]+a[i+1:c.__len__()], but you can do it all at once using slicing.\nYou could also make a helper function for reversing a string which takes in a string and a starting position and returns a string.\nYour code is also hard to follow at the moment. You are doing too many things at once. For example, you are doing string concatenation inside your for loop. You are also assigning the result to", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    if len(s)!= len(c):\n        return (s, False)\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            s[i] = s[i].lower()\n            s[i] = s[i].upper()\n    return (''.join(s), True)\n\nreverse_delete('abcde','ae')\nreverse_delete('abcdef','b')\nreverse_delete('abcdedcba','ab')\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    #s = s.lower()\n    #s = s.replace(\"\\n\",\"\")\n    #s = s.replace(\"\\t\",\"\")\n    #s = s.replace(\" \",\"\")\n    #s = s.replace(\",\",\"\")\n    #s = s.replace(\".\",\"\")\n    #s = s.replace(\":\",\"\")\n\n    #c = c.lower()\n    #c = c.replace(\"\\n\",\"\")\n    #c = c.replace(\"\\t\",\"\")\n    #c = c.replace(\" \",\"\")\n    #c = c.replace(\",\",\"\")\n    #c = c.replace(\".\",\"\")\n    #c = c.replace(\":\",\"\")\n\n\n    s = s.replace(\"?\",\"\")\n    s = s.replace(\"!\",\"\")\n    s = s.replace(\".\",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\"\\n\",\"\")\n    s = s.replace(\"\\t\",\"\")\n    s = s.replace(\",\",\"\")\n    s = s.replace(\":\",\"\")\n\n    c = c.replace(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # if the first string is empty, return the second string\n    if not s:\n        return s, True\n\n    # if the second string is empty, return the first string\n    if not c:\n        return c, False\n\n    # check if any char of the first string is in the second one\n    for ch in s:\n        if ch in c:\n            # the only thing we have to do here is to delete the char from the first string\n            return reverse_delete(s[1:],c)[0], False\n    return s, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    n = len(s)\n    m = len(c)\n    s = list(s)\n    c = list(c)\n    result = ''\n    for i in range(0,n):\n        if s[i] == c[0]:\n            for j in range(1,m):\n                if s[i] == c[j]:\n                    s.pop(i)\n                    c.pop(j)\n                    break\n            if s[i] == c[0]:\n                result += s[i]\n            else:\n                result += s[i:]\n                break\n    if s == c:\n        return (result,True)\n    return (result,False)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    result = []\n    reverse_result = []\n    for i in range(len(s)):\n        result.append(s[i])\n        if s[i] in c:\n            j = i + 1\n            while j < len(s) and s[j] == s[i]:\n                j += 1\n            result.pop(j)\n        reverse_result.append(s[i])\n\n    if \"\".join(reverse_result) == reverse(\"\".join(result)):\n        return result, True\n    else:\n        return result, False\n\ns,c = input().split(' ')\nresult = reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def reverse(s):\n        return s[::-1]\n\n    if len(s) == 1 or len(c) == 1:\n        if c == s:\n            return (s,True)\n        return (s,False)\n    #s.index(c) will give the position of the character c in string s\n    new_list = []\n    for i in range(len(s) - len(c) + 1):\n        if s[i:i+len(c)] == c:\n            break\n        new_list.append(s[i])\n    return reverse(''.join(new_list)), reverse_delete(s,c)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.upper()\n    c = c.upper()\n    if len(c)!= len(s):\n        return '',False\n    r = ''\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            r += s[i]\n        else:\n            r += s[i+1:i+2]\n    if r == r[::-1]:\n        return r, True\n    else:\n        return r, False\n\ns,c = input().strip().split(' ')", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    import string\n    from collections import Counter\n    # convert input to sets\n    s_set = set(s)\n    c_set = set(c)\n    # build new string\n    temp_s = ''\n    # add characters to the new string\n    for ch in s:\n        if ch not in c_set:\n            temp_s += ch\n    # reverse the new string\n    temp_s = temp_s[::-1]\n    # compare strings\n    return temp_s,temp_s == s_set\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) == 0: return s, False\n    if len(s) == 0 or len(c) > len(s): return s, False\n    if len(s) < len(c): return reverse_delete(reverse_delete(s,c[1:]),c[:len(s)])\n\n    res, rev = s, []\n    i = 0\n    while i < len(s):\n        if s[i] == c[0]:\n            rev.append(s[i])\n            s = s[i+1:]\n            i -= 1\n        else:\n            rev.append(s[i])\n            i += 1\n    if rev == s: return s, True\n    else: return s, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = s[:]\n    # print(len(s),len(c))\n    for i in range(len(s)):\n        if s[i]==c[0]:\n            result = s[:i] + s[i+1:]\n            break\n    # print(result)\n    if result == s[::-1]:\n        return (result,True)\n    else:\n        return (result,False)\ns = str(input())\nc = str(input())", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Your code here\n    s = list(s)\n    c = list(c)\n\n    res = []\n\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            res.append(s[i])\n\n    return res, palindrome(\"\".join(res))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s1, res = \"\", \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            s1 += s[i]\n        else:\n            res += s[i]\n    if s1 == res:\n        return res, True\n    else:\n        return res, False\n\nimport unittest", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write code here", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # your code here\n    return reverse_delete(s,c)\ns = raw_input(\"Enter the string : \")\nc = raw_input(\"Enter the character : \")", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    def palindrome(s):\n        if len(s) == 0:\n            return True\n        l = len(s)\n        for i in range(l):\n            if s[i] == s[l-i-1]:\n                return False\n        return True\n    def _delete(s,c):\n        l = len(s)\n        new = \"\"\n        for i in range(l):\n            if s[i]!= c[-1]:\n                new += s[i]\n        return new\n\n    new = _delete(s,c)\n    if palindrome(new):\n        return (new,True)\n    return (new,False)\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    s.reverse()\n    c = list(c)\n    c.reverse()\n    d=[]\n    for i in s:\n        if i in c:\n            continue\n        d.append(i)\n    d.reverse()\n    return(''.join(d),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #check if c is palindrome\n    c_is_palindrome = True\n    for i in range(len(c)-1):\n        if c[i]!= c[len(c)-1-i]:\n            c_is_palindrome = False\n            break\n    #reverse c\n    c = c[::-1]\n    #change letters in s\n    change = True\n    while change == True:\n        change = False\n        for i in range(len(s)-1):\n            if s[i] == c[i]:\n                s = s[:i]+s[i+1:]\n                change = True\n                break\n        if change == False:\n            break\n    #reverse s\n    s = s[::-1]\n    if c_is_palindrome == True and s == c:\n        return s,True\n    else:\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    l = len(s)\n    if l > len(c):\n        return s,False\n    if l == len(c):\n        if s == c:\n            return s,True\n        else:\n            return s,False\n    m = 0\n    n = 0\n    while m < l:\n        if s[m] == c[n]:\n            del s[m]\n        else:\n            m += 1\n        n += 1\n    if s == c:\n        return s,True\n    else:\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    check = False\n    for i in range(len(s)):\n        if s[i] in c:\n            s[i] = \"\"\n            if len(result) > i:\n                result = result[:i-1] + result[i+1:]\n                if s[i-1]!= result[i-1]:\n                    result = result[:i-1] + result[i+1:]\n            else:\n                result = result[:i-1] + result[i+1:]\n        else:\n            result = result + s[i]\n    return result,check\n\n\ns,c = input().split(\" \")", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # string length\n    n = len(s)\n    # string reversed\n    r = s[::-1]\n    # character set\n    cset = set(c)\n    # loop for deleting\n    d = 0\n    for x in s:\n        if x in cset:\n            d += 1\n        else:\n            s[d] = x\n    # check if it's palindrome\n    if s == r:\n        return (s[::-1],True)\n    else:\n        return (s[::-1],False)\n\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #Write your code here\n    if not c or not s:\n        return(\"\",False)\n    if c == s:\n        return(s,True)\n    else:\n        if c in s:\n            return(reverse_delete(s,c[1:]),False)\n        else:\n            return(reverse_delete(s,c[:-1]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # This function takes two strings as input, returns a tuple of a new string and a boolean as the result\n    # first, delete all characters in s that are equal to any character in c\n    temp = s[:]\n    for i in c:\n        temp = temp.replace(i,\"\")\n    # now check if the result string is a palindrome\n    rev = temp[::-1]\n    return (rev,rev == s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    def palindrome(s):\n        return s == s[::-1]\n\n    if len(s) <= len(c):\n        s = s.replace(c, '')\n        return s, palindrome(s)\n\n    else:\n        c = c[::-1]\n        s = s.replace(c, '')\n        return s, palindrome(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return s,False\n    if c==s:\n        return s,True\n    result=''\n    for i in range(len(s)):\n        if s[i]!=c[i]:\n            result+=s[i]\n    if result==reverse(result):\n        return result,True\n    else:\n        return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    count = 0\n    if len(s) == len(c):\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                result = result + s[i]\n                del s[i]\n                count += 1\n            elif s[i]!= c[0]:\n                result = result + s[i]\n            if len(s) == 1:\n                return(result, True)\n    return(result, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    s = s.replace(' ','').lower()\n    c = c.replace(' ','').lower()\n\n    try:\n        str_count = 0\n        while str_count < len(s):\n            if s[str_count] == c[str_count]:\n                s = s.replace(s[str_count],'')\n                str_count = str_count + 1\n            else:\n                str_count = str_count + 1\n    except IndexError:\n        print('IndexError')\n\n    return s, is_palindrome(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result, check = \"\", True\n    for i, c in enumerate(s):\n        if c in c:\n            result += s[i+1:]\n            check = False\n            break\n    return (result, check)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return (s,False)\n    else:\n        s_r = \"\"\n        for i in range(len(s)-1,-1,-1):\n            if s[i]!= c[i]:\n                s_r += s[i]\n        return (s_r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return s.rstrip(c), False\n    else:\n        return s.rstrip(c)[len(c):], True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Function to delete a character in a string\n    def delete_char(string, character):\n        new_string = \"\"\n        for i in range(len(string)):\n            if string[i] == character:\n                continue\n            new_string += string[i]\n        return new_string\n\n    # Function to reverse a string\n    def reverse(string):\n        return string[::-1]\n\n    # Function to check if a string is palindrome\n    def palindrome(string):\n        if len(string) < 2:\n            return False\n        elif string[0]!= string[-1]:\n            return False\n        else:\n            return palindrome(string[1:-1])\n\n    # Begin main function\n    s = input(\"Enter string : \").upper()\n    c = input(\"Enter character : \").upper()\n    result = delete_char(s, c)\n    reverse_string = reverse(result)\n    palindrome_result = palindrome(reverse_string)\n    if palindrome_result == False:\n        print(\"False\", end=\" \")\n    else:\n        print(\"True\", end=\" \")\n\n    print(reverse_string, end=\" \")\n    print(result)\nreverse_delete()\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def swap(s):\n        l = len(s)\n        x = l-1\n        y = 0\n        while x>=0 and y<x:\n            if s[y]!=s[x]:\n                return s[:y]+s[x:]+s[:x]\n            x -= 1\n            y += 1\n        return s\n\n    s = s+''\n    c = c+''\n    if len(s)==0:\n        return c,True\n    if len(c)==0:\n        return s,True\n    if len(c)>len(s):\n        return swap(reverse_delete(s,reverse_delete(c,''))),False\n    l = len(s)\n    j = 0\n    i = 0\n    while j<l and j<len(c):\n        if s[j]==c[j]:\n            del s[j]\n            if len(s)<j:\n                return swap(reverse_delete(s,c))\n            j += 1\n        j += 1\n    if len(s)==len(c):\n        return swap(reverse_delete(s,c)),True\n    return swap(reverse_delete(s,c)),False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    result = \"\"\n    for i in range(len(s)-len(c)-1,-1,-1):\n        if s[i]!= c[0]:\n            result += s[i]\n    print(\"result\",result)\n    if result == s:\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    a = list(s)\n    b = list(c)\n    if len(s) < len(c):\n        return reverse_delete(s[len(s)-len(c):],c)\n    else:\n        for i in range(0,len(s)):\n            if b.count(s[i]) > 0:\n                a[len(a)-i-1] = a[i]\n                return \"\".join(a),False\n    return \"\".join(a),True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    if len(s)==len(c):\n        n=0\n        while n<len(s):\n            if s[n]==c[n]:\n                s[n]=''\n                print(s)\n                print('here')\n                print(n)\n                n+=1\n            else:\n                n+=1\n        return s,True\n    else:\n        return s,False\n\ns,p = reverse_delete('abcdedcba','ab')", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (s,False)\n\n    temp = list()\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            temp.append(s[i])\n\n    return (''.join(temp),True if len(temp) == len(s) else False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l,r,result,check = s,c,\"\",False\n    if len(s) <= len(c):\n        while l!= r:\n            l,r = l[-1],r[-1]\n            if l == r:\n                result = result + r\n            else:\n                check = True\n                break\n    return result,check", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return (\"\",False)\n    if s in c:\n        return reverse_delete(s[len(c):],c)\n    else:\n        return (s[len(c):],reverse_delete(s,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    if len(s) == 0 or len(c) == 0:\n        return (result, False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                result = result + s[i]\n                for j in range(len(c)):\n                    if s[i] == c[j]:\n                        s = s[:i] + s[i+1:]\n                        break\n                if s == s[::-1] or s == result[::-1]:\n                    return (result, True)\n                else:\n                    return (result, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    answer = []\n    for char in s:\n        if char in c:\n            answer.append(char)\n    if answer == s[::-1]:\n        return answer, True\n    else:\n        return answer, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (\"\",False)\n    for i in range(0,len(s)):\n        if s[i]==c[0]:\n            del s[i]\n        else:\n            break\n    return (s,False if s==reverse(s) else True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    if len(c)>len(s):\n        return (s,False)\n    result = ''\n    for char in s[:-1]:\n        if char!= c[0]:\n            result = result + char\n        else:\n            result = result + s[-1:]\n            s = s[:-1]\n            c = c[1:]\n    result = result + s\n    return (result, palindrome(result))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s2 = \"\"\n    c2 = \"\"\n    for x in c:\n        if s.count(x) > 0:\n            s2 = s.replace(x,\"\")\n        else:\n            c2 += x\n    return s2,s2 == c2[::-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        temp = list(s)\n        result = \"\"\n        for i in range(len(c)):\n            for j in range(len(s)):\n                if temp[j] == c[i]:\n                    result += temp[j+1:]\n                    del temp[j]\n                    break\n            else:\n                break\n        if len(temp) == 0 and result == s:\n            return (result,True)\n        else:\n            return (result,False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #A string is called palindrome if it reads the same backward as forward.\n    #You should return a tuple containing the result string and True/False for the check.\n    if len(s)!= len(c):\n        return('ERROR','ERROR')\n\n    if len(s) == 0:\n        return(s,True)\n\n    new = ''\n    i = 0\n    for j in range(len(s)):\n        if s[i]!= c[j]:\n            new += s[i]\n            i += 1\n    new += s[i]\n    if new == reverse(new):\n        return(new,True)\n    else:\n        return(new,False)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    if len(s)<len(c):\n        print(\"String length should be greater than character length\")\n        return\n    #Count number of characters to delete, i.e., length of s\n    del_count = len(s) - len(c)\n    print(\"Deleting characters\", del_count)\n    for i in range(del_count):\n        s = s[:-1*i]\n    #Reversing the string\n    s = s[::-1]\n    #Checking the palindrome\n    pal = s == s[::-1]\n    print(\"Palindrome check\", pal)\n    return s, pal", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def merge_sort(s,c):\n        l=[]\n        ll=[]\n        if len(s)==0:\n            return 0\n        for i in c:\n            for j in s:\n                if j==i:\n                    l.append(j)\n        for i in l:\n            ll.append(i)\n        ll1=[]\n        ll2=[]\n        if len(ll)==0:\n            return 0\n        for i in range(len(ll)):\n            for j in range(i,len(ll)):\n                if ll[j]<ll[j-1]:\n                    ll1.append(ll[j])\n                    ll2.append(ll[j-1])\n                else:\n                    if ll[j]==ll[j-1]:\n                        l1=len(ll1)\n                        l2=len(ll2)\n                        if l1>l2:\n                            l=ll2[0:l1]\n                            ll2=ll2[0:l1-l2]\n                            ll.insert(0,l)\n                        elif l2>l1:\n                            l=ll1[0:l2]\n                            ll1=ll1[0:l2-l1]\n                            ll.insert(0,l)\n                        else:\n                            l=ll1[0:l1-l2]\n                            ll1=ll1[0:l1-l2]\n                            ll1=ll1[0:l2]\n                            ll.insert(0,l", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    rev_s = s[::-1]\n    rev_c = c[::-1]\n    if(len(s) <= len(c)):\n        return (rev_s,False)\n    else:\n        temp = \"\"\n        while(rev_s):\n            temp = rev_s[rev_s.find(rev_c)]\n            rev_s = rev_s.replace(temp,\"\")\n        temp = \"\"\n        while(rev_c):\n            temp = rev_c[rev_c.find(rev_s)]\n            rev_c = rev_c.replace(temp,\"\")\n        rev_s = rev_s[::-1]\n        if(rev_c == \"\"):\n            return (rev_s,True)\n        else:\n            return (rev_s,False)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    answer = \"\"\n    result = True\n    for i in s:\n        if i in c:\n            i = \"\"\n        answer = answer + i\n    return (answer,result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def reverse(s):\n        \"\"\"Task\n        We are given a string s, you have to reverse the string and return the result\n        \"\"\"\n        if s == '':\n            return \"\"\n        else:\n            return s[::-1]\n\n    s = list(s)\n    c = list(c)\n    result = []\n    for i in s:\n        if i in c:\n            continue\n        else:\n            result.append(i)\n    result.reverse()\n    if result == reverse(''.join(result)):\n        return (result,True)\n    else:\n        return (result,False)\n\ns = \"abcde\"\nc = \"ae\"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def is_palindrome(string):\n        if len(string) <= 1:\n            return True\n        else:\n            return string[::-1] == string\n\n    s = \"\"\n    c = \"\"\n    result = \"\"\n    while len(s) > 0:\n        i = 0\n        while i < len(c):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n            i += 1\n        result += s[0]\n        s = s[1:]\n    return result, is_palindrome(result)\n\n\n\n\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    rev_s = \"\"\n    for i in range(len(s) - 1, -1, -1):\n        if s[i]!= c[0]:\n            rev_s += s[i]\n    rev_s += s[-1]\n    rev_s = rev_s[::-1]\n    return rev_s,True if rev_s == s else False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    n=len(s)\n    m=len(c)\n    if n == 0 :\n        return (\"\",True)\n    if m == 0 :\n        return (s,True)\n    temp=[]\n    for i in range(n):\n        if s[i]!= c[0]:\n            temp.append(s[i])\n    for j in range(1,m):\n        for i in range(n):\n            if s[i]==c[j]:\n                temp.append(s[m-1-i])\n                break\n    return (''.join(temp),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return (\"\",False)\n    elif not s:\n        return (\"\",False)\n    elif not c:\n        return (s,False)\n    elif s == c:\n        return (s,False)\n    else:\n        for i in s:\n            if i == c[0]:\n                return (\"\",False)\n            else:\n                return (s.replace(i,\"\"),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    if len(s)==0:\n        return (\"\",False)\n    if len(c)==0:\n        return (s,True)\n    if s[0]==c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return (s[0:1]+c+s[0:1]+c,True)+reverse_delete(s[1:],c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c)!= len(s):\n        return s,False\n\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s[:i] + s[i+1:]\n    return s,bool(s == s[::-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    a = s.replace(c,\"\").replace(c,\"\")\n    b = a.replace(c,\"\").replace(c,\"\")\n    c = a.replace(c,\"\").replace(c,\"\").replace(c,\"\")\n    return (b,c == b.replace(c,\"\"))\n\n\"\"\"\nTask\nWe are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\"\"\"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Complete this function\n    if len(s) < len(c):\n        return (s, False)\n    else:\n        new_s = []\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                new_s.append(s[i])\n        new_c = []\n        for i in range(len(c)):\n            if c[i]!= s[i]:\n                new_c.append(c[i])\n        if new_c == new_s:\n            return (''.join(new_s),True)\n        else:\n            return (''.join(new_s),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s)==len(c):\n        print(\"equal\")\n        return (\"\",False)\n    else:\n        res=s[::-1]\n        for i in range(len(s)):\n            if s[i]==c[i]:\n                res=res[:i]+res[i+1::]\n            else:\n                return (res,False)\n        return (res,True)\n    \ns=input()\nc=input()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    def reverse(s):\n        return s[::-1]\n\n    def is_palindrome(s):\n        result = \"\"\n        for i in range(0, len(s)):\n            result += s[i]\n            if result == s[::-1]:\n                return True\n        return False\n\n    result = reverse(s)\n    if len(s) == len(c):\n        if is_palindrome(result):\n            return result, True\n        else:\n            return result, False\n    else:\n        if is_palindrome(result):\n            return result, False\n        else:\n            result, palindrome = reverse_delete(result, c)\n            return result, palindrome\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n\nA:\n\nThe code is a little hard to understand as it is not very well structured. It would be much easier to understand if you use functions, which clearly separates the different parts. Also, use the correct indentation and format the code. Additionally, since it is a Python question, I would suggest using Python idioms like string formatting rather than concatenating strings.", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n\n    if len(s) <= len(c):\n        #s.reverse()\n        print s\n        new = s\n        while len(new) > 0:\n            if new[-1] == c[-1]:\n                new = new[:-1]\n            else:\n                print new\n                return new\n        if new == s:\n            return (s, True)\n        else:\n            return (s, False)\n    else:\n        return (s, False)\n\n\ns=input()\nc=input()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    #d = set(s)\n    result = \"\"\n    i = 0\n    while i < len(s):\n        if s[i] == c[0] and s[i-1] == c[c.index(c[0]) -1]:\n            i = i-1\n            if s[i] == c[c.index(c[0]) -1]:\n                continue\n            while s[i]!= c[c.index(c[0]) -1]:\n                result = result + s[i]\n                i = i-1\n                if i == 0:\n                    break\n            i = i+1\n        i = i+1\n    if result == s:\n        return (result,True)\n    else:\n        return (result,False)\n\ns = \"abcde\"\nc = \"ae\"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    s = \"\".join(sorted(s))\n    c = \"\".join(sorted(c))\n    if s==c:\n        return s,True\n    else:\n        return s,False\n\ns,c,t = reverse_delete(\"abba\",\"ab\")", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    new_s=''\n    check=False\n    for i in range(len(s)):\n        if s[i]==c[i]:\n            del s[i]\n            new_s=new_s+s[i]\n        else:\n            new_s=new_s+s[i]\n    if new_s==s[::-1]:\n        check=True\n    return new_s,check", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    # def reverse_delete(s,c):\n    #     \"\"\"Task\n    #     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    #     then check if the result string is palindrome.\n    #     A string is called palindrome if it reads the same backward as forward.\n    #     You should return a tuple containing the result string and True/False for the check.\n    #     Example\n    #     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    #     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    #     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    #     \"\"\"\n    #     # write your code here\n    #     a = len(s)\n    #     b = len(c)\n    #     l = []\n    #     l.append(s)\n    #     l.append(c)\n    #     c = l.pop(0)\n    #     s = l.pop(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #TODO complete this function\n\n    s = list(s)          # convert string to a list\n    c = list(c)           # convert string to a list\n\n    # find the index of the character to delete\n    c_index = [i for i,x in enumerate(s) if x in c]\n    # if any character to delete is present\n    if c_index:\n        # delete all the characters in s\n        delete = [s[x:] for x in c_index]\n        # join the list together\n        delete = ''.join(delete)\n        # reverse the string\n        delete = delete[::-1]\n        # check if the string is palindrome\n        is_palindrome = False\n        if delete == s:\n            is_palindrome = True\n        # return the result\n        return delete, is_palindrome\n    else:\n        # return the result\n        return s, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) == 0:\n        return (s, False)\n    elif len(s) == 0:\n        return (s, False)\n    elif len(s) == 1 or len(s) == len(c):\n        return (s, False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        result = reverse_delete(result, c)\n        if result == result:\n            return (result, True)\n        else:\n            return (result, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #Test cases:\n    #reverse_delete(\"abcdef\",\"a\") => (\"acdef\", False)\n    #reverse_delete(\"abcdef\",\"b\") => (\"acdef\", True)\n    #reverse_delete(\"abcdef\",\"cd\") => (\"abcdedc\", True)\n    #reverse_delete(\"abcdedcba\",\"ab\") => (\"cdedc\", True)\n\n    def delete(x, y):\n        i, j = 0, len(x) - 1\n        while i < j:\n            if x[i] == y[j] and x[i + 1] == y[j - 1]:\n                del x[i]\n                del x[i + 1]\n                i -= 1\n                j -= 1\n            else:\n                i += 1\n                j -= 1\n        return x\n\n    def rev_delete(s,c):\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[0]:\n                result += s[i]\n            for j in range(1,len(c)):\n                if s[i] == c[j]:\n                    i += 1\n                    result += s[i]\n        return result, len(result) == len(s)\n\n    return delete(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s_len = len(s)\n    c_len = len(c)\n    if s_len <= c_len:\n        return s,False\n    result = \"\"\n    for i in range(0,s_len):\n        if s[i]!= c[c_len-i-1]:\n            result += s[i]\n        else:\n            result += s[c_len-i-1]\n    return result,result==s[::-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    print(reverse_delete(\"abcde\",\"ae\"))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s:\n        return '', False\n\n    if not c:\n        return s, True\n\n    i, j, n = 0, len(s) - 1, len(c)\n\n    while i < n and j >= 0:\n        if s[i] == c[j]:\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return s[i:j], not s[i:j] == s[j:i]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    pass", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # have to do it with index \n    if len(s) < len(c):\n        return reverse_delete(s[len(c)-len(s):], c[len(c)-len(s):]) + (s[:len(c)-len(s)],False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                # reverse the string\n                s = s[0:i]+s[len(s)-len(c)+i:]\n                # check if palindrome\n                if s == s[::-1]:\n                    return reverse_delete(s[len(c)-len(s):], c[len(c)-len(s):]) + (s[:len(c)-len(s)],True)\n                else:\n                    return reverse_delete(s[len(c)-len(s):], c[len(c)-len(s):]) + (s[:len(c)-len(s)],False)\n        return s,False</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s: return \"\", False\n    if not c: return s, True\n    result = \"\"\n    left,right = s.split(c,1)\n    left,right = reverse_delete(left,c)\n    left,right = reverse_delete(right,c)\n    left = left + right\n    if left == s: return left, False\n    else: return left,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = s.replace(c, \"\")\n    result = result.strip(c)\n    result = result.replace(\" \",\"\")\n    reverse = result[::-1]\n    return reverse, result == reverse", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return (s[::-1], False)\n    else:\n        return (s[len(c):], False)\n\ns=input()\nc = input()\nreverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    assert(s.__len__()>c.__len__()) #assert both strings are same length\n    if (s==c): #if the same character deleted\n        return (s,True)\n    else: #otherwise call the reverse of the string and delete the character\n        res,p = reverse_delete(reverse(s),c) #call the reverse and delete the character from the reversed string\n        if(res == s): #check if it is palindrome\n            return (res,True)\n        else:\n            return (res,False) #return False\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    res = []\n    s_len = len(s)\n    for i in range(s_len):\n        if s[i] == c[0]:\n            for j in range(i,s_len):\n                if s[j] == c[0]:\n                    for k in range(i,j):\n                        res.append(s[k])\n                    j -= 1\n                    for k in range(j,s_len):\n                        res.append(s[k])\n            j = i\n            for k in range(j,s_len):\n                res.append(s[k])\n        elif s[i] == c[1]:\n            for j in range(i,s_len):\n                if s[j] == c[1]:\n                    for k in range(i,j):\n                        res.append(s[k])\n                    j -= 1\n                    for k in range(j,s_len):\n                        res.append(s[k])\n            j = i\n            for k in range(j,s_len):\n                res.append(s[k])\n        else:\n            res.append(s[i])\n    if (\"\".join(res)) == s[::-1]:\n        return res, True\n    else:\n        return res, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    flag = False\n    s = list(s)\n    for i in range(0,len(s)-1):\n        if s[i] == s[-1-i]:\n            s.pop(i)\n            s.pop(-1-i)\n            flag = True\n    return s,flag", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in xrange(len(s)):\n        if s[i] in c:\n            s = s[:i]+s[(len(s)-1)-i:]\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    i=0\n    while i<len(s):\n        if s[i]==c[0]:\n            s=s[0:i]+c[1]+s[(len(s)-1)-i]:\n            i+=1\n        else:\n            i+=1\n    if s==s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    length = len(s)\n    if length == 0:\n        return result, True\n    elif length == 1:\n        return result, True\n\n    for i in range(0, length):\n        if c.find(s[i]) == -1:\n            result += s[i]\n        else:\n            result += c.find(s[i]) * s[i]\n    print result\n    return result, is_palindrome(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    count = 0\n    for i in range(0,len(s)):\n        if c.count(s[i]) > 0:\n            count += 1\n    if count == len(s):\n        print s[::-1]\n        return s[::-1],False\n    for i in range(0,len(s)):\n        if c.count(s[i]) > 0:\n            del s[i]\n    return s, True\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s=list(s)\n    c=list(c)\n    for i in range(len(s)):\n        if s[i]==c[i]:\n            del s[i]\n    rev=s\n    for i in range(len(s)):\n        rev.append(rev[len(s)-i-1])\n    if s==rev:\n        return (\"\".join(s),True)\n    else:\n        return (\"\".join(s),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    import re\n    t = s[:]\n    for j in c:\n        t = re.sub(j,'',t)\n    if t==s[::-1]:\n        return(t,True)\n    else:\n        return(t,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return (s,False)\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            s = s[:i]+s[len(s)-i-1:]\n            break\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    #s = input()\n    #c = input()\n    #s=list(s)\n    #c=list(c)\n    #n=s.__len__()\n    #print(n)\n    #t=0\n    #u=0\n    #l=0\n    #r=0\n    #m=0\n    #l_s=[]\n    #r_s=[]\n    #for i in range(n):\n    #    if s[i]==c[i]:\n    #        t=t+1\n    #        u=0\n    #    else:\n    #        u=1\n    #        l=l+1\n    #        l_s.append(s[i])\n    #        if u==1:\n    #            r=i+1\n    #            r_s.append(s[r])\n    #            m=r\n    #        if u==0:\n    #            r=0\n    #            r_s=[]\n    #    if t==n:\n    #        return (\"\".join(l_s),True)\n    #    if u==0:\n    #        r=0\n    #        r_s=[]\n    #    if l==n:\n    #        return (\"\".join(l_s),False)\n    #return (\"\".join(l_s),False)\n\ns = \"abcde\"\nc = \"ae\"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result= s.replace(c,\"\")\n    if result == s[::-1]:\n        return(result,True)\n    else:\n        return(result,False)\n\nreverse_delete(\"cabcd\",\"abcd\")\n\nA:\n\nYou should return result as a single string, and not a tuple of string and boolean.  Also, in your example you are returning ('bcd',False), but c is not in s so you should just return 'bcd'.", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    n = len(s)\n    # set up a boolean array for all the characters in the string\n    bool_arr = [False]*n\n    # set up the index for the current char being processed\n    index = 0\n    # for each character in the input string\n    for i in range(n):\n        # if current character is not in the compare string\n        if i + 1 > n or s[i]!= c[i+1]:\n            # we set the current character to True\n            bool_arr[i] = True\n        else:\n            # else, we set current character to false and increment index\n            bool_arr[i] = False\n            index += 1\n    # we now reverse the bool_arr and get the deleted string\n    new_s = \"\"\n    for i in range(n):\n        if bool_arr[i]:\n            # we don't include this character in the new string\n            continue\n        else:\n            new_s += s[i]\n    return new_s, new_s == s[::-1]\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    import sys\n    from copy import copy\n    s = s.lower()\n    c = c.lower()\n    i = 0\n    k = 0\n    h = len(s)\n    j = 0\n    l = len(c)\n    result = ''\n    len2 = len(s)\n    while i < len(s):\n        while j < l:\n            if s[i] == c[j]:\n                j += 1\n                break\n            else:\n                j += 1\n        while j < l:\n            if i == h - 1:\n                return result,False\n            result = result + s[i + 1:i + 1]\n            j += 1\n        i += 1\n    if result == s:\n        return result,True\n    return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<=1 or len(c)<=1:\n        return (s,False)\n    elif s in c:\n        return (s[:c.index(s)],False)\n    else:\n        return (reverse_delete(s[1:],c),reverse_delete(s[:],c)[1])</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # check length of s\n    if len(s) == 0 or len(c) == 0:\n        return \"\",False\n    # checking if c is palindrome\n    if not is_palindrome(c):\n        return \"\",False\n\n    # init dict\n    d = {}\n    # check every char in s\n    for ch in s:\n        # get value of ch in dict\n        if ch in d:\n            d[ch] += 1\n        else:\n            d[ch] = 1\n\n    # check palindrome\n    if len(c) == 1:\n        # we need to reverse string for comparison\n        result = s[:]\n        result = result[::-1]\n        # check if same as c\n        for ch in c:\n            if ch in result:\n                return \"\",False\n            else:\n                break\n    # check if all chars from c is deleted\n    elif len(c) > len(s):\n        return \"\",False\n    # delete all chars in c from s\n    else:\n        # we need to reverse string for comparison\n        result = s[:]\n        result = result[::-1]\n        # delete chars from s\n        for ch in c:\n            result = result.replace(ch,\"\")\n        # check if same as c\n        for ch in", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return \" \".join(str(i) for i in s.replace(c,'').split()), reverse_delete(str(s),c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) == 1:\n        return c, not s.count(c)\n    elif len(s) == 1:\n        return s, True\n\n    r = s.replace(c[0],'')\n    c = [c]\n    while len(c) > 1:\n        r = r.replace(c.pop(0),'')\n        c.extend([s[j:i-1] for j,i in reversed(list(enumerate(s))) if s[j] == c[0] and i > j and s[i-1]!= c[0] and j < i-1])\n    return r, r == s[::-1]\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return \"\",False\n\n    result = s[0:len(s)-len(c)]\n    for i in range(0, len(c)):\n        result = result.replace(c[i], \"\")\n\n    return result,result==s[::-1]\n\n\"\"\"\ntest case\n\"\"\"\n\ntest_cases = [\n    (\"abcde\", \"ae\", \"bcd\", False),\n    (\"abcdef\", \"b\", \"acdef\", False),\n    (\"abcdedcba\", \"ab\", \"cdedc\", True),\n    (\"abcde\", \"a\", \"\", True),\n    (\"abcdedcba\", \"aa\", \"abcdedcba\", True),\n    (\"abcdedcba\", \"b\", \"cdedcba\", True),\n    (\"abcdedcba\", \"bb\", \"abcdedcba\", True),\n]\n\nfor case in test_cases:\n    print(reverse_delete(*case))\n\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return(\"''\",False)\n    if len(c) == 0:\n        return(s,False)\n    if s == c:\n        return(s,True)\n    if len(s)<len(c):\n        l = len(s)-len(c)\n        res = []\n        for i in range(0,l):\n            res.append(s[len(c)-1-i])\n        for i in range(0,len(s)-len(c)):\n            res.append(s[i])\n        res.reverse()\n        res = \"\".join(res)\n        if res == s:\n            return(res,True)\n        else:\n            return(res,False)\n    else:\n        l = len(c)-len(s)\n        res = []\n        for i in range(0,l):\n            res.append(c[len(s)-1-i])\n        for i in range(0,len(c)-len(s)):\n            res.append(s[i])\n        res.reverse()\n        res = \"\".join(res)\n        if res == c:\n            return(res,True)\n        else:\n            return(res,False)\n\ns = raw_input(\"Enter string: \")\nc =", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = s\n    if len(s) > len(c):\n        if s[:len(c)] == c:\n            result = s[len(c):]\n    else:\n        if s[len(c):] == c:\n            result = s[:len(c)]\n    if result == result:\n        return result, True\n    else:\n        return result, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    n = len(s)\n    m = len(c)\n    if m < n:\n        return (\"\",False)\n    if m == n:\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    if m == 0:\n        return (s,False)\n    result = s\n    start = 0\n    result = \"\"\n    index = 0\n    while index < m:\n        for x in range(m):\n            result = result.replace(c[x],'')\n        if reverse_delete(result,c) == (s,True):\n            return (result,True)\n        else:\n            result = \"\"\n        index += 1\n        start += 1\n    return (result,False)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s, c = list(map(list, zip(*sorted(zip(s, c)))))[:-1], list(map(list, zip(*sorted(zip(c, s)))))\n    if s == c:\n        return \"\", True\n    else:\n        s = \"\".join(s)\n        c = \"\".join(c)\n        for i in s:\n            if i in c:\n                s = s[:i-1] + s[i+1:]\n        s, c = s[0] + s[1:], c[0] + c[1:]\n        return s, not s == c\n\ns, c = \"abcdef\", \"b\"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    pal = True\n    new_s = s\n    for i in range(len(c)):\n        if c[i] in s:\n            new_s = new_s.replace(c[i], \"\", 1)\n        else:\n            new_s = new_s + c[i]\n\n    if new_s == new_s[::-1]:\n        pal = True\n    else:\n        pal = False\n    return (new_s,pal)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    def is_valid(s):\n        #c = set(c)\n        for i in s:\n            if i not in c:\n                return False\n        return True\n\n    if not s:\n        return (\"\",True)\n\n    if not c:\n        return (s, True)\n\n    #from sets import Set\n    if not s or not c:\n        return (\"\",True)\n\n    return (\"\", True) if not is_valid(s) else (reverse_delete(s[::-1],c[::-1]), True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= 0:\n        return ('',False)\n\n    if len(c) <= 0:\n        return (s,False)\n\n    # delete characters from s that are equal to any character in c\n    deleted_str = ''\n    for c in s:\n        if c in c:\n            deleted_str += s.find(c) # replace the character with the index where it was found in the string\n    if deleted_str == s:\n        return (s,True)\n\n    # if the character was not found in the c string then it was not deleted from the original string\n    if len(deleted_str) > len(s):\n        return (s,False)\n\n    # check if the string is palindrome\n    reversed_str = ''\n    for char in deleted_str[::-1]:\n        reversed_str += char\n    if s == reversed_str:\n        return (deleted_str,True)\n    else:\n        return (deleted_str,False)\n</s>"]]