[["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write code here\n    # s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    # s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    # s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverse(s):\n        return s[::-1]\n    def palindrome(s):\n        return s == reverse(s)\n    # def reverse_delete(s,c):\n    #     \"\"\"Task\n    #     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    #     then check if the result string is palindrome.\n    #     A string is called palindrome if it reads the same backward as forward.\n    #     You should return a tuple containing the result string and True/False for the check.\n    #     Example\n    #     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    #     For s = \"abcdef\", c = \"b\"  the result should be (", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    n = len(s)\n    m = len(c)\n    if n > m:\n        return reverse_delete(s,c[:m])\n    else:\n        result = \"\"\n        for i in range(0,n):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == s[n:m]:\n            return (result,True)\n        else:\n            return (result,False)\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) < len(c):\n        return (s,False)\n    elif len(s) > len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s.replace(s[i],'')\n        for i in range(len(s)):\n            if s[i] == s[-1-i]:\n                return (s,True)\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    s = s.lower()\n    c = c.lower()\n    for i in range(len(s)):\n        if s[i] in c:\n            s = s[:i] + s[i + 1:]\n    if s == s[::-1]:\n        return s, True\n    else:\n        return s, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.upper()\n    c = c.upper()\n    if len(s) <= len(c):\n        if c in s:\n            if c == s[-1]:\n                s = s[:-1]\n            else:\n                s = s[:-1] + s[-1]\n        else:\n            s = s + c\n    else:\n        print(\"Length of s cannot be greater than c\")\n        return\n    if s == s[::-1]:\n        return s,True\n    else:\n        return s,False\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = list(s)\n    c = list(c)\n    for i in s:\n        for j in c:\n            if i == j:\n                s.remove(i)\n    return (''.join(s), ''.join(c) == s[::-1])\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    if len(s) < len(c):\n        return (\"\",False)\n    for i in range(len(c)):\n        if c[i] in s:\n            result += s.replace(c[i],'')\n    if result == s[::-1]:\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    c = list(c)\n    if len(s) <= len(c):\n        return (s,False)\n    elif len(s) > len(c):\n        return (s[0:len(c)],True)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                s = s[0:i] + s[i+1:]\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    # It would be better if you write your code in function\n    # Return True if it is palindrome\n    # Return False if it is not palindrome\n    # If it is palindrome, then the length of s is equal to the length of c\n    # If it is not palindrome, then the length of s is not equal to the length of c\n\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    else:\n        return (s,False)\n\ns = input(\"Enter the string \")\nc = input(\"Enter the string \")", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = len(s)\n    if len(c) == 0:\n        return s,False\n    if len(s) < len(c):\n        return s,False\n    for i in range(l):\n        if s[i] == c[0]:\n            s = s[:i] + s[i + 1:]\n        else:\n            break\n    if s == s[::-1]:\n        return s,True\n    else:\n        return s,False\n\nreverse_delete('abcde','ae')\nreverse_delete('abcdef','b')\nreverse_delete('abcdedcba','ab')\nreverse_delete('abc','c')\nreverse_delete('abc','abc')\nreverse_delete('abc','abcd')\nreverse_delete('abc','abcdef')\nreverse_delete('abc','abcdefg')\nreverse_delete('abc','abcdefgh')\nreverse_delete('abcdef','abc')\nreverse_delete('abcdef','abcdef')\nreverse_delete('abcdef','abcdefg')\nreverse_delete('abcdef','abcdefgh')\nreverse_delete('abcdef", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    #s = \"abcde\"\n    #c = \"ae\"\n    #s = \"abcdef\"\n    #c = \"b\"\n    #s = \"abcdedcba\"\n    #c = \"ab\"\n    #s = \"abcde\"\n    #c = \"ae\"\n    #s = \"abcdef\"\n    #c = \"b\"\n    #s = \"abcdedcba\"\n    #c = \"ab\"\n    #s = \"abcde\"\n    #c = \"ae\"\n    #s = \"abcdef\"\n    #c = \"b\"\n    #s = \"abcdedcba\"\n    #c = \"ab\"\n    #s = \"abcde\"\n    #c = \"ae\"\n    #s = \"abcdef\"\n    #c = \"b\"\n    #s = \"abcdedcba\"\n    #c = \"ab\"\n    #s = \"abcde\"\n    #c = \"ae\"\n    #s = \"abcdef\"\n    #c = \"b\"\n    #s = \"abcdedcba\"\n    #c = \"ab\"\n    #s = \"abcde\"\n    #c = \"ae\"\n    #s = \"abcdef\"\n    #c = \"b\"\n    #", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    import re\n    import string\n    result = \"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in c:\n            count += 1\n            result += s[i]\n        else:\n            result += s[i]\n    if count == len(c):\n        result = re.sub(r'(.)\\1{'+str(len(c))+'}', r'\\1', result)\n        if result == reverse(result):\n            return (result,True)\n        else:\n            return (result,False)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    flag = True\n    if len(s) <= len(c):\n        for i in range(len(s)):\n            for j in range(len(c)):\n                if s[i] == c[j]:\n                    s.pop(i)\n                    break\n        if s == reversed(s):\n            flag = True\n        else:\n            flag = False\n    else:\n        flag = False\n    return s,flag", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def is_palindrome(s):\n        l = len(s)\n        return s == s[::-1]\n\n    s = s.lower()\n    c = c.lower()\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s[:i] + s[i+1:]\n\n    result = is_palindrome(s)\n\n    return result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    length = len(s)\n    new = \"\"\n    count = 0\n    for i in range(length):\n        if s[i]!= c[count]:\n            new += s[i]\n        else:\n            count += 1\n    if s == new:\n        return (new,True)\n    else:\n        return (new,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Input validation\n    assert isinstance(s, str), \\\n        'Invalid input type for s, use str'\n    assert isinstance(c, str), \\\n        'Invalid input type for c, use str'\n\n    # Find the length of the string\n    len_s = len(s)\n\n    # If the string is empty, return ('',False)\n    if len_s == 0:\n        return ('', False)\n\n    # Find the length of the string\n    len_c = len(c)\n\n    # If the string is empty, return ('',False)\n    if len_c == 0:\n        return (s, False)\n\n    # Find the length of the string\n    len_result = len_s - len_c\n\n    # If the length is zero, then it is palindrome\n    if len_result == 0:\n        return (s, True)\n\n    # Find the index of the string\n    index = 0\n\n    # Find the index of the string\n    for index in range(0, len_s):\n        # If the current character is not equal to the character in the string c, then increment the index\n        if s[index]!= c[index % len_c]:\n            continue\n        else:\n            break\n\n    # Find the index of the string\n    for index in range(0, len_s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    import re\n    from functools import reduce\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n            c.pop(i)\n    res = \"\".join(s)\n    if reduce(lambda x, y: x == y, map(lambda x: res[x-1], range(len(res)-1,-1,-1))):\n        return res,True\n    else:\n        return res,False\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.upper()\n    c = c.upper()\n    if len(s) < len(c):\n        return s,False\n    result = []\n    for i in range(len(s)):\n        if s[i] not in c:\n            result.append(s[i])\n    result.reverse()\n    return ''.join(result),True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if s == c:\n        return (s,False)\n    if len(s) < len(c):\n        return (\"\",False)\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            s = s[0:i]+s[i+1:]\n            if s == c:\n                return (s,True)\n            else:\n                return (s,False)\n    return (s,False)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(0,len(s)):\n            if s[i]!= c[0]:\n                result += s[i]\n            else:\n                result += s[(len(c)-1)-i]\n        return (result, palindrome(result))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return reverse_delete(s[:-1],c)\n    else:\n        if s[-len(c):] == c:\n            return reverse_delete(s[:-len(c)],c)\n        else:\n            return s[:-len(c)],False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == len(c):\n        return (s,True)\n    else:\n        return (s,False)\n\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcde\",\"ae\")\n\nA:\n\nI think your problem is that you're using two separate if statements. You should only have one if statement and use elif.", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (s,False)\n    if s == c:\n        return (s,True)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    if len(s) == 0:\n        return (\"\",False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == 1 and len(c) == 1:\n        return (s,False)\n    if s[0] == c[0]:\n        result = s[1:]\n        return (result,False)\n    elif s[0]!= c[0]:\n        result = s[0:1]\n        return (result,True)\n    for i in range(0,len(s)):\n        if s[i] == c[0]:\n            result = s[i+1:]\n            return (result,False)\n        elif s[i]!= c[0]:\n            result = s[0:i]\n            return (result,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    l = len(s)\n    if l!= len(c):\n        return ('',False)\n    for i in range(l):\n        if s[i] == c[i]:\n            s.pop(i)\n    s.reverse()\n    if s == c:\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def palindrome_check(s):\n        if s == s[::-1]:\n            return True\n        else:\n            return False\n\n    def delete_char(s,c):\n        i = 0\n        while i < len(s):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1:]\n            i += 1\n        return s\n\n    s = s.lower()\n    c = c.lower()\n    if len(s) == len(c):\n        return (delete_char(s,c),palindrome_check(delete_char(s,c)))\n    else:\n        return (s,False)\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) <= 1:\n        return (s, True)\n    if len(s) <= len(c):\n        return (s, False)\n    for i in range(len(s) - len(c) + 1):\n        if s[i:i+len(c)] == c:\n            s = s[:i] + s[i+len(c):]\n    return (s, palindrome(s))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    if len(s) <= len(c):\n        print(s)\n        print(c)\n        print(\"Length of string is less than length of character.\")\n        return (s,False)\n    else:\n        new_s = \"\"\n        for i in s:\n            if c.find(i) == -1:\n                new_s += i\n        return (new_s, new_s == s[::-1])\n\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcde\",\"ae\")\n\nA:\n\nYour code is mostly fine, however, there are a few things that could be improved:\n\nYou can use a for loop to do the same thing as your if-else statement, which would be more Pythonic\nYou can use a list comprehension to find all the characters in s that are in c, which would be more efficient\nYou don't need to check if the length of s is greater than the length of c, because if it is, it will never run the for loop anyway, so the code could be reduced to this:", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    while True:\n        if s == []:\n            return (''.join(c),True)\n        if c == []:\n            return (''.join(s),False)\n        if s[0] == c[0]:\n            s.pop(0)\n            c.pop(0)\n        else:\n            break\n    return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    s_len = len(s)\n    c_len = len(c)\n    if s_len < c_len:\n        return (s,False)\n    if s_len == c_len:\n        return (s,True)\n    s_sublist = list(s)\n    c_sublist = list(c)\n    for i in range(0,s_len):\n        if s_sublist[i] == c_sublist[i]:\n            s_sublist.pop(i)\n            c_sublist.pop(i)\n        else:\n            break\n    s_sublist.reverse()\n    c_sublist.reverse()\n    s = \"\".join(s_sublist)\n    c = \"\".join(c_sublist)\n    return (s,s == c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = len(s)\n    if len(c) > l:\n        print(\"Error: The length of c is greater than the length of s\")\n        return None\n    else:\n        if len(c) == 0:\n            return (s,True)\n        else:\n            for i in range(l):\n                if s[i] == c[0]:\n                    del s[i]\n            new_s = ''\n            for i in range(l):\n                new_s += s[i]\n            return (new_s,reversed(new_s) == new_s)\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result += s[i]\n    if s == result:\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        new_s = \"\"\n        for i in range(len(s)):\n            if s[i] not in c:\n                new_s += s[i]\n        if new_s == new_s[::-1]:\n            return (new_s,True)\n        else:\n            return (new_s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    # This is the input\n    s = input(\"Enter the string to be reverse deleted: \")\n    c = input(\"Enter the character to be deleted from string: \")\n    # This is the result\n    result = []\n    # This is the loop\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            if i == 0:\n                result.append(s[len(s)-1:])\n            else:\n                result.append(s[i-i:])\n        else:\n            result.append(s[i])\n    # This is the output\n    print(result)\n    # This is the palindrome check\n    if result == s[::-1]:\n        print(True)\n    else:\n        print(False)\n\nreverse_delete(\"abcde\", \"ae\")\n\nA:\n\nAvoid global variables\nThe variables s and c are global. This means that they are visible to the whole program. As a result, you can change them from anywhere. This is bad, because it means that you can break the program by changing the values of s and c. You should avoid global variables and instead pass them as parameters to functions.\nUse a for loop\nThe code is currently using a while loop, which is fine for a while loop", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    s_len = len(s)\n    c_len = len(c)\n    new_s = ''\n    for i in range(s_len):\n        if s[i]!= c[i]:\n            new_s += s[i]\n    if new_s == s:\n        return (new_s, True)\n    else:\n        return (new_s, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def palindrome(s):\n        return s == s[::-1]\n    def delete(s,c):\n        res = []\n        for i in range(len(s)):\n            if s[i] not in c:\n                res.append(s[i])\n        return \"\".join(res)\n    s = s.lower()\n    c = c.lower()\n    if len(c) == 0:\n        return (s,palindrome(s))\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        return (delete(s,c),palindrome(delete(s,c)))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        res = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                res += s[i]\n        return (res,palindrome(res))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    import re\n    s = str(s)\n    c = str(c)\n    result = []\n    for i in range(len(s)-len(c)):\n        if s[i]!= c[0]:\n            result.append(s[i])\n    for i in range(1,len(c)):\n        result.append(s[-len(c)+i])\n    result = ''.join(result)\n    if re.match('^'+re.escape(result)+'$',result[::-1]):\n        return result,True\n    else:\n        return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[0]:\n                result += s[i]\n            else:\n                result += s[i:]\n                break\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    c = list(c)\n    s = list(s)\n    if len(c) > len(s):\n        return (\"\",False)\n    if len(s) == 0:\n        return (\"\",False)\n    for i in range(len(s)):\n        if c[i] in s:\n            s[i] = \"\"\n    return (\"\".join(s), True if s == s[::-1] else False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            result += s[i:i+len(c)]\n            s = s[i+len(c):]\n        else:\n            result += s[i]\n    return (result, is_palindrome(result))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return s,False\n    else:\n        result = ''\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if s == result:\n            return result,True\n        else:\n            return result,False\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return s,False\n    res=\"\"\n    for i in range(len(s)):\n        if s[i] in c:\n            res+=s[(len(s)-1)-i]\n    return res,is_palindrome(res)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) <= len(c):\n        return (s,True)\n    else:\n        result = s[:]\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                result = result[:i] + result[i+1:]\n        return (result,False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return (s,False)\n    else:\n        if s == c:\n            return (s,True)\n        else:\n            return (s[1:],reverse_delete(s[1:],c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=str(s)\n    c=str(c)\n    res=[]\n    for i in range(len(s)):\n        if s[i]==c[0]:\n            res.append(s[(len(s)-1)-i])\n        else:\n            res.append(s[i])\n    if res==s[::-1]:\n        return res,True\n    else:\n        return res,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if s == c:\n        return (s,False)\n    else:\n        return (''.join([reverse_delete(s[j],c)[0] for j in range(len(s))]),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    s = list(s)\n    c = list(c)\n    if len(s)<len(c):\n        return (s,False)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    s.reverse()\n    if s==s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if s == c:\n        return (\"\",True)\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                del s[i]\n    return (\"\".join(s),False) if s == c else (\"\".join(s),True)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def rev(s):\n        \"\"\"\n        Return a reversed string.\n        \"\"\"\n        return s[::-1]\n    def pal(s):\n        \"\"\"\n        Check if a string is palindrome.\n        \"\"\"\n        return s == rev(s)\n\n    s = list(s)\n    c = list(c)\n    s.reverse()\n    c.reverse()\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                s.pop(i)\n                c.pop(j)\n                break\n    return pal(''.join(s)), (''.join(s),''.join(c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # write your code here\n    s = s.replace(c,\"\")\n    c = c.replace(c,\"\")\n    if s == c:\n        return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    #reverse the string\n    s.reverse()\n    #loop through the characters of the string\n    for i in range(len(s)):\n        #check if the character is in the set\n        if s[i] in c:\n            #remove the character from the string\n            s.remove(s[i])\n    #check if the string is a palindrome\n    return s, s == s[::-1]\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def _reverse_delete(s,c):\n        res = \"\"\n        for i in range(len(s)):\n            if s[i] in c:\n                res += s[i+1:]\n        return res\n\n    def _reverse_delete2(s,c):\n        return s[:] + c.join(s[i+1:] for i in range(len(s)) if s[i] in c)\n\n    if len(s) <= len(c):\n        return (_reverse_delete(s,c),False)\n    else:\n        return (_reverse_delete2(s,c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    #s = s.replace(c,\"\")\n    #return (s, True)\n    s = s.replace(c,\"\")\n    if s == s[::-1]:\n        return (s, True)\n    else:\n        return (s, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\", False)\n    #s = s.lower()\n    #c = c.lower()\n    if len(s) == len(c):\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s.replace(s[i],\"\")\n        if s == s[::-1]:\n            return (s, True)\n        else:\n            return (s, False)\n    else:\n        return (\"\", False)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == 0:\n        return (\"\",False)\n    if len(c) > len(s):\n        return (s,False)\n    if len(s) == 1:\n        return (\"\",True)\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return (s[0:1] + s[2:],True)\n        else:\n            return (s,False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s[0:1] + s[1:],c)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result,flag = '',False\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n        else:\n            flag = True\n    return result,flag", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def is_palindrome(s):\n        if len(s) < 2:\n            return True\n        if s[0] == s[-1]:\n            return is_palindrome(s[1:-1])\n        return False\n\n    if len(s) > len(c):\n        return (s,False)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[-1]:\n            result += s[i]\n        else:\n            result += s[i + 1:]\n            c.pop()\n    if is_palindrome(result):\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return \"\",False\n    elif len(s)==len(c):\n        return s,True\n    else:\n        result=\"\"\n        for i in range(len(s)):\n            if s[i] in c:\n                result+=s[(len(s)-1)-i]\n        return result,reverse_delete(result,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    def check(s):\n        l = len(s)\n        if s == s[::-1]:\n            return True\n        else:\n            return False\n\n    def delete(s, c):\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[0]:\n                result += s[i]\n            else:\n                if len(c) == 1:\n                    break\n                else:\n                    result += s[i+1:i+len(c)]\n                    i += len(c)-1\n        return result\n\n    if len(s) == 0:\n        return \"\", False\n    else:\n        result = delete(s,c)\n        return result, check(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    n = len(s)\n    if n == 0:\n        return (s,True)\n    elif n == 1:\n        if s[0] == c[0]:\n            return ('',False)\n        else:\n            return (s,True)\n    else:\n        return (s[0:n-1] + s[n-1:],reverse_delete(s[n-1],c)[1])</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = ''\n        for i in range(0,len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            del s[i]\n            del c[i]\n    if s == c:\n        return (s, True)\n    else:\n        return (s, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s==c:\n        return (s,True)\n    if s==c:\n        return (s,False)\n    for i in range(len(s)):\n        if s[i]==c:\n            return reverse_delete(s[::-1],c)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (\"\",False)\n    elif len(s)>len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[0]:\n                if not reverse_delete(s[:i]+s[(i+1):],c)[0]==\"\":\n                    return (s,False)\n                else:\n                    return (s[:i]+s[(i+1):],True)\n\ns=\"abcdef\"\nc=\"b\"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (\"\",False)\n    elif len(s) == len(c):\n        return (\"\",False)\n    else:\n        if s == c:\n            return (\"\",False)\n        else:\n            for i in range(len(s)):\n                if s[i] == c[0]:\n                    return (s[len(s)-i-1:],False)\n            return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return \"\",False\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    if len(s) == 0 or s == c:\n        return \"\",True\n    return \"\".join(s),False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n\n    result = \"\"\n    #first check if the string is empty\n    if c in s:\n        result = s.replace(c,\"\")\n    else:\n        result = s\n    #now check if the string is palindrome\n    if result == reverse(result):\n        return (result,True)\n    else:\n        return (result,False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return s, False\n    else:\n        result = \"\"\n        i = 0\n        while i < len(s):\n            if s[i] == c[0]:\n                i += 1\n                while i < len(s):\n                    if s[i] == c[c.find(s[i])]:\n                        i += 1\n                        result += s[i]\n                    else:\n                        break\n            else:\n                result += s[i]\n            i += 1\n        return result, result == s[::-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                s.pop(i)\n                break\n    print(s)\n    return (\"\".join(s), not all(s[i] == s[-i - 1:] for i in range(len(s))))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    res = \"\"\n    for i in range(len(s)):\n        if c[i] in s:\n            res += s[i]\n        else:\n            res += s[i] + c[i]\n    return res,palindrome(res)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #c = list(c)\n    #s = list(s)\n    #c.reverse()\n    #s.reverse()\n    #c = \"\".join(c)\n    #s = \"\".join(s)\n    #s = s.lower()\n    #c = c.lower()\n    #s = s.replace(c,'')\n    #c = c.replace(s,'')\n    #s = s.replace(c,'')\n    #c = c.replace(s,'')\n    #s = s.replace(c,'')\n    #c = c.replace(s,'')\n    #s = s.replace(c,'')\n    #c = c.replace(s,'')\n    #s = s.replace(c,'')\n    #c = c.replace(s,'')\n    #s = s.replace(c,'')\n    #c = c.replace(s,'')\n    #s = s.replace(c,'')\n    #c = c.replace(s,'')\n    #s = s.replace(c,'')\n    #c = c.replace(s,'')\n    #s = s.replace(c,'')\n    #c = c.replace(s,'')\n    #", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    new_str = \"\"\n    rev_str = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            new_str += s[i]\n        else:\n            rev_str += s[i]\n    if rev_str == new_str[::-1]:\n        return (new_str,True)\n    else:\n        return (new_str,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    new = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            new += s[i]\n    if new == s[::-1]:\n        return new, True\n    else:\n        return new, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = list(s)\n    c = list(c)\n    result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n    if result == s[::-1]:\n        return result, True\n    else:\n        return result, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n\n    if len(s) == 0 or len(c) == 0:\n        return (\"\", False)\n    elif s[0] == c[0]:\n        return (s[1:], False)\n\n    result = \"\"\n    for i in range(0, len(s)):\n        if s[i]!= c[0]:\n            result += s[i]\n        else:\n            result += s[i]\n            while result[len(result) - 1] == c[0]:\n                result = result[:len(result) - 1]\n            if result == reverse(result):\n                return (result, True)\n            else:\n                result = result[1:]\n    return (result, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[0]:\n            result += s[i]\n        else:\n            for j in range(1,len(c)):\n                if s[i] == c[j]:\n                    result += s[i+j]\n            i += len(c)-1\n    return result,s == result[::-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            s = s[:i] + s[i+1:]\n    if s == s:\n        return (''.join(s),True)\n    else:\n        return (''.join(s),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = s\n    if len(s) <= len(c):\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                result = result[:i-1] + result[i+1:]\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                result = result[:i-1] + result[i+1:]\n    return result, is_palindrome(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                s.pop(i)\n                break\n    if s == reversed(s):\n        return s, True\n    else:\n        return s, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) < len(c):\n        return reverse_delete(s,c.upper())\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            s = s[:i] + s[i+1:]\n            if s == c.upper():\n                return (s,True)\n            else:\n                return reverse_delete(s,c.upper())\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    result = \"\"\n    for i in range(0,len(s)):\n        if s[i] in c:\n            result += s[(len(s)-i-1)]\n        else:\n            result += s[i]\n    return result, is_palindrome(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def reverse(s):\n        return s[::-1]\n    def delete(s,c):\n        for i,j in enumerate(s):\n            if j==c:\n                s = s[:i] + s[i+1:]\n        return s\n    def reverse_delete(s,c):\n        return delete(reverse(s),c)\n    return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            res += s[i]\n    if s == res[::-1]:\n        return res,True\n    else:\n        return res,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (''.join([s[x:x+1] for x in range(len(s)) if s[x] not in c]),bool(len(s)==len(''.join([s[x:x+1] for x in range(len(s)) if s[x] not in c]))))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    for i in range(len(s)):\n        if c.find(s[i]) == -1:\n            result += s[i]\n        else:\n            for j in range(len(c)):\n                if c[j] == s[i]:\n                    result += s[i]\n        if len(result) < len(s):\n            return (result,False)\n        else:\n            result = result[::-1]\n            return (result,True)\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    import re\n    s = s.replace('\\n','')\n    c = c.replace('\\n','')\n    if len(s) == 0 or len(c) == 0:\n        return s,False\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                s[i] = ''\n    res = ''.join(s)\n    if re.findall(r'(.)\\1{,1}',res):\n        return res,True\n    else:\n        return res,False\n\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    n = len(s)\n    m = len(c)\n    if n <= 0 or m <= 0:\n        return (s,False)\n    result = ''\n    for i in range(n):\n        if s[i] == c[0]:\n            j = i\n            for k in range(1,m):\n                if s[i+k] == c[k]:\n                    j = j + k\n                    break\n            result = s[j:j+m] + result\n        else:\n            result = s[i] + result\n    result = result[::-1]\n    return (result,str(result) == result)\n\ns = raw_input()\nc = raw_input()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.upper()\n    c = c.upper()\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    #s = s.replace(c,'')\n    #c = c.replace(c,'')\n    new_s = []\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            new_s.append(s[i])\n    new_s = ''.join(new_s)\n    return (new_s,is_palindrome(new_s))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    count = 0\n    result = ''\n    for i in s:\n        if i not in c:\n            result += i\n        else:\n            count += 1\n    if count == len(s):\n        return (result,False)\n    else:\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) == 0:\n        return s, True\n\n    elif len(s) == 0:\n        return \"\", True\n\n    else:\n        result = \"\"\n        check = True\n\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                result += s[i:]\n                s = s[:i-1]\n                break\n            elif s[i]!= c[0]:\n                result += s[i]\n        for i in range(len(c)):\n            if result[i]!= c[i]:\n                check = False\n        return result, check", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def palindrome(s):\n        if len(s) == 0:\n            return True\n        elif len(s) == 1:\n            return s == s[::-1]\n        else:\n            return s == s[::-1] + palindrome(s[1:])\n\n    def reverse_delete(s, c):\n        result = s\n        for i in range(len(s)):\n            if s[i] in c:\n                result = result[:i-1] + result[i+1:]\n        return result, palindrome(result)\n\n    return reverse_delete(s, c)\n\nreverse_delete(\"abcde\", \"ae\")\nreverse_delete(\"abcdef\", \"b\")\nreverse_delete(\"abcdedcba\", \"ab\")</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    if len(s)<len(c):\n        return (s,False)\n\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s[:i] + s[i+1:]\n\n    if s == reverse(s):\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if s[i]==c[j]:\n                s= s[:i] + s[i+1:]\n                break\n    return s, s==s[::-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return s,False\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[0]:\n            result += s[i]\n        else:\n            if result[::-1]!= s:\n                return result,False\n            else:\n                result = result[1:]\n                for j in range(len(c)):\n                    result += s[i+j+1]\n    return result,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        temp=s\n        for i in range(len(c)):\n            if temp[i]==c[i]:\n                temp=temp[:i]+temp[i+1:]\n        return (temp,True)\n\ns=input()\nc=input()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    if len(s) == 0 or len(c) == 0:\n        return (\"\", False)\n    if len(s) < len(c):\n        s, c = c, s\n    s = s.replace(c,\"\")\n    return (s,s == s[::-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    import re\n    s = s.lower()\n    c = c.lower()\n    result = \"\"\n    result = re.sub(c, \"\", s)\n    if s == result[::-1]:\n        return (result, True)\n    else:\n        return (result, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    for i in range(len(s)):\n        if s[i] in c:\n            s = s[:i]+s[(i+len(c)):]\n    return s,True if s == reverse(s) else False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    #s = s.lower()\n    #c = c.lower()\n    if len(s) == 0:\n        return (\"\", False)\n    if len(c) == 0:\n        return (s, False)\n    if len(s) == 1:\n        return (s, False)\n    if len(c) == 1:\n        return (s, False)\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            if s[i] == s[-1]:\n                return (s[0:i] + s[i+1:], True)\n            else:\n                return (s[0:i] + s[i+1:], False)\n    return (s, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            del s[i]\n            for j in range(len(s)):\n                if s[j] == s[i]:\n                    del s[j]\n    if s == s[::-1]:\n        return (''.join(s),True)\n    else:\n        return (''.join(s),False)\n\n\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return None,None\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] in c:\n            s = s[:i] + s[i+1:]\n        else:\n            result += s[i]\n    if result == s[::-1]:\n        return result,True\n    else:\n        return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s=str(s)\n    c=str(c)\n    if len(s)==len(c):\n        for i in range(len(s)):\n            if s[i]==c[i]:\n                s=s.replace(s[i],\"\")\n        if s==s[::-1]:\n            return s,True\n        else:\n            return s,False\n    else:\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        temp = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                temp += s[i]\n            else:\n                temp += s[i]\n        if temp == s:\n            return (s,True)\n        else:\n            return (temp,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    if len(s) == 0:\n        return result, True\n\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            result += s[i+1:]\n            s = s[:i+1]\n            c = c[1:]\n        else:\n            result += s[i]\n    return result, s == reverse(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    if s == c:\n        return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if s == c:\n        return (s,True)\n    if len(s) < len(c):\n        return (s,False)\n    if s == c:\n        return (s,True)\n    if len(s) < len(c):\n        return (s,False)\n    res = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            res += s[i]\n        else:\n            s = s[i:]\n            s = res + s[:i]\n            return reverse_delete(s,c)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    result = []\n    while len(s) > 0:\n        if s[0] == c[0]:\n            del s[0]\n            del c[0]\n        else:\n            result.append(s[0])\n            s.pop(0)\n            c.pop(0)\n    return result, is_palindrome(''.join(result))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    s = list(s)\n    c = list(c)\n    if len(s)<len(c):\n        return (s,False)\n    if len(s)==len(c):\n        if s==c:\n            return (s,True)\n        else:\n            return (s,False)\n    if len(s)>len(c):\n        c=reverse_delete(c,s)\n        if c==s:\n            return (s,True)\n        else:\n            return (s,False)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.remove(s[i])\n    if s==reverse(s):\n        return (s,True)\n    else:\n        return (s,False)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    check = True\n    for i in range(len(s)):\n        if s[i] in c:\n            result += s[i-i%len(s):]\n            check = False\n        else:\n            result += s[i]\n    return (result,check)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    res = \"\"\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            res += s[i]\n            del s[i]\n        else:\n            res += s[i]\n    if s == res[::-1]:\n        return res, True\n    else:\n        return res, False\n\nreverse_delete(\"abcde\", \"ae\") # result should be ('bcd', False)\nreverse_delete(\"abcdef\", \"b\") # result should be ('acdef', False)\nreverse_delete(\"abcdedcba\", \"ab\") # result should be ('cdedc', True)\n\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            for j in range(1,len(c)):\n                if s[i] == c[j]:\n                    result.append(s[i+j])\n                    i += j\n                else:\n                    break\n        else:\n            result.append(s[i])\n    print(result)\n    return result, is_palindrome(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Write your code here\n    s = s.upper()\n    c = c.upper()\n\n    if len(s)<len(c):\n        return (\"\",False)\n\n    if len(s)==len(c):\n        if s==c:\n            return (s,True)\n        else:\n            return (s,False)\n\n    if len(s)>len(c):\n        s,c=c,s\n\n    result=\"\"\n    for i in range(len(s)):\n        if s[i]!=c[i]:\n            result+=s[i]\n\n    result = result[::-1]\n\n    return (result,reverse_delete(result,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s[i] = \"\"\n    rev = s[::-1]\n    if s == rev:\n        return s,True\n    else:\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    res = \"\"\n    check = True\n    for i in range(len(s)-len(c)-1,-1,-1):\n        if s[i] in c:\n            res += s[i:i+len(c)]\n            check = False\n    return res,check\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s, False)\n    if len(s) > len(c):\n        s = s[::-1]\n        c = c[::-1]\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s[:i] + s[i+1:]\n    s = s[::-1]\n    if s == s:\n        return (s, True)\n    else:\n        return (s, False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    import re\n    import string\n    s = s.lower()\n    c = c.lower()\n    result = []\n    for i in range(len(s)):\n        if s[i] not in c:\n            result.append(s[i])\n    if re.match('^(.)*$',''.join(result)):\n        return (''.join(result),True)\n    else:\n        return (''.join(result),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('',False)\n    else:\n        if len(c) == 0:\n            return (s,True)\n        else:\n            if s[-1] == c[0]:\n                return reverse_delete(s[:-1],c[1:])\n            else:\n                return reverse_delete(s,c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def rev(s):\n        return s[::-1]\n    if len(s)<len(c):\n        return ('',False)\n    return (''.join([rev(c) if c in s else c for c in s]),True)\n\nreverse_delete('abcdef','b')\nreverse_delete('abcde','ae')\nreverse_delete('abcdef','abcdef')\nreverse_delete('abcdef','ab')", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n        else:\n            result += s[i]\n            s = s[:i]+s[(len(s)-i):]\n    return (result,s == result[::-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return (s,False)\n    else:\n        # reverse string\n        s = s[::-1]\n        c = c[::-1]\n        # delete all characters in s that are equal to any character in c\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                del s[i]\n        # check if the result string is palindrome\n        if s == s[::-1]:\n            return (s,True)\n        else:\n            return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in range(len(s)):\n        if s[i]==c[0]:\n            if c[1]!='':\n                if s[i:i+c[1].__len__()]==c[1]:\n                    del s[i]\n                    del s[i:i+c[1].__len__()]\n                else:\n                    del s[i]\n                    del s[i:i+c[1].__len__()]\n                    reverse_delete(s,c)\n                if s=='':\n                    return ('',True)\n                return (s,False)\n            else:\n                if s[i:i+c[0].__len__()]==c[0]:\n                    del s[i]\n                    del s[i:i+c[0].__len__()]\n                else:\n                    del s[i]\n                    del s[i:i+c[0].__len__()]\n                    reverse_delete(s,c)\n                if s=='':\n                    return ('',True)\n                return (s,False)\n    return (s,False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def check(s):\n        count = 0\n        for i in range(len(s)):\n            count += 1\n            if s[i] == s[len(s)-1-i]:\n                count -= 1\n        return count == 0\n\n    def delete(s,c):\n        count = 0\n        for i in range(len(s)):\n            if s[i] in c:\n                count += 1\n                del s[i]\n        return s\n\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result += s[i]\n    if check(result):\n        return (result,True)\n    else:\n        return (delete(s,c),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Write your code here\n\n    def is_palindrome(s):\n        \"\"\"Task\n        Given a string, check if it is a palindrome.\n        You should return True or False.\n        \"\"\"\n        return s == s[::-1]\n\n    def delete_char(s, c):\n        \"\"\"Task\n        Delete all the characters in s that are equal to any character in c\n        and return the result\n        \"\"\"\n        result = []\n        for i, j in zip(s, s[1:]):\n            if i!= c:\n                result.append(j)\n        return ''.join(result)\n\n    def reverse_delete(s, c):\n        \"\"\"Task\n        Delete all the characters in s that are equal to any character in c\n        and return the result\n        \"\"\"\n        result = []\n        for i, j in zip(s, s[1:]):\n            if i!= c:\n                result.append(j)\n        return ''.join(result)\n\n    # Main function\n    if len(s) == 0 or len(c) == 0:\n        return ('', False)\n    if len(s) == 1:\n        return ('', is_palindrome(s))\n    if len(c) == 1:\n        return (s, is_palind", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    if len(s) > len(c):\n        return (s,False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    i = 0\n    while i < len(s):\n        if s[i] == c[0]:\n            i += 1\n            while s[i] == c[0]:\n                i += 1\n            s = s[:i] + s[i + 1:]\n        else:\n            i += 1\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) <= len(c):\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1:]\n                break\n    else:\n        for i in range(len(c)):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1:]\n                break\n    return s, is_palindrome(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return s,False\n    for i in range(len(s)):\n        if s[i] == c[len(c)-1]:\n            s = s[:i] + s[i+1:]\n    return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] in c:\n            result += s[i]\n            s = s[:i]+s[(i+1):]\n        else:\n            result += s[i]\n    if result == s[::-1]:\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if not c:\n        return s, False\n\n    l = len(c)\n    r = len(s) - len(c)\n    if r < 0:\n        return s, False\n\n    if s == c:\n        return s, True\n    if r == 0:\n        return s, False\n    if r == 1:\n        if s[l-1] == c[l-1]:\n            return s[:-1], True\n        else:\n            return s, False\n\n    r = r - 1\n    if l == 1:\n        if s[r] == c[l-1]:\n            return s[:r] + s[l:], True\n        else:\n            return s, False\n\n    if s[r] == c[l-1]:\n        return s[:r] + s[l:], True\n    else:\n        return s[:r] + s[l:], False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    import string\n    def reverse(s):\n        return s[::-1]\n    def palindrome(s):\n        return s == reverse(s)\n    s = s.lower()\n    c = c.lower()\n    if len(s) == 0 and len(c) == 0:\n        return (\"\",True)\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result += s[i]\n    return (result,palindrome(result))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write code here\n    l = len(s)\n    if l < len(c):\n        return (s,False)\n    elif l == len(c):\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n                return (s,False)\n    else:\n        s = s + c[l-len(s):]\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    s = s.lower()\n    c = c.lower()\n    s = list(s)\n    c = list(c)\n    for i in s:\n        if i in c:\n            s.remove(i)\n    s = ''.join(s)\n    if s == s[::-1]:\n        return s, True\n    else:\n        return s, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    if len(s) < len(c):\n        return (result,False)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result += s[i+1:]\n            s = s[:i+1]\n            break\n    result += s\n    result = result[::-1]\n    return (result,result == s[::-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return reverse_delete(s,c)\n    else:\n        if s==c:\n            return (s,True)\n        else:\n            new_s=[]\n            for i in range(len(s)):\n                if s[i]==c[0]:\n                    new_s.append(s[i:i+1]+c[c.index(s[i])])\n                    s=s[i+1:]\n                    continue\n                else:\n                    new_s.append(s[i])\n            return (''.join(new_s),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) <= len(c):\n        return s, False\n    else:\n        return \"\", False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    result = []\n    for i in range(len(s)):\n        if s[i] not in c:\n            result.append(s[i])\n    if s == ''.join(result):\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    if len(s) <= len(c):\n        return s,False\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == s[::-1]:\n            return result,True\n        else:\n            return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == len(c):\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        return result, not palindrome(result)\n    else:\n        return \"\", False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    import re\n    import itertools\n    s = s.replace(' ','')\n    c = c.replace(' ','')\n    s = list(s)\n    c = list(c)\n    s = ''.join(c for c in s if c not in c)\n    if re.search('^'+s+'$',s):\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s,c = list(s),list(c)\n    #s.reverse()\n    #c.reverse()\n    count = 0\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                s.pop(i)\n                c.pop(j)\n                count += 1\n    if count == len(s):\n        return (''.join(s),True)\n    else:\n        return (''.join(s),False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s)<len(c):\n        return \"\",False\n    else:\n        s = list(s)\n        c = list(c)\n        if len(s)==len(c):\n            for i in range(len(s)):\n                if s[i]==c[i]:\n                    s.pop(i)\n        s = ''.join(s)\n        return s,s==s[::-1]\n\ns=input()\nc=input()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Start typing your code below\n    # Code\n    # End typing your code below\n    s = list(s)\n    c = list(c)\n    # print(s)\n    # print(c)\n    res = []\n    flag = False\n    for i in range(len(s)):\n        if s[i] not in c:\n            res.append(s[i])\n        else:\n            flag = True\n    if flag == False:\n        return (\"\".join(res),True)\n    else:\n        return (\"\".join(res),False)\n\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        new=[]\n        for i in range(len(s)-len(c)+1):\n            if s[i:i+len(c)]!=c and s[i:i+len(c)]!=s[i+len(c):]:\n                new.append(s[i])\n        return (''.join(new),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return \"\",False\n    else:\n        return reverse_delete(s[1:],c) + s[0],True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def remove_char(s,c):\n        new_s = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[0]:\n                new_s += s[i]\n        return new_s\n\n    def reverse(s):\n        new_s = \"\"\n        for i in range(len(s)-1,-1,-1):\n            new_s += s[i]\n        return new_s\n\n    new_s = remove_char(s,c)\n    if new_s == s:\n        return (s,True)\n    else:\n        new_c = reverse(c)\n        new_s = reverse(new_s)\n        return (new_s,new_c == new_s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == 1:\n        return (s,False)\n    if len(c) == 1:\n        return (s,True)\n    # print(s)\n    # print(c)\n    # print(\"\")\n    # print(\"\")\n    s = list(s)\n    c = list(c)\n    s.reverse()\n    # print(s)\n    # print(\"\")\n    # print(\"\")\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s[i] = \"\"\n            c[i] = \"\"\n            # print(s[i])\n            # print(\"\")\n    # print(s)\n    # print(c)\n    # print(\"\")\n    # print(\"\")\n    if s == c:\n        return (\"\",True)\n    else:\n        return (\"\".join(s),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in range(len(s)):\n        if s[i]==c[0]:\n            s=s[0:i]+s[i+1:]\n    return s,True if s==s[::-1] else False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    result = []\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    for i in range(0,len(s)):\n        if c[0]!= s[i]:\n            result.append(s[i])\n        else:\n            for j in range(1,len(c)):\n                if c[j]!= s[i]:\n                    result.append(s[i])\n                else:\n                    break\n    result.reverse()\n    return (\"\".join(result), True if s == result else False)\n\n\ns = input(\"Enter the string:\")\nc = input(\"Enter the character:\")", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Create a list to store the characters of s\n    s = list(s)\n\n    # Create a list to store the characters of c\n    c = list(c)\n\n    # Initialize the result string\n    result = \"\"\n\n    # Initialize the flag\n    flag = True\n\n    # Initialize the index of the first character of s\n    start_index = 0\n\n    # Loop through the characters of s\n    for index,char in enumerate(s):\n\n        # If the character is equal to any character in c\n        if char in c:\n\n            # Remove the character from the list\n            s.pop(index)\n\n            # Remove the character from the list\n            c.pop(index)\n\n            # Reverse the characters of s and c\n            c.reverse()\n            s.reverse()\n\n            # Reverse the characters in the result string\n            result += \"\".join(reversed(c))\n\n            # Reverse the characters in the result string\n            result += \"\".join(reversed(s))\n\n            # Reverse the characters in the result string\n            result += \"\".join(reversed(c))\n\n            # If the result string is palindrome\n            if result == result:\n\n                # Set the flag to False\n                flag = False\n\n            # If the result string is not pal", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write code here\n    if len(s) < len(c):\n        return s,False\n    for i in range(len(s)):\n        if s[i]==c[i]:\n            s = s[:i] + s[i+1:]\n            if len(s)<len(c):\n                return s,False\n    return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return \"\",False\n    new_s = \"\"\n    i = 0\n    while i < len(s):\n        if s[i]!= c[0]:\n            new_s += s[i]\n        else:\n            i += 1\n            while i < len(s) and s[i] == c[0]:\n                new_s += s[i]\n                i += 1\n            if i < len(s):\n                if s[i] == c[-1]:\n                    new_s += s[i]\n                    i += 1\n                else:\n                    new_s += s[i]\n                    i += 1\n                    while i < len(s) and s[i]!= c[-1]:\n                        new_s += s[i]\n                        i += 1\n            else:\n                break\n    return new_s, new_s == s[::-1]</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    def reverse(s):\n        return s[::-1]\n\n    def delete(s,c):\n        return ''.join([i for i in s if i not in c])\n\n    def palindrome(s):\n        return s == reverse(s)\n\n    result = []\n    if len(s) == 0:\n        return result, palindrome(s)\n    if len(c) == 0:\n        return result, palindrome(s)\n    if len(s) == 1:\n        return result, palindrome(s)\n    if len(c) == 1:\n        return result, palindrome(s)\n\n    if s[0] == c[0]:\n        return result, palindrome(delete(s,c))\n    else:\n        return result, palindrome(delete(s,c)+s[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # your code here\n    if len(s) < len(c):\n        return (s, False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n        if s == s:\n            return (s,True)\n        else:\n            return (s,False)\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    def rev(s):\n        return s[::-1]\n\n    #If the input string is empty\n    if len(s) == 0:\n        return s, True\n\n    #If the input string is equal to the character in the set\n    if s == c:\n        return s, False\n\n    #If the input string is not equal to the character in the set\n    #Then check if the character at the end is equal to the character at the beginning\n    #If not then return False\n    if s[-1]!= s[0]:\n        return s, False\n\n    #If the character at the end is equal to the character at the beginning\n    #Then delete the character at the end and the character at the beginning\n    #And check if the result is palindrome\n    s = s[:-1] + rev(s[1:])\n\n    #If the result is palindrome then return the result\n    #Otherwise continue with the remaining characters\n    if rev(s) == s:\n        return s, True\n    else:\n        return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == '':\n        return ('',False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    def reverse(s):\n        return s[::-1]\n\n    def is_palindrome(s):\n        return s == reverse(s)\n\n    def delete(s,c):\n        for i in c:\n            s = s.replace(i,\"\")\n        return s\n\n    def reverse_delete(s,c):\n        if not c:\n            return s,True\n        if s == '':\n            return '',True\n        if s[0] == c[0]:\n            return reverse_delete(delete(s,c),c[1:])\n        else:\n            return reverse_delete(s,c[1:])\n\n    return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def rev(s):\n        return s[::-1]\n    def is_palindrome(s):\n        if len(s) <= 1:\n            return True\n        return s[::2] == s[1::2]\n    def reverse_delete(s,c):\n        if len(s) == 0:\n            return ('',True)\n        if len(s) == 1:\n            return (s,True)\n        if len(c) == 0:\n            return (s,False)\n        if len(c) == 1:\n            return (s,is_palindrome(s[1:]))\n        if c[0] == s[0]:\n            return reverse_delete(s[1:],c[1:])\n        if c[0] == s[-1]:\n            return reverse_delete(s[:-1],c[1:])\n        return reverse_delete(s,c[1:]) + (s[-1],is_palindrome(s[1:-1]))\n    return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if s == c:\n        return (s,False)\n    else:\n        result = []\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result.append(s[i])\n        return (''.join(result),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.upper()\n    c = c.upper()\n    result = \"\"\n    reverse = \"\"\n    if len(s) == len(c):\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                result += s[i]\n            else:\n                result += s[i]\n                reverse += s[i]\n    else:\n        result = s\n        reverse = s\n    return (result,reverse == result[::-1])</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    if s==c:\n        return (s,False)\n    else:\n        if len(s)<len(c):\n            s = c\n            c = s\n            return reverse_delete(s,c)\n        else:\n            for i in range(len(s)-len(c)+1):\n                if s[i:i+len(c)]==c:\n                    s=s[:i]+s[i-len(c):]+s[i-len(c)+len(c):]\n                    return reverse_delete(s,c)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return s,False\n    else:\n        result = \"\"\n        for i in range(len(s)-len(c)+1):\n            if s[i:i+len(c)] == c:\n                result = result + s[i:i+len(c)]\n                s = s.replace(s[i:i+len(c)],'')\n        if s == result:\n            return s,True\n        else:\n            return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    s = list(s)\n    c = list(c)\n\n    result = []\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result.append(s[i])\n    result = \"\".join(result)\n\n    return result, is_palindrome(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            result = result + s[i+1:]\n            s = s[:i+1]\n            c = c[1:]\n        elif s[i] == c[-1]:\n            result = result + s[0:i-1]\n            s = s[i+1:]\n            c = c[:-1]\n        else:\n            pass\n    return (result, True if result == s[::-1] else False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # The result string\n    result = \"\"\n    # The characters that we need to keep\n    keep = \"\"\n    # The characters that we need to delete\n    delete = \"\"\n    # The characters that we need to add\n    add = \"\"\n    # The characters that we need to reverse\n    reverse = \"\"\n    # The count of the characters that we need to delete\n    count = 0\n    # The length of the string\n    length = len(s)\n\n    # We are going to make the length of the string as long as the longest string\n    while length < len(c):\n        # We are going to delete the characters that are equal to any character in c\n        for i in range(length):\n            if s[i] == c[i]:\n                # We need to increment the count of the characters that we need to delete\n                count += 1\n                # We need to add the character to the delete list\n                delete += s[i]\n                # We need to delete the character from the result string\n                result += \"\"\n                # We need to add the character to the keep list\n                keep += s[i]\n                # We need to add the character to the reverse list\n                reverse += s[length - i - 1]\n\n    # We are going to add the characters that we need to", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.upper()\n    c = c.upper()\n    if len(s) < len(c):\n        return (s,False)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            continue\n        result += s[i]\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return s,False\n    for i in range(len(s)):\n        if s[i]==c[0]:\n            s=s[1:]+s[len(s)-1:]\n            break\n    if s==reverse(s):\n        return s,True\n    return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    s = list(s)\n    c = list(c)\n    s.reverse()\n    c.reverse()\n    for i in s:\n        if i in c:\n            s.remove(i)\n    if s == c:\n        return s, True\n    else:\n        return s, False\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.upper()\n    c = c.upper()\n    if len(s)<len(c):\n        return s,False\n    else:\n        if s == c:\n            return s,True\n        else:\n            result = ''\n            for i in range(len(s)):\n                if s[i]==c[0]:\n                    result = result + s[i-(len(c)-1):i]\n                    s = s[i-(len(c)-1):]\n                else:\n                    result = result + s[i]\n            return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # here we are checking if the result string is palindrome\n    result = s\n    # this is for loop to delete all the characters in s that are equal to any character in c\n    for i in range(len(s)):\n        if c == s[i]:\n            result = result.replace(s[i],\"\")\n\n    # here we are checking if the result string is palindrome\n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    if len(s) > len(c):\n        return (s,False)\n    s = s.replace(c[0],'')\n    if s == c:\n        return (s,True)\n    else:\n        return (s,False)\n\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"def\")\n\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"def\")\n\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"def\")\n\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"def\")\n\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"def\")\n\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdef\",\"def\")\n\nreverse_delete(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    i = 0\n    j = 0\n    while i < len(s):\n        if s[i] == c[j]:\n            i += 1\n            j += 1\n        else:\n            s[i]\n            i += 1\n    if s == s[::-1]:\n        return s, True\n    else:\n        return s, False\n\ns = input()\nc = input()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.upper()\n    c = c.upper()\n    if len(s)!= len(c):\n        return (s,False)\n    else:\n        for i in range(0,len(s)):\n            if s[i] == c[i]:\n                del s[i]\n                del c[i]\n            else:\n                pass\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (\"\",False)\n    else:\n        reverse = \"\"\n        for i in range(len(s)-len(c)+1):\n            if s[i:i+len(c)] == c:\n                for j in range(len(c)):\n                    reverse += s[i+j+1:i+len(c)+j]\n            else:\n                reverse += s[i:i+len(c)]\n        if s == reverse:\n            return (reverse,True)\n        else:\n            return (reverse,False)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (\"\",False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) <= len(c):\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                del s[i]\n                s = reverse_delete(s,c[1:])\n                break\n    else:\n        for i in range(len(c)):\n            if c[i] == s[0]:\n                del c[i]\n                c = reverse_delete(c,s[1:])\n                break\n    result = \"\"\n    for i in range(len(s)):\n        result += s[i]\n    if result == reverse(result):\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n            if s == c:\n                return (s,True)\n            else:\n                return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    # s = input(\"Please enter the string s : \")\n    # c = input(\"Please enter the string c : \")\n    s = str(s)\n    c = str(c)\n    if len(s) < len(c):\n        return s, False\n    else:\n        if s[0] == c[0]:\n            return s[1:], False\n        else:\n            return s[1:], True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    if len(c) == 0:\n        return (s,False)\n    if len(s) == 1 and len(c) == 1:\n        return (s,c == s)\n    if len(s) == 1 and len(c) > 1:\n        return (s,False)\n    if len(s) > 1 and len(c) == 1:\n        return (s,False)\n    if len(s) > 1 and len(c) > 1:\n        s = s.replace(c,'')\n        s = s.replace(c,'')\n        if s == '':\n            return (s,True)\n        else:\n            return (s,False)\n\n\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # write your code here\n\n    s = list(s)\n    c = list(c)\n    s = \"\".join(s)\n    c = \"\".join(c)\n    s = s.lower()\n    c = c.lower()\n\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s[:i] + s[i+1:]\n            break\n    else:\n        return s, True\n\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s[:i] + s[i+1:]\n            break\n    else:\n        return s, True\n\n    return s, s == reverse(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    if len(s) == 0 or len(c) == 0:\n        return \"\",False\n    for i in range(len(s)):\n        if s[i]!= c[0]:\n            result += s[i]\n            continue\n        else:\n            for j in range(1,len(c)):\n                if s[i] == c[j]:\n                    result += s[i+1-j]\n                    break\n            else:\n                result += s[i]\n    if result == s[::-1]:\n        return result,True\n    else:\n        return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def reverse(s):\n        \"\"\"Task\n        We are given a string s, you have to return a string that is the same as s but with the characters in reverse order.\n        Example\n        For s = \"abcde\", the result should be 'deabc'\n        \"\"\"\n        result = \"\"\n        for i in range(len(s)):\n            result += s[len(s)-i-1]\n        return result\n    def palindrome(s):\n        \"\"\"Task\n        We are given a string s, you have to return True if s is a palindrome, otherwise return False\n        Example\n        For s = \"abc\", the result should be True\n        For s = \"aab\", the result should be False\n        \"\"\"\n        if s == reverse(s):\n            return True\n        else:\n            return False\n    s = input().upper()\n    c = input().upper()\n    if len(c) > len(s):\n        return (reverse(s),False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n        return (s,palindrome(s))\n\ns = input().upper()\nc = input().upper()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == 1 or len(c) == 1:\n        return (s,False)\n    if c[0] == s[0]:\n        return reverse_delete(s[1:],c[1:])\n    if s[0] == c[0]:\n        return reverse_delete(s[0:-1],c[0:-1])\n    if s[0]!= c[0]:\n        return (s[0:-1] + s[-1],False)\n    return (reverse_delete(s[1:],c[1:]) + s[0],True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) <= len(c):\n        for i in range(len(s)):\n            if s[i] in c:\n                s = s[:i] + s[i+1:]\n    else:\n        for i in range(len(c)):\n            if c[i] in s:\n                s = s[:i] + s[i+1:]\n    if s == s[::-1]:\n        return s, True\n    else:\n        return s, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    if len(s)==len(c):\n        if s==c:\n            return (s,True)\n        else:\n            return (s,False)\n    for i in range(len(s)):\n        if s[i]==c[0]:\n            s=s[1:]\n        else:\n            if c[0]==s[-1]:\n                s=s[:-1]\n            else:\n                s=s+s[1:]\n    return (s,False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    import re\n    s = s.lower()\n    c = c.lower()\n    res = ''\n    if len(s) <= len(c):\n        for i in range(len(c)):\n            if c[i] in s:\n                res = res + s[i]\n            else:\n                break\n    else:\n        res = s\n    if re.match('^'+res+'$',res[::-1]):\n        return res,True\n    else:\n        return res,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    if len(s) == 0 or len(c) == 0:\n        return (\"\", False)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    if s == c:\n        return (s, True)\n    else:\n        return (\"\", False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.upper()\n    c = c.upper()\n    r = []\n    for i in s:\n        if i not in c:\n            r.append(i)\n    if len(r) == len(s):\n        return (''.join(r), True)\n    else:\n        return (''.join(r), False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) <= len(c):\n        print(\"{} is not palindrome\".format(s))\n        return\n    else:\n        r = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                r += s[i]\n        if s == r[::-1]:\n            print(\"{} is palindrome\".format(r))\n        else:\n            print(\"{} is not palindrome\".format(r))\n\nreverse_delete(\"abcde\", \"ae\")\nreverse_delete(\"abcdef\", \"b\")\nreverse_delete(\"abcdedcba\", \"ab\")\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    if len(s)<len(c):\n        return s, False\n    else:\n        i=0\n        for i in range(len(s)):\n            if s[i]==c[i]:\n                del s[i]\n        return s, len(s)==len(reversed(s))</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write code here\n    a = s\n    b = c\n    c = a\n    a = a.replace(b,'')\n    if a == c:\n        return (a,True)\n    else:\n        return (a,False)\n\nreverse_delete(\"abcde\", \"ae\")\nreverse_delete(\"abcdef\", \"b\")\nreverse_delete(\"abcdedcba\", \"ab\")\n\n\n\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result += s[i]\n    if result == s[::-1]:\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Write your code here\n    if len(s) <= len(c):\n        for i in range(0,len(s)):\n            if s[i] == c[-1]:\n                s = s[:i] + s[i+1:]\n                print(s)\n                print(c)\n                print(\"------------------\")\n                break\n\n    return (s,True)\n\ns = input(\"Enter string\")\nc = input(\"Enter character\")", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write code here", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    #s.reverse()\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                s.pop(i)\n                break\n    #s.reverse()\n    return (''.join(s),c == s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 and len(c) == 0:\n        return (\"\", True)\n    if len(s) == 0 or len(c) == 0:\n        return (\"\", False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    if s[-1] == c[-1]:\n        return reverse_delete(s[:-1],c[:-1])\n    return (s[0:1]+c+s[-1:0:-1],False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[i]:\n                s=s.replace(s[i],\"\")\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    if len(s) < len(c):\n        return s,False\n    if len(s) > len(c):\n        return s[::-1],False\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    return \"\".join(s),True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    if len(s) <= len(c):\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                for j in range(1,len(c)):\n                    if s[i] == c[j]:\n                        s = s[:i] + s[i+1:]\n                        break\n    if len(s) >= len(c):\n        for i in range(len(s)):\n            if s[i] == c[len(c)-1]:\n                for j in range(len(c)-1,-1,-1):\n                    if s[i] == c[j]:\n                        s = s[:i] + s[i+1:]\n                        break\n    result = s\n    if result == reverse(result):\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return s, False\n    else:\n        s = list(s)\n        c = list(c)\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s.pop(i)\n                c.pop(i)\n        return ''.join(s), True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = list(s)\n    c = list(c)\n    #s.reverse()\n    #c.reverse()\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                s.pop(i)\n                break\n    s = \"\".join(s)\n    c = \"\".join(c)\n    if s == c:\n        return (s,True)\n    else:\n        return (s,False)\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\nreverse_delete(\"abcdedcba\",\"cb\")\nreverse_delete(\"abcdedcba\",\"dc\")\nreverse_delete(\"abcdedcba\",\"ed\")\nreverse_delete(\"abcdedcba\",\"ab\")\nreverse_delete(\"abcdedcba\",\"cba\")\nreverse_delete(\"abcdedcba\",\"cd\")\nreverse_delete(\"abcdedcba\",\"abcd\")\nreverse_delete(\"abcdedcba\",", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        result=s[:len(c)]\n        result=result[::-1]\n        result+=s[len(c):]\n        if result==s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)"]]