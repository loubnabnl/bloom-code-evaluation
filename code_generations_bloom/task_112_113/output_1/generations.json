[["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    else:\n        if s[0] == c[0]:\n            return (s[1:],False)\n        else:\n            return (s[1:],True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    #s = input(\"Enter the string : \")\n    #c = input(\"Enter the character : \")\n    #s = s.lower()\n    #c = c.lower()\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == reverse(result):\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[0]:\n                s=s[0:i]+s[(i+len(c)):]\n                if s==s[::-1]:\n                    return (s,True)\n                else:\n                    return (s,False)\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == reverse(result):\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    else:\n        if len(s) < len(c):\n            return (\"\",False)\n        else:\n            for i in range(len(s)):\n                if s[i] == c[i]:\n                    s = s[:i] + s[i+1:]\n            return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        if s==c:\n            return (s,True)\n        else:\n            result=[]\n            for i in range(len(s)):\n                if s[i]==c[i]:\n                    result.append(s[i])\n                else:\n                    result.append(s[i])\n            return (\"\".join(result),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) < len(c):\n        return (\"\",False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    else:\n        if s[0] == c[0]:\n            return reverse_delete(s[1:],c[1:])\n        else:\n            return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) == 0 or len(c) == 0:\n        return ('',False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (s[0:len(c)],False)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s[0:i]+s[i+1:]\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (s,False)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[0]:\n            result += s[i]\n        else:\n            for j in range(len(c)):\n                if s[i] == c[j]:\n                    result += s[i+1-j]\n                    break\n    return (result,reverse_delete(result,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) <= len(c):\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n    else:\n        for i in range(len(s)):\n            if s[i] == c[len(s)-i-1]:\n                s = s[:i] + s[i+1:]\n    return s,s == s[::-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if s == c:\n        return (s,True)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s,c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            result += s[i+1:]\n            s = s[:i+1]\n            if len(s) == 0:\n                return (result,False)\n        else:\n            result += s[i]\n    return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s.pop(i)\n    return ''.join(s), s == reverse(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1:]\n                if len(s) < len(c):\n                    return (s,False)\n                else:\n                    for j in range(len(s)):\n                        if s[j] == c[0]:\n                            s = s[:j] + s[j+1:]\n                            if len(s) < len(c):\n                                return (s,False)\n                            else:\n                                for k in range(len(s)):\n                                    if s[k] == c[0]:\n                                        s = s[:k] + s[k+1:]\n                                        if len(s) < len(c):\n                                            return (s,False)\n                                        else:\n                                            for l in range(len(s)):\n                                                if s[l] == c[0]:\n                                                    s = s[:l] + s[l+1:]\n                                                    if len(s) < len(c):\n                                                        return (s,False)\n                                                    else:\n                                                        for m in range(len(s)):\n                                                            if s[m] == c[0]:\n                                                                s = s[:m] + s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if s == c:\n        return (s,True)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s,c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (\"\",False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) == 1:\n        return (s,True)\n    if len(c) == 1:\n        return (s,False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s,c[1:]) + s[0] + reverse_delete(s[1:],c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s.pop(i)\n    if s == c:\n        return (''.join(s),True)\n    else:\n        return (''.join(s),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[0]:\n                s=s[1:]\n                c=c[1:]\n                if len(s)<len(c):\n                    return (s,False)\n                else:\n                    return reverse_delete(s,c)\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        if len(s)==len(c):\n            for i in range(len(s)):\n                if s[i]==c[i]:\n                    s=s[0:i]+s[(i):]\n                    return (s,False)\n        else:\n            return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if s == c:\n        return (s,True)\n    if len(s) < len(c):\n        return (\"\",False)\n    if len(s) > len(c):\n        s,c = c,s\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result += s[i]\n    return (result,reverse_delete(result,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (\"\",False)\n    if s == c:\n        return (\"\",False)\n    if s[0] == c[0]:\n        return (s[1:],False)\n    if s[-1] == c[-1]:\n        return (s[:-1],False)\n    if s[0] == c[-1] and s[-1] == c[0]:\n        return (s[1:-1],False)\n    if s[0] == c[0]:\n        return (s[1:],False)\n    if s[-1] == c[-1]:\n        return (s[:-1],False)\n    if s[0] == c[-1] and s[-1] == c[0]:\n        return (s[1:-1],False)\n    if s[0] == c[0]:\n        return (s[1:],False)\n    if s[-1] == c[-1]:\n        return (s[:-1],False)\n    if s[0] == c[-1] and s[-1] == c[0]:\n        return (s[1:-1],False)\n    if s[0] == c[0]:\n        return (s[1:],False)\n    if s[-1] == c[-1]:\n        return (s[:-1],False)\n    if s[0] == c[-1] and s[-1] == c", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) < len(c):\n        return (\"\",False)\n    if len(s) > len(c):\n        return (\"\",False)\n    if len(s) == 1:\n        if s[0] == c[0]:\n            return (\"\",False)\n        else:\n            return (s,True)\n    if len(s) == 2:\n        if s[0] == c[0] and s[1] == c[1]:\n            return (\"\",False)\n        else:\n            return (s,True)\n    if len(s) == 3:\n        if s[0] == c[0] and s[1] == c[1] and s[2] == c[2]:\n            return (\"\",False)\n        else:\n            return (s,True)\n    if len(s) == 4:\n        if s[0] == c[0] and s[1] == c[1] and s[2] == c[2] and s[3] == c[3]:\n            return (\"\",False)\n        else:\n            return (s,True)\n    if len(s) == 5:\n        if s[0] == c[0] and s[1] ==", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        if s == c:\n            return (s,True)\n        else:\n            return (s[::-1],reverse_delete(s[::-1],c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) < len(c):\n        return reverse_delete(s[len(c):],c)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                result += s[i+1:]\n                s = s[:i+1]\n                if len(s) == 0:\n                    return (result,True)\n                else:\n                    return reverse_delete(s,c)\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        if len(s)==len(c):\n            if s==c:\n                return (s,True)\n            else:\n                return (s,False)\n        else:\n            for i in range(len(s)):\n                if s[i]==c[0]:\n                    s=s[1:]\n                    c=c[1:]\n                    reverse_delete(s,c)\n                    return (s,reverse_delete(s,c))\n                else:\n                    return (s,reverse_delete(s,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        if s==c:\n            return (s,True)\n        else:\n            return (s[0:len(s)-len(c)]+s[len(s)-len(c):],False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == 1 and len(c) == 1:\n        return (s,True)\n    if len(s) == 1 and len(c) > 1:\n        return (s,False)\n    if len(c) == 1 and len(s) > 1:\n        return (s,False)\n    if len(s) > 1 and len(c) > 1:\n        if s[0] == c[0]:\n            return (s[1:],False)\n        else:\n            return (s[1:] + s[0],False)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        if s == c:\n            return (s,True)\n        else:\n            result = \"\"\n            for i in range(len(s)):\n                if s[i]!= c[i]:\n                    result += s[i]\n            return (result,reverse_delete(result,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1:]\n                if s == c:\n                    return (s,True)\n                else:\n                    return (s,False)\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if s == c:\n        return (s,True)\n    if len(s) < len(c):\n        return (\"\",False)\n    if len(s) == len(c):\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n        return (s,True)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n        for i in range(len(s)):\n            if s[i] == c[len(c)-1-i]:\n                s = s[:i] + s[len(s)-1-i]\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == 1 and len(c) == 1:\n        return (s,c == s)\n    if len(s) == len(c):\n        return (\"\",False)\n    if len(s) > len(c):\n        c = c + c[len(c)-len(s):]\n    if len(s) < len(c):\n        s = s + s[len(s)-len(c):]\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1:]\n                break\n    if len(s) < len(c):\n        for i in range(len(c)):\n            if c[i] == s[0]:\n                c = c[:i] + c[i+1:]\n                break\n    return (s,c == s[::-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i] not in c:\n                result += s[i]\n        if result == s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if s == c:\n        return (s,True)\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (reverse_delete(s[len(c):],c),reverse_delete(s[:len(c)],c))\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            return (s[1:i] + reverse_delete(s[i+1:],c),False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]==c[i]:\n                result += s[i]\n            else:\n                result += s[i]\n        if result==s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (reverse_delete(s[len(c):],c),reverse_delete(s[:len(c)],c))\n    else:\n        return (reverse_delete(s[len(c):],c),reverse_delete(s[:len(c)],c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    if s == s[::-1]:\n        return (''.join(s),True)\n    else:\n        return (''.join(s),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (s,False)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result += s[i]\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[0]:\n                s=s[0:i]+s[(len(s)-i):]\n                return reverse_delete(s,c[1:])\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1:]\n                if len(s) < len(c):\n                    return (s,False)\n                else:\n                    for j in range(len(s)):\n                        if s[j] == c[j]:\n                            s = s[:j] + s[j+1:]\n                            if len(s) < len(c):\n                                return (s,False)\n                            else:\n                                for k in range(len(s)):\n                                    if s[k] == c[k]:\n                                        s = s[:k] + s[k+1:]\n                                        if len(s) < len(c):\n                                            return (s,False)\n                                        else:\n                                            return (s,True)\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == reverse(result):\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if s == c:\n        return (s,True)\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (reverse_delete(s[len(c):],c),reverse_delete(s[:len(c)],c))\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            return (s[1:i] + reverse_delete(s[i+1:],c),False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) <= len(c):\n        return (s,False)\n    else:\n        if s == c:\n            return (s,True)\n        else:\n            return (s[1:],False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) == 1:\n        return (s,False)\n    if len(c) == 1:\n        return (s,False)\n    if len(s) == 2:\n        if s[0] == c[0]:\n            return (s,False)\n        else:\n            return (s,True)\n    if len(s) == 3:\n        if s[0] == c[0] and s[1] == c[1]:\n            return (s,False)\n        else:\n            return (s,True)\n    if len(s) == 4:\n        if s[0] == c[0] and s[1] == c[1] and s[2] == c[2]:\n            return (s,False)\n        else:\n            return (s,True)\n    if len(s) == 5:\n        if s[0] == c[0] and s[1] == c[1] and s[2] == c[2] and s[3] == c[3]:\n            return (s,", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s.pop(i)\n    return \"\".join(s), s == reverse(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[0]:\n                s=s[1:]\n                c=c[1:]\n            else:\n                break\n        if s==c:\n            return (s,True)\n        else:\n            return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == 1 and len(c) == 1:\n        if s[0] == c[0]:\n            return (\"\",False)\n        else:\n            return (s,True)\n    if len(s) == len(c):\n        return (s,True)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1:]\n                if s == c:\n                    return (s,True)\n                else:\n                    return (s,False)\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i] not in c:\n                result += s[i]\n        if result == reverse(result):\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == 1:\n        if s[0] == c[0]:\n            return (\"\",False)\n        else:\n            return (s,True)\n    if len(c) == 1:\n        if s[0] == c[0]:\n            return (\"\",False)\n        else:\n            return (s,True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:],c),False)\n    else:\n        return (reverse_delete(s[1:],c),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == reverse(result):\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    #s = input(\"Enter the string s\")\n    #c = input(\"Enter the string c\")\n    s = \"abcdef\"\n    c = \"ae\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result += s[i]\n    if result == s[::-1]:\n        return (result,True)\n    else:\n        return (result,False)\n\nreverse_delete(\"abcdef\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (\"\",False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (s[0:len(c)],False)\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            s = s[0:i]+s[i+1:]\n            return reverse_delete(s,c)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if s == c:\n        return (s,True)\n    if len(s) == 1:\n        return (s,False)\n    if len(c) == 1:\n        return (s,False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    if s[-1] == c[-1]:\n        return reverse_delete(s[:-1],c[:-1])\n    return reverse_delete(s[1:],c[1:]) + reverse_delete(s[:-1],c[:-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s.pop(i)\n    return ''.join(s), s == reverse(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        if len(s)==len(c):\n            for i in range(len(s)):\n                if s[i]==c[i]:\n                    s=s[0:i]+s[(len(s)-1)-i:]\n                    return (s,False)\n        else:\n            return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]==c[i]:\n                result += s[i+1:]\n                s = s[:i+1]\n            else:\n                result += s[i]\n        return (result,s==reverse(result))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    #s = input(\"Enter the string : \")\n    #c = input(\"Enter the character : \")\n    #s = s.lower()\n    #c = c.lower()\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (s,False)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[0]:\n            result += s[i]\n        else:\n            for j in range(len(c)):\n                if s[i+j] == c[j]:\n                    result += s[i+j]\n                    i += j\n                    break\n            else:\n                result += s[i]\n    return (result,reverse(result) == result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        if s==c:\n            return (s,True)\n        else:\n            result=\"\"\n            for i in range(len(s)):\n                if s[i]==c[0]:\n                    result+=s[len(s)-i-1:]\n                    s=s[:len(s)-i-1]\n                    break\n                else:\n                    result+=s[i]\n            return (result,reverse_delete(s,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s.pop(i)\n    return ''.join(s), s == reverse(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) < len(c):\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return (s[1:],False)\n    if s[-1] == c[-1]:\n        return (s[:-1],False)\n    if s[0] == c[-1]:\n        return (s[1:] + s[0],False)\n    if s[-1] == c[0]:\n        return (s[:-1] + s[-1],False)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n                return (s,False)\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == 1 or len(c) == 1:\n        return (s,True)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s,c[1:]) + s[0] + reverse_delete(s[1:],c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    if s == c:\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[0]:\n                s=s[1:]+s[len(s)-1:]\n                return (s,False)\n            else:\n                for j in range(len(c)):\n                    if s[i]==c[j]:\n                        s=s[1:]+s[len(s)-1:]\n                        return (s,False)\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) < len(c):\n        return (\"\",False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    else:\n        if s[0] == c[0]:\n            return reverse_delete(s[1:],c[1:])\n        else:\n            return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        return (result,is_palindrome(result))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[0]:\n                result += s[i]\n            else:\n                for j in range(1,len(c)):\n                    if s[i] == c[j]:\n                        result += s[i+j]\n                        break\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    else:\n        if s[0] == c[0]:\n            return (s[1:],False)\n        else:\n            return (s[1:],True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) < len(c):\n        return (\"\",False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (\"\",False)\n    else:\n        if s[0] == c[0]:\n            return (reverse_delete(s[1:],c[1:]),False)\n        else:\n            return (reverse_delete(s[1:],c[1:]),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n        if s == s[::-1]:\n            return (s,True)\n        else:\n            return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    return ''.join(s), s == reverse(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == reverse(result):\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[0]:\n                result += s[i]\n            else:\n                for j in range(1,len(c)):\n                    if s[i] == c[j]:\n                        result += s[i+j]\n                        break\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) <= len(c):\n        return (s,False)\n    else:\n        return (s[0:len(c)],True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) < len(c):\n        return (\"\",False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (\"\",False)\n    else:\n        if s[0] == c[0]:\n            return (s[1:],False)\n        else:\n            return (s[1:],reverse_delete(s[1:],c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[0]:\n                s=s[0:i]+s[(i+len(c))::]\n                return (s,False)\n            else:\n                if s[i]==c[-1]:\n                    s=s[0:i]+s[(i+len(c))::]\n                    return (s,False)\n                else:\n                    return (s,True)\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    return ''.join(s), s == reverse(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c[::-1]),False)\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            s = s[:i] + s[i+1:]\n            return (s,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    else:\n        if s[0] == c[0]:\n            return (s[1:],False)\n        else:\n            return (s[1:],True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == reverse(result):\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (s,False)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result += s[i]\n    return (result,True)\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        if len(s) == len(c):\n            if s == c:\n                return (s,True)\n            else:\n                return (s,False)\n        else:\n            if s[0] == c[0]:\n                return reverse_delete(s[1:],c[1:])\n            else:\n                return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1:]\n                if s == c:\n                    return (s,True)\n                else:\n                    return (s,False)\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    return \"\".join(s), s == reverse(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    else:\n        if s == c:\n            return (s,True)\n        else:\n            if s[0] == c[0]:\n                return (s[1:],False)\n            else:\n                return (reverse_delete(s[1:],c),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) < len(c):\n        return (\"\",False)\n    if len(s) > len(c):\n        return (\"\",False)\n    if len(s) == len(c):\n        return (\"\",False)\n    if s[0] == c[0]:\n        return (s[1:],False)\n    if s[-1] == c[-1]:\n        return (s[:-1],False)\n    if s[0] == c[-1]:\n        return (s[1:],False)\n    if s[-1] == c[0]:\n        return (s[:-1],False)\n    if s[0] == c[0] and s[-1] == c[-1]:\n        return (s[1:],True)\n    if s[-1] == c[0] and s[0] == c[-1]:\n        return (s[:-1],True)\n    if s[0] == c[-1] and s[-1] == c[0]:\n        return (s[1:],True)\n    if s[-1] == c[-1] and s[0] == c[0]:\n        return (s[:-1],True)\n    if s[0] == c[-1] and s[-1] == c[0]:\n        return (s[1:],True)\n    if s[-1] == c[-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[i]:\n                s=s[0:i]+s[(len(s)-i):]\n                return (s,False)\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == 1 or len(c) == 1:\n        return (s,True)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s,c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        if s == c:\n            return (s,True)\n        else:\n            result = \"\"\n            for i in range(len(s)):\n                if s[i]!= c[i]:\n                    result += s[i]\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    else:\n        if s[0] == c[0]:\n            return (s[1:],reverse_delete(s[1:],c))\n        else:\n            return (s,reverse_delete(s[1:],c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        if s==c:\n            return (s,True)\n        else:\n            result=\"\"\n            for i in range(len(s)):\n                if s[i]==c[0]:\n                    result=result+s[len(s)-i-1:]\n                    s=s[:len(s)-i-1]\n                    break\n            return (result,reverse_delete(s,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                s = s[:i]+s[(i+len(c)):]\n                if s == c:\n                    return (s,True)\n                else:\n                    return (s,False)\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s.pop(i)\n    return ''.join(s), s == reverse(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        if len(s)==len(c):\n            if s==c:\n                return (s,True)\n            else:\n                return (s,False)\n        else:\n            if s==c:\n                return (s[0:len(c)]+s[len(c):],True)\n            else:\n                return (s[0:len(c)]+s[len(c):],False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        if s == c:\n            return (s,True)\n        else:\n            return (s[::-1],False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (\"\",False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) < len(c):\n        return reverse_delete(s,c[1:])\n    if len(s) > len(c):\n        return reverse_delete(s[1:],c)\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            return reverse_delete(s[0:i]+s[(i+1):],c[1:])\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) < len(c):\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[0]:\n            result += s[i]\n        else:\n            for j in range(1,len(c)):\n                if s[i] == c[j]:\n                    result += s[i+j]\n                    break\n    return (result,reverse_delete(result,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (s,False)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result += s[i]\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s.pop(i)\n    if s == c:\n        return (\"\".join(s),True)\n    else:\n        return (\"\".join(s),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (s[0:len(c)],False)\n    if len(s) < len(c):\n        return (s[-len(c):],False)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s[0:i]+s[(i+1):]\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1:]\n                if s == c:\n                    return (s,True)\n                else:\n                    return (s,False)\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (s,False)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            result += s[i+1:]\n            s = s[:i+1]\n            if len(s) == 0:\n                return (result,False)\n            continue\n        if s[i]!= c[0]:\n            result += s[i]\n            continue\n    return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    else:\n        if s[0] == c[0]:\n            return (s[1:],reverse_delete(s[1:],c))\n        else:\n            return (s[1:],reverse_delete(s[1:],c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[0]:\n                s=s[1:]\n                c=c[1:]\n            else:\n                break\n        if s==c:\n            return (s,True)\n        else:\n            return (s,False)\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) < len(c):\n        return (\"\",False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s,c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (s[0:len(c)],False)\n    else:\n        return (s[len(s)-len(c):],False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    #s = input(\"Enter the string\")\n    #c = input(\"Enter the character\")\n    #s = s.lower()\n    #c = c.lower()\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1:]\n                return (s,False)\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (reverse_delete(s[len(c):],c),reverse_delete(s[:len(c)],c))\n    else:\n        return (reverse_delete(s[len(c):],c),reverse_delete(s[:len(c)],c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == 1 or len(c) == 1:\n        return (s,True)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s,c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    if s == c:\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (reverse_delete(s[len(c):],c),False)\n    else:\n        return (reverse_delete(s[:len(c)],c),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    if s == c:\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (s,False)\n    if s[0] == c[0]:\n        return (s[1:],False)\n    if s[-1] == c[-1]:\n        return (s[:-1],False)\n    if s[0] == c[-1]:\n        return (s[1:],False)\n    if s[-1] == c[0]:\n        return (s[:-1],False)\n    if s[0] == c[0] and s[-1] == c[-1]:\n        return (s[1:-1],True)\n    if s[0] == c[-1] and s[-1] == c[0]:\n        return (s[1:-1],True)\n    if s[-1] == c[-1] and s[0] == c[0]:\n        return (s[1:],False)\n    if s[-1] == c[0] and s[0] == c[-1]:\n        return (s[:-1],False)\n    if s[0] == c[-1] and s[-1] == c[-1]:\n        return (s[1:],", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == reverse(result):\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        if len(s)==len(c):\n            if s==c:\n                return (s,True)\n            else:\n                return (s,False)\n        else:\n            result=\"\"\n            for i in range(len(s)):\n                if s[i]==c[i]:\n                    result=result+s[len(s)-i-1]\n                else:\n                    result=result+s[i]\n            return (result,reverse_delete(result,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (s,False)\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            s = s[:i] + s[i+1:]\n            return (s,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    #s = input(\"Enter the string : \")\n    #c = input(\"Enter the character : \")\n    #s = s.lower()\n    #c = c.lower()\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s.replace(c,'')\n    #s = s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        if s==c:\n            return (s,True)\n        else:\n            result = s\n            for i in range(len(s)):\n                if s[i]==c[0]:\n                    result = result[0:i]+result[i+1:]\n                    if result==c:\n                        return (result,True)\n                    else:\n                        return (result,False)\n                else:\n                    result = result[0:i]+result[i+1:]\n                    if result==c:\n                        return (result,True)\n                    else:\n                        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        return (result,reverse_delete(result,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    #s = input(\"Enter the string : \")\n    #c = input(\"Enter the character : \")\n    #s = s.lower()\n    #c = c.lower()\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s.replace(c,\"\")\n    #s = s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i] not in c:\n                result += s[i]\n        if result == s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write code here\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s.pop(i)\n    return s, s == reverse(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s[i] = \"\"\n    return \"\".join(s), s == reverse_delete(\"\".join(s),c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) < len(c):\n        return s,False\n    else:\n        if len(s) == len(c):\n            if s == c:\n                return s,True\n            else:\n                return s,False\n        else:\n            for i in range(len(s)):\n                if s[i] == c[0]:\n                    s = s[:i] + s[i+1:]\n                    if s == c:\n                        return s,True\n                    else:\n                        return s,False\n            return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        if result == s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[0]:\n                s=s[1:]\n                c=c[1:]\n            else:\n                break\n        if s==c:\n            return (s,True)\n        else:\n            return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        if s == c:\n            return (s,True)\n        else:\n            result = \"\"\n            for i in range(len(s)):\n                if s[i]!= c[i]:\n                    result += s[i]\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]==c[i]:\n                result += s[i+1:]\n                s = s[:i+1]\n            else:\n                result += s[i]\n        return (result,s==reverse(result))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    if len(s) == len(c):\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s.pop(i)\n    else:\n        return (s,False)\n    return (''.join(s),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1:]\n                if s == c:\n                    return (s,True)\n                else:\n                    return (s,False)\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return (s,False)\n    else:\n        return (s[::-1],True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (\"\",False)\n    if len(s) > len(c):\n        return (\"\",False)\n    if len(s) < len(c):\n        return (\"\",False)\n    if s[0] == c[0]:\n        return (s[1:],False)\n    if s[-1] == c[-1]:\n        return (s[:-1],False)\n    if s[0] == c[-1]:\n        return (s[1:] + s[0],False)\n    if s[-1] == c[0]:\n        return (s[:-1] + s[-1],False)\n    if s[0] == c[0]:\n        return (s[1:] + s[0],False)\n    if s[-1] == c[-1]:\n        return (s[:-1] + s[-1],False)\n    if s[0] == c[-1]:\n        return (s[1:] + s[0],False)\n    if s[-1] == c[0]:\n        return (s[:-1] + s[-1],False)\n    if s[0] == c[0]:\n        return (s[1:] + s[0],False)\n    if s[-1] == c[-1]:\n        return (s[:-1] + s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (reverse_delete(s[len(c):],c),reverse_delete(s[:len(c)],c))\n    else:\n        return (reverse_delete(s[len(c):],c),reverse_delete(s[:len(c)],c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]==c[i]:\n                result += s[i+1:]\n                s = s[:i+1]\n            else:\n                result += s[i]\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == 1:\n        return (s,True)\n    if len(c) == 1:\n        return (s,False)\n    if s[0] == c[0]:\n        return (s[1:],False)\n    if s[-1] == c[-1]:\n        return (s[:-1],False)\n    if s[0] == c[-1] and s[-1] == c[0]:\n        return (s[1:-1],False)\n    if s[0] == c[0] and s[-1] == c[-1]:\n        return (s[:-1],True)\n    if s[-1] == c[0] and s[0] == c[-1]:\n        return (s[1:],True)\n    if s[0] == c[0] and s[-1] == c[-1]:\n        return (s[:-1],True)\n    if s[-1] == c[0] and s[0] == c[-1]:\n        return (s[1:],True)\n    if s[0] == c[0] and s[-1] == c[-1]:\n        return (s[:-1],True)\n    if s[-1] == c[0] and s[0] == c[-1]:\n        return (s[1:],True)\n    if s[0] == c[0] and s[-1] == c", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (s,False)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result += s[i]\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                s = s[:i] + s[i+1:]\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[0]:\n                s=s[1:]\n                c=c[1:]\n                if len(s)<len(c):\n                    return (s,False)\n                else:\n                    for j in range(len(s)):\n                        if s[j]==c[0]:\n                            s=s[1:]\n                            c=c[1:]\n                            if len(s)<len(c):\n                                return (s,False)\n                            else:\n                                for k in range(len(s)):\n                                    if s[k]==c[0]:\n                                        s=s[1:]\n                                        c=c[1:]\n                                        if len(s)<len(c):\n                                            return (s,False)\n                                        else:\n                                            for l in range(len(s)):\n                                                if s[l]==c[0]:\n                                                    s=s[1:]\n                                                    c=c[1:]\n                                                    if len(s)<len(c):\n                                                        return (s,False)\n                                                    else:\n                                                        for m in range(len(s)):\n                                                            if s[m]==c[0]:\n                                                                s=s[1:]\n                                                                c=c[1:]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if s == c:\n        return (s,True)\n    if len(s) < len(c):\n        return (\"\",False)\n    if len(s) > len(c):\n        s = s[len(c):]\n        c = c[len(s):]\n    if s == c:\n        return (s,True)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        return (result,True)\n\nreverse_delete(\"abcde\",\"ae\")\nreverse_delete(\"abcdef\",\"b\")\nreverse_delete(\"abcdedcba\",\"ab\")\n\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1:]\n                return (s,False)\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[0]:\n                s=s[1:]\n                c=c[1:]\n            elif s[i]==c[-1]:\n                s=s[:-1]\n                c=c[:-1]\n            else:\n                pass\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) < len(c):\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s,c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[0]:\n                s=s[1:]\n                c=c[1:]\n                if len(s)<len(c):\n                    return (s,False)\n                else:\n                    for j in range(len(s)):\n                        if s[j]==c[0]:\n                            s=s[1:]\n                            c=c[1:]\n                            if len(s)<len(c):\n                                return (s,False)\n                            else:\n                                for k in range(len(s)):\n                                    if s[k]==c[0]:\n                                        s=s[1:]\n                                        c=c[1:]\n                                        if len(s)<len(c):\n                                            return (s,False)\n                                        else:\n                                            for l in range(len(s)):\n                                                if s[l]==c[0]:\n                                                    s=s[1:]\n                                                    c=c[1:]\n                                                    if len(s)<len(c):\n                                                        return (s,False)\n                                                    else:\n                                                        for m in range(len(s)):\n                                                            if s[m]==c[0]:\n                                                                s=s[1:]\n                                                                c=c[1:]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[0]:\n                s=s[0:i]+s[(len(s)-i):]\n                if s==s[::-1]:\n                    return (s,True)\n                else:\n                    return (s,False)\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i]==c[0]:\n                s=s[1:]\n                c=c[1:]\n                if len(s)<len(c):\n                    return (s,False)\n                else:\n                    for j in range(len(s)):\n                        if s[j]==c[0]:\n                            s=s[1:]\n                            c=c[1:]\n                            if len(s)<len(c):\n                                return (s,False)\n                            else:\n                                for k in range(len(s)):\n                                    if s[k]==c[0]:\n                                        s=s[1:]\n                                        c=c[1:]\n                                        if len(s)<len(c):\n                                            return (s,False)\n                                        else:\n                                            for l in range(len(s)):\n                                                if s[l]==c[0]:\n                                                    s=s[1:]\n                                                    c=c[1:]\n                                                    if len(s)<len(c):\n                                                        return (s,False)\n                                                    else:\n                                                        for m in range(len(s)):\n                                                            if s[m]==c[0]:\n                                                                s=s[1:]\n                                                                c=c[1:]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    if len(s) < len(c):\n        return (s,False)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == 1:\n        return (s,True)\n    if len(c) == 1:\n        return (s,False)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s,c[1:]) + s[0] + reverse_delete(s[1:],c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    #s = input(\"Enter the string : \")\n    #c = input(\"Enter the character : \")\n    #s = s.lower()\n    #c = c.lower()\n    #s = s.replace(\" \",\"\")\n    #c = c.replace(\" \",\"\")\n    #s = s.replace(\".\",\"\")\n    #c = c.replace(\".\",\"\")\n    #s = s.replace(\",\",\"\")\n    #c = c.replace(\",\",\"\")\n    #s = s.replace(\"!\",\"\")\n    #c = c.replace(\"!\",\"\")\n    #s = s.replace(\"?\",\"\")\n    #c = c.replace(\"?\",\"\")\n    #s = s.replace(\"(\",\"\")\n    #c = c.replace(\"(\",\"\")\n    #s = s.replace(\")\",\"\")\n    #c = c.replace(\")\",\"\")\n    #s = s.replace(\"[\",\"\")\n    #c = c.replace(\"[\",\"\")\n    #s = s.replace(\"]\"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        if len(s)==len(c):\n            if s==c:\n                return (s,True)\n            else:\n                return (s,False)\n        else:\n            if s==c:\n                return (s,True)\n            else:\n                return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= len(c):\n        return (s,False)\n    else:\n        return (s[::-1],True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) < len(c):\n        return (\"\",False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[0]:\n                s = s[:i] + s[i+1:]\n                return reverse_delete(s,c)\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                result += s[i]\n        return (result,is_palindrome(result))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i]!=c[i]:\n                result+=s[i]\n        if result==s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        if s == c:\n            return (s,True)\n        else:\n            result = \"\"\n            for i in range(len(s)):\n                if s[i]!= c[i]:\n                    result += s[i]\n            return (result,reverse_delete(result,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    if len(s) < len(c):\n        return (\"\",False)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s.pop(i)\n    return (\"\".join(s),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (reverse_delete(s[len(c):],c),reverse_delete(s[:len(c)],c))\n    else:\n        return (reverse_delete(s[len(c):],c),reverse_delete(s[:len(c)],c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[0]:\n            result += s[i]\n        else:\n            for j in range(1,len(c)):\n                if s[i] == c[j]:\n                    result += s[i+j]\n                    break\n    return (result,reverse_delete(result,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if s == c:\n        return (s,True)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s[1:],c[1:]) + s[0]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (\"\",False)\n    if len(c) == 0:\n        return (s,True)\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) == len(c):\n        if s == c:\n            return (s,True)\n        else:\n            return (s,False)\n    else:\n        if s[0] == c[0]:\n            return reverse_delete(s[1:],c[1:])\n        else:\n            return reverse_delete(s,c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (s,False)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            result += s[i+1:]\n            s = s[:i+1]\n            break\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        if len(s) == len(c):\n            if s == c:\n                return (s,True)\n            else:\n                return (s,False)\n        else:\n            return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    if s == reverse(s):\n        return (''.join(s),True)\n    else:\n        return (''.join(s),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        if s == c:\n            return (s,True)\n        else:\n            return (s[::-1],False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (reverse_delete(s,c[::-1]),True)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s[:i] + s[i+1:]\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s[i] = \"\"\n    if s == c[::-1]:\n        return (\"\".join(s),True)\n    else:\n        return (\"\".join(s),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == 1 or len(c) == 1:\n        return (s,True)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s,c[1:]) + s[0] + reverse_delete(s[1:],c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i] not in c:\n                result += s[i]\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (reverse_delete(s[len(c):],c),reverse_delete(s[:len(c)],c))\n    else:\n        return (reverse_delete(s[len(c):],c),reverse_delete(s[:len(c)],c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    if len(s) < len(c):\n        return (s,False)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s.pop(i)\n    return (''.join(s),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == 1 or len(c) == 1:\n        return (s,c == s[0])\n    if s[0] == c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s,c[1:]) + s[0] + reverse_delete(s[1:],c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (s,False)\n    if len(s) < len(c):\n        return (s,False)\n    if len(s) > len(c):\n        return (s,False)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result += s[i]\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    if s == s[::-1]:\n        return (\"\".join(s),True)\n    else:\n        return (\"\".join(s),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    if len(s) < len(c):\n        return (s,False)\n    else:\n        if s == c:\n            return (s,True)\n        else:\n            if s[0] == c[0]:\n                return reverse_delete(s[1:],c[1:])\n            else:\n                return reverse_delete(s[1:],c[1:])</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = s.lower()\n    c = c.lower()\n    if len(s)<len(c):\n        return (s,False)\n    else:\n        result = \"\"\n        for i in range(len(s)):\n            if s[i] not in c:\n                result += s[i]\n        if result==s[::-1]:\n            return (result,True)\n        else:\n            return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s.pop(i)\n    return (\"\".join(s),s == s[::-1])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0 or len(c) == 0:\n        return (\"\",False)\n    if len(s) == len(c):\n        return (s,True)\n    if len(s) > len(c):\n        return (s,False)\n    if len(s) < len(c):\n        return (s,False)\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[0]:\n            result += s[i]\n        else:\n            for j in range(len(c)):\n                if s[i+j] == c[j]:\n                    result += s[i+j]\n                    break\n    return (result,reverse_delete(result,c))"]]