[["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write code here\n    def swap(x, y):\n        \"\"\"\n        Swap the value in index x and index y\n        \"\"\"\n        val = array[x]\n        array[x] = array[y]\n        array[y] = val\n\n    def recursive(input_array, start, end, sum):\n        \"\"\"\n        Recursive Function\n        :param input_array: the input array\n        :param start: the start index\n        :param end: the end index\n        :param sum: the sum of the first and last index\n        :return: None\n        \"\"\"\n        if start == end:\n            return\n        if sum % 2 == 1:\n            input_array[start], input_array[end] = input_array[end], input_array[start]\n            input_array = recursive(input_array, start + 1, end - 1, sum - input_array[start] - input_array[end])\n        else:\n            input_array[start], input_array[end] = input_array[end], input_array[start]\n            input_array = recursive(input_array, start + 1, end - 1, sum - input_array[end] - input_array[start])\n        return input_array\n\n    input_array = array\n    temp = input_array[start_index:end_index]\n    input_array =", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array_copy = array[:]\n    if not array:\n        return array_copy\n    if len(array) == 1:\n        return array_copy\n    if len(array) == 2:\n        if array[0] > array[1]:\n            array_copy[0], array_copy[1] = array_copy[1], array_copy[0]\n        return array_copy\n    for i in range(0, len(array_copy) - 1):\n        if array_copy[i] > array_copy[i + 1]:\n            tmp = array_copy[i]\n            array_copy[i] = array_copy[i + 1]\n            array_copy[i + 1] = tmp\n    if sum(array_copy) % 2 == 0:\n        for i in range(0, len(array_copy)):\n            array_copy[i] = array_copy[i] * -1\n    return array_copy\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array = list(array)\n    if len(array) == 0:\n        return []\n\n    sum = 0\n    for i in range(0, len(array)):\n        sum += array[i]\n    if sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    count = 0\n    i = j = 0\n    while i < len(array)-1:\n        if count == 0:\n            if array[i] + array[i+1] == 0:\n                count += 1\n            elif array[i] + array[i+1] == 1:\n                count += 1\n                array[i], array[i+1] = array[i+1], array[i]\n                i += 1\n            elif array[i] + array[i+1] == 2:\n                count += 1\n                array[i], array[i+1] = array[i+1], array[i]\n                i += 1\n            elif array[i] + array[i+1] == 3:\n                count += 1\n                array[i], array[i+1] = array[i+1], array[i]\n                i += 1\n            elif array[i] + array[i+1] == 4:\n                count += 1\n                array[i], array[i+1] = array[i+1], array[i]\n                i += 1\n            elif array[i] + array[i+1] == 5:\n                count += 1\n                array[i], array[i+1] = array[i+1], array[i]\n                i += 1\n            elif array[i] + array[i+1] == 6:\n                count += 1\n                array[i], array[i+1] = array[i+1], array[i]\n                i += 1\n            elif array[i] + array[i+1] == 7:\n                count += 1\n                array[i], array[i+1] = array[i+1]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    a = sorted(list(array), reverse = not sum(array) % 2)\n\n    return a", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_odd(a, b):\n        return (a + b) % 2\n\n    def sum_even(a, b):\n        return (a + b) % 2 == 0\n\n    def sum_odd_descending(a, b):\n        return a + b % 2\n\n    def sum_even_descending(a, b):\n        return a + b % 2 == 0\n\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return array\n    if len(array) == 3:\n        return array\n    temp_array = []\n    sum_list = []\n    for i in range(len(array) - 1):\n        for j in range(i + 1, len(array)):\n            if sum_even(array[i], array[j]):\n                temp_array.append(array[j])\n            elif sum_odd(array[i], array[j]):\n                temp_array.append(array[i])\n            elif sum_odd(array[i], array[j]):\n                temp_array.append(array[i])\n            elif sum_even(array[i], array[j]):\n                temp_array.append(array[i])\n    return temp_array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return array\n    else:\n        m = 0\n        n = 0\n        while m <= len(array):\n            if n <= len(array) - 1 and array[m] + array[m + 1] == 0:\n                array[m], array[m + 1] = array[m + 1], array[m]\n                m += 1\n                n += 1\n            elif array[m] + array[m + 1] > 0:\n                array[m], array[m + 1] = array[m + 1], array[m]\n                m += 1\n                n += 1\n            elif array[m] + array[m + 1] == 0:\n                array[m], array[m + 1] = array[m + 1], array[m]\n                m += 1\n                n += 1\n            elif array[m] + array[m + 1] < 0:\n                array[m], array[m + 1] = array[m + 1], array[m]\n                m += 1\n                n += 1\n            elif m < len(array) - 1 and array[m] + array[m + 1] < 0:\n                array[m], array[m + 1] = array[m + 1], array[m]\n                m += 1\n                n += 1\n            elif array[m] + array[m + 1] > 0:\n                array[m], array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def swap(a, b):\n        return a + b\n    def sum_index(arr):\n        return arr[0] + arr[-1]\n    def compare(a, b):\n        return sum_index(a) - sum_index(b)\n\n    if len(array) < 2:\n        return array\n    array = sorted(array, key = compare)\n    if sum_index(array) % 2 == 0:\n        return array\n    else:\n        return reversed(array)\n\n\"\"\"\ninput: [0, 1, 2, 3, 4]\noutput: [4, 3, 2, 1, 0]\ninput: [5, 4, 3, 2, 1]\noutput: [1, 2, 3, 4, 5]\n\"\"\"\narray = input(\"Array: \")", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array = sorted(array)\n    result = []\n    for i in range(len(array)-1, -1, -1):\n        first_index = array[i]\n        last_index = array[i+1]\n\n        if( first_index + last_index % 2 == 0 ):\n            result.append(first_index)\n            result.append(last_index)\n        else:\n            result.append(last_index)\n            result.append(first_index)\n\n    return result\n\n\narr = [1,2,3,4,5,6,7,8,9,10,11]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    # This method sorts the given array in ascending order\n    # if the sum of the first index value and last index value is odd.\n    # or, in descending order if the sum of the first index value and last index value is even.\n\n    # This is the original function.\n    def sort(array):\n        if array == []:\n            return []\n\n        if sum(array[0], array[-1]) % 2 == 0:\n            array.reverse()\n        return array\n\n    # This is the improved version. Here we use sort() method to sort the array in O(nlogn) time complexity.\n    def sort_imp(array):\n        if array == []:\n            return []\n\n        temp = sort(array)\n        if sum(temp[0], temp[-1]) % 2 == 0:\n            temp.reverse()\n        return temp\n\n    return sort_imp(array)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def add_first_last_index(array):\n        \"\"\"\n        Given an array, return the sum of the first index value and the last index value\n        of the given array.\n        \"\"\"\n        return array[0] + array[-1]\n\n    def check(array):\n        \"\"\"\n        Return True if the sum of the first index value and the last index value\n        of the given array is odd, otherwise return False.\n        \"\"\"\n        return (add_first_last_index(array) % 2)!= 0\n\n    def swap(array, i, j):\n        \"\"\"\n        Return the given array and make swap of value at index i with value at index j.\n        \"\"\"\n        return array[:i] + array[i+1:j] + array[j+1:]\n\n    def sort(array):\n        \"\"\"\n        Sort the given array in ascending order if the sum of the first index value and the\n        last index value is odd, otherwise sort it in descending order.\n        \"\"\"\n        if check(array):\n            array.sort(reverse=True)\n        else:\n            array.sort()\n\n    return sort(array)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def helper(arr, l, r):\n        if l >= r:\n            return arr\n        key = arr[l] + arr[r]\n        if key % 2 == 0:\n            return helper(arr, l+1, r-1)\n        else:\n            return helper(arr, l, r-1) + [arr[l]] + helper(arr, l+1, r)\n\n    return helper(array, 0, len(array)-1)\n\n\narr = [2, 4, 3, 0, 1, 5, 6]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum(arr):\n        return sum(x for x in arr)\n    def swap(arr, i, j):\n        tmp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = tmp\n    def swap_2(arr, i, j):\n        tmp1 = arr[i]\n        tmp2 = arr[j]\n        arr[i] = tmp2\n        arr[j] = tmp1\n    if len(array) == 0:\n        return\n    if len(array) == 1:\n        return array\n    if sum(array) % 2 == 0:\n        arr = sorted(array, reverse=True)\n    else:\n        arr = sorted(array)\n    while len(array) > 1:\n        if sum(array[:2]) % 2 == 1:\n            swap_2(arr, 0, 1)\n        else:\n            if array[0] > array[1]:\n                swap(arr, 0, 1)\n        if sum(array[:3]) % 2 == 1:\n            swap_2(arr, 0, 2)\n        else:\n            if array[0] > array[2]:\n                swap(arr, 0, 2)\n        if sum(array[:4]) % 2 == 1:\n            swap_2(arr, 0, 3)\n        else:\n            if array[0] > array[3]:\n                swap(arr, 0, 3)\n        if sum(", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    # for i in range(len(array)):\n    #     temp = array[i]\n    #     for j in range(i+1, len(array)):\n    #         if(array[j] < temp):\n    #             array[i] = array[j]\n    #             array[j] = temp\n    #         elif(array[j] > temp):\n    #             array[i] = array[j]\n    #             array[j] = temp\n    # return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def sum(a, b):\n        return (b + a) % 2\n\n    if not array:\n        return []\n\n    # cache the sums\n    sum_cache = [0] * len(array)\n\n    # sort the array\n    for i, v in enumerate(array):\n        sum_cache[i] = sum(array[i - 1], v)\n\n    # return the sorted array\n    return [array[i] for i in sorted(sum_cache)]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array\n    middle = len(array) // 2\n    sorted = array[:middle] + sort_array(array[middle + 1:])\n    if sum(sorted[0], sorted[-1]) % 2 == 0:\n        return sorted + sort_array(sorted)\n    else:\n        return sort_array(sorted[::-1])", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum = 0\n    res = []\n    if len(array) == 0:\n        return array\n    for i in range(len(array)):\n        sum = sum + array[i]\n        if sum % 2!= 0:\n            res.append(array[i])\n        else:\n            res.append(array[i] * -1)\n    return res\n\na = [-5, -3, 4, -1, 2, 5, 4]\nb = sort_array(a)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return array\n    new_array = [None for _ in range(len(array))]\n    sort_array_helper(array, new_array, 0, len(array) - 1)\n    return new_array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum = 0\n    for i in range(len(array)):\n        sum += array[i]\n    if sum % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def partition(array, start, end):\n        \"\"\"\n        partition(array, start, end)\n\n        Partition array[start..end] and move the pivot to the end of the array.\n        Partition the array by using the pivot as a pivot point to put elements\n        in two groups, the elements less than the pivot and the elements greater than the pivot.\n        return the index where we put the pivot, it means we can put the pivot element in the start of\n        the array after partitioning.\n\n        Return:\n        the index where we put the pivot\n        \"\"\"\n        pivot = array[end]\n        i = start - 1\n        while i <= end - 1:\n            if array[i] < pivot:\n                array[i + 1], array[i] = array[i], array[i + 1]\n                i += 1\n            else:\n                break\n        array[i + 1], array[end] = array[end], array[i + 1]\n        return i + 1\n    def quickSort(array, start, end):\n        \"\"\"\n        quickSort(array, start, end)\n\n        Quick sort the array[start..end] by partitioning it.\n        We use the partition method to partition the array.\n        Quick sort uses the partition method to partition the array into two parts.\n        Then it recursively", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array = list(array)\n    while True:\n        flag = sum(array)\n        if flag % 2 == 0:\n            break\n        flag -= array[-1:].pop()\n        flag -= array[0]\n        array.pop(0)\n        array.append(flag)\n\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_index(array):\n        result = 0\n        for i in range(len(array)):\n            result += array[i]\n        return result\n\n    def reverse_sort(array):\n        if sum_index(array) % 2 == 0:\n            for i in range(len(array) / 2 - 1, 0, -1):\n                temp = array[i]\n                array[i] = array[len(array) - i - 1]\n                array[len(array) - i - 1] = temp\n        else:\n            for i in range(len(array) / 2 - 1, 0, -1):\n                temp = array[i]\n                array[i] = array[len(array) - i - 1]\n                array[len(array) - i - 1] = temp\n\n    for i in range(len(array)):\n        if sum_index(array[:i]) % 2 == 0:\n            reverse_sort(array[:i])\n        elif sum_index(array[:i]) % 2 == 1:\n            reverse_sort(array[:i])\n\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_odd(first, last):\n        return first + last + (last % 2)\n\n    def sum_even(first, last):\n        return first + last\n\n    if len(array) < 2:\n        return array\n\n    odd_sum = sum_odd(array[0], array[-1])\n    even_sum = sum_even(array[0], array[-1])\n\n    if odd_sum == even_sum:\n        return sorted(array)\n    else:\n        return [array[(x + 1) % len(array)] for x in range(0, len(array))]</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    array = list(array)\n    if len(array) <= 1:\n        return array\n    temp = 0\n    for i in range(len(array) - 1):\n        if temp + array[i] >= temp + array[i + 1]:\n            temp += array[i]\n            array[i], array[i + 1] = array[i + 1], array[i]\n    if temp % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def swap(a, b):\n        return (a, b)\n    a, b, c = 0, 0, 0\n    return array[a:b] + array[b:c] + array[c:]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # The idea is that if we sort in ascending order, the sum of two adjacent values will be odd,\n    # and if we sort in descending order, the sum of two adjacent values will be even.\n\n    # remove duplicates\n    array = list(set(array))\n\n    # reverse array\n    array.reverse()\n\n    # check whether the sum of two adjacent values is odd or even\n    even = True\n    for i in range(len(array) - 1):\n        if array[i] + array[i + 1] % 2!= 1:\n            even = False\n            break\n\n    # return sorted array\n    if even:\n        return array\n    else:\n        array.reverse()\n        return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array\n    return sort_array(array[:-1]) + array[-1:] + sort_array(array[:-1])", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum1 = 0\n    sum2 = 0\n    a_list = []\n    for _ in range(len(array)):\n        sum1 += array[_]\n        sum2 += array[len(array) - 1 - _]\n    if sum1 + sum2 % 2 == 0:\n        for i in range(len(array) / 2):\n            temp = array[i]\n            array[i] = array[len(array) - 1 - i]\n            array[len(array) - 1 - i] = temp\n    else:\n        for i in range(len(array) / 2, 0, -1):\n            temp = array[i]\n            array[i] = array[len(array) - 1 - i]\n            array[len(array) - 1 - i] = temp\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array = list(array)\n    sum = 0\n    for num in array:\n        sum += num\n    if sum % 2 == 0:\n        for i in range(len(array)):\n            for j in range(len(array) - i):\n                if array[i] > array[j]:\n                    temp = array[i]\n                    array[i] = array[j]\n                    array[j] = temp\n    else:\n        for i in range(len(array)):\n            for j in range(len(array) - i):\n                if array[i] > array[j]:\n                    temp = array[i]\n                    array[i] = array[j]\n                    array[j] = temp\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write code here\n    return", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return array\n    # use the first and last index of the array\n    sum_first_last_index = array[0] + array[-1]\n    if sum_first_last_index % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def swapped(result, a, b):\n        result[a], result[b] = result[b], result[a]\n        return result\n\n    if array is None or len(array) <= 0:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    result = [array[0]]\n    for i in range(1, len(array)):\n        if (i + 1) % 2 == 0:\n            result = swapped(result, result[0], result[i])\n            result.append(array[i + 1])\n        else:\n            result = swapped(result, result[i], result[0])\n            result.append(array[i + 1])\n    return result", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_odd(a, b):\n        return a + b\n\n    def sum_even(a, b):\n        return (a + b) * 2\n\n    # \u4ea4\u6362\n    def exchange(a, i, j):\n        tmp = a[i]\n        a[i] = a[j]\n        a[j] = tmp\n\n    def swap(a, i, j):\n        tmp = a[i]\n        a[i] = a[j]\n        a[j] = tmp\n\n    # \u5c06\u5e8f\u5217\u8fdb\u884c\u8f6c\u7f6e\n    def reverse(a):\n        tmp = a[0]\n        for i in range(1, len(a)):\n            a[i] = a[len(a) - 1 - i]\n        a[len(a) - 1] = tmp\n\n    def partition(a, left, right):\n        # \u627e\u5230\u4e2d\u95f4\u7d22\u5f15\uff0c\u4ea4\u6362\u4f4d\u7f6e\n        pivotIndex = left\n        pivot = a[left]\n        for i in range(left + 1, right + 1):\n            if a[i] <= pivot:\n                pivotIndex += 1\n                exchange(a, i, pivotIndex)\n                swap(a, pivotIndex, i)\n                pivotIndex -= 1\n                pivotIndex += 1\n        exchange(a, left, pivotIndex)\n        return pivotIndex\n\n    def merge(a", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_index_value(array):\n        return sum(array)\n    if not array:\n        return array\n    if sum_index_value(array) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    num = sum(array)\n    if num%2 == 0:\n        return [-x for x in array]\n    else:\n        return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sort_array_prev(array, 0, len(array) - 1)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array.sort()\n    # if sum(array)%2==0, then array is sorted in ascending order\n    # otherwise, array is sorted in descending order.\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def _sort(array, start, end):\n        if array[start] == array[end]:\n            return array[start]\n\n        elif (array[start] + array[end]) % 2 == 0:\n            return _sort(array, start + 1, end)\n        else:\n            return _sort(array, start, end - 1) + array[end]\n\n    return _sort(array, 0, len(array) - 1)</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def sum_first_last_index(numbers):\n        return numbers[0] + numbers[-1]\n\n    def swap_elements(numbers, i, j):\n        temp = numbers[i]\n        numbers[i] = numbers[j]\n        numbers[j] = temp\n\n    def even_odd_sort(numbers):\n        if sum_first_last_index(numbers) % 2 == 0:\n            for i in range(len(numbers) - 1):\n                if numbers[i] > numbers[i + 1]:\n                    swap_elements(numbers, i, i + 1)\n        else:\n            for i in range(len(numbers) - 1):\n                if numbers[i] < numbers[i + 1]:\n                    swap_elements(numbers, i, i + 1)\n\n    return even_odd_sort(array)\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    if len(array) < 2:\n        return array\n\n    length = len(array)\n    temp_array = [array[0]]\n\n    index = 1\n    while index < length - 1:\n        if array[index] + array[index + 1] % 2 == 1:\n            temp_array.append(array[index + 1])\n            array[index + 1] = array[index]\n            array[index] = temp_array[-1]\n            temp_array.pop()\n\n        index += 1\n\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def check_sum(array):\n        \"\"\"\n        Recursively check the sum of the index values and return True if the sum is odd, or False if the sum is even.\n        \"\"\"\n        if len(array) <= 1:\n            return True\n        else:\n            return check_sum(array[:-1]) + check_sum(array[1:])\n\n    def swap(array, i, j):\n        \"\"\"\n        Swap the value of index i and index j in array.\n        \"\"\"\n        temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n\n    def sort(array):\n        \"\"\"\n        Sort the array by swapping the adjacent values.\n        \"\"\"\n        for i in range(len(array) - 1):\n            if check_sum(array[i:len(array)]):\n                # Sort in ascending order\n                swap(array, i, i + 1)\n        return array\n\n    return sort(array)</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    print('Sort Array')\n    new_array = []\n\n    for i in range(len(array)):\n        value = array[i]\n        array_value = value + array[i - 1]\n        if array_value % 2 == 0:\n            new_array.append(value)\n        else:\n            new_array.append(value)\n\n    return new_array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def swap(i, j):\n        num = array[i]\n        array[i] = array[j]\n        array[j] = num\n\n    array_len = len(array)\n    if array_len == 0:\n        return array\n\n    if array_len % 2 == 0:\n        first_index = 0\n        last_index = array_len - 1\n        current_sum = array[first_index] + array[last_index]\n        while first_index < last_index:\n            if current_sum % 2 == 0:\n                swap(first_index, last_index)\n                current_sum -= array[first_index] + array[last_index]\n                first_index += 1\n                last_index -= 1\n            else:\n                break\n    else:\n        first_index = 0\n        last_index = array_len - 1\n        current_sum = array[first_index] + array[last_index]\n        while first_index < last_index:\n            if current_sum % 2 == 1:\n                swap(first_index, last_index)\n                current_sum -= array[first_index] + array[last_index]\n                first_index += 1\n                last_index -= 1\n            else:\n                break\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    arr = list(array)\n    if len(arr) == 0:\n        return arr\n    sum = 0\n    for i in range(0, len(arr) - 1):\n        sum += arr[i] + arr[i + 1]\n    if sum % 2 == 0:\n        for i in range(0, len(arr) - 1):\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    else:\n        for i in range(0, len(arr) - 1):\n            arr[i], arr[i + 1] = arr[i], arr[i + 1]\n    return arr", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum = 0\n    while True:\n        if sum % 2 == 0:\n            return array.reverse()\n        else:\n            array.sort()\n            return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def helper(array, start=0, end=len(array)):\n        if start >= end:\n            return array\n        else:\n            left_sum = sum(array[start:end])\n            right_sum = sum(array[start+1:end+1])\n            if left_sum % 2!= right_sum % 2:\n                return helper(array, start+1, end)\n            else:\n                return helper(array, start, end-1)\n\n    return helper(array)\n\narr = [2, 4, 3, 0, 1, 5, 6]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    if len(array) == 0:\n        return []\n    new_array = [array[0]]\n    index = 1\n    for num in array[1:]:\n        if num < new_array[index-1]:\n            new_array[index-1] = num\n        else:\n            new_array.append(num)\n            index += 1\n    odd_sum = sum(array[:index])\n    even_sum = sum(array[index:])\n    if odd_sum == even_sum:\n        return new_array\n    elif odd_sum > even_sum:\n        return new_array\n    else:\n        return new_array[::-1]\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    n = len(array)\n    first_index_sum = array[0]\n    last_index_sum = array[-1]\n\n    if first_index_sum % 2 == 0:\n        if last_index_sum % 2 == 0:\n            array.reverse()\n        else:\n            array.sort()\n    else:\n        if last_index_sum % 2 == 1:\n            array.sort()\n        else:\n            array.reverse()\n    return array\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array = sorted(array)\n    if sum(array) % 2 == 0:\n        array.reverse()\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    len_array = len(array)\n\n    if len_array == 0:\n        return []\n    elif len_array == 1:\n        return array\n\n    result = []\n\n    array.sort()\n\n    odd_sum = sum(i for i in array)\n    even_sum = len_array * (len_array - 1) // 2\n\n    if odd_sum % 2 == 0:\n        array.reverse()\n\n    for i in range(len_array):\n        result.append(array[i])\n\n    return result", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    num = len(array)\n    for i in range(num - 1):\n        for j in range(i + 1, num):\n            if array[i] + array[j] > 0:\n                if array[i] + array[j] % 2 == 0:\n                    array[i], array[j] = array[j], array[i]\n                else:\n                    array[i], array[j] = array[i], array[j]\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    result_array = []\n    if len(array) < 2:\n        return array\n    elif len(array) == 2:\n        if array[0] <= array[1]:\n            result_array.append(array[0])\n            result_array.append(array[1])\n        else:\n            result_array.append(array[1])\n            result_array.append(array[0])\n\n    elif len(array) > 2:\n        last_index = len(array) - 1\n        first_index = 0\n        sum = 0\n        while first_index < last_index:\n            sum += array[first_index]\n            sum += array[last_index]\n            if sum % 2 == 0:\n                result_array.append(array[last_index])\n                array[last_index] = array[first_index]\n                array[first_index] = last_index\n                last_index -= 1\n            else:\n                result_array.append(array[first_index])\n                array[first_index] = array[last_index]\n                array[last_index] = first_index\n                first_index += 1\n    return result_array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write code here\n\n    def sum_odd_even(array):\n        odd = 0\n        even = 0\n        for i in range(len(array)):\n            if i % 2 == 1:\n                odd += array[i]\n            else:\n                even += array[i]\n        return odd, even\n\n    def swap(array, i, j):\n        tmp = array[i]\n        array[i] = array[j]\n        array[j] = tmp\n\n    def swap2(array, first, last):\n        if first > last:\n            return\n        middle = first + ((last - first) // 2)\n        swap(array, first, middle)\n        swap(array, middle, last)\n\n    def sort_by_switch(array):\n        for i in range(len(array)):\n            if i % 2 == 1:\n                if i == 0:\n                    return array\n                else:\n                    last = array[i - 1]\n                    first = array[i]\n                    swap(array, i - 1, i)\n                    swap(array, last, first)\n            else:\n                if i == len(array) - 1:\n                    return array\n                else:\n                    last = array[i + 1]\n                    first = array[i]\n                    swap2(array, first, last)\n\n    odd, even = sum_odd_even(array)\n\n    if odd ==", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] + array[j] == 0:\n                array[i], array[j] = array[j], array[i]\n            elif (array[i] + array[j]) % 2 == 0:\n                if array[i] > array[j]:\n                    array[i], array[j] = array[j], array[i]\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum(array):\n        \"\"\"\n        Return the sum of the elements in the given array.\n        \"\"\"\n        return sum(array)\n\n    def check_odd_even(array):\n        \"\"\"\n        Check whether the given array is odd or even.\n        \"\"\"\n        return sum(array) % 2\n\n    def is_odd(array):\n        \"\"\"\n        Sort the given array in ascending order if the sum of the given array is odd,\n        otherwise sort the given array in descending order.\n        \"\"\"\n        if check_odd_even(array) == 1:\n            return sort_array(array)\n        return sorted(array, reverse=True)\n\n    def is_even(array):\n        \"\"\"\n        Sort the given array in descending order if the sum of the given array is even,\n        otherwise sort the given array in ascending order.\n        \"\"\"\n        if check_odd_even(array) == 0:\n            return sort_array(array)\n        return sorted(array)\n\n    def start(array):\n        \"\"\"\n        Start sorting the given array in ascending or descending order.\n        \"\"\"\n        if check_odd_even(array) == 1:\n            return is_odd(array)\n        return is_even(array)\n\n    return start(array)</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    array = list(array)\n    if len(array) > 1:\n        if sum(array) % 2!= 0:\n            array.sort(reverse=True)\n        else:\n            array.sort()\n    return array\n\n\narr = [5, 2, 3, 4, 0, 1, 5, 6]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array\n    middle = int(len(array) / 2)\n    index = middle\n    for i in range(0, len(array)):\n        array[i] = int(array[i])\n    odd = 0\n    even = 0\n    last = array[index]\n    if last%2 == 0:\n        even += 1\n        odd = last/2\n        for i in range(0, index):\n            array[i] = array[i]+odd\n    else:\n        odd += 1\n        even = last/2\n        for i in range(0, index):\n            array[i] = array[i]+even\n    return array\n\narray = [7,2,4,3,0,1,5]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    i, n = 0, len(array)\n    while i < n:\n        if sum(array) % 2 == 0:\n            array.append(array.pop(0))\n            i += 1\n        else:\n            i += 1\n    return array\n\narray = [2, 4, 3, 0, 1, 5, 6]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    arr = array.copy()\n\n    for i in range(len(arr)-1):\n        x = arr[i]\n        y = arr[i+1]\n        if y - x > 0:\n            if y - x % 2 == 0:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n            else:\n                arr[i], arr[i+1] = arr[i], arr[i+1]\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n\n    return arr", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    import copy\n\n    l = len(array)\n    # if l == 0:\n    #     return array\n    #\n    # # if l == 1:\n    # #     return array\n\n    # if array[0] + array[-1] == l * (l + 1) // 2:\n    #     return copy.deepcopy(array)\n\n    # else:\n    #     return copy.deepcopy(reverse_array(array))", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array.sort(key=lambda x: x[1], reverse=True if int(sum(x)) % 2 == 0 else True)\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write code here", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array.sort()\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_array(arr):\n        \"\"\"\n        Given an array of non-negative integers, return the sum of all the values in the given array,\n        you need to traverse each value in the given array and add it to the value of the next element.\n        \"\"\"\n        # assert isinstance(arr, list) and all(isinstance(e, int) for e in arr)\n        if len(arr) == 0:\n            return 0\n        else:\n            return arr[0] + sum_array(arr[1:])\n\n    def get_index_value(index, arr):\n        \"\"\"\n        Given an index, return the value at that index, you need to go from the first index of the\n        given array to the given index and add each value in the given array to the value of the\n        next index.\n\n        Examples:\n        * get_index_value(0, []) => 0\n        * get_index_value(0, [5]) => 5\n        * get_index_value(0, [2, 4, 3, 0, 1, 5]) => 0\n        * get_index_value(0, [2, 4, 3, 0, 1, 5, 6]) => 0\n        \"\"\"\n        if len(arr) == 0:\n            return 0\n        else:\n            return arr[index - 1] + get_index_value", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum(array):\n        sum = 0\n        for i in range(len(array)):\n            sum += array[i]\n        return sum\n\n    def compare(array):\n        if sum(array) % 2 == 0:\n            return -1\n        else:\n            return 1\n\n    array = list(array)\n    array.sort(key=lambda x: x, reverse=compare(array))\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n    copy = [array[0]]\n    copy.extend(array[1:])\n    if sum(copy) % 2 == 0:\n        copy.sort()\n    else:\n        copy.sort(reverse=True)\n    return copy", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    result = []\n    if len(array) == 0:\n        return array\n    sum = 0\n    for i in range(len(array)):\n        sum += array[i]\n    if sum % 2 == 0:\n        for i in range(len(array)):\n            result.append(array.pop(0))\n        for i in range(len(array)):\n            result.append(array.pop(0))\n    else:\n        for i in range(len(array)):\n            result.append(array.pop(-1))\n        for i in range(len(array)):\n            result.append(array.pop(-1))\n    return result\n\narr = [5, 5, 3, 0, 1, 3]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n    array_length = len(array)\n\n    if array_length == 0:\n        return []\n\n    middle_index = int(array_length / 2)\n    first, last = array[:middle_index], array[middle_index:]\n    first_sum = sum(first)\n    last_sum = sum(last)\n    if first_sum % 2 == 0:\n        # Descending order\n        last.extend(first)\n        return sort_array(last)\n    else:\n        # Ascending order\n        first.extend(last)\n        return sort_array(first)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    tmp = sum(array)\n    if tmp % 2!= 0:\n        return array[::-1]\n    return sorted(array)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def odd_even_sum(nums):\n        sum = 0\n        for x in nums:\n            sum += x\n        return sum % 2\n\n    return [nums[-1],nums[-2]] if odd_even_sum(nums[:-2]) == 0 else [nums[-2],nums[-1]]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array.sort()\n    if array[0] + array[len(array) - 1] % 2 == 0:\n        array.reverse()\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    result = []\n    last_index = len(array) - 1\n    sum_of_values = array[0] + array[last_index]\n    if sum_of_values % 2 == 0:\n        for i in range(1, last_index):\n            sum_of_values -= array[i]\n            result.append(array[i])\n    else:\n        for i in range(1, last_index):\n            sum_of_values += array[i]\n            result.append(array[i])\n    return result", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    if not array or len(array) < 2:\n        return array\n    # step1. sort the array\n    if len(array) % 2 == 1:\n        array.sort()\n    else:\n        array.sort(reverse=True)\n    # step2. check whether array is already sorted\n    if array[0] >= array[-1]:\n        return array\n    # step3. if not, then we need to reverse the array\n    if len(array) % 2 == 1:\n        array.reverse()\n    else:\n        array.reverse()\n        array.sort(reverse=True)\n    # step4. return the sorted array\n    return array\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    num = 0\n    if len(array) == 0:\n        return []\n    elif array[0] <= array[-1]:\n        for i in array:\n            if i <= array[-1]:\n                num += i\n                print(num)\n                if num % 2 == 0:\n                    array.append(array.pop(0))\n                else:\n                    array.insert(0, array.pop(-1))\n\n    return array\n\n\narr = [2, 4, 3, 0, 1, 5]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sort_func(arr):\n        i = 0\n        j = len(arr) - 1\n        temp = arr[0]\n        while i < j:\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        if temp % 2!= 0:\n            arr.reverse()\n        return arr\n    return sort_func(array)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write code here\n    array = array[::-1] #array will be reversed\n    sum = 0 #the total of array will be calculated\n    for i in array:\n        sum = sum + i #for each element of array, add it to sum\n    if sum % 2 == 0: #odd number -> ascending order\n        for i in array:\n            temp = array.pop()\n            array.insert(0,temp)\n    else: #even number -> descending order\n        for i in array:\n            temp = array.pop()\n            array.insert(0,temp)\n    return array\n\narray = [1,3,2,5,0,4,1]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_sort(input):\n        input_sum = 0\n        for num in input:\n            input_sum += num\n\n        if input_sum % 2 == 0:\n            return sorted(input, reverse=True)\n        else:\n            return sorted(input)\n\n    return list(map(sum_sort, array))\n\n\narray = [2, 4, 3, 0, 1, 5, 6]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if array is []:\n        return []\n    res = []\n    cur_sum = 0\n    cur_index = 0\n    for num in array:\n        cur_sum += num\n        res.append(num)\n        if cur_sum % 2 == 0:\n            res.append(num)\n            cur_sum -= num\n        cur_index += 1\n    return res", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def recurse(array, start, end):\n        # If the sum of the start and end index numbers is odd\n        # sort in ascending order.\n        if start + end % 2!= 0:\n            for i in range(start, end + 1):\n                array[i], array[end - i] = array[end - i], array[i]\n            return\n        # Else sort in descending order\n        else:\n            for i in range(start, end + 1):\n                array[i], array[end - i] = array[end - i], array[i]\n            return array\n\n    return recurse(array, 0, len(array) - 1)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return_value = []\n    i = j = k = 0\n    while i < len(array):\n        if array[i] + array[j] > 0:\n            if array[i] + array[j] % 2 == 0:\n                return_value.append(array[i])\n                return_value.append(array[j])\n            else:\n                return_value.append(array[j])\n                return_value.append(array[i])\n        else:\n            return_value.append(array[i])\n        i += 1\n        j += 1\n\n    return return_value", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_of_first_index_to_last_index(arr):\n        result = 0\n        for i in arr:\n            result += i\n        return result\n\n    if not array:\n        return array\n    odd = sum_of_first_index_to_last_index(array) % 2\n    return [value for index, value in enumerate(array) if index % 2 == odd] + [value for index, value in enumerate(array) if index % 2 == not odd]\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def select_sort(array):\n        \"\"\"\n        This is a fast sorting algorithm for small arrays.\n        \"\"\"\n        for i in range(len(array)):\n            for j in range(i + 1, len(array)):\n                if array[i] > array[j]:\n                    array[i], array[j] = array[j], array[i]\n\n    if len(array) <= 1:\n        return array\n\n    # if array[i] >= array[i+1], then the array[i] and array[i+1] can be swapped.\n    # if the number of array[i] >= array[i+1] is odd, then the array will be sorted in ascending order,\n    # otherwise, the array will be sorted in descending order\n    for i in range(len(array) - 1):\n        if array[i] >= array[i + 1]:\n            if array[i] + array[i + 1] % 2 == 1:\n                array[i], array[i + 1] = array[i + 1], array[i]\n            else:\n                array[i], array[i + 1] = array[i + 1], array[i]\n\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n\n    length = len(array)\n    left, right = 0, length - 1\n    while left < right:\n        mid = left + right // 2\n        if (array[mid] + array[mid + 1]) % 2:\n            if array[mid] > array[mid + 1]:\n                array[mid], array[mid + 1] = array[mid + 1], array[mid]\n            left = mid + 1\n        else:\n            right = mid - 1\n    return array[left : right + 1]\n\narray = [1, 3, 3, 4, 5, 7, 5, 6]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sort(array, lambda x, y: compare(x + y, 0, 1))", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return_array = []\n\n    if len(array) < 2:\n        return return_array\n    elif len(array) == 2:\n        return_array.append(array[0])\n        return_array.append(array[1])\n        return return_array\n    elif len(array) > 2:\n        array.sort()\n        array.reverse()\n        first_index = array[0]\n        last_index = array[-1]\n        if (first_index + last_index) % 2 == 0:\n            return_array.extend(array)\n            return return_array\n        else:\n            return_array.append(array[0])\n            return_array.append(array[-1])\n            return_array.extend(array[1:-1])\n            return return_array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def myfunc(i, j):\n        if i!= j:\n            return (array[i] + array[j]) % 2 == 0\n        else:\n            return False\n\n    return sorted(array, key=myfunc, reverse=True)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum(values):\n        return sum(values)\n\n    def is_even(number):\n        return number % 2 == 0\n\n    def is_out_of_range(array, index):\n        if index < 0 or index >= len(array):\n            return True\n        return False\n\n    def sort(array):\n        if len(array) == 0:\n            return array\n        if sum(array) % 2 == 0:\n            return array[::-1]\n        else:\n            return array\n\n    return sort(array)</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def compare(a, b):\n        if a + b % 2 == 1:\n            return 1\n        else:\n            return -1\n\n    return sorted(array, cmp=compare)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    assert isinstance(array, list)\n\n    result = []\n\n    def search(arr, pos, n):\n        if pos == n:\n            return arr\n        else:\n            if arr[pos] > arr[pos + 1]:\n                return search(arr, pos + 1, n)\n            else:\n                return search(arr, pos + 1, n) + arr[pos]\n\n    def sort(arr, pos, n):\n        if pos == n:\n            return arr\n        else:\n            result.append(arr[pos])\n            return sort(search(arr, pos + 1, n), pos + 1, n)\n\n    for i in array:\n        result.append(i)\n        result = sort(result, 1, len(array))\n\n    return result", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def sum_of_first_last_index(arr):\n        return arr[0] + arr[-1]\n\n    def sort_in_descending_order(arr):\n        return arr[::-1] if sum_of_first_last_index(arr) % 2 == 0 else arr\n\n    def sort_in_ascending_order(arr):\n        return arr if sum_of_first_last_index(arr) % 2 == 0 else arr[::-1]\n\n    return sort_in_descending_order(sort_in_ascending_order(array))", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n\n    result = []\n    max_index = len(array) - 1\n    min_index = 0\n    max_sum = 0\n    for i in range(0, len(array)):\n        temp_sum = array[i] + array[max_index]\n        if temp_sum % 2!= 0:\n            result.append(array[i])\n        elif temp_sum % 2 == 0:\n            result.append(array[max_index])\n        max_sum = max(max_sum, temp_sum)\n        max_index -= 1\n        min_index += 1\n\n    # Combine two sorted arrays\n    middle_index = (len(result) - 1) / 2\n    result = result[:middle_index] + result[middle_index + 1:]\n\n    return result", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return array\n    sum_array = 0\n    for el in array:\n        sum_array += el\n    if sum_array % 2 == 1:\n        return sorted(array, reverse = True)\n    return sorted(array)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    len_array = len(array)\n    i = 0\n    while i < len_array - 1:\n        if array[i] + array[i + 1] % 2 == 0:\n            array[i], array[i + 1] = array[i + 1], array[i]\n        i += 1\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    n = len(array)\n    # print n, sum(array)\n    if n <= 1:\n        return array\n    if sum(array) % 2 == 0:\n        # print sum(array), sum(array) % 2 == 0\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    num = 0\n    for i in range(len(array) - 1):\n        if array[i] + array[i + 1] == 0:\n            num = array[i + 1]\n            array[i] = -num\n            array[i + 1] = num\n        elif array[i] + array[i + 1]!= 0:\n            if array[i] + array[i + 1] % 2 == 0:\n                array[i], array[i + 1] = array[i + 1], array[i]\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    arr = list(array)\n    if len(arr) < 2:\n        return arr\n\n    total = sum(arr)\n    if total % 2 == 0:\n        arr.sort(reverse=True)\n    else:\n        arr.sort()\n    return arr", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    nums = array\n    n = len(nums)\n    nums = sorted(nums)\n    if n % 2 == 0:\n        for i in range(0, n - 1):\n            if nums[i] + nums[i + 1]!= nums[i]:\n                nums.reverse()\n                break\n            else:\n                nums.reverse()\n        else:\n            nums.reverse()\n    else:\n        nums.reverse()\n    return nums", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def check(x):\n        return x < len(array) - 1\n\n    def swap(x, y):\n        if check(x) and check(y) and array[x] > array[y]:\n            temp = array[x]\n            array[x] = array[y]\n            array[y] = temp\n\n    for _ in range(len(array) - 1):\n        for i in range(len(array) - 2):\n            if check(i):\n                if array[i + 1] - array[i] == 1:\n                    swap(i + 1, i + 2)\n                elif array[i + 1] - array[i] == 0:\n                    swap(i, i + 1)\n                else:\n                    swap(i, i + 1)\n\n    return array\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    # \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u6bcf\u6b21\u5faa\u73af\u90fd\u91cd\u65b0\u751f\u6210\n    # \u6700\u540e\u4e00\u4e2a\u503c\u662f 1, \u6240\u4ee5\u4e0d\u53c2\u4e0e\u4e8c\u5206\u67e5\u627e\n    temp = []\n    n = len(array)\n    k = n - 1\n    while k > 0:\n        if array[k] % 2 == 0:\n            if k > 0:\n                temp.append(array[k - 1])\n            temp.append(1)\n            k -= 1\n        else:\n            temp.append(array[k])\n            k -= 1\n    if len(temp) % 2 == 1:\n        temp.append(0)\n    return temp\n\n\n\"\"\"\n    sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    sort_array([]) => []\n    \"\"\"\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    num = 0\n    for i in range(len(array)):\n        num += array[i]\n    if num % 2 == 0:\n        return sort_array_descending(array)\n    else:\n        return sort_array_ascending(array)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    n = len(array)\n    if n == 0:\n        return array\n    first = array[0]\n    last = array[-1]\n    mid = n // 2\n\n    sum_first = first\n    sum_last = last\n    for i in range(n - 1):\n        sum_first += array[i]\n        sum_last -= array[n - 1 - i]\n    if sum_first < sum_last:\n        return sort_array(array[mid:] + array[:mid])\n    else:\n        return sort_array(array[mid:] + array[:mid])[::-1]</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_in_block(arr, left, right):\n        return arr[left] + arr[right]\n\n    if len(array) <= 1:\n        return array\n    middle = len(array) // 2\n    left = 0\n    right = len(array) - 1\n    while left < right:\n        if sum_in_block(array, left, right) % 2 == 0:\n            array[left], array[right] = array[right], array[left]\n            left += 1\n        else:\n            array[left], array[right] = array[right], array[left]\n            right -= 1\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write code here\n\n    # your code should return a new array, you can modify the input array\n    # but it will not be reflected in your score\n\n    def sum_of_first_last(array):\n        first = 0\n        last = len(array) - 1\n        while first <= last:\n            first += array[first]\n            last -= array[last]\n        return first + last\n\n    def even_or_odd(sum):\n        if sum % 2 == 0:\n            return \"descending\"\n        else:\n            return \"ascending\"\n\n    def sort(array):\n        return [even_or_odd(sum_of_first_last(array[:len(array) - i])) for i in range(len(array))]\n    return sort(array)</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array\n    sum1 = sum(array[:(len(array) - 1)])\n    if sum1 % 2 == 0:\n        return sort_array(array[::-1])\n    else:\n        return sort_array(array)\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    result = []\n    if len(array) < 2:\n        return array\n    if array[0] + array[-1] % 2!= 0:\n        result = sorted(array, reverse=True)\n    else:\n        result = sorted(array)\n    return result", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def sum_range(array):\n        \"\"\"\n        Return the sum of the numbers in a range of indexes in the given array.\n\n        Examples:\n        * sum_range([]) => 0\n        * sum_range([5]) => 5\n        * sum_range([2, 4, 3, 0, 1, 5]) => 10\n        * sum_range([2, 4, 3, 0, 1, 5, 6]) => 16\n        \"\"\"\n        sum = 0\n        for i in range(len(array)):\n            sum += array[i]\n        return sum\n\n    # Do not change the value of the array\n    array.sort(key=lambda x: sum_range(x), reverse=True) if sum_range(array) % 2 == 0 \\\n        else array.sort(key=lambda x: sum_range(x))\n\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    for i in range(len(array)):\n        for j in range(len(array)):\n            if j > i:\n                if array[j] > array[j]:\n                    array[j], array[i] = array[i], array[j]\n    if sum(array[0], array[-1]) % 2 == 1:\n        return array[::-1]\n    else:\n        return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum = 0\n    for i in range(len(array)):\n        sum += array[i]\n    if sum % 2 == 0:\n        return sorted(array, reverse = True)\n    else:\n        return sorted(array, reverse = False)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    a = array\n    count = 0\n    length = len(a)\n    while count <= length - 1:\n        if a[count] + a[count + 1] % 2 == 0:\n            if a[count] > a[count + 1]:\n                tmp = a[count]\n                a[count] = a[count + 1]\n                a[count + 1] = tmp\n        else:\n            count += 1\n    return a\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array or len(array) <= 1:\n        return array\n    _sum = sum(array)\n    if _sum % 2 == 0:\n        return array[::-1]\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    a = []\n    for x in array:\n        i = 0\n        while (i <= x):\n            a.append(array[x])\n            i = i + 1\n    if (sum(a) % 2 == 0):\n        a.sort(reverse = True)\n    else:\n        a.sort()\n    return a", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    nums = list(map(int, input().split()))\n    new_array = []\n    sum_of_nums_before = sum(nums)\n    for num in nums:\n        new_array.append(num)\n    if sum_of_nums_before % 2 == 1:\n        #sum_of_nums_before is odd, so we need to sort the array in ascending order\n        return sorted(new_array)\n    else:\n        return sorted(new_array, reverse=True)\n\narr = input().split()", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    array = [1, 2, 2, 5, 10, 6, 7, 8, 20]\n    copy_array = array\n    print(copy_array)\n    copy_array.sort()\n    print(copy_array)\n    return copy_array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n\n    start_index = 0\n    end_index = len(array) - 1\n    sum_value = array[0] + array[-1]\n\n    if sum_value % 2 == 0:\n        for index in range(start_index, end_index, -1):\n            temp = array[index]\n            array[index] = array[index + 1]\n            array[index + 1] = temp\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    nums = list(array)\n    if nums == []:\n        return []\n    if nums == [5] or nums == [-1]:\n        return []\n    res = []\n    flag = 0\n    if sum(nums[0:len(nums) - 1]) % 2 == 1:\n        flag = 1\n    for i in range(len(nums)):\n        tmp = nums[i]\n        j = i + 1\n        while j < len(nums):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n            j += 1\n        if flag == 1:\n            nums[i], nums[j] = nums[j], nums[i]\n        res.append(tmp)\n    return res", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_indices(arr):\n        return arr[0] + arr[-1]\n\n    def ascending_sort(arr):\n        if sum_indices(arr) % 2 == 0:\n            return arr\n        else:\n            return arr[::-1]\n\n    return ascending_sort(array)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array, reverse = (len(array) % 2))", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_first_last(array):\n        \"\"\"\n        you will calculate the sum of first and last element in array\n        \"\"\"\n        first, last = array[0], array[-1]\n        return first + last\n\n    if not array:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    elif sum_first_last(array) % 2 == 1:\n        return [-x for x in array]\n    else:\n        return [-x for x in array]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    n = len(array)\n    if n < 1:\n        return array\n    s = sum(array)\n    if n == 1:\n        return [array[0]]\n    elif s % 2 == 0:\n        return [array[0]] + sort_array(array[1:])\n    else:\n        return sort_array(array[1:]) + [array[0]]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    n = len(array)\n    if n <= 1:\n        return array\n    sum_odd = sum(array[:n])\n    sum_even = sum(array[:n])\n    if sum_odd % 2 == 1:\n        return list(reversed(array))\n    elif sum_even % 2 == 0:\n        return array\n    else:\n        return []", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    if array == []:\n        return []\n\n    first_ele = array[0]\n    last_ele = array[len(array) - 1]\n    sum_value = first_ele + last_ele\n    if sum_value % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    a = list(array)\n    if sum(a) % 2!= 0:\n        a.sort(reverse = True)\n    else:\n        a.sort()\n    return a", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    arr = list(array)\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    if sum % 2 == 0:\n        for i in range(len(arr)):\n            arr[i] = arr[i] * -1\n    return arr", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_range(start, end):\n        return start + end\n    def sum_different(value):\n        if value % 2 == 1:\n            return value * (-1)\n        else:\n            return value\n\n    def sort_values(list, start, end):\n        if start + end == 0:\n            list.append(value)\n        else:\n            if sum_range(start, end) % 2 == 1:\n                list.append(sum_different(value))\n            else:\n                list.append(value)\n\n    def sum_range_loop(value):\n        list.append(value)\n\n    list = []\n    for value in array:\n        if len(list) == 0:\n            sum_range_loop(value)\n        else:\n            sort_values(list, 0, len(list) - 1)\n    return list\n\n\narr = [-1, 1, 2, 3, 4, 5]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def swap(index, i, j):\n        temp = array[index]\n        array[index] = array[i]\n        array[i] = temp\n\n    # array to be sorted\n    array = list(array)\n\n    for i in range(len(array) - 1):\n        sum1 = array[i] + array[i + 1]\n        if sum1 % 2!= 0:\n            swap(i, i, i + 1)\n        else:\n            swap(i + 1, i, i + 1)\n            # since array[i] + array[i+1] is even, the last number cannot be same as the first number\n            # swap to make the last number smaller than the first number\n            swap(i, i, i + 1)\n\n    return array\n\n\narray = [2, 4, 3, 0, 1, 5, 6]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum(a, b):\n        return a + b\n\n    # \u5faa\u73af\u7ed3\u675f\uff0c\u7ed3\u679c\u5728ans\u6570\u7ec4\u4e2d\n    ans = []\n    # \u8f93\u51fa\u7ed3\u679c\uff0c\u8fd4\u56deans\n    return ans", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sort_by_sum(array):\n        if len(array) <= 1:\n            return array\n        sum1 = array[0] + array[-1]\n        sum2 = array[0] + array[-2]\n        if sum1 % 2 == 0:\n            return sort_by_sum(array[1:])\n        else:\n            return [sum1, sum2] + sort_by_sum(array[1:])\n    return sort_by_sum(array)\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_value(data):\n        return data[0] + data[-1]\n\n    return [i for i in array if sum_value(array[i:i + 2]) % 2 == 0] if array else []", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    nums = sorted(array)\n\n    if sum(nums) % 2 == 0:\n        return nums[::-1]\n    else:\n        return nums", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    for _ in range(len(array) / 2):\n        if array[0] + array[len(array) - 1] % 2 == 0:\n            print(array)\n            break\n        elif array[0] + array[len(array) - 1] % 2 == 1:\n            print(array)\n            break\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    if array == []:\n        return []\n    if len(array) == 1:\n        return array\n    sum = 0\n    for i in range(len(array)):\n        sum += array[i]\n    if sum % 2 == 1:\n        return [val + 1 for val in array]\n    else:\n        return [val - 1 for val in array]\n\n\narray = [2, 4, 3, 0, 1, 5, 6]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array\n\n    temp = array[::2]\n    tmp2 = array[1::2]\n    if sum(temp) % 2 == 0:\n        tmp2.reverse()\n    else:\n        tmp2.sort()\n    return tmp2 + temp\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    low = 0\n    high = len(array) - 1\n    while low < high:\n        while low < high and (sum(array[low], array[high])) % 2 == 0:\n            low += 1\n        if low < high:\n            high -= 1\n        while low < high and (sum(array[low], array[high])) % 2!= 0:\n            high -= 1\n        if low < high:\n            low += 1\n    return array[low:high + 1]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array = list(array)\n    # length = len(array)\n    length = len(array) - 1\n\n    if length < 1:\n        return array\n\n    sum = 0\n    # sum = sum(array)\n    for i in range(0, length):\n        sum += array[i]\n    if sum % 2!= 0:\n        # for i in range(0, length):\n        #     array[i], array[length] = array[length], array[i]\n        # return array[::-1]\n        temp = array[length]\n        array[length] = array[0]\n        array[0] = temp\n        return array[::-1]\n    else:\n        return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def get_order(array):\n        \"\"\"\n        :param array:\n        :return:\n        \"\"\"\n        order = []\n        current_sum = 0\n        for index, element in enumerate(array):\n            if element > 0:\n                current_sum += element\n            else:\n                current_sum -= element\n            order.append(current_sum)\n        return order\n\n    sorted_array = []\n    temp_array = []\n\n    # sort odd and even numbers in different orders\n    if get_order(array)[0] % 2 == 0:\n        temp_array = [array[index] for index in get_order(array)]\n        sorted_array = sort_array_helper(temp_array)\n    else:\n        sorted_array = sort_array_helper(array)\n\n    return sorted_array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    new_array = []\n    if not array or len(array) == 0:\n        return []\n    for i in range(len(array)):\n        last = array[i]\n        for j in range(i+1, len(array)):\n            sum = array[i] + array[j]\n            if sum % 2 == 0:\n                new_array.append(sum)\n                new_array.append(last)\n                last = array[j]\n            else:\n                new_array.append(sum)\n                new_array.append(array[j])\n        new_array.append(last)\n    return new_array\n\narr = [2,4,3,0,1,5]\narr = sort_array(arr)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    # array.sort();\n    # return array;\n    #return [ (sum(array)%2==0)?array.reverse():array ];\n    if len(array) <=1:\n        return array;\n    mid = int(len(array)/2)\n    if mid==0:\n        return array;\n    if (sum(array[:mid])%2==0):\n        return array[:mid]+sort_array(array[mid+1:]);\n    else:\n        return array[:mid]+sort_array(array[mid+1:]);</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    n = len(array)\n    if n == 0:\n        return array\n    i = j = 0\n    sum_value = 0\n    while j < n:\n        while sum_value < i and j < n:\n            sum_value += array[j]\n            j += 1\n        if sum_value == i:\n            array[i], array[j] = array[j], array[i]\n            i += 1\n            j += 1\n        else:\n            i += 1\n\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    n = len(array)\n    if n <= 1:\n        return array\n\n    middle_index = n / 2\n    left = array[:middle_index]\n    right = array[middle_index:]\n\n    # left sorted\n    if sum(left) % 2 == 1:\n        return sort_array(left + right)\n\n    # right sorted\n    elif sum(right) % 2 == 1:\n        return sort_array(left + right)[::-1]\n\n    else:\n        return sort_array(left + right)[::-1] + sort_array(right)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_index(arr):\n        if len(arr) == 0:\n            return 0\n        sum = arr[0]\n        for i in arr[1:]:\n            sum += i\n        return sum\n\n    n = len(array)\n    first = array[0]\n    last = array[-1]\n    odd = sum_index(array) % 2 == 1\n\n    array.sort()\n\n    if odd:\n        array.reverse()\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum(a, b):\n        return a + b\n\n    def find_odd_even(num):\n        return num % 2\n\n    def swap(num):\n        if num[0] > num[1]:\n            return [num[1], num[0]]\n        else:\n            return [num[0], num[1]]\n\n    res = []\n    for num in array:\n        if sum(num[0], num[-1]) % 2 == 0:\n            res.extend(sort_list(num))\n        else:\n            res.extend(sort_list(swap(num)))\n    return res", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    arr = list(array)\n    if len(arr) == 0:\n        return arr\n    mid = int(len(arr) / 2)\n    if sum(arr[:mid]) % 2 == 0 and sum(arr[mid:]) % 2 == 0:\n        arr.sort(reverse=True)\n    else:\n        arr.sort()\n    return arr", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_of_first_last_index_value(arr):\n        return arr[0] + arr[-1]\n\n    if not array:\n        return array\n    if len(array) <= 1:\n        return array\n    if sum_of_first_last_index_value(array) % 2 == 0:\n        return sort_array(sorted(array, reverse=True))\n    return sort_array(sorted(array, reverse=False))", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def inner_func(array):\n        array.sort(key=lambda value: array.index(value) + 1)\n        return array\n\n    def is_odd(value):\n        return value % 2 == 1\n\n    def is_even(value):\n        return value % 2 == 0\n\n    result = []\n    for num in array:\n        if is_odd(num):\n            result.append(num)\n        elif is_even(num):\n            result.append(num)\n    return inner_func(result)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def add(arr):\n        return sum(arr)\n\n    def find_num(arr):\n        return arr[-1] - arr[0] + 1\n\n    def check_num(arr):\n        if add(arr) % 2:\n            return True\n        else:\n            return False\n\n    def sort_arr(arr):\n        if len(arr) < 2:\n            return arr\n        if check_num(arr) == True:\n            arr.reverse()\n        else:\n            arr.sort()\n        return sort_arr(arr[::-1])\n\n    return sort_arr(arr)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    assert len(array) > 0\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] > array[1]:\n            return array\n        else:\n            return array[::-1]\n    temp = sorted(array)\n    new_arr = []\n    sum_temp = 0\n    for i in range(len(temp)):\n        sum_temp += temp[i]\n        if sum_temp % 2 == 0:\n            if temp[i] < temp[i + 1]:\n                new_arr.append(temp[i + 1])\n                new_arr.append(temp[i])\n            else:\n                new_arr.append(temp[i])\n                new_arr.append(temp[i + 1])\n        else:\n            new_arr.append(temp[i])\n\n    return new_arr", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    arr = list(array)\n    arr.sort()\n\n    if arr[len(arr) - 1] + arr[0] % 2 == 1:\n        return arr\n    else:\n        return arr[::-1]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    arr = copy.deepcopy(array)\n    # if the length of array is 0, return the array\n    if len(arr) == 0:\n        return arr\n\n    # if the length of array is 1, return the array\n    if len(arr) == 1:\n        return arr\n\n    # otherwise, if the first and the last index of array are the same, return the array\n    if arr[0] == arr[-1]:\n        return arr\n\n    # otherwise, sum the first and the last index of array, if the sum is odd, return the array in ascending order\n    # if the sum is even, return the array in descending order\n    total = arr[0] + arr[-1]\n    if total % 2 == 0:\n        return arr[::-1]\n    else:\n        return arr\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    if len(array) == 0:\n        return []\n    last = array[0]\n    first = array[len(array) - 1]\n    if last - first == 1:\n        return [last] + sort_array(array[1:])\n    if last - first == -1:\n        return [first] + sort_array(array[1:])\n    return sort_array(array[1:]) + [last] + sort_array(array[:len(array) - 1])\n\n\n\n\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    for i in range(len(array)):\n        sum = 0\n        for j in range(len(array[i])):\n            sum += array[i][j]\n        if sum % 2 == 0:\n            array[i].sort()\n        else:\n            array[i].sort(reverse=True)\n    return array\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array\n    if len(array) == 2:\n        return sorted(array, reverse=True) if sum(array) % 2 else array\n    left = array[:-1]\n    right = array[1:]\n    sorted(left, reverse=True) if sum(left) % 2 else left\n    return sorted(right, reverse=True) if sum(right) % 2 else right + left\n\nfor i in range(10):\n    print(sort_array(input()))\n\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n    array.sort()\n    if sum(array)%2 == 1:\n        return array\n    else:\n        return array[::-1]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    len_array = len(array)\n    if len_array < 2:\n        return array\n\n    array1 = copy.deepcopy(array)\n    # binary_search is used to find the index of the first element\n    index_first = 0\n    for index, element in enumerate(array1):\n        if element == 0:\n            break\n        index_first = index\n    # binary_search is used to find the index of the last element\n    index_last = len_array - 1\n    for index, element in enumerate(array1[index_first:]):\n        if element == 0:\n            break\n        index_last = index\n    if array1[index_first][index_first] + array1[index_last][index_last] % 2 == 0:\n        return sorted(array1, reverse=True)\n    else:\n        return sorted(array1, reverse=False)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_first_last_index(array):\n        \"\"\"\n        Returns the sum of the first index value and the last index value of the given array.\n        :param array: the given array\n        :return: returns the sum of the first index value and the last index value of the given array\n        \"\"\"\n        first_index_value = array[0]\n        last_index_value = array[-1]\n        return first_index_value + last_index_value\n\n    def even_odd_sum(array):\n        \"\"\"\n        Returns the sum of the first index value, last index value and sum of all the values in the array.\n        :param array: the given array\n        :return: returns the sum of the first index value, last index value and sum of all the values in the array.\n        \"\"\"\n        odd_sum = 0\n        even_sum = 0\n        for x in array:\n            odd_sum += x\n            even_sum += x\n        return odd_sum, even_sum\n\n    for x in array:\n        if x > 0:\n            odd_sum, even_sum = even_odd_sum(array)\n            if odd_sum % 2 == 0:\n                array.sort()\n                return array\n            if even_sum % 2 == 0:\n                array.sort(reverse=True)\n                return array\n    return array\n\n\narray = [2, 4, 3, 0, 1, 5]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    result = []\n    sum = 0\n    if not array:\n        return result\n    for num in array:\n        sum += num\n    if sum % 2:\n        result = sorted(array)\n    else:\n        result = sorted(reversed(array))\n    return result", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write code here", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    temp_array = array\n    array = []\n    for i in range(len(temp_array)//2):\n        if temp_array[i] + temp_array[i + 1] % 2 == 0:\n            temp_array[i], temp_array[i + 1] = temp_array[i + 1], temp_array[i]\n            array.append(temp_array[i])\n            array.append(temp_array[i + 1])\n        else:\n            array.append(temp_array[i])\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    res = []\n    length = len(array)\n    odd = length & 1\n    half = length >> 1\n\n    for i in range(0, half):\n        if odd:\n            if array[i] <= array[i + 1]:\n                res.append(array[i])\n                res.append(array[i + 1])\n                array[i], array[i + 1] = array[i + 1], array[i]\n                odd = 0\n        else:\n            if array[i] > array[i + 1]:\n                res.append(array[i])\n                res.append(array[i + 1])\n                array[i], array[i + 1] = array[i + 1], array[i]\n                odd = 1\n    return res\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def get_sum(arr):\n        return arr[0] + arr[-1]\n    return_list = []\n    # Iterate over the array\n    for a in array:\n        # if the sum of the first and last elements of the array is odd\n        if get_sum(a) % 2 == 1:\n            # then we sort in ascending order\n            return_list.append(sorted(a))\n        else:\n            # we sort in descending order\n            return_list.append(sorted(a, reverse=True))\n    return return_list", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_range(array, start, end):\n        \"\"\"\n        Given an array and two indexes, return the sum of all the elements between\n        the two indexes.\n        \"\"\"\n        if end <= start:\n            return 0\n        return sum(array[start:end + 1])\n\n    def helper(array, start, end):\n        \"\"\"\n        Helper function that will return true if sum_range(array, start, end) is odd,\n        or false if sum_range(array, start, end) is even.\n        \"\"\"\n        if start == end:\n            return True\n        return sum_range(array, start, end) % 2!= 0\n\n    def odd_even_sort(array, start, end):\n        \"\"\"\n        Returns the given array after sorting it in ascending or descending order\n        according to the condition given in the helper function.\n        \"\"\"\n        if not array or not array.pop(start):\n            return array\n        if helper(array, start, end):\n            array.sort(key=lambda x: x - start)\n            return odd_even_sort(array, start, end - 1) + array + odd_even_sort(array, end, len(array))\n        else:\n            array.sort(key=lambda x: end - x)\n            return", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def num_sum(nums):\n        return sum(nums)\n\n    def odd(nums):\n        return num_sum(nums) % 2\n\n    def desc(nums):\n        return -num_sum(nums)\n\n    def sort(nums, ascending):\n        nums.sort(key=lambda num: ascending(num) if num!= 0 else desc(num))\n\n    return sort(array, odd)\n\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    if len(array) == 0:\n        return array\n    sum_1 = 0\n    sum_2 = 0\n    for i in range(len(array)):\n        sum_1 += array[i]\n        sum_2 += array[len(array) - 1 - i]\n    if sum_1 % 2!= 0 and sum_2 % 2!= 0:\n        return sorted(array, reverse = True)\n    elif sum_1 % 2!= 0 and sum_2 % 2 == 0:\n        return sorted(array)\n    elif sum_1 % 2 == 0 and sum_2 % 2!= 0:\n        return sorted(array, reverse = True)\n    else:\n        return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def is_even(num):\n        return num % 2 == 0\n\n    def sort_func(num, i, j):\n        if i + j == len(array):\n            return num\n        if is_even(num):\n            if array[i] > array[j]:\n                array[i], array[j] = array[j], array[i]\n            return sort_func(num, i, j + 1)\n        else:\n            if array[i] > array[j]:\n                array[i], array[j] = array[j], array[i]\n            return sort_func(num + array[i] - array[j], i + 1, j + 1)\n    return sort_func(0, 0, len(array))", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def _sorting(array):\n        return (array[::-1] if sum(array) % 2 else array)\n\n    return [_sorting(i) for i in array]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def _sort_by_sum(number, start, end):\n        if start == end - 1:\n            return number[start] > number[end]\n        if start == end:\n            return 0\n        if number[start] + number[end] % 2 == 1:\n            return number[start] > number[end]\n        else:\n            return number[start] < number[end]\n    new_array = []\n    for index in array:\n        new_array.append(_sort_by_sum(index, 0, len(array) - 1))\n    return new_array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return array\n    sorted = []\n    for i in range(len(array)):\n        j = len(array) - i\n        if i == j:\n            sorted.append(array[i])\n            continue\n        if (array[i] + array[j]) % 2 == 1:\n            sorted.append(array[i])\n            sorted.append(array[j])\n        else:\n            sorted.append(array[j])\n            sorted.append(array[i])\n    return sorted", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def swap_if_odd(array):\n        \"\"\"\n        swap the array if the sum( first index value, last index value) is odd\n        \"\"\"\n        sum = sum(array)\n        if sum % 2 == 1:\n            # swap the array if the sum( first index value, last index value) is odd\n            new_array = [value for index, value in enumerate(array)]\n            new_array.reverse()\n            return new_array\n        return array\n\n    return swap_if_odd(array)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    for _ in range(len(array) - 1):\n        if (array[_ + 1] + array[_]) % 2 == 0:\n            array.append(array[_ + 1])\n        else:\n            array.insert(_, array[_ + 1])\n    return array\n\n\nsorted_list = sort_array([100, 101, 100, 100, 99, 99, 99, 98, 98, 98, 97, 96])", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_first_index_and_last_index(arr):\n        return arr[0] + arr[-1]\n\n    arr = list(array)\n\n    if sum_first_index_and_last_index(arr) % 2 == 0:\n        for i in range(0, len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n        return arr\n    else:\n        for i in range(0, len(arr) - 1):\n            if arr[i] < arr[i + 1]:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n        return arr\n\n\narr = [2, 4, 3, 0, 1, 5, 6]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def sum(left, right):\n        return left + right\n\n    def is_odd(sum):\n        return sum % 2 == 1\n\n    def is_even(sum):\n        return sum % 2 == 0\n\n    for i in range(len(array) - 1):\n        left = array[i]\n        right = array[i + 1]\n        if is_odd(sum(left, right)):\n            array[i], array[i + 1] = array[i + 1], array[i]\n\n    if is_even(sum(array[0], array[-1])):\n        array[-1], array[0] = array[0], array[-1]\n\n    return array\n\n\narray = [2, 4, 3, 0, 1, 5, 6]\nsort_array(array)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_first_last_index(array):\n        \"\"\"\n        This function will sum up the first index and last index value of the given array.\n        :param array: The given array.\n        :return: The sum of the first and last index value of the given array.\n        \"\"\"\n        return sum(array)\n    def is_in_descending_order(array):\n        \"\"\"\n        This function will check if the given array is in descending order or not.\n        :param array: The given array.\n        :return: True if the given array is in descending order, False if the given array is in ascending order.\n        \"\"\"\n        if sum_first_last_index(array) % 2 == 0:\n            return False\n        else:\n            return True\n    def swap(array):\n        \"\"\"\n        This function will swap the first element and last element of the given array.\n        :param array: The given array.\n        :return: The given array with swapped first and last element.\n        \"\"\"\n        return array[:1] + array[-1:] + array[1:-1]\n    def merge_sort(array):\n        \"\"\"\n        This function will use merge sort to sort the given array.\n        :param array: The given array.\n        :return: The sorted array\n        \"\"\"\n        if len(array) > 1:\n            return merge_sort(array[:len(array) // 2]) + merge_sort(array[", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n\n    # use two temp arrays to make merge sort\n    temp_1 = []\n    temp_2 = []\n    for i in range(len(array)):\n        temp_1.append(array[i])\n    for i in range(len(array)):\n        temp_2.append(array[i])\n    #\n    left = 0\n    right = len(temp_1) - 1\n    #\n    while left < right:\n        #\n        #\n        #\n        #\n        if temp_1[left] + temp_1[right] > 0:\n            #\n            #\n            #\n            #\n            if temp_1[left] + temp_1[right] % 2 == 1:\n                #\n                #\n                #\n                #\n                temp_1[left], temp_1[right] = temp_1[right], temp_1[left]\n                temp_2[left], temp_2[right] = temp_2[right], temp_2[left]\n            else:\n                #\n                #\n                #\n                #\n                temp_1[left], temp_1[right] = temp_1[left], temp_1[right]\n                temp_2[left], temp_2[right] =", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def get_balance(array):\n        total = sum(array)\n        balance = 0\n        for value in array:\n            balance += value\n        if balance % 2 == 0:\n            return True\n        else:\n            return False\n\n    def swap(array, index, index_1):\n        tmp = array[index]\n        array[index] = array[index_1]\n        array[index_1] = tmp\n\n    def partition(array):\n        pivot_index = len(array) - 1\n        pivot = array[pivot_index]\n        left_array = []\n        right_array = []\n        for index, value in enumerate(array):\n            if value <= pivot:\n                left_array.append(value)\n            else:\n                right_array.append(value)\n        swap(array, pivot_index, 0)\n        return left_array, right_array\n\n    def merge(left_array, right_array):\n        for index, value in enumerate(left_array):\n            right_array.append(value)\n        for value in right_array:\n            left_array.append(value)\n        return left_array\n\n    return merge(partition(array)[0] if get_balance(array) else partition(array)[1], array) if len(array) > 0 else []", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def swap(array, first_index, second_index):\n        \"\"\"\n        Swap the given two elements in the given array.\n\n        :param array, first_index, second_index: These elements are not changed.\n        :return: None.\n        \"\"\"\n        temp = array[first_index]\n        array[first_index] = array[second_index]\n        array[second_index] = temp\n\n    def recur(array):\n        \"\"\"\n        Recursively sort the given array.\n        :param array: The given array is sorted by this function.\n        :return: None.\n        \"\"\"\n        if array == []:\n            return\n        n = len(array)\n        last_index = n - 1\n        first_index = 0\n        second_index = 1\n        if array[first_index] > array[last_index]:\n            swap(array, first_index, last_index)\n            first_index = 0\n            last_index = n - 1\n        if array[first_index] >= array[last_index]:\n            return\n        while first_index < last_index:\n            if array[second_index] < array[last_index]:\n                swap(array, second_index, last_index)\n                first_index = second_index\n                second_index += 1\n                last_index -= 1\n            else:\n                swap(array, first_index, last_index)\n                first_index += 1\n                last_index", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    num = len(array)\n    sum1 = sum(array)\n    flag = 1\n    if sum1 % 2 == 0:\n        flag = 2\n        print(array)\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return array\n    else:\n        mid = int(len(array) / 2)\n        left = sort_array(array[:mid])\n        right = sort_array(array[mid+1:])\n        sum = 0\n        for i in range(mid):\n            sum += array[i]\n        if sum % 2 == 1:\n            return left + array[mid+1:] + right\n        else:\n            return right + array[mid+1:] + left\n\na = [2, 4, 3, 0, 1, 5, 6]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def find_sums(array):\n        \"\"\"\n        Given an array of non-negative integers, return a new array of all the sums.\n\n        Examples:\n        * find_sums([]) => []\n        * find_sums([5]) => [5]\n        * find_sums([2, 4, 3, 0, 1, 5]) => [2, 4, 6, 8, 3, 5, 7]\n        * find_sums([2, 4, 3, 0, 1, 5, 6]) => [2, 4, 6, 8, 10, 3, 5, 7]\n        \"\"\"\n        def sum_begin_end(current_value):\n            \"\"\"\n            Given a non-negative integer, return a tuple of the sum of all the integers before the given integer\n            and the sum of all the integers after the given integer.\n\n            Examples:\n            * sum_begin_end(0) => (0, 0)\n            * sum_begin_end(2) => (0, 2)\n            * sum_begin_end(4) => (0, 4)\n            * sum_begin_end(6) => (2, 4)\n            * sum_begin_end(10) => (2, 8)\n            \"\"\"\n            index = array.index(current_value)\n            if index == 0:\n                return (", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def sum(arr):\n        return reduce(lambda x,y:x+y, arr)\n\n    if len(array) == 0:\n        return array\n\n    if sum(array)%2 == 1:\n        array.sort()\n    else:\n        array.sort(reverse=True)\n\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def swap(array, i, j):\n        tmp = array[i]\n        array[i] = array[j]\n        array[j] = tmp\n\n    def insert_sort(array, start, end):\n        if start < end:\n            for i in range(start + 1, end):\n                if array[i] < array[i - 1]:\n                    swap(array, i, i - 1)\n                    insert_sort(array, start, i - 1)\n\n    def sum_of_array(array):\n        return sum(array)\n\n    if len(array) == 0:\n        return array\n\n    mid = len(array) // 2\n    if sum_of_array(array[:mid]) % 2 == 0:\n        insert_sort(array, 0, mid - 1)\n    else:\n        insert_sort(array, mid, len(array) - 1)\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def _helper(i, j, array):\n        if i + j > len(array):\n            return\n\n        if array[i] + array[j] == sum(array[i:i+j]):\n            if sum(array[i:i+j]) % 2 == 0:\n                array[j], array[i] = array[i], array[j]\n\n            else:\n                array[i], array[j] = array[j], array[i]\n\n    def _helper2(i, j, array):\n        if i + j > len(array):\n            return\n\n        if array[i] + array[j] == sum(array[i:i+j]):\n            if sum(array[i:i+j]) % 2 == 0:\n                array[j], array[i] = array[i], array[j]\n\n            else:\n                array[i], array[j] = array[j], array[i]\n\n    for i in range(len(array) - 1):\n        _helper(i, i + 1, array)\n\n    _helper2(0, len(array) - 1, array)\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n\n    numbers = []\n    for i in range(len(array)):\n        numbers.append(array[i])\n\n    numbers.sort(reverse = True)\n\n    if sum(numbers) % 2!= 0:\n        numbers.sort(reverse = False)\n        numbers.reverse()\n    return numbers\n\narray = [2, 4, 3, 0, 1, 5, 6]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array = [int(x) for x in array]\n    i = len(array) - 1\n    j = 0\n    n = 0\n    while i > 0:\n        array[i], array[0] = array[0], array[i]\n        i -= 1\n        if n % 2 == 0:\n            n += array[i]\n            array[i] = array[0]\n            array[0] = n\n            i += 1\n        else:\n            n = 0\n        j += 1\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # if the sum(first index value, last index value) is odd, then sort it in ascending order,\n    # else sort it in descending order.\n    odd = sum(array) % 2\n    if odd == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse = True)\n\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array_copy = [array[0]]\n    i = 1\n    while i < len(array):\n        if (array[i - 1] + array[i]) % 2 == 0:\n            array_copy.append(array[i])\n        else:\n            array_copy.append(array[i - 1])\n        i += 1\n    return array_copy\n\n\"\"\"", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    length = len(array)\n    if length == 0:\n        return array\n\n    # create the length-1 left part of the array.\n    left = [0] * (length - 1)\n\n    # create the length-1 right part of the array.\n    right = [0] * (length - 1)\n\n    # find the sum of left and right part.\n    total = 0\n    for i in range(length - 1):\n        left[i] = array[i]\n        right[i] = array[length - i - 1]\n        total += left[i] + right[i]\n\n    # sort the left and right parts, and merge them.\n    left.sort()\n    right.sort()\n    result = left + right\n\n    # return the result.\n    return result", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    result = []\n    for i in range(len(array) - 1):\n        if array[i + 1] + array[i] % 2!= 0:\n            array[i], array[i + 1] = array[i + 1], array[i]\n        result.append(array[i])\n    return result", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def select_sort(array):\n        return sorted(array, key=lambda x: x)\n\n    def insert_sort(array):\n        for i in range(1, len(array)):\n            j = i - 1\n            while j >= 0 and array[j] > array[j + 1]:\n                array[j + 1], array[j] = array[j], array[j + 1]\n                j -= 1\n            array[j + 1], array[j] = array[j], array[j + 1]\n        return array\n\n    def quick_sort(array):\n        i = 0\n        j = len(array) - 1\n        while i < j:\n            while j >= i and array[j] <= array[i]:\n                j -= 1\n            while j >= i and array[i] > array[j]:\n                i += 1\n            array[i], array[j] = array[j], array[i]\n        array[i], array[j] = array[j], array[i]\n        return array\n\n    if len(array) < 2:\n        return array\n\n    if array[0] > array[-1]:\n        array.reverse()\n    sum = 0\n    for i in range(0, len(array) - 1):\n        sum += array[i]\n    if sum % 2 == 0:\n        array.reverse()\n    return sort(array)\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] + array[1] == 0:\n            return array\n        elif array[0] + array[1] == 1:\n            return [array[0], array[1]]\n        else:\n            return [array[1], array[0]]\n    l = len(array)\n    temp = []\n    # for odd number sum\n    for i in range(l):\n        temp.append(array[i])\n    for i in range(l - 1, 0, -1):\n        if temp[i] + temp[i - 1] > 0:\n            temp[i] += temp[i - 1]\n        else:\n            temp[i] -= temp[i - 1]\n    return temp", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # write your code here\n    def even(a):\n        return (sum(a))%2==0\n    def odd(a):\n        return (sum(a))%2!=0\n\n    if (len(array)==0):\n        return array\n    elif (len(array)==1):\n        return array\n    elif (len(array)==2):\n        return [int(array[0])]\n    elif (len(array)==3):\n        return [int(array[0]),int(array[1]),int(array[2])]\n    elif (len(array)>3):\n        if (odd(array)):\n            return sorted(array)\n        else:\n            return array[::-1]\n\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum(nums):\n        return sum(nums)\n\n    arr = list(array)\n    if len(array) == 0:\n        return array\n    num = sum(arr)\n    if num % 2 == 0:\n        return arr[::-1]\n    else:\n        return arr", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n\n    def sum(arr):\n        return arr[0] + arr[-1]\n    def swap(arr, i, j):\n        temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n    def compare(arr, i, j):\n        if sum(arr[i:i+2]) % 2 == 0:\n            return sum(arr[i:i+2]) % 2 == 0\n        else:\n            return sum(arr[i:i+2]) % 2 == 1\n\n    result = []\n    while len(array) > 0:\n        for i in range(len(array)):\n            if compare(array, i, i-1):\n                swap(array, i, i-1)\n            if compare(array, i, i+1):\n                swap(array, i, i+1)\n        if sum(array) % 2!= 0:\n            array.reverse()\n        result.append(array.pop())\n        print(array)\n\n    return result", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    def compare(a, b):\n        if sum(a) % 2 == sum(b) % 2:\n            if sum(a) % 2 == 1:\n                return -1\n            else:\n                return 1\n        elif sum(a) % 2!= sum(b) % 2:\n            if sum(a) % 2 == 1:\n                return 1\n            else:\n                return -1\n\n    def sum_first_last(arr):\n        return sum(arr[:-1]) + arr[-1]\n\n    return [arr[i] for i in sorted(enumerate(arr), key=lambda x: compare(x[1], x[2]))]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array.sort()\n    if sum(array) % 2 == 1:\n        return array\n    else:\n        return [-x for x in array]", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) < 1:\n        return array\n\n    def sum_index_value(indexes):\n        return sum(array[indexes] for indexes in indexes)\n\n    # Get the sum of the first value to last value.\n    if sum_index_value(range(len(array) - 1)) % 2 == 0:\n        # Get the first value to last value, then reverse.\n        return [array[indexes[-1]] + array[indexes[0]] for indexes in sorted(range(len(array) - 1), reverse=True)]\n    else:\n        # Sort the array.\n        return [array[indexes] for indexes in sorted(range(len(array)), reverse=False)]\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    if not array:\n        return []\n    size = len(array)\n    if size == 0:\n        return []\n    total = sum(array)\n    if total == 0:\n        return array\n\n    # Edge cases\n    if total % 2 == 0:\n        for i in range(size):\n            tmp = array[i]\n            array[i] = array[size - 1 - i]\n            array[size - 1 - i] = tmp\n    return array", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # write your code here\n    if array is []:\n        return []\n\n    elif array is None:\n        return None\n\n    array.sort()\n    # swap odd and even position\n    if sum(array[0], array[-1]) % 2:\n        array.reverse()\n    return array\n</s>", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    n = len(array)\n    first = sum(array[:i] for i in range(1, n))\n    last = sum(array[i:] for i in range(1, n))\n    if first == last:\n        return array\n    if first % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum_first_last(array):\n        first = 0\n        last = array.length - 1\n        return array[first] + array[last]\n\n    if array == []:\n        return []\n    if array.length == 1:\n        return array\n    copy = []\n    copy.append(array.pop(0))\n    copy.append(array.pop(array.length - 1))\n    sum_first_last = sum_first_last(array)\n    if sum_first_last % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n\n    while array!= []:\n        copy.append(array.pop(0))\n        copy.append(array.pop(array.length - 1))\n        sum_first_last = sum_first_last(array)\n        if sum_first_last % 2 == 0:\n            array.sort(reverse=True)\n        else:\n            array.sort()\n    return copy", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sum(start, end):\n        return sum(array[start], array[end - 1])\n\n    if len(array) <= 1:\n        return array\n\n    end = len(array) - 1\n    if array[end] > array[0]:\n        return sort_array(array[end:] + array[:end])\n    else:\n        return sort_array([array[0]] + array[1:]) if sum(0, end) % 2 == 1 else sort_array(array[1:] + [array[0]])", "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array = array.copy()\n    if len(array) <= 1:\n        return array\n    i, j = len(array) / 2, len(array) - 1\n    while i <= j:\n        if (array[i] + array[j]) % 2!= 0:\n            array[i], array[j] = array[j], array[i]\n            i -= 1\n        elif array[i] > array[j]:\n            array[i], array[j] = array[j], array[i]\n            i -= 1\n        elif array[i] < array[j]:\n            array[i], array[j] = array[j], array[i]\n            j -= 1\n        elif array[i] == array[j]:\n            i -= 1\n            j -= 1\n    return array"]]