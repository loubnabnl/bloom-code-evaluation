[["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # write your code here\n    def count_ones(num):\n        return bin(num)[2:].count('1')\n    def compare(num1, num2):\n        if count_ones(num1) == count_ones(num2):\n            return cmp(int(num1), int(num2))\n        return cmp(count_ones(num1), count_ones(num2))\n    return sorted(arr, cmp=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [int(i) for i in arr]\n    arr.sort(key=lambda x: sum(bin(x)[2:]))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    arr.sort(key=lambda x: int(bin(x)[2:].count('1')))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def _sort_ones(num):\n        \"\"\"\n        Helper function to sort an array of non-negative integers according to\n        number of ones in their binary representation in ascending order.\n        For similar number of ones, sort based on decimal value.\n        \"\"\"\n        if not num:\n            return 0\n        ones = 0\n        for i in range(len(str(num))):\n            if str(num)[i] == '1':\n                ones += 1\n        return ones\n\n    def _sort_decimal(num):\n        \"\"\"\n        Helper function to sort an array of non-negative integers according to\n        number of ones in their binary representation in ascending order.\n        For similar number of ones, sort based on decimal value.\n        \"\"\"\n        if not num:\n            return 0\n        ones = 0\n        for i in range(len(str(num))):\n            if str(num)[i] == '1':\n                ones += 1\n        return int(str(num)[::-1].rjust(len(str(num)), '0'), 2) + \\\n               int(str(num)[::-1].rjust(len(str(num)), '1'), 2)\n\n    return sorted(arr, key=_sort_ones if _sort_ones(num) > _sort_ones(", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        \"\"\"\n        Count number of ones in the binary representation of a number.\n        >>> count_ones(2)\n        1\n        >>> count_ones(10)\n        1\n        >>> count_ones(23)\n        2\n        \"\"\"\n        return sum(1 for i in num if i == 1)\n\n    def compare(num1, num2):\n        \"\"\"\n        Compare two numbers based on number of ones in their binary representation.\n        >>> compare(1, 5)\n        -1\n        >>> compare(5, 2)\n        1\n        >>> compare(1, 2)\n        0\n        \"\"\"\n        return count_ones(num1) - count_ones(num2)\n\n    def compare_decimal(num1, num2):\n        \"\"\"\n        Compare two numbers based on their decimal representation.\n        >>> compare_decimal(1, 5)\n        1\n        >>> compare_decimal(5, 2)\n        -1\n        >>> compare_decimal(1, 2)\n        0\n        \"\"\"\n        return int(str(num1)) - int(str(num2))\n\n    return sorted(arr, key=lambda num: (count_ones(num), compare_decimal(num, num + 1)))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: int(''.join(str(x) for i in range(len(str(x))))), reverse=False)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_num_ones(num):\n        \"\"\"\n        This function returns the number of ones in the binary representation of a\n        number.\n        >>> get_num_ones(1) == 1\n        >>> get_num_ones(0) == 0\n        >>> get_num_ones(6) == 2\n        \"\"\"\n        num = num - 1\n        ones = 0\n        while num!= 0:\n            ones += (num & 1)\n            num >>= 1\n        return ones\n\n    def get_num_zeros(num):\n        \"\"\"\n        This function returns the number of zeros in the binary representation of a\n        number.\n        >>> get_num_zeros(1) == 0\n        >>> get_num_zeros(0) == 0\n        >>> get_num_zeros(6) == 4\n        \"\"\"\n        num = num - 1\n        zeros = 0\n        while num!= 0:\n            zeros += (num & 1)\n            num >>= 1\n        return zeros\n\n    def compare_binary_representations(num1, num2):\n        \"\"\"\n        This function compares the binary representations of two numbers.\n        If the numbers have the same number of ones, it returns the result of\n        comparing the numbers in decimal.\n        >>> compare_binary_representations(1, 2) == -1\n        >>> compare", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    for i in arr:\n        binary = bin(i)\n        decimal = int(binary, 2)\n        count = sum(binary)\n        if count > 1:\n            decimal = decimal * 2\n            while count > 1:\n                count = count - 1\n                decimal = decimal + 1\n        result.append(decimal)\n    result.sort()\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    count = 0\n    for x in arr:\n        count += 1\n        arr.append(count)\n    arr = sorted(arr)\n    arr.reverse()\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    # Get number of 1 bits from left to right\n    bit_arr = [int(arr[i]) for i in range(len(arr))]\n    bit_arr.reverse()\n    bit_count = bit_arr.pop()\n    bit_counts = []\n    while bit_count!= 0:\n        bit_counts.append(bit_count)\n        bit_count >>= 1\n    # Sort the numbers based on the number of 1 bits\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if bit_counts[i] == bit_counts[j]:\n                if arr[i] < arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                break\n            elif bit_counts[i] > bit_counts[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(n):\n        \"\"\"\n        Count number of ones in a binary representation of n\n        >>> count_ones(1)\n        1\n        >>> count_ones(0)\n        0\n        >>> count_ones(2)\n        1\n        >>> count_ones(3)\n        2\n        >>> count_ones(4)\n        2\n        \"\"\"\n        count = 0\n        while n!= 0:\n            count += n & 1\n            n >>= 1\n        return count\n\n    def count_zeros(n):\n        \"\"\"\n        Count number of zeros in a binary representation of n\n        >>> count_zeros(0)\n        0\n        >>> count_zeros(1)\n        1\n        >>> count_zeros(2)\n        2\n        >>> count_zeros(3)\n        2\n        >>> count_zeros(4)\n        3\n        \"\"\"\n        count = 0\n        while n!= 0:\n            count += n & 1\n            n >>= 1\n        return count\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on number of ones in their binary representation\n        >>> compare(0, 0)\n        0\n        >>> compare(1, 0)\n        1\n        >>> compare(1, 1)\n        0\n        >>> compare(0, 1)\n        -1\n        \"\"\"\n        count_a = count_ones(", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(map(int, arr))\n\n    def num_ones(x):\n        \"\"\"\n        :param x: an integer to be converted to a binary string\n        :return: number of 1s in the binary string\n        \"\"\"\n        return sum(1 for _ in bin(x)[2:])\n\n    def compare(x, y):\n        \"\"\"\n        :param x: an integer to be converted to a binary string\n        :param y: an integer to be converted to a binary string\n        :return: 0 if x == y, -1 if x < y, 1 if x > y\n        \"\"\"\n        return num_ones(x) - num_ones(y)\n\n    arr.sort(key=compare)\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Write your code here\n    nums = [int(x) for x in input().split()]\n    arr = []\n    for x in nums:\n        arr.append(bin(x).count('1'))\n\n    arr.sort()\n    return [int(x) for x in ''.join(reversed(arr)).split('1')]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(num):\n        \"\"\"\n        Converts a number to a binary string\n        >>> binary(-2)\n        '10001'\n        >>> binary(2)\n        '10'\n        >>> binary(5)\n        '101'\n        \"\"\"\n        bin = bin(num)\n        return bin[2:]\n\n    def count_ones(num):\n        \"\"\"\n        Counts number of ones in a binary string\n        >>> count_ones('10001')\n        1\n        >>> count_ones('10')\n        0\n        >>> count_ones('101')\n        2\n        \"\"\"\n        return int(num[2:])\n\n    def sort_by_ones(arr):\n        \"\"\"\n        Sorts an array of numbers by number of ones in their binary representation\n        >>> sort_by_ones([1, 5, 2, 3, 4])\n        [1, 2, 3, 4, 5]\n        \"\"\"\n        return sorted(arr, key=count_ones)\n\n    def sort_by_decimal(arr):\n        \"\"\"\n        Sorts an array of numbers by decimal value\n        >>> sort_by_decimal([-2, -3, -4, -5, -6])\n        [-6, -5, -4, -3, -2]\n        \"\"\"\n        return sorted(arr, key=lambda x: int(x", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # import pdb; pdb.set_trace()\n    # print(\"Called sort_array\")\n    # print(arr)\n    # print(\"---------------------\")\n    # print(arr.count(1))\n    # print(arr.count(0))\n    # print(\"---------------------\")\n    # print(arr.count(1) == arr.count(0))\n    # print(arr.count(0))\n    # print(\"---------------------\")\n    # print(arr.count(0) == 0)\n    # print(arr.count(1) == 0)\n    # print(arr.count(1) == arr.count(0))\n    # print(arr.count(0) == 0)\n    # print(arr.count(1) == 0)\n    # print(arr.count(1) == arr.count(0))\n    # print(arr.count(0) == 0)\n    # print(arr.count(1) == 0)\n    # print(arr.count(0) == 0)\n    # print(\"---------------------\")\n    # print(arr.count(1) == 0)\n    # print(arr.count(0) == 0)\n    # print(\"---------------------\")\n    # print(arr.count", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(map(int, arr))\n    arr.sort(key=lambda x: int(bin(x)[2:]), reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def num_ones(n):\n        \"\"\"\n        Count number of ones in binary representation of integer n\n        >>> num_ones(1)\n        0\n        >>> num_ones(0)\n        0\n        >>> num_ones(5)\n        1\n        >>> num_ones(6)\n        2\n        \"\"\"\n        return bin(n).count('1')\n\n    def num_ones_binary(a):\n        \"\"\"\n        Sort an array of integers a based on number of ones in their binary\n        representation.\n        >>> num_ones_binary([1, 5, 2, 3, 4])\n        [1, 2, 3, 4, 5]\n        >>> num_ones_binary([-2, -3, -4, -5, -6])\n        [-6, -5, -4, -3, -2]\n        \"\"\"\n        return sorted(a, key=num_ones)\n\n    def num_ones_decimal(a):\n        \"\"\"\n        Sort an array of integers a based on their decimal value.\n        >>> num_ones_decimal([1, 5, 2, 3, 4])\n        [0, 1, 2, 3, 4]\n        >>> num_ones_decimal([-2, -3, -4, -5, -6])\n        [-6, -5, -4, -3, -2]\n        \"\"\"\n        return", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    res = [arr[0]]\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            res.append(arr[i])\n        else:\n            res.append(arr[i-1])\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: int(''.join(str(x) for x in x), 2), reverse=False)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    arr.sort(key=lambda x: x.count('1'), reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [int(i) for i in arr]\n    arr.sort(key=lambda x: count_ones(x))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return []\n    arr.sort(key=lambda x: (len(bin(x)) - bin(x).count('1'), x))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    # Solution 1\n    def compare(a, b):\n        if len(bin(a)) > len(bin(b)):\n            return 1\n        elif len(bin(a)) < len(bin(b)):\n            return -1\n        else:\n            return 0\n    # Solution 2\n    def compare(a, b):\n        if len(bin(a)) == len(bin(b)):\n            return 0\n        elif len(bin(a)) > len(bin(b)):\n            return 1\n        elif len(bin(a)) < len(bin(b)):\n            return -1\n        else:\n            return 0\n    # Solution 3\n    def compare(a, b):\n        if len(bin(a)) > len(bin(b)):\n            return 1\n        elif len(bin(a)) < len(bin(b)):\n            return -1\n        else:\n            return 0\n    # Solution 4\n    def compare(a, b):\n        if len(bin(a)) > len(bin(b)):\n            return 1\n        elif len(bin(a)) < len(bin(b)):\n            return -1\n        else:\n            return 0\n    # Solution 5\n    def compare", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _sort(arr):\n        arr.sort(key=lambda x: int(''.join(map(str, bin(x)))))\n        return arr\n    return _sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        count = 0\n        while num:\n            num, digit = divmod(num, 2)\n            count += digit\n        return count\n\n    def sort_by_ones(arr):\n        return sorted(arr, key=lambda x: count_ones(x), reverse=True)\n\n    def sort_by_decimal(arr):\n        return sorted(arr, key=lambda x: int(str(x)[2:]), reverse=True)\n\n    return sort_by_ones(sort_by_decimal(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: int(bin(x)[2:].count('1')))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        for j in range(i - 1, -1, -1):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    if len(arr) == 0:\n        return arr\n    else:\n        return sort_array(arr[1:]) + [arr[0]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        \"\"\"\n        This function counts number of ones in a number in binary format\n        :param num: number to be counted\n        :return: number of ones in the number\n        \"\"\"\n        ones = 0\n        while num > 0:\n            ones += num % 2\n            num = num // 2\n        return ones\n\n    def count_zeroes(num):\n        \"\"\"\n        This function counts number of zeroes in a number in binary format\n        :param num: number to be counted\n        :return: number of zeroes in the number\n        \"\"\"\n        zeroes = 0\n        while num > 0:\n            zeroes += num % 2\n            num = num // 2\n        return zeroes\n\n    def get_dec(num):\n        \"\"\"\n        This function returns decimal value of a number in binary format\n        :param num: number to be converted\n        :return: decimal value of the number\n        \"\"\"\n        dec = 0\n        while num > 0:\n            dec += num % 10\n            num = num // 10\n        return dec\n\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return arr\n    else:\n        arr.sort(key=lambda x: count_ones(x), reverse=True)\n        return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(number):\n        return sum(1 for _ in bin(number)[2:])\n\n    return sorted(arr, key=count_ones)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: len(bin(x).replace('0b', '')))[::-1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr)\n    while True:\n        count = 0\n        for i in range(len(arr) - 1):\n            if arr[i] == arr[i + 1]:\n                count += 1\n            else:\n                break\n        if count == 0:\n            break\n        for i in range(len(arr) - 1):\n            if arr[i] == arr[i + 1]:\n                if count == 1:\n                    arr[i], arr[i + 1] = arr[i + 1], arr[i]\n                else:\n                    arr[i], arr[i + 1] = arr[i + 1], arr[i]\n                count -= 1\n        arr = sorted(arr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(x):\n        return int(bin(x)[2:].count('1'))\n\n    return sorted(arr, key=count_ones, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(map(int, arr))\n    binary = [int(i) for i in bin(arr[0])[2:]]\n    binary.extend([int(i) for i in bin(arr[1])[2:]])\n    binary.extend([int(i) for i in bin(arr[2])[2:]])\n    binary.extend([int(i) for i in bin(arr[3])[2:]])\n    binary.extend([int(i) for i in bin(arr[4])[2:]])\n    binary.extend([int(i) for i in bin(arr[5])[2:]])\n    binary.extend([int(i) for i in bin(arr[6])[2:]])\n    binary.extend([int(i) for i in bin(arr[7])[2:]])\n    binary.extend([int(i) for i in bin(arr[8])[2:]])\n    binary.extend([int(i) for i in bin(arr[9])[2:]])\n    binary.extend([int(i) for i in bin(arr[10])[2:]])\n    binary.extend([int(i) for i in bin(arr[11]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    else:\n        arr.sort(key=lambda x: int(''.join(str(x) for x in bin(x))[2:]))\n        return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: sum(2 ** i for i, _ in enumerate(bin(x))))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(number):\n        \"\"\"\n        Counts the number of 1's in the binary representation of the given number.\n        \"\"\"\n        return sum(1 for _ in bin(number))\n\n    def count_decimal(number):\n        \"\"\"\n        Counts the decimal value of the given number.\n        \"\"\"\n        return int(number)\n\n    def sort(arr):\n        \"\"\"\n        Sorts the given array in ascending order according to the number of ones in\n        the binary representation and for similar number of ones, sort based on decimal\n        value.\n        \"\"\"\n        arr.sort(key=lambda x: (count_ones(x), count_decimal(x)))\n\n    return sort(arr)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(num):\n        \"\"\"\n        >>> binary(10)\n        '1010'\n        >>> binary(9)\n        '1001'\n        >>> binary(8)\n        '1000'\n        \"\"\"\n        return bin(num)\n\n    def get_num_ones(binary):\n        \"\"\"\n        >>> get_num_ones('1010')\n        3\n        >>> get_num_ones('1001')\n        1\n        >>> get_num_ones('1000')\n        0\n        \"\"\"\n        return len(binary) - len(binary.lstrip('0'))\n\n    def get_num_zeros(binary):\n        \"\"\"\n        >>> get_num_zeros('1010')\n        3\n        >>> get_num_zeros('1001')\n        2\n        >>> get_num_zeros('1000')\n        0\n        \"\"\"\n        return len(binary) - len(binary.lstrip('1'))\n\n    def sort_by_num_ones(arr):\n        \"\"\"\n        >>> sort_by_num_ones([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        \"\"\"\n        return sorted(arr, key=lambda x: get_num_ones(binary(x)), reverse=True)\n\n    def sort_by_num_zeros(arr):\n        \"\"\"\n        >>>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def digit_count(x):\n        \"\"\"\n        Count the number of ones in the binary representation of a number.\n        \"\"\"\n        binary = bin(x)\n        return len(filter(lambda x: x == '1', binary))\n\n    def digit_val(x):\n        \"\"\"\n        Get decimal value of a number.\n        \"\"\"\n        return int(bin(x)[2:], 2)\n\n    arr.sort(key=digit_val, reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: int(str(x)[::-1].count('1') + str(x)[::-1].count('0')), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x.count('1') or int(x), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(n):\n        \"\"\"\n        Count number of ones in binary representation of n.\n        >>> count_ones(5)\n        1\n        >>> count_ones(2)\n        1\n        >>> count_ones(10)\n        3\n        >>> count_ones(7)\n        0\n        \"\"\"\n        ones = 0\n        while n > 0:\n            ones += n % 2\n            n /= 2\n        return ones\n\n    def sort_by_ones(arr):\n        \"\"\"\n        Sort array of integers according to number of ones in their binary representation.\n        >>> sort_by_ones([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n        >>> sort_by_ones([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        \"\"\"\n        return sorted(arr, key=lambda x: count_ones(x))\n\n    def sort_by_decimal(arr):\n        \"\"\"\n        Sort array of integers according to their decimal representation.\n        >>> sort_by_decimal([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n        >>> sort_by_decimal([-2, -3, -4, -5, -6]) == [-6, -5,", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_sort(arr, n):\n        # Convert the array to binary\n        binary = [int(i) for i in bin(j)[2:].zfill(n) for j in arr]\n        # Sort the array based on number of ones\n        binary.sort(key=lambda x: x.count('1'), reverse=True)\n        # Convert back to decimal\n        return [int(i, 2) for i in bin(j)[2:].zfill(n) for j in binary]\n\n    return binary_sort(arr, len(str(max(arr))))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_sort(arr, lo=0, hi=None):\n        if lo < hi:\n            mid = lo + (hi - lo) // 2\n            if arr[mid] == 0:\n                return binary_sort(arr, lo, mid)\n            elif arr[mid] == 1:\n                return binary_sort(arr, mid + 1, hi)\n            else:\n                return binary_sort(arr, lo, mid) + binary_sort(arr, mid + 1, hi)\n        else:\n            return arr[:lo] + arr[lo + 1:]\n    return binary_sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    if len(arr) == 0:\n        return arr\n    arr.sort(key=lambda x: int(''.join(str(i) for i in x), 2))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return []\n\n    # Create a new array\n    arr = list(arr)\n\n    # Sorting is done in three steps.\n    # First, sort according to the number of ones in the binary representation\n    # Second, sort according to the decimal value\n    # Third, sort according to the binary representation\n    # The first step is done using the count method of list\n    arr = [(i, len(bin(i))) for i in arr]\n    arr.sort(key=lambda x: x[1], reverse=True)\n    arr = [i[0] for i in arr]\n\n    # Now sort according to decimal value\n    arr = [(i, sum(2**j for j in range(len(bin(i)))) + int(i)) for i in arr]\n    arr.sort(key=lambda x: x[1], reverse=True)\n    arr = [i[0] for i in arr]\n\n    # Now sort according to binary representation\n    arr = [(i, bin(i)) for i in arr]\n    arr.sort(key=lambda x: x[1], reverse=True)\n    arr = [i[0] for i in arr]\n\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def num_ones(num):\n        ones = 0\n        while num > 0:\n            num = num >> 1\n            ones += 1\n        return ones\n\n    def num_zeros(num):\n        zeros = 0\n        while num > 0:\n            num = num >> 1\n            zeros += 1\n        return zeros\n\n    def sort_func(num):\n        ones = num_ones(num)\n        zeros = num_zeros(num)\n        if ones > zeros:\n            return ones\n        else:\n            return zeros\n\n    return sorted(arr, key=sort_func)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(n):\n        \"\"\"\n        Count number of ones in binary representation of n\n        \"\"\"\n        count = 0\n        while n > 0:\n            n = n & (n - 1)\n            count += 1\n        return count\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers and return the result\n        \"\"\"\n        if count_ones(a) < count_ones(b):\n            return -1\n        elif count_ones(a) > count_ones(b):\n            return 1\n        else:\n            return 0\n\n    return sorted(arr, cmp=compare)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    left = [arr[0]]\n    right = []\n\n    for num in arr[1:]:\n        if num < arr[0]:\n            left.append(num)\n        else:\n            right.append(num)\n\n    left = sort_array(left)\n    right = sort_array(right)\n\n    return left + right", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0]]\n    else:\n        result = []\n        for i in arr:\n            result.append(i)\n        for i in range(len(arr) - 1):\n            for j in range(len(arr) - i - 1):\n                if (int(str(result[j])[2:]) > int(str(result[j + 1])[2:])):\n                    temp = result[j]\n                    result[j] = result[j + 1]\n                    result[j + 1] = temp\n        return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [int(x) for x in arr]\n    arr.sort(key=lambda x: sum(int(y) for y in bin(x)[2:]) + (x if x == 0 else 0))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    def count_ones(num):\n        \"\"\"\n        Count the number of ones in the binary representation of a number.\n        :param num:\n        :return:\n        \"\"\"\n        count = 0\n        while num!= 0:\n            num = num >> 1\n            count += 1\n        return count\n\n    def compare(num1, num2):\n        \"\"\"\n        Compare two numbers and return -1 if num1 is less than num2, 0 if they are equal\n        and 1 if num1 is greater than num2.\n        :param num1:\n        :param num2:\n        :return:\n        \"\"\"\n        if count_ones(num1) < count_ones(num2):\n            return -1\n        elif count_ones(num1) == count_ones(num2):\n            return 0\n        else:\n            return 1\n\n    return sorted(arr, key=lambda x: count_ones(x), reverse=True)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # TODO: Implement the Kata\n    # you can use any library you want\n    # use your own implementation if you want\n\n    # write your code here", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        if a[0] == b[0]:\n            return 0\n        else:\n            return (a[0] > b[0])\n\n    return sorted(arr, key=compare)\n\narr = [-2, -3, -4, -5, -6]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        \"\"\"\n        Returns the number of ones in the binary representation of a number.\n\n        :param num: a number\n        :return: the number of ones in the binary representation of the number\n        \"\"\"\n        if num < 0:\n            raise ValueError(\"Number must be non-negative\")\n        count = 0\n        while num:\n            count += num & 1\n            num >>= 1\n        return count\n\n    def sort_by_count(arr):\n        \"\"\"\n        Sorts the array by the number of ones in the binary representation of\n        each number.\n\n        :param arr: an array of numbers\n        :return: the sorted array\n        \"\"\"\n        count = [count_ones(x) for x in arr]\n        return sorted(arr, key=count.__getitem__)\n\n    def sort_by_decimal(arr):\n        \"\"\"\n        Sorts the array by the decimal value of each number.\n\n        :param arr: an array of numbers\n        :return: the sorted array\n        \"\"\"\n        dec = [int(bin(x).replace(\"0b\", \"\").replace(\"b\", \"\")) for x in arr]\n        return sorted(arr, key=dec.__getitem__)\n\n    return sort_by_count(sort_by_decimal(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(n):\n        ones = 0\n        while n:\n            n &= (n - 1)\n            ones += 1\n        return ones\n\n    def count_zeros(n):\n        zeros = 0\n        while n:\n            n &= (n - 1)\n            zeros += 1\n        return zeros\n\n    def compare(a, b):\n        if count_ones(a) > count_ones(b):\n            return 1\n        elif count_ones(a) == count_ones(b):\n            return 0\n        elif count_ones(a) < count_ones(b):\n            return -1\n        else:\n            return 0\n\n    return sorted(arr, key=lambda x: count_ones(x), reverse=False)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_repr(num):\n        \"\"\"\n        Return the binary representation of a number.\n        \"\"\"\n        return bin(num)[2:]\n\n    def number_of_ones(num):\n        \"\"\"\n        Return the number of ones in the binary representation of a number.\n        \"\"\"\n        return int(binary_repr(num)[::-1].count('1'))\n\n    def sort_by_ones(arr):\n        \"\"\"\n        Sort an array based on number of ones in its binary representation.\n        \"\"\"\n        # TODO: Implement this function\n        return arr\n\n    def sort_by_decimal(arr):\n        \"\"\"\n        Sort an array based on its decimal representation.\n        \"\"\"\n        # TODO: Implement this function\n        return arr\n\n    return sort_by_ones(sort_by_decimal(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return []\n\n    # First, sort the array based on the number of 1's\n    number_of_ones = {}\n    for num in arr:\n        number_of_ones[bin(num)[2:]] = number_of_ones.get(bin(num)[2:], 0) + 1\n\n    # Then, sort the array based on the decimal value\n    dec = [(num, i) for i, num in enumerate(arr)]\n    dec.sort()\n    return [num for i, num in dec]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _bin_to_dec(bin_num):\n        \"\"\"\n        Convert binary number to decimal number.\n        \"\"\"\n        return bin_num.count('1') * 2**(len(bin_num) - 1)\n\n    def _bin_to_int(bin_num):\n        \"\"\"\n        Convert binary number to integer.\n        \"\"\"\n        return int(bin_num, 2)\n\n    def _int_to_bin(int_num):\n        \"\"\"\n        Convert integer to binary number.\n        \"\"\"\n        return bin(int_num)[2:]\n\n    def _sort_by_ones(arr):\n        \"\"\"\n        Sort the array according to number of ones in their binary representation.\n        \"\"\"\n        return sorted(arr, key=lambda num: _bin_to_dec(_int_to_bin(num)), reverse=True)\n\n    def _sort_by_decimal(arr):\n        \"\"\"\n        Sort the array according to decimal value.\n        \"\"\"\n        return sorted(arr, key=lambda num: num, reverse=True)\n\n    return _sort_by_ones(_sort_by_decimal(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        \"\"\"\n        This function counts the number of ones in a number.\n        >>> count_ones(1) == 1\n        >>> count_ones(5) == 1\n        >>> count_ones(10) == 2\n        \"\"\"\n        count = 0\n        while num > 0:\n            num, rem = divmod(num, 2)\n            count += 1\n        return count\n\n    def compare_ones(num1, num2):\n        \"\"\"\n        This function compares the number of ones in two numbers.\n        >>> compare_ones(1, 2) == -1\n        >>> compare_ones(1, 1) == 0\n        >>> compare_ones(2, 1) == 1\n        \"\"\"\n        count1 = count_ones(num1)\n        count2 = count_ones(num2)\n        if count1 > count2:\n            return 1\n        elif count1 == count2:\n            return 0\n        else:\n            return -1\n\n    def compare_decimal(num1, num2):\n        \"\"\"\n        This function compares the decimal value of two numbers.\n        >>> compare_decimal(1, 2) == -1\n        >>> compare_decimal(1, 1) == 0\n        >>> compare_decimal(2, 1) == 1\n        \"\"\"\n        count1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key = lambda x: (len(bin(x).replace('0b','')), int(x)))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        if a.count(1) == b.count(1):\n            return int(a) - int(b)\n        else:\n            return a.count(1) - b.count(1)\n\n    arr = list(arr)\n    arr.sort(key=compare)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(map(int, arr))\n    arr.sort(key=lambda x: sum(1 for _ in x if _ == 1))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        \"\"\"\n        Count number of ones in a binary representation of a number\n        \"\"\"\n        if num < 0:\n            return 0\n        else:\n            return num & 1\n\n    def num_of_dec(num):\n        \"\"\"\n        Return decimal value of a number\n        \"\"\"\n        return num\n\n    def compare(num1, num2):\n        \"\"\"\n        Compare two numbers based on their number of ones\n        \"\"\"\n        if count_ones(num1) > count_ones(num2):\n            return 1\n        elif count_ones(num1) == count_ones(num2):\n            return num_of_dec(num1) - num_of_dec(num2)\n        else:\n            return -1\n\n    return sorted(arr, cmp=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    nums = list(map(int, arr))\n\n    def get_binary(num):\n        return bin(num)[2:]\n\n    def count_ones(binary):\n        return sum(binary == \"1\")\n\n    def get_value(binary):\n        return int(binary, 2)\n\n    def compare(a, b):\n        if count_ones(get_binary(a)) == count_ones(get_binary(b)):\n            return get_value(get_binary(a)) - get_value(get_binary(b))\n        else:\n            return count_ones(get_binary(a)) - count_ones(get_binary(b))\n\n    nums.sort(cmp=compare)\n\n    return nums", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if (len(str(arr[i])) == len(str(arr[j]))):\n                if (len(str(arr[i])) == 1):\n                    if (arr[i] < arr[j]):\n                        arr[i], arr[j] = arr[j], arr[i]\n                elif (len(str(arr[i])) == 2):\n                    if (int(str(arr[i])[0]) == int(str(arr[j])[0])):\n                        if (int(str(arr[i])[1]) < int(str(arr[j])[1])):\n                            arr[i], arr[j] = arr[j], arr[i]\n                    else:\n                        if (int(str(arr[i])[1]) > int(str(arr[j])[1])):\n                            arr[i], arr[j] = arr[j], arr[i]\n            else:\n                if (len(str(arr[i])) > len(str(arr[j]))):\n                    arr[i], arr[j] = arr[j], arr[i]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    arr.sort(key=lambda x: int(bin(x)[2:]), reverse=True)\n\n    if arr[0] == 0:\n        arr = arr[1:]\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_digits(x):\n        return [int(i) for i in str(x)]\n\n    def sort_func(x, y):\n        if x == y:\n            return 0\n        if x > y:\n            return 1\n        else:\n            return -1\n\n    arr = list(arr)\n    arr.sort(key=sort_func, reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_repr(num):\n        \"\"\"\n        Return binary representation of a number as a list of digits.\n        >>> binary_repr(1)\n        ['1']\n        >>> binary_repr(2)\n        ['10', '0']\n        >>> binary_repr(3)\n        ['11', '1', '0']\n        >>> binary_repr(4)\n        ['100', '10', '0']\n        >>> binary_repr(5)\n        ['101', '11', '1', '0']\n        \"\"\"\n        num = str(num)\n        if num == \"\":\n            return []\n        else:\n            return [int(x) for x in num]\n\n    def one_count(num):\n        \"\"\"\n        Return number of ones in binary representation of a number.\n        >>> one_count(1)\n        0\n        >>> one_count(2)\n        1\n        >>> one_count(3)\n        2\n        >>> one_count(4)\n        2\n        >>> one_count(5)\n        3\n        \"\"\"\n        count = 0\n        for i in binary_repr(num):\n            if i == '1':\n                count += 1\n        return count\n\n    def sort_array_helper(arr):\n        \"\"\"\n        Helper function to sort array.\n        \"\"\"\n        arr.sort(key=one_count)\n        return arr\n\n    return sort_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        return arr\n    else:\n        arr = list(arr)\n        while len(arr) > 1:\n            arr = [int(i) for i in arr]\n            arr.sort(key=lambda x: int(bin(x)[2:]))\n            arr = [int(i) for i in arr]\n            arr.sort(key=lambda x: int(str(x)[::-1]))\n            arr = [int(i) for i in arr]\n        return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    import re\n    temp = []\n    temp = list(map(int, re.findall(\"\\d+\", str(arr))))\n    for i in range(0, len(temp)):\n        for j in range(0, len(temp)):\n            if temp[i] > temp[j]:\n                temp[i], temp[j] = temp[j], temp[i]\n    return temp", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(n):\n        \"\"\"\n        Return number of ones in binary representation of n\n        >>> count_ones(0)\n        0\n        >>> count_ones(1)\n        1\n        >>> count_ones(2)\n        1\n        >>> count_ones(3)\n        2\n        >>> count_ones(4)\n        2\n        >>> count_ones(5)\n        2\n        >>> count_ones(6)\n        2\n        >>> count_ones(7)\n        3\n        >>> count_ones(8)\n        3\n        >>> count_ones(9)\n        3\n        >>> count_ones(10)\n        3\n        \"\"\"\n        return sum(1 for _ in range(n) if n & 1 == 1)\n\n    def decimal_value(n):\n        \"\"\"\n        Return decimal value of n\n        >>> decimal_value(0)\n        0\n        >>> decimal_value(1)\n        1\n        >>> decimal_value(2)\n        2\n        >>> decimal_value(3)\n        3\n        >>> decimal_value(4)\n        4\n        >>> decimal_value(5)\n        5\n        >>> decimal_value(6)\n        6\n        >>> decimal_value(7)\n        7\n        >>> decimal_value(8)\n        8\n        >>> decimal_value(9)\n        9\n        >>> decimal_value(10)\n        10\n        \"\"\"\n        return n\n\n    # convert array to list of", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def find_one_count(n):\n        \"\"\"\n        Returns the number of ones in the binary representation of n.\n\n        >>> find_one_count(1)\n        0\n        >>> find_one_count(5)\n        1\n        >>> find_one_count(2)\n        2\n        >>> find_one_count(3)\n        1\n        >>> find_one_count(4)\n        2\n        >>> find_one_count(5)\n        3\n        >>> find_one_count(6)\n        2\n        \"\"\"\n        return bin(n).count(\"1\")\n\n    def compare(x, y):\n        \"\"\"\n        Compare two integers based on their binary representation.\n\n        >>> compare(1, 2)\n        1\n        >>> compare(1, 0)\n        -1\n        >>> compare(2, 3)\n        -1\n        >>> compare(3, 5)\n        -1\n        >>> compare(4, 5)\n        1\n        >>> compare(5, 6)\n        -1\n        \"\"\"\n        x = find_one_count(x)\n        y = find_one_count(y)\n        if x == y:\n            return 0\n        if x > y:\n            return -1\n        return 1\n\n    return sorted(arr, key=lambda x: compare(x, y))\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    length = len(arr)\n    if length <= 1:\n        return arr\n    elif length == 2:\n        return [arr[0], arr[1]]\n    else:\n        # Get the first number with no leading zeroes.\n        number1 = 0\n        while arr[number1] == 0:\n            number1 += 1\n        number2 = 0\n        while arr[number2] == 0:\n            number2 += 1\n        # Get the last number with no trailing zeroes.\n        number3 = length - 1\n        while arr[number3] == 0:\n            number3 -= 1\n        number4 = length - 1\n        while arr[number4] == 0:\n            number4 -= 1\n        # Get the number of leading zeroes of the number with no leading zeroes.\n        number5 = 0\n        while arr[number1] == 0 and number1 < number2:\n            number1 += 1\n        # Get the number of trailing zeroes of the number with no trailing zeroes.\n        number6 = 0\n        while arr[number3] == 0 and number3 > number4:\n            number3 -= 1\n        # Get the number of trailing zeroes of the number with no trailing zeroes.\n        number7 = 0\n        while arr[number4] == 0 and number4 > number5:\n            number4 -=", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def swap(a, b):\n        \"\"\"\n        Swaps two elements in the array a and b\n        :param a: an integer\n        :param b: an integer\n        :return: None\n        \"\"\"\n        a, b = a, b\n        if a > b:\n            a, b = b, a\n        a, b = a + 1, b + 1\n        if a > len(arr):\n            a, b = a - len(arr), b - len(arr)\n        if b > len(arr):\n            a, b = a - len(arr), b - len(arr)\n        arr[a], arr[b] = arr[b], arr[a]\n\n    arr = list(arr)\n    arr.sort(key=lambda x: int(''.join(str(x) for _ in range(len(str(x))))))\n    for i in range(len(arr) - 1):\n        if arr[i]!= arr[i + 1]:\n            if int(''.join(str(arr[i]) for _ in range(len(str(arr[i])))))!= int(''.join(str(arr[i + 1]) for _ in range(len(str(arr[i + 1]))))):\n                swap(arr[i]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x & 1) + (x >> 1), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(num):\n        return sum(1 for _ in bin(num))\n\n    def sort_by_decimal(x, y):\n        return int(float(x) - float(y))\n\n    def sort_by_ones(x, y):\n        return count_ones(x) - count_ones(y)\n\n    return sorted(arr, key=sort_by_ones if len(arr) > 1 else sort_by_decimal)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(n):\n        \"\"\"\n        Count number of ones in n's binary representation\n        \"\"\"\n        if n == 0:\n            return 0\n        return sum(1 for i in range(n) if n % 2 == 1)\n\n    def binary_value(n):\n        \"\"\"\n        Convert n to its binary representation\n        \"\"\"\n        return bin(n)\n\n    def compare(a, b):\n        \"\"\"\n        Compare a and b\n        \"\"\"\n        if count_ones(a) > count_ones(b):\n            return 1\n        elif count_ones(a) == count_ones(b):\n            return 0\n        else:\n            return -1\n\n    return sorted(arr, cmp=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_binary(n):\n        bin_str = bin(n)[2:]\n        bin_str = bin_str.replace('0b', '')\n        bin_str = bin_str.replace('0B', '')\n        return bin_str\n\n    def get_ones(n):\n        return int(n) - bin(n)[2:].count('1')\n\n    def get_decimal(n):\n        return int(n) - bin(n)[2:].count('1')\n\n    arr = sorted(arr, key=get_ones)\n    if len(arr) > 1:\n        arr = sorted(arr, key=get_decimal)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_bits(number):\n        \"\"\"\n        Returns the number of bits set in the binary representation of number.\n        >>> count_bits(1)\n        1\n        >>> count_bits(0)\n        0\n        >>> count_bits(2)\n        1\n        >>> count_bits(3)\n        1\n        >>> count_bits(4)\n        2\n        >>> count_bits(5)\n        1\n        \"\"\"\n        return bin(number).count('1')\n\n    def number_of_bits(number):\n        \"\"\"\n        Returns the number of bits in the binary representation of number.\n        >>> number_of_bits(1)\n        1\n        >>> number_of_bits(0)\n        0\n        >>> number_of_bits(2)\n        1\n        >>> number_of_bits(3)\n        1\n        >>> number_of_bits(4)\n        2\n        >>> number_of_bits(5)\n        1\n        \"\"\"\n        return len(bin(number))\n\n    def binary_representation(number):\n        \"\"\"\n        Returns the binary representation of number as a string.\n        >>> binary_representation(1)\n        '1'\n        >>> binary_representation(0)\n        '0'\n        >>> binary_representation(2)\n        '10'\n        >>> binary_representation(3)\n        '11'\n        >>> binary_representation(4)\n        '100'\n        >>> binary_representation(5)\n        '101'\n        \"\"\"\n        return bin(", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        return sum(1 for i in num if i == 1)\n\n    return sorted(arr, key=lambda x: count_ones(x) if count_ones(x) == count_ones(y) else int(x) - int(y))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(num):\n        \"\"\"\n        Convert a number to its binary representation.\n        >>> binary(1)\n        '11'\n        >>> binary(5)\n        '101'\n        >>> binary(16)\n        '100010'\n        \"\"\"\n        return bin(num)\n\n    def count_ones(num):\n        \"\"\"\n        Count number of 1s in the binary representation of a number.\n        >>> count_ones(1)\n        1\n        >>> count_ones(5)\n        2\n        >>> count_ones(16)\n        3\n        \"\"\"\n        return len(binary(num)[::-1])\n\n    def sort(arr):\n        \"\"\"\n        Sort the array according to the number of 1s in the binary representation\n        of each number.\n        >>> sort([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        >>> sort([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        \"\"\"\n        arr.sort(key=lambda x: count_ones(x))\n        arr.sort(key=lambda x: -x)\n\n    return sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(n):\n        \"\"\"\n        Counts the number of ones in the binary representation of n.\n        >>> count_ones(5)\n        3\n        >>> count_ones(9)\n        0\n        >>> count_ones(0)\n        0\n        >>> count_ones(10)\n        1\n        >>> count_ones(11)\n        2\n        \"\"\"\n        count = 0\n        while n!= 0:\n            if n % 2:\n                count += 1\n            n //= 2\n        return count\n\n    def count_zeros(n):\n        \"\"\"\n        Counts the number of zeros in the binary representation of n.\n        >>> count_zeros(5)\n        0\n        >>> count_zeros(9)\n        2\n        >>> count_zeros(0)\n        0\n        >>> count_zeros(10)\n        0\n        >>> count_zeros(11)\n        1\n        \"\"\"\n        count = 0\n        while n!= 0:\n            if n % 2:\n                count += 1\n            n //= 2\n        return count\n\n    def sort_binary(arr):\n        \"\"\"\n        Sorts the input array based on number of ones in their binary representation.\n        >>> sort_binary([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        >>> sort_binary([-2", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_search(arr, start, end):\n        if start == end:\n            return start\n\n        mid = start + (end - start) // 2\n        if arr[mid] < arr[mid - 1]:\n            return binary_search(arr, mid, end)\n        elif arr[mid] > arr[mid - 1]:\n            return binary_search(arr, start, mid - 1)\n        else:\n            return mid\n\n    # print(sort_array([1, 0, 2, 3, 4]))\n    return binary_search(arr, 0, len(arr) - 1)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_representation(number):\n        \"\"\"\n        Function to get the binary representation of a number.\n        >>> binary_representation(1) == 0b\n        >>> binary_representation(4) == 0b\n        >>> binary_representation(100) == 0b\n        \"\"\"\n        if number < 0:\n            return 0\n        return bin(number)\n\n    def num_of_ones(number):\n        \"\"\"\n        Function to get the number of ones in a binary representation.\n        >>> num_of_ones(0) == 0\n        >>> num_of_ones(1) == 1\n        >>> num_of_ones(2) == 1\n        >>> num_of_ones(3) == 2\n        >>> num_of_ones(4) == 2\n        \"\"\"\n        return len(binary_representation(number)[1:])\n\n    def sort_by_decimal(numbers):\n        \"\"\"\n        Function to sort numbers based on decimal value.\n        >>> sort_by_decimal([-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]) == [0, 1, 2, 3, 4, 5, 6, -1, -2, -3]\n        \"\"\"\n        return sorted(numbers, key=lambda x: int(x))\n\n    def sort_by_ones(numbers):\n        \"\"\"\n        Function", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_bits(num):\n        \"\"\"\n        Returns the binary representation of a number.\n        \"\"\"\n        bits = []\n        while num:\n            bits.append(num % 2)\n            num = num // 2\n        return bits\n\n    def get_num_ones(bits):\n        \"\"\"\n        Returns the number of ones in a binary representation.\n        \"\"\"\n        num_ones = 0\n        for bit in bits:\n            if bit == 1:\n                num_ones += 1\n        return num_ones\n\n    def get_num_zeros(bits):\n        \"\"\"\n        Returns the number of zeros in a binary representation.\n        \"\"\"\n        num_zeros = 0\n        for bit in bits:\n            if bit == 0:\n                num_zeros += 1\n        return num_zeros\n\n    def get_num_ones_and_zeros(bits):\n        \"\"\"\n        Returns the number of ones and zeros in a binary representation.\n        \"\"\"\n        num_ones = get_num_ones(bits)\n        num_zeros = get_num_zeros(bits)\n        return num_ones + num_zeros\n\n    def sort(arr):\n        \"\"\"\n        Sorts the array.\n        \"\"\"\n        arr.sort(key=get_num_ones_and_zeros)\n\n    def get_num_ones_and_zeros_key(num):\n        \"\"\"", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_search(arr, i, j):\n        \"\"\"\n        Binary search on the array to find the position of the element with the\n        maximum number of ones.\n        \"\"\"\n        mid = (i + j) // 2\n        if arr[mid] == 0:\n            return mid\n        elif arr[mid] > 0:\n            return binary_search(arr, mid + 1, j)\n        else:\n            return binary_search(arr, i, mid - 1)\n\n    def sort_binary(arr, i, j):\n        \"\"\"\n        Sort the elements in the array from i to j according to number of ones\n        in the binary representation of the elements.\n        \"\"\"\n        mid = binary_search(arr, i, j)\n        if arr[mid] > 0:\n            sort_binary(arr, i, mid - 1)\n            sort_binary(arr, mid + 1, j)\n        else:\n            sort_binary(arr, i, mid - 1)\n            sort_binary(arr, mid + 1, j)\n\n    def sort_decimal(arr, i, j):\n        \"\"\"\n        Sort the elements in the array from i to j according to their decimal\n        value.\n        \"\"\"\n        mid = binary_search(arr, i, j)\n        if arr[mid] > 0:\n            sort", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: len(str(x).rjust(2, '0')))\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def bin_to_dec(bin_num):\n        \"\"\"\n        Returns decimal value of a binary number\n        \"\"\"\n        num = 0\n        for digit in bin_num:\n            num += digit * (2 ** (len(bin_num) - digit - 1))\n        return num\n\n    def count_bits(num):\n        \"\"\"\n        Counts number of bits in binary representation of a number\n        \"\"\"\n        count = 0\n        while num:\n            num, count = num >> 1, count + 1\n        return count\n\n    def count_ones(num):\n        \"\"\"\n        Counts number of ones in binary representation of a number\n        \"\"\"\n        count = 0\n        while num:\n            num, count = num & 1, count + 1\n        return count\n\n    def bin_sort(arr):\n        \"\"\"\n        Sort the array using the function bin_to_dec and count_bits\n        \"\"\"\n        arr.sort(key=lambda num: bin_to_dec(num) * (2 ** count_bits(num)))\n        return arr\n\n    def bin_sort_ones(arr):\n        \"\"\"\n        Sort the array using the function bin_to_dec and count_ones\n        \"\"\"\n        arr.sort(key=lambda num: bin_to_dec(num) * count_ones(num))\n        return arr\n\n    return", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(map(int, arr))\n    if len(arr) == 0:\n        return arr\n    return sorted(arr, key=lambda x: sort_func(x))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_bits(n):\n        \"\"\"\n        This function will count the number of bits in a number.\n        \"\"\"\n        count = 0\n        while n > 0:\n            count += 1\n            n /= 2\n        return count\n\n    def count_ones(n):\n        \"\"\"\n        This function will count the number of ones in the binary representation of a number.\n        \"\"\"\n        count = 0\n        while n > 0:\n            if n % 2 == 1:\n                count += 1\n            n /= 2\n        return count\n\n    def decimal_value(n):\n        \"\"\"\n        This function will return the decimal value of a number.\n        \"\"\"\n        return int(n)\n\n    def binary_repr(n):\n        \"\"\"\n        This function will return the binary representation of a number.\n        \"\"\"\n        bin_str = bin(n)\n        while len(bin_str) < 4:\n            bin_str = '0' + bin_str\n        return bin_str\n\n    def sort_asc(a, b):\n        \"\"\"\n        This function will sort the array based on the number of ones in the binary\n        representation of the numbers.\n        \"\"\"\n        if a[0] == b[0]:\n            return decimal_value(a[0]) < decimal_value(b[0])\n        return count_ones(a[0]) < count_ones(b[0])\n\n    def", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def sort_binary(arr):\n        \"\"\"\n        Sort the array based on the number of ones in the binary representation of the number\n        \"\"\"\n        for i in range(len(arr) - 1):\n            for j in range(i + 1, len(arr)):\n                if arr[i] > arr[j]:\n                    temp = arr[i]\n                    arr[i] = arr[j]\n                    arr[j] = temp\n        return arr\n\n    def sort_decimal(arr):\n        \"\"\"\n        Sort the array based on the decimal value of the number\n        \"\"\"\n        for i in range(len(arr) - 1):\n            for j in range(i + 1, len(arr)):\n                if arr[i] > arr[j]:\n                    temp = arr[i]\n                    arr[i] = arr[j]\n                    arr[j] = temp\n        return arr\n\n    return sort_binary(sort_decimal(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    # num = 0\n    # for i in range(0, len(arr)):\n    #     if arr[i]!= 0:\n    #         num += 1\n    #     arr[i] = num\n    # return arr\n    # return sorted(arr)\n\narr = [1, 5, 2, 3, 4]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    if len(arr) == 0:\n        return arr\n    elif len(arr) == 1:\n        return arr\n    else:\n        # sort the list based on number of ones in binary representation\n        # and if the number of ones are same sort based on decimal value\n        arr.sort(key=lambda x: int(str(x)[::-1].count('1')), reverse=True)\n        return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    if len(arr) == 0:\n        return arr\n    else:\n        return sort_array(arr[1:]) + [arr[0]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(num):\n        \"\"\"\n        Given a number, it returns the number of ones in its binary representation.\n        >>> count_ones(-2)\n        3\n        >>> count_ones(0)\n        0\n        >>> count_ones(1)\n        1\n        >>> count_ones(2)\n        2\n        >>> count_ones(3)\n        1\n        >>> count_ones(4)\n        1\n        \"\"\"\n        return sum(1 for x in bin(num) if x == '1')\n\n    def sort_using_count_ones(arr):\n        \"\"\"\n        Sorts the given array of numbers according to number of ones in their binary representation.\n        >>> sort_using_count_ones([1, 5, 2, 3, 4])\n        [1, 2, 3, 4, 5]\n        \"\"\"\n        arr.sort(key=count_ones)\n\n    def sort_using_digits(arr):\n        \"\"\"\n        Sorts the given array of numbers according to number of ones in their binary representation.\n        >>> sort_using_digits([1, 5, 2, 3, 4])\n        [1, 2, 3, 4, 5]\n        \"\"\"\n        arr.sort(key=lambda x: len(str(x)), reverse=True)\n\n    return sort_using_count_ones(", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    if len(arr) == 0:\n        return []\n    for i in range(len(arr)):\n        for j in range(len(arr) - i - 1):\n            if arr[j] > arr[j + 1]:\n                temp = arr[j]\n                arr[j] = arr[j + 1]\n                arr[j + 1] = temp\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return arr\n\n    return [int(str(arr[i])[::-1].count('1')) + int(str(arr[i])[::-1].rstrip('0')) for i in range(len(arr))]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr) - i - 1):\n            if arr[j] > arr[j + 1]:\n                temp = arr[j]\n                arr[j] = arr[j + 1]\n                arr[j + 1] = temp\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            arr[i] = arr[i] - 1\n\n    for i in range(len(arr)):\n        for j in range(2):\n            if arr[i] % 2 == 1:\n                arr[i] = arr[i] - 1\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        This is the comparison function for sort.\n        It takes two elements from the array and compares them.\n        If they are equal, it should return 0.\n        Otherwise, it should return 1.\n        \"\"\"\n        if a == b:\n            return 0\n        if a > b:\n            return 1\n        return -1\n\n    def binary_to_decimal(num):\n        \"\"\"\n        This function converts the binary number to decimal.\n        \"\"\"\n        result = 0\n        while num!= 0:\n            result = result * 2 + int(num % 2)\n            num /= 2\n        return result\n\n    def binary_to_ones(num):\n        \"\"\"\n        This function counts the number of ones in the binary representation.\n        \"\"\"\n        ones = 0\n        while num!= 0:\n            ones += num % 2\n            num /= 2\n        return ones\n\n    def sort_by_ones(arr):\n        \"\"\"\n        This function sorts the array by the number of ones in the binary representation.\n        \"\"\"\n        return [binary_to_ones(i) for i in arr]\n\n    def sort_by_decimal(arr):\n        \"\"\"\n        This function sorts the array by the decimal value.\n        \"\"\"\n        return [binary_to_decimal(i) for i in arr]\n\n    arr = list(map", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _sort(arr):\n        result = []\n        for i in arr:\n            i = int(i)\n            if i == 0:\n                result.append(i)\n            else:\n                result.append(i >> 1)\n                result.append(i & 1)\n        return result\n\n    return _sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: int(bin(x)[2:].count('1')))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: int(''.join(str(n) for n in bin(x)[2:])), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: len(bin(x)[2:]), reverse=True)\n    arr.sort(key=lambda x: x if x >= 0 else -x)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        return sum(num == 1)\n\n    def sort(nums):\n        return sorted(nums, key=lambda num: count_ones(num), reverse=True)\n\n    return sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        \"\"\"\n        Compare two numbers according to the number of ones in their binary\n        representation.\n        \"\"\"\n        a = bin(a)\n        b = bin(b)\n        if len(a) > len(b):\n            return 1\n        elif len(a) < len(b):\n            return -1\n        else:\n            return 0\n\n    def cmp_dec(a, b):\n        \"\"\"\n        Compare two numbers according to the number of ones in their binary\n        representation.\n        \"\"\"\n        a = bin(a)\n        b = bin(b)\n        if len(a) > len(b):\n            return 1\n        elif len(a) < len(b):\n            return -1\n        else:\n            return 0\n\n    def bin(n):\n        \"\"\"\n        Convert integer to binary number.\n        \"\"\"\n        return bin(n)[2:]\n\n    return sorted(arr, key=cmp, reverse=False)</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_count(num):\n        \"\"\"\n        This function will return the number of ones in the binary representation\n        of the given number.\n        \"\"\"\n        return bin(num).count('1')\n\n    def get_dec(num):\n        \"\"\"\n        This function will return the decimal value of the given number.\n        \"\"\"\n        return int(bin(num).replace('0b', ''))\n\n    def sort(arr):\n        \"\"\"\n        This function will sort the given array according to the number of ones in\n        the binary representation.\n        \"\"\"\n        arr.sort(key=get_count, reverse=True)\n\n    def sort_dec(arr):\n        \"\"\"\n        This function will sort the given array according to the decimal value of\n        the given number.\n        \"\"\"\n        arr.sort(key=get_dec, reverse=True)\n\n    return sort(arr) if arr >= 0 else sort_dec(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return []\n\n    # return sorted(arr, key=lambda x: int(\"\".join(str(n) for n in x)))\n    return sorted(arr, key=lambda x: int(\"\".join(str(n) for n in bin(x))))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(map(int, arr))\n\n    if not arr:\n        return []\n\n    if len(arr) == 1:\n        return arr\n\n    if len(arr) == 2:\n        return [arr[0]] + arr[1:]\n\n    arr.sort(key=lambda x: 2 ** (len(bin(x)) - 2))\n\n    arr.sort(key=lambda x: int(x))\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_helper(a, b):\n        def helper(x, y):\n            if x == y:\n                return 0\n            elif x > y:\n                return 1\n            else:\n                return -1\n\n        return helper(a[0], b[0])\n\n    return sorted(arr, key=sort_helper)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_num_ones(num):\n        \"\"\"\n        Returns the number of ones in the binary representation of the given number.\n        >>> get_num_ones(0)\n        0\n        >>> get_num_ones(1)\n        1\n        >>> get_num_ones(2)\n        1\n        >>> get_num_ones(3)\n        1\n        >>> get_num_ones(4)\n        2\n        >>> get_num_ones(5)\n        2\n        >>> get_num_ones(6)\n        2\n        >>> get_num_ones(7)\n        3\n        >>> get_num_ones(8)\n        3\n        >>> get_num_ones(9)\n        3\n        >>> get_num_ones(10)\n        4\n        >>> get_num_ones(11)\n        4\n        >>> get_num_ones(12)\n        4\n        >>> get_num_ones(13)\n        4\n        >>> get_num_ones(14)\n        5\n        >>> get_num_ones(15)\n        5\n        >>> get_num_ones(16)\n        5\n        >>> get_num_ones(17)\n        5\n        >>> get_num_ones(18)\n        6\n        >>> get_num_ones(19)\n        6\n        >>> get_num_ones(20)\n        6\n        >>> get_num_ones(21)\n        7\n        >>> get_num_ones(22)\n        7", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    pass", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def helper(arr):\n        # print(arr)\n        arr = arr[:]\n        arr.sort(key=lambda x: sum(int(x) for x in str(x)))\n        # arr = arr[:]\n        # arr.sort(key=lambda x: sum(int(x) for x in str(x)))\n        # arr = arr[:]\n        # arr.sort(key=lambda x: int(x))\n        return arr\n    return helper(arr)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(num):\n        return bin(num)[2:]\n\n    def ones(num):\n        return int(binary(num), 2)\n\n    def dec(num):\n        return int(binary(num), 2) - 1\n\n    def ones_dec(num):\n        return int(binary(num), 2) - 1\n\n    def compare(x, y):\n        if x == y:\n            return 0\n        elif x > y:\n            return 1\n        else:\n            return -1\n\n    return sorted(arr, key=compare, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n\n    if not arr:\n        return []\n\n    # count the number of ones in each integer\n    cnt = [(arr[i] == 1) for i in range(len(arr))]\n    cnt = [sum(x) for x in zip(*cnt)]\n\n    # sort the array based on number of ones in each integer\n    arr = [arr[i] for i in sorted(cnt)]\n\n    # sort the array based on decimal value of each integer\n    arr = [int(arr[i]) for i in sorted(cnt, reverse=True)]\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: int(bin(x).count('1')))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return arr\n    arr = sorted(arr)\n    for i in range(n - 1):\n        if arr[i] == arr[i + 1]:\n            continue\n        # if there is a tie, sort according to decimal value\n        if int(arr[i]) == int(arr[i + 1]):\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n        else:\n            break\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        if a[0] == b[0]:\n            return 0\n        elif a[0] > b[0]:\n            return 1\n        elif a[0] < b[0]:\n            return -1\n    return sorted(arr, key=lambda x: [sum(map(int, bin(x)[2:])) for _ in range(len(x))], reverse=False)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        return arr\n\n    return sorted(arr, key=lambda x: (x & 1) + (x >> 1))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"array must be a list\")\n\n    # using list comprehension to generate the sorted array\n    return [int(x) for x in [int(str(y), 2) for y in arr] if x]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(num):\n        \"\"\"\n        Returns the number of ones in binary representation of a number\n        :param num: a number\n        :return: the number of ones in binary representation of a number\n        \"\"\"\n        return sum(i == 1 for i in bin(num))\n\n    def decimal(num):\n        \"\"\"\n        Returns the decimal value of a number\n        :param num: a number\n        :return: the decimal value of a number\n        \"\"\"\n        return int(bin(num)[2:], 2)\n\n    result = []\n    for x in arr:\n        result.append(binary(x))\n        result.append(decimal(x))\n    result.sort()\n    return [num for _, num in result]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        \"\"\"\n        Returns the number of ones in the binary representation of the number.\n        \"\"\"\n        num = bin(num)\n        count = 0\n        for i, c in enumerate(num):\n            if c == '1':\n                count += 1\n        return count\n\n    def sort(a):\n        \"\"\"\n        Returns a sorted array of non-negative integers.\n        \"\"\"\n        if len(a) == 0:\n            return []\n        if len(a) == 1:\n            return a\n        if len(a) == 2:\n            return list(sorted(a))\n        if len(a) > 2:\n            b = []\n            for n in a:\n                count = count_ones(n)\n                if count == 0:\n                    b.append(n)\n                else:\n                    d = n / 2\n                    while d > 0:\n                        if count_ones(d) > count:\n                            b.append(d)\n                            count = count_ones(d)\n                        d /= 2\n            return sort(b) + sort([a for a in a if a not in b])\n\n    return sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(map(int, arr))\n    arr.sort(key=lambda x: int(bin(x)[2:]))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def number_of_ones(num):\n        return bin(num).count(\"1\")\n\n    def number_of_digits(num):\n        return len(str(num))\n\n    def compare(a, b):\n        return cmp(number_of_ones(a), number_of_ones(b))\n\n    def compare_decimal(a, b):\n        return cmp(a, b)\n\n    # Sort according to number of ones\n    # If same number of ones, sort based on decimal value\n    return sorted(arr, cmp=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                swap(arr, i, j)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (len(bin(x)), x))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(num):\n        \"\"\"\n        Return the binary representation of a number\n        \"\"\"\n        arr = []\n        while num > 0:\n            arr.append(num & 1)\n            num >>= 1\n        return arr\n\n    def number_of_ones(arr):\n        \"\"\"\n        Return the number of ones in the binary representation of a number\n        \"\"\"\n        num = 0\n        for i in arr:\n            num += 2 ** (len(arr) - i - 1)\n        return num\n\n    def sort(arr):\n        \"\"\"\n        Sort an array of numbers according to number of ones in their binary\n        representation in ascending order.\n        \"\"\"\n        arr.sort(key=number_of_ones)\n        return arr\n\n    def sort_d(arr):\n        \"\"\"\n        Sort an array of numbers according to number of ones in their binary\n        representation in descending order.\n        \"\"\"\n        arr.sort(key=number_of_ones, reverse=True)\n        return arr\n\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return arr\n    else:\n        return sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return arr\n    if len(arr) == 1:\n        return arr\n    arr.sort(key=lambda x: sum(int(n) for n in bin(x).split('0b')))\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def compare(a, b):\n        if a < b:\n            return -1\n        elif a > b:\n            return 1\n        else:\n            return 0\n\n    return sorted(arr, key=lambda x: int(bin(x)[2:].count('1') * 2 + bin(x)[2:].count('0')), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: bin(x)[2:].count('1'), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n\n    left = []\n    right = []\n    for i in arr:\n        if i % 2 == 0:\n            left.append(i)\n        else:\n            right.append(i)\n\n    left = sort_array(left)\n    right = sort_array(right)\n    result = []\n    if len(left) == 0:\n        result = right\n    else:\n        result = left + right\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        count = 0\n        while num!= 0:\n            num, rem = divmod(num, 2)\n            count += 1\n        return count\n\n    def compare(a, b):\n        count_a = count_ones(a)\n        count_b = count_ones(b)\n        if count_a == count_b:\n            return cmp(a, b)\n        return cmp(count_a, count_b)\n\n    return sorted(arr, cmp=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_num_ones(num):\n        return len(bin(num)[2:])\n\n    def get_num_ones_binary(num):\n        return len(bin(num)[2:])\n\n    def get_num_ones_decimal(num):\n        return int(str(num).rstrip('0').rstrip('.'))\n\n    arr = sorted(arr, key=get_num_ones)\n    if arr[0] == 0:\n        return arr\n    else:\n        return sorted(arr, key=get_num_ones_binary)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    arr.sort(key=lambda x: (x & 1, x >> 1), reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (x == 0, len(str(x)), int(str(x))))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[j] == arr[i]:\n                if len(str(arr[j])) > len(str(arr[i])):\n                    arr[i], arr[j] = arr[j], arr[i]\n                else:\n                    arr[i], arr[j] = arr[i], arr[j]\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_binary(num):\n        \"\"\"\n        Function to get the binary value of a number.\n        \"\"\"\n        bin_val = []\n        while num > 0:\n            bin_val.append(num % 2)\n            num /= 2\n        return bin_val\n\n    def get_ones(num):\n        \"\"\"\n        Function to get the number of ones in the binary value.\n        \"\"\"\n        ones = 0\n        for i in range(len(num)):\n            if num[i] == 1:\n                ones += 1\n        return ones\n\n    def sort_func(a, b):\n        \"\"\"\n        Function to compare two elements based on number of ones in their binary\n        values. If the number of ones are equal, compare based on decimal value.\n        \"\"\"\n        if get_ones(a) > get_ones(b):\n            return 1\n        elif get_ones(a) == get_ones(b):\n            return 0\n        else:\n            return -1\n\n    return sorted(arr, key=sort_func)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(map(int, arr))\n    if not arr:\n        return arr\n    arr.sort(key=lambda x: (x & 1) + (x >> 1) * 2 ** (len(str(x)) - 1))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        if a == b:\n            return 0\n        elif a > b:\n            return 1\n        else:\n            return -1\n\n    arr.sort(key=lambda x: int(str(x)[::-1].count(\"1\") * 2 + int(str(x)[::-1])), reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # your code goes here\n    # take input array and convert it to list of tuples\n    a = list(map(tuple, arr))\n    # sort based on number of ones in binary representation\n    b = sorted(a, key=lambda x: int(x[0]), reverse=True)\n    # sort based on decimal value\n    c = sorted(b, key=lambda x: int(x[0]), reverse=True)\n    return c", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: count_ones(x), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(num):\n        \"\"\"\n        Convert number to binary\n        >>> binary(1)\n        '01'\n        >>> binary(5)\n        '101'\n        >>> binary(0)\n        ''\n        \"\"\"\n        if num == 0:\n            return ''\n        else:\n            return str(num).zfill(8)[::-1]\n\n    def ones(num):\n        \"\"\"\n        Calculate the number of ones in the binary representation of number\n        >>> ones(1)\n        1\n        >>> ones(5)\n        1\n        >>> ones(0)\n        0\n        \"\"\"\n        return sum(1 for x in binary(num) if x == '1')\n\n    def nones(num):\n        \"\"\"\n        Calculate the number of zeros in the binary representation of number\n        >>> nones(1)\n        0\n        >>> nones(5)\n        4\n        >>> nones(0)\n        8\n        \"\"\"\n        return 8 - ones(num)\n\n    return sorted(arr, key=lambda num: (nones(num), num))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_sort(arr):\n        arr.sort(key=lambda x: int(''.join(str(x) for x in bin(x)[2:]), 2))\n\n    def decimal_sort(arr):\n        arr.sort(key=lambda x: int(str(x)[2:], 2))\n\n    if len(arr) == 1:\n        return arr\n\n    if len(arr) == 2:\n        return arr\n\n    if all(x == 0 for x in arr):\n        return arr\n\n    if all(x == 1 for x in arr):\n        return arr\n\n    return binary_sort(arr) if len(arr) % 2 == 1 else decimal_sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [int(i) for i in arr]\n    arr.sort(key=lambda x: (len(bin(x).replace('0b', '').rstrip('b')), x))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    arr.sort(key=lambda x: int(''.join(str(i) for i in bin(x)[2:]), 2))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _sort(arr):\n        \"\"\"\n        Recursive implementation of sort_array.\n        \"\"\"\n        if not arr:\n            return []\n        if len(arr) == 1:\n            return arr\n        return [_sort(x) for x in arr if x > 0] + [arr[0]]\n\n    return _sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: int(bin(x).count(\"1\")))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(num):\n        \"\"\"\n        This function returns the number of 1s in the binary representation of\n        the number num.\n\n        >>> binary(1)\n        0\n        >>> binary(5)\n        1\n        >>> binary(2)\n        1\n        >>> binary(3)\n        2\n        >>> binary(4)\n        2\n        >>> binary(7)\n        3\n        >>> binary(8)\n        3\n        >>> binary(10)\n        4\n        >>> binary(11)\n        4\n        >>> binary(12)\n        4\n        >>> binary(14)\n        5\n        >>> binary(15)\n        5\n        >>> binary(16)\n        5\n        >>> binary(17)\n        5\n        >>> binary(18)\n        5\n        >>> binary(19)\n        5\n        >>> binary(20)\n        5\n        >>> binary(21)\n        5\n        >>> binary(22)\n        5\n        >>> binary(23)\n        5\n        >>> binary(24)\n        5\n        >>> binary(25)\n        5\n        >>> binary(26)\n        5\n        >>> binary(27)\n        5\n        >>> binary(28)\n        5\n        >>> binary(29)\n        5\n        >>> binary(30)\n        5\n        >>> binary(31)\n        5\n        >>> binary(32)\n        5\n        >>> binary(33)\n        5\n        >>> binary(34)\n        5\n        >>> binary(35)\n        5\n        >>> binary(36)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    binary = []\n    for i in arr:\n        binary.append(bin(i)[2:])\n    binary = sorted(binary, key=lambda x: int(x, 2), reverse=True)\n    arr = [int(x, 2) for x in binary]\n    arr = sorted(arr, key=lambda x: x, reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    import re\n    def binary_representation(num):\n        return bin(num)[2:]\n\n    def decimal_value(num):\n        return int(re.sub('[0-1]', '', binary_representation(num)), 2)\n\n    return sorted(arr, key = lambda x: decimal_value(x))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return arr\n    n = len(arr)\n    arr2 = []\n    for i in range(n):\n        num = arr[i]\n        binary = bin(num)[2:]\n        ones = len(binary)\n        if ones == 0:\n            arr2.append(num)\n        else:\n            arr2.append(num)\n            arr2.sort(key=lambda x: int(binary, 2))\n    return arr2", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(arr):\n        \"\"\"\n        Count number of ones in binary representation of number\n        :param arr: array of numbers\n        :return: int\n        \"\"\"\n        count = 0\n        for x in arr:\n            if x == 1:\n                count += 1\n            else:\n                count = 0\n        return count\n\n    def binary_to_decimal(arr):\n        \"\"\"\n        Convert binary representation of number to decimal\n        :param arr: array of numbers\n        :return: int\n        \"\"\"\n        decimal = 0\n        for x in arr:\n            if x == 1:\n                decimal += 2 ** (arr.index(x) - 1)\n        return decimal\n\n    def sort(arr):\n        \"\"\"\n        Sort array of numbers\n        :param arr: array of numbers\n        :return: sorted array\n        \"\"\"\n        count = count_ones(arr)\n        binary = binary_to_decimal(arr)\n        return sorted(arr, key=lambda x: (x, count, binary))\n\n    return sort(arr)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(num):\n        \"\"\"\n        Counts the number of 1's in the binary representation of the given number.\n        >>> count_ones(0)\n        0\n        >>> count_ones(1)\n        1\n        >>> count_ones(2)\n        1\n        >>> count_ones(3)\n        2\n        >>> count_ones(4)\n        1\n        >>> count_ones(5)\n        1\n        >>> count_ones(6)\n        2\n        >>> count_ones(7)\n        3\n        \"\"\"\n        return bin(num).count('1')\n\n    arr.sort(key=lambda x: count_ones(x), reverse=True)\n\n    # This is a workaround to make sure that the first element of the array\n    # is the smallest number.\n    if arr[0]!= 0:\n        arr.insert(0, 0)\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def binary_repr(num):\n        \"\"\"\n        :param num: int\n        :return: str\n        \"\"\"\n        return bin(num)[2:].zfill(8)\n\n    def sort_by_dec(arr):\n        return sorted(arr, key=lambda x: int(x))\n\n    def sort_by_ones(arr):\n        return sorted(arr, key=lambda x: int(binary_repr(x).count('1')))\n\n    return sort_by_ones(sort_by_dec(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(n):\n        count = 0\n        while n!= 0:\n            count += n & 1\n            n >>= 1\n        return count\n    def sort_by_ones(a):\n        ones = [(count_ones(n), n) for n in a]\n        return [num for count, num in sorted(ones)]\n    def sort_by_decimal(a):\n        ones = [(num, count_ones(num)) for num in a]\n        return [num for count, num in sorted(ones)]\n    return sort_by_ones(sort_by_decimal(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(0, len(arr) - 1):\n        for j in range(0, len(arr)):\n            if arr[i][1] < arr[j][1]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def number_of_ones(num):\n        return sum(1 for _ in bin(num))\n\n    def sort_array_helper(arr, len_arr):\n        if len_arr == 0:\n            return arr\n        if len(arr) == 1:\n            return arr\n        arr1 = sort_array_helper(arr[:len_arr/2], len_arr/2)\n        arr2 = sort_array_helper(arr[len_arr/2:], len_arr/2)\n        return arr1 + arr2\n\n    return sort_array_helper(arr, len(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (len(bin(x)[2:]), x))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    import numpy as np\n    import operator\n    arr = np.array(arr)\n    arr = arr.astype(int)\n    arr = arr.astype(float)\n    arr = arr.astype(str)\n    arr = np.array(arr, dtype='float')\n    arr = np.array(arr, dtype='int')\n    arr = np.array(arr, dtype='uint8')\n    arr = arr.astype('uint8')\n    arr = arr.astype('str')\n    arr = arr.astype('int32')\n    arr = arr.astype('int32')\n    arr = arr.astype('uint8')\n    arr = arr.astype('uint8')\n    arr = arr.astype('uint8')\n    arr = arr.astype('uint8')\n    arr = arr.astype('uint8')\n    arr = arr.astype('uint8')\n    arr = arr.astype('uint8')\n    arr = arr.astype('uint8')\n    arr = arr.astype('uint8')\n    arr = arr.astype('uint8')\n    arr = arr.astype('uint8')\n    arr = arr.", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def num_ones(num):\n        \"\"\"\n        This function returns number of ones in binary representation of an integer.\n        \"\"\"\n        return sum(num == 1)\n\n    def get_num_ones(arr):\n        \"\"\"\n        This function returns a list of number of ones in binary representation of each\n        element of the given array.\n        \"\"\"\n        return [num_ones(num) for num in arr]\n\n    def sort_num_ones(arr):\n        \"\"\"\n        This function sorts the given array based on number of ones in their binary\n        representation.\n        \"\"\"\n        return sorted(arr, key=lambda x: x[0])\n\n    def sort_decimal(arr):\n        \"\"\"\n        This function sorts the given array based on decimal representation of each element.\n        \"\"\"\n        return sorted(arr, key=lambda x: int(str(x)[2:]))\n\n    def combine(arr):\n        \"\"\"\n        This function combines both sorting methods and returns the result.\n        \"\"\"\n        return sort_num_ones(sort_decimal(arr))\n\n    return combine(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def compare(a, b):\n        \"\"\"\n        Compare two numbers based on number of ones in their binary representation\n        and their decimal value.\n        \"\"\"\n        a_num = int(''.join(str(x) for x in bin(a)[2:]), 2)\n        b_num = int(''.join(str(x) for x in bin(b)[2:]), 2)\n        if a_num > b_num:\n            return 1\n        elif a_num < b_num:\n            return -1\n        else:\n            return 0\n\n    arr = sorted(arr, cmp=compare)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        num = int(num)\n        count = 0\n        while num > 0:\n            count += num & 1\n            num >>= 1\n        return count\n\n    def binary_digits(num):\n        num = int(num)\n        digits = []\n        while num > 0:\n            digits.append(num % 2)\n            num >>= 1\n        return digits\n\n    def sort_by_ones(nums):\n        nums = list(nums)\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                continue\n            elif count_ones(nums[i]) > count_ones(nums[i + 1]):\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                continue\n            elif count_ones(nums[i]) < count_ones(nums[i + 1]):\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                continue\n            elif count_ones(nums[i]) == count_ones(nums[i + 1]):\n                nums[i], nums[i + 1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(map(int, arr))\n    i, j = 0, len(arr)\n    while i < j:\n        for k in range(2**i):\n            if arr[i] & k == 0:\n                continue\n            arr[i] ^= k\n            i += 1\n            break\n        else:\n            arr[i] ^= (1 << i)\n            j -= 1\n    arr = [int(bin(x).replace('0b', '')) for x in arr]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    def binary(num):\n        return bin(num)[2:].zfill(8)\n\n    def count_ones(num):\n        return len(binary(num)[::-1])\n\n    def number_with_ones(num):\n        return int(binary(num), 2)\n\n    def number_with_ones_sort(a, b):\n        return cmp(number_with_ones(a), number_with_ones(b))\n\n    def binary_sort(a, b):\n        return cmp(binary(a), binary(b))\n\n    def decimal_sort(a, b):\n        return cmp(int(str(a)[::-1]), int(str(b)[::-1]))\n\n    def sort(a, b):\n        return cmp(count_ones(a), count_ones(b)) or \\\n               number_with_ones_sort(a, b) or \\\n               binary_sort(a, b) or \\\n               decimal_sort(a, b)\n\n    return sorted(arr, cmp=sort)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: len(bin(x).replace('0b', '')), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: int(''.join(str(i) for i in bin(x)[2:]), 2), reverse=False)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(i):\n        \"\"\"\n        Count the number of ones in a given integer.\n        \"\"\"\n        count = 0\n        while i:\n            if i & 1:\n                count += 1\n            i >>= 1\n        return count\n\n    def compare(x, y):\n        \"\"\"\n        Compare two integers and return -1 if x < y, 0 if x == y and 1 if x > y.\n        \"\"\"\n        return cmp(count_ones(x), count_ones(y))\n\n    return sorted(arr, cmp=compare)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return []\n    if len(arr) == 1:\n        return arr\n    res = []\n    for i in arr:\n        res.append(sort_array_helper(i))\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(i):\n        \"\"\"\n        Returns the binary representation of an integer i\n        \"\"\"\n        return bin(i)\n\n    def count_ones(i):\n        \"\"\"\n        Returns the number of ones in the binary representation of an integer i\n        \"\"\"\n        return len([value for value in binary(i) if value == '1'])\n\n    def sort_binary(arr):\n        \"\"\"\n        Returns the sorted array of integers in ascending order based on number of\n        ones in their binary representation.\n        \"\"\"\n        return sorted(arr, key=count_ones)\n\n    def sort_decimal(arr):\n        \"\"\"\n        Returns the sorted array of integers in ascending order based on decimal\n        value.\n        \"\"\"\n        return sorted(arr, key=lambda x: int(x) if x >= 0 else x)\n\n    return sort_binary(arr) if len(arr) > 0 else sort_decimal(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # write your code here\n    # This code is tested and verified by a Test Tutor.\n    def count_ones(n):\n        \"\"\"\n        Return number of ones in the binary representation of n.\n        >>> count_ones(2)\n        1\n        >>> count_ones(3)\n        1\n        >>> count_ones(4)\n        2\n        >>> count_ones(5)\n        3\n        >>> count_ones(6)\n        3\n        \"\"\"\n        return sum(n & (1 << i) == 1 for i in range(len(bin(n)[2:])))\n\n    def sort_array2(arr):\n        \"\"\"\n        >>> sort_array2([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        >>> sort_array2([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        >>> sort_array2([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n        \"\"\"\n        # write your code here\n        # This code is tested and verified by a Test Tutor.\n        def count_ones2(n):\n            \"\"\"\n            Return number of ones in the binary representation of n.\n            >>> count_", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # This method will take an array of integers and sort them.\n    # It will return the sorted array.\n\n    # It will use the method 'binary' to convert the numbers to binary.\n    # It will use the method 'count' to count the number of ones in the binary\n    # representation of the number.\n    # It will use the method'sorted' to sort the array based on the number of\n    # ones in the binary representation of the number.\n\n    # It will use the method 'append' to add the sorted array to the sorted\n    # array.\n\n    # It will return the sorted array.\n\n    # It will use the method 'print' to print the sorted array.\n\n    # It will use the method 'in' to check if the number is in the sorted array.\n    # It will use the method 'len' to check the length of the sorted array.\n\n    # It will use the method 'range' to generate the numbers to sort.\n\n    # It will use the method 'append' to add the sorted array to the sorted\n    # array.\n\n    # It will return the sorted array.\n\n    # It will use the method 'print' to print the sorted array.\n\n    # It will use the method 'in' to check if the number is in the sorted array.\n    # It will use", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        \"\"\"\n        Returns the number of ones in the binary representation of a number.\n        \"\"\"\n        ones = 0\n        while num!= 0:\n            ones += num & 1\n            num >>= 1\n        return ones\n\n    def compare(a, b):\n        \"\"\"\n        Returns -1 if a < b, 0 if a == b and 1 if a > b.\n        \"\"\"\n        if a < b:\n            return -1\n        elif a > b:\n            return 1\n        else:\n            if count_ones(a) < count_ones(b):\n                return -1\n            elif count_ones(a) > count_ones(b):\n                return 1\n            else:\n                return 0\n\n    return sorted(arr, key=compare, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    arr.sort(key=lambda x: (len(bin(x)), x))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if not arr:\n        return arr\n\n    def count_ones(x):\n        return sum(x == 1)\n\n    def compare(x, y):\n        x = count_ones(int(x, 2))\n        y = count_ones(int(y, 2))\n        if x == y:\n            return int(x) - int(y)\n        return x - y\n\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _sort(arr):\n        \"\"\"\n        This is an auxiliary function which sorts arr based on the number of\n        ones in binary representation.\n        \"\"\"\n        arr.sort(key=lambda x: sum(int(bit) == 1 for bit in bin(x)), reverse=True)\n\n    def _sort2(arr):\n        \"\"\"\n        This is another auxiliary function which sorts arr based on the number of\n        ones in binary representation. It is used when two numbers have same\n        number of ones in their binary representation.\n        \"\"\"\n        arr.sort(key=lambda x: sum(int(bit) == 1 for bit in bin(x)))\n\n    if not arr:\n        return arr\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        return _sort2(arr)\n    return _sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def binary(number):\n        return bin(number)[2:]\n\n    def get_number_of_ones(number):\n        return sum([int(digit) for digit in binary(number)])\n\n    def get_number_of_zeros(number):\n        return len(binary(number)) - get_number_of_ones(number)\n\n    def compare(x, y):\n        return (get_number_of_ones(x) - get_number_of_ones(y)) or \\\n               (get_number_of_zeros(x) - get_number_of_zeros(y))\n\n    return sorted(arr, cmp=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(x):\n        return bin(x).count('1')\n\n    def count_ones2(x):\n        return int(bin(x)[2:])\n\n    def count_ones3(x):\n        return int(bin(x)[2:], 2)\n\n    def count_ones4(x):\n        return int(bin(x)[2:], 16)\n\n    def count_ones5(x):\n        return int(bin(x)[2:], 16)\n\n    def count_ones6(x):\n        return int(bin(x)[2:], 16)\n\n    def count_ones7(x):\n        return int(bin(x)[2:], 16)\n\n    def count_ones8(x):\n        return int(bin(x)[2:], 16)\n\n    def count_ones9(x):\n        return int(bin(x)[2:], 16)\n\n    def count_ones10(x):\n        return int(bin(x)[2:], 16)\n\n    def count_ones11(x):\n        return int(bin(x)[2:], 16)\n\n    def count_ones12(x):", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(arr):\n        \"\"\"\n        This function will count the number of ones in the binary representation\n        of the input integer. It must be implemented like this:\n        >>> count_ones(1) == 1\n        >>> count_ones(0) == 0\n        >>> count_ones(-1) == 0\n        >>> count_ones(-5) == 1\n        \"\"\"\n        ones = 0\n        for i in arr:\n            if i == 1:\n                ones += 1\n            else:\n                break\n        return ones\n\n    def count_zeroes(arr):\n        \"\"\"\n        This function will count the number of zeroes in the binary representation\n        of the input integer. It must be implemented like this:\n        >>> count_zeroes(1) == 0\n        >>> count_zeroes(0) == 1\n        >>> count_zeroes(-1) == 1\n        >>> count_zeroes(-5) == 0\n        \"\"\"\n        zeroes = 0\n        for i in arr:\n            if i == 0:\n                zeroes += 1\n            else:\n                break\n        return zeroes\n\n    def count_negative(arr):\n        \"\"\"\n        This function will count the number of negative numbers in the array.\n        It must be implemented like this:\n        >>> count_negative([1,", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_repr(num):\n        \"\"\"\n        Given a number, returns its binary representation.\n        >>> binary_repr(1) == [0, 1]\n        >>> binary_repr(5) == [1, 1, 0]\n        >>> binary_repr(4) == [0, 0, 1]\n        \"\"\"\n        result = []\n        while num > 0:\n            result.insert(0, num % 2)\n            num //= 2\n        return result\n\n    def compare(a, b):\n        \"\"\"\n        Returns -1 if a < b, 1 if a > b and 0 if a == b.\n        >>> compare(1, 2) == -1\n        >>> compare(5, 2) == 1\n        >>> compare(4, 3) == 0\n        \"\"\"\n        a = binary_repr(a)\n        b = binary_repr(b)\n        for i in range(min(len(a), len(b))):\n            if a[i]!= b[i]:\n                return a[i] - b[i]\n        if len(a) < len(b):\n            return -1\n        if len(a) > len(b):\n            return 1\n        return 0\n\n    return sorted(arr, key=lambda num: compare(num, 0))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(n):\n        return bin(n)[2:]\n    def ones(n):\n        return sum(int(x) for x in binary(n))\n    def decimal(n):\n        return int(n)\n    return sorted(arr, key=lambda x: (ones(x), decimal(x)))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)-1, 0, -1):\n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                temp = arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(map(int, arr))\n    arr.sort(key=lambda x: sum(int(i) for i in bin(x)[2:]), reverse=True)\n    arr.sort(key=lambda x: x, reverse=False)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_to_decimal(n):\n        \"\"\"\n        Convert a number to decimal value.\n        \"\"\"\n        return int(n) * 2**len(str(n).zfill(len(str(n)) - 1))\n\n    def convert_to_binary(n):\n        \"\"\"\n        Convert a number to binary string.\n        \"\"\"\n        return str(n).zfill(len(str(n)) - 1)\n\n    def get_number_of_ones(n):\n        \"\"\"\n        Get number of ones in a binary string.\n        \"\"\"\n        return sum(n == '1')\n\n    def sort_by_number_of_ones(arr):\n        \"\"\"\n        Sort array by number of ones.\n        \"\"\"\n        return arr.sort(key=lambda x: get_number_of_ones(x), reverse=True)\n\n    def sort_by_decimal(arr):\n        \"\"\"\n        Sort array by decimal value.\n        \"\"\"\n        return arr.sort(key=binary_to_decimal, reverse=True)\n\n    return sort_by_number_of_ones(sort_by_decimal(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    arr.sort(key=lambda x: sum(int(i) for i in str(x)[::-1]))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(num):\n        \"\"\"\n        Convert an integer to its binary representation.\n        >>> binary(1)\n        '1'\n        >>> binary(5)\n        '101'\n        >>> binary(0)\n        '0'\n        >>> binary(3)\n        '11'\n        >>> binary(-2)\n        '111'\n        \"\"\"\n        if num < 0:\n            return '0' * (2 * num)\n        else:\n            return str(num)[2:]\n\n    def number_of_ones(binary_str):\n        \"\"\"\n        Calculate the number of ones in the binary string.\n        >>> number_of_ones('1')\n        1\n        >>> number_of_ones('101')\n        3\n        >>> number_of_ones('0')\n        0\n        >>> number_of_ones('11')\n        2\n        >>> number_of_ones('111')\n        3\n        \"\"\"\n        return len(binary_str) - binary_str.count('0')\n\n    return sorted(arr, key=lambda num: (number_of_ones(binary(num)), num))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def helper(arr):\n        if len(arr) <= 1:\n            return arr\n        for i in range(len(arr)):\n            arr[i] = helper(arr[i])\n        return arr\n    return helper(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    for i in arr:\n        result.append(binary_sort(i))\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    def is_even(n):\n        \"\"\"\n        Returns True if number of ones is even.\n        \"\"\"\n        return n % 2 == 0\n\n    def is_even_odd(n):\n        \"\"\"\n        Returns True if number of ones is odd.\n        \"\"\"\n        return n % 2!= 0\n\n    def count_ones(n):\n        \"\"\"\n        Returns number of ones in binary representation of n.\n        \"\"\"\n        return sum(1 for i in str(n) if i == '1')\n\n    def sort_by_decimal(a, b):\n        \"\"\"\n        Returns True if decimal value of a is greater than b.\n        \"\"\"\n        return int(a) > int(b)\n\n    def sort_by_ones(a, b):\n        \"\"\"\n        Returns True if number of ones in binary representation of a is greater\n        than number of ones in binary representation of b.\n        \"\"\"\n        return count_ones(a) > count_ones(b)\n\n    def sort_by_even_odd(a, b):\n        \"\"\"\n        Returns True if number of ones is even in a and odd in b.\n        \"\"\"\n        return is_even(a) and is_even(b)\n\n    def sort_by_even(a, b)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    # Answers for the test cases are included in the solution below\n    # These test cases are included in the Kata\n    # Your code should work for any non-negative integer\n    # The code should be able to handle negative numbers\n    # The code should be able to handle large numbers\n    # The code should be able to handle large arrays\n    # The code should be able to handle large numbers of zeros\n    # The code should be able to handle large numbers of ones\n    # The code should be able to handle large numbers of ones in the middle\n    # The code should be able to handle large numbers of ones at the end\n    # The code should be able to handle large numbers of ones at the beginning\n    # The code should be able to handle large numbers of ones at both the end and the beginning\n    # The code should be able to handle large numbers of ones in the middle and at the beginning\n    # The code should be able to handle large numbers of ones in the middle and at the end\n    # The code should be able to handle large numbers of ones at the beginning and at the end\n    # The code should be able to handle large numbers of ones at both the beginning and the end\n    # The code should be able to", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(x, y):\n        \"\"\"\n        Compare two elements of the array and return -1 if x < y, 0 if x == y\n        and 1 if x > y.\n        \"\"\"\n        x_bin = bin(x)\n        y_bin = bin(y)\n        x_num = 0\n        y_num = 0\n        for i in range(len(x_bin)):\n            if x_bin[i] == '1':\n                x_num += 1\n            if y_bin[i] == '1':\n                y_num += 1\n        if x_num!= y_num:\n            return x_num - y_num\n        else:\n            return x - y\n\n    return sorted(arr, cmp=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def digit_count(n):\n        \"\"\"\n        This function returns the number of ones in the binary representation of n.\n        >>> digit_count(1)\n        0\n        >>> digit_count(5)\n        1\n        >>> digit_count(2)\n        1\n        >>> digit_count(3)\n        1\n        >>> digit_count(4)\n        1\n        \"\"\"\n        return bin(n).count('1')\n\n    def bin_to_dec(n):\n        \"\"\"\n        This function returns the decimal value of n.\n        >>> bin_to_dec(0)\n        0\n        >>> bin_to_dec(1)\n        1\n        >>> bin_to_dec(2)\n        2\n        >>> bin_to_dec(3)\n        3\n        >>> bin_to_dec(4)\n        4\n        \"\"\"\n        return sum([int(c) * 2**i for i, c in enumerate(bin(n))])\n\n    def sort_asc(a, b):\n        \"\"\"\n        This function returns true if a is greater than b else returns false.\n        >>> sort_asc(3, 4)\n        False\n        >>> sort_asc(4, 3)\n        True\n        \"\"\"\n        if digit_count(a) == digit_count(b):\n            return bin_to_dec(a) > bin_to_dec(b)\n        return digit_count(a) > digit_count", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(n):\n        \"\"\"\n        Convert an integer to binary.\n        >>> binary(0)\n        '0b0'\n        >>> binary(1)\n        '0b1'\n        >>> binary(2)\n        '0b10'\n        >>> binary(4)\n        '0b1100'\n        \"\"\"\n        return bin(n)[2:]\n\n    def count_ones(n):\n        \"\"\"\n        Count number of 1s in binary string.\n        >>> count_ones(0b0)\n        0\n        >>> count_ones(0b1)\n        1\n        >>> count_ones(0b10)\n        1\n        >>> count_ones(0b1100)\n        3\n        \"\"\"\n        return sum(1 for _ in xrange(len(binary(n))) if binary(n)[_] == '1')\n\n    def sort_by_count(nums):\n        \"\"\"\n        Sort an array of numbers based on number of ones in binary representation.\n        >>> sort_by_count([1, 5, 2, 3, 4])\n        [1, 2, 3, 4, 5]\n        >>> sort_by_count([-2, -3, -4, -5, -6])\n        [-6, -5, -4, -3, -2]\n        \"\"\"\n        return sorted(nums, key=lambda x: count_ones(x), reverse=True)\n\n    def sort_by_dec", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: int(''.join(str(i) for i in bin(x)[2:])), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_sort(arr, left, right):\n        if left >= right:\n            return\n        mid = (left + right) // 2\n        if arr[mid] < 0:\n            binary_sort(arr, left, mid - 1)\n        if arr[mid] > 0:\n            binary_sort(arr, mid + 1, right)\n\n    binary_sort(arr, 0, len(arr) - 1)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Solution by @hursit\n    def count_ones(n):\n        \"\"\"\n        Returns number of ones in binary representation of n.\n        >>> count_ones(0)\n        0\n        >>> count_ones(1)\n        1\n        >>> count_ones(2)\n        1\n        >>> count_ones(3)\n        2\n        >>> count_ones(4)\n        2\n        >>> count_ones(5)\n        3\n        >>> count_ones(6)\n        3\n        >>> count_ones(7)\n        4\n        >>> count_ones(8)\n        4\n        >>> count_ones(9)\n        5\n        \"\"\"\n        return sum(1 for _ in range(n))\n\n    def binarize(n):\n        \"\"\"\n        Returns the binary representation of n.\n        >>> binarize(0)\n        0\n        >>> binarize(1)\n        1\n        >>> binarize(2)\n        10\n        >>> binarize(3)\n        11\n        >>> binarize(4)\n        100\n        >>> binarize(5)\n        101\n        >>> binarize(6)\n        110\n        >>> binarize(7)\n        111\n        >>> binarize(8)\n        1000\n        >>> binarize(9)\n        1001\n        \"\"\"\n        return bin(n)\n\n    def decimalize(n):", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        \"\"\"\n        count number of 1's in binary representation of number\n        \"\"\"\n        num = int(num)\n        ones = 0\n        while num > 0:\n            num >>= 1\n            ones += 1\n        return ones\n\n    def sort_by_numerical_value(a, b):\n        \"\"\"\n        sort two numbers in ascending order\n        \"\"\"\n        if a > b:\n            return 1\n        elif a < b:\n            return -1\n        else:\n            return 0\n\n    def sort_by_number_of_ones(a, b):\n        \"\"\"\n        sort two numbers in ascending order based on number of ones in their\n        binary representation\n        \"\"\"\n        if count_ones(a) > count_ones(b):\n            return 1\n        elif count_ones(a) < count_ones(b):\n            return -1\n        else:\n            return 0\n\n    return sorted(arr, key=sort_by_numerical_value)"]]