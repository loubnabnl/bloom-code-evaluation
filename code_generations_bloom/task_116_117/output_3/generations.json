[["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # write your code here:\n    result = []\n    arr = list(map(int, arr))\n    for index, number in enumerate(arr):\n        binary = bin(number)\n        decimal = sum(int(x) for x in binary)\n        if decimal > 0:\n            result.append((decimal, index))\n        else:\n            result.append((0, index))\n    result.sort()\n    return [arr[value] for value in result]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def build_histogram(arr):\n        res = [[0 for _ in range(len(arr))] for _ in range(len(arr))]\n        for item in arr:\n            res[int(item)] += 1\n        return res\n\n    def binary_sort(arr, hist):\n        hist = hist\n        arr = list(arr)\n        for i in range(len(arr)):\n            if arr[i]!= 0:\n                break\n        for i in range(len(arr) - 1, i, -1):\n            if hist[arr[i]] > hist[arr[i + 1]]:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n        return arr\n\n    def decimal_sort(arr, hist):\n        hist = hist\n        arr = list(arr)\n        for i in range(len(arr)):\n            if arr[i]!= 0:\n                break\n        for i in range(len(arr) - 1, i, -1):\n            if hist[arr[i]] < hist[arr[i + 1]]:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n        return arr\n\n    def bin_dec_sort(arr, hist):\n        hist = hist\n        arr =", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        This function returns -1 if `a` should go first in the sorted order,\n        otherwise it returns 1\n        \"\"\"\n        return (a < b) - (a > b)\n\n    # Two helper functions to iterate over the array\n    def iter_for_decimal(value):\n        \"\"\"\n        Iterates over the array until it finds a value which is\n        equal or greater than `value` in decimal format.\n        \"\"\"\n        for i in arr:\n            if decimal.Decimal(str(i)) >= value:\n                return i\n\n    def iter_for_number_of_ones(value):\n        \"\"\"\n        Iterates over the array until it finds a value which is\n        equal or greater than `value` in number of ones in binary representation.\n        \"\"\"\n        for i in arr:\n            if len(bin(i)) > len(bin(value)):\n                return i\n\n    # First sort the array by decimal value\n    arr.sort(key=decimal.Decimal)\n    # Then sort by the number of ones in binary format\n    arr.sort(key=len, reverse=True)\n    # Then reverse the array because we want to get the sorted array in ascending order\n    return arr[::-1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    one_count = [int(''.join(str(x) for x in bin(i)[2:]), 2) for i in arr]\n\n    return sorted(arr, key=lambda i: one_count.index(i) if i!= 0 else one_count.index(i) - one_count.index(1))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    array = []\n    array.append(arr)\n    while len(array) > 0:\n        for i in range(len(array[0])):\n            for j in range(len(array)):\n                if array[j][i] == 1:\n                    array.insert(0, array[j])\n        array.pop(0)\n    return array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            arr[i], arr[i - 1] = arr[i - 1], arr[i]\n            if i < len(arr) - 1:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            arr[i] = int(str(arr[i])[0])\n        if arr[i] > arr[i - 1]:\n            break\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(i):\n        \"\"\"\n        This function takes a decimal number and returns its binary string.\n        >>> binary(0)\n        ''\n        >>> binary(1)\n        '1'\n        >>> binary(10)\n        '010'\n        >>> binary(15)\n        '011'\n        \"\"\"\n        return bin(i)[2:].zfill(len(bin(i)) - 2)\n\n    def count1(i):\n        \"\"\"\n        This function counts number of ones in a binary number.\n        >>> count1(0)\n        0\n        >>> count1(1)\n        1\n        >>> count1(10)\n        1\n        >>> count1(15)\n        2\n        \"\"\"\n        return int(binary(i)[::-1].count('1'))\n\n    def binary_sort(arr):\n        \"\"\"\n        This function sorts an array according to number of ones in its binary\n        representation.\n        >>> binary_sort([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        >>> binary_sort([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        \"\"\"\n        for i in range(len(arr) - 1):\n            for j in range(len(arr) - i - 1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr) #Copy the list\n    count_1 = 0 #Number of ones in binary representation\n    sorted_arr = []\n    for index, num in enumerate(arr):\n        binary = bin(num)\n        while binary:\n            count_1 += int(binary.pop(0))\n            if binary:\n                decimal = int(binary.pop(0))\n            else:\n                decimal = 0\n            if decimal == 0:\n                decimal = count_1\n            if decimal == count_1:\n                if decimal < 0:\n                    decimal = -decimal\n                decimal += 1\n            if decimal < count_1:\n                decimal = count_1\n            if decimal > count_1:\n                decimal = count_1\n            num = decimal\n        sorted_arr.append(num)\n\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    a = []\n    for i in arr:\n        a.append(bin(i).count('1'))\n    a.sort()\n\n    def count(i):\n        return a.count(i) + 1\n    return sorted(arr, key=count)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    while arr:\n        current = arr.pop()\n        count = 0\n        for _ in range(len(current)):\n            if current[_] == '1':\n                count += 1\n        arr.append(count)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_search(arr, index, reverse=False):\n        \"\"\"\n        This function has to be used to sort array with similar number of ones in\n        binary representation. I tried to explain it in the Kata's documentation.\n\n        :param arr: The array to be sorted\n        :param index: The index to start binary search\n        :param reverse: If this parameter is True, then the search will be in\n            reverse\n        :return: index of the array\n        \"\"\"\n        if reverse:\n            arr = arr[index:] + arr[:index]\n\n        while index < len(arr):\n            if arr[index] == 0:\n                break\n            index += 1\n            if index == len(arr):\n                return index\n\n        for i in range(index, len(arr)):\n            if arr[index] > arr[i]:\n                index = i\n                break\n\n        return index\n\n    return binary_search(arr, 0, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def is_binary(num):\n        num = num - (num & 1)\n        return num >> 1 if num & 1 else num\n\n    def get_num_ones(num):\n        ones = 0\n        while num > 0:\n            ones += 1\n            num -= 1\n        return ones\n\n    def find_decimal(num):\n        dec = 0\n        while num > 0:\n            dec += num % 10\n            num /= 10\n        return dec\n\n    def mySort(nums):\n        sorted_num = []\n        for num in nums:\n            ones = get_num_ones(num)\n            if ones == 0:\n                sorted_num.append(num)\n            else:\n                sorted_num.append(num if find_decimal(num) > find_decimal(sorted_num[-1]) else sorted_num[-1])\n        return sorted_num\n\n    return mySort(arr)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(map(int, arr))\n    arr.sort(key=lambda x:(sum([int(i) for i in bin(x)[2:]]), x))\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count(n):\n        return int(bin(n)[2:], 2)\n\n    def swapped(a, b):\n        return count(a) > count(b)\n\n    def sort_array_helper(arr):\n        if len(arr) < 2:\n            return arr\n\n        return sorted(arr, key=sort_array_helper, reverse=True)\n\n    return sort_array_helper(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    binary = []\n    result = []\n    for x in arr:\n        if x == 0:\n            binary = []\n        else:\n            binary.append(str(x))\n        if len(binary) == 8:\n            result.append(''.join(binary))\n            binary = []\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: (len(bin(x)) - 2, x))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    numbers = [int(''.join(map(str, n))) for n in arr]\n    numbers.sort(key = lambda x: int(''.join(map(str, x))[1:]))\n    return [n for n in numbers]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    length = len(arr)\n    if length == 0:\n        return arr\n    if length == 1:\n        return arr\n\n    # sort only between 2 numbers\n    elif length == 2:\n        if arr[0] > arr[1]:\n            arr[1], arr[0] = arr[0], arr[1]\n        return arr\n\n    # sort between 2 numbers at the bottom\n    elif length == 3:\n        if arr[2] > arr[1]:\n            arr[1], arr[2] = arr[2], arr[1]\n        if arr[1] > arr[0]:\n            arr[0], arr[1] = arr[1], arr[0]\n        return arr\n\n    # sort between 2 numbers at the top\n    elif length == 4:\n        if arr[0] > arr[2]:\n            arr[2], arr[0] = arr[0], arr[2]\n        if arr[1] > arr[2]:\n            arr[2], arr[1] = arr[1], arr[2]\n        if arr[2] > arr[3]:\n            arr[3], arr[2] = arr[2], arr[3]\n        return arr\n\n    # sort between 3 numbers at the bottom\n    elif length == 5:\n        if arr[3] > arr[2]:\n            arr[2], arr[3] = arr[3], arr[2]\n        if arr[3] > arr[0]:\n            arr[0], arr[3] = arr[3], arr[0]\n        if arr[3] >", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def num_ones(x):\n        \"\"\"\n        :return: The number of 1's in binary representation of integer x.\n        \"\"\"\n        if x < 0:\n            return 0\n        else:\n            return (x + 1) // 2\n\n    def get_binary_repr(x):\n        \"\"\"\n        :return: The binary representation of integer x.\n        \"\"\"\n        if x < 0:\n            return \"0\" * (-x)\n        else:\n            return bin(x)[2:]\n\n    def split_into_lists(array):\n        \"\"\"\n        Splits the array into two arrays.\n        One array will hold the numbers with most 1s.\n        Second array will hold the numbers with least 1s.\n        \"\"\"\n        array_1 = []\n        array_2 = []\n        for element in array:\n            if num_ones(element) < num_ones(array_2[-1]):\n                array_2.append(element)\n            else:\n                array_1.append(element)\n        return [array_1, array_2]\n\n    def get_num_of_digits(x):\n        \"\"\"\n        :return: The number of digits in the decimal representation of integer x.\n        \"\"\"\n        if x == 0:\n            return 0\n        else:\n            return int(ceil(log(abs(x), 10)))\n\n    def create_lower(array):\n        \"\"\"", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count(n):\n        count = 0\n        while n!= 0:\n            count += 1\n            n //= 2\n        return count\n\n    def count_bits(n):\n        count = 0\n        while n!= 0:\n            count += 1\n            n >>= 1\n        return count\n\n    arr = sorted(arr)\n    arr = [int(''.join(map(str, arr[i]))) for i in range(len(arr))]\n\n    while len(arr) > 1:\n        new_arr = []\n        for i in range(len(arr)):\n            if count_bits(arr[i]) == count_bits(arr[i + 1]):\n                new_arr.append(arr[i])\n            else:\n                new_arr.append(arr[i])\n\n        for i in range(len(new_arr)):\n            arr[i] = new_arr[i]\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def sort_binary(a):\n        l = len(a) - 1\n        while l >= 0:\n            b = bin(a[l])[2:].zfill(l+1)\n            for i in range(l):\n                if b[i] == \"1\":\n                    b[i] = \"0\"\n                else:\n                    b[i] = \"1\"\n            b = \".\".join(b)\n            if 0 in b:\n                b = int(b, 2)\n            elif len(b) > 1:\n                b = int(b, 2)\n            else:\n                b = 0\n            a.append(b)\n            l -= 1\n\n    def sort_decimal(a):\n        l = len(a) - 1\n        while l >= 0:\n            b = bin(a[l])[2:].zfill(l+1)\n            for i in range(l):\n                if b[i] == \"1\":\n                    b[i] = \"0\"\n                else:\n                    b[i] = \"1\"\n            b = \".\".join(b)\n            if 0 in b:\n                b = int(b, 2)\n            elif len(b) > 1:\n                b = int(b, 2)\n            else:\n                b = 0\n            a.append(b)\n            l -= 1\n\n    sort_binary(arr)\n    sort", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    while arr:\n        for i in range(2 ** len(arr)):\n            if arr[-(i - 1)] == 1:\n                result.append(i)\n                arr.remove(arr[-(i - 1)])\n    for i in range(2 ** len(arr)):\n        if arr[-(i - 1)] == 1:\n            result.append(i)\n\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not len(arr):\n        return arr\n    arr.sort(key=lambda x: bin(x).count('1'))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def __sort_ones_binary(arr):\n        \"\"\"\n        :param arr: An array of non-negative integers\n        :return: An array of non-negative integers sorted based on number of\n            ones in their binary representation in ascending order.\n        \"\"\"\n        arr = sorted(arr, key=lambda x: x & 1)\n        return arr + sorted(arr, key=lambda x: x >> 1)\n\n    def __sort_decimal(arr):\n        \"\"\"\n        :param arr: An array of non-negative integers\n        :return: An array of non-negative integers sorted based on their decimal\n            value in ascending order.\n        \"\"\"\n        arr = sorted(arr, key=lambda x: int(str(x)[0]))\n        return arr + sorted(arr, key=lambda x: int(str(x)[1]))\n\n    def __sort_binary_decimal(arr):\n        \"\"\"\n        :param arr: An array of non-negative integers\n        :return: An array of non-negative integers sorted based on number of\n            ones in their binary representation in ascending order followed by\n            their decimal value in ascending order.\n        \"\"\"\n        arr = __sort_ones_binary(arr)\n        return arr + __sort_decimal(arr)\n\n    def __sort_binary(arr):\n        \"\"\"\n        :param arr: An array of non-negative integers", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def is_zero(num):\n        return int(num) == 0\n\n    def is_non_negative(num):\n        return num >= 0\n\n    def is_power_of_two(num):\n        return num & (num - 1) == 0\n\n    def get_num_ones(num):\n        return int(num) + (int(num) >> 1)\n\n    def get_num_zeros(num):\n        return int(num) - get_num_ones(num)\n\n    def compare_by_ones(a, b):\n        return get_num_ones(a) - get_num_ones(b)\n\n    def compare_by_zeros(a, b):\n        return get_num_zeros(a) - get_num_zeros(b)\n\n    def compare_by_decimal(a, b):\n        return a - b\n\n    return sorted(arr, cmp=lambda x, y: cmp(compare_by_ones(x, y),\n                                         compare_by_zeros(x, y),\n                                         compare_by_decimal(x, y)))\n\n\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def digit_count(n):\n        count = 0\n        while n!= 0:\n            count += 1\n            n //= 2\n        return count\n\n    return sorted(arr, key=digit_count)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr)\n    while True:\n        count = 0\n        for i in range(len(arr) - 1):\n            if arr[i] == arr[i + 1]:\n                count += 1\n            else:\n                count = 0\n                break\n        if count == 0:\n            break\n        else:\n            tmp = arr.pop(arr.index(arr[-1]))\n            arr.insert(arr.index(arr[-1]), tmp)\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def convert_to_bin(int_val):\n        \"\"\"\n        This function accepts an integer value as input and returns its binary\n        representation. It must be implemented like this:\n        >>> convert_to_bin(0) == '000000'\n        >>> convert_to_bin(1) == '000010'\n        >>> convert_to_bin(2) == '001001'\n        >>> convert_to_bin(3) == '011001'\n        >>> convert_to_bin(4) == '101001'\n        >>> convert_to_bin(5) == '111001'\n        >>> convert_to_bin(6) == '111010'\n        >>> convert_to_bin(7) == '111011'\n        \"\"\"\n        binary_str = ''\n        while int_val:\n            binary_str = str(int_val % 2) + binary_str\n            int_val //= 2\n        return binary_str\n\n    def number_of_ones(int_val):\n        \"\"\"\n        This function accepts an integer value as input and returns number of ones\n        in its binary representation. It must be implemented like this:\n        >>> number_of_ones(0) == 0\n        >>> number_of_ones(1) == 1\n        >>> number_of_ones(2) == 1\n        >>> number_of_ones(3) == 2\n        >>> number_of_ones(", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # In this implementation, we are sorting according to number of ones in\n    # binary representation of each element.\n    # If two numbers have same number of ones in their binary representation,\n    # then we are comparing their decimal value.\n\n    if len(arr) <= 1:\n        return arr\n\n    binary_arr = []\n    for i in range(0, len(arr)):\n        binary = bin(arr[i])\n        binary_arr.append(int(binary[2:]))\n\n    # Store numbers of each number of digits\n    bin_sum = []\n    for i in range(1, len(binary_arr)):\n        bin_sum.append(sum(binary_arr[binary_arr.index(0) - i:]))\n    bin_sum.reverse()\n\n    # Sort according to number of ones in binary representation\n    bin_sorted = sorted(binary_arr, key=lambda x: bin_sum[x - 1])\n\n    # Sort according to decimal values\n    decimal_sorted = sorted(bin_sorted, key=lambda x: int(x))\n\n    return decimal_sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def sort_dec(arr):\n        result = []\n        dec = 0\n        for num in arr:\n            dec += num\n            dec %= 10\n            if dec!= 0:\n                result.append(dec)\n        return result\n\n    def sort_ones(arr):\n        result = []\n        i = 0\n        while i < len(arr):\n            if arr[i] == 0:\n                i += 1\n                continue\n            result.append(1)\n            i += 1\n        return result\n\n    def sort_both(arr):\n        if len(arr) == 0:\n            return []\n        dec = sort_dec(arr)\n        ones = sort_ones(arr)\n        for j in range(1, len(dec)):\n            for i in range(j):\n                if dec[i] == dec[j]:\n                    if ones[i] < ones[j]:\n                        dec[i], dec[j] = dec[j], dec[i]\n                        ones[i], ones[j] = ones[j], ones[i]\n        return [dec[i] for i in range(len(dec))] + ones\n\n    return sort_both(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    nums = [int(num) for num in str(arr)]\n    return sorted(nums)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for _ in range(len(arr) - 1):\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                temp = arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = temp", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def flipBit(x, n):\n        return (x ^ (1 << n))\n\n    def countOnes(n):\n        return n.bit_length() - n.count(0)\n\n    def getBinary(n):\n        \"\"\"\n        Gets the binary representation of a number\n        :param n: The number\n        :return: The binary representation\n        \"\"\"\n        return bin(n)[2:]\n\n    def getDecimal(n):\n        \"\"\"\n        Gets the decimal value of a number\n        :param n: The number\n        :return: The decimal representation\n        \"\"\"\n        return int(bin(n)[2:], 2)\n\n    def isEqual(a, b):\n        \"\"\"\n        Compares two numbers\n        :param a: The first number\n        :param b: The second number\n        :return: True if both are equal, otherwise False\n        \"\"\"\n        return a == b\n\n    if len(arr) == 0:\n        return []\n\n    # Sorting\n    n = len(arr)\n    if n == 0:\n        return []\n\n    # Find the indices of all numbers with the same number of ones\n    bin_arr = [getBinary(i) for i in arr]\n    count_arr = [countOnes(int(n, 2)) for n in bin_arr]\n\n    # Initialize the index of", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def swap(a, b):\n        temp = a\n        a = b\n        b = temp\n    def partition(a, l, r):\n        pivot = a[(l + r) / 2]\n        i = l - 1\n        for j in range(l, r + 1):\n            if a[j] <= pivot:\n                i += 1\n                swap(a, i, j)\n        swap(a, l, i + 1)\n        return l\n    def quickSort(a, l, r):\n        if l < r:\n            q = partition(a, l, r)\n            quickSort(a, l, q - 1)\n            quickSort(a, q + 1, r)\n    return list(map(int, bin(x).lstrip('0b').split('0b')[1:]))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        count = 0\n        for j in range(len(arr[i])):\n            if arr[i][j] == '1':\n                count += 1\n        if count == 0:\n            arr[i] = '0'\n        else:\n            arr[i] = count\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: count_ones(x), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    def compare(a, b):\n        diff = abs(a - b)\n        if diff == 0:\n            diff = a - b\n        if diff == 0:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    def num_ones(n):\n        ones = 0\n        while n > 0:\n            if n % 2 == 1:\n                ones += 1\n            n /= 2\n        return ones\n\n    arr.sort(key=num_ones, reverse=True)\n    arr.sort(key=lambda x: int(str(x)[2:]), reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(n):\n        \"\"\"\n        Returns the binary representation of n.\n\n        >>> binary(5)\n        '11'\n        >>> binary(7)\n        '110'\n        \"\"\"\n        ret = []\n        while n!= 0:\n            ret.insert(0, str(n % 2))\n            n /= 2\n        return ''.join(ret)\n\n    def ones(n):\n        \"\"\"\n        Returns the number of ones in binary representation of n.\n\n        >>> ones(11)\n        2\n        >>> ones(110)\n        3\n        \"\"\"\n        return len(binary(n)[1:])\n\n    def compare(x, y):\n        \"\"\"\n        Compares two numbers in order to sort the array.\n\n        If numbers have the same number of ones, compare their decimal values.\n\n        >>> compare(11, 10)\n        1\n        >>> compare(11, 12)\n        -1\n        >>> compare(11, 11)\n        0\n        \"\"\"\n        return (ones(x) - ones(y)) or (x - y)\n\n    return sorted(arr, key=compare)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    max_len = len(max(arr, key=len))\n    result = []\n    for i in range(max_len):\n        flag = False\n        for j in range(len(arr)):\n            if arr[j] & (1 << (i + 1)):\n                flag = True\n                break\n        if flag:\n            result.append(arr[j])\n        else:\n            result.append(0)\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_binary(number):\n        if number == 0:\n            return 0\n        else:\n            return 1 + get_binary(number // 2)\n\n    def bin_to_dec(number):\n        num = 0\n        while number!= 0:\n            num = num * 2 + number % 2\n            number = number // 2\n        return num\n\n    def count_ones(number):\n        ones = 0\n        while number!= 0:\n            ones += number & 1\n            number = number // 2\n        return ones\n\n    sorted = []\n    for i in range(len(arr)):\n        sorted.append(arr[i])\n\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            sorted[i] = 0\n        else:\n            sorted[i] = count_ones(bin_to_dec(get_binary(arr[i])))\n\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    c = 0\n    l = len(arr)\n    for i in range(l):\n        while (arr[i] < 0):\n            c += 1\n            arr[i] += (1 << c)\n    arr.reverse()\n    for i in range(l):\n        if (arr[i] < 0):\n            c += 1\n            arr[i] = -arr[i] - (1 << c)\n    c = 0\n    l = len(arr)\n    for i in range(l):\n        while (arr[i] >= 0):\n            c += 1\n            arr[i] -= (1 << c)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, reverse=False)\n    arr = [int(x) for x in ''.join(str(i) for i in arr)]\n    arr.sort(key=lambda x: int(str(x)[-1]), reverse=False)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(num):\n        bits = bin(num)\n        if not bits[-1]:\n            bits = bits[:-1]\n        return bits\n    sorted = []\n    for num in arr:\n        bit = binary(num)\n        sorted.append(int(bit, 2))\n\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def get_num_of_ones(num):\n        \"\"\"\n        Returns number of ones in binary representation of number.\n        For example:\n        >>> get_num_of_ones(1) == 1\n        >>> get_num_of_ones(6) == 3\n        >>> get_num_of_ones(11) == 5\n        \"\"\"\n        num = bin(num)\n        return sum(bin(int(digit)).count('1') for digit in num)\n\n    def sort_by_ones(num):\n        \"\"\"\n        Sorts array of numbers according to number of ones in their binary representation.\n        For example:\n        >>> sort_by_ones([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        \"\"\"\n        num = list(map(int, str(num)))\n        return num[num.index(min(num, key=lambda x: get_num_of_ones(x)))]\n\n    def sort_by_decimal(num):\n        \"\"\"\n        Sorts array of numbers according to decimal value of the number.\n        For example:\n        >>> sort_by_decimal([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        \"\"\"\n        num = list(map(int, str(num)))\n        return num[", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        \"\"\"\n        :param num:\n        :return: number of ones in the binary representation of the integer\n        \"\"\"\n        val = bin(num)\n        num_of_ones = val.count('1')\n        return num_of_ones\n\n    def num_of_ones(num):\n        \"\"\"\n        :param num:\n        :return:\n        \"\"\"\n        return count_ones(num)\n\n    def sorted_array(num):\n        \"\"\"\n        :param num:\n        :return:\n        \"\"\"\n        val = num_of_ones(num)\n        if val == 0:\n            return num\n        if val == 1:\n            return num * 10\n        if val == 2:\n            return num * 100\n        if val == 3:\n            return num * 1000\n        if val == 4:\n            return num * 10000\n        if val == 5:\n            return num * 100000\n        if val == 6:\n            return num * 1000000\n        if val == 7:\n            return num * 10000000\n        if val == 8:\n            return num * 100000000\n        if val == 9:\n            return num * 1000000000\n        return num * 100000000000000\n\n    return sorted_array(arr)\n\ninput = [1, 5, 2, 3, 4]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(n):\n        return bin(n)[2:]\n    def num_1s_in_binary(n):\n        return sum(1 for _ in binary(n))\n\n    # step 1: sort the array according to number of ones\n    # (and for equal number of ones, sort by decimal value)\n    arr = sorted(arr, key=lambda n: num_1s_in_binary(n))\n\n    # step 2: add zeros for leading zeroes\n    # (for example, the binary representation of 2 is \"10\", so\n    # the binary representation of 3 is \"0011\")\n    while True:\n        leading_zeros = 0\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                leading_zeros += 1\n                break\n        arr = arr[leading_zeros:] + [0] * leading_zeros\n        if len(arr) == 0:\n            break\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] < arr[j]:\n                return False\n            if (arr[i] > arr[j]) and (arr[i] == arr[j]):\n                if int(str(arr[i]), 2) > int(str(arr[j]), 2):\n                    return False\n                elif int(str(arr[i]), 2) == int(str(arr[j]), 2):\n                    if str(arr[i]) > str(arr[j]):\n                        return False\n                    else:\n                        return True\n\n    return True", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key = lambda x: (x >> 1, x & 1), reverse = True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_sort(a):\n        return [int(''.join(i)[::-1]) for i in zip(*[iter(bin(x))] * 2)]\n\n    def number_of_1(a):\n        return sum(i for i, x in enumerate(bin(int(a))) if x == '1')\n\n    return sorted(arr, key=number_of_1, reverse=False)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(map(int, arr))\n    for _ in range(len(arr)):\n        for i in range(1 << len(arr)):\n            if (arr[i] & i) == 0:\n                arr[i] = arr[i] >> i\n                break\n        else:\n            break\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key = lambda x: int(0.01 * sum(int(i) for i in bin(x)[2:].zfill(4))))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def is_even_number(n):\n        return n % 2 == 0\n\n    def is_even_number_integer(n):\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n\n    def count_ones(n):\n        count = 0\n        if n < 0:\n            return 0\n        for i in range(0, n):\n            if n % 2 == 0:\n                count += 1\n            n = n / 2\n        return count\n\n    def binary(n):\n        bits = []\n        if n < 0:\n            return \"\"\n        while n > 0:\n            bits.insert(0, str(n % 2))\n            n = n / 2\n        return \"\".join(bits)\n\n    def find_difference(a1, a2):\n        for i in range(len(a1)):\n            if a1[i] > a2[i]:\n                return a2[i] - a1[i]\n            else:\n                return 0\n\n    def print_array(arr):\n        print(arr)\n\n    def read_array(arr):\n        for i in range(len(arr)):\n            arr[i] = int(input())\n\n    def bubble_sort(arr, step_size):\n        for i in range(0, len(arr)):\n            for j in range", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return arr\n    return sorted(\n        arr,\n        key=lambda x: num_ones(binary_to_number(x)),\n        reverse=True\n    )", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(num):\n        \"\"\"\n        Calculate the number of ones in a number.\n        >>> count_ones(0)\n        0\n        >>> count_ones(-1)\n        0\n        >>> count_ones(1)\n        1\n        >>> count_ones(2)\n        1\n        >>> count_ones(3)\n        1\n        >>> count_ones(4)\n        2\n        \"\"\"\n        count = 0\n        for i in range(len(str(num))):\n            if str(num)[i] == '1':\n                count += 1\n        return count\n\n    def find_binary(num):\n        \"\"\"\n        Binary representation of a number.\n        >>> find_binary(0)\n        '0b0'\n        >>> find_binary(1)\n        '0b1'\n        >>> find_binary(2)\n        '0b10'\n        >>> find_binary(3)\n        '0b11'\n        >>> find_binary(4)\n        '0b100'\n        >>> find_binary(5)\n        '0b101'\n        >>> find_binary(6)\n        '0b110'\n        \"\"\"\n        return bin(num)\n\n    def get_str(num):\n        \"\"\"\n        Convert a number to string in binary format.\n        >>> get_str(0)\n        '0'\n        >>> get_str(1)\n        '1'\n        >>> get_str(2", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def binary(n):\n        i = 0\n        while n:\n            n, r = divmod(n, 2)\n            yield r\n            i += 1\n\n    for x in arr:\n        arr = sorted(arr, key=lambda y: (bin(int(x))).count('1'), reverse=True)\n        if arr[0] == x:\n            return arr\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    import copy\n\n    def binary_notation(num):\n        \"\"\"\n        Converts a number to its binary representation\n        :param num: Number to be converted\n        :return: A string of the binary representation of the number\n        \"\"\"\n        temp = bin(num)[2:]\n        return temp.rjust(len(temp), '0')\n\n    def dec2binary(num):\n        \"\"\"\n        Converts decimal number to binary representation\n        :param num: Number to be converted\n        :return: A string of the binary representation of the number\n        \"\"\"\n        return bin(num)\n\n    # Input validation\n    arr = copy.deepcopy(arr)\n    try:\n        for i in arr:\n            if i < 0:\n                raise ValueError(\"Only positive numbers allowed\")\n    except ValueError:\n        print(\"Invalid input. Check again\")\n        return sort_array(arr)\n\n    # Convert the array to its binary representation and sort it\n    sorted_binary_arr = []\n    for i in arr:\n        temp = dec2binary(i)\n        sorted_binary_arr.append(binary_notation(temp))\n\n    # Convert back to decimal and sort according to the number of 1's\n    sorted_dec_arr = []\n    for i in sorted_binary_arr:\n        temp = int(i, 2)\n        sorted_dec_arr.append", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = arr[::-1]\n    new_list = []\n\n    for number in arr:\n        binary = bin(number)[2:].zfill(8)\n\n        if binary == \"0b\":\n            new_list.append(number)\n            continue\n\n        count = 0\n        for bit in binary:\n            if bit == \"1\":\n                count += 1\n\n        if count < len(binary):\n            new_list.append(number)\n\n        else:\n            new_list.append(number)\n\n    return new_list[::-1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort(arr):\n        for i in range(0, len(arr)):\n            for j in range(0, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        arr.sort()\n        return True\n    return sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: int(len(bin(x)[2:])) if x > 0 else 0)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    binary = {0: 1, 1: 0, 2: 1, 3: 0, 4: 1, 5: 0, 6: 1, 7: 0, 8: 1, 9: 0, 10: 1, 11: 0, 12: 1, 13: 0, 14: 1, 15: 0}\n    decimal = {0: 10, 1: 11, 2: 12, 3: 13, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22, 13: 23, 14: 24, 15: 25, 16: 26, 17: 27, 18: 28, 19: 29, 20: 30, 21: 31, 22: 32, 23: 33, 24: 34, 25: 35, 26: 36, 27: 37, 28: 38, 29: 39, 30: 40, 31: 41, 32: 42, 33: 43, 34: 44, 35: 45, 36: 46, 37: 47, 38: 48, 39: 49, 40: 50, 41: 51, 42: 52, 43: 53, 44: 54, 45: 55, 46: 56, 47: 57, 48: 58, 49: 59, 50: 60, 51: 61, 52: 62, 53: 63, 54: 64, 55: 65, 56", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def digits(num):\n        \"\"\"\n        Given an integer, returns list of digits.\n        >>> digits(6)\n        (0, 6)\n        >>> digits(2)\n        (0, 2)\n        >>> digits(-4)\n        (0, 4)\n        >>> digits(-4.7)\n        (0, 4, 7)\n        >>> digits(-2)\n        (0, 2)\n        >>> digits(4.7)\n        (0, 4, 7)\n        \"\"\"\n        return list(map(int, str(num).split('.')[0].split(' ')))\n    def bin_digits(num):\n        \"\"\"\n        Given an integer, returns list of binary digits.\n        >>> bin_digits(6)\n        (0, 0, 0, 0, 1)\n        >>> bin_digits(2)\n        (0, 0, 1)\n        >>> bin_digits(-4)\n        (0, 0, 0, 1)\n        >>> bin_digits(-4.7)\n        (0, 0, 0, 0, 1, 0, 0, 0)\n        >>> bin_digits(-2)\n        (0, 0, 1)\n        >>> bin_digits(4.7)\n        (0, 0, 0, 0, 0, 0, 1, 0, 0", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    i, j = 0, len(arr)-1\n    while i < j:\n        while arr[i] < 0 and i < j:\n            i += 1\n        while arr[j] >= 0 and i < j:\n            j -= 1\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        num = int(num)\n        count = 0\n        while num:\n            num, r = divmod(num, 2)\n            count += r\n        return count\n    def compare(a, b):\n        if count_ones(a) < count_ones(b):\n            return -1\n        elif count_ones(a) == count_ones(b):\n            return 0\n        else:\n            return 1\n    return sorted(arr, cmp=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    temp = [arr[i] for i in range(len(arr))]\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if int(temp[i]) > int(temp[j]):\n                temp[i], temp[j] = temp[j], temp[i]\n\n    return temp", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # count number of ones in each integer in the array\n    bin_arr = [bin(i).count('1') for i in arr]\n\n    # sort based on number of ones in ascending order\n    sorted_bin_arr = sorted(bin_arr)\n\n    # sort based on decimal value for similar number of ones\n    # note that any integer with no ones will be sorted to last element\n    sorted_dec_arr = sorted([i for i in sorted_bin_arr if i])\n\n    # convert the final array to int and return it\n    return [int(i) for i in sorted_dec_arr]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: 2**len(bin(x)) - 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # write your code here\n    # returns sorted array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key = lambda num: num.count(1) * num)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_sort(arr):\n        \"\"\"\n        Binary sort an array by using count number of ones in their binary representation\n        :param arr: the array to sort\n        :return: the sorted array\n        \"\"\"\n        assert len(arr) > 0, \"Input array cannot be empty\"\n        arr_copy = copy.deepcopy(arr)\n        arr_copy.sort(key=lambda x: sum([int(num) for num in bin(x)[2:]]))\n        return arr_copy\n    def decimal_sort(arr):\n        \"\"\"\n        Decimal sort an array by using their decimal representation\n        :param arr: the array to sort\n        :return: the sorted array\n        \"\"\"\n        assert len(arr) > 0, \"Input array cannot be empty\"\n        arr_copy = copy.deepcopy(arr)\n        arr_copy.sort(key=lambda x: int(str(x)[2:]))\n        return arr_copy\n\n    arr = arr\n    if len(arr) <= 0:\n        return arr\n    if all(str(arr[0])[2:] == \"0\"):\n        return decimal_sort(arr)\n    else:\n        return binary_sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def split_and_sort(arr):\n        for i in range(1, len(arr)):\n            arr[i] = (arr[i] << 1) | arr[i - 1]\n        arr = arr[::-1]\n        return arr\n\n    sorted = split_and_sort(arr)\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Get all unique numbers of the input array\n    # nums is a list of list of integers\n    nums = []\n    for num in arr:\n        nums.append(list(bin(num)))\n\n    # Create a dictionary with the number of ones in binary representation as the key\n    # and the decimal value as the value\n    dict = {}\n    for num in nums:\n        for i in num:\n            if i == \"1\":\n                dict[i] += 1\n\n    # Use the dictionary to order the input array\n    # Note: Must use the dictionary as a key because the dictionary does not support order\n    #       By using the dictionary as a key, you are basically order the input array\n    result = []\n    for num in nums:\n        key = dict[num]\n        val = 0\n        for i in num:\n            val += i * 2 ** key\n        result.append(val)\n\n    return result\n\n\narr = [1, 5, 2, 3, 4, 8, 9, 5, 9, 6, 9, 10, 9]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for _ in range(len(arr)):\n        arr[_], arr[len(arr) - 1 - _] = arr[len(arr) - 1 - _], arr[_]\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(n):\n        \"\"\"\n        Count the number of ones in binary representation of `n`\n        >>> count_ones(2)\n        1\n        >>> count_ones(3)\n        1\n        >>> count_ones(100)\n        2\n        \"\"\"\n        return bin(n).count('1')\n\n    def count_ones_triplets(n):\n        \"\"\"\n        Count the number of ones in binary representation of `n` and return its\n        decimal representation\n        >>> count_ones_triplets(2)\n        1\n        >>> count_ones_triplets(3)\n        1\n        >>> count_ones_triplets(100)\n        2\n        \"\"\"\n        return count_ones(n) * 3 ** (int(log(n, 2)) - 1)\n\n    def sort_loosely(a, b):\n        \"\"\"\n        Sort based on decimal value\n        >>> sort_loosely(1, 2)\n        1\n        >>> sort_loosely(1, 4)\n        1\n        >>> sort_loosely(1, 0)\n        1\n        >>> sort_loosely(1, -5)\n        1\n        \"\"\"\n        return count_ones_triplets(a) - count_ones_triplets(b)\n\n    def sort_closely", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    for i in range(len(arr)-1, 0, -1):\n        for j in range(i, 0, -1):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    num = len(arr)\n    if num == 1:\n        return arr\n    ret = []\n    for i in range(num):\n        cur = arr[i]\n        if cur < 0:\n            return []\n        num1 = 0\n        while cur!= 0:\n            cur, num1 = divmod(cur, 2)\n        ret.append(num1)\n\n    arr = list(reversed(ret))\n    arr.sort()\n    ret = []\n    for i in range(num):\n        cur = arr[i]\n        num2 = 0\n        while cur!= 0:\n            cur, num2 = divmod(cur, 2)\n        ret.append(num2)\n    return ret", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def helper(arr):\n        \"\"\"\n        This is a helper function to check whether a binary number is greater than\n        another binary number.\n        It must be implemented like this:\n        >>> helper([0, 0, 1]) == 0\n        >>> helper([0, 1, 1]) == 1\n        >>> helper([0, 0, 0]) == 2\n        \"\"\"\n        count = 0\n        for i in range(len(arr) - 1, -1, -1):\n            if arr[i] == 1:\n                count += 1\n            else:\n                break\n        return count\n\n    arr.sort(key=helper, reverse=True)\n\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def comp(a, b):\n        if a[0] == b[0]:\n            return a[1] - b[1]\n        else:\n            return a[0] - b[0]\n    return sorted(arr, key=comp, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    length = len(arr)\n\n    # This is to prevent the program from crashing in case of all 0s\n    if all(x == 0 for x in arr):\n        return arr\n\n    # This is to prevent the program from crashing in case of all 1's\n    if all(x == 1 for x in arr):\n        return arr\n\n    # This is to prevent the program from crashing in case of only 1 element\n    if len(arr) == 1:\n        return arr\n\n    # This is to prevent the program from crashing in case of only 2 elements\n    if len(arr) == 2:\n        return arr\n\n    for i in range(0, length):\n        for j in range(0, length):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"arr is not a list\")\n\n    for i in range(len(arr)):\n        arr[i] = bin(arr[i])\n\n    arr = sorted(arr, key=lambda x: int(x, 2))\n    arr = [int(x, 2) for x in arr]\n    arr = sorted(arr, key=lambda x: x)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: int(bin(x)[2:].count('1')), reverse=True)\n\ninput = [1, 5, 2, 3, 4]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        \"\"\"\n        Function to count the number of 1s in the binary representation of\n        a number.\n        \"\"\"\n        return bin(num).count('1')\n\n    def count_decimal(num):\n        \"\"\"\n        Function to count the number of decimal places\n        \"\"\"\n        return len(str(num))\n\n    def get_order(num):\n        \"\"\"\n        Function to get the order of the number.\n        \"\"\"\n        ones = count_ones(num)\n        decimal = count_decimal(num)\n        return ones, decimal\n\n    # Loop through the array\n    sorted_nums = []\n    for num in arr:\n        ones, decimal = get_order(num)\n        # If the current number is smaller than the previous one, then\n        # insert it after the previous number\n        if sorted_nums[-1][1] <= decimal:\n            sorted_nums.insert(sorted_nums.index(sorted_nums[-1]) + 1, [num, ones, decimal])\n        # If the current number is greater than the previous one, then\n        # insert it before the previous number\n        else:\n            sorted_nums.insert(sorted_nums.index(sorted_nums[-1]) - 1, [num, ones, decimal])\n\n    return sorted_nums\n\n\narr =", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def number_of_ones(x):\n        return sum(int(i) == 1 for i in bin(x)[2:])\n\n    return [int(num) for num, cnt in sorted(zip(arr, map(number_of_ones, arr)), key=lambda x: x[1])]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    \"\"\"\n    You can use any language. Please write the sorting logic in your\n    code and not in the comment section.\n\n    The sort_array function takes one argument, which is an array of non-negative\n    integers. It returns a sorted array of the same type as the argument.\n\n    The solution must not have any external dependencies (such as\n    libraries or frameworks).\n    \"\"\"\n    arr = sorted(arr, key=lambda x: sum(int(y) for y in bin(x)[2:]))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_sort(array):\n        array.sort(key=lambda x: int(str(x)[::-1].count('1'), 2))\n        return array\n\n    def decimal_sort(array):\n        array.sort(key=lambda x: int(str(x)[::-1].count('1'), 2), reverse=True)\n        return array\n\n    # Use binary sort if it is faster\n    if len(arr) <= 8:\n        return binary_sort(arr)\n\n    # Use decimal sort if it is faster\n    return decimal_sort(arr)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    assert(len(arr) > 0)\n\n    def calc_count(num):\n        count = 0\n        while num > 0:\n            count += int(num % 2)\n            num //= 2\n        return count\n\n    def cmp_num(num1, num2):\n        count1 = calc_count(num1)\n        count2 = calc_count(num2)\n\n        if count1 < count2:\n            return -1\n        elif count1 > count2:\n            return 1\n        else:\n            return 0\n\n    return sorted(arr, cmp=cmp_num)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    def count(arr):\n        zero_count = len(arr) - sum(arr)\n        one_count = sum([1 for x in arr if x == 1])\n        return zero_count, one_count\n\n    arr = list(arr)\n    zero_count, one_count = count(arr)\n\n    binary_list = []\n    for x in arr:\n        if x == 1:\n            binary_list.append(1)\n        else:\n            binary_list.append(0)\n\n    arr.append(zero_count)\n    arr.append(one_count)\n\n    arr.sort(key=lambda x: x[binary_list.index(1)])\n    arr.sort(key=lambda x: x[binary_list.index(0)])\n\n    return arr[::-1]\n\n\narr = sort_array([-2, -3, -4, -5, -6])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    import itertools\n    n = len(arr)\n    if n == 0:\n        return arr\n    count = itertools.count()\n    unique = itertools.combinations_with_replacement(range(n), 2)\n    for combination in unique:\n        m = 0\n        for digit in arr[combination[0]:combination[1]]:\n            m += (1 << digit)\n        yield arr[combination[0]], m", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    a = []\n    b = []\n    c = []\n    for n in arr:\n        # Make sure if n is 0 it won't be added into a,b,c\n        if n == 0:\n            continue\n        if n % 2 == 0:\n            b.append(n)\n        else:\n            a.append(n)\n    for n in b:\n        c.append(a.pop(0))\n    # The last element of b is the last element of c, so we don't\n    # have to pop it\n    for n in c:\n        b.append(a.pop(0))\n    # Merge arr and a, then merge b and c\n    return b + a + c", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_search(arr, value):\n        if len(arr) == 0:\n            return False\n\n        lo = 0\n        hi = len(arr) - 1\n\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if arr[mid] < value:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n\n        if arr[lo] == value:\n            return True\n        else:\n            return False\n\n    arr = [int(x) for x in arr]\n    if len(arr) == 0:\n        return arr\n\n    arr.sort()\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # TODO: Implement this Kata and check your implementation with the test cases.\n\n    # Here is the sorting function, the idea is to binary sort the numbers, but we do not want the numbers with similar number of ones, so we need to make some adjustment.\n    def binary_sort(arr, pos):\n        \"\"\"\n        sort an array of non-negative integers according to\n        number of ones in their binary representation\n        \"\"\"\n        if len(arr) == 0:\n            return\n        elif pos == len(arr) - 1:\n            return\n\n        # find the number of ones in the binary representation of arr[pos]\n        ones = count_ones(arr[pos])\n\n        # find the smallest number which has the same number of ones and bigger number\n        pos1 = pos + 1\n        while pos1 < len(arr) and ones == count_ones(arr[pos1]):\n            pos1 += 1\n\n        # find the smallest number which has the same number of ones but smaller number\n        pos2 = pos\n        while pos2 > 0 and ones == count_ones(arr[pos2 - 1]):\n            pos2 -= 1\n\n        # replace arr[pos] with arr[pos1] or arr[pos2]\n        arr[pos] = arr[pos1] if pos1 < pos2 else arr[pos", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    input_arr = list(map(int, input().split()))\n    arr.sort()\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: binary(x))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def num_ones(num):\n        \"\"\"\n        Returns the number of ones in binary representation of number `num`\n\n        >>> num_ones(1)\n        1\n        >>> num_ones(2)\n        1\n        >>> num_ones(3)\n        1\n        >>> num_ones(5)\n        2\n        >>> num_ones(7)\n        2\n        >>> num_ones(8)\n        3\n        \"\"\"\n\n        return int(bin(num).count('1'))\n\n    def num_digits(num):\n        \"\"\"\n        Returns the number of digits in the decimal value of number `num`\n\n        >>> num_digits(0)\n        0\n        >>> num_digits(1)\n        1\n        >>> num_digits(9)\n        1\n        >>> num_digits(10)\n        2\n        >>> num_digits(100)\n        2\n        \"\"\"\n\n        return int(decimal.Decimal(str(num)).digits)\n\n    # For numbers having same number of ones, sort them based on their decimal value\n    # This can be done using sort() function\n    return sorted(arr, key=lambda num: (num_ones(num), num_digits(num)))\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return arr\n    arr.sort(key=lambda x: int(bin(x).count('1')) + x)\n    arr.sort(key=lambda x: int(bin(x)[2:], 2) + x)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    for i in arr:\n        cnt = 0\n        for j in str(i):\n            cnt += 1 if j == '1' else 0\n        result.append(cnt)\n    return sorted(result)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if len(arr) == 0:\n        return arr\n\n    mid = len(arr) // 2\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        return [arr[0], arr[1]]\n\n    l1 = []\n    l2 = []\n\n    # Assign numbers less than mid in ascending order.\n    for number in arr[:mid]:\n        l1.append(number)\n\n    # Assign numbers greater than mid in ascending order.\n    for number in arr[mid:]:\n        l2.append(number)\n\n    l1.sort()\n    l2.sort()\n\n    l1.extend(l2)\n\n    return l1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def bin(n):\n        return str(bin(n))\n\n    def partition(arr, start, end, bitCount):\n        if start >= end:\n            return\n        arr[end], arr[start] = arr[start], arr[end]\n        partition(arr, start + 1, end, bitCount)\n        partition(arr, start + 1, end, bitCount)\n\n    bitCount = 0\n    for i in arr:\n        bitCount += len(bin(i)[2:])\n    for i in arr:\n        partition(arr, 0, len(arr) - 1, bitCount)\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        return arr\n\n    sorted_arr = arr[::-1]  # sort in reverse order\n\n    while len(sorted_arr) > 1:\n        max_val = -1\n        max_idx = 0\n\n        for idx, val in enumerate(sorted_arr):\n            if val > max_val:\n                max_val = val\n                max_idx = idx\n\n        if max_val == 0:\n            sorted_arr = sorted_arr[:max_idx] + sorted_arr[max_idx:]\n        else:\n            sorted_arr[max_idx], sorted_arr[0] = sorted_arr[0], sorted_arr[max_idx]\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    temp = []\n    for i in arr:\n        if temp:\n            if len(temp) == len(arr):\n                break\n\n            binary = bin(i)[2:]\n            binary = list(binary)\n            for j in temp:\n                if len(binary) == len(bin(j))[2:]:\n                    break\n            if len(binary) > len(bin(j))[2:]:\n                temp = [j, i]\n            elif len(binary) < len(bin(j))[2:]:\n                temp.append(i)\n        else:\n            temp.append(i)\n    return temp", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                pass\n            else:\n                if arr[i] < arr[j]:\n                    if 0 in arr[j]:\n                        if arr[i] > arr[j] + 1:\n                            arr[i], arr[j] = arr[j], arr[i]\n                            print(arr[i], arr[j])\n                        else:\n                            arr[j], arr[i] = arr[i], arr[j]\n                            print(arr[i], arr[j])\n\n                            # arr[i], arr[j] = arr[j], arr[i]\n                            # print(arr[i], arr[j])\n                else:\n                    if 0 in arr[i]:\n                        if arr[i] > arr[i] + 1:\n                            arr[i], arr[j] = arr[j], arr[i]\n                            print(arr[i], arr[j])\n                        else:\n                            arr[j], arr[i] = arr[i], arr[j]\n                            print(arr[i], arr[j])\n\n                            # arr[i], arr[j] = arr[j], arr[i]\n                            # print(arr[i], arr[j])\n\n    return arr</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # if a is a list then sort(a) sorts the list\n    # if a is not a list then it is string\n    if isinstance(arr, list):\n        return [value for value in arr]\n    else:\n        # first convert to list and then sort\n        return sorted([int(value) for value in arr])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # use a defaultdict(list) to keep track of binary representations of numbers\n    d = defaultdict(list)\n\n    for num in arr:\n        d[num].append(bin(num))\n\n    sorted_nums = sorted(d.values(), key=len, reverse=True)\n    # split binary representation and assign sorted numbers\n    for num in arr:\n        num = int(num)\n        bin_num = list(d[num])[0]\n        num = int(bin_num, 2)\n        sorted_nums.append(num)\n\n    return sorted_nums", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    import math\n\n    def sort_list(l):\n        l.sort(key=lambda x: int(x)*10**math.ceil(math.log10(x)))\n        return l\n\n    def count_ones(i):\n        count = 0\n        while i > 0:\n            i >>= 1\n            count += 1\n        return count\n\n    return sort_list(map(lambda x: count_ones(x), arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    arr = list(map(int, arr))\n    arr.sort(key=lambda x: get_number_ones(str(x)))\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_representation(number):\n        \"\"\"\n        Returns the binary representation of a given integer number.\n\n        :param number: number to be converted to binary\n        :type number: int\n        :return: binary representation of the given number\n        :rtype: str\n        \"\"\"\n        num = bin(number)\n        return num[2:]\n\n    def number_of_ones(number):\n        \"\"\"\n        Returns the number of ones in the binary representation of a given integer number.\n\n        :param number: number to be converted to binary\n        :type number: int\n        :return: number of ones in the binary representation of the given number\n        :rtype: int\n        \"\"\"\n        num = bin(number)\n        return len(num[2:])\n\n    def compare(number_1, number_2):\n        \"\"\"\n        Compares two integers and returns True if the number of ones in their binary\n        representations are equal and the decimal representation of number_1 is\n        greater than the decimal representation of number_2, otherwise returns False.\n\n        :param number_1: first number to be compared\n        :param number_2: second number to be compared\n        :return: True if number_1 is greater than number_2, otherwise False\n        :rtype: bool\n        \"\"\"\n        if number_of_ones(number_1) == number_of_ones(number_2):\n            return number_1 > number_2\n        return", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _sum(arr):\n        return reduce(lambda x, y: x + y, arr, 0)\n    def _number_ones(arr):\n        return reduce(lambda x, y: x + y, arr, 0)\n\n    arr = list(map(int, arr))\n    if len(arr) == 0:\n        return []\n\n    sorted_list = []\n    current = arr[0]\n    sorted_list.append(current)\n\n    for i in arr[1:]:\n        j = _number_ones(i)\n        if j == current:\n            sorted_list.append(i)\n        else:\n            if j > current:\n                sorted_list.append(i)\n                current = j\n\n    return sorted_list", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def ones_to_dec(num):\n        \"\"\"\n        Convert a number to decimal based on number of ones in the binary representation\n\n        >>> ones_to_dec(0)\n        0\n        >>> ones_to_dec(1)\n        1\n        >>> ones_to_dec(2)\n        2\n        >>> ones_to_dec(4)\n        4\n        >>> ones_to_dec(8)\n        8\n        >>> ones_to_dec(10)\n        10\n        \"\"\"\n        return num + 2 ** (num.bit_length() - 1)\n\n    def ones_to_bin(num):\n        \"\"\"\n        Convert a number to binary based on number of ones in the binary representation\n\n        >>> ones_to_bin(0)\n        0\n        >>> ones_to_bin(1)\n        1\n        >>> ones_to_bin(2)\n        10\n        >>> ones_to_bin(4)\n        100\n        >>> ones_to_bin(8)\n        1000\n        >>> ones_to_bin(10)\n        1010\n        \"\"\"\n        return str(bin(num + 1))\n\n    def decimal_to_bits(num):\n        \"\"\"\n        Convert a decimal number to binary\n\n        >>> decimal_to_bits(0)\n        0\n        >>> decimal_to_bits(1)\n        1\n        >>> decimal_to_bits(2)\n        10\n        >>> decimal_to_bits(4)\n        100\n        >>> decimal_to_bits(8)\n        1000\n        >>> decimal_to_bits(", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr) - i):\n            if arr[j] < arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr.pop(i)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _count_ones(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    def _sort_arr(arr):\n        arr.sort(key=lambda x: _count_ones(x))\n        arr.sort(key=lambda x: int(x))\n\n    _sort_arr(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: len(re.findall('.', bin(x))))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted(arr, key=lambda x: (-(bin(x).count('1') * (2**x)), x))\n\nimport sys", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def set_decimal_value(arr):\n        \"\"\"\n        Utility function to set decimal value for each integer in arr.\n        \"\"\"\n        arr = arr + [-1]\n        arr = sorted(arr, reverse=True)\n        arr = [x for x in arr if x > 0]\n        return [arr[i] for i in range(len(arr))]\n\n    arr = set_decimal_value(arr)\n    arr.append(0)\n    arr = sorted(arr, reverse=True)\n    arr = [x for x in arr if x > 0]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, list):\n        raise ValueError('Array should be of type list')\n\n    if not arr:\n        return []\n    max_len = max(map(len, arr))\n\n    result = []\n    for i in range(len(arr)):\n        result.append([])\n\n    for i in range(len(arr)):\n        for j in range(max_len):\n            if arr[i] & (1 << j):\n                result[i].append(1)\n            else:\n                result[i].append(0)\n    result.sort(key=lambda x: (sum(map(lambda y: y == 1, x)), 0 if sum(map(lambda y: y == 1, x)) == 0 else int(''.join(map(str, x)))))\n    return result\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x == 0)\n    arr = sorted(arr, key=lambda x: int(''.join(str(i) for i in bin(x)[2:]), 2))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda n: n and sum(2**i for i in range(len(str(n)))) or -n)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(map(int, arr))\n    i = j = k = 0\n    while i < len(arr):\n        while j < len(arr) and arr[i] == arr[j]:\n            j += 1\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        while j < len(arr) and arr[i]!= arr[j]:\n            j += 1\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        while j < len(arr) and arr[i] == arr[j]:\n            j += 1\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n    arr = list(map(int, str(arr)))  # convert to integer to sort by binary\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: int(''.join(bin(x)[2:]).count('1')))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def digit(x):\n        \"\"\"\n        Convert an integer to a list of digits.\n\n        >>> digit(1)\n        [1]\n        >>> digit(5)\n        [5]\n        >>> digit(10)\n        [0, 1, 0, 0]\n        >>> digit(17)\n        [2, 3, 0, 0]\n        \"\"\"\n        # convert integer to a list of digits\n        return str(x).zfill(len(str(x)))\n\n    def no_of_ones(digit_str):\n        \"\"\"\n        Calculate number of ones in the binary representation of integer\n\n        >>> no_of_ones([1])\n        1\n        >>> no_of_ones([5])\n        0\n        >>> no_of_ones([0])\n        0\n        >>> no_of_ones([2])\n        1\n        >>> no_of_ones([10])\n        2\n        >>> no_of_ones([0])\n        0\n        >>> no_of_ones([4])\n        1\n        >>> no_of_ones([0])\n        0\n        \"\"\"\n        total = 0\n        for digit in digit_str:\n            if digit == 1:\n                total += 1\n        return total\n\n    def sort_func(x, y):\n        \"\"\"\n        Sort the list of integers.\n\n        >>> sort_func(1, 5)\n        True\n        >>> sort_func(0, 1)\n        True\n        >>> sort_func(2, 5)\n        True\n        >>> sort_func", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def ternarySearch(array, index, left, right, result):\n        # if left == right:\n        #     return None\n        mid = (left + right) // 2\n        if array[mid] > result:\n            return ternarySearch(array, index, left, mid - 1, result)\n        elif array[mid] < result:\n            return ternarySearch(array, index, mid + 1, right, result)\n        elif array[mid] == result:\n            return mid\n        else:\n            return None\n\n    # convert list to tuple\n    arr = tuple(arr)\n    # sort\n    arr = sorted(arr, key=lambda x: (0 if x < 0 else 1) + sum(2 ** i for i in (x >> i) & 1 for i in range(1, len(x) + 1)))\n    # convert tuple to list\n    arr = list(arr)\n    # ternary search\n    return [arr[ternarySearch(arr, i, 0, len(arr), x)] for i, x in enumerate(arr)]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def counting_sort(arr):\n        counts = [0 for _ in arr]\n        for n in arr:\n            counts[n] += 1\n        return [counts[n] for n in arr]\n\n    def binary_sort(arr):\n        return [int(\"\".join(bin(n)[2:]), 2) for n in arr]\n\n    def decimal_sort(arr):\n        return [int(\"\".join(str(n)[2:]), 2) for n in arr]\n\n    if isinstance(arr, list):\n        return binary_sort(sort([binary_sort(n) for n in arr]))\n    else:\n        return decimal_sort(sort([decimal_sort(n) for n in arr]))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # @include\n    def compare(a, b):\n        return b.count(1) - a.count(1) or a - b\n\n    def count_ones(num):\n        result = 0\n        while num!= 0:\n            num >>= 1\n            result += 1\n        return result\n\n    return sorted(arr, key=compare, reverse=True) \\\n        if count_ones(arr[0])!= count_ones(arr[-1]) else sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_of_ones(number):\n        \"\"\"\n        Count number of ones in binary representation of number\n        \"\"\"\n        res = 0\n        while number > 0:\n            res += (number & 1) >> 0\n            number >>= 1\n        return res\n\n    def count_of_decimal(number):\n        \"\"\"\n        Count number of decimal digits in number\n        \"\"\"\n        res = 0\n        while number > 0:\n            res += 1\n            number /= 10\n        return res\n\n    def key_for_sorting(number):\n        \"\"\"\n        Returns a key for sorting in form (number_of_ones, number_of_decimal)\n        \"\"\"\n        return (count_of_ones(number), count_of_decimal(number))\n\n    return sorted(arr, key=key_for_sorting, reverse=False)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _number_of_ones(int_val):\n        \"\"\"\n        Number of ones in binary representation of int_val.\n        >>> _number_of_ones(1)\n        1\n        >>> _number_of_ones(0)\n        0\n        >>> _number_of_ones(7)\n        1\n        >>> _number_of_ones(8)\n        1\n        \"\"\"\n        return int_val and (len(bin(int_val)) - 2) or 0\n\n    def _compare(x, y):\n        \"\"\"\n        Compares two integers x and y based on\n        number of ones in binary representation of x and y.\n        >>> _compare(1, 2)\n        -1\n        >>> _compare(2, 1)\n        1\n        >>> _compare(1, 0)\n        1\n        >>> _compare(0, 1)\n        -1\n        >>> _compare(0, 0)\n        0\n        \"\"\"\n        if x < y:\n            return -1\n        elif x > y:\n            return 1\n        else:\n            return 0\n\n    return sorted(arr, cmp=_compare)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def _sort_binary(a):\n        if not a:\n            return []\n        return sorted(a, key=lambda x: int(''.join(str(y) for y in x), 2))\n\n    def _sort_decimal(a):\n        if not a:\n            return []\n        return sorted(a, key=lambda x: int(x))\n\n    if not arr:\n        return arr\n\n    return _sort_binary(_sort_decimal(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: count_ones(x))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(x, y):\n        if x == y:\n            return 0\n        if x > y:\n            return 1\n        return -1\n\n    # list with index and number of ones\n    lst = [[i, 0 for i in range(len(arr))] for _ in range(len(arr))]\n    for i, x in enumerate(arr):\n        lst[i][1] = 0\n        for j in range(0, len(x)):\n            lst[i][1] += x[j]\n        # lst[i][1] = lst[i][1] / len(x) * 2\n        if lst[i][1] > lst[i + 1][1]:\n            lst[i + 1][1] = lst[i][1]\n            lst[i + 1][0] = i + 1\n\n    for i in range(0, len(lst)):\n        for j in range(0, len(lst)):\n            if i == j:\n                continue\n            if lst[i][1] > lst[j][1]:\n                lst[i][1] = lst[j][1]\n                lst[i][0] = j\n    return lst", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def nth_bit(num):\n        return num & (1 << (n - 1))\n\n    def count_ones(num):\n        count = 0\n        for bit in reversed(range(len(str(num)))):\n            if nth_bit(num) & (1 << bit):\n                count += 1\n        return count\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        middle = len(arr) // 2\n        left = merge_sort(arr[:middle])\n        right = merge_sort(arr[middle:])\n        return merge(left, right)\n\n    def merge(left, right):\n        i = j = 0\n        result = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result\n\n    return merge_sort(arr)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def swap(a, b):\n        \"\"\"\n        Swap numbers a and b in the array\n        \"\"\"\n        c = a\n        a = b\n        b = c\n\n    def min1(arr):\n        \"\"\"\n        Find the minimum number having only one '1' in binary form\n        \"\"\"\n        min_1 = 99999999\n        for n in arr:\n            if n == 0:\n                continue\n\n            if int(bin(n).count('1')) == 1:\n                min_1 = min(min_1, n)\n        return min_1\n\n    def min2(arr):\n        \"\"\"\n        Find the minimum number having two '1' in binary form\n        \"\"\"\n        min_2 = 99999999\n        for n in arr:\n            if n == 0:\n                continue\n\n            if int(bin(n).count('1')) == 2:\n                min_2 = min(min_2, n)\n        return min_2\n\n    def max3(arr):\n        \"\"\"\n        Find the maximum number having only three '1' in binary form\n        \"\"\"\n        max_3 = 0\n        for n in arr:\n            if n == 0:\n                continue\n\n            if int(bin(n).count('1')) == 3:\n                max_3 = max(max_3, n)\n        return max_3\n\n    def max4(arr):", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    res = []\n    for n in arr:\n        res.append(sum(int(bin(n)[2:].zfill(i)) for i in range(len(bin(n)[2:]))))\n    res = sorted(res)\n    return [i for i in arr if int(res.index(i) * 2) + 1 == res.index(i)]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    one_sum = 0\n    for i in arr:\n        one_sum += 1 if i == 1 else 0\n\n    result = []\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == 1:\n            if result[-1] == 1:\n                result[-1] += 1\n            else:\n                result.append(0)\n        else:\n            if result[-1] == 0:\n                result.append(0)\n            else:\n                result[-1] += 1\n\n    return [int(i) for i in bin(one_sum)[2:]] + result\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = map(int, arr)\n    sorted_array = []\n    current_sum = 0\n    binary_arr = [int(n) for n in str(arr[0])]\n\n    for n in arr:\n        binary_arr.append(int(n))\n        current_sum += int(n)\n\n    while current_sum > 0:\n        for n in binary_arr:\n            if n == 1:\n                current_sum -= 1\n                sorted_array.append(current_sum)\n        binary_arr = [int(n) for n in str(current_sum)]\n        current_sum = 0\n\n    for n in sorted_array:\n        sorted_array[n] = int(n)\n\n    sorted_array = list(map(int, str(sorted_array)))\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key = lambda x: len(set(bin(x)[2:])) if x >= 0 else -x)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return arr\n    else:\n        return arr[sorted(map(lambda x: int(str(x)[::-1].count(\"1\")), arr))]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 1:\n        return arr\n    if len(arr) == 1:\n        return arr\n    sorted_binary_arr = []\n    sorted_dec_arr = []\n    current_idx = 0\n    last_idx = len(arr) - 1\n    while current_idx <= last_idx:\n        while current_idx <= last_idx and arr[current_idx] == 0:\n            current_idx += 1\n        while current_idx <= last_idx and arr[current_idx]!= 0:\n            if arr[current_idx] == 1:\n                sorted_binary_arr.append(arr[current_idx])\n            if arr[current_idx] % 2 == 1:\n                sorted_dec_arr.append(arr[current_idx])\n            current_idx += 1\n        current_idx += 1\n    binary_array = sorted(sorted_binary_arr, reverse=True)\n    dec_array = sorted(sorted_dec_arr, reverse=True)\n    return dec_array + binary_array\n\n\narr = [1, 0, 2, 3, 4]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: ((len(str(x).count(\"1\"))), int(str(x).replace(\"1\", \"10\")), x))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: sum(1 for _ in binary(x)))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    arr = sorted(arr, key=lambda x: len(bin(x).split('0b')[1]), reverse=False)\n    arr = sorted(arr, key=lambda x: int(x, 2))\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def one_to_one(num):\n        res = []\n        while num > 0:\n            res.append(num % 2)\n            num /= 2\n        return res\n\n    def bin_to_int(bin_str):\n        return sum(int(b) for b in bin_str)\n\n    def compare(num_1, num_2):\n        num_1 = bin_to_int(num_1)\n        num_2 = bin_to_int(num_2)\n        res = cmp(num_1, num_2)\n        if res == 0:\n            res = cmp(one_to_one(num_1), one_to_one(num_2))\n        return res\n\n    return sorted(arr, cmp=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if not arr:\n        return []\n\n    return sorted(arr, key=lambda x: sum(1 for _ in bin(x)) if x > 0 else int(str(abs(x))[2:]))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def _sort(arr, left, right):\n        # end if\n        if right - left == 1:\n            return arr[left], arr[right]\n        # end if\n        middle = left + (right - left) // 2\n        left = _sort(arr, left, middle)\n        right = _sort(arr, middle + 1, right)\n        return (left[0] + right[0], left[1], right[1])\n    # end def\n    return _sort(arr, 0, len(arr) - 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def _binary_repr(num):\n        return '{:08b}'.format(num)\n\n    def _compare_binary_repr(a, b):\n        a_repr = _binary_repr(a)\n        b_repr = _binary_repr(b)\n        a_num = int(a_repr, 2)\n        b_num = int(b_repr, 2)\n        return cmp(a_num, b_num)\n\n    def _compare_decimal_repr(a, b):\n        if a == b:\n            return 0\n        a_repr = '{0:.2f}'.format(a)\n        b_repr = '{0:.2f}'.format(b)\n        a_num = float(a_repr)\n        b_num = float(b_repr)\n        return cmp(a_num, b_num)\n\n    arr = arr.copy()\n    arr.sort(_compare_binary_repr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def merge(arr1, arr2):\n        res = []\n        i = 0\n        j = 0\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                res.append(arr1[i])\n                i += 1\n            else:\n                res.append(arr2[j])\n                j += 1\n        while i < len(arr1):\n            res.append(arr1[i])\n            i += 1\n        while j < len(arr2):\n            res.append(arr2[j])\n            j += 1\n        return res\n\n    def array_to_string(arr):\n        res = []\n        for elem in arr:\n            res.append(str(elem))\n        return res\n\n    def count_ones(str):\n        res = 0\n        for elem in str:\n            if elem == '1':\n                res += 1\n        return res\n\n    def sort_by_ones(arr):\n        res = []\n        for elem in arr:\n            res.append(count_ones(str(elem)))\n        return res\n\n    def sort_by_decimal(arr):\n        res = []\n        for elem in arr:\n            res.append(int(elem))\n        return res\n\n    def sort_by", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def num_ones(num):\n        bin_val = bin(num)[2:]\n        count = 0\n        for i in range(len(bin_val) - 1, -1, -1):\n            if bin_val[i] == '1':\n                count += 1\n        return count\n\n    # Convert the input array into a list of tuples of\n    # (value, number_of_ones).\n    # number_of_ones is the number of ones in the binary representation of the value.\n    input_array = list(zip(*sorted(list(zip(*arr))[::-1])))\n\n    # Iterate over the input array and sort the array according to number\n    # of ones.\n    result = []\n    for num, n in input_array:\n        if num == 0:\n            break\n        if num == -2:\n            # Special case for -2.\n            if n > 1:\n                result.append((n - 1, -2))\n                continue\n            result.append((n, -2))\n        elif num == -1:\n            # Special case for -1.\n            if n > 1:\n                result.append((n - 1, -1))\n                continue\n            result.append((n, -1))\n        else:\n            if n > 1:\n                result.append((n - 1, num))\n                continue\n            result.append((n,", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        return (b - a) if (b - a) == 0 else 1\n    def rec(a, n):\n        if n == len(a):\n            return\n        a.sort(cmp, reverse=True)\n        for i in range(n):\n            rec(a, n - 1)\n\n\n    arr = sorted(list(map(int, arr)), reverse=True)\n    rec(arr, len(arr) - 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    arr = arr.copy()\n    sorted = []\n    for i in range(0, len(arr)):\n        while len(arr[i]) == 0:\n            arr[i] = 1\n            arr[i] *= 2\n            if arr[i] > 0:\n                arr[i] -= 1\n        if len(arr[i]) > 0:\n            sorted.append(arr[i])\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_binary(n):\n        \"\"\"\n        Get binary value of a number.\n        \"\"\"\n        bin_str = \"\"\n        while n:\n            bin_str += str(n % 2)\n            n /= 2\n        return bin_str\n\n    def count_1s(n):\n        \"\"\"\n        Get count of 1s in the binary representation of a number.\n        \"\"\"\n        count = 0\n        for i in n:\n            count += 1 if i == 1 else 0\n        return count\n\n    arr = list(map(int, arr))\n\n    # if there are 0s in array, add 10^maxlen to each of them\n    # where maxlen is the largest length of binary representation of\n    # the numbers\n    if 0 in arr:\n        arr = [abs(x) + 10 ** max(len(get_binary(x)) - 1, 0) for x in arr]\n\n    # get count of 1s in each element of array\n    counts = [count_1s(x) for x in arr]\n\n    # sort array based on number of 1s in each number\n    arr = sorted(arr, key=lambda x: counts.index(x))\n\n    # if array contains numbers with same count of 1s, sort them based on\n    # decimal value\n    arr = sorted(", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda a: count_ones(a), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_repr(n):\n        if n == 0:\n            return '0'\n        else:\n            return str(bin(n)[2:])\n\n    def sort_by_number_of_ones(nums):\n        number_of_ones = 0\n        for n in nums:\n            number_of_ones += int(binary_repr(n))\n        return sorted(nums, key=lambda n: number_of_ones - int(binary_repr(n)))\n\n    def sort_by_decimal_value(nums):\n        decimal_values = []\n        for n in nums:\n            decimal_values.append(int(binary_repr(n), 2))\n        return sorted(nums, key=lambda n: decimal_values.index(int(binary_repr(n), 2)))\n\n    return sort_by_number_of_ones(arr) or sort_by_decimal_value(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    binary = []\n\n    for i in arr:\n        binary.append(bin(i)[2:])\n\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            result.append(len(binary[i:]))\n\n    result.sort()\n\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: count_ones(x), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        binary = bin(num)\n        return len(binary) - len(binary[1:])\n\n    def number_of_decimal_places(num):\n        binary = bin(num)\n        return len(binary) - len(binary[::-1])\n\n    def get_adjacent_number(num):\n        binary = bin(num)\n        for i, c in enumerate(binary[1:]):\n            if c == '1':\n                return num + 2 ** i\n        return num + 2 ** len(binary)\n\n    result = []\n    for num in arr:\n        result.append(get_adjacent_number(num))\n\n    for i in range(len(result)):\n        result[i] = count_ones(result[i])\n\n    return sorted(result, key=number_of_decimal_places)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort()\n    # print(arr)\n    if len(arr) == 0:\n        return\n\n    if arr[0] == 0:\n        arr.remove(0)\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            arr[i], arr[i-1] = arr[i-1], arr[i]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(map(int, arr))\n    sorted_arr = []\n    while len(arr) > 0:\n        arr = sorted(arr, key=lambda x: count_one(x), reverse=False)\n        sorted_arr.append(arr[0])\n        arr.remove(arr[0])\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    data = sorted(arr)\n    data.reverse()\n    data.sort(key=lambda x: int(x))\n    return data", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # 1. Count number of ones in the binary representation\n    def count_ones(num):\n        i = 0\n        while num!= 0:\n            num = num >> 1\n            i += 1\n        return i\n\n    arr = list(arr)\n    for i in range(len(arr)):\n        arr[i] = count_ones(arr[i])\n\n    # 2. Sort\n    arr.sort()\n\n    # 3. Convert back to original integer\n    res = []\n    for i in range(len(arr)):\n        res.append(2 ** arr[i])\n\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_count(num):\n        \"\"\"\n        Counts number of ones in binary representation of num.\n        \"\"\"\n        count = 0\n        while num!= 0:\n            count += num % 2\n            num /= 2\n        return count\n\n    def get_value(num):\n        \"\"\"\n        Calculates decimal value of binary representation of num.\n        \"\"\"\n        dec_val = 0\n        while num!= 0:\n            dec_val += 2**(num % 2) * num / 2\n            num /= 2\n        return dec_val\n\n    arr.sort(key=lambda x: get_count(x), reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _num_one(n):\n        if n == 0:\n            return 0\n        else:\n            return n + _num_one(n // 2)\n\n    return [_num_one(n) for n in arr]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [int(i) for i in arr]\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        # Get number of ones in binary representation\n        num_ones = 0\n        while i:\n            i, num_ones = divmod(i, 2)\n        # If decimal value is same, sort by binary number of ones\n        if result[-1][0] == arr[i][0]:\n            result[-1][1] = result[-1][1] + num_ones\n        else:\n            result.append([arr[i][0], num_ones])\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _sort(arr):\n        s = sorted(arr, key=lambda x: sum(map(int, bin(x)[2:])))\n        d = {}\n        for x in s:\n            n = 0\n            for i in bin(x)[2:]:\n                n += int(i)\n            if n in d:\n                d[n].append(x)\n            else:\n                d[n] = [x]\n        r = []\n        for n in sorted(d):\n            r += d[n]\n        return r\n    return _sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    array = list(map(int, list(map(bin, list(map(str, arr))))))\n    print(array)\n    min = 0\n    max = 0\n    while len(array) > 0:\n        current = array.pop()\n        if current!= 0 and current!= 1:\n            min += 2 ** (len(bin(current)) - 1)\n        if current!= 0:\n            max += 2 ** (len(bin(current)) - 1)\n        array.append(min)\n        array.append(max)\n        min = 0\n        max = 0\n    return array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_repr(number):\n        while number:\n            number, r = divmod(number, 2)\n            yield r\n\n    def count_ones(number):\n        return sum(number == '1')\n\n    def compare(a, b):\n        return count_ones(a) - count_ones(b)\n\n    return sorted(arr, key=compare)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # count number of 1s and put them in an array\n    counts = [0] * (2 ** len(arr))\n    for i, val in enumerate(arr):\n        counts[int(val)] += 1\n\n    # sort the array\n    return [arr[i] for i in sorted(counts, key=lambda x: x, reverse=True)]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def bin_iter(num):\n        return bin(num)\n\n    def bin_length(num):\n        bin_str = bin_iter(num)\n        return len(bin_str)\n\n    def sort_by_number_of_ones(num):\n        if num == 0:\n            return 0\n\n        return bin_length(num)\n\n    def sort_by_decimal(num):\n        if num == 0:\n            return 0\n\n        if num % 10 == 0:\n            return 10 * bin_length(num // 10)\n        else:\n            return 10 * bin_length(num // 10) + 1\n\n    return sorted(arr, key=sort_by_number_of_ones, reverse=True)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: int(''.join(str(x) for x in bin(x))))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    #first sort the array based on number of ones in binary representation in ascending order.\n    arr.sort(key=lambda x: len(bin(x)[2:]))\n    #now sort based on decimal value, if two numbers are same, sort based on number of ones in binary representation\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr or len(arr) == 1:\n        return arr\n    sorted = []\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                sorted.append(arr[j])\n                arr[j] = arr[i]\n                arr[i] = sorted[-1]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(number):\n        count = 0\n        while number!= 0:\n            count += number & 1\n            number //= 2\n        return count\n\n    if not arr:\n        return []\n    array = list(map(int, arr))\n    array.sort(key=count_ones)\n    if not array[0]:\n        return array[1:]\n    return array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted(arr, key=sort_key)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if len(arr) < 2:\n        return arr\n    for i in range(len(arr)):\n        arr[i] = 0\n        for j in range(1, 10):\n            if arr[i] & 2**j:\n                arr[i] = arr[i] - 2**j\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    left = []\n    right = []\n    for item in arr:\n        num_ones = 0\n        for i in range(8):\n            num_ones += int(item & 1)\n            item >>= 1\n        if num_ones!= 0:\n            right.append(item)\n        else:\n            left.append(item)\n    sorted_right = sort_array(right)\n    sorted_left = sort_array(left)\n    return sorted_left + sorted_right", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def get_int(arr):\n        int_arr = []\n        for i in arr:\n            int_arr.append(int(i))\n        return int_arr\n\n    def cal_similar(arr):\n        similar = []\n        for i in arr:\n            similar.append(int(i))\n        return similar\n\n    def sort_arr(arr, similar):\n        sorted = []\n        for i in arr:\n            sorted.append(i)\n        return sorted\n\n    if not isinstance(arr, list):\n        arr = list(arr)\n\n    int_arr = get_int(arr)\n\n    # number of ones\n    ones = [(int_arr.count(1), arr)]\n    arr = cal_similar(int_arr)\n\n    while len(ones):\n        num_ones, arr = max(ones)\n        arr.remove(num_ones)\n        ones = [(int_arr.count(1), arr)]\n        arr = cal_similar(int_arr)\n\n    return sort_arr(int_arr, arr)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def sort_arr(arr):\n        \"\"\"\n        @arr: a list of non-negative integers\n        @return: a list of non-negative integers\n        \"\"\"\n        if not arr:\n            return arr\n\n        number_of_1s = len([int(i) for i in ''.join(str(i) for i in arr)])\n        arr.sort(key=lambda x: x if number_of_1s > 0 else 0)\n\n        return arr\n\n    return sort_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here.\n    # Note: Do not use builtins sort function.\n    if not isinstance(arr, list):\n        return arr\n    if not len(arr):\n        return arr\n    arr = [int(i) for i in arr]\n    a = 0\n    b = 0\n    flag = 1\n    for i in arr:\n        a += i\n        b += i * 1\n        if flag:\n            flag = 0\n            arr.insert(0, a)\n            a = 0\n        else:\n            arr.insert(0, b)\n            b = 0\n            a = 0\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def is_valid(num, ones):\n        if num < 0 or ones < 0:\n            return False\n        if ones > num:\n            return False\n        if ones == num:\n            return True\n        if ones == 0 or num == 0:\n            return True\n        return False\n\n    arr = sorted(arr)\n\n    for i in range(len(arr)):\n        arr[i] = int(''.join(map(str, arr[i])), 2)\n\n    for i in range(len(arr)):\n        ones = sum(1 for i in range(len(arr[i])) if arr[i][i] == 1)\n        if is_valid(arr[i], ones):\n            arr[i] = ones\n\n    arr.sort()\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    arr.sort(key=lambda x: x[0] if x[0] else 0, reverse=True)\n    for item in arr:\n        if item[0]:\n            item[1] += 1\n\n    arr.sort(key=lambda x: x[1], reverse=True)\n    return arr\n\ntest = [1, 5, 2, 3, 4]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _count_ones(num):\n        \"\"\"\n        Given an integer, returns the number of ones in its binary representation.\n        >>> _count_ones(0)\n        0\n        >>> _count_ones(1)\n        1\n        >>> _count_ones(2)\n        1\n        >>> _count_ones(3)\n        2\n        >>> _count_ones(7)\n        2\n        >>> _count_ones(100)\n        0\n        \"\"\"\n        bits = bin(num)\n        cnt = 0\n        for i in range(len(bits) - 1):\n            cnt += bits[i]!= \"0\"\n        return cnt\n\n    def _compare(a, b):\n        \"\"\"\n        This function sorts according to number of ones in binary representation.\n\n        If the numbers have same number of ones, it sorts based on decimal value.\n        >>> _compare(1, 2)\n        -1\n        >>> _compare(1, 3)\n        -2\n        >>> _compare(1, 4)\n        -3\n        >>> _compare(1, 5)\n        -4\n        >>> _compare(1, 6)\n        -5\n        >>> _compare(1, 7)\n        -6\n        >>> _compare(1, 8)\n        -7\n        >>> _compare(1, 9)\n        -8\n        \"\"\"\n        if _count_ones(a) == _", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: count_1s(x))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: 0 if x > 0 else 1 + bin(abs(x)).count('1'), reverse=False)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Code here", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    count = {}\n    for i in arr:\n        binary = bin(i)[2:]\n        for bit in binary:\n            if bit == '1':\n                count[binary.index(bit)] = count.get(binary.index(bit), 0) + 1\n    for i in sorted(count, key=count.get, reverse=True):\n        arr.append(count[i])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def bin_to_num(s):\n        \"\"\"\n        Converts string of number in binary to the integer value.\n        \"\"\"\n\n        result = 0\n        i = len(s) - 1\n\n        while i >= 0:\n            if s[i] == '1':\n                result += 2 ** i\n            i -= 1\n        return result\n\n    def num_to_bin(n):\n        \"\"\"\n        Converts integer to the string of 0's and 1's.\n        \"\"\"\n\n        result = []\n        while n > 0:\n            if n % 2 == 0:\n                result.insert(0, '0')\n            else:\n                result.insert(0, '1')\n            n >>= 1\n        return ''.join(result)\n\n    def sort_by_binary(a):\n        \"\"\"\n        Sorts the list based on binary representation of numbers.\n        \"\"\"\n\n        b = [bin_to_num(s) for s in num_to_bin(a)]\n        return b\n\n    def sort_by_decimal(a):\n        \"\"\"\n        Sorts the list based on decimal value of numbers.\n        \"\"\"\n\n        b = [bin_to_num(s) for s in num_to_bin(a)]\n        b.sort()\n        return b\n\n    b = [bin_to_num(s) for s in num_to_bin(a)]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_search(num, pos):\n        \"\"\"\n        Helper function for binary search\n        \"\"\"\n        if num == 0:\n            return pos\n        elif num == 1:\n            return pos + 1\n        else:\n            low = 0\n            high = len(arr) - 1\n            mid = (low + high) // 2\n            while True:\n                if arr[mid] == 0:\n                    return binary_search(num - 1, mid)\n                elif arr[mid] == 1:\n                    return binary_search(num - 2, mid)\n                if num % 2 == 0:\n                    if arr[mid] == num:\n                        return mid\n                    elif arr[mid] > num:\n                        low = mid + 1\n                    else:\n                        high = mid - 1\n                elif num % 2 == 1:\n                    if arr[mid] == num:\n                        return mid\n                    elif arr[mid] > num:\n                        high = mid - 1\n                    else:\n                        low = mid + 1\n                mid = (low + high) // 2\n    # print(binary_search(0, 0), binary_search(1, 0), binary_search(2, 0))\n    # print(binary_search(0, 0))\n    # print(binary_search(3, 1))\n    # print(binary_search(3, 1))\n    # print(binary_search", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(num):\n        return int(''.join(str(num)[int(n)] for n in str(num) if int(n) == 1))\n\n    def sort_ones(a):\n        return sorted(a, key=lambda x: count_ones(x))\n\n    def sort_ten(a):\n        return sorted(a, key=lambda x: (x // 10) * 10)\n\n    def sort_zero(a):\n        return sorted(a, key=lambda x: x)\n\n    return sort_ones(sort_ten(sort_zero(arr)))</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(map(int, arr))\n    if len(arr) == 0:\n        return []\n\n    sorted_arr = []\n    while len(arr) > 0:\n        left = []\n        right = []\n        i = 0\n        j = 0\n        while i < len(arr) and j < len(arr):\n            if arr[i] >= arr[j]:\n                right.append(arr[i])\n            elif arr[i] <= arr[j]:\n                left.append(arr[i])\n            else:\n                i += 1\n            j += 1\n        if len(left) > 0:\n            arr = left + right\n        else:\n            sorted_arr.append(right[0])\n\n    return sorted_arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: bin(x).count('1') * (x + 1), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def getBinary(x):\n        return bin(x)\n\n    arr = list(map(int, arr))\n    arr.sort(key=lambda x: (len(getBinary(x)), x))\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        return arr\n    return sorted(arr, key=lambda x: int(bin(x)[2:], 2))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count(num):\n        count = 0\n        for i in range(2, len(str(num))):\n            count += int(str(num)[i])\n        return count\n\n    # sort based on number of ones\n    def sort_by_ones(a, b):\n        return count(a) - count(b)\n\n    # sort based on decimal value\n    def sort_by_decimal(a, b):\n        return (a - b) % 10\n\n    # sort based on number of ones\n    a = [count(num) for num in arr]\n    a.sort(key=sort_by_ones)\n    # sort based on decimal value\n    b = [num for num in a]\n    b.sort(key=sort_by_decimal)\n    return b", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: bin(x).count(\"1\"))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def dec_sort(arr):\n        for i in range(len(arr) - 1):\n            for j in range(i + 1, len(arr)):\n                if int(arr[i]) == int(arr[j]):\n                    if int(arr[i], 2) > int(arr[j], 2):\n                        arr[i], arr[j] = arr[j], arr[i]\n                else:\n                    if int(arr[i], 2) < int(arr[j], 2):\n                        arr[i], arr[j] = arr[j], arr[i]\n\n    def bin_sort(arr):\n        for i in range(len(arr) - 1):\n            for j in range(i + 1, len(arr)):\n                if int(arr[i]) == int(arr[j]):\n                    if len(bin(int(arr[i]))) < len(bin(int(arr[j]))):\n                        arr[i], arr[j] = arr[j], arr[i]\n                else:\n                    if len(bin(int(arr[i]))) > len(bin(int(arr[j]))):\n                        arr[i], arr[j] = arr[j], arr[i]\n\n    return dec_sort(bin_sort(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    count = 0\n    for n in arr:\n        if n == 0:\n            result.append(n)\n            count += 1\n        elif n > 0:\n            binary_n = bin(n)[2:]\n            decimal = 0\n            for digit in reversed(binary_n):\n                decimal += int(digit) * (2 ** count)\n                count -= 1\n            result.append(decimal)\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(x):\n        s = bin(x)\n        s = s.replace(\"0b\", \"\").zfill(8)\n        return s\n\n    def num_ones(x):\n        s = binary(x)\n        return sum(1 for i in s if i == '1')\n\n    def decimal(x):\n        return int(x)\n\n    arr = list(map(int, arr))\n    arr.sort(key=num_ones)\n    arr.sort(key=decimal, reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # First step is to separate positive and negative integers\n    positive_array = []\n    negative_array = []\n    for number in arr:\n        if number > 0:\n            positive_array.append(number)\n        else:\n            negative_array.append(abs(number))\n\n    # We sort negative integers based on their number of ones in binary\n    negative_array.sort(key=lambda x: len(x) if x < 0 else 0)\n\n    # Separate the positive and negative integers\n    positive_array = positive_array + negative_array\n\n    # Sort the array of positive integers based on number of ones in binary and\n    # decimal value, where two elements are equal based on number of ones\n    # in binary\n    return sorted(positive_array, key=lambda x: len(x) if x > 0 else 0)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return arr[:]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_repr(num):\n        \"\"\"\n        This function returns a list of binary digits for a given number.\n        \"\"\"\n        return [int(x) for x in str(num)]\n\n    def num_ones(binary_repr):\n        \"\"\"\n        This function returns the number of ones in a list of binary digits.\n        \"\"\"\n        return len([x for x in binary_repr if x == 1])\n\n    def bsort(num):\n        \"\"\"\n        This function sorts the array according to the number of ones in their\n        binary representation.\n        \"\"\"\n        for i in range(len(num) - 1):\n            for j in range(i, 0, -1):\n                if num_ones(binary_repr(num[i])) > num_ones(binary_repr(num[j])):\n                    num[i], num[j] = num[j], num[i]\n                else:\n                    if num_ones(binary_repr(num[i])) == num_ones(binary_repr(num[j])):\n                        if num[i] > num[j]:\n                            num[i], num[j] = num[j], num[i]\n        return num\n\n    def dsort(num):\n        \"\"\"\n        This function sorts the array according to the decimal value.\n        \"\"\"\n        num =", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if len(arr) == 0:\n        return arr\n\n    # TODO: Implement code here\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def number_of_ones(n):\n        \"\"\"\n        Returns number of ones in n's binary representation.\n        \"\"\"\n        n = int(n)\n        count = 0\n        while n > 0:\n            count += n % 2\n            n //= 2\n        return count\n\n    return sorted(arr, key=lambda n: number_of_ones(n), reverse=False)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def sort(a, b):\n        def func(i, j):\n            return (a[i][1] > b[j][1]) - (a[i][1] < b[j][1])\n        return func(i, j)\n\n    if len(arr) <= 1:\n        return arr\n    else:\n        arr.sort(key=lambda x: int(''.join(map(str, x)), 2), reverse=False)\n        return sort(arr, arr[:-1])"]]