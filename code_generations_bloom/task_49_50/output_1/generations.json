[["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * (n + 1)) // 2 % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * (n + 1)) // 2 % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"modp(n, p) only works for n >= 0\")\n    if p < 2:\n        raise ValueError(\"modp(n, p) only works for p >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n & 1 == 0:\n        return (p - 1) * modp(n >> 1, p)\n    else:\n        return (p - 1) * modp(n >> 1, p) + p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p < n:\n        raise ValueError(\"p must be >= n\")\n    if n == 2:\n        return p\n    return (p - 1) * modp(n - 1, p) + modp(n - 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        return (n * n) % p\n    else:\n        return (n * n + 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p % 2 == 0:\n        return (2 ** n) % p\n    return (2 ** n - 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"modp(n, p): n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"modp(n, p): p must be at least 2\")\n    if n < p:\n        return 0\n    return pow(2, n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p)\n    return p - modp(n - 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 1:\n        return p - 1\n    if n == 2:\n        return p - 1\n    return (p - 1) * modp(n - 1, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * (n + 1)) // 2 % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return (p * modp(n // 2, p)) % p\n    else:\n        return (p * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if p < 0:\n        raise ValueError(\"p must be > 0\")\n    if n < p:\n        raise ValueError(\"n must be >= p\")\n    return pow(2, n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p - modp(n / 2, p)\n    return p - modp(n / 2, p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if p % 4!= 3:\n        return (p - 1) * modp(n - 1, p)\n    return (p - 1) * modp(n - 1, p) + (p - 1) * modp(n - 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return modp(n / 2, p)\n    else:\n        return (p - 1) * modp(n / 2, p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return (n * n) % p\n    return ((n * n) % p) * (n * n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return p - 1\n    if n == 2:\n        return p - 1\n    return (p - 1) * modp(n - 1, p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p)\n    return p * modp(n / 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p == 0:\n        raise ValueError(\"p must be non-zero\")\n    if p < 0:\n        raise ValueError(\"p must be non-negative\")\n    if n < p:\n        raise ValueError(\"n must be greater than p\")\n    return (n - 1) // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if p == 2:\n        return n\n    if n == p:\n        return 1\n    if n < p:\n        return n % p\n    return (n - p + 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if p < 0:\n        raise ValueError(\"p must be > 0\")\n    if n < p:\n        raise ValueError(\"n must be >= p\")\n    if n == 1:\n        return 1\n    if n == p:\n        return 0\n    return (n * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    return (p - 1) * modp(n - 1, p) + modp(n - 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 1:\n        return p - 1\n    return (p - 1) * modp(n - 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * (n + 1)) // 2 % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p == 2:\n        return n\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    return (n * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p % 2 == 0:\n        return n % p\n    return (n - 1) % p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n < p:\n        return 0\n    return pow(2, n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * (n - 1)) // 2 % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return (n * modp(n - 1, p)) % p\n    return (n * modp(n - 1, p - 2)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 1:\n        return p - 1\n    return (p - 1) * modp(n - 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n & 1:\n        return (p - 1) * modp(n - 1, p)\n    return (p - 1) * modp(n - 1, p) + p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return modp(n / 2, p)\n    else:\n        return (2 * modp(n / 2, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 2:\n        return n\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p % 2 == 0:\n        return (n * modp(n - 1, p)) % p\n    else:\n        return (n * modp(n - 1, p - 2)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    return (n * (n - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if p % 4 == 0:\n        return (p - 1) * modp(n - 1, p)\n    return (p - 1) * modp(n - 1, p) + p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * (n + 1)) // 2 % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p - modp(n / 2, p)\n    return p * modp(n / 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if p < 0:\n        raise ValueError(\"p must be > 0\")\n    if n < p:\n        raise ValueError(\"n must be >= p\")\n    return pow(2, n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"modp(n, p): n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"modp(n, p): p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p)\n    else:\n        return p - modp(n - 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"modp only accepts positive integers\")\n    if p < 2:\n        raise ValueError(\"modp only accepts primes >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if p % 2 == 0:\n        return (p - 1) // 2\n    return (p - 1) // 2 + (p - 1) % 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    return (p - 1) * modp(n - 1, p) + modp(n - 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return p - 1\n    return (p - 1) * modp(n - 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p == 2:\n        return n\n    if n < p:\n        return n % p\n    return (n - 1) % p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p == 2:\n        return n\n    if n < p:\n        return n % p\n    return (n - 1) % p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 1\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return (n * modp(n - 1, p)) % p\n    else:\n        return (n * modp(n - 1, p)) % p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n        return 1\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p == 2:\n        return n\n    if n == 1:\n        return 1\n    return (n * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * (n - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n & 1:\n        return p - modp(n >> 1, p)\n    return modp(n >> 1, p) << 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n < p:\n        raise ValueError(\"n must be >= p\")\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p % 2 == 0:\n        return n % p\n    return (n // 2) % p + (n % 2) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p % 2 == 0:\n        return n\n    return (n * (n + 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (2**n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return p\n    if n == 2:\n        return p - 1\n    return (p - 1) * modp(n - 1, p) + modp(n - 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return (p * modp(n / 2, p)) % p\n    return (p * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 1:\n        return p - 1\n    if n == 2:\n        return p - 1\n    return (p - 1) * modp(n - 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p)\n    return (p * modp(n / 2, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"modp(n, p): n must be non-negative\")\n    if p == 2:\n        return n\n    if p < 2:\n        raise ValueError(\"modp(n, p): p must be at least 2\")\n    if n < p:\n        raise ValueError(\"modp(n, p): n must be at least p\")\n    return (n * (n - 1)) // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if p % 2 == 0:\n        return p - 1\n    return p - 2 * (p % 2)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n < p:\n        return 1\n    if n == p:\n        return 0\n    return (1 << n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    if p == 2:\n        return n\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n < p:\n        raise ValueError(\"n must be at least p\")\n    if n == p:\n        return 1\n    return (n - 1) // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p * modp(n // 2, p)\n    return p * modp(n // 2, p) + p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    if p == 2:\n        return n\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n < p:\n        raise ValueError(\"n must be at least p\")\n    return (n - 1) & (p - 1) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p == 2:\n        return n\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    return (n * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    if p == 2:\n        return n\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    return (n * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n < p:\n        return 0\n    if n == p:\n        return 1\n    return (2 ** n - 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n < p:\n        return 0\n    return (n * (n - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"modp(n, p): n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"modp(n, p): p must be >= 2\")\n    if p == 2:\n        return n\n    if n < p:\n        return n % p\n    return (n - p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p % 2 == 0:\n        return (2 ** n) % p\n    else:\n        return ((2 ** n) % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 1:\n        return p - 1\n    return (p - 1) * modp(n - 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    return (p - 1) * modp(n - 1, p) + modp(n - 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p % 2 == 0:\n        return n % p\n    else:\n        return (n * (2 ** (p - 1))) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"negative n\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return (p * modp(n // 2, p)) % p\n    else:\n        return (p * modp(n // 2 + 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * (n + 1)) // 2 % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 1\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return (p * modp(n // 2, p)) % p\n    return (p * modp(n // 2 + 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    return (p - 1) * modp(n - 1, p) + modp(n - 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 2:\n        return n\n    if n < p:\n        return n % p\n    return (n - 1) % p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * (n + 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 0:\n        return 1\n    if p == 2:\n        return n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return modp(n / 2, p)\n    return (n * modp(n / 2, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return (p * modp(n // 2, p)) % p\n    return (p * modp(n // 2 + 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        return n\n    return (n * (2 ** (p - 2)) + 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p & 1 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 1:\n        return p - 1\n    return (p - 1) * modp(n - 1, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 0:\n        return 1\n    if p == 2:\n        return n\n    if n == 1:\n        return p\n    return (p - 1) * modp(n - 1, p) + modp(n - 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p * modp(n // 2, p)\n    return p * modp(n // 2, p) + p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if p == 2:\n        return n\n    if n == p:\n        return 1\n    if n < p:\n        return n % p\n    return (n - 1) % p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return (n * modp(n - 1, p)) % p\n    else:\n        return (n * modp(n - 1, p - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p == 2:\n        return n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return (2 * n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p * modp(n // 2, p)\n    else:\n        return p * modp(n // 2 + 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    if p == 2:\n        return n\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n & 1 == 0:\n        return (n >> 1) % p\n    else:\n        return (n >> 1) % p + p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 1:\n        return p - 1\n    if n == 2:\n        return p - 1\n    return (p - 1) * modp(n - 1, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    return pow(2, n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p == 2:\n        return n\n    if n == 1:\n        return 1\n    return (n * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n < p:\n        return 1\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"negative n\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return p\n    return (p - 1) * modp(n - 1, p) + modp(n - 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * (n + 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 1\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        return n\n    return (n * (2 ** (p - 1))) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p * modp(n // 2, p)\n    return p * modp(n // 2, p) + p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n < 0:\n        raise ValueError(\"modp(n, p): n must be positive\")\n    if p < 2:\n        raise ValueError(\"modp(n, p): p must be at least 2\")\n    if p % 2 == 0:\n        return (n * (n - 1)) % p\n    else:\n        return (n * (n - 1)) % p + p - 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n & 1 == 0:\n        return (p - 1) * modp(n >> 1, p)\n    else:\n        return (p + 1) * modp(n >> 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p < n:\n        raise ValueError(\"p must be >= n\")\n    if n == 1:\n        return 1\n    return (n - 1) * modp(n - 2, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p == 0:\n        raise ValueError(\"p must be positive\")\n    if n < p:\n        raise ValueError(\"n must be greater than p\")\n    if n == 1:\n        return 1\n    if n == p:\n        return 0\n    if n % p == 0:\n        return 0\n    return 1 << (n // p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p * modp(n // 2, p)\n    else:\n        return p * modp(n // 2 + 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * (n + 1)) // 2 % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    return (p - 1) * modp(n - 1, p) + modp(n - 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"modp(n, p): n must be >= 0\")\n    if p == 0:\n        raise ValueError(\"modp(n, p): p must be > 0\")\n    if p < 0:\n        raise ValueError(\"modp(n, p): p must be > 0\")\n    if n < p:\n        raise ValueError(\"modp(n, p): n must be >= p\")\n    if n == p:\n        return 1\n    if n == 1:\n        return 1\n    return (n * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n < p:\n        return 0\n    if n == p:\n        return 1\n    return (n * (n - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    return (p - 1) * modp(n - 1, p) + modp(n - 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return (p * modp(n / 2, p)) % p\n    else:\n        return (p * modp(n / 2 + 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n < p:\n        raise ValueError(\"n must be >= p\")\n    return pow(2, n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p\n    return p * modp(n // 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p * modp(n // 2, p)\n    return p * modp(n // 2, p) + (p - 1) * modp(n // 2, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n / 2, p)\n    return p - modp(n / 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p * modp(n // 2, p)\n    return p * (p - 1) * modp(n // 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if p % 2 == 0:\n        return p - 1\n    return p - 2 * (p % 2) - 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return p - 1\n    if n == 2:\n        return p - 2\n    return (p - 1) * modp(n - 1, p) + p - 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n & 1:\n        return (p - 1) * modp(n - 1, p)\n    return (p - 1) * modp(n - 1, p) + p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (2**n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return (n * n - 1) % p\n    return (n * n * n - n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"negative n\")\n    if n == 1:\n        return 1\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        return n\n    return (n * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    return (n * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return p - 1\n    return (p - 1) * modp(n - 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 0:\n        raise ValueError(\"p must be >= 0\")\n    if p == 0:\n        return 0\n    if n < p:\n        return 0\n    if n == p:\n        return 1\n    if n % p == 0:\n        return 0\n    return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n > p:\n        raise ValueError(\"n must be <= p\")\n    return (1 << n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return (n * modp(n - 1, p)) % p\n    return (n * modp(n - 1, p - 2)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 1\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p\n    return p * modp(n / 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if p < 0:\n        raise ValueError(\"p must be > 0\")\n    if n < p:\n        raise ValueError(\"n must be >= p\")\n    if n == 1:\n        return 1\n    if n == p:\n        return 0\n    return (n * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n < p:\n        return n % p\n    return (n - p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if p < 0:\n        raise ValueError(\"p must be > 0\")\n    if n < p:\n        raise ValueError(\"n must be >= p\")\n    return pow(2, n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return (p * modp(n // 2, p)) % p\n    return (p * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p - modp(n / 2, p)\n    return p - (p - modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n < p:\n        return 0\n    return pow(2, n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 1:\n        return p - 1\n    if n == 2:\n        return p - 1\n    if n % 2 == 0:\n        return p - 1\n    return (p - 1) * modp(n - 2, p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return p - 1\n    return (p - 1) * modp(n - 1, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    return (p - 1) * modp(n - 1, p) + modp(n - 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return (p * modp(n // 2, p)) % p\n    else:\n        return (p * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p\n    return (p * modp(n // 2, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    if p == 2:\n        return n\n    if p == 3:\n        return n & 1\n    if p == 5:\n        return n & 2\n    if p == 7:\n        return n & 4\n    if p == 11:\n        return n & 8\n    if p == 13:\n        return n & 16\n    if p == 17:\n        return n & 32\n    if p == 19:\n        return n & 64\n    if p == 23:\n        return n & 128\n    if p == 29:\n        return n & 256\n    if p == 31:\n        return n & 512\n    if p == 37:\n        return n & 1024\n    if p == 41:\n        return n & 2048\n    if p == 43:\n        return n & 4096\n    if p == 47:\n        return n & 8192\n    if p == 53:\n        return n & 16384\n    if p == 59:\n        return n & 32768\n    if p == 61:\n        return n & 65536\n    if p == 67:\n        return n & 131072\n    if p == 71:\n        return n & 262144\n    if p == 73:\n        return n & 524288\n    if p ==", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if p == 2:\n        return n\n    if n == p:\n        return 1\n    if n % p == 0:\n        return 1\n    return n * modp(n // p, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p < n:\n        raise ValueError(\"p must be >= n\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p - modp(n / 2, p)\n    return p - modp(n - 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p == 0:\n        raise ValueError(\"p must be non-zero\")\n    if p < 0:\n        raise ValueError(\"p must be non-negative\")\n    if n < p:\n        raise ValueError(\"n must be >= p\")\n    if n == p:\n        return 1\n    return pow(2, n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p * modp(n // 2, p)\n    else:\n        return p * modp(n // 2, p) + p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return (p * modp(n // 2, p)) % p\n    return (p * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"modp(n, p): n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"modp(n, p): p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return (p * modp(n // 2, p)) % p\n    else:\n        return (p * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return p - 1\n    if n == 2:\n        return p - 2\n    return (p - 2) * modp(n - 1, p) + 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return (p * modp(n // 2, p)) % p\n    return (p * modp(n // 2 + 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return (n * modp(n - 1, p)) % p\n    else:\n        return (n * modp(n - 1, p - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    return (p - 1) * modp(n - 1, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n & 1:\n        return (n * modp(n-1, p)) % p\n    else:\n        return (n * modp(n-1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    return (p - 1) * modp(n - 1, p) + modp(n - 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return p - 1\n    if n == 2:\n        return p - 2\n    return (p - 2) * modp(n - 1, p) + 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 2:\n        return n\n    if n & 1:\n        return n - 1\n    return n >> 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"modp only accepts positive integers\")\n    if p == 0:\n        raise ValueError(\"modp only accepts positive integers\")\n    if n == 1:\n        return 1\n    if p < 2:\n        raise ValueError(\"modp only accepts positive integers\")\n    if n < p:\n        raise ValueError(\"modp only accepts positive integers\")\n    if n == p:\n        return 1\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return (n * n) % p\n    else:\n        return ((n * n) % p) * 2 % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if p % 2 == 0:\n        return p - 1\n    return p - 2 * modp(n - 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return p\n    return (p - 1) * modp(n - 1, p) + modp(n - 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 1\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        return (2 ** n) % p\n    else:\n        return (2 ** n + 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n & 1:\n        return (p - 1) * modp(n >> 1, p)\n    return p * modp(n >> 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"modp only accepts positive integers\")\n    if p < 2:\n        raise ValueError(\"modp only accepts prime numbers\")\n    if p == 2:\n        return n\n    if n == 1:\n        return 1\n    return (n * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return (p * modp(n // 2, p)) % p\n    else:\n        return (p * modp(n // 2 + 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n < p:\n        return 0\n    if n == p:\n        return 1\n    return (1 << n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n & 1:\n        return p - modp(n >> 1, p)\n    return modp(n >> 1, p) << 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p == 0:\n        raise ValueError(\"p must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n < p:\n        raise ValueError(\"n must be at least p\")\n    if n == p:\n        return 1\n    return (n * (n - 1)) // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"modp(n, p): n must be >= 0\")\n    if p < 0:\n        raise ValueError(\"modp(n, p): p must be >= 0\")\n    if p == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return (p * modp(n // 2, p)) % p\n    else:\n        return (p * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p - modp(n / 2, p)\n    return p - modp(n / 2, p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 1:\n        return p\n    return (p - 1) * modp(n - 1, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return p\n    return (p - 1) * modp(n - 1, p) + p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n < p:\n        return 1\n    if n == p:\n        return 0\n    return (n - 1) // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p - modp(n - 1, p)\n    return p - 2 * modp(n - 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return modp(n / 2, p)\n    else:\n        return (n * modp(n / 2, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"negative n\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return p\n    return (p - 1) * modp(n - 1, p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * (n - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"negative n\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n < p:\n        return 0\n    if n == p:\n        return 1\n    return (n * (n - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n < p:\n        return 0\n    return pow(2, n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return modp(n / 2, p)\n    return (n * modp(n / 2, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return (p * modp(n / 2, p)) % p\n    return (p * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p % 2 == 0:\n        return n % p\n    return (n - 1) % p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p - modp(n / 2, p)\n    return p * modp(n / 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"negative n\")\n    if p == 0:\n        raise ValueError(\"zero p\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p * modp(n // 2, p)\n    else:\n        return p * modp(n // 2 + 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if p == 2:\n        return n\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    return (n * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"modp(n, p): n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"modp(n, p): p must be >= 2\")\n    if p < n:\n        raise ValueError(\"modp(n, p): p must be >= n\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p - modp(n // 2, p)\n    else:\n        return p - modp(n - 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        raise ValueError(\"p must be odd\")\n    if n == 1:\n        return p - 1\n    if n == 2:\n        return p - 1\n    return (p - 1) * modp(n - 1, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        return 0\n    if n == 0:\n        return 1\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * (n + 1)) // 2 % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        return 0\n    if n == 0:\n        return 1\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 0:\n        return 1\n    if p == 2:\n        return n\n    if n == 1:\n        return p\n    return (n * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return p - 1\n    if n == 2:\n        return p - 1\n    if n % 2 == 0:\n        return modp(n / 2, p)\n    return p - (p - 1) * modp(n / 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p == 0:\n        raise ValueError(\"p must be > 0\")\n    if p < 0:\n        raise ValueError(\"p must be > 0\")\n    if n < p:\n        raise ValueError(\"n must be >= p\")\n    return (n - 1) // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return (n * modp(n - 1, p)) % p\n    else:\n        return (n * modp(n - 1, p - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if p % 4 == 0:\n        return (p - 1) * modp(n - 1, p)\n    if p % 4 == 1:\n        return (p + 1) * modp(n - 1, p)\n    if p % 4 == 2:\n        return (p + 1) * modp(n - 2, p)\n    if p % 4 == 3:\n        return (p - 1) * modp(n - 2, p)\n    return (p + 1) * modp(n - 1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return (p * modp(n // 2, p)) % p\n    return (p * modp(n - 1, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n < p:\n        return 0\n    return (1 << n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n * (n + 1)) // 2 % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"negative numbers not supported\")\n    if p == 2:\n        return n\n    if p == 3:\n        return n & 1\n    if p == 5:\n        return n & 3\n    if p == 7:\n        return n & 7\n    if p == 11:\n        return n & 8\n    if p == 13:\n        return n & 12\n    if p == 17:\n        return n & 14\n    if p == 19:\n        return n & 15\n    if p == 23:\n        return n & 16\n    if p == 29:\n        return n & 17\n    if p == 31:\n        return n & 18\n    if p == 37:\n        return n & 19\n    if p == 41:\n        return n & 20\n    if p == 43:\n        return n & 21\n    if p == 47:\n        return n & 22\n    if p == 53:\n        return n & 23\n    if p == 59:\n        return n & 24\n    if p == 61:\n        return n & 25\n    if p == 67:\n        return n & 26\n    if p == 71:\n        return n & 27\n    if p == 73:\n        return n & 28\n    if p == 79:\n        return n & 29\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    if p == 2:\n        return n\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n < p:\n        return 0\n    return (n - 1) & (p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return (n * n) % p\n    return (n * n + 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return p - modp(n / 2, p)\n    return p - 2 * modp(n / 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if p < 2:\n        raise ValueError(\"p must be >= 2\")\n    if p % 2 == 0:\n        return n % p\n    return (n * (2 ** (n - 1)) + 1) % p"]]