[["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    result = 0\n    for n in nums:\n        result += n\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n\n    # curr_min and min_sum are the minimum value in the subarray and the sum of the subarray,\n    # respectively. The min_sum is initialized to nums[0].\n    curr_min = nums[0]\n    min_sum = curr_min\n\n    # We make use of a while loop, which checks if the current sum is greater than the\n    # minimum sum. If so, we update the minimum sum. If not, we update the current\n    # minimum value in the subarray.\n    # We stop the while loop when we reach nums[-1].\n    while curr_min + nums[-1] < min_sum:\n        curr_min += nums[-1]\n        min_sum += nums[-1]\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    assert len(nums) >= 0\n    return min(enumerate(nums), key=lambda x: x[1])[0][1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return sum([nums[i] for i in range(len(nums)) if nums[i] > 0]) if nums else 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, left, right, sum):\n        if left >= right or nums[left] + nums[right] <= sum:\n            return sum\n        mid = left + (right - left) // 2\n        if nums[mid] > sum:\n            return minSum(nums, left, mid - 1, sum)\n        else:\n            return minSum(nums, mid + 1, right, sum)\n    return minSum(nums, 0, len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def dfs(i, a, s):\n        if i == len(nums):\n            return s\n        for j in range(i, len(nums)):\n            if nums[i] + nums[j] <= s and (nums[i] + nums[j]) >= a:\n                a = a + nums[i] + nums[j]\n                s = dfs(j, a, s)\n        return s\n\n    return dfs(0, 0, float('inf'))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums: return 0\n\n    max_idx = len(nums) - 1\n    min_sum = nums[max_idx]\n    for i in range(0, max_idx, -1):\n        if nums[i] + nums[i+1] < min_sum:\n            min_sum = nums[i] + nums[i+1]\n\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    arr = []\n    curr = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            curr = -1*nums[i]\n        else:\n            curr += nums[i]\n        arr.append(curr)\n    # print(arr)\n    for i in range(1, len(arr)-1):\n        if arr[i] < arr[i-1]:\n            arr[i] += arr[i-1]\n    return arr[-1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Optimized from Time complexity: O(n^2) to O(nlogn)\n    # Get minimum value of all the numbers\n    min_value = min(nums)\n    # A list for storing all the index values\n    min_index = []\n\n    for i in range(len(nums)):\n        # If min_value is less than nums[i]\n        if min_value < nums[i]:\n            # Update min_value and min_index list\n            min_value = nums[i]\n            min_index.append(i)\n\n    # To find the total sum of the subarray\n    total_sum = 0\n    # Iterate over the min_index\n    for i in range(len(min_index)):\n        # Add the value of nums[i] to the total_sum\n        total_sum += nums[min_index[i]]\n\n    return min_value + total_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    res = 0\n    for i in range(len(nums)):\n        nums[i] = abs(nums[i])\n        if nums[i] > 0:\n            if i > 0:\n                res += nums[i-1]\n            res += nums[i]\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Iterate through each element in the array\n    total = 0\n    for i in range(len(nums)):\n        # Find the minimum sum of all sub-arrays that start at index i\n        temp = 0\n        for j in range(i+1, len(nums)):\n            temp += nums[i] + nums[j]\n        total = min(total, temp)\n    return total", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sumArray = []\n    if len(nums) == 0:\n        return 0\n\n    for i in range(len(nums)):\n        subArray = [nums[i], ]\n\n        sumArray.append(sum(subArray))\n        subArray.append(nums[i + 1])\n\n        while i + 2 < len(nums):\n            subArray.append(nums[i + 2])\n            sumArray.append(sum(subArray))\n\n            subArray.pop(0)\n            subArray.pop(0)\n\n    return min(sumArray)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    n = len(nums)\n    res = n * (n + 1) // 2\n    for start in range(0, n):\n        for end in range(start + 1, n + 1):\n            for i in range(start, end):\n                res = min(res, nums[i] + nums[start] + nums[end])\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subArraySum(nums):\n        \"\"\"\n        Returns the minimum sum of a non-empty sub-array of nums\n        :param nums:\n        :return:\n        \"\"\"\n        min = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < min:\n                min = nums[i]\n        return min\n\n    result = subArraySum(nums)\n    if result == 0:\n        return 0\n    return result + subArraySum(nums[1:])\n\n\nnums = [-2,2,3,4,5,-4,-2,6,8,7,-2,-4,-1,0,-4,-1,-3,-2,1,-2,-2,1,-2,-4,-4,-2,2,-2,3,-4,-3,-3,-2,4,2,-5,-2,-4,-5,-1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(i, j):\n        if i == j:\n            return nums[i]\n        return min(nums[i] + minSum(i + 1, j),\n                  nums[i] + minSum(i + 1, j - 1),\n                  nums[i] + minSum(i + 1, j - 2))\n\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] >= 0:\n                return minSum(i, j)\n\n    return -1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def findMinSubArray(left, right, minSum):\n        if left == right - 1:\n            if nums[left] > 0:\n                return minSum\n            return -1\n        minSum = min(minSum, findMinSubArray(left + 1, right, nums[left] + nums[right]))\n        return min(minSum, findMinSubArray(left + 1, right - 1, nums[left]))\n    return findMinSubArray(0, len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    s = 0\n    for i in range(0, len(nums)):\n        s += nums[i]\n        if s > 0:\n            for j in range(i + 1, len(nums)):\n                s += nums[j]\n                if s < 0:\n                    break\n            else:\n                return s\n        s -= nums[i]\n    return s", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    res = 0\n    for i in range(len(nums)):\n        res = max(res, nums[i] + minSubArraySum(nums[i+1:]))\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def recur(nums, start, end, sum):\n        if end - start == 0:\n            return sum\n        mid = (start + end) // 2\n        if nums[mid] >= 0:\n            return recur(nums, mid + 1, end, sum)\n        else:\n            return recur(nums, start, mid - 1, sum + nums[mid])\n\n    return recur(nums, 0, len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    res = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] >= res:\n            res = nums[i] + res\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # start with every number\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    # use a deque to keep track of the current minimum\n    minSum = sys.maxint\n    deque = deque()\n    # use a deque iterator to loop through all the combinations\n    for i in range(len(nums)):\n        deque.append(i)\n    while deque:\n        current_sum = 0\n        for i in deque:\n            current_sum += nums[i]\n        if current_sum < minSum:\n            minSum = current_sum\n            deque.clear()\n        else:\n            deque.pop()", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min1 = min2 = INT_MAX\n    for i in range(len(nums)):\n        if min1 > nums[i]:\n            min1 = nums[i]\n        if min2 > nums[i]:\n            min2 = nums[i]\n    return min1 if min2 < min1 else min2", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    memo = {}\n    def minSubArraySumIter(nums, cur_sum, min_sum, index):\n        if index == len(nums):\n            if cur_sum + nums[index] < min_sum:\n                min_sum = cur_sum + nums[index]\n            return min_sum\n        if nums[index] + cur_sum < min_sum:\n            min_sum = nums[index] + cur_sum\n        if nums[index] not in memo:\n            memo[nums[index]] = minSubArraySumIter(nums, cur_sum, min_sum, index + 1)\n        return memo[nums[index]]\n    if len(nums) == 0:\n        return 0\n    else:\n        return minSubArraySumIter(nums, 0, sys.maxsize, 0)\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def find_min_subarray(current_sum, current_min, low, high):\n        if current_sum < 0:\n            return 0\n        if current_sum == 0:\n            return 0\n\n        if low == high:\n            if current_sum > current_min:\n                return 0\n            else:\n                return current_sum\n\n        middle = int((low + high) / 2)\n        left_min_sum = find_min_subarray(current_sum, current_min, low, middle)\n        right_min_sum = find_min_subarray(current_sum, current_min, middle, high)\n\n        if left_min_sum > 0 and left_min_sum < right_min_sum:\n            return left_min_sum\n        elif left_min_sum == 0 and right_min_sum > 0:\n            return right_min_sum\n        elif left_min_sum > 0 and right_min_sum > 0:\n            return min(left_min_sum, right_min_sum)\n\n    # [nums[i:] for i in range(0, len(nums))]\n    # [nums[i:] for i in range(0, len(nums))]\n    # [nums[i:] for i in range(0, len(nums))]\n    # [nums[i:] for i in range(0, len(nums))]\n    # [nums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 0: return 0\n    # use 2 * n-1, for one index and the nums at that index\n    size = 2 * n - 1\n    # use 2 * n-1, for one index and the sum of the elements at that index\n    sumArray = [[0] * size for _ in nums]\n    # use 1 * n, for the min sum of one index\n    minSum = [1] * n\n    # use 1 * n, for the min sum of nums at that index\n    minSubArraySum = [1] * n\n    for i in range(n):\n        minSum[i] = sumArray[i][0] = nums[i]\n        minSubArraySum[i] = sumArray[i][1] = nums[i]\n    for i in range(n):\n        for j in range(size):\n            # sum of the array at the index i\n            curSum = sumArray[i][j % size] + sumArray[i + 1][j % size]\n            # min sum of the array at the index i\n            if curSum < minSum[i]:\n                minSum[i] = curSum\n                # min sum of nums at the index i\n                if curSum == minSubArraySum[i]:\n                    continue", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Deque\n    queue = collections.deque()\n\n    # get the length of the array and create a counter for it.\n    length = len(nums)\n    count = length - 1\n\n    # iterate over the array\n    for num in nums:\n        # if the current count is less than zero and there is still an element in the\n        # array, set the count to the length of the array and put the last element\n        # in the deque.\n        if count < 0:\n            count = length\n            queue.append(num)\n        # if the current count is greater than zero and there are elements in the\n        # deque, take out the element and the count is decremented by one\n        if count > 0:\n            queue.popleft()\n            count -= 1\n\n    # if the count is less than zero, the remaining elements in the deque is the\n    # answer.\n    if count < 0:\n        print(sum(queue))\n    # if the count is greater than zero, the count is the sum of the minimum sub-array\n    # plus the last element in the deque.\n    elif count > 0:\n        print(sum(queue) + queue.pop())\n    # if there is no element in the array, return 0.\n    else:\n        print(0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    minSum = int(nums[0])\n    for num in nums[1:]:\n        minSum = min(minSum + num, minSum)\n\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def f(i, left, right, sum):\n        \"\"\"\n        Helper function to get min sum of all possible sub-arrays from\n        left to right with length from i to right - 1.\n        \"\"\"\n        if sum < 0:\n            return None\n        if i == right:\n            return sum\n        if i == left or (left <= i < right and nums[i] <= nums[left]):\n            return f(i+1, left, right, sum + nums[i])\n        else:\n            return f(i+1, left, right, sum)\n\n    return f(0, 0, len(nums)-1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    if not nums:\n        return 0\n\n    curr = 0\n    sum = 0\n\n    for i in xrange(1, len(nums)):\n        curr = curr + nums[i]\n        while curr >= nums[i - 1]:\n            sum = sum + nums[i - 1]\n            curr = curr - nums[i - 1]\n            i = i - 1\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min([a[1] for a in enumerate(nums) if a[0]])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    def sumArray(arr, start, end):\n        return sum(arr[start:end])\n\n    def sumOfSubArray(arr, start, end):\n        if start == end:\n            return sumArray(arr, start, end)\n        return min(sumOfSubArray(arr, start, end - 1),\n                    sumOfSubArray(arr, start + 1, end))\n\n    for i in range(len(nums)):\n        if not nums[i]:\n            return sumArray(nums, i, len(nums))\n\n    return sumOfSubArray(nums, 0, len(nums) - 1)\n\nnums = [3, 2, 7, 3, 4, 2, 8, 1, 8, 6, 9, 1, 8, 4, 8, 8, 3, 8, 9, 1, 4, 4, 1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    # \u7edf\u8ba1\u6570\u7ec4\u4e2d\u7684\u6b63\u6570\u548c\u8d1f\u6570\n    positives, negatives = 0, 0\n    for i, num in enumerate(nums):\n        if num > 0:\n            positives += num\n        else:\n            negatives += num\n    # \u9884\u5904\u7406\u51fa\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\n    min_sums = [0, 0]\n    for i, num in enumerate(nums):\n        for j in range(i, len(nums)):\n            min_sum = min(positives, negatives) + nums[i] + nums[j]\n            min_sums[min_sum] = min_sums[min_sum] + 1 if min_sum > 0 else 0\n    # \u904d\u5386\u6240\u6709\u60c5\u51b5\uff0c\u627e\u51fa\u6700\u4f18\u89e3\n    for i in range(len(min_sums)):\n        if min_sums[i] > 0:\n            return i\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def minSubArray(l, r):\n        if l > r:\n            return 0\n        if l == r:\n            return nums[r]\n\n        return min(minSubArray(l + 1, r),\n                     minSubArray(l, r - 1) + nums[r])\n\n    print(minSubArray(0, len(nums) - 1))\n\nminSubArraySum([-1, -2, -3])\n\nHere is my implementation, and it works fine, but it is not fast at all. So I want to know how to make it faster, whether it is about the algorithm, or the code.", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def helper(i,j):\n        if j == len(nums):\n            return nums[i]\n        return min(nums[i], helper(i+1, j) + nums[i])\n\n\n    return helper(0,len(nums)-1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def minSum(current_sum, current_indices):\n        # Edge cases\n        if not current_indices:\n            return current_sum\n\n        # Add current indices\n        if current_sum > nums[current_indices[0]]:\n            return minSum(current_sum - nums[current_indices[0]], current_indices[1:])\n\n        # Update current sum\n        for i, num in enumerate(current_indices):\n            current_sum += nums[i]\n\n        return current_sum\n\n    min_so_far = 0\n    # Iterate over each element\n    for num in nums:\n        # Initialize min sum of sub-array of current index and all\n        # previous indices\n        min_sum = minSum(min_so_far, range(num))\n\n        # Update min sum of sub-array of current index and all\n        # following indices\n        min_so_far = minSum(min_sum, range(num + 1, len(nums)))\n\n    return min_so_far", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # convert negative numbers to their absolute value\n    # and store the new array in nums\n    nums = [abs(i) for i in nums]\n\n    def sum_sublists(nums, start_index):\n        \"\"\"\n        Recursively sum the sublists of nums starting at start_index.\n        returns the sum of all sublists of nums starting at start_index.\n        \"\"\"\n        if start_index >= len(nums):\n            return 0\n        else:\n            return min([sum_sublists(nums, start_index + 1),\n                       nums[start_index]]) + nums[start_index + 1]\n\n    return sum_sublists(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def find_min_sums(start, end):\n        if end - start > 1:\n            return min([nums[start] + find_min_sums(start + 1, end),\n                          find_min_sums(start + 1, end)])\n        else:\n            return nums[start]\n\n    return find_min_sums(0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = 0\n    min_index = 0\n\n    for i in range(len(nums)):\n        if i == len(nums) - 1:\n            min_sum += nums[i]\n            if min_sum < 0:\n                return -1\n        else:\n            min_sum += nums[i]\n            if min_sum < min_sum:\n                min_sum = min_sum\n                min_index = i\n\n    return min_index", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    result = 0\n    for n in nums:\n        if n < 0:\n            return -n * (-n + 1)//2\n        if n > 0:\n            result = result + n\n            if len(nums) == 1:\n                return result\n            for i in range(len(nums) - 1):\n                result = result + nums[i] + nums[i + 1]\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def getMinSubArraySum(nums):\n        min = nums[0]\n        for i in xrange(1, len(nums)):\n            sum = min\n            for j in xrange(0, i):\n                sum += nums[j]\n            if sum < min:\n                min = sum\n        return min\n\n    return getMinSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    arr = [None]*len(nums)\n    temp = 0\n    for i in range(len(nums)):\n        temp += nums[i]\n        arr[i] = temp\n    for i in range(len(nums)-1, 0, -1):\n        temp = nums[i]\n        j = i+1\n        while j < len(nums):\n            if temp+nums[j] < arr[j]:\n                arr[j] = temp + nums[j]\n            j += 1\n    print arr[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def iterative(nums):\n        current_sum = 0\n        current_min = nums[0]\n        for i in range(1, len(nums)):\n            current_sum += nums[i]\n            current_min = min(current_min, current_sum)\n        return current_min\n    def recursive(nums, min_sum, length):\n        if length == 0:\n            return 0\n        else:\n            min_sum += nums[length-1]\n            return recursive(nums, min_sum, length-1)\n    return min(map(recursive, nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    stack = [(nums.index(min(nums)), len(nums))]\n    min_value = 0\n    min_sum = 0\n    while stack:\n        i, j = stack.pop()\n        if i == j:\n            min_value += nums[i]\n            continue\n        for k in range(i+1, j):\n            if nums[k] <= min_value:\n                min_value += nums[k]\n                min_sum += min_value\n            else:\n                break\n        stack.append((i, k))\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # \u4ece\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u627e\u51fa\u6700\u5c0f\u7684\u503c\uff0c\u7528\u8fd9\u4e2a\u503c\u4ee3\u8868\u7684\u662f\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u6700\u5c0f\u503c\u65f6\uff0c\u8fd8\u9700\u8981\u4ece\u6570\u7ec4\u4e2d\u53d6\u54ea\u4e9b\u503c\uff0c\u624d\u80fd\u7ec4\u6210\u6700\u5c0f\u503c\n    minValue = min(nums)\n    # \u627e\u51fa\u7ec4\u6210\u8fd9\u4e2a\u503c\u7684\u6240\u6709\u5143\u7d20\n    minNums = []\n    for i in range(len(nums)):\n        if minValue == nums[i]:\n            minNums.append(i)\n            minValue = nums[i]\n    # \u5269\u4e0b\u7684\u90a3\u4e9b\u503c\uff0c\u9700\u8981\u7b97\u51fa\u4ed6\u4eec\u7684\u548c\n    sumNums = []\n    for i in range(len(nums)):\n        if i in minNums:\n            continue\n        sumNums.append(nums[i])\n    return min(sumNums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumRec(nums, curMin, size, retVal):\n        if size == 0:\n            retVal = curMin\n        else:\n            for i in range(len(nums)):\n                curMin = min(curMin, nums[i])\n                if curMin <= 0:\n                    break\n                retVal = minSubArraySumRec(nums, curMin, size-1, retVal)\n        return retVal\n\n    sum = 0\n    result = 0\n    size = len(nums)\n    retVal = 0\n    for i in range(size):\n        sum = sum + nums[i]\n        if sum < 0:\n            break\n        result = minSubArraySumRec(nums, sum, i, retVal)\n    return result\n\nnums = [1, 2, 3]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def minSubArray(nums):\n        res = -9999\n        for i in range(len(nums)):\n            res = min(res, minSubArray(nums[i:]) + nums[i])\n        return res\n\n    return minSubArray(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    return findMinSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    # sort(nums) to ensure nums are sorted in ascending order\n    if nums[-1] < 0:\n        return sum(nums) + minSubArraySum(nums[:-1])\n    else:\n        return sum(nums) + min(nums[1:])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums.sort()\n    min = nums[0]\n    i = 0\n    while i < len(nums):\n        if nums[i] < min:\n            min = nums[i]\n        elif nums[i] == min:\n            i += 1\n        else:\n            return min\n        i += 1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    start = 0\n    end = len(nums) - 1\n    while start <= end:\n        curSum = nums[start] + nums[end]\n        if curSum < nums[start]:\n            start += 1\n        elif curSum < nums[end]:\n            end -= 1\n        else:\n            return curSum\n\nnums = [-1, -2, -3, -2, 5, -4]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums: return 0\n    return min([sum(sub) for sub in map(lambda x: x[1:], zip(nums, nums[1:]))])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def findMin(arr, start, end):\n        if end == 0:\n            return 0\n        if start >= end:\n            return arr[start]\n        sum = arr[start] + findMin(arr, start+1, end-1)\n        return sum if sum < arr[end] else arr[end]\n\n    return findMin(nums, 0, len(nums)-1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def is_power_of_2(n):\n        return not n & (n - 1)\n\n    def two_power(n):\n        return int(math.pow(2, n))\n\n    def new_num(n):\n        return n if is_power_of_2(n) else two_power(n) - 1\n\n    def min_sub(nums, index):\n        if index == len(nums):\n            return 0\n\n        n = new_num(nums[index])\n        sum = 0\n        for i in range(index, len(nums)):\n            sum += new_num(nums[i])\n            if sum >= n:\n                break\n\n        return min_sub(nums, i + 1) + sum\n\n    return min_sub(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def f(head, end, sum):\n        if head >= end:\n            return sum\n\n        min_left = f(head, head + 1, sum)\n        max_right = f(head + 1, end, sum + nums[head])\n\n        if min_left >= max_right:\n            return min_left\n\n        return max_right\n\n    return f(0, len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    # dp[i][j] = min of dp[i - 1][j] + nums[i] and dp[i][j - 1] + nums[i]\n    # = min of dp[i - 1][j] + nums[i] and dp[i][j - 1] + nums[i] + nums[i]\n    # = min(dp[i - 1][j] + nums[i], dp[i][j - 1] + nums[i] + nums[i])\n    dp = [[0] * len(nums) for _ in range(len(nums))]\n    for i in range(1, len(nums)):\n        for j in range(1, len(nums) - i + 1):\n            dp[i][j] = min(dp[i - 1][j] + nums[i], dp[i][j - 1] + nums[i] + nums[i])\n    return dp[-1][-1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    def helper(arr, nums, i):\n        if i >= len(nums):\n            return nums[i]\n        return min(helper(arr, nums, i + 1), helper(arr, nums, i + 1) + nums[i])\n\n    arr = []\n    for num in nums:\n        if num == 0:\n            return 0\n        arr.append(helper(arr, nums, 0))\n\n    return arr[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums: return 0\n    minSum = float('inf')\n    for i in xrange(len(nums)):\n        s = nums[i]\n        if s < 0:\n            s = -s\n        if s + minSum < minSum:\n            minSum = s + minSum\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    size = min(n, len(nums))\n    for i in range(size):\n        for j in range(i+1, size):\n            if nums[i] + nums[j] > 0:\n                return nums[i] + nums[j]\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # \u9996\u5148\u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u6570\n    def minArray(nums):\n        return min(nums)\n\n    # \u5982\u679c\u53ea\u904d\u5386\u4e00\u904d\u7684\u8bdd\uff0c\u6709\u4e00\u4e9b\u6570\u7ec4\u662f\u65e0\u6cd5\u904d\u5386\u5b8c\u5168\u7684\n    # \u6240\u4ee5\u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u6807\u8bb0\u6765\u8ddf\u8e2a\u662f\u5426\u904d\u5386\u5b8c\u5168\n    # \u904d\u5386\u5b8c\u5168\u540e\u8fd4\u56de\u6700\u5c0f\u6570\u5373\u53ef\n    def minSubArray(nums, minNum):\n        flag = True\n        minSubSum = nums[0]\n        for num in nums[1:]:\n            if num < minNum:\n                minSubSum += num\n                flag = False\n            else:\n                minSubSum += minNum\n                flag = False\n                return minSubSum\n        if flag:\n            return minSubSum\n        else:\n            return min(minArray(nums), minSubSum)\n\n    return minSubArray(nums, minArray(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(i, j):\n        global min\n        min = nums[i]\n        for k in range(i + 1, j + 1):\n            if nums[k] < min:\n                min = nums[k]\n        return min\n\n    for i in range(0, len(nums)):\n        for j in range(i + 1, len(nums)):\n            minSum(i, j)\n\n    return min\n\nnums = [4, 3, 2, 1]\nmin = nums[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    # this method is very simple, it first get the length of the given array and\n    # then get the maximum value and minimum value, then it create a loop to\n    # add the minimum value to the result and check if the current value is\n    # greater than the maximum value, if the maximum value is greater then\n    # return the result, otherwise increment the index and continue\n    # same process\n    length = len(nums)\n    maximum = 0\n    minimum = nums[0]\n    for i in xrange(1, length):\n        if nums[i] < minimum:\n            minimum = nums[i]\n        if nums[i] > maximum:\n            maximum = nums[i]\n    result = 0\n    for i in xrange(0, length):\n        if minimum < nums[i]:\n            result += minimum\n        minimum += nums[i]\n        if maximum < minimum:\n            return result\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def helper(values, sum):\n        if not values:\n            return 0\n        else:\n            min = helper(values[1:], sum + values[0])\n            return min if min > values[0] else values[0]\n\n    return helper(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def sumArray(arr, n):\n        \"\"\"\n        Return sum of elements in arr from index 0 to n-1\n        \"\"\"\n        return sum(arr[0: n])\n\n    # Base case: If array is empty, return 0\n    if len(nums) == 0:\n        return 0\n\n    # Sum of all elements of array\n    sum = sumArray(nums, len(nums))\n\n    # We are summing up numbers in reverse order of array\n    for i in range(len(nums) - 1, -1, -1):\n        # If we are at the beginning of array and if sum is not\n        # greater than the minimum sum obtained so far then we need\n        # to compare with the sum of array from the index i to the\n        # end of the array.\n        if i == 0 and sum <= min_sum:\n            # We are in the beginning of array and we got a new min sum\n            # Thus we need to check all elements from index 0 to i-1\n            min_sum = sumArray(nums, i)\n            continue\n\n        # If we are not at the beginning of array and if sum is not\n        # greater than the minimum sum obtained so far then we need\n        # to compare with the sum of array from the", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    array = [ int(n) for n in str(nums)]\n    nums = len(array)\n\n    result = 0\n    if nums <= 0:\n        return 0\n    else:\n        for i in range(nums):\n            if array[i] < 0:\n                return result\n            else:\n                result = result + array[i]\n\n    while i < nums:\n        if array[i] < 0:\n            return result\n        else:\n            result = result + array[i]\n        i = i + 1\n\n    for i in range(nums):\n        if array[i] < 0:\n            return result\n        else:\n            result = result + array[i]\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = nums[0]\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n        min_sum += nums[i]\n        for j in range(len(nums) - i):\n            min_sum -= nums[j + i]\n        if min_sum < 0:\n            return 0\n        if min_sum > 0:\n            return min_sum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # Write your code here\n    array = list(nums)\n    lenArray = len(array)\n    minSubArraySum = 0\n    i = 0\n    while i < lenArray:\n        if array[i] < 0:\n            minSubArraySum += array[i]\n            i += 1\n            continue\n        while i < lenArray and array[i] >= 0:\n            if array[i] + minSubArraySum <= 0:\n                minSubArraySum += array[i]\n                i += 1\n            else:\n                minSubArraySum += array[i]\n                i += 1\n            if i >= lenArray:\n                break\n        if i >= lenArray:\n            break\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min([sum(n) for n in itertools.combinations(nums, 2) if sum(n) > 0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumAux(nums, arr, cur_sum, i):\n        if i == len(nums):\n            if cur_sum == 0:\n                return True\n            return False\n        for j in range(i + 1, len(nums)):\n            if cur_sum + nums[j] < arr[-1]:\n                arr[-1] = cur_sum + nums[j]\n                if minSubArraySumAux(nums, arr, cur_sum, j):\n                    return True\n            else:\n                break\n        arr.append(cur_sum + nums[i])\n        return False\n    return minSubArraySumAux(nums, [], 0, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def search(nums, index, sum):\n        if index == len(nums):\n            return index\n        elif sum >= 0:\n            for i in range(index + 1, len(nums)):\n                if sum + nums[i] >= 0:\n                    index = search(nums, i, sum + nums[i])\n                    break\n                if index!= -1:\n                    break\n        elif sum < 0:\n            for i in range(index + 1, len(nums)):\n                if sum + nums[i] >= 0:\n                    index = search(nums, i, sum + nums[i])\n                    break\n                if index!= -1:\n                    break\n        return index\n\n    nums = list(map(int, input().split()))\n    result = 0\n    for i in range(len(nums)):\n        result = max(result, search(nums, i, -nums[i]) + 1)\n    print(result)\n\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    subArray = sorted(nums)\n    return sum(subArray) + minSubArraySum(subArray[1:])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    else:\n        return min([sum(nums[:i]) for i in range(len(nums))])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # dp[i][j] = minimum sum of subarray from index i to j\n    dp = [0] * (len(nums) + 1)\n    dp[0] = 0\n\n    for i in range(1, len(nums) + 1):\n        for j in range(i):\n            dp[j] = min(dp[j], dp[j - nums[i]] + nums[i])\n\n    return dp[len(nums)]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def is_power_of_two(i):\n        return (i & (i - 1)) == 0\n\n    def minSum_helper(array):\n        def minSum(length):\n            if length == 0:\n                return 0\n            if length == 1:\n                return array[0]\n            return min(minSum(length - 1) + array[0], minSum(length - 1) + array[1])\n\n        return min(minSum(len(array) - 1), minSum(len(array) - 2), minSum(len(array) - 3), minSum(len(array) - 4))\n\n    return minSum_helper(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    res = list()\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            break\n        res.append(nums[i])\n    return sum(res)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums: return 0\n    return min(map(lambda x: sum(filter(lambda y: y!= 0, x)), [list(filter(lambda y: y!= 0, nums[:i])) for i in range(len(nums))]))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def helper(s, index):\n        if index == len(nums):\n            return 0\n\n        sub = s + nums[index]\n\n        return min(helper(sub, index + 1),\n                   helper(sub, index + 1) + nums[index])\n\n    return helper(0, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def dfs(sum, idx, res):\n        if idx == len(nums):\n            if res > sum:\n                res = sum\n            return res\n        res = sum + nums[idx]\n        if res < 0:\n            return 0\n        return min(dfs(sum, idx + 1, res), dfs(sum, idx + 1, res))\n    return dfs(0, 0, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return minSum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def sumSubArray(nums):\n        sum = 0\n        for i in nums:\n            if i > 0:\n                sum += i\n        return sum\n    result = sumSubArray(nums)\n    if nums == []:\n        return 0\n    else:\n        return min(nums, key=sumSubArray)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # write your code here\n    if not nums:\n        return 0\n\n    minSum = 0\n    index = -1\n    for index, value in enumerate(nums):\n        if value < 0:\n            continue\n        minSum += value\n        while index + 1 < len(nums) and nums[index] + nums[index + 1] <= minSum:\n            minSum += nums[index + 1]\n            index += 1\n        if index + 1 >= len(nums):\n            return minSum\n\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # returns the first and last element of the array\n    first = nums[0]\n    last = nums[len(nums) - 1]\n\n    # initializes a variable for sum\n    sum = first\n\n    # while we haven't reached the last element\n    # and the sum is less than the last element\n    while len(nums) > 0 and sum < last:\n        # finds the mininum of all remaining elements and sums it to the sum\n        sum += min(nums)\n        # removes the mininum from the array\n        nums.pop()\n\n    # returns the sum\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    assert(0 <= nums)\n    assert(len(nums) > 0)\n    return sum(nums) + min(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    return min(sum(i) for i in subArray(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def traverse(array):\n        if len(array) == 0:\n            return 0\n        if len(array) == 1:\n            return array[0]\n        return min(traverse(array[:1]) + array[0], traverse(array[1:]) + array[0])\n\n    return traverse(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def _minSubArray(arr, sum):\n        if sum == 0:\n            return\n        if sum < 0 and not arr:\n            return\n        for i in arr:\n            if sum + i < 0:\n                return\n            else:\n                _minSubArray(arr[i+1:], sum + i)\n\n    return _minSubArray(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if start == end:\n            return nums[start]\n        min_start = start\n        min_end = end\n        min = nums[start]\n        for i in range(start+1, end):\n            if nums[i] < nums[min_start]:\n                min_start = i\n                min = nums[i]\n            elif nums[i] == nums[min_start]:\n                if i < min_end:\n                    min_end = i\n        for j in range(start, min_end+1):\n            if nums[j] == nums[min_start]:\n                min -= nums[j]\n        return min + minSubArray(nums, start, min_end)\n    return minSubArray(nums, 0, len(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    return min(sum(nums[i:i + 1]) for i in range(len(nums)) if nums[i]!= 0)\n\nnums = []\nfor _ in range(int(input())):\n    nums.append(int(input()))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def _minSubArraySum(nums):\n        \"\"\"\n        Helper function to find the minimum sum of any non-empty sub-array\n        of nums.\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        # Get the sum of the first and last elements\n        s = nums[0] + nums[-1]\n        # Start with the first element\n        minSum = s\n        # While there are elements left in the array\n        while len(nums) > 1:\n            # Get the second element\n            num1 = nums[1]\n            # Remove the first element\n            nums = nums[2:]\n            # Get the sum of the second and last elements\n            s = num1 + nums[-1]\n            # Compare the new sum with the old\n            if s < minSum:\n                minSum = s\n        return minSum\n\n    return _minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def getMinimum(nums):\n        \"\"\"\n        Get minimum sum of any sub-array of nums\n        :param nums: list of integers\n        :return: integer, minimum sum of any sub-array of nums\n        \"\"\"\n        current = 0\n        for num in nums:\n            current += num\n            if current < nums[0]:\n                current = nums[0]\n        return current\n\n    minimum = getMinimum(nums)\n\n    for i in range(len(nums)):\n        minimum -= nums[i]\n\n    return minimum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def _minSubArraySum(nums):\n        # Convert the nums into a dict\n        m, n = len(nums), len(nums[0])\n        min_sub_arry = [0 for i in range(n)]\n        for i in range(m):\n            for j in range(n):\n                min_sub_arry[j] = min(min_sub_arry[j], nums[i] + nums[j])\n        return sum(min_sub_arry)\n\n    # Return early if the input array is empty\n    if not nums:\n        return 0\n\n    # Use a dictionary to memoize the result\n    # and return the result if it has been already computed\n    if nums[0] in _memoized:\n        return _memoized[nums[0]]\n\n    # Compute the minimum sum of nums and memoize the result\n    return _memoized[nums[0]] = _minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Find the minimum sum and the corresponding sub-array\n    # O(n) time and space\n    a = np.empty(len(nums), dtype=int)\n    a.fill(sys.maxsize)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            a[i] = min(a[i], a[j] - nums[i] - nums[j])\n    # Find the sub-array with the minimum sum\n    # O(n) time and space\n    i = a.argmin()\n    return a[i]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Definition for a binary tree node.\n    # class TreeNode:\n    #     def __init__(self, x):\n    #         self.val = x\n    #         self.left = None\n    #         self.right = None\n\n    def find_min_subarray_sum(nums):\n        \"\"\"\n        Given an array of integers nums, returns the minimum sum of any\n        non-empty sub-array of nums.\n        \"\"\"\n        # print(find_min_subarray_sum(nums))\n        # \u9012\u5f52\u8c03\u7528\n        # return -1 if nums is empty\n        if nums == []:\n            return -1\n\n        min_sum = 0\n        min_node = TreeNode(nums[0])\n        # root = TreeNode(nums[0])\n        root = min_node\n        for i in range(1, len(nums)):\n            # print(i)\n            curr_node = root.left\n            while curr_node:\n                curr_node = curr_node.right\n                # \u68c0\u67e5left\u5b50\u6811\u7684\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u8d85\u51fa\u4e86curr_sum\n                if curr_node.val + nums[i] < min_sum:\n                    # \u5426\u5219\u5c31\u66f4\u65b0\n                    # curr_node.val += nums[i]\n                    min_sum = curr_node.val + nums[i]\n                    min_node = curr_node\n                    # print(", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subArraySum(nums, left, right):\n        res = 0\n        if left >= right:\n            return res\n        for i in range(left, right + 1):\n            res += nums[i]\n        return res\n    start = 0\n    end = len(nums) - 1\n    while start < end:\n        mid = (start + end) // 2\n        if nums[mid] < 0 and subArraySum(nums, start, mid) < 0:\n            start = mid + 1\n        elif subArraySum(nums, mid, end) < 0:\n            end = mid - 1\n        else:\n            return subArraySum(nums, start, end)\n\n\nnums = [1, 2, 4, -1, -2, -3]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def dfs(arr):\n        min_sum = arr[0]\n        min_index = 0\n        for i in range(1, len(arr)):\n            sub_min_sum = min_sum + arr[i]\n            if sub_min_sum < min_sum:\n                min_sum = sub_min_sum\n                min_index = i\n        return min_sum, min_index\n    return dfs(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    arr = []\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            arr.append(nums[i])\n    return min(arr, key=arr.__getitem__)[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    import timeit\n    start = timeit.default_timer()\n    ans = 0\n    subarray = nums.copy()\n    subarray.sort()\n    for i in range(len(subarray)-1):\n        if subarray[i] == subarray[i+1]:\n            continue\n        else:\n            if subarray[i] - subarray[i+1] < ans:\n                ans = subarray[i] - subarray[i+1]\n    end = timeit.default_timer()\n    print(end - start)\n    return ans", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return sum(nums) if nums else 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    if not nums:\n        return 0\n    low = 0\n    high = len(nums)\n    while low < high:\n        mid = (low + high) // 2\n        if nums[mid] < 0:\n            low = mid + 1\n        elif nums[mid] > 0:\n            high = mid\n        else:\n            # find min sum\n            min_sum = nums[mid]\n            for i in range(mid - 1, -1, -1):\n                if nums[i] > 0:\n                    min_sum += nums[i]\n            return min_sum\n\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def mini(nums):\n        if len(nums) == 0:\n            return 0\n        else:\n            cur_sum = nums[0]\n            for i in xrange(1, len(nums)):\n                cur_sum += nums[i]\n                if cur_sum <= 0 or cur_sum > nums[i]:\n                    return mini(nums[0:i - 1])\n                elif cur_sum == nums[i]:\n                    return cur_sum\n    return mini(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    #This is a greedy algorithm, so it doesn't guarantee the correct answer, but it's still interesting to see.\n    #nested for loops to check if the current sum is less than the previous sum, and then find the new minimum.\n    #the first number is 1, so it's always less than the sum of the empty array.\n    currentSum = 1\n    result = []\n    for i in range(1, len(nums)):\n        newSum = nums[i] + currentSum\n        if newSum < currentSum:\n            currentSum = newSum\n        else:\n            result.append(currentSum)\n            currentSum = nums[i] + currentSum\n    result.append(currentSum)\n    return result[::-1] #reverse the list so that it is in the right order", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subArraySum(start, end, currentSum):\n        if end > len(nums):\n            return currentSum\n        elif nums[end] == 0:\n            return subArraySum(start, end - 1, currentSum)\n        elif nums[start] == 0:\n            return subArraySum(start + 1, end, currentSum - nums[end])\n        else:\n            return min(subArraySum(start + 1, end, currentSum),\n                       subArraySum(start, end - 1, currentSum - nums[end]),\n                       subArraySum(start, end - 1, currentSum - nums[end] + nums[start]),\n                       subArraySum(start, end - 1, currentSum - nums[end] - nums[start]))\n    return subArraySum(0, len(nums) - 1, 0)</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = 0\n    for i in range(len(nums)):\n        if i == 0 or nums[i] < nums[i - 1]:\n            if i == 0 or nums[i] > 0:\n                result += nums[i]\n        else:\n            result += nums[i]\n            for j in range(i + 1, len(nums)):\n                if nums[j] > nums[i]:\n                    result += nums[j] - nums[i]\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = 0\n    n = len(nums)\n    for i in range(1, n):\n        result += nums[i]\n        # If result is greater than the current minimum sum, then the current\n        # partial sum is the new minimum sum.\n        if result > minSubArraySum(nums[i:]):\n            result = nums[i]\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def helper(nums, min, minIdx):\n        if nums:\n            newMin = min + nums[0]\n            newMinIdx = 0\n            for idx in range(1, len(nums)):\n                if newMin > min + nums[idx]:\n                    newMin = min + nums[idx]\n                    newMinIdx = idx\n            if newMin < min:\n                min = newMin\n                minIdx = newMinIdx\n            return helper(nums, newMin, newMinIdx)\n        return min, minIdx\n    return helper(nums, 0, 0)[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    return min([sum(nums[:i]) for i in range(len(nums))])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] = -nums[i]\n\n    # Find minimum sum of array. Initialize with 999999 so that 0 is never\n    # considered.\n    min_sum = 999999\n\n    # Find sum of all sub-arrays starting from the last index of nums.\n    for i in range(len(nums)-1, -1, -1):\n        sum = 0\n        for j in range(i):\n            sum += nums[j]\n\n        # If the sub-array sum is less than min_sum, update min_sum with the sum\n        # value.\n        if sum < min_sum:\n            min_sum = sum\n\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, left, right, minSum):\n        if right <= left:\n            return minSum\n        m = left + (right - left) // 2\n        if minSum > nums[m]:\n            return minSubArraySumHelper(nums, left, m - 1, nums[m])\n        if minSum > nums[m+1]:\n            return minSubArraySumHelper(nums, m + 1, right, nums[m+1])\n        return min(nums[m], nums[m+1])\n\n    \n    return minSubArraySumHelper(nums, 0, len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # 1. sort the array\n    sortedNums = sorted(nums)\n\n    # 2. get the minimum value of the array\n    minValue = sortedNums[0]\n\n    # 3. create a result list\n    result = []\n\n    # 4. iterate through the sorted nums\n    for num in sortedNums[1:]:\n\n        # 5. sum the first number of the sorted nums\n        sum = num\n\n        # 6. check if the num is greater than the first number\n        if num > minValue:\n            # 7. add the first number to the sum\n            sum += minValue\n\n        # 8. add the sum to the result list\n        result.append(sum)\n\n    # 9. print the result\n    return min(result)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # \u52a8\u6001\u89c4\u5212\n    dp = [0] * (len(nums) + 1)\n    dp[0] = -1\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i - 1], dp[i - 1] + nums[i])\n\n    return dp[len(nums)]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def _minSubArraySum(nums, curr_sum):\n        if curr_sum > 0:\n            for i in range(len(nums)):\n                if nums[i] < 0:\n                    curr_sum += nums[i]\n                    continue\n                if curr_sum == 0:\n                    curr_sum += nums[i]\n                    return curr_sum\n                curr_sum += nums[i]\n        return curr_sum\n\n    return _minSubArraySum(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return sum(nums) if len(nums) == 0 else min(minSubArraySum(nums[1:]), min(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums: return 0\n\n    def sumArray(array):\n        sum = 0\n        for i in array:\n            sum += i\n        return sum\n\n    def minSubArray(array):\n        minSum = sumArray(array)\n        i = 0\n        while array[i] == 0:\n            i += 1\n        minSum -= array[i]\n        return minSum, i\n\n    if len(nums) == 1:\n        return nums[0]\n\n    minSum, i = minSubArray(nums)\n    for j in range(i + 1, len(nums)):\n        minSum, i = minSubArray(nums[0:j + 1])\n\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min([sum(a) for a in filter(None, [i for i in nums if i])])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def find(index):\n        left = 0\n        right = len(nums)\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < 0:\n                return -sum(nums[:mid])\n            elif nums[mid] > 0:\n                right = mid\n            else:\n                return sum(nums[:mid]) - index\n            left = left + 1\n    maxIndex = max([find(i) for i in xrange(len(nums))])\n    minSum = 0\n    for i in xrange(len(nums)):\n        if nums[i] >= 0:\n            if find(i) > maxIndex:\n                return find(i)\n            elif find(i) == maxIndex:\n                if minSum == 0:\n                    minSum = find(i)\n                else:\n                    minSum = min(minSum, find(i))\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # The first solution can be translated into a simple recursive one,\n    # but the second solution can not.\n    def solution1(nums, sum=0):\n        if not nums:\n            return 0\n        min_s = 0\n        for i, num in enumerate(nums[:-1]):\n            min_s = min(min_s, nums[i + 1] + solution1(nums[i + 2:]))\n        return min_s\n\n    def solution2(nums, sum=0):\n        if not nums:\n            return 0\n        last = sum + nums[0]\n        for num in nums:\n            last = min(last, sum + num)\n        return last\n\n    return min(solution1(nums), solution2(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    min1 = nums[0]\n    min2 = 0\n    for i in range(1, len(nums)):\n        sum1 = min1 + nums[i]\n        min2 = min(sum1, min2)\n    return min2", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def _minSubArraySum(arr, start, end):\n        # initialization\n        if start == end:\n            return arr[start]\n\n        # the sum of the two ends is always larger than the middle element\n        if arr[start] + arr[end] > arr[start + 1]:\n            return _minSubArraySum(arr, start + 1, end)\n\n        # otherwise, the middle element is the minimum.\n        else:\n            return arr[start] + _minSubArraySum(arr, start + 1, end)\n\n    return _minSubArraySum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n\n    min_sum = None\n    min_sum_idx = None\n\n    for i in xrange(len(nums)):\n        if min_sum is None or nums[i] <= min_sum:\n            if min_sum is None:\n                min_sum = nums[i]\n            else:\n                min_sum += nums[i]\n            min_sum_idx = i\n\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    # sum of first two numbers is the minimum value\n    # when using the two numbers as the first two elements of the sub-array\n    current_min = nums[0] + nums[1]\n    # A flag variable to store if there is no sub-array whose sum is less than current_min\n    flag = True\n    # Main loop to find the sub-array\n    for num in nums[2:]:\n        # if the current sum of the sub-array is less than current_min\n        if num + sum(nums[0:2]) <= current_min:\n            # update the current_min\n            current_min = num + sum(nums[0:2])\n            # update the flag\n            flag = False\n        else:\n            # if the current sum of the sub-array is greater than current_min\n            if num + sum(nums[0:2]) >= current_min:\n                # if the flag is false, then the sub-array will not be less than current_min\n                if not flag:\n                    # update the current_min\n                    current_min = num + sum(nums[0:2])\n                    # update the flag\n                    flag = False\n\n    # print('Current minimum = ', current_min)\n    return current_min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums: return 0\n    return min(nums, key = nums.__getitem__)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def find(nums, sum):\n        \"\"\"\n        Helper function to find sum in O(n)\n        \"\"\"\n        low = 0\n        high = len(nums)\n        while low < high:\n            mid = (low + high) // 2\n            if nums[mid] >= sum:\n                high = mid\n            else:\n                low = mid + 1\n        return sum if low == high else find(nums, sum - nums[low])\n\n    return find(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    maxSum = 0\n    result = []\n    for i in range(len(nums)):\n        if nums[i] > maxSum:\n            maxSum = nums[i]\n            result.append(i)\n    return maxSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    min = nums[0]\n    for i in range(1, len(nums)):\n        current_sum = nums[i] + min\n        if current_sum < 0:\n            return min\n        min = current_sum\n\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(len(nums)):\n        # sum += min(nums[i], sum)\n        if nums[i] > sum:\n            sum = nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # define a function to find minimum sum of sub array\n    def minSubArray(nums, m):\n        min = nums[m]\n        i = m\n        j = m + 1\n        while j < len(nums):\n            # if the minimum element is not inside the sub array\n            if nums[i] > nums[j] and nums[j] >= min:\n                min = nums[j]\n            # if the element is in the sub array and\n            elif nums[i] >= min:\n                # move the minimum element to the front\n                i += 1\n                min = nums[i]\n            else:\n                break\n        return min\n    return minSubArray(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    subArraySum = lambda i, j: sum(nums[i:j])\n    minSum = subArraySum(0, len(nums))\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            curSum = subArraySum(i, j)\n            if curSum < minSum:\n                minSum = curSum\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # if no element in the array\n    if len(nums) == 0:\n        return 0\n\n    res = min(nums)\n\n    for i in range(len(nums)):\n        # if first element, and the element is not 0\n        if i == 0 and nums[i]!= 0:\n            res = min(res, nums[i])\n\n        # if the element is 0, and previous element is 0\n        elif nums[i] == 0 and nums[i - 1] == 0:\n            pass\n\n        # if the element is not 0 and previous element is not 0\n        elif nums[i]!= 0 and nums[i - 1]!= 0:\n            res = min(res, nums[i] - nums[i - 1])\n\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write code here\n    # make a list of pairs [(a, b)], where a is sum, b is the array\n    # sort the list on a\n    # use binary search to find the minimum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def helper(nums, sum, low, high):\n        if low == high:\n            return sum\n        mid = (low + high) / 2\n        if nums[mid] < 0 and sum - nums[mid] >= 0:\n            return helper(nums, sum - nums[mid], low, mid - 1) + helper(nums, sum - nums[mid], mid + 1, high)\n        elif nums[mid] < 0 and sum - nums[mid] < 0:\n            return helper(nums, sum, low, mid - 1) + helper(nums, sum, mid + 1, high)\n        else:\n            return min(helper(nums, sum, low, mid - 1), helper(nums, sum, mid + 1, high))\n\n    return helper(nums, 0, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums)\n    min_sum = nums[0]\n    sub_array = []\n    sub_array.append(nums[0])\n    for i in range(1, len(nums)):\n        sum_num = sub_array[-1] + nums[i]\n        if sum_num <= 0:\n            break\n        if sum_num < min_sum:\n            min_sum = sum_num\n            sub_array = [sub_array[-1]]\n        else:\n            sub_array.append(nums[i])\n\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum += nums[i]\n        if min_sum < 0:\n            return min_sum\n        if min_sum > 0:\n            min_sum -= nums[i]\n            if min_sum < 0:\n                return min_sum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = abs(nums[0])\n    for _ in range(1, len(nums)):\n        new_sum = min_sum + nums[_]\n        if new_sum < min_sum:\n            min_sum = new_sum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def findMinSum(nums):\n        minSum = 0\n        if nums == []:\n            return 0\n        minSum += nums[0]\n        n = len(nums)\n        for i in range(1, n):\n            minSum += nums[i]\n            if minSum < 0:\n                minSum = 0\n            minSum += findMinSum(nums[:i + 1])\n        return minSum\n    \n    return findMinSum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    arr = [sum(nums)]\n    for i in range(len(nums)):\n        arr.append(arr[i]+nums[i])\n    return min(arr[1:])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def sumSubArray(nums, start, end):\n        if start >= len(nums) or end > len(nums):\n            return 0\n        # sum of elements in the sub-array\n        sum = 0\n        # sum of abs of the elements in the sub-array\n        absSum = 0\n        for i in range(start, end):\n            sum += nums[i]\n            absSum += abs(nums[i])\n        return sum + absSum\n\n    # check if the given array is empty\n    if not nums:\n        return 0\n\n    # Find the minimum sum of sub-array using brute-force\n    # since the number of sub-arrays is finite, we will find the\n    # minimum sum of sub-array in O(n^2)\n    minSum = sumSubArray(nums, 0, len(nums) - 1)\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            minSum = min(minSum, sumSubArray(nums, i, j))\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # If the array is empty, return 0.\n    if not nums:\n        return 0\n\n    # Find the sum of all the elements in the array.\n    sum_so_far = 0\n    for num in nums:\n        sum_so_far += num\n\n    # Find the minimum sum in the array and return it.\n    minimum_sum = sum_so_far\n    for i in range(len(nums)):\n        current_sum = sum_so_far + nums[i]\n        if current_sum < minimum_sum:\n            minimum_sum = current_sum\n\n    return minimum_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Return 0 if the array is empty.\n    if not nums:\n        return 0\n\n    # The first element of an array is always 0.\n    if nums[0] > 0:\n        return 0\n\n    # Step 1.\n    nums1 = nums[1:]\n    step2 = 0\n    # Step 2.\n    for num in nums1:\n        if num:\n            step2 += num\n        else:\n            step2 += nums1[0]\n\n    # Step 3.\n    for num in nums1:\n        if num:\n            step3 = num\n            break\n    else:\n        step3 = nums1[0]\n\n    # Step 4.\n    for i in range(len(nums1)):\n        step4 = step2 + nums1[i]\n        if step4 < step3:\n            step3 = step4\n\n    return step3", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    # print(nums)\n    res = 0\n    subarr = []\n    for i in range(len(nums)):\n        if subarr:\n            res = res + subarr[-1]\n        subarr.append(nums[i])\n    return res\n\n'''", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: You can think about finding the sum of all prefix sums of the array.\n    #      - You can use the dynamic programming approach to get the answer.\n    \n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def search(nums, start, end):\n        result = -1\n        for i in range(start, end):\n            if nums[i] > 0 and i == start or nums[i] > 0 and nums[i-nums[i]] > 0:\n                result = max(nums[i], result)\n        return result\n\n    def walk(nums, start, end):\n        if start == end:\n            return nums[start]\n        else:\n            return min(walk(nums, start+1, end), search(nums, start, end))\n\n    return min(walk(nums, 0, len(nums)-1))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    min_sum = sum(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sub_array = nums[i:j+1]\n            sub_sum = sum(sub_array)\n            if sub_sum < min_sum:\n                min_sum = sub_sum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    res = 0\n    if len(nums) == 0:\n        return res\n    minSum = nums[0]\n    maxSum = nums[0]\n    for num in nums:\n        if num > maxSum:\n            maxSum = num\n        if num < minSum:\n            minSum = num\n    for i in range(1, len(nums)):\n        if nums[i] < minSum:\n            minSum += nums[i]\n        elif nums[i] > maxSum:\n            maxSum += nums[i]\n        else:\n            res += nums[i]\n    if maxSum - minSum == 0:\n        return res\n    return res + minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # Trivial Case\n    if len(nums) == 0:\n        return 0\n\n    nums.sort()\n    end = len(nums) - 1\n    start = 0\n    minimum_sum = nums[0]\n\n    while start < end:\n        if nums[start] + nums[end] < minimum_sum:\n            minimum_sum = nums[start] + nums[end]\n            start = start + 1\n            end = end - 1\n        else:\n            start = start + 1\n            end = end - 1\n\n    return minimum_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    subArraySum = 0\n    for i in range(len(nums)):\n        subArraySum += nums[i]\n        if subArraySum < 0:\n            subArraySum = 0\n            continue\n        subArray = nums[i+1:]\n        if subArraySum > 0:\n            minSubArraySum(subArray)\n            subArraySum = 0\n            continue\n        else:\n            return subArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def sum_array(arr, min_sum, idx, idx_end):\n        if idx < idx_end:\n            if min_sum == 0:\n                min_sum = arr[idx] + sum_array(arr, min_sum, idx + 1, idx_end)\n            else:\n                min_sum = min(min_sum, arr[idx] + sum_array(arr, min_sum, idx + 1, idx_end))\n        return min_sum\n    return sum_array(nums, 0, 0, len(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    subArraySum = 0\n    len = len(nums)\n    for i in range(len):\n        for j in range(i+1, len):\n            subArraySum = subArraySum + nums[i] + nums[j]\n            if subArraySum < 0:\n                return -1\n    return subArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumAux(nums, subNums, maxS):\n        \"\"\"\n        Recursive helper function\n        \"\"\"\n        if len(subNums) == 0:\n            return maxS\n        else:\n            minSubArraySumAux(nums, nums[subNums[0]], maxS + subNums[0])\n            minSubArraySumAux(nums, nums[1:], maxS)\n            return minSubArraySumAux(nums, nums[subNums[0]], maxS + subNums[0])\n\n    subNums = []\n    maxS = 0\n    minSubArraySumAux(nums, subNums, maxS)\n    return minSubArraySumAux(nums, subNums, maxS)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    ans = 0\n    n = len(nums)\n    for i in xrange(n):\n        for j in xrange(i + 1, n):\n            tmp = nums[i] + nums[j]\n            if tmp <= ans:\n                ans = tmp\n\n    return ans", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    length = len(nums)\n    current_sum = nums[0]\n    for i in range(1, length):\n        current_sum += nums[i]\n        if current_sum < 0:\n            return -current_sum\n    return current_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Initialize minSum to be sum of all numbers\n    minSum = 0\n\n    # Loop through all elements of nums\n    for i in xrange(len(nums)):\n        # If i is not the last element\n        if i!= len(nums)-1:\n            # Add i+1 to sum to get the next number\n            nextNum = nums[i] + nums[i+1]\n\n            # If next number is greater than minSum\n            if nextNum > minSum:\n                # Set minSum to next number\n                minSum = nextNum\n\n        # If i is the last element\n        else:\n            # Add i+1 to sum to get the next number\n            nextNum = nums[i] + nums[i+1]\n\n            # If next number is greater than minSum\n            if nextNum > minSum:\n                # Set minSum to next number\n                minSum = nextNum\n\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n    # binary search for the first occurrence of -1 (the first element not in nums)\n    # then the sum of elements from 0 to that -1 is the minimum sum\n    lo = 0\n    hi = n\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if nums[mid] == -1:\n            return sum(nums[:mid])\n        elif nums[mid] >= 0:\n            lo = mid + 1\n        else:\n            hi = mid\n    return sum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minimum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            new_sum = nums[i] + nums[j]\n            if new_sum < minimum:\n                minimum = new_sum\n    return minimum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # This function is used for the test cases for finding the minimum subarray sum.\n    # The solution for these cases is trivial.\n    if not nums:\n        return 0\n    return min([sum(a) for a in zip(*nums) if a])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    min_sum = sum(nums)\n    for i in range(1, len(nums)):\n        min_sum += nums[i]\n        if min_sum < 0:\n            return min_sum\n        min_subsum = sum(nums[:i+1])\n        if min_subsum < min_sum:\n            min_sum = min_subsum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return _minSubArraySum(nums, 0, len(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    low, high = 0, len(nums)\n    min_sum = 0\n    while low < high:\n        mid = (low + high) // 2\n        if nums[mid] < 0:\n            min_sum += nums[mid]\n            low = mid + 1\n        else:\n            min_sum += nums[mid]\n            high = mid - 1\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def dynamicProgramming(nums, index, accum = 0):\n        if index >= len(nums):\n            return accum\n        min1 = dynamicProgramming(nums, index + 1, accum + nums[index])\n        min2 = dynamicProgramming(nums, index + 1, accum - nums[index])\n        return min(min1, min2)\n\n    return dynamicProgramming(nums)\n\n\nnums = [-1, -2, -3]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    min_sum = 0\n    len_num = len(nums)\n    i = 0\n\n    while i < len_num:\n        if nums[i] <= 0:\n            return 0\n        sum += nums[i]\n        if nums[i] < min_sum:\n            min_sum = nums[i]\n        i += 1\n\n    return sum - min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return abs(min([sum(nums[:i + 1]) for i in range(len(nums)) if nums[i]!= -1]))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    res = float('-inf')\n\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            return res\n        res = min(res, sum(nums[:i] + nums[i + 1:]) if len(nums[i + 1:]) else sum(nums[:i]))\n\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # dp[i] stores the minimum sum of any sub-array that ends with nums[i]\n    # dp[0] stores the minimum sum of any sub-array that is empty\n    dp = [0]\n    for i in range(1, len(nums)):\n        dp.append(dp[i - 1] + nums[i])\n    return min(dp)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n < 1:\n        return 0\n    sub_sum = 1\n    for i in range(1, n):\n        sub_sum += nums[i]\n        if sub_sum < 0:\n            return -sub_sum\n        else:\n            sub_sum -= nums[i]\n            if sub_sum < 0:\n                return -sub_sum\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySum_helper(nums, start, end, min_sum):\n        \"\"\"\n        minSubArraySum_helper(nums, start, end, min_sum):\n        minSubArraySum_helper([2, 3, 4, 1, 2, 4], 2, 5, 2) -> 2\n        minSubArraySum_helper([2, 3, 4, 1, 2, 4], 2, 5, 8) -> 8\n        \"\"\"\n        if start >= end:\n            return min_sum\n        if start == end - 1:\n            min_sum = nums[start] + minSubArraySum_helper(nums, start + 1, end, min_sum)\n            return min_sum\n\n        # move elements to the left\n        min_sum = nums[start] + minSubArraySum_helper(nums, start + 1, end - 1, min_sum)\n        # move elements to the right\n        min_sum += minSubArraySum_helper(nums, start, end - 1, 0)\n        return min_sum\n\n    min_sum = minSubArraySum_helper(nums, 0, len(nums) - 1, 0)\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def f(i):\n        l = min(len(nums), i+1)\n        return min([sum(nums[j:l]) for j in range(i)] + [sum(nums[l:])])\n    return reduce(lambda x, y: x + y, map(f, range(len(nums))))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def helper(nums):\n        # len = len(nums) # not necessary\n        res = 0\n        for i in range(len(nums)-1,-1,-1):\n            # if i+1 == len: break # not necessary\n            res += nums[i]\n            for j in range(i+1):\n                res += nums[j]\n                if res < 0: return res\n        return res\n    return helper(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # # your code here\n    # nums = [-1, -2, -3]\n    # print(minSubArraySum(nums))\n    # assert minSubArraySum(nums) == -6\n\n    def buildMinSubArray(nums, left, right, sum):\n        if left >= right:\n            return sum\n        if left == right:\n            if sum < nums[left]:\n                return sum + buildMinSubArray(nums, left + 1, right, sum + nums[left])\n            return nums[left] + buildMinSubArray(nums, left + 1, right, sum)\n        minSum = None\n        for i in range(left + 1, right + 1):\n            leftSum = sum + nums[i]\n            if minSum is None or leftSum < minSum:\n                minSum = leftSum\n        return minSum + buildMinSubArray(nums, left, right - 1, minSum)\n\n    result = buildMinSubArray(nums, 0, len(nums), 0)\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return findMinSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    length = len(nums)\n    if length == 0:\n        return 0\n    s = nums[0]\n    for i in range(1, length):\n        s += nums[i]\n        if s < 0:\n            break\n    result = s\n    for i in range(length - 1, -1, -1):\n        s -= nums[i]\n        if s < 0:\n            break\n        result = min(result, s)\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    res = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            res = res + nums[i] + nums[j]\n            if res < 0:\n                return res\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySum_recur(nums, start, end):\n        if end - start == 0:\n            return 0\n\n        if nums[start] <= 0:\n            return minSubArraySum_recur(nums, start + 1, end)\n\n        return minSubArraySum_recur(nums, start, end - nums[start]) + nums[start]\n\n    return minSubArraySum_recur(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # I can't think of a better way to do this other than by recursion,\n    # but I'm pretty sure there has to be a better solution.\n    #\n    def minSubArraySum_rec(nums, minSum, start, end):\n        if end - start == 1:\n            return minSum\n        else:\n            mid = (start + end) // 2\n            minSum = min(minSubArraySum_rec(nums, minSum, start, mid), minSubArraySum_rec(nums, minSum, mid + 1, end))\n            if nums[start] + nums[mid] <= minSum:\n                return minSum + nums[start]\n            else:\n                return minSubArraySum_rec(nums, minSum, start, mid)\n    return minSubArraySum_rec(nums, 0, 0, len(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(nums)\n    count, result = 0, 0\n    while count < len(nums):\n        for i in xrange(count + 1, len(nums)):\n            if nums[i] < nums[count]:\n                break\n            result = result + nums[count]\n            count += 1\n            if result < nums[count]:\n                break\n    return result\n\nimport unittest", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def minSubArraySumRecursion(arr, i, j):\n        \"\"\"\n        Recursive function\n        \"\"\"\n        if i == j:\n            return arr[i] + minSubArraySumRecursion(arr, i+1, j)\n        else:\n            return min(arr[i], minSubArraySumRecursion(arr, i+1, j), arr[j])\n\n    return minSubArraySumRecursion(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    assert(len(nums) > 0)\n    min_sum = 0\n    min_idx = 0\n    for i in range(len(nums)):\n        if i == len(nums) - 1:\n            min_sum = nums[i]\n            break\n        min_sum = min(min_sum, nums[i] + nums[i+1])\n        min_idx = i+1\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    array = [-1] * len(nums)\n    max_sum = 0\n    for index, number in enumerate(nums):\n        array[index] = number\n        sum = 0\n        for num in array[::-1]:\n            sum += num\n        if sum > max_sum:\n            max_sum = sum\n        else:\n            array[index] = -1\n\n    return max_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    memo = {}\n    def _minSubArray(arr, start, end):\n        if start >= end:\n            return arr[start]\n        elif start in memo:\n            return memo[start]\n        else:\n            diff = end - start + 1\n            ret = _minSubArray(arr, start+1, end) + arr[start]\n            if diff in memo:\n                ret = min(ret, memo[diff])\n            memo[start] = ret\n            return ret\n\n    if not nums: return 0\n    return _minSubArray(nums, 0, len(nums)-1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    n = len(nums)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = nums[i]\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] + nums[j] >= 0:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1])\n                dp[i][j] += nums[i] + nums[j]\n    return dp[n - 1][n - 1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for i in range(len(nums) - 1):\n        currSum = nums[i] + nums[i + 1]\n        if currSum < minSum:\n            minSum = currSum\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    subArraySum = 0\n    for i in range(0, len(nums)-1):\n        subArraySum = subArraySum + nums[i]\n        if subArraySum < nums[i+1]:\n            subArraySum = nums[i+1]\n\n    return subArraySum\n\nnums = [1,1,1,1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subArray(nums, start, end):\n        total = 0\n        for i in range(start, end+1):\n            total += nums[i]\n        return total\n    def minSubArray(nums, start, end):\n        if start >= end:\n            return 0\n        return min(subArray(nums, start, end), minSubArray(nums, start+1, end))\n\n    sum = subArray(nums, 0, len(nums)-1)\n    return min(sum, minSubArray(nums, 0, len(nums)-1))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums: return 0\n    sum = 0\n    min_sum = sum\n    for i in xrange(0, len(nums)-1):\n        sum += nums[i]\n        if sum < min_sum:\n            min_sum = sum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def memo(nums, currentSum):\n        \"\"\"\n        A memoization function to store results for later use\n        :param nums: list of integers\n        :param currentSum: current sum of elements in the subarray\n        :return: the minimum sum that has been found so far\n        \"\"\"\n        if not isinstance(nums, list):\n            raise TypeError(\"nums should be a list.\")\n        if currentSum < 0:\n            raise ValueError(\"currentSum must be positive.\")\n\n        if currentSum in memo.keys():\n            return memo[currentSum]\n\n        # Special case: if currentSum is 0, it means the subarray is empty, so\n        # any subarray is good enough.\n        if currentSum == 0:\n            return nums[0]\n\n        # It is clear that the minimum sum for the array nums must be less than\n        # the currentSum. So we can skip the sub-array that the sum is equal\n        # to or larger than currentSum. The results can be found in the memo\n        # table.\n        for i in range(len(nums)):\n            if currentSum < memo[i]:\n                continue\n            if nums[i] + currentSum in memo.keys():\n                return memo[currentSum]\n            currentSum =", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subArraySum(nums):\n        return sum(nums)\n\n    for i in range(len(nums)):\n        nums.pop(0)\n\n    nums.reverse()\n    size = len(nums)\n    min_sum = subArraySum(nums)\n    for i in range(size):\n        if size - i >= 1:\n            temp = subArraySum(nums[0:i + 1])\n            if temp <= min_sum:\n                min_sum = temp\n\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if start >= end:\n            return 0\n        num_sum = nums[start]\n        for i in range(start + 1, end + 1):\n            num_sum += nums[i]\n        for j in range(start + 1, end + 1):\n            if num_sum >= nums[j] - num_sum:\n                num_sum += nums[j] - num_sum\n        return num_sum\n    return min(minSubArray(nums, 0, len(nums) - 1), key=len)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    assert(len(nums) > 0)\n    if nums == []:\n        return 0\n    minSum = 0\n    minIndex = 0\n    for i in range(0, len(nums)):\n        currSum = nums[i]\n        for j in range(i+1, len(nums)):\n            currSum += nums[j]\n            if currSum >= minSum:\n                minSum = currSum\n                minIndex = j\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums, reverse = True)\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] + nums[i - 1] > 0:\n            return nums[i] + nums[i - 1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # return 0 if the array is empty\n    if not nums:\n        return 0\n\n    # for each index in the array\n    # calculate the minimum sum\n    # of the sub-array from that index\n    # to the end of the array\n    for i in range(len(nums)):\n        left = i\n        right = len(nums) - 1\n        while left < right:\n            # we have to do the summation of\n            # every two indexes, left to right.\n            # and sum the minimum of each of the sums\n            # if the sum of the previous two is smaller\n            sum_left = sum(nums[left: i + 1])\n            sum_right = sum(nums[i + 1: right])\n            if sum_left < sum_right:\n                right -= 1\n            else:\n                left += 1\n        # now that we have found the min sum\n        # of the sub-array from index i to\n        # the end of the array, we have to subtract\n        # the number at index i from the sum\n        # to get the minimum sum of a sub-array\n        # starting from index i\n        minSubArraySum[i] = sum(nums[i + 1: right]) - nums[i]\n\n    # return the minimum sum of any sub-array\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    return min(minSubArraySum(nums[:-1]), nums[0] + minSubArraySum(nums[1:]))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subSum(nums, start, end, sum):\n        if start >= end:\n            return\n        for i in range(start, end + 1):\n            sum += nums[i]\n            if sum < 0:\n                return\n            subSum(nums, start, i - 1, sum)\n            subSum(nums, i + 1, end, sum)\n    return subSum(nums, 0, len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        s = start\n        e = end\n        if end == 0:\n            return 0\n        while s <= e - 1:\n            if nums[s] > nums[e - 1]:\n                e -= 1\n            else:\n                s += 1\n        if nums[e] == 0:\n            return 0\n        return nums[s] + minSubArray(nums, s + 1, e)\n\n    return minSubArray(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sub_arr = list(nums)\n    l = len(sub_arr)\n    if l == 0:\n        return 0\n    for i in range(0, l):\n        for j in range(0, l-i):\n            sub_arr = sub_arr[j:] + sub_arr[:j]\n            sum = sub_arr[0]\n            for k in range(1, len(sub_arr)):\n                sum += sub_arr[k]\n                if sum < 0:\n                    return sum\n            # sub_arr = sub_arr[:j] + sub_arr[j+1:]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    start = 0\n    end = len(nums) - 1\n    while start < end:\n        sum = nums[start] + nums[end]\n        if sum < 0:\n            start += 1\n        elif sum == 0:\n            return 0\n        else:\n            end -= 1\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # print('minSubArraySum:'+ str(nums) +'->'+ str(minSum(nums)))\n    minSum = 0\n    # get min from first index to end index\n    for index in range(len(nums)):\n        minSum += nums[index]\n        # find index of min value\n        if (minSum < 0):\n            break\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    low, high = 0, len(nums) - 1\n\n    while low < high:\n        mid = low + (high - low) // 2\n        if nums[mid] >= 0:\n            low = mid + 1\n        else:\n            high = mid - 1\n    if nums[low] >= 0:\n        return nums[low]\n    return -nums[high] - minSubArraySum(nums[low:high + 1])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # If we don't have any elements in the array, return 0\n    if len(nums) == 0:\n        return 0\n\n    # Find the first element\n    min_val = nums[0]\n\n    # And the second\n    min_val2 = nums[1]\n\n    # Iterate through the rest of the elements\n    for i in range(2, len(nums)):\n        # If the current element is greater than the minimum so far,\n        # update the minimum\n        if nums[i] > min_val:\n            min_val = nums[i]\n\n        # If the current element is greater than the minimum so far,\n        # update the minimum\n        if nums[i] > min_val2:\n            min_val2 = nums[i]\n\n    # Return the sum of the two minimum elements\n    return min_val + min_val2", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def subArraySum(nums, start, end):\n        sum = 0\n        for i in range(start, end):\n            sum += nums[i]\n\n        return sum\n\n    def subArrayMin(nums, start, end, min):\n        if end - start == 1:\n            return nums[start]\n        else:\n            if min > 0:\n                return subArrayMin(nums, start, end-1, min)\n            elif min < 0:\n                return subArrayMin(nums, start, end-1, min*-1)\n\n    min = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            continue\n\n        min = subArrayMin(nums, i, len(nums), min)\n\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def getSum(n):\n        return n[0] if n else 0\n    min_so_far = float('-inf')\n    minSum = 0\n    sum_nums = [getSum(n) for n in nums]\n    for i in range(len(sum_nums) - 1):\n        for j in range(1, i + 1):\n            if sum_nums[i] + sum_nums[j] <= min_so_far:\n                min_so_far = sum_nums[i] + sum_nums[j]\n                minSum = sum_nums[i] + sum_nums[j]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    min=0\n    for i in range(0, len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i]+nums[j] < min):\n                min=nums[i]+nums[j]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    assert len(nums) > 0\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    twoSum = [None, None]\n    twoSum[0] = nums[0]\n    twoSum[1] = nums[1]\n    for i in range(2, n):\n        sum = twoSum[0] + twoSum[1]\n        if sum < nums[i]:\n            twoSum[0] = nums[i]\n            twoSum[1] = sum\n        else:\n            twoSum[1] = nums[i]\n            twoSum[0] = sum\n    return twoSum[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    sum = nums[0]\n    for i in range(1, len(nums)):\n        sum += nums[i]\n        if sum <= 0:\n            return sum\n    return sum"]]