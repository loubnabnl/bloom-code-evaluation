[["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    #return 0\n    minSum = 0\n    for i in range(len(nums)):\n        minSum += nums[i]\n        if i+1 < len(nums):\n            minSum += nums[i+1]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    arr = sorted(nums)\n    result = 0\n    for i in range(len(arr) - 1):\n        if arr[i] + arr[i + 1] > 0:\n            result = min(result, arr[i] + arr[i + 1])\n\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumIterative(nums):\n        \"\"\"\n        minSubArraySum(nums): return the minimum sum of any non-empty sub-array\n        of nums.\n        \"\"\"\n        # Create an empty array to store the minimum sum of any non-empty sub-array\n        # of nums.\n        minSum = []\n\n        # Loop through nums.\n        for i in range(len(nums)):\n            # If the current element in nums is negative, return the sum of\n            # nums before i.\n            if nums[i] < 0:\n                return sum(nums[:i])\n\n            # If the current element in nums is positive, add it to the\n            # minimum sum of any non-empty sub-array of nums.\n            if nums[i] > 0:\n                minSum.append(nums[i])\n\n        # Return the minimum sum of any non-empty sub-array of nums.\n        return min(minSum)\n\n    def minSubArraySumRecursive(nums):\n        \"\"\"\n        minSubArraySum(nums): return the minimum sum of any non-empty sub-array\n        of nums.\n        \"\"\"\n        # If nums is empty, return 0.\n        if len(nums) == 0:\n            return 0\n\n        # Find the minimum sum of any non-", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    subArraySum = 0\n    for i in range(len(nums)):\n        if i == 0:\n            continue\n        subArraySum += nums[i]\n        if subArraySum < 0:\n            return subArraySum\n        subArraySum -= nums[i]\n        if subArraySum < 0:\n            return subArraySum\n\n    return subArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def _helper(a, b):\n        if b >= len(nums):\n            return a + b\n        return min(_helper(a, b + 1), _helper(a + nums[b], b + 1))\n    return _helper(0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    min_start = 0\n    for start in range(1, len(nums)):\n        sum = nums[start] + min_sum\n        if sum < min_sum:\n            min_sum = sum\n            min_start = start\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    s = 0\n    for i in nums:\n        s += i\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] <= s:\n                s = nums[i] + nums[j]\n    return s", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(i, j):\n        if j == len(nums):\n            return sum(nums[i:])\n        if sum(nums[i:j]) < minSum(i, j + 1):\n            return sum(nums[i:j])\n        return minSum(i, j + 1)\n    return minSum(0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    if len(nums) == 0:\n        return 0\n    else:\n        return min(nums) + minSubArraySum(nums[1:])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subArraySum(nums, start, end):\n        if start >= end:\n            return 0\n        return nums[start] + subArraySum(nums, start + 1, end)\n\n    return min(subArraySum(nums, 0, len(nums) - 1), key=subArraySum)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # your code goes here\n    # write your code in python 3.x\n    \n    # find the min subarray sum\n    minSum = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            minSum += nums[i] + nums[j]\n            if minSum < 0:\n                break\n    \n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        minSum = min(minSum, nums[i] + minSum)\n\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # This solution is not very pythonic, but it works.\n    # I will make it more pythonic later.\n    # My current idea is to use dynamic programming and memoization.\n    # You can use python to write a recursive function to solve this problem.\n    # You can also use a python generator to solve this problem.\n    # But I think it is more efficient to use a loop to solve this problem.\n    # If you use a generator, you have to use yield. It is not very efficient.\n    #\n    # This solution is efficient because we can use a loop to traverse the array.\n    # We can also use a loop to calculate the sum of the array.\n    #\n    # It is not very pythonic because we use a while loop to traverse the array.\n    # But it is efficient. We do not need to check whether the array is empty.\n    # We do not need to check whether the array is non-empty.\n    # We just need to use a loop to traverse the array.\n    #\n    # In this solution, we use a loop to traverse the array.\n    # We use a loop to calculate the sum of the array.\n    # We use a while loop to find the minimum sum of any non-empty sub-array of nums.\n    #\n    # The key idea is", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums):\n        if len(nums) == 0:\n            return 0\n        else:\n            return min([minSum(nums[:i+1]) + nums[i] for i in range(len(nums))])\n\n    return minSum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 1:\n            return nums[end]\n        if end - start == 0:\n            return 0\n        return min(nums[start:end]) + minSubArraySumHelper(nums, end + 1, len(nums) - 1)\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write code here\n    def minSubArraySumHelper(nums, start, end, minSum):\n        if end == len(nums):\n            return minSum\n        minSum = min(minSum, nums[end] + minSubArraySumHelper(nums, start, end + 1, 0))\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def find_min_sub_array(nums, start, end):\n        if start > end:\n            return 0\n        min_sum = nums[start]\n        for i in range(start+1, end+1):\n            min_sum += nums[i]\n            if min_sum < 0:\n                return min_sum\n            if min_sum < nums[i]:\n                min_sum = nums[i]\n        return find_min_sub_array(nums, start+1, end)\n\n    return find_min_sub_array(nums, 0, len(nums)-1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySum_helper(nums, sum, minSum):\n        if not nums:\n            return minSum\n        minSum = min(minSum, sum)\n        minSum = min(minSum, nums[0])\n        for i in range(1, len(nums)):\n            minSum = min(minSum, min(nums[i], nums[i - 1] + nums[i]))\n        minSum = min(minSum, minSubArraySum_helper(nums[1:], sum, minSum))\n        return minSum\n\n    return minSubArraySum_helper(nums, 0, float('inf'))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(left, right, curSum):\n        if left == right:\n            return curSum\n        minLeft = min(left, right - curSum + nums[left])\n        minRight = min(right, curSum + nums[right])\n        return min(minLeft, minRight)\n\n    return minSum(0, len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if start > end:\n            return 0\n        elif start == end:\n            return nums[start]\n        else:\n            sum = nums[start]\n            for i in range(start + 1, end + 1):\n                sum += nums[i]\n            return minSubArray(nums, start + 1, end) + sum\n\n    return minSubArray(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return sum([minSubArraySum(nums[i:]) for i in range(len(nums))])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write code here\n    def minSubArraySumHelper(nums, sum):\n        if sum < 0:\n            return sum\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                minSubArraySumHelper(nums, sum - nums[i])\n        return sum\n\n    return minSubArraySumHelper(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    else:\n        l = len(nums)\n        d = [[0 for x in range(l)] for x in range(l)]\n        for i in range(l):\n            for j in range(l):\n                if i == j:\n                    d[i][j] = nums[i]\n                else:\n                    d[i][j] = min(d[i][j], nums[i] + d[j][i])\n        return d[l - 1][l - 1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    #TODO \u6ce8\u610f\u8fb9\u754c\u6761\u4ef6\n    #TODO \u601d\u8def\uff1a\u52a8\u6001\u89c4\u5212\n    #TODO \u89e3\u51b3\u8fb9\u754c\u6761\u4ef6\n    def minSubArraySumDP(nums):\n        #TODO \u521d\u59cb\u5316\n        #TODO \u8fb9\u754c\u6761\u4ef6\n        #TODO \u9012\u5f52\u8c03\u7528\n        #TODO \u8fd4\u56de\u7ed3\u679c\n        return 0\n    return minSubArraySumDP(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums):\n        def minSumSubArray(nums, i, j):\n            if j == len(nums):\n                return sum(nums[i:])\n            else:\n                return min(minSumSubArray(nums, i, j), minSumSubArray(nums, i, j + 1) + nums[j])\n        return minSumSubArray(nums, 0, len(nums) - 1)\n\n    return minSubArray(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, sum):\n        if not nums:\n            return sum\n        i = 0\n        while i < len(nums):\n            if nums[i] > sum:\n                break\n            i += 1\n        if i >= len(nums):\n            return sum\n        return min(minSum(nums[i:], sum - nums[i]), minSum(nums[:i], sum))\n\n    return minSum(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    return min([sum(nums[:i+1]) for i in range(len(nums))])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySum1(nums):\n        \"\"\"\n        Dynamic programming. The idea is to compute the minimum sum of the\n        first i elements, and then the minimum sum of the first i + 1 elements,\n        where the first element is always 0.\n        \"\"\"\n        if not nums:\n            return 0\n        res = [[0] * (len(nums) + 1) for _ in range(len(nums))]\n        for i, num in enumerate(nums):\n            for j, s in enumerate(res[i]):\n                if j + 1 < len(nums) and num + nums[j + 1] <= res[i + 1][j]:\n                    s[len(nums)] = num + nums[j + 1]\n                else:\n                    s[len(nums)] = res[i + 1][j]\n        return res[0][0]\n\n    def minSubArraySum2(nums):\n        \"\"\"\n        Divide and conquer. Divide the input array into two subarrays, compute the\n        minimum sum of the two subarrays, and then recursively call the function\n        on the two subarrays.\n        \"\"\"\n        if not nums:\n            return 0\n        l, r = 0, len(nums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    else:\n        return min(nums) - minSubArraySum(nums[1:])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums: return 0\n\n    def minSubArraySumHelper(nums, currentSum):\n        if not nums:\n            return currentSum\n\n        # If currentSum is smaller than the minimum so far, update it\n        if currentSum < minSum:\n            minSum = currentSum\n\n        # If currentSum is larger than the minimum so far, the rest of the\n        # array cannot have a smaller sum, so return currentSum\n        if currentSum > minSum:\n            return currentSum\n\n        # If the minimum so far is larger than currentSum, the rest of the\n        # array cannot have a smaller sum, so return the minimum so far\n        if currentSum > minSum:\n            return minSum\n\n        # The sum of the first nums[i] elements is equal to currentSum, so we\n        # can return the sum of the first nums[i] elements\n        return min(minSubArraySumHelper(nums[1:], currentSum),\n                   minSubArraySumHelper(nums, currentSum + nums[0]))\n\n    return minSubArraySumHelper(nums, 0)</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = 0\n    for i in range(len(nums)):\n        if i == len(nums) - 1:\n            return result + nums[i]\n        result = min(result, nums[i] + minSubArraySum(nums[i+1:]))\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums: return 0\n    n = len(nums)\n    m = n - 1\n    while m >= 0:\n        sum = nums[m] + nums[m+1]\n        if sum < nums[m]:\n            break\n        m -= 1\n    if m < 0:\n        return sum\n    return minSubArraySum(nums[m+1:])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    return min([sum(nums[i:]) for i in range(len(nums))])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    n = len(nums)\n    min = 0\n    for i in range(n):\n        if nums[i] == 0:\n            continue\n        min = min + nums[i]\n        while i < n and nums[i] == 0:\n            i += 1\n            min = min + nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySum_helper(nums, start, end):\n        if end == start:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if end - start == 2:\n            return nums[start] + nums[end - 1]\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum > 0:\n                return minSum\n        return minSubArraySum_helper(nums, start + 1, end - 1)\n    return minSubArraySum_helper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def recur(nums, start, end):\n        if start >= end:\n            return sum(nums[start:end])\n        else:\n            return min(recur(nums, start, end-1), recur(nums, start+1, end))\n\n    return recur(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySum_helper(nums, cur, min):\n        if cur == len(nums):\n            return min\n\n        for i in range(cur, len(nums)):\n            if nums[i] > nums[cur]:\n                min = minSubArraySum_helper(nums, i, min + nums[cur])\n                if min < nums[i]:\n                    min = nums[i]\n\n        return min\n\n    return minSubArraySum_helper(nums, 0, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    n = len(nums)\n    result = nums[0]\n    for i in range(1, n):\n        result += nums[i]\n        result -= min(nums[i:])\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    # \u8003\u8651\u904d\u5386\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u5f97\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\n    # \u8003\u8651\u904d\u5386\u7684\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u5f97\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\n    # \u8003\u8651\u904d\u5386\u7684\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u5f97\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\n    # \u8003\u8651\u904d\u5386\u7684\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u5f97\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\n    # \u8003\u8651\u904d\u5386\u7684\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u5f97\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\n    # \u8003\u8651\u904d\u5386\u7684\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u5f97\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\n    # \u8003\u8651\u904d\u5386\u7684\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u5f97\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\n    # \u8003\u8651\u904d\u5386\u7684\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u5f97\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\n    # \u8003\u8651\u904d\u5386\u7684\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u5f97\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\n    # \u8003\u8651\u904d\u5386\u7684\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u5f97\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\n    # \u8003\u8651\u904d\u5386\u7684\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u5f97\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\n    # \u8003\u8651\u904d\u5386\u7684\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u5f97\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\n    # \u8003\u8651\u904d\u5386\u7684\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u5f97\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\n    # \u8003\u8651\u904d\u5386\u7684\u7ec8\u6b62\u4f4d\u7f6e\uff0c", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(arr, start, end):\n        if end == 0:\n            return arr[start]\n        if arr[end - 1] > arr[start]:\n            return minSum(arr, start, end - 1)\n        if arr[end - 1] == arr[start]:\n            return minSum(arr, start, end - 1) + arr[end]\n        return min(minSum(arr, start, end - 1), minSum(arr, start, end - 1) + arr[end])\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def dp(nums, s=0):\n        if len(nums) == 0:\n            return s\n        elif len(nums) == 1:\n            return nums[0]\n        else:\n            return min(dp(nums[:-1], s + nums[-1]),\n                       dp(nums[:-1], s + nums[0]),\n                       dp(nums[:-1], s + nums[1]))\n\n    return dp(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSumSubArray(nums, start, end):\n        if end - start == 0:\n            return 0\n        sum = 0\n        for i in range(start, end):\n            sum += nums[i]\n        return min(sum, minSumSubArray(nums, start + 1, end) + nums[start])\n\n    return minSumSubArray(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def findMinSubArray(nums, start, end):\n        if end - start == 0:\n            return 0\n        if nums[start] < 0:\n            return findMinSubArray(nums, start+1, end)\n        return findMinSubArray(nums, start, end-1) + nums[start]\n\n    def findMinSubArray(nums):\n        minSum = float('inf')\n        for i in range(len(nums)-1):\n            minSum = min(minSum, findMinSubArray(nums, i, len(nums)-1))\n        return minSum\n\n    return findMinSubArray(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # \u9898\u76ee\u8981\u6c42\u662f\u627e\u51fa\u4e00\u4e2a\u6700\u5c0f\u7684\u975e\u7a7a\u5b50\u6570\u7ec4\uff0c\u56e0\u6b64\u53ef\u4ee5\u5148\u4ece\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u5bf9\u6570\u7ec4\u8fdb\u884c\u904d\u5386\uff0c\u5982\u679c\u627e\u5230\u4e00\u4e2a\u975e\u7a7a\u7684\u5b50\u6570\u7ec4\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u5b50\u6570\u7ec4\u52a0\u5165\u4e00\u4e2a\u5217\u8868\u4e2d\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u904d\u5386\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\uff0c\u7136\u540e\u8fdb\u884c\u904d\u5386\uff0c\u76f4\u5230\u904d\u5386\u5230\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u904d\u5386\u5230\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u5b50\u6570\u7ec4\u5217\u8868\u4e2d\u5c31\u4f1a\u6709\u7a7a\u6570\u7ec4\uff0c\u90a3\u4e48\u9700\u8981\u5c06\u8fd9\u4e2a\u7a7a\u6570\u7ec4\u79fb\u9664\u3002\n    # \u4ee3\u7801\u601d\u8def\uff1a\n    # \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cfsum\uff0c\u7528\u6765\u8bb0\u5f55\u5f53\u524d\u5b50\u6570\u7ec4\u4e2d\u6240\u6709\u6570\u5b57\u7684\u548c\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u904d\u5386\u5230\u7684\u6570\u5b57\u5c0f\u4e8e\u7b49\u4e8esum\uff0c\u90a3\u4e48\u5c31\u5c06\u8fd9\u4e2a\u6570\u5b57\u52a0\u5230sum\u4e2d\uff0c\u7136\u540e\u5c06sum\u548c\u5f53\u524d\u904d\u5386\u5230\u7684\u6570\u5b57\u90fd\u52a0\u5165\u5230\u5f53\u524d\u5b50\u6570\u7ec4\u4e2d\u3002\n    # \u5982\u679c\u5f53\u524d\u904d\u5386\u5230\u7684\u6570\u5b57\u5927\u4e8esum\uff0c\u90a3\u4e48\u5c31\u5c06\u8fd9\u4e2a\u6570\u5b57\u52a0\u5230sum\u4e2d\uff0c\u7136\u540e\u5c06sum\u548c\u5f53\u524d\u904d\u5386\u5230\u7684\u6570\u5b57\u90fd\u52a0\u5165\u5230\u5f53\u524d\u5b50\u6570\u7ec4\u4e2d\u3002\n    # \u904d\u5386\u7ed3\u675f\u4e4b\u540e\uff0c\u5c31\u5c06\u5f53\u524d\u5b50\u6570\u7ec4\u4e2d\u6240\u6709\u6570\u5b57\u7684\u548c\u52a0\u5165\u5230\u5217\u8868\u4e2d\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u5b50\u6570\u7ec4\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u3002\n    # \u6700\u540e\u5c06\u5217\u8868\u4e2d\u7684\u6240\u6709\u6570\u5b57\u7684\u548c\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u5f53\u524d\u6570\u5b57\u548c\u6700\u5c0f\uff0c", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, sum):\n        if sum >= 0:\n            return sum\n        if sum < 0:\n            return 0\n        min = sum\n        for i in range(len(nums)):\n            nums[i] = nums[i] + min\n            minSubArraySumHelper(nums, sum - nums[i])\n        return min\n\n    return minSubArraySumHelper(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res += nums[i]\n        if res < 0:\n            return -1\n        if res > 0:\n            res = min(res, nums[i] + minSubArraySum(nums[i:]))\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sub_arr = []\n    sub_arr_sum = 0\n    for i in range(len(nums)):\n        sub_arr.append(nums[i])\n        sub_arr_sum += nums[i]\n    sub_arr.append(nums[-1])\n    sub_arr_sum += nums[-1]\n    for i in range(len(nums)):\n        if sub_arr[i]!= 0:\n            min_sub_arr = sub_arr\n            min_sub_arr_sum = sub_arr_sum\n            for j in range(i + 1, len(nums)):\n                if nums[j]!= 0:\n                    new_sub_arr = sub_arr[:i] + [nums[j]] + sub_arr[i + 1:]\n                    new_sub_arr_sum = sub_arr_sum - nums[i] + nums[j]\n                    if new_sub_arr_sum < min_sub_arr_sum:\n                        min_sub_arr = new_sub_arr\n                        min_sub_arr_sum = new_sub_arr_sum\n            if min_sub_arr_sum < sub_arr_sum:\n                sub_arr = min_sub_arr\n                sub_arr_sum = min_sub_arr_sum\n    return sub_arr_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    minSum = nums[0]\n    for i in xrange(1, len(nums)):\n        minSum += nums[i]\n        if minSum < 0:\n            return minSum\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def findMinSubArraySum(nums):\n        result = float(\"inf\")\n        for i in range(len(nums)):\n            temp = nums[i]\n            for j in range(i+1, len(nums)):\n                if temp + nums[j] < result:\n                    result = temp + nums[j]\n                    start = i\n                    end = j\n                elif temp + nums[j] == result:\n                    if j - i < end - start:\n                        start = i\n                        end = j\n        return result\n\n    return findMinSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = 0\n    for i in range(len(nums)):\n        if i == len(nums) - 1:\n            min_sum += nums[i]\n        else:\n            min_sum += nums[i]\n            for j in range(i + 1, len(nums)):\n                min_sum += nums[j]\n                if min_sum < 0:\n                    min_sum = 0\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    def subArraySum(nums, start, end, sum):\n        if not nums or (start > end):\n            return sum\n        if start == end:\n            return nums[start]\n        return min(subArraySum(nums, start + 1, end, sum + nums[start]),\n                   subArraySum(nums, start, end - 1, sum + nums[end]))\n\n    return subArraySum(nums, 0, len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    def minSubArray(nums):\n        maxlen = len(nums)\n        result = 0\n        for i in range(0, maxlen):\n            for j in range(i + 1, maxlen):\n                result += nums[i] + nums[j]\n                if result < 0:\n                    result = 0\n                    break\n            else:\n                result = 0\n                break\n        return result\n    return minSubArray(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(arr, start, end):\n        if end - start == 1:\n            return arr[start]\n        return min(arr[start] + minSum(arr, start + 1, end),\n                    minSum(arr, start, end - 1))\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    # use BFS to find all possible subarray sums\n    sums = []\n    queue = []\n    queue.append(nums[0])\n    sums.append(queue[0])\n    for num in nums[1:]:\n        for s in sums:\n            if num + s <= 0:\n                continue\n            if s + num not in sums:\n                queue.append(s + num)\n                sums.append(s + num)\n    return min(sums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(map(int, nums))\n    result = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            result += nums[i] + nums[j]\n            if result < 0:\n                return result\n            else:\n                result -= nums[i]\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        minSum = 0\n        for i in range(start, end):\n            if nums[i] > 0:\n                minSum += nums[i]\n        if minSum <= 0:\n            return minSum\n        for i in range(start, end):\n            if nums[i] < 0:\n                minSum += nums[i]\n        return minSum\n\n    if nums == []:\n        return 0\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n\n    # write your code here\n    minSum = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) < minSum:\n                minSum = nums[i] + nums[j]\n\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    minSum = 0\n    for i in range(len(nums)):\n        minSum += nums[i]\n        if minSum < 0:\n            return 0\n        for j in range(i + 1, len(nums)):\n            minSum += nums[j]\n            if minSum < 0:\n                return 0\n            if minSum > nums[i] + nums[j]:\n                minSum = nums[i] + nums[j]\n\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    # create a min heap of the array\n    heap = []\n    for num in nums:\n        heap.append(num)\n    heapify(heap)\n    # loop while there are elements left in the heap\n    while heap:\n        # get the minimum element\n        min_heap = heap.pop()\n        # get the sum of the minimum element\n        sum_heap = sum(min_heap)\n        # find the sub-array with the minimum sum\n        for i in range(len(heap)):\n            heap[i] -= min_heap\n            if sum(heap) < sum_heap:\n                heap[i] += min_heap\n                heapify(heap)\n                sum_heap = sum(heap)\n                break\n        # if the sum of the sub-array is the minimum sum\n        if sum_heap == minSubArraySum(heap):\n            return sum_heap\n    return sum_heap", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end, sum):\n        if end - start <= 0:\n            return sum\n        elif nums[end] < 0:\n            return minSubArraySumHelper(nums, start, end - 1, sum)\n        else:\n            return min(minSubArraySumHelper(nums, start, end - 1, sum + nums[end]),\n                       minSubArraySumHelper(nums, start, end, sum))\n    return min(minSubArraySumHelper(nums, 0, len(nums) - 1, 0),\n               minSubArraySumHelper(nums, 0, len(nums) - 1, 0))\n\nnums = [-1, -2, -3]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def findMinSubArraySum(nums):\n        \"\"\"\n        @param nums: the given array of integers\n        @return: the minimum sum of any non-empty sub-array of nums\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n\n        minSum = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < 0:\n                minSum += nums[i]\n                nums[i] = 0\n            else:\n                minSum += nums[i]\n        return minSum\n\n    return findMinSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    minSum = nums[0]\n    for i in range(1, n):\n        minSum = min(nums[i], minSum + nums[i])\n\n    for i in range(1, n):\n        for j in range(1, n):\n            if i!= j:\n                minSum = min(minSum + nums[i], minSum + nums[j])\n\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def _minSubArraySum(nums):\n        if len(nums) == 0:\n            return 0\n        return min(_minSubArraySum(nums[:-1]), nums[-1])\n\n    return _minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if end == len(nums):\n            return sum(nums)\n        for i in range(start, end):\n            for j in range(start, end):\n                if j < i:\n                    continue\n                if nums[i] + nums[j] < nums[i] + nums[j + 1]:\n                    nums[j] += nums[i]\n                    nums[i] = 0\n                    if j == end - 1:\n                        return sum(nums)\n\n    return minSubArray(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    def minSubArraySum_helper(nums, cur):\n        if not nums:\n            return 0\n        if cur < nums[0]:\n            return nums[0]\n        else:\n            return minSubArraySum_helper(nums[1:], cur+nums[0])\n\n    return minSubArraySum_helper(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, curSum, minSum):\n        if not nums:\n            return minSum\n        minSum = curSum\n        for n in nums:\n            curSum += n\n            minSum = min(minSum, minSubArraySumHelper(nums, curSum, minSum))\n        return minSum\n    return minSubArraySumHelper(nums, 0, float('-inf'))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    nums = sorted(nums)\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            minSum += nums[i]\n            if minSum < 0:\n                minSum = 0\n            for j in range(i + 1, len(nums)):\n                if nums[j]!= 0:\n                    minSum += nums[j]\n                    if minSum < 0:\n                        minSum = 0\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    max_len = len(nums)\n    result = 0\n    for i in range(max_len):\n        for j in range(i+1, max_len):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n            sum = nums[i] + nums[j]\n            if sum < result:\n                result = sum\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if end == len(nums):\n            return sum(nums)\n        if start == end:\n            return min(nums[start], nums[end])\n        return min(minSubArray(nums, start, end - 1),\n                   minSubArray(nums, start + 1, end))\n    return minSubArray(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end <= start:\n            return 0\n        if nums[end] == 0:\n            return minSubArraySumHelper(nums, start, end - 1)\n        if nums[end] < 0:\n            return minSubArraySumHelper(nums, start, end - 1) + abs(nums[end])\n        return min(minSubArraySumHelper(nums, start, end - 1),\n                   minSubArraySumHelper(nums, start, end - 1) + nums[end])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # noinspection PyShadowingNames,PyUnresolvedReferences\n    def minSubArraySum(nums):\n        return min([sum(nums[:i]) for i in range(len(nums))])\n\n    return minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # return the minimum sum of the sub-array\n    # we use the variable to store the min sum\n    # we use the variable to store the index of the min sum\n    # we use the variable to store the min sum\n    # we use the variable to store the index of the min sum\n    # we use the variable to store the min sum\n    # we use the variable to store the index of the min sum\n    # we use the variable to store the min sum\n    # we use the variable to store the index of the min sum\n    # we use the variable to store the min sum\n    # we use the variable to store the index of the min sum\n    # we use the variable to store the min sum\n    # we use the variable to store the index of the min sum\n    # we use the variable to store the min sum\n    # we use the variable to store the index of the min sum\n    # we use the variable to store the min sum\n    # we use the variable to store the index of the min sum\n    # we use the variable to store the min sum\n    # we use the variable to store the index of the min sum\n    # we use the variable to store the min sum\n    # we use the variable to store the index", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    # \u8ba8\u8bba\n    # \u8003\u8651\u5c06\u6570\u7ec4nums\u5168\u90e8\u904d\u5386\u4e00\u904d\uff0c\u7136\u540e\u5c06\u904d\u5386\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u6700\u5c0f\u503c\u4fdd\u5b58\u5230\u5217\u8868\u4e2d\uff0c\u6700\u540e\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u5c0f\u503c\n    # \u4f46\u662f\u8fd9\u6837\u590d\u6742\u5ea6\u4e3aO(n^2)\uff0c\u5982\u679cnums\u4e3an\u7684\u8bdd\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\n    # \u8003\u8651\u5c06nums\u4e2d\u6700\u5927\u7684\u503c\u627e\u51fa\u6765\uff0c\u7136\u540e\u5c06nums\u4e2d\u7684\u503c\u51cf\u53bb\u6700\u5927\u7684\u503c\uff0c\u8fd9\u6837nums\u4e2d\u7684\u503c\u90fd\u53d8\u6210\u4e86\u6b63\u6570\uff0c\u7136\u540e\u4f9d\u6b21\u904d\u5386\uff0c\u5982\u679cnums\u4e2d\u503c\u4e3a\u8d1f\u6570\uff0c\u5219\u5c06\u5176\u503c\u53d8\u62100\uff0c\u7136\u540e\u4f9d\u6b21\u904d\u5386\uff0c\u627e\u51fa\u6700\u5c0f\u503c\uff0c\u6700\u540e\u8fd4\u56de\u6700\u5c0f\u503c\uff0c\u590d\u6742\u5ea6\u4e3aO(n)\n    # \u4f46\u662f\u8fd9\u6837\u4e0d\u80fd\u5904\u7406\u8d1f\u6570\n    # \u8003\u8651\u5c06nums\u5168\u90e8\u904d\u5386\u4e00\u904d\uff0c\u7136\u540e\u5c06\u904d\u5386\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u8d1f\u6570\u5168\u90e8\u53d8\u62100\uff0c\u7136\u540e\u5c06\u904d\u5386\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u6b63\u6570\u5168\u90e8\u53d8\u6210\u8d1f\u6570\uff0c\u7136\u540e\u5c06\u904d\u5386\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u8d1f\u6570\u5168\u90e8\u53d8\u62100\uff0c\u7136\u540e\u5c06\u904d\u5386\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u6b63\u6570\u5168\u90e8\u53d8\u6210\u8d1f\u6570\uff0c\u8fd9\u6837\u4e00\u76f4\u5faa\u73af\uff0c\u76f4\u5230\u904d\u5386\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u503c\u90fd\u4e3a\u6b63\u6570\uff0c\u7136\u540e\u5c06\u904d\u5386\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u6b63\u6570\u5168\u90e8\u53d8\u62100\uff0c\u7136\u540e\u5c06\u904d\u5386\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u8d1f\u6570\u5168\u90e8\u53d8\u62100\uff0c\u6700\u540e\u8fd4\u56de\u904d", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    def subArraySum(nums, start, end):\n        if end == 0:\n            return 0\n        return nums[start] + subArraySum(nums, start + 1, end - 1)\n    return min(subArraySum(nums, 0, len(nums) - 1), key=subArraySum)\n\nnums = [2, 3, 4, 1, 2, 4]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # \u8d2a\u5fc3\u7b97\u6cd5\n    # \u6bcf\u6b21\u53d6\u4e00\u4e2a\u6700\u5c0f\u7684\u503c\uff0c\u7136\u540e\u4ece\u8fd9\u4e2a\u6700\u5c0f\u7684\u503c\u5f00\u59cb\uff0c\u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\u6bd4\u6700\u5c0f\u503c\u5927\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\uff0c\u5982\u679c\u6bd4\u6700\u5c0f\u503c\u5c0f\uff0c\u5219\u628a\u6700\u5c0f\u503c\u66ff\u6362\u4e3a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\uff0c\u7136\u540e\u7ee7\u7eed\u904d\u5386\n    # \u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\uff0c\u904d\u5386\u5230\u6570\u7ec4\u672b\u5c3e\u7684\u65f6\u5019\uff0c\u6700\u5c0f\u7684\u503c\u662f\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u503c\u662f\u54ea\u4e2a\u4f4d\u7f6e\u7684\u503c\uff0c\u7136\u540e\u8fd4\u56de\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c\u5373\u53ef\n    # \u4f8b\u5982\uff1a\n    # \u521d\u59cb\u6700\u5c0f\u503c\u4e3a1\uff0c\u904d\u5386\u6570\u7ec4\uff0c1 < 2, \u8df3\u8fc7\uff0c2 < 3, \u628a1\u66ff\u6362\u4e3a3\uff0c\u7ee7\u7eed\u904d\u5386\uff0c3 < 4, \u8df3\u8fc7\uff0c4 < 1, \u628a3\u66ff\u6362\u4e3a1\uff0c\u7ee7\u7eed\u904d\u5386\uff0c1 < 2, \u8df3\u8fc7\uff0c2 < 3, \u628a1\u66ff\u6362\u4e3a3\uff0c\u7ee7\u7eed\u904d\u5386\uff0c3 < 4, \u8df3\u8fc7\uff0c4 < 2, \u628a3\u66ff\u6362\u4e3a2\uff0c\u7ee7\u7eed\u904d\u5386\uff0c2 < 3, \u628a2\u66ff\u6362\u4e3a3\uff0c\u7ee7\u7eed\u904d\u5386\uff0c3 < 4, \u8df3\u8fc7\uff0c4 < 3, \u628a2\u66ff\u6362\u4e3a3\uff0c\u7ee7\u7eed\u904d\u5386\uff0c3 < 4, \u8df3\u8fc7\uff0c4 < 3, \u628a3\u66ff\u6362\u4e3a4\uff0c\u7ee7\u7eed\u904d\u5386\uff0c3", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySum_helper(nums, start, end, sum):\n        if start == end:\n            return sum\n        if nums[start] < 0:\n            return minSubArraySum_helper(nums, start+1, end, sum + nums[start])\n        return min(minSubArraySum_helper(nums, start+1, end, sum),\n                   minSubArraySum_helper(nums, start, end-1, sum+nums[start]))\n    return minSubArraySum_helper(nums, 0, len(nums)-1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min(nums, key=sum)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def dfs(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return -1\n        sum = nums[start]\n        for i in range(start + 1, end):\n            sum += nums[i]\n        if sum < 0:\n            return -1\n        if sum < min:\n            min = sum\n            min_idx = start\n        dfs(nums, start + 1, end)\n        return sum\n\n    def minSum(nums):\n        if len(nums) <= 1:\n            return nums[0]\n        return min(dfs(nums, 0, len(nums) - 1),\n                   dfs(nums, 1, len(nums) - 1))\n\n    return minSum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumIterative(nums):\n        min_sum = float(\"inf\")\n        for i in range(len(nums)):\n            if i == len(nums) - 1:\n                min_sum = min(nums[i], min_sum)\n            else:\n                min_sum = min(nums[i], minSubArraySumIterative(nums[i + 1:]) + nums[i])\n        return min_sum\n\n    def minSubArraySumRecursion(nums):\n        if not nums:\n            return 0\n        return min(nums[0], minSubArraySumRecursion(nums[1:]) + nums[0])\n\n    return minSubArraySumIterative(nums) if nums else float(\"inf\")", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    return min(nums[0], minSubArraySum(nums[1:]))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumRec(nums, sum):\n        if not nums:\n            return sum\n        minSubArraySumRec(nums[1:], sum - nums[0])\n        minSubArraySumRec(nums[:-1], sum)\n\n    return minSubArraySumRec(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, minSum):\n        for i in range(len(nums)):\n            if nums[i] < 0:\n                minSum += nums[i]\n            else:\n                if i == 0:\n                    minSum += nums[i]\n                else:\n                    minSum = min(minSum, nums[i] + minSubArraySumHelper(nums[i+1:], minSum))\n        return minSum\n    \n    return minSubArraySumHelper(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    assert len(nums) > 0\n    if nums == []:\n        return 0\n    if nums[0] == 0:\n        return 0\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] == 0:\n            continue\n        minSum += nums[i]\n        if minSum < nums[i - 1]:\n            minSum = nums[i - 1]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # find the min sum of the first n elements\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        minSum += nums[i]\n        if minSum < 0:\n            break\n    # find the min sum of the rest elements\n    minSum = nums[-1]\n    for i in reversed(range(len(nums) - 1, -1, -1)):\n        minSum += nums[i]\n        if minSum < 0:\n            break\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    arr = sorted(nums)\n    sum = 0\n    for i in range(0, len(arr)):\n        if arr[i]!= 0:\n            sum += arr[i]\n            if i + 1 == len(arr):\n                return sum\n            while arr[i + 1] == 0 and i + 1 < len(arr):\n                i += 1\n            if i + 1 == len(arr):\n                return sum\n            sum += arr[i + 1]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def sumSubArray(nums, start, end):\n        if end - start <= 0:\n            return 0\n        return nums[start] + sumSubArray(nums, start + 1, end)\n    return min(sumSubArray(nums, 0, i) for i in range(len(nums)))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Trivial Solution\n    if not nums:\n        return 0\n\n    # Base Case: If array size is 1, return the sum.\n    if len(nums) == 1:\n        return nums[0]\n\n    # Otherwise, find the minimum sum of two elements.\n    # Find the minimum sum of two elements in the array.\n    minSum = min(nums)\n\n    # Create a new array with the same size as nums.\n    newArray = [None] * len(nums)\n\n    # Iterate over each element in nums.\n    # For each element, find the minimum sum of two elements in the array.\n    for i in range(len(nums)):\n        # Find the minimum sum of two elements in the new array.\n        newSum = min(nums[i] + newArray[(i - 1) % len(nums)], newArray[(i + 1) % len(nums)])\n\n        # Assign the minimum sum to the new array.\n        newArray[i] = newSum\n\n    # Return the minimum sum.\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    for i in range(len(nums)):\n        if i == 0 or nums[i] > nums[i - 1]:\n            continue\n        minSum = nums[i]\n        start = i\n        end = len(nums)\n        while start >= 0 and nums[start] == nums[start - 1]:\n            start -= 1\n        while end < len(nums) and nums[end] == nums[end + 1]:\n            end += 1\n        if start < 0 or end >= len(nums):\n            continue\n        minSum += nums[start]\n        minSum += nums[end]\n        while start > 0 and nums[start - 1] == nums[start]:\n            start -= 1\n        while end < len(nums) - 1 and nums[end + 1] == nums[end]:\n            end += 1\n        if start < 0 or end >= len(nums):\n            continue\n        minSum += nums[start]\n        minSum += nums[end]\n        if minSum < nums[0]:\n            return minSum\n    return nums[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = float(\"inf\")\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            sub = nums[i: j]\n            if len(sub) == 0:\n                continue\n            sum = 0\n            for k in range(len(sub)):\n                sum += sub[k]\n            if sum < result:\n                result = sum\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def getMin(currentSum, currentArray):\n        if len(currentArray) == 0:\n            return currentSum\n\n        currentSum -= currentArray[0]\n        getMin(currentSum, currentArray[1:])\n\n    return getMin(sum(nums), nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumIter(nums):\n        # \u521d\u59cb\u5316\u6700\u5c0f\u503c\n        minSum = nums[0]\n        # \u904d\u5386\u6570\u7ec4\uff0c\u5f53\u904d\u5386\u5230\u67d0\u4e2a\u6570\u65f6\uff0c\u5982\u679c\u904d\u5386\u5230\u8fd9\u4e2a\u6570\u65f6\uff0c\u5f53\u524d\u6700\u5c0f\u503c\u6bd4\u8fd9\u4e2a\u6570\u5927\uff0c\u5219\u66f4\u65b0\u5f53\u524d\u6700\u5c0f\u503c\n        for num in nums:\n            if minSum > num:\n                minSum = num\n        return minSum\n    return minSubArraySumIter(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    min = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min:\n            min = nums[i]\n    for i in range(1, len(nums)):\n        if nums[i] <= min:\n            continue\n        min += nums[i]\n        if min < nums[i]:\n            min -= nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def dfs(nums, left, right, sum):\n        if right <= 0:\n            return sum\n        mid = (left + right) // 2\n        if sum + nums[mid] < min:\n            min = sum + nums[mid]\n            index = mid\n        if nums[mid] < 0 or nums[mid] >= sum:\n            dfs(nums, left, mid - 1, sum)\n        if nums[mid] >= 0 and nums[mid] < sum:\n            dfs(nums, mid + 1, right, sum)\n        return min\n    return dfs(nums, 0, len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def check(nums):\n        if len(nums) == 0:\n            return 0\n        else:\n            return min([nums[i] + check(nums[i+1:]) for i in range(len(nums))])\n\n    return check(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(arr, i, j, sum):\n        if i == j:\n            return sum\n        if i == j - 1:\n            return sum + arr[i]\n        if arr[i] + arr[j] > sum:\n            return minSum(arr, i, j - 1, sum)\n        return minSum(arr, i + 1, j, sum + arr[i])\n    return minSum(nums, 0, len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    min_sum = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            min_sum += nums[i]\n            while i + 1 < len(nums) and nums[i] + nums[i + 1] <= min_sum:\n                min_sum += nums[i]\n                i += 1\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = 0\n    if len(nums) == 0:\n        return min_sum\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] > 0:\n                min_sum = min(min_sum, nums[i] + nums[j])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def sum(a, b):\n        return a + b\n\n    if not nums:\n        return 0\n\n    # Find the minimum sum of all sub-arrays with at least one element\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        minSum = min(minSum, nums[i])\n\n    # Find the minimum sum of all sub-arrays with no elements\n    noSum = 0\n    for i in range(len(nums)):\n        noSum += nums[i]\n\n    # Find the minimum sum of all sub-arrays with at least two elements\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if i == j:\n                continue\n            minSum = min(minSum, sum(nums[i], nums[j]))\n\n    return min(minSum, noSum)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    def dfs(nums, start, end):\n        if end - start <= 1:\n            return 0\n\n        sum = 0\n        for i in range(start, end):\n            sum += nums[i]\n        return min(sum, dfs(nums, start + 1, end) + dfs(nums, start, end - 1))\n\n    return dfs(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min(nums, key=sum)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums):\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        return min(nums[0], minSubArraySumHelper(nums[1:]))\n\n    return minSubArraySumHelper(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min(nums) if len(nums) == 0 else min(nums) + minSubArraySum(nums[:-1])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumIterative(nums):\n        # \u521d\u59cb\u5316\u6700\u5c0f\u503c\n        minSum = 0\n        # \u521d\u59cb\u5316\u6700\u5c0f\u5b50\u6570\u7ec4\n        minSubArray = []\n        # \u904d\u5386\u6570\u7ec4\n        for num in nums:\n            # \u627e\u5230\u5f53\u524d\u5b50\u6570\u7ec4\u7684\u6700\u5c0f\u503c\n            minSum = min(minSum, num)\n            # \u5982\u679c\u5f53\u524d\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a1\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n            if len(minSubArray) == 1:\n                return minSubArray[0] + minSum\n            # \u904d\u5386\u5269\u4f59\u6570\u7ec4\n            for i in range(len(nums) - len(minSubArray)):\n                minSubArray.append(nums[i])\n                # \u627e\u5230\u5f53\u524d\u5b50\u6570\u7ec4\u7684\u6700\u5c0f\u503c\n                minSum = min(minSum, minSubArray[-1] + nums[i + len(minSubArray)])\n                # \u627e\u5230\u5f53\u524d\u5b50\u6570\u7ec4\u7684\u6700\u5c0f\u503c\n                minSum = min(minSum, minSubArray[-1] + nums[i + len(minSubArray)])\n                # \u79fb\u9664\u5f53\u524d\u5b50\u6570\u7ec4\n                minSubArray.pop()\n        return minSum\n\n    def minSubArraySumDP(nums):\n        dp = [[0] * (len(nums) + 1) for _ in range(", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums.sort()\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            continue\n        if nums[i] <= min_sum:\n            min_sum += nums[i]\n        else:\n            break\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = []\n    for i in range(len(nums)):\n        if i == 0:\n            result.append(nums[i])\n        elif nums[i] < nums[i - 1]:\n            result.append(nums[i])\n        else:\n            result.append(nums[i - 1] + nums[i])\n    return result[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    m = min(nums)\n    min_sums = []\n    for i in range(len(nums)):\n        if nums[i] == m:\n            min_sums.append(m)\n        else:\n            min_sums.append(m - nums[i])\n    return min(min_sums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums.sort()\n\n    def helper(i, j):\n        if i == j:\n            return nums[i]\n        if nums[i] >= nums[j]:\n            return helper(i, j - 1)\n        return min(helper(i, j - 1), helper(i + 1, j))\n\n    return helper(0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    start = 0\n    end = len(nums) - 1\n    maxSum = 0\n    while start <= end:\n        if nums[start] == nums[end]:\n            maxSum += nums[start]\n            start += 1\n            end -= 1\n        elif nums[start] > nums[end]:\n            maxSum += nums[end]\n            end -= 1\n        else:\n            maxSum += nums[start]\n            start += 1\n    return maxSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def helper(nums, start, end, sum):\n        if start == end:\n            return sum\n        if sum < 0:\n            return -1\n        if nums[start] < 0:\n            return helper(nums, start + 1, end, sum - nums[start])\n        return min(helper(nums, start + 1, end, sum),\n                   helper(nums, start + 1, end, sum + nums[start]))\n\n    return helper(nums, 0, len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    min = int(nums[0])\n    for i in range(1, len(nums)):\n        min = min + nums[i]\n        if min < 0:\n            return min\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums)\n\n    def minSum(start, end):\n        if start == end:\n            return nums[start]\n\n        left = 0\n        right = end - 1\n\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < nums[start]:\n                left = mid + 1\n            elif nums[mid] > nums[end]:\n                right = mid - 1\n            else:\n                left = mid + 1\n                right = mid - 1\n        return min(minSum(start, mid), minSum(mid + 1, end))\n\n    return minSum(0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, left, right):\n        if left >= right:\n            return 0\n        mid = (left + right) // 2\n        if nums[mid] < 0:\n            return minSubArraySumHelper(nums, left, mid - 1) + minSubArraySumHelper(nums, mid + 1, right)\n        else:\n            return minSubArraySumHelper(nums, left, mid) + minSubArraySumHelper(nums, mid + 1, right) + nums[mid]\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def find_min(nums, start, end):\n        if end < start:\n            return 0\n        min_sum = nums[start]\n        for i in range(start + 1, end):\n            min_sum += nums[i]\n            if min_sum < 0:\n                min_sum = 0\n        return min_sum\n    return find_min(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    min = 0\n    for i in range(len(nums)):\n        if i == 0:\n            min = nums[i]\n        elif nums[i] < min:\n            min = nums[i]\n        else:\n            min = min + nums[i]\n\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    sum = 0\n    min = 0\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            sum += nums[i] + nums[j]\n            if sum <= min:\n                min = sum\n            else:\n                sum = 0\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subArraySum(nums):\n        # convert to list of tuples to use list comprehension\n        return [(nums[i], sum(nums[i+1:])) for i in range(len(nums))]\n\n    # store min sum of subarray in minSum\n    minSum = 0\n\n    # convert list of tuples to dict\n    subArraySumDict = {sum:[] for sum in range(len(nums)+1)}\n\n    # convert dict to list\n    subArraySumList = [subArraySumDict[sum] for sum in range(len(nums)+1)]\n\n    # get minimum sum of subarray for each sum\n    for i in range(len(nums)):\n        subArraySumList[nums[i]].append((i, nums[i]))\n\n    # get minimum sum of subarray for each sum\n    for i in range(len(nums)):\n        for j in range(len(subArraySumList[nums[i]])):\n            if subArraySumList[nums[i]][j][1] < minSum:\n                minSum = subArraySumList[nums[i]][j][1]\n                minIndex = subArraySumList[nums[i]][j][0]\n\n    # get min sum of subarray and index", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    def minSubArraySum1(nums):\n        n = len(nums)\n        if n == 0:\n            return 0\n        min = nums[0]\n        for i in range(1, n):\n            if nums[i] < min:\n                min = nums[i]\n        return min\n\n    def minSubArraySum2(nums):\n        n = len(nums)\n        if n == 0:\n            return 0\n        min = nums[0]\n        for i in range(1, n):\n            if nums[i] <= min:\n                min += nums[i]\n        return min\n\n    return min(minSubArraySum1(nums), minSubArraySum2(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    left = right = 0\n    while left < len(nums):\n        while right < len(nums) and nums[right] <= nums[left]:\n            right += 1\n        if right == len(nums):\n            return nums[left]\n        min = nums[left]\n        while right < len(nums) and nums[right] == min:\n            right += 1\n        if right == len(nums):\n            return min\n        left = right + 1\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    nums.sort()\n    left = 0\n    right = len(nums)\n    sum = 0\n\n    while left < right:\n        sum += nums[left]\n        if nums[left] == nums[right - 1]:\n            right -= 1\n        else:\n            sum += nums[right - 1]\n            right -= 1\n        left += 1\n\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(map(int, nums))\n    if not nums:\n        return 0\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        minSum = min(minSum + nums[i], nums[i] + minSum)\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums.sort()\n    start = 0\n    end = len(nums)\n    while start < end:\n        if nums[start] < 0 or nums[end - 1] < 0:\n            start += 1\n            end -= 1\n        else:\n            if nums[start] + nums[end - 1] < nums[start + 1]:\n                start += 1\n            else:\n                end -= 1\n    return nums[start]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        minSum += nums[i]\n        if minSum < 0:\n            minSum = 0\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    # sort the array\n    nums.sort()\n    # find the start and end index of the minimum sum sub-array\n    start = 0\n    end = len(nums) - 1\n    # loop through the array\n    while start <= end:\n        # get the current sum\n        currentSum = nums[start] + nums[end]\n        # update the start and end index if necessary\n        if currentSum < nums[start]:\n            start += 1\n        elif currentSum > nums[end]:\n            end -= 1\n        else:\n            return currentSum\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if end == 0:\n            return 0\n        if start == end:\n            return nums[start]\n        return min(nums[start], minSubArraySumHelper(nums, start + 1, end - 1) + nums[end])\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)\n\nnums = [-1, -2, -3]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def dfs(nums, cur_sum):\n        if not nums:\n            return cur_sum\n        min_sum = cur_sum\n        for i in range(len(nums)):\n            if i == 0:\n                continue\n            elif i == len(nums) - 1:\n                min_sum = min(min_sum + nums[i], cur_sum + nums[i])\n            else:\n                if nums[i] + min_sum < cur_sum:\n                    min_sum = nums[i] + cur_sum\n        return dfs(nums[1:], min_sum)\n\n    return dfs(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        minSum = min(minSum + nums[i], minSum + nums[i] + nums[i - 1])\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    return min(sum(nums[i:i+2]) for i in range(len(nums)-1))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumRec(nums, left, right):\n        if left == right:\n            return nums[left]\n        else:\n            minSum = nums[left] + minSubArraySumRec(nums, left + 1, right)\n            if minSum < nums[left]:\n                minSum = nums[left]\n            return minSum\n\n    return minSubArraySumRec(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def _minSubArraySum(nums):\n        if not nums:\n            return 0\n        sub_array = []\n        sub_array.append(nums[0])\n        for i in range(1, len(nums)):\n            sub_array.append(nums[i])\n            sum = sub_array[-1] + sub_array[-2]\n            if sum < sub_array[-2]:\n                sub_array[-2] = sum\n            else:\n                sub_array.pop(-1)\n        return sub_array[-1]\n    return _minSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # \u8bb0\u5f55\u6bcf\u4e00\u8f6e\u7684\u6700\u5c0f\u503c\uff0c\u521d\u59cb\u5316\u65f6\u662f0\n    min_sum = 0\n\n    # \u904d\u5386nums\u6570\u7ec4\n    for i in range(len(nums)):\n        # \u904d\u5386nums\u6570\u7ec4\uff0ci\u4f4d\u7f6e\u4e4b\u524d\u7684\u6570\u7ec4\n        for j in range(0, i + 1):\n            # \u904d\u5386nums\u6570\u7ec4\uff0ci\u4f4d\u7f6e\u4e4b\u540e\u7684\u6570\u7ec4\n            for k in range(i + 1, len(nums)):\n                # \u8ba1\u7b97\u5f53\u524di\u4f4d\u7f6e\u7684nums[i] + nums[j] + nums[k]\n                temp_sum = nums[i] + nums[j] + nums[k]\n\n                # \u5224\u65adtemp_sum\u662f\u5426\u5c0f\u4e8emin_sum\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0min_sum\n                if temp_sum < min_sum:\n                    min_sum = temp_sum\n\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def sumArray(arr, start, end):\n        if start >= end:\n            return 0\n        return arr[start] + sumArray(arr, start + 1, end)\n\n    def minSubArraySum1(nums):\n        \"\"\"\n        Time complexity: O(n^2)\n        Space complexity: O(n)\n        \"\"\"\n        # If the array is empty, return 0\n        if len(nums) == 0:\n            return 0\n        # If the array is not empty, find the minimum sum of the first and the last elements\n        else:\n            return min(nums[0], nums[-1]) + minSubArraySum1(nums[1:])\n\n    def minSubArraySum2(nums):\n        \"\"\"\n        Time complexity: O(n^2)\n        Space complexity: O(1)\n        \"\"\"\n        # If the array is empty, return 0\n        if len(nums) == 0:\n            return 0\n        # If the array is not empty, find the minimum sum of the first and the last elements\n        else:\n            return min(nums[0], nums[-1]) + min(sumArray(nums, 1, len(nums) - 1), sumArray(nums, 0, len(nums) - 2))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(set(nums))\n    return sum(nums[:i + 1]) for i in range(len(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subArraySum(nums, start, end):\n        sum = 0\n        for i in range(start, end):\n            sum += nums[i]\n        return sum\n\n    if not nums:\n        return 0\n\n    for i in range(len(nums)):\n        min_sum = subArraySum(nums, i, len(nums) - 1)\n        if min_sum < 0:\n            return min_sum\n        else:\n            min_sum += nums[i]\n\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    def findSubArray(nums):\n        \"\"\"\n        Find a subarray of nums with minimum sum.\n        \"\"\"\n        sum = 0\n        start = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                break\n            sum += nums[i]\n            if nums[i] < 0 and sum < 0:\n                return start, i\n            if sum < 0:\n                return None\n            start += 1\n        return None\n\n    def findSum(start, end):\n        \"\"\"\n        Find the sum of a subarray of nums.\n        \"\"\"\n        sum = 0\n        for i in range(start, end):\n            sum += nums[i]\n        return sum\n\n    # Find a subarray of nums with minimum sum.\n    start, end = findSubArray(nums)\n    if start == None:\n        return None\n    sum = findSum(start, end)\n    if sum == 0:\n        return 0\n\n    # Find the subarray with minimum sum.\n    minSum = sum\n    for i in range(start, end):\n        if nums[i] == 0:\n            continue\n        minSum = min(minSum, sum - nums[i])\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def helper(nums, n):\n        if n == 0:\n            return 0\n        elif n == len(nums):\n            return nums[-1]\n        else:\n            return helper(nums, n - 1) + nums[n - 1]\n\n    return helper(nums, len(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def check(nums, sum):\n        if len(nums) == 0:\n            return True\n        if sum > 0:\n            return False\n        else:\n            return check(nums, sum + nums[0])\n\n    res = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            sum = nums[i] + nums[j]\n            if check(nums, sum):\n                res = sum\n    return res", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def _helper(i, j):\n        if i == j:\n            return 0\n        elif j == len(nums):\n            return nums[i]\n        else:\n            return min(_helper(i, j - 1),\n                       _helper(i + 1, j),\n                       nums[i] + nums[j])\n\n    return _helper(0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def sumSubArray(nums, start, end):\n        sum = 0\n        for i in range(start, end):\n            sum += nums[i]\n        return sum\n\n    def minSubArray(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if end - start == 2:\n            return min(nums[start], nums[end - 1]) + nums[start + 1]\n        if end - start == 3:\n            return min(nums[start], nums[end - 1], nums[end - 2]) + nums[start + 1] + nums[end - 1] + nums[start + 2]\n        if end - start == 4:\n            return min(nums[start], nums[end - 1], nums[end - 2], nums[end - 3]) + nums[start + 1] + nums[end - 1] + nums[start + 2] + nums[end - 2] + nums[start + 3]\n        if end - start >= 5:\n            return min(nums[start], nums[end - 1], nums[end - 2], nums[end - 3], nums[end - 4]) + nums[start", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def sumSubArray(nums, sum):\n        for i in range(len(nums) - 1, 0, -1):\n            if nums[i] + nums[i - 1] > sum:\n                return sumSubArray(nums[i:], sum - nums[i])\n        return sum\n\n    return sumSubArray(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def subArraySum(nums, sum, minSum):\n        if sum == minSum:\n            return True\n        for i in range(len(nums) - sum):\n            if subArraySum(nums[i:], sum + nums[i], minSum):\n                return True\n        return False\n\n    return min(sum(nums) for nums in [nums[i:] for i in range(len(nums))] if subArraySum(nums, 0, 0))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    result = []\n    for i in range(len(nums)):\n        if i + 1 < len(nums):\n            if nums[i] + nums[i + 1] < nums[i + 1]:\n                result.append(nums[i] + nums[i + 1])\n            else:\n                result.append(nums[i + 1])\n        else:\n            result.append(nums[i])\n    return min(result)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums):\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        return min(minSubArraySumHelper(nums[:-1]), nums[0] + minSubArraySumHelper(nums[1:]))\n\n    return minSubArraySumHelper(nums)\n\nnums = [-1, -2, -3]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if start == end:\n            return nums[start]\n        mid = (start + end) // 2\n        left = minSubArray(nums, start, mid)\n        right = minSubArray(nums, mid + 1, end)\n        return min(left, right) + nums[mid]\n\n    if not nums:\n        return 0\n    return minSubArray(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end, sum):\n        if start >= end:\n            return sum\n        minSum = min(sum, minSubArray(nums, start + 1, end, sum + nums[start]))\n        return minSum\n\n    return minSubArray(nums, 0, len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = 0\n    for i in range(len(nums)):\n        if i == len(nums) - 1:\n            min += nums[i]\n        else:\n            min += nums[i]\n            if min < 0:\n                return min\n            min += minSubArraySum(nums[i+1:])\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSumSubArray(nums, start, end):\n        \"\"\"\n        Returns the minimum sum of a sub array of nums from start to end.\n        nums - the array of integers\n        start - the start index\n        end - the end index\n        \"\"\"\n        if start > end:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        return min(nums[start] + minSumSubArray(nums, start + 1, end),\n                   nums[end - 1] + minSumSubArray(nums, start, end - 1))\n\n    return minSumSubArray(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    minSum = nums[0]\n    for i in xrange(1, len(nums)):\n        minSum += nums[i]\n        if minSum < 0:\n            break\n        for j in xrange(i, len(nums)):\n            minSum -= nums[j]\n            if minSum < 0:\n                break\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(i, j):\n        if i >= j:\n            return 0\n        else:\n            return nums[i] + minSum(i+1, j)\n\n    return minSum(0, len(nums)-1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def dfs(nums, sum):\n        if len(nums) == 0:\n            return sum\n        else:\n            new_sum = dfs(nums, sum + nums[0])\n            return new_sum if new_sum < sum else sum\n\n    return dfs(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n\n    def sumOfSubArray(start, end):\n        res = 0\n        for i in range(start, end):\n            res += nums[i]\n        return res\n\n    for i in range(n):\n        sum = sumOfSubArray(0, i)\n        if sum < 0:\n            return sum\n        else:\n            if sum < nums[i]:\n                return sum\n\n    return sumOfSubArray(0, n - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if end == len(nums):\n            return nums[start]\n        minSum = nums[start]\n        minIndex = start\n        for i in range(start + 1, end + 1):\n            if nums[i] + minSum < minSubArray(nums, start, i):\n                minSum = nums[i] + minSum\n                minIndex = i\n        return minSubArray(nums, start, minIndex)\n    return minSubArray(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    # print(nums)\n    # print(len(nums))\n    # print(nums[-1])\n    # print(nums[-2])\n    # print(nums[-3])\n    # print(nums[-4])\n    # print(nums[-5])\n    # print(nums[-6])\n    # print(nums[-7])\n    # print(nums[-8])\n    # print(nums[-9])\n    # print(nums[-10])\n    # print(nums[-11])\n    # print(nums[-12])\n    # print(nums[-13])\n    # print(nums[-14])\n    # print(nums[-15])\n    # print(nums[-16])\n    # print(nums[-17])\n    # print(nums[-18])\n    # print(nums[-19])\n    # print(nums[-20])\n    # print(nums[-21])\n    # print(nums[-22])\n    # print(nums[-23])\n    # print(nums[-24])\n    # print(nums[-25])\n    # print(nums[-26])\n    # print(nums[-27])\n    # print(nums[-28])\n    # print(nums[-29])\n    # print(", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums):\n        minSum = float(\"inf\")\n        for i in range(len(nums)):\n            minSum = min(minSum, min(nums) + minSubArraySumHelper(nums[i+1:]))\n        return minSum\n\n    return minSubArraySumHelper(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n < 2:\n        return 0\n    return min(sum(nums[:i + 1]) for i in range(n - 1) if nums[i] < nums[i + 1])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    assert len(nums) > 0\n\n    def minSubArraySum_helper(nums, start, end):\n        if end - start == 0:\n            return 0\n\n        if end - start == 1:\n            return nums[start]\n\n        left = minSubArraySum_helper(nums, start, start + end - 1)\n        right = minSubArraySum_helper(nums, start + end - 1, end)\n        return min(left, right) + nums[start + end - 1]\n\n    return minSubArraySum_helper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = int('inf')\n    for i in range(len(nums)):\n        min_sum = min(nums[i], min_sum + nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, sum):\n        if sum > 0:\n            return\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                nums[i] -= 1\n                sum += nums[i]\n                minSubArraySumHelper(nums, sum)\n\n    minSubArraySumHelper(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    def minSum(nums):\n        minSum = 0\n        for i in range(len(nums)):\n            minSum += nums[i]\n            for j in range(i+1, len(nums)):\n                minSum += nums[j]\n                if minSum > 0:\n                    return minSum\n        return minSum\n    return minSum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sums = [nums[0], -nums[0]]\n    for i in range(1, len(nums)):\n        min_sums.append(min(min_sums[i-1] + nums[i], min_sums[i-1] - nums[i]))\n    return min(min_sums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums: return 0\n    min_sum = 0\n    for i in range(len(nums)):\n        min_sum += nums[i]\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] <= min_sum:\n                min_sum = nums[i] + nums[j]\n                min_pos = i\n            if nums[i] + nums[j] < min_sum:\n                min_sum = nums[i] + nums[j]\n                min_pos = j\n\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] < nums[i]:\n                nums[i] += nums[j]\n                nums[j] = 0\n    return nums[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min = float('inf')\n    for i in range(1, len(nums)):\n        temp_sum = nums[i]\n        for j in range(i - 1, -1, -1):\n            if temp_sum < 0:\n                break\n            temp_sum -= nums[j]\n        if temp_sum < min:\n            min = temp_sum\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for i in range(len(nums)):\n        minSum += nums[i]\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[i] and nums[j] - nums[i] > minSum:\n                minSum = nums[j] - nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return sum(nums[start:])\n        else:\n            return min(minSubArraySumHelper(nums, start + 1, end),\n                       minSubArraySumHelper(nums, start, end - 1) + nums[start])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(map(int, nums))\n    if not nums:\n        return 0\n    else:\n        return min(nums) + minSubArraySum(nums[1:]) if nums[0] else minSubArraySum(nums[1:])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySum_recur(nums, start, end):\n        if end - start == 0:\n            return 0\n        elif nums[start] == 0:\n            return minSubArraySum_recur(nums, start + 1, end)\n        else:\n            return min(minSubArraySum_recur(nums, start + 1, end),\n                       minSubArraySum_recur(nums, start, end - nums[start]))\n\n    return minSubArraySum_recur(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(i, j):\n        if i == j:\n            return 0\n        else:\n            return min(nums[i] + minSum(i+1, j), nums[i] + minSum(i, j-1))\n\n    return minSum(0, len(nums)-1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums):\n        if len(nums) == 0:\n            return 0\n        else:\n            return min([nums[i] + minSubArray(nums[1:i]) for i in range(len(nums))])\n\n    return minSubArray(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def findMinSubArraySum(nums):\n        if len(nums) <= 1:\n            return sum(nums)\n        else:\n            return min(findMinSubArraySum(nums[:-1]) + nums[-1], findMinSubArraySum(nums[1:]) + nums[0])\n\n    return findMinSubArraySum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def helper(nums, start, end, sum):\n        if start >= end:\n            return sum\n        if sum < 0:\n            return 0\n        if sum == 0:\n            return 1\n        if sum > nums[start]:\n            return helper(nums, start+1, end, sum - nums[start])\n        if sum > nums[end-1]:\n            return helper(nums, start, end-1, sum - nums[end-1])\n        return max(helper(nums, start+1, end-1, sum), helper(nums, start, end-1, sum))\n    return helper(nums, 0, len(nums)-1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min:\n            min = nums[i]\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] < min:\n            min = nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def findMinSubArraySum(nums, start, end):\n        if start >= end:\n            return 0\n        sum = nums[start]\n        for i in range(start + 1, end + 1):\n            sum += nums[i]\n        if sum < nums[end]:\n            sum += nums[end]\n        return sum\n    return findMinSubArraySum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = nums[0]\n    for i in range(1, len(nums)):\n        min += nums[i]\n        if min > nums[i]:\n            min -= nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def getMin(array, sum):\n        if not array:\n            return sum\n        else:\n            return min(getMin(array[1:], sum + array[0]), getMin(array, sum + array[0]))\n\n    return getMin(nums, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    def minSubArraySumHelper(nums, start, end, sum):\n        if sum < 0:\n            return sum\n        if end == len(nums):\n            return sum\n        minSum = minSubArraySumHelper(nums, start + 1, end, sum + nums[start])\n        if minSum < 0:\n            return minSum\n        minSum = minSubArraySumHelper(nums, start + 1, end, sum)\n        if minSum < 0:\n            return minSum\n        minSum = minSubArraySumHelper(nums, start + 1, end, sum - nums[start])\n        if minSum < 0:\n            return minSum\n        return -1\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def sum(nums):\n        return reduce(lambda x, y: x + y, nums)\n\n    def minSubArraySum(nums, start, end):\n        if start >= end:\n            return sum(nums)\n        return min([minSubArraySum(nums, start, i), minSubArraySum(nums, i + 1, end)] +\n                    [sum(nums[start:i])] + [sum(nums[i + 1:end])])\n\n    return minSubArraySum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    # brute force\n    min_sum = 0\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            min_sum = min(nums[i] + nums[j], min_sum)\n\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def sumArray(arr):\n        res = 0\n        for i in arr:\n            res += i\n        return res\n\n    def sumArraySub(arr, start, end):\n        res = 0\n        for i in range(start, end):\n            res += arr[i]\n        return res\n\n    def minSubArray(arr):\n        start = 0\n        end = len(arr) - 1\n        res = sumArraySub(arr, start, end)\n        while start < len(arr) - 1 and end >= 0:\n            if arr[start] > arr[end]:\n                end -= 1\n            elif arr[start] < arr[end]:\n                start += 1\n            else:\n                res = min(res, sumArraySub(arr, start, end))\n                start += 1\n                end -= 1\n        return res\n\n    return minSubArray(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    # print('minSubArraySum')\n    # print(nums)\n    n = len(nums)\n    min = float('inf')\n    for i in range(1, n):\n        if nums[i] >= nums[i-1]:\n            min = minSubArraySum(nums[i:]) + nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(arr, start, end):\n        if start == end:\n            return arr[start]\n        if arr[start] > arr[end]:\n            return minSubArray(arr, start + 1, end)\n        else:\n            return min(minSubArray(arr, start + 1, end), arr[start] + minSubArray(arr, start + 1, end - 1))\n\n    return min(minSubArray(nums, 0, len(nums) - 1))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        result = 0\n        for i in range(len(nums)):\n            result += nums[i]\n            if result < 0:\n                return result\n        return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(arr):\n        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        return min(minSubArray(arr[1:]), arr[0] + minSubArray(arr[1:]))\n    return minSubArray(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n\n    maxsum = 0\n    for i in xrange(n):\n        maxsum += nums[i]\n        if maxsum > 0:\n            break\n\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            if nums[i] + nums[j] > maxsum:\n                maxsum = nums[i] + nums[j]\n\n    return maxsum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n\n    def subArray(nums, start, end):\n        sum = 0\n        for i in range(start, end + 1):\n            sum += nums[i]\n        return sum\n\n    def minSubArray(nums, start, end):\n        if start == end:\n            return nums[start]\n\n        mid = (start + end) // 2\n        leftSum = minSubArray(nums, start, mid)\n        rightSum = minSubArray(nums, mid + 1, end)\n\n        return min(leftSum + nums[mid], rightSum + nums[mid])\n\n    return min(minSubArray(nums, 0, len(nums) - 1),\n               minSubArray(nums, 0, len(nums) - 1))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    else:\n        start = 0\n        end = len(nums) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if nums[mid] < 0:\n                start = mid + 1\n            else:\n                end = mid - 1\n        return nums[start] + minSubArraySum(nums) * (start + 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # \u52a8\u6001\u89c4\u5212\n    # dp[i]\u8868\u793a\u4ece\u7b2c0\u4e2a\u5143\u7d20\u5230\u7b2ci\u4e2a\u5143\u7d20\u7684\u6700\u5c0f\u548c\n    dp = [0] * len(nums)\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i-1])\n    return dp[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    minSum = nums[0]\n    while left < right:\n        sum = nums[left] + nums[right]\n        if sum < minSum:\n            minSum = sum\n        if nums[left] < nums[right]:\n            left += 1\n        else:\n            right -= 1\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def find_min_subarray_sum(arr, start, end):\n        if start == end:\n            return sum(arr[start:])\n        mid = start + (end - start) // 2\n        return min(find_min_subarray_sum(arr, start, mid), find_min_subarray_sum(arr, mid + 1, end))\n\n    return find_min_subarray_sum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minimumSum(subarray):\n        \"\"\"\n        Finds the minimum sum of any non-empty subarray\n        \"\"\"\n        if len(subarray) == 0:\n            return 0\n        else:\n            return subarray[0] + minimumSum(subarray[1:])\n\n    return minimumSum(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = int('inf')\n    for i in range(len(nums)):\n        minSum = min(minSum, nums[i] + minSubArraySum(nums[i+1:]))\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def check(nums, sum):\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                return False\n            if i == len(nums) - 1:\n                return True\n            if sum + nums[i] < nums[i + 1]:\n                return False\n        return True\n\n    def minSum(nums, sum):\n        if len(nums) == 0:\n            return 0\n        if sum == 0:\n            return 0\n        if sum < 0:\n            return minSum(nums, 0)\n        if sum > 0:\n            return minSum(nums, sum)\n        return min(minSum(nums, i) for i in range(sum))\n\n    return minSum(nums, 0)\n\nnums = [2, 3, 4, 1, 2, 4]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] == 0:\n            return 0\n        if nums[end] == 0:\n            return 0\n        return min(minSubArraySumHelper(nums, start + 1, end),\n                   minSubArraySumHelper(nums, start, end - 1) + nums[end])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def helper(nums, start, end):\n        if end - start <= 1:\n            return nums[start]\n        return min(helper(nums, start, end - 1), helper(nums, start + 1, end))\n\n    return helper(nums, 0, len(nums) - 1)\n\nnums = [2, 3, 4, 1, 2, 4]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def check(nums, sum, index):\n        if len(nums) <= index:\n            return False\n        if sum < nums[index]:\n            return False\n        if sum == nums[index]:\n            return True\n        return check(nums[index+1:], sum, index+1)\n    nums = sorted(nums)\n    return sum(nums) + min(check(nums, 0, 0), key=lambda x: check(x, 0, 0))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return sum(nums) if len(nums) == 0 else min(sum(nums[i:j] for i, j in zip(range(len(nums)), range(len(nums)))) for j in range(len(nums) + 1))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    # generate all possible sub arrays of nums\n    sub_arrays = [nums[i:] for i in range(len(nums))]\n\n    # find the minimum sum of each sub array\n    min_sums = [sum(sub_arrays[i]) for i in range(len(sub_arrays))]\n\n    # find the minimum sum among all sub arrays\n    return min(min_sums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def helper(nums, start, end, sum):\n        if start >= end:\n            return sum\n        mid = (start + end) // 2\n        if nums[mid] < 0:\n            return helper(nums, start, mid - 1, sum - nums[mid])\n        return min(helper(nums, start, mid - 1, sum),\n                   helper(nums, mid + 1, end, sum))\n    return helper(nums, 0, len(nums) - 1, 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def findMin(nums, cur_sum, min_sum):\n        if cur_sum >= min_sum:\n            return min_sum\n        for i in range(len(nums)):\n            cur_sum += nums[i]\n            min_sum = findMin(nums, cur_sum, min_sum)\n        return min_sum\n\n    return findMin(nums, 0, 0)"]]