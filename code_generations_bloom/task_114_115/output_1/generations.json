[["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                       minSubArraySumHelper(nums, start, end - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] > 0:\n            return nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return minSubArraySumHelper(nums, start + 1, end) + minSubArraySumHelper(nums, start + 1, end)\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start]\n        for i in range(start + 1, end + 1):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start == end:\n            return nums[start]\n        if nums[start] > nums[end]:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                     nums[end] + minSubArraySumHelper(nums, start, end - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if start >= end:\n            return 0\n        if start == end - 1:\n            return nums[end - 1]\n        return min(nums[start] + minSubArray(nums, start + 1, end),\n                   nums[end - 1] + minSubArray(nums, start, end - 1))\n\n    return minSubArray(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end + 1):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    if n == 2:\n        return nums[0] + nums[1]\n    # \u9012\u5f52\n    return min(nums[0] + minSubArraySum(nums[1:]),\n               nums[1] + minSubArraySum(nums[:-1]))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum += nums[i]\n        if min_sum < 0:\n            return min_sum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if nums[end - 1] < 0:\n            return minSubArraySumHelper(nums, start, end - 1) + minSubArraySumHelper(nums, end - 1, end)\n        return min(nums[start], minSubArraySumHelper(nums, start + 1, end - 1) + nums[end - 1])\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if end - start == 0:\n            return 0\n        return min(nums[start] + minSum(nums, start + 1, end),\n                   nums[end - 1] + minSum(nums, start, end - 1))\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSum(nums, start + 1, end)\n        else:\n            return min(nums[start] + minSum(nums, start + 1, end),\n                       minSum(nums, start + 1, end) + nums[end])\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start]\n        for i in range(start + 1, end + 1):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSubArraySumHelper(nums, start + 1, end)\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] == 0:\n            return nums[end]\n        return min(nums[start], minSum(nums, start + 1, end) + nums[start])\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end + 1):\n            if nums[i] + minSum < 0:\n                minSum = nums[i] + minSum\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if end - start == 2:\n            return nums[start] + nums[end - 1]\n        if end - start == 3:\n            return nums[start] + nums[end - 1] + nums[end - 2]\n        if end - start == 4:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3]\n        if end - start == 5:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3] + nums[end - 4]\n        if end - start == 6:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3] + nums[end - 4] + nums[end - 5]\n        if end - start == 7:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3] + nums[end - 4] + nums[end - 5] + nums[end - 6]\n        if end - start == 8:\n            return nums[start]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    def minSubArraySumHelper(nums, minSum):\n        if len(nums) == 0:\n            return 0\n        else:\n            minSum = min(minSum, nums[0])\n            minSum = min(minSum, minSubArraySumHelper(nums[1:], minSum))\n            return minSum\n\n    return minSubArraySumHelper(nums, float('inf'))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start == end:\n            return nums[start]\n        if nums[start] > nums[end]:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                      nums[end] + minSubArraySumHelper(nums, start, end - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start == end:\n            return nums[start]\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                         nums[end] + minSubArraySumHelper(nums, start, end - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum += nums[i]\n        if min_sum < 0:\n            return min_sum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if start == end - 1:\n            return nums[start]\n        return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                   nums[end - 1] + minSubArraySumHelper(nums, start, end - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if start == end:\n            return nums[start]\n        if nums[start] > nums[end]:\n            return minSubArray(nums, start + 1, end)\n        else:\n            return min(nums[start] + minSubArray(nums, start + 1, end),\n                         nums[end] + minSubArray(nums, start, end - 1))\n\n    return minSubArray(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end):\n            if nums[i] < nums[start]:\n                minSum += nums[i]\n                break\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + min_sum)\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] > 0:\n            return nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return minSubArraySumHelper(nums, start + 1, end) + minSubArraySumHelper(nums, start + 1, end)\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        mid = (start + end) // 2\n        if nums[mid] < 0:\n            return minSubArraySumHelper(nums, start, mid - 1) + minSubArraySumHelper(nums, mid + 1, end)\n        else:\n            return min(minSubArraySumHelper(nums, start, mid - 1), minSubArraySumHelper(nums, mid + 1, end)) + nums[mid]\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if nums[end] < nums[start]:\n            return minSubArraySumHelper(nums, start, end - 1) + nums[end]\n        return min(minSubArraySumHelper(nums, start, end - 1),\n                   minSubArraySumHelper(nums, start + 1, end) + nums[start])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        mid = (start + end) // 2\n        leftSum = minSubArraySumHelper(nums, start, mid)\n        rightSum = minSubArraySumHelper(nums, mid + 1, end)\n        return min(leftSum + nums[mid], rightSum + nums[mid])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if nums[end] > nums[start]:\n            return minSubArraySumHelper(nums, start, end - 1) + nums[end]\n        else:\n            return minSubArraySumHelper(nums, start, end - 1) + nums[start]\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return min(minSubArraySumHelper(nums, 0, len(nums) - 1), key=lambda x: x) if nums else 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum += nums[i]\n        if min_sum < 0:\n            return min_sum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        min_sum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end + 1):\n            if nums[i] < nums[start]:\n                min_sum += nums[i]\n                break\n        return min_sum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start == end:\n            return nums[start]\n        if nums[start] > nums[end]:\n            return minSubArraySumHelper(nums, end + 1, start)\n        if nums[start] < nums[end]:\n            return min(minSubArraySumHelper(nums, start + 1, end),\n                      minSubArraySumHelper(nums, start, end + 1))\n        return min(minSubArraySumHelper(nums, start + 1, end),\n                  minSubArraySumHelper(nums, start, end + 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min_sum:\n            min_sum = nums[i]\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum += nums[i]\n        if min_sum < 0:\n            return min_sum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSubArraySumHelper(nums, start + 1, end - 1)\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    if n == 2:\n        return nums[0] + nums[1]\n    min1 = minSubArraySum(nums[:-1])\n    min2 = minSubArraySum(nums[1:])\n    return min(min1, min2) + nums[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + min_sum)\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min_sum:\n            min_sum = nums[i]\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start], minSubArraySumHelper(nums, start + 1, end) + nums[start])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                       minSubArraySumHelper(nums, start + 1, end) + nums[start])\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + min_sum)\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if nums[start] + minSubArraySumHelper(nums, start + 1, end) < nums[end]:\n            return nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return nums[end] + minSubArraySumHelper(nums, start, end - 1)\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if start == end:\n            return nums[start]\n        if nums[start] > nums[end]:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                      nums[end] + minSubArraySumHelper(nums, start, end - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        if nums[end] < 0:\n            return minSubArraySumHelper(nums, start, end - 1)\n        return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                   nums[end] + minSubArraySumHelper(nums, start, end - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if end - start == 2:\n            return nums[start] + nums[start + 1]\n        if end - start == 3:\n            return nums[start] + nums[start + 1] + nums[start + 2]\n        if end - start == 4:\n            return nums[start] + nums[start + 1] + nums[start + 2] + nums[start + 3]\n        if end - start == 5:\n            return nums[start] + nums[start + 1] + nums[start + 2] + nums[start + 3] + nums[start + 4]\n        if end - start == 6:\n            return nums[start] + nums[start + 1] + nums[start + 2] + nums[start + 3] + nums[start + 4] + nums[start + 5]\n        if end - start == 7:\n            return nums[start] + nums[start + 1] + nums[start + 2] + nums[start + 3] + nums[start + 4] + nums[start + 5] + nums[start + 6]\n        if end - start == 8:\n            return nums[start]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if start == end:\n            return sum(nums)\n        else:\n            return min(minSubArray(nums, start, end - 1),\n                       minSubArray(nums, start + 1, end) + nums[end - 1])\n\n    return minSubArray(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] == nums[end]:\n            return nums[start]\n        return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                   nums[end] + minSubArraySumHelper(nums, start, end - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSubArraySumHelper(nums, start + 1, end - 1)\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start], minSubArraySumHelper(nums, start + 1, end) + nums[start])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        mid = (start + end) // 2\n        if nums[mid] < 0:\n            return minSubArraySumHelper(nums, start, mid - 1) + minSubArraySumHelper(nums, mid + 1, end)\n        else:\n            return min(minSubArraySumHelper(nums, start, mid - 1), minSubArraySumHelper(nums, mid + 1, end)) + nums[mid]\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < nums[start]:\n                minSum = nums[start]\n        return minSum\n    return min(map(minSubArraySumHelper, nums, 0, len(nums) - 1))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if nums[start] + minSubArraySumHelper(nums, start + 1, end - 1) < nums[end]:\n            return nums[start] + minSubArraySumHelper(nums, start + 1, end - 1)\n        return nums[end]\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return min(map(minSubArraySumHelper, nums, 0, len(nums) - 1))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end):\n            if nums[i] + minSum < nums[start] + minSum:\n                minSum = nums[i] + minSubArraySumHelper(nums, start + 1, end)\n        return minSum\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSum(nums, start + 1, end)\n        for i in range(start + 1, end):\n            if nums[i] < 0:\n                minSum += nums[i]\n            else:\n                minSum += nums[i] - nums[start]\n        return minSum\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] > 0:\n            return nums[start] + minSum(nums, start + 1, end)\n        else:\n            return minSum(nums, start + 1, end) + minSum(nums, start + 1, end)\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if nums[start] + minSubArraySumHelper(nums, start + 1, end) < nums[end]:\n            return nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return nums[end]\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, n):\n        min_sum = min(min_sum + nums[i], nums[i] + min_sum)\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum += nums[i]\n        if min_sum < 0:\n            return min_sum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return min(map(minSubArraySumHelper, nums, 0, len(nums) - 1))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start == end:\n            return nums[start]\n        minSum = nums[start]\n        for i in range(start + 1, end + 1):\n            minSum += nums[i]\n            if minSum < nums[start]:\n                minSum = nums[start]\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if start == end - 1:\n            return nums[end - 1]\n        return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                   nums[end - 1] + minSubArraySumHelper(nums, start, end - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                       minSubArraySumHelper(nums, start + 1, end) + nums[end])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    # \u601d\u8def\uff1a\n    # \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if end - start == 2:\n            return nums[start] + nums[end - 1]\n        if end - start == 3:\n            return nums[start] + nums[end - 1] + nums[end - 2]\n        if end - start == 4:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3]\n        if end - start == 5:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3] + nums[end - 4]\n        if end - start == 6:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3] + nums[end - 4] + nums[end - 5]\n        if end - start == 7:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3] + nums[end - 4] + nums[end - 5] + nums[end - 6]\n        if end - start == 8:\n            return nums[start]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if start == end:\n            return nums[start]\n        if nums[start] > nums[end]:\n            return minSubArray(nums, start + 1, end)\n        if nums[start] < nums[end]:\n            return min(nums[start] + minSubArray(nums, start + 1, end),\n                       nums[end] + minSubArray(nums, start, end - 1))\n        return min(nums[start] + minSubArray(nums, start + 1, end),\n                   nums[end] + minSubArray(nums, start, end - 1))\n\n    return minSubArray(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start]\n        for i in range(start + 1, end + 1):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if nums[end - 1] > nums[start]:\n            return minSubArraySumHelper(nums, start + 1, end - 1) + nums[start]\n        else:\n            return minSubArraySumHelper(nums, start, end - 1) + nums[end - 1]\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] == nums[end]:\n            return nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                   nums[end] + minSubArraySumHelper(nums, start, end - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if end - start == 2:\n            return nums[start] + nums[end - 1]\n        if end - start == 3:\n            return nums[start] + nums[end - 1] + nums[end - 2]\n        if end - start == 4:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3]\n        if end - start == 5:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3] + nums[end - 4]\n        if end - start == 6:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3] + nums[end - 4] + nums[end - 5]\n        if end - start == 7:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3] + nums[end - 4] + nums[end - 5] + nums[end - 6]\n        if end - start == 8:\n            return nums[start]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                minSum = 0\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        if nums[end] < 0:\n            return minSubArraySumHelper(nums, start, end - 1)\n        return nums[start] + minSubArraySumHelper(nums, start + 1, end) + \\\n            minSubArraySumHelper(nums, start, end - 1)\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if nums[start] > nums[end]:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end - 1),\n                       nums[end] + minSubArraySumHelper(nums, start, end - 1))\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        minSum = min(minSum + nums[i], nums[i])\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if start == end:\n            return nums[start]\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSubArraySumHelper(nums, start + 1, end)\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums):\n        if len(nums) == 0:\n            return 0\n        else:\n            return min(nums) + minSubArray(nums[1:])\n\n    return minSubArray(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if start == end:\n            return nums[start]\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < nums[start]:\n                minSum = nums[start]\n        return minSum\n\n    return min([minSubArray(nums, start, end) for start, end in zip(range(len(nums)), range(len(nums) + 1, 0, -1))])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end + 1):\n            if nums[i] < nums[start]:\n                minSum += nums[i]\n            else:\n                break\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start], minSubArraySumHelper(nums, start + 1, end) + nums[start])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if start == end:\n            return nums[start]\n        else:\n            return min(nums[start] + minSum(nums, start + 1, end),\n                       minSum(nums, start, end - 1))\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, n):\n        min_sum = min(min_sum, nums[i] + minSubArraySum(nums[i:]))\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    def minSubArraySumHelper(nums, start, end):\n        if end == len(nums):\n            return sum(nums[start:end])\n        else:\n            return min(minSubArraySumHelper(nums, start, end + 1),\n                       minSubArraySumHelper(nums, start + 1, end))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if start == end - 1:\n            return nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                    nums[end - 1] + minSubArraySumHelper(nums, start, end - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] > 0:\n            return nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return minSubArraySumHelper(nums, start + 1, end) + minSubArraySumHelper(nums, start + 1, end)\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start == end:\n            return nums[start]\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < nums[start]:\n                minSum = nums[start]\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if start == end - 1:\n            return nums[end - 1]\n        return min(minSubArraySumHelper(nums, start + 1, end),\n                   minSubArraySumHelper(nums, start, end - 1) + nums[end - 1])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSum(nums, start + 1, end)\n        if nums[start] == 0:\n            return minSum(nums, start + 1, end)\n        return min(nums[start], minSum(nums, start + 1, end) + nums[start])\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        mid = (start + end) // 2\n        if nums[mid] < 0:\n            return minSubArraySumHelper(nums, start, mid - 1) + minSubArraySumHelper(nums, mid + 1, end)\n        else:\n            return min(minSubArraySumHelper(nums, start, mid - 1), minSubArraySumHelper(nums, mid + 1, end)) + nums[mid]\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start == end:\n            return nums[start]\n        if nums[start] > nums[end]:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                     nums[end] + minSubArraySumHelper(nums, start, end - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if nums[end] > nums[start]:\n            return minSubArraySumHelper(nums, start, end - 1) + nums[end]\n        else:\n            return minSubArraySumHelper(nums, start + 1, end) + nums[start]\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end):\n            if nums[i] + minSum < nums[start] + minSum:\n                minSum = nums[i] + minSubArraySumHelper(nums, start + 1, end)\n        return minSum\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] == nums[end]:\n            return nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                   nums[end] + minSubArraySumHelper(nums, start, end - 1))\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if nums[end - 1] < 0:\n            return minSubArraySumHelper(nums, start, end - 1) + minSubArraySumHelper(nums, end - 1, end)\n        return min(nums[start], minSubArraySumHelper(nums, start + 1, end - 1) + nums[end - 1])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum += nums[i]\n        if min_sum < 0:\n            return min_sum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    # \u601d\u8def\uff1a\n    # \u904d\u5386\u6570\u7ec4\uff0c\u8bb0\u5f55\u5f53\u524d\u6700\u5c0f\u503c\uff0c\u5f53\u524d\u6700\u5927\u503c\uff0c\u5f53\u524d\u6700\u5c0f\u503c\u6240\u5728\u4f4d\u7f6e\n    # \u6bcf\u6b21\u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u503c\u6bd4\u6700\u5c0f\u503c\u5927\uff0c\u5219\u66f4\u65b0\u6700\u5c0f\u503c\uff0c\u6700\u5c0f\u503c\u6240\u5728\u4f4d\u7f6e\n    # \u6bcf\u6b21\u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u503c\u6bd4\u6700\u5927\u503c\u5c0f\uff0c\u5219\u66f4\u65b0\u6700\u5927\u503c\uff0c\u6700\u5927\u503c\u6240\u5728\u4f4d\u7f6e\n    # \u6bcf\u6b21\u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u503c\u6bd4\u6700\u5c0f\u503c\u5927\uff0c\u6bd4\u6700\u5927\u503c\u5c0f\uff0c\u5219\u66f4\u65b0\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u6240\u5728\u4f4d\u7f6e\n    # \u6bcf\u6b21\u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u503c\u6bd4\u6700\u5c0f\u503c\u5927\uff0c\u6bd4\u6700\u5927\u503c\u5927\uff0c\u5219\u66f4\u65b0\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u6240\u5728\u4f4d\u7f6e\n    # \u6bcf\u6b21\u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u503c\u6bd4\u6700\u5c0f\u503c\u5c0f\uff0c\u6bd4\u6700\u5927\u503c\u5927\uff0c\u5219\u66f4\u65b0\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u6240\u5728\u4f4d\u7f6e\n    # \u6bcf\u6b21\u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u503c\u6bd4\u6700\u5c0f\u503c\u5c0f\uff0c\u6bd4\u6700\u5927\u503c\u5c0f\uff0c\u5219\u66f4\u65b0\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u6240\u5728\u4f4d\u7f6e\n    # \u6bcf\u6b21\u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u503c\u6bd4\u6700\u5c0f\u503c\u5c0f\uff0c\u6bd4\u6700\u5927\u503c\u5927\uff0c\u5219\u66f4\u65b0\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u6240\u5728\u4f4d\u7f6e\n    # \u6bcf\u6b21\u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if start == end:\n            return nums[start]\n        else:\n            return min(nums[start] + minSum(nums, start + 1, end),\n                       minSum(nums, start, end - 1))\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                       minSubArraySumHelper(nums, start + 1, end) + nums[end])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if start == end:\n            return nums[start]\n        else:\n            return min(nums[start] + minSum(nums, start + 1, end),\n                       minSum(nums, start, end - 1))\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start]\n        for i in range(start + 1, end + 1):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return min(map(minSubArray, nums, 0, len(nums) - 1))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    # \u521d\u59cb\u5316\u6700\u5c0f\u503c\n    min_sum = nums[0]\n    # \u521d\u59cb\u5316\u6700\u5c0f\u503c\u5bf9\u5e94\u7684\u7d22\u5f15\n    min_index = 0\n    # \u904d\u5386\u6570\u7ec4\n    for i in range(1, len(nums)):\n        # \u904d\u5386\u6570\u7ec4\n        for j in range(i, len(nums)):\n            # \u904d\u5386\u6570\u7ec4\n            for k in range(j, len(nums)):\n                # \u904d\u5386\u6570\u7ec4\n                # \u8ba1\u7b97\u5f53\u524d\u5b50\u6570\u7ec4\u548c\n                cur_sum = nums[i] + nums[j] + nums[k]\n                # \u5224\u65ad\u5f53\u524d\u5b50\u6570\u7ec4\u548c\u662f\u5426\u5c0f\u4e8e\u6700\u5c0f\u503c\n                if cur_sum < min_sum:\n                    # \u66f4\u65b0\u6700\u5c0f\u503c\n                    min_sum = cur_sum\n                    # \u66f4\u65b0\u6700\u5c0f\u503c\u5bf9\u5e94\u7684\u7d22\u5f15\n                    min_index = i + j + k\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start == end:\n            return nums[start]\n        if nums[start] > nums[end]:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                      nums[end] + minSubArraySumHelper(nums, start, end - 1))\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    # \u521d\u59cb\u5316\u6700\u5c0f\u503c\n    min_sum = nums[0]\n    # \u521d\u59cb\u5316\u6700\u5c0f\u503c\u5bf9\u5e94\u7684\u7d22\u5f15\n    min_index = 0\n    # \u904d\u5386\u6570\u7ec4\n    for i in range(1, len(nums)):\n        # \u627e\u5230\u5f53\u524d\u6700\u5c0f\u503c\u5bf9\u5e94\u7684\u7d22\u5f15\n        min_index = i\n        # \u627e\u5230\u5f53\u524d\u6700\u5c0f\u503c\n        min_sum = nums[i]\n        # \u627e\u5230\u5f53\u524d\u6700\u5c0f\u503c\u5bf9\u5e94\u7684\u7d22\u5f15\n        for j in range(i + 1, len(nums)):\n            # \u627e\u5230\u5f53\u524d\u6700\u5c0f\u503c\u5bf9\u5e94\u7684\u7d22\u5f15\n            min_index = j\n            # \u627e\u5230\u5f53\u524d\u6700\u5c0f\u503c\n            min_sum = min(min_sum, nums[j])\n            # \u627e\u5230\u5f53\u524d\u6700\u5c0f\u503c\u5bf9\u5e94\u7684\u7d22\u5f15\n            if min_sum < nums[min_index]:\n                min_index = j\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end + 1):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSum(nums, start + 1, end)\n        for i in range(start + 1, end):\n            if nums[i] < 0:\n                minSum += nums[i]\n            else:\n                minSum += nums[i] - nums[start]\n        return minSum\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] == nums[end]:\n            return nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                   nums[end] + minSubArraySumHelper(nums, start, end - 1))\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if start == end:\n            return nums[start]\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSubArraySumHelper(nums, start + 1, end - 1)\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # \u52a8\u6001\u89c4\u5212\n    dp = [[0] * (len(nums) + 1) for _ in range(len(nums) + 1)]\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i == j:\n                dp[i][j] = nums[i]\n            else:\n                dp[i][j] = min(dp[i + 1][j], dp[i][j + 1], dp[i + 1][j + 1] + nums[i])\n    return dp[-1][-1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum += nums[i]\n        if min_sum < 0:\n            return 0\n        if min_sum < min_sum:\n            min_sum = min_sum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if start >= end:\n            return 0\n        if start == end - 1:\n            return nums[start]\n        return min(nums[start] + minSum(nums, start + 1, end),\n                   nums[start] + minSum(nums, start, end - 1))\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        sum = nums[start]\n        for i in range(start + 1, end):\n            sum += nums[i]\n        for i in range(start + 1, end):\n            if nums[i] < 0:\n                sum -= nums[i]\n        return sum\n\n    return min(minSubArraySumHelper(nums, 0, len(nums) - 1), key=lambda x: x) if nums else 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start], minSubArraySumHelper(nums, start + 1, end) + nums[start])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end == len(nums):\n            return sum(nums)\n        if start == end:\n            return nums[start]\n        if nums[end] < nums[start]:\n            return minSubArraySumHelper(nums, start, end - 1) + nums[end]\n        return min(minSubArraySumHelper(nums, start, end - 1),\n                   minSubArraySumHelper(nums, start + 1, end)) + nums[start]\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + min_sum)\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end + 1):\n            if nums[i] < nums[start]:\n                minSum += nums[i]\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start == end:\n            return nums[start]\n        minSum = nums[start]\n        for i in range(start + 1, end + 1):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSubArraySumHelper(nums, start + 1, end)\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            minSum += nums[i]\n            for j in range(i + 1, len(nums)):\n                if nums[j] > 0:\n                    minSum += nums[j]\n                    if minSum < 0:\n                        minSum = 0\n                        break\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start]\n        for i in range(start + 1, end + 1):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSubArraySumHelper(nums, start + 1, end)\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end + 1):\n            if nums[i] + minSum < 0:\n                minSum = nums[i] + minSum\n        return minSum\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if start >= end:\n            return 0\n        return min(nums[start] + minSum(nums, start + 1, end),\n                   nums[end] + minSum(nums, start, end - 1))\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[end - 1]\n        if end - start == 2:\n            return nums[end - 1] + nums[end - 2]\n        minSum = nums[end - 1] + nums[end - 2]\n        for i in range(start, end - 2):\n            minSum = min(minSum, nums[i] + nums[i + 1] + nums[i + 2])\n        return minSum\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if nums[start] >= nums[end]:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start], minSubArraySumHelper(nums, start + 1, end) + nums[end])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        sum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        if sum < 0:\n            return sum\n        return sum + minSubArraySumHelper(nums, start + 1, end - 1)\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] >= 0:\n            return nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return minSubArraySumHelper(nums, start + 1, end) + nums[start]\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    if not nums:\n        return 0\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        minSum = min(minSum, nums[i] + minSubArraySum(nums[:i]))\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if nums[end - 1] > nums[start]:\n            return minSubArraySumHelper(nums, start, end - 1) + nums[start]\n        else:\n            return min(minSubArraySumHelper(nums, start, end - 1),\n                       minSubArraySumHelper(nums, start + 1, end))\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        if nums[end] < 0:\n            return minSubArraySumHelper(nums, start, end - 1)\n        return nums[start] + minSubArraySumHelper(nums, start + 1, end) + \\\n            minSubArraySumHelper(nums, start, end - 1)\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start]\n        for i in range(start + 1, end + 1):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSubArraySumHelper(nums, start + 1, end)\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if start == end:\n            return nums[start]\n        else:\n            return min(nums[start] + minSum(nums, start + 1, end),\n                       minSum(nums, start, end - 1))\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start == end:\n            return nums[start]\n        if nums[start] > nums[end]:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start], minSubArraySumHelper(nums, start + 1, end) + nums[start])\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                       minSubArraySumHelper(nums, start + 1, end) + nums[end])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end == len(nums):\n            return sum(nums)\n        if start == end:\n            return nums[start]\n        if nums[end] < nums[start]:\n            return minSubArraySumHelper(nums, start + 1, end)\n        return min(minSubArraySumHelper(nums, start + 1, end - 1),\n                   nums[start] + minSubArraySumHelper(nums, end + 1, len(nums)))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if nums[end - 1] < 0:\n            return minSubArraySumHelper(nums, start, end - 1) + minSubArraySumHelper(nums, end - 1, end)\n        return min(nums[start] + minSubArraySumHelper(nums, start + 1, end - 1),\n                   minSubArraySumHelper(nums, start, end - 1) + nums[end - 1])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        if nums[end] < 0:\n            return minSubArraySumHelper(nums, start, end - 1)\n        return nums[start] + minSubArraySumHelper(nums, start + 1, end) + \\\n            minSubArraySumHelper(nums, start, end - 1)\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if start == end - 1:\n            return nums[end - 1]\n        return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                   nums[end - 1] + minSubArraySumHelper(nums, start, end - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min_sum:\n            min_sum = nums[i]\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                       minSubArraySumHelper(nums, start + 1, end) + nums[end])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start == end:\n            return nums[start]\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                       minSubArraySumHelper(nums, start, end - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end):\n            if nums[i] < nums[start]:\n                minSum += nums[i]\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        if nums[end] < 0:\n            return minSubArraySumHelper(nums, start, end - 1)\n        return min(nums[start], nums[end]) + minSubArraySumHelper(nums, start + 1, end - 1)\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSubArraySumHelper(nums, start + 1, end - 1)\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return min(map(minSubArraySumHelper, nums, 0, len(nums) - 1))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if start == end:\n            return nums[start]\n        min = nums[start]\n        for i in range(start + 1, end + 1):\n            if nums[i] < min:\n                min = nums[i]\n        return min\n\n    return min(minSubArray(nums, 0, len(nums) - 1) for nums in nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end == len(nums):\n            return sum(nums[start:])\n        else:\n            return min(minSubArraySumHelper(nums, start, end - 1),\n                       minSubArraySumHelper(nums, start + 1, end))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] > 0:\n            return nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return minSubArraySumHelper(nums, start + 1, end) + minSubArraySumHelper(nums, start + 1, end)\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        if nums[end] < 0:\n            return minSubArraySumHelper(nums, start, end - 1)\n        return nums[start] + minSubArraySumHelper(nums, start + 1, end) + \\\n               minSubArraySumHelper(nums, start, end - 1)\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        if nums[end] < 0:\n            return minSubArraySumHelper(nums, start, end - 1)\n        return nums[start] + minSubArraySumHelper(nums, start + 1, end) + \\\n               minSubArraySumHelper(nums, start, end - 1)\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] == 0:\n            return 0\n        if nums[start] > 0:\n            return nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return minSubArraySumHelper(nums, start + 1, end) + nums[start]\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if start == end:\n            return nums[start]\n        if nums[start] > nums[end]:\n            return minSubArraySumHelper(nums, start + 1, end)\n        return min(nums[start] + minSubArraySumHelper(nums, start + 1, end - 1),\n                   nums[end] + minSubArraySumHelper(nums, start, end - 1))\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if nums[start] == nums[end]:\n            return nums[start] + minSubArraySumHelper(nums, start + 1, end - 1)\n        return min(nums[start] + minSubArraySumHelper(nums, start + 1, end - 1),\n                   nums[end] + minSubArraySumHelper(nums, start, end - 1 - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end + 1):\n            if nums[i] < 0:\n                minSum += nums[i]\n            else:\n                minSum += nums[i] + minSubArraySumHelper(nums, start + 1, end)\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end + 1):\n            if nums[i] < 0:\n                minSum += nums[i]\n            else:\n                minSum += nums[i] - minSubArraySumHelper(nums, start + 1, i - 1)\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end):\n            if nums[i] < nums[start]:\n                minSum += nums[i]\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    # \u601d\u8def\uff1a\n    # \u904d\u5386\u6570\u7ec4\uff0c\u6bcf\u6b21\u904d\u5386\u4e00\u4e2a\u5143\u7d20\uff0c\u627e\u5230\u5f53\u524d\u5143\u7d20\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\uff0c\u7136\u540e\u66f4\u65b0\u6700\u5c0f\u503c\n    # \u6bcf\u6b21\u904d\u5386\u5b8c\uff0c\u6700\u5c0f\u503c\u66f4\u65b0\uff0c\u7136\u540e\u904d\u5386\u4e0b\u4e00\u4e2a\u5143\u7d20\n    # \u4ee3\u7801\uff1a\n    # \u904d\u5386\u6570\u7ec4\n    for i in range(len(nums)):\n        # \u627e\u5230\u5f53\u524d\u5143\u7d20\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\n        min_sum = nums[i]\n        for j in range(i + 1, len(nums)):\n            # \u66f4\u65b0\u6700\u5c0f\u503c\n            if nums[j] < min_sum:\n                min_sum = nums[j]\n        # \u66f4\u65b0\u6700\u5c0f\u503c\n        if min_sum < min_sum:\n            min_sum = min_sum\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end + 1):\n            if nums[i] < 0:\n                minSum += nums[i]\n            else:\n                minSum += nums[i] - minSubArraySumHelper(nums, start + 1, i - 1)\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        mid = (start + end) // 2\n        if nums[mid] < 0:\n            return minSubArraySumHelper(nums, start, mid - 1) + minSubArraySumHelper(nums, mid + 1, end)\n        else:\n            return minSubArraySumHelper(nums, start, mid - 1) + minSubArraySumHelper(nums, mid, end)\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if nums[start] > nums[end - 1] and end - start > 1:\n            return minSubArraySumHelper(nums, start + 1, end - 1)\n        if nums[start] > nums[end - 1] and end - start == 1:\n            return minSubArraySumHelper(nums, start + 1, end - 1)\n        if nums[start] < nums[end - 1] and end - start > 1:\n            return minSubArraySumHelper(nums, start, end - 1)\n        if nums[start] < nums[end - 1] and end - start == 1:\n            return minSubArraySumHelper(nums, start, end - 1)\n        return nums[start] + minSubArraySumHelper(nums, start + 1, end - 1)\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start], minSubArraySumHelper(nums, start + 1, end) + nums[start])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + min_sum)\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, n):\n        min_sum += nums[i]\n        if min_sum < 0:\n            return min_sum\n        min_sum = min(nums[i], min_sum)\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if start == end:\n            return nums[start]\n        if nums[start] > nums[end]:\n            return minSubArray(nums, start + 1, end)\n        else:\n            return min(nums[start] + minSubArray(nums, start + 1, end), nums[end] + minSubArray(nums, start, end - 1))\n\n    return minSubArray(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start]\n        for i in range(start + 1, end + 1):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        if nums[end] < 0:\n            return minSubArraySumHelper(nums, start, end - 1)\n        return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                    nums[end] + minSubArraySumHelper(nums, start, end - 1))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        if nums[end] < 0:\n            return minSubArraySumHelper(nums, start, end - 1)\n        return nums[start] + minSubArraySumHelper(nums, start + 1, end) + \\\n            minSubArraySumHelper(nums, start, end - 1)\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if start == end - 1:\n            return nums[end - 1]\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end - 1)\n        for i in range(start + 1, end):\n            minSum += nums[i]\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + min_sum)\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if end - start == 0:\n            return 0\n        if start == end:\n            return nums[start]\n        return min(nums[start] + minSum(nums, start + 1, end),\n                   minSum(nums, start, end - 1))\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if nums[start] == 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        return min(nums[start], minSubArraySumHelper(nums, start + 1, end) + nums[start])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end - 1)\n        for i in range(start + 1, end):\n            minSum = min(minSum, nums[i] + minSubArraySumHelper(nums, start + 1, i - 1))\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[start]\n        if end - start == 2:\n            return nums[start] + nums[end - 1]\n        if end - start == 3:\n            return nums[start] + nums[end - 1] + nums[end - 2]\n        if end - start == 4:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3]\n        if end - start == 5:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3] + nums[end - 4]\n        if end - start == 6:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3] + nums[end - 4] + nums[end - 5]\n        if end - start == 7:\n            return nums[start] + nums[end - 1] + nums[end - 2] + nums[end - 3] + nums[end - 4] + nums[end - 5] + nums[end - 6]\n        if end - start == 8:\n            return nums[start]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + min_sum)\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if start == end:\n            return nums[start]\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSubArraySumHelper(nums, start + 1, end - 1)\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSum(nums, start + 1, end)\n        for i in range(start + 1, end + 1):\n            if nums[i] < 0:\n                minSum += nums[i]\n            else:\n                minSum += nums[i] + minSum(nums, start + 1, end)\n        return minSum\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end - start == 0:\n            return 0\n        if nums[end] < 0:\n            return minSubArraySumHelper(nums, start, end - 1)\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                       nums[end] + minSubArraySumHelper(nums, start, end - 1))\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums, start, end):\n        if start == end:\n            return nums[start]\n        else:\n            return min(nums[start] + minSum(nums, start + 1, end),\n                       minSum(nums, start, end - 1))\n\n    return minSum(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] >= 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                       minSubArraySumHelper(nums, start + 1, end) + minSubArraySumHelper(nums, start + 1, end))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        if nums[start] < 0:\n            return minSubArraySumHelper(nums, start + 1, end)\n        else:\n            return min(nums[start] + minSubArraySumHelper(nums, start + 1, end),\n                       minSubArraySumHelper(nums, start + 1, end) + nums[end])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # write your code here\n    def minSubArraySum(nums):\n        \"\"\"\n        Given an array of integers nums, find the minimum sum of any non-empty sub-array\n        of nums.\n        Example\n        minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n        minSubArraySum([-1, -2, -3]) == -6\n        \"\"\"\n        # write your code here\n        def minSubArraySum(nums):\n            \"\"\"\n            Given an array of integers nums, find the minimum sum of any non-empty sub-array\n            of nums.\n            Example\n            minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n            minSubArraySum([-1, -2, -3]) == -6\n            \"\"\"\n            # write your code here\n            def minSubArraySum(nums):\n                \"\"\"\n                Given an array of integers nums, find the minimum sum of any non-empty sub-array\n                of nums.\n                Example\n                minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n                minSubArraySum([-1, -2, -3]) == -6\n                \"\"\"\n                # write your code here\n                def minSub", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    if n == 2:\n        return nums[0] + nums[1]\n    min_sum = nums[0]\n    for i in range(1, n):\n        min_sum = min(min_sum, nums[i] + min_sum)\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArray(nums, start, end):\n        if end - start == 0:\n            return 0\n        if end - start == 1:\n            return nums[end - 1]\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return min(map(minSubArray, nums, 0, len(nums) - 1))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start]\n        for i in range(start + 1, end):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end == len(nums):\n            return sum(nums) - nums[start]\n        else:\n            return min(minSubArraySumHelper(nums, start, end - 1),\n                       minSubArraySumHelper(nums, start + 1, end) + nums[start])\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if end == len(nums):\n            return sum(nums[start:end])\n        else:\n            return min(minSubArraySumHelper(nums, start, end - 1),\n                       minSubArraySumHelper(nums, start + 1, end))\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumHelper(nums, start, end):\n        if start >= end:\n            return 0\n        minSum = nums[start] + minSubArraySumHelper(nums, start + 1, end)\n        for i in range(start + 1, end + 1):\n            minSum += nums[i]\n            if minSum < 0:\n                return minSum\n        return minSum\n\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)"]]