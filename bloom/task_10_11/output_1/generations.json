[["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not palindromic\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and palindrome[0] == string[i]:\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            palindrome += string[i:]\n            string = string[:i]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i] + string[i + 1:]):\n            palindrome = string[:i] + string[i + 1:] + palindrome\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    prefix = string[:-1]\n    suffix = string[-1:]\n    if is_palindrome(suffix):\n        return prefix + suffix\n    else:\n        return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix of the string that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the palindrome\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome += string[i]\n            string = string[:i] + string[len(string) - len(palindrome):]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Return the palindrome and the prefix\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindromic_suffix and string[i]!= palindromic_suffix[0]:\n            prefix = string[:i]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    palindromic_prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            palindromic_prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return palindromic_prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    palindrome = ''\n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[:i] + string[i + 1:]):\n            palindrome = string[:i] + string[i + 1:] + palindrome\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    prefix = string[:-1]\n    suffix = string[-1:]\n    if is_palindrome(suffix):\n        return prefix + suffix\n    else:\n        return prefix + reverse(suffix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            palindrome = string[:i + 1] + palindrome\n            string = string[i + 1:]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i]!= palindrome[0]:\n            break\n        prefix += string[i]\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            palindrome += string[i + 1:]\n            string = string[:i + 1]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i]!= palindrome[0]:\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindrome\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i]!= palindrome[0]:\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not palindromic\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    prefix = string[:string.rfind(string[::-1])]\n    suffix = string[string.rfind(string[::-1]) + 1:]\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindromic_suffix) + 1):\n        if is_palindrome(string[:i + len(palindromic_suffix)]):\n            prefix = string[:i + len(palindromic_suffix)]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            palindrome += string[i + 1:]\n            string = string[:i + 1]\n            break\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i] + string[i+1:]):\n            palindrome = string[:i] + string[i+1:] + palindrome\n    return palindrome + string[len(palindrome):]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    prefix = string[:1]\n    suffix = string[1:]\n    while prefix and suffix:\n        if is_palindrome(prefix + suffix):\n            return prefix + suffix\n        if len(prefix) > len(suffix):\n            prefix = prefix[1:]\n        else:\n            suffix = suffix[1:]\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i] + string[i+1:]):\n            palindrome = string[:i] + string[i+1:] + palindrome\n    return palindrome + string[len(palindrome):]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i] + string[i+1:]):\n            palindrome = string[:i] + string[i+1:] + palindrome\n    return palindrome + string[len(palindrome):]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    prefix = string[:1]\n    suffix = string[1:]\n    if is_palindrome(suffix):\n        return prefix + suffix\n    else:\n        return prefix + make_palindrome(suffix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindromic_suffix and string[i] == palindromic_suffix[0]:\n            prefix = string[:i]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            longest_palindrome = string[:i]\n            break\n    return longest_palindrome + string[len(longest_palindrome):] + string[:len(string) - len(longest_palindrome)]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindrome\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindromic suffix\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    if is_palindrome(string):\n        return string\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i] + string[i+1:]):\n            longest_palindrome = string[:i] + string[i+1:]\n    return longest_palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i] + string[i+1:]):\n            palindrome = string[:i] + string[i+1:] + palindrome\n    return palindrome + string[len(palindrome):]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    palindromic_prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            palindromic_prefix = string[:i]\n            break\n\n    return palindromic_prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindrome\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = is_palindrome(string)\n    if palindrome:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i]!= palindrome[0]:\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            palindrome += string[i]\n            string = string[i + 1:]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindromic_suffix and string[i]!= palindromic_suffix[0]:\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return prefix + string[::-1] + palindromic_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            palindrome += string[i:]\n            string = string[:i]\n            break\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest palindromic prefix\n    palindromic_prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            palindromic_prefix = string[:i]\n            break\n\n    return palindromic_prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest palindromic prefix\n    palindromic_prefix = ''\n    for i in range(1, len(string)):\n        if is_palindrome(string[:i]):\n            palindromic_prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return palindromic_prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            palindrome = string[:i + 1] + palindrome\n            string = string[i + 1:]\n        else:\n            break\n\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindrome\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i]!= palindrome[0]:\n            break\n        prefix += string[i]\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = is_palindrome(string)\n    if palindrome:\n        return string\n\n    longest_palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i] + string[i + 1:]):\n            longest_palindrome = string[:i] + string[i + 1:]\n            break\n\n    return longest_palindrome + string[len(longest_palindrome):][::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    longest_palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i] + string[i + 1:]):\n            longest_palindrome = string[:i] + string[i + 1:]\n            break\n    return longest_palindrome + string[len(longest_palindrome):][::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i]!= palindrome[0]:\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return prefix + string[::-1] + palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    prefix = string[:string.rfind(string[-1])]\n    suffix = string[string.rfind(string[-1])+1:]\n    if is_palindrome(suffix):\n        return prefix + suffix\n    else:\n        return make_palindrome(prefix) + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    longest_palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i] + string[i:]):\n            longest_palindrome = string[:i] + string[i:]\n            break\n    return longest_palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the palindrome\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix of the string that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not palindromic\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i]!= palindrome[0]:\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return prefix + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    longest_palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i] + string[i:]):\n            longest_palindrome = string[:i] + string[i:]\n            break\n    return longest_palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    prefix = string[:len(string) // 2]\n    suffix = string[len(string) // 2:]\n    if is_palindrome(prefix) and is_palindrome(suffix):\n        return prefix + suffix[::-1]\n    else:\n        return make_palindrome(prefix) + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            palindrome += string[i]\n            string = string[i:]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = is_palindrome(string)\n    if palindrome:\n        return string\n\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            longest_palindrome = string[:i + 1]\n            break\n\n    return longest_palindrome + string[len(longest_palindrome):] + string[:len(string) - len(longest_palindrome)]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    palindromic_prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            palindromic_prefix = string[:i]\n            break\n\n    return palindromic_prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = is_palindrome(string)\n    if palindrome:\n        return string\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            longest_palindrome = string[:i + 1]\n            break\n    return longest_palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindromic_suffix and palindromic_suffix[0] == string[i]:\n            break\n        prefix += string[i]\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i + 1]):\n            palindrome = string[:i + 1] + palindrome\n            string = string[i + 1:]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i] == palindrome[0]:\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    palindromic_prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            palindromic_prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return palindromic_prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i] + string[i+1:]):\n            palindrome = string[:i] + string[i+1:] + palindrome\n    return palindrome + string[len(palindrome):]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = is_palindrome(string)\n    if palindrome:\n        return string\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            longest_palindrome = string[:i + 1]\n            break\n    return longest_palindrome + string[len(longest_palindrome):] + string[:len(string) - len(longest_palindrome)]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindromic_suffix.startswith(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Return the palindrome\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindrome\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of prefix to the end of palindrome\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n    # Find the longest prefix of the string that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    palindrome = is_palindrome(string)\n    if palindrome:\n        return string\n    else:\n        longest_palindrome = ''\n        for i in range(len(string)):\n            if is_palindrome(string[:i]):\n                longest_palindrome = string[:i]\n                break\n        return longest_palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i] + string[i+1:]):\n            palindrome += string[i]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            palindrome += string[i:]\n            string = string[:i]\n            break\n\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            longest_palindrome = string[:i + 1]\n            break\n    return longest_palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindromic_suffix and string[i] == palindromic_suffix[0]:\n            prefix = string[:i]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i] + string[i + 1:]):\n            palindrome = string[:i] + string[i + 1:] + palindrome\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that is not palindromic\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i]!= palindrome[0]:\n            break\n        prefix += string[i]\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix of the string that is not palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindromic_suffix) + 1):\n        if is_palindrome(string[:i + len(palindromic_suffix)]):\n            prefix = string[:i + len(palindromic_suffix)]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i] == palindrome[0]:\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindrome\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindromic_suffix) + 1):\n        if is_palindrome(string[:i + len(palindromic_suffix)]):\n            prefix = string[:i + len(palindromic_suffix)]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindrome\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindrome)):\n        if is_palindrome(string[:i + len(palindrome)]):\n            prefix = string[:i + len(palindrome)]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            palindrome += string[i:]\n            string = string[:i]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            longest_palindrome = string[:i + 1]\n            break\n    return longest_palindrome + string[len(longest_palindrome):] + string[:len(string) - len(longest_palindrome)]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindromic_suffix) + 1):\n        if is_palindrome(string[:i + len(palindromic_suffix)]):\n            prefix = string[:i + len(palindromic_suffix)]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    longest_palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i + 1]):\n            longest_palindrome = string[:i + 1]\n            break\n    return longest_palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindrome\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindromic_suffix and string[i]!= palindromic_suffix[0]:\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return prefix + string[len(prefix):][::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the palindrome\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i]!= palindrome[0]:\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindromic_suffix) + 1):\n        if is_palindrome(string[:i + len(palindromic_suffix)]):\n            prefix = string[:i + len(palindromic_suffix)]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindromic_suffix)):\n        if is_palindrome(string[:i + len(palindromic_suffix)]):\n            prefix = string[:i + len(palindromic_suffix)]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindrome) + 1):\n        if is_palindrome(string[:i + len(palindrome)]):\n            prefix = string[:i + len(palindrome)]\n            break\n\n    # Return the concatenation of the prefix and the reverse of the palindromic suffix\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindrome\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    prefix = string[:-1]\n    suffix = string[-1:]\n    if is_palindrome(prefix) and is_palindrome(suffix):\n        return prefix + suffix\n    else:\n        return make_palindrome(prefix) + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindromic_suffix and string[i]!= palindromic_suffix[0]:\n            prefix = string[:i]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = is_palindrome(string)\n    if palindrome:\n        return string\n    else:\n        longest = ''\n        for i in range(len(string) - 1, -1, -1):\n            if is_palindrome(string[:i] + string[i + 1:]):\n                longest = string[:i] + string[i + 1:]\n        return longest + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i] == palindrome[0]:\n            break\n        prefix += string[i]\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            palindrome += string[i + 1:]\n            string = string[:i]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that is not palindromic\n    prefix = string[:i]\n    for j in range(i):\n        if not is_palindrome(prefix[:j]):\n            prefix = prefix[:j]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindromic_suffix) + 1):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            palindrome += string[i + 1:]\n            string = string[:i + 1]\n            break\n\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i] + string[i + 1:]):\n            palindrome = string[:i] + string[i + 1:] + palindrome\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            palindrome = string[:i] + palindrome\n            string = string[i:]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindrome)):\n        if is_palindrome(string[:i + len(palindrome)]):\n            prefix = string[:i + len(palindrome)]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            palindrome += string[i:]\n            string = string[:i]\n            break\n\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i]):\n            palindrome = string[:i] + palindrome\n            string = string[i + 1:]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindrome\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i] + string[i + 1:]):\n            palindrome = string[:i] + string[i + 1:] + palindrome\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the palindromic suffix\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindromic_suffix and palindromic_suffix[0] == string[i]:\n            break\n        prefix += string[i]\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the palindrome\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindromic_suffix) + 1):\n        if is_palindrome(string[:i + len(palindromic_suffix)]):\n            prefix = string[:i + len(palindromic_suffix)]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix of the string that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i] + string[i + 1:]):\n            palindrome = string[:i] + string[i + 1:] + palindrome\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            longest_palindrome = string[:i]\n            break\n    return longest_palindrome + string[len(longest_palindrome):] + string[:len(string) - len(longest_palindrome)]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = is_palindrome(string)\n    if palindrome:\n        return string\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            longest_palindrome = string[:i + 1]\n            break\n    return longest_palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Return the concatenation of prefix and palindrome reversed\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindrome) + 1):\n        if is_palindrome(string[:i + len(palindrome)]):\n            prefix = string[:i + len(palindrome)]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i]!= palindrome[0]:\n            break\n        prefix += string[i]\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i] == palindrome[0]:\n            prefix = string[:i]\n            break\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i]!= palindrome[0]:\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return prefix + string[::-1] + palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix of the string that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    prefix = string[:-1]\n    suffix = string[-1:]\n    while not is_palindrome(prefix + suffix):\n        prefix = prefix[:-1]\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i] + string[i:]):\n            palindrome += string[i]\n            string = string[i + 1:]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = string[:palindromic_suffix.index(palindromic_suffix[0])]\n    if not is_palindrome(prefix):\n        prefix = prefix[::-1]\n\n    return prefix + palindromic_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindrome\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            palindrome += string[i]\n            string = string[i + 1:]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindromic_suffix)):\n        if is_palindrome(string[:i + len(palindromic_suffix)]):\n            prefix = string[:i + len(palindromic_suffix)]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i] == palindrome[0]:\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindromic_suffix and string[i]!= palindromic_suffix[0]:\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return prefix + string[len(prefix):][::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindromic_suffix)):\n        if is_palindrome(string[:i + len(palindromic_suffix)]):\n            prefix = string[:i + len(palindromic_suffix)]\n            break\n\n    # Return the palindrome\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            palindrome += string[i + 1:]\n            string = string[:i + 1]\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindrome\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindromic_suffix)):\n        if is_palindrome(string[:i + len(palindromic_suffix)]):\n            prefix = string[:i + len(palindromic_suffix)]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindrome\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i] + string[i + 1:]):\n            palindrome = string[:i] + string[i + 1:] + palindrome\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    prefix = string[:len(string) // 2]\n    suffix = string[len(string) // 2:]\n    if is_palindrome(suffix):\n        return prefix + suffix\n    else:\n        return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of prefix to the end of palindrome\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = is_palindrome(string)\n    if palindrome:\n        return string\n\n    longest_palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i] + string[i + 1:]):\n            longest_palindrome = string[:i] + string[i + 1:]\n            break\n\n    return longest_palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix of the string that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the palindrome\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindrome) + 1):\n        if is_palindrome(string[:i + len(palindrome)]):\n            prefix = string[:i + len(palindrome)]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not palindromic\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i]!= palindrome[0]:\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the palindromic suffix\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            palindrome += string[i:]\n            string = string[:i]\n            break\n\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindrome) + 1):\n        if is_palindrome(string[:i + len(palindrome)]):\n            prefix = string[:i + len(palindrome)]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    prefix = string[:1]\n    suffix = string[-1:]\n    while prefix!= suffix:\n        prefix = prefix[1:]\n        suffix = suffix[:-1]\n    return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix of the string that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the palindrome\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that is not palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            palindrome += string[i:]\n            string = string[:i]\n            break\n\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    palindromic_prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            palindromic_prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return palindromic_prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix of the string that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    prefix = string[:-1]\n    suffix = string[-1:]\n    if is_palindrome(suffix):\n        return prefix + suffix\n    else:\n        return prefix + reverse(suffix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindromic_suffix and string[i] == palindromic_suffix[0]:\n            prefix = string[:i]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = string[:i]\n    while is_palindrome(prefix):\n        prefix = prefix[:-1]\n\n    # Append the reverse of the prefix to the end of the string\n    return palindromic_suffix + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindromic_suffix and is_palindrome(string[:i + len(palindromic_suffix)]):\n            prefix = string[:i + len(palindromic_suffix)]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    palindromic_prefix = ''\n    for i in range(1, len(string)):\n        if is_palindrome(string[:i]):\n            palindromic_prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the string\n    return palindromic_prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    prefix = string[:-1]\n    suffix = string[::-1]\n    if is_palindrome(prefix) and is_palindrome(suffix):\n        return prefix + suffix\n    else:\n        return make_palindrome(prefix) + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not palindromic\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindrome\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that is not a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if not is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the palindrome\n    return palindrome + prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    prefix = string[:1]\n    suffix = string[1:]\n    if is_palindrome(suffix):\n        return prefix + suffix\n    else:\n        return prefix + make_palindrome(suffix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            palindrome += string[i + 1:]\n            string = string[:i + 1]\n            break\n    return palindrome + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - len(palindromic_suffix) + 1):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindromic_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n\n    # Append the reverse of the prefix to the end of the palindromic suffix\n    return prefix + palindromic_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[i:]\n            break\n\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if palindrome and string[i] == palindrome[0]:\n            prefix = string[:i]\n            break\n\n    return prefix + palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome += string[i]\n            string = string[:i] + string[len(string) - len(palindrome):]\n    return palindrome + string[::-1]"]]