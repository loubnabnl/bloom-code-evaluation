[["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = []\n    for paren in paren_string.split():\n        if paren == '(':\n            paren_list.append(0)\n        elif paren == ')':\n            paren_list[-1] += 1\n        else:\n            paren_list.append(-1)\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [int(i) for i in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n\n    # Remove empty strings\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group]\n\n    # Convert to integers\n    paren_groups = [int(paren_group) for paren_group in paren_groups]\n\n    # Remove duplicates\n    paren_groups = list(set(paren_groups))\n\n    # Sort\n    paren_groups.sort()\n\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_groups = paren_string.split(' ')\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.count('(') == paren_group.count(')')]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.count('(') > 0]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.count(')') > 0]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.count('(') == paren_group.count(')')]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.count(')') == paren_group.count('(')]\n    paren_groups = [paren_group for", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    return [max([parse_nested_parens(paren) for paren in paren_list]) for paren in paren_list]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [int(group) for group in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( '", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren_group in paren_string.split():\n        nested_parens.append(len(paren_group))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = []\n    for paren in paren_string.split():\n        paren_list.append(len(paren))\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    return [len(paren_list) - 1 - i for i in range(len(paren_list))]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split(' ')\n    nested_parens = []\n    for paren in paren_list:\n        nested_parens.append(parse_nested_parens(paren))\n    return max(nested_parens)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split(' ')\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.startswith('(') and paren_group.endswith(')')]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.count('(') == paren_group.count(')')]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.count('(') > 0]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.count(')') > 0]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.count(')') == paren_group.count('(')]\n    paren_groups = [paren_group for paren_group in paren_groups if par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group[0]!= '(']\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group[-1]!= ')']\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group[0]!= '(']\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group[-1]!= ')']\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group[0]!= '(']\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group[-1]!= ')']\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group[0]!= '(']\n    paren_groups = [paren_group for paren_group in", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split(' ')\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split(' ')\n    return [max(parse_nested_parens(paren) for paren in paren_list)]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group]\n\n    paren_groups = [parse_nested_parens(paren_group) for paren_group in paren_groups]\n    return [max(paren_group) for paren_group in paren_groups]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.startswith('(')]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.endswith(')')]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.count('(') == paren_group.count(')')]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.count('(') > 0]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.count(')') > 0]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group.count(')') == paren_group.count('(')]\n    paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( '", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(i) for i in paren_list]\n    max_nesting_level = 0\n    for i in paren_list:\n        if i > max_nesting_level:\n            max_nesting_level = i\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(i) for i in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split(' ')\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(i) for i in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    return [len(paren_list) - 1 for paren_list in paren_list]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = []\n    for i in paren_string.split():\n        paren_list.append(len(i))\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = []\n    for paren in paren_string.split():\n        paren_list.append(len(paren))\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split(' ')\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n    return [max(parse_nested_parens(paren_group)) for paren_group in paren_groups]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    return [max(parse_nested_parens(paren_group)) for paren_group in paren_groups]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    return [max(parse_nested_parens(paren_group)) for paren_group in paren_groups]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren_group in paren_string.split():\n        nested_parens.append(len(paren_group))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [max(parse_nested_parens(paren_group)) for paren_group in paren_groups]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if not paren_string:\n        return []\n    paren_groups = paren_string.split()\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group[0] == '(']\n    return [len(paren_group) for paren_group in paren_groups]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = []\n    for paren in paren_string.split():\n        paren_list.append(len(paren))\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( '", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for group in paren_string.split():\n        nested_parens.append(len(group))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split(' ')\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group[0] == '(']\n    return [len(paren_group) for paren_group in paren_groups]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren_group in paren_string.split(' '):\n        nested_parens.append(len(paren_group.split('(')) - 1)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [max(parse_nested_parens(paren_group)) for paren_group in paren_groups]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(i) for i in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(i) for i in paren_list]\n    max_nesting_level = 0\n    for i in paren_list:\n        if i > max_nesting_level:\n            max_nesting_level = i\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [int(group) for group in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [int(paren_group) for paren_group in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    return [max(parse_nested_parens(paren) for paren in paren_list)]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for i in paren_string.split():\n        nested_parens.append(len(i))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [int(i) for i in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n\n    # Remove empty groups\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group]\n\n    # Remove groups with only one character\n    paren_groups = [paren_group for paren_group in paren_groups if len(paren_group) > 1]\n\n    # Remove groups with only one character\n    paren_groups = [paren_group for paren_group in paren_groups if len(paren_group) > 1]\n\n    # Remove groups with only one character\n    paren_groups = [paren_group for paren_group in paren_groups if len(paren_group) > 1]\n\n    # Remove groups with only one character\n    paren_groups = [paren_group for paren_group in paren_groups if len(paren_group) > 1]\n\n    # Remove groups with only one character\n    paren_groups = [paren_group for paren_group in paren_groups if len(paren_group) > 1]\n\n    # Remove groups with only one character\n    paren_groups = [paren_group for paren_group in paren_groups if len(", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(i) for i in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [int(paren_group) for paren_group in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split(' ')\n    return [len(paren) for paren in paren_list]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split(' ')\n    return [len(paren) for paren in paren_list]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    return [max([parse_nested_parens(paren) for paren in paren_list]) for paren in paren_list]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split(' ')\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n    paren_groups = [int(paren_group) for paren_group in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [int(group) for group in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [int(x) for x in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    max_level = 0\n    for i in paren_list:\n        if i > max_level:\n            max_level = i\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    return [len(paren_list) - 1 - i for i in range(len(paren_list))]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = []\n    for paren in paren_string.split():\n        paren_list.append(len(paren))\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for i in paren_string.split():\n        nested_parens.append(len(re.findall(r'\\(.*\\)', i)))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split(' ')\n    paren_groups = [int(x) for x in paren_groups]\n    max_paren = max(paren_groups)\n    return [max_paren] + [len(paren_groups[paren_groups]) for paren_groups in paren_groups]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(paren) for paren in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n\n    paren_string = paren_string.replace('(', '')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if not paren_string:\n        return []\n    paren_groups = paren_string.split(' ')\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group[0] == '(']\n    return [len(paren_group) for paren_group in paren_groups]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = []\n    for paren_group in paren_string.split():\n        paren_list.append(parse_nested_parens(paren_group))\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split(' ')\n    paren_groups = [int(x) for x in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [int(x) for x in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( '", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    return [len(paren_list) - 1 for paren_list in paren_list]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    return [max(parse_nested_parens(paren_group)) for paren_group in paren_groups]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split(' ')\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n    paren_groups = [int(paren_group) for paren_group in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    return [max([parse_nested_parens(group) for group in paren_groups]) for paren_group in paren_groups]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for i in paren_string.split():\n        nested_parens.append(len(i) - 1)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not paren_string:\n        return []\n\n    paren_groups = paren_string.split(' ')\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n\n    nested_parens = []\n    for paren_group in paren_groups:\n        nested_parens.append(parse_nested_parens(paren_group))\n\n    return [max(nested_parens)] + nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren_group in paren_string.split():\n        nested_parens.append(max(parse_nested_parens(paren_group), default=0))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [int(x) for x in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split(' ')\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n    paren_groups = [int(paren_group) for paren_group in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace(' ( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace(' ( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace(' ( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace(' ( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace(' ( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace(' ( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace(' ( ','( ').replace(' ) ',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [int(group) for group in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren_group in paren_string.split(' '):\n        nested_parens.append(len(paren_group.split('(')) - 1)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [max(parse_nested_parens(paren_group)) for paren_group in paren_groups]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [int(x) for x in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [int(i) for i in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren_group in paren_string.split(' '):\n        nested_parens.append(len(paren_group.split('(')) - 1)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    return [max(parse_nested_parens(group)) for group in paren_groups]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for group in paren_string.split(' '):\n        nested_parens.append(len(parse_nested_parens(group)))\n\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [int(group) for group in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split(' ')\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n    paren_groups = [int(paren_group) for paren_group in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split(' ')\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren_group in paren_string.split():\n        nested_parens.append(max(parse_nested_parens(paren_group), default=0))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren_group in paren_string.split():\n        nested_parens.append(len(paren_group))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for group in paren_string.split():\n        nested_parens.append(len(group))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split(' ')\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for i in paren_string.split():\n        nested_parens.append(len(re.findall(r'\\((.*?)\\)', i)))\n\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( '", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(i) for i in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split(' ')\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(i) for i in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    return [len(paren_list) - len(paren_list.pop()) for paren_list in paren_list]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('(','').replace(')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = []\n    for paren in paren_string.split():\n        paren_list.append(len(paren))\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for group in paren_string.split():\n        nested_parens.append(max(parse_nested_parens(group), key=len))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    return [len(paren_list) - len(paren_list.pop()) for paren_list in paren_list]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace(' (', '(').replace(' ) ', ')')\n    paren_string = paren_string.replace(' ( ', '(').replace(' ) ', ')')\n    paren_string = paren_string.replace('( ', '(').replace(' ) ', ')')\n    paren_string = paren_string.replace('( ', '(').replace(' ) ', ')')\n    paren_string = paren_string.replace('( ', '(').replace(' ) ', ')')\n    paren_string = paren_string.replace('( ', '(').replace(' ) ', ')')\n    paren_string = paren_string.replace('( ', '(').replace(' ) ', ')')\n    paren_string = par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split(' ')\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n    paren_groups = [int(paren_group) for paren_group in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( '", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split(' ')\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split(' ')\n    return [max(parse_nested_parens(paren) for paren in paren_list)]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren_group in paren_string.split():\n        nested_parens.append(len(paren_group.split('(')) - 1)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren_group in paren_string.split():\n        nested_parens.append(max(parse_nested_parens(paren_group), key=len))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(i) for i in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    paren_groups = [int(i) for i in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('( ','( ').replace(' ) ',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(x) for x in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split(' ')\n    paren_groups = [int(group) for group in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = []\n    for paren in paren_string.split():\n        paren_list.append(len(paren))\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(i) for i in paren_list]\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if not paren_string:\n        return []\n    paren_groups = paren_string.split(' ')\n    paren_groups = [paren_group.strip() for paren_group in paren_groups]\n    paren_groups = [int(paren_group) for paren_group in paren_groups]\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    paren_string", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( ', '(').replace(' )', ')')\n    paren_string = paren_string.replace('(','').replace(')','')\n    paren_string = paren_string.replace('( '", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split()\n    paren_list = [int(paren) for paren in paren_list]\n    return paren_list"]]