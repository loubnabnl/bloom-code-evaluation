[["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(txt)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    txt = txt[2:]\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:].split(\" \")\n    txt = txt[2:]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if txt.startswith(\"hello\"):\n            return [\"Hello\", \"world!\"]\n        elif txt.startswith(\"hello\"):\n            return [\"Hello\", \"world!\"]\n        elif txt.startswith(\"world\"):\n            return [\"Hello\", \"world!\"]\n        elif txt.startswith(\"world\"):\n            return [\"Hello\", \"world!\"]\n        elif txt.startswith(\"world\"):\n            return [\"Hello\", \"world!\"]\n        elif txt.startswith(\"world\"):\n            return [\"Hello\", \"world!\"]\n        elif txt.startswith(\"world\"):\n            return [\"Hello\", \"world!\"]\n        elif txt.startswith(\"world\"):\n            return [\"Hello\", \"", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if len(txt) == 1:\n        return split_words(txt[0])\n    if len(txt) == 2:\n        return split_words(txt[1])\n    if len(txt) == 3:\n        return split_words(txt[2])\n    if len(txt) == 4:\n        return split_words(txt[3])\n    if len(txt) == 5:\n        return split_words(txt[4])\n    if len(txt) == 6:\n        return split_words(txt[5])\n    if len(txt) == 7:\n        return split_words(txt[6])\n    if len(txt) == 8:\n        return split_words(txt[7])\n    if len(txt) == 9:\n        return split_words(txt[8])\n    if len(txt) == 10:\n        return split_words(txt[9])\n    if len(txt) == 11:\n        return split_words(txt[10])\n    if len(txt) == 12:\n        return split_words(txt[11])\n    if len(txt) == 13:\n        return split_words(txt[12])\n    if len(txt) == 14:\n        return split_words(txt[13])\n    if len(txt) == 15:\n        return split_words(txt[14])\n    if len(txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split_words(txt[2:])\n    elif txt.startswith(\" \"):\n        return split_words(txt[2:])\n    elif txt.startswith(\" \"):\n        return split_words(txt[2:])\n    elif txt.startswith(\" \"):\n        return split_words(txt[2:])\n    elif txt.startswith(\" \"):\n        return split_words(txt[2:])\n    elif txt.startswith(\" \"):\n        return split_words(txt[2:])\n    elif txt.startswith(\" \"):\n        return split_words(txt[2:])\n    elif txt.startswith(\" \"):\n        return split_words(txt[2:])\n    elif txt.startswith(\" \"):\n        return split_words(txt[2:])\n    elif txt.startswith(\" \"):\n        return split_words(txt[2:])\n    elif txt.startswith(\" \"):\n        return split_words(txt[2:])\n    elif txt.startswith(\" \"):\n        return split_", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if len(txt) > 1:\n        return split_words(txt[0])\n    if len(txt) > 2:\n        return split_words(txt[1])\n    if len(txt) > 3:\n        return split_words(txt[2])\n    if len(txt) > 4:\n        return split_words(txt[3])\n    if len(txt) > 5:\n        return split_words(txt[4])\n    if len(txt) > 6:\n        return split_words(txt[5])\n    if len(txt) > 7:\n        return split_words(txt[6])\n    if len(txt) > 8:\n        return split_words(txt[7])\n    if len(txt) > 9:\n        return split_words(txt[8])\n    if len(txt) > 10:\n        return split_words(txt[9])\n    if len(txt) > 11:\n        return split_words(txt[10])\n    if len(txt) > 12:\n        return split_words(txt[11])\n    if len(txt) > 13:\n        return split_words(txt[12])\n    if len(txt) > 14:\n        return split_words(txt[13])\n    if len(txt) > 15:\n        return split_words(txt[14])\n    if len(txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if len(txt) == 0:\n        return []\n    # Split on commas\n    if len(txt) == 1:\n        return [txt[0], txt[1], txt[2]]\n    # Split on odd order\n    if len(txt) == 3:\n        return [txt[0], txt[1], txt[2]]\n    # Split on odd order\n    if len(txt) == 4:\n        return [txt[0], txt[1], txt[2]]\n    # Split on odd order\n    if len(txt) == 5:\n        return [txt[0], txt[1], txt[2]]\n    # Split on odd order\n    if len(txt) == 6:\n        return [txt[0], txt[1], txt[2]]\n    # Split on odd order\n    if len(txt) == 7:\n        return [txt[0], txt[1], txt[2]]\n    # Split on odd order\n    if len(txt) == 8:\n        return [txt[0], txt[1], txt[2]]\n    # Split on odd order\n    if len(txt) == 9:\n        return [txt[0], txt[1], txt[2]]\n    # Split on odd order\n    if len(txt) == 10:\n        return [txt[0], txt[1], txt[2]]\n    # Split on odd order", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) == 1:\n            return split_words(txt[0])\n        if len(txt) == 2:\n            return split_words(txt[1])\n        if len(txt) == 3:\n            return split_words(txt[2])\n        if len(txt) == 4:\n            return split_words(txt[3])\n        if len(txt) == 5:\n            return split_words(txt[4])\n        if len(txt) == 6:\n            return split_words(txt[5])\n        if len(txt) == 7:\n            return split_words(txt[6])\n        if len(txt) == 8:\n            return split_words(txt[7])\n        if len(txt) == 9:\n            return split_words(txt[8])\n        if len(txt) == 10:\n            return", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split the string on whitespace\n    txt = split_words(txt)\n    # Split the string on commas\n    txt = split_words(txt, ',')\n    # Split the string on odd order\n    txt = split_words(txt, ',', ord('a') == 0)\n    # Split the string on even order\n    txt = split_words(txt, ',', ord('b') == 1)\n    # Split the string on odd order\n    txt = split_words(txt, ',', ord('z') == 25)\n    return txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    return split_words(txt)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) > 1:\n            return split_words(txt[0])\n        return []\n\n    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) > 1:\n            return split_words(txt[0])\n        return []\n\n    def split_words(txt):\n        '''\n        Given a", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    words = txt.split(\" \")\n    # Split on commas\n    words = [word for word in words if word.isalnum()]\n    # Split on odd order\n    words = [word for word in words if word.isalnum() if ord(word) > ord('z')]\n    # Split on even order\n    words = [word for word in words if word.isalnum() if ord(word) < ord('z')]\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(words)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(txt) - 1", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 2)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 3)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 4)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 5)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 6)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 7)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 8)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 9)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 10)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 11)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"abcdef\") == 3 \n        '''\n        return split_words(txt)\n\n    def split_words(txt, separator=','):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"abcdef\") == 3 \n        '''\n        return split_words(txt)\n\n    def split_words(txt, delimiter=','):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split the text into words\n    words = split_words(txt)\n    # Return the number of words in the list\n    return len(words)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order of letters\n    txt = txt.split(\" \")\n    # Split on odd order of letters\n    txt = txt.split(\" \")\n    # Split on odd order of letters\n    txt = txt.split(\" \")\n    # Split on odd order of letters\n    txt = txt.split(\" \")\n    # Split on odd order of letters\n    txt = txt.split(\" \")\n    # Split on odd order of letters\n    txt = txt.split(\" \")\n    # Split on odd order of letters\n    txt = txt.split(\" \")\n    # Split on odd order of letters\n    txt = txt.split(\" \")\n    # Split on odd order of letters\n    txt = txt.split(\" \")\n    # Split on odd order of letters\n    txt = txt.split(\" \")\n    # Split on odd order of letters\n    txt = txt.split(\" \")\n    # Split on odd order of letters\n    txt = txt.split(\" \")\n    # Split on odd order of letters\n    txt = txt.split(\" \")\n    # Split on odd", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(txt)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(',')\n    if len(words) == 1:\n        return [words[0]]\n    elif len(words) == 2:\n        return [words[0], words[1]]\n    elif len(words) == 3:\n        return [words[0], words[1], words[2]]\n    else:\n        return [words[0], words[1], words[2]]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    else:\n        txt = txt.split(\" \")\n    return txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"abcdef\") == 3 \n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) == 1:\n            return [txt[0], txt[1]]\n        if len(txt) == 2:\n            return [txt[0], txt[1]]\n        if len(txt) == 3:\n            return [txt[0], txt[1]]\n        if len(txt) == 4:\n            return [txt[0], txt[1]]\n        if len(txt) == 5:\n            return [txt[0], txt[1]]\n        if len(txt) == 6:\n            return [txt[0],", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 2)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 3)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 4)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 5)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 6)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 7)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(',')\n    if len(words) == 0:\n        return []\n    return split_words(words)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 2)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 3)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 4)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 5)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 6)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 7)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 8)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 9)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 10)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 11)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if len(txt) == 0:\n        return []\n    split_words = split_words(txt)\n    # Split on commas\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[0])\n    # Split on odd order\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[1])\n    # Split on even order\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[2])\n    # Split on even order\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[3])\n    # Split on odd order\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[4])\n    # Split on even order\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[5])\n    # Split on even order\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[6])\n    # Split on even order", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\"", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if len(txt) > 1:\n        return split_words(txt[0])\n    if len(txt) > 2:\n        return split_words(txt[1])\n    if len(txt) > 3:\n        return split_words(txt[2])\n    if len(txt) > 4:\n        return split_words(txt[3])\n    if len(txt) > 5:\n        return split_words(txt[4])\n    if len(txt) > 6:\n        return split_words(txt[5])\n    if len(txt) > 7:\n        return split_words(txt[6])\n    if len(txt) > 8:\n        return split_words(txt[7])\n    if len(txt) > 9:\n        return split_words(txt[8])\n    if len(txt) > 10:\n        return split_words(txt[9])\n    if len(txt) > 11:\n        return split_words(txt[10])\n    if len(txt) > 12:\n        return split_words(txt[11])\n    if len(txt) > 13:\n        return split_words(txt[12])\n    if len(txt) > 14:\n        return split_words(txt[13])\n    if len(txt) > 15:\n        return split_words(txt[14])\n    if len(txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    words = split_words(txt)\n    # Split on commas\n    words = split_words(\",\".join(words))\n    # Split on odd order in the alphabet\n    words = split_words(\"ord(\".join(words))\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(words)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(\" \")\n    if len(words) == 1:\n        return [words[0], words[1], words[2]]\n    else:\n        return [words[0], words[1], words[2]]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(',')\n    words = [word for word in words if word.startswith(' ')]\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    words = split_words(txt)\n    # Split on commas\n    words = split_words(\",\".join(words))\n    # Split on odd order\n    words = split_words(\",\".join([ord(x) for x in words]))\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(words)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(txt)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split the string on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(txt)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 2)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 3)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 4)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 5)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 6)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 7)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 8)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 9)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 10)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 11)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if len(txt) > 1:\n        return split_words(txt)\n    if len(txt) > 2:\n        return split_words(txt)\n    if len(txt) > 3:\n        return split_words(txt)\n    if len(txt) > 4:\n        return split_words(txt)\n    if len(txt) > 5:\n        return split_words(txt)\n    if len(txt) > 6:\n        return split_words(txt)\n    if len(txt) > 7:\n        return split_words(txt)\n    if len(txt) > 8:\n        return split_words(txt)\n    if len(txt) > 9:\n        return split_words(txt)\n    if len(txt) > 10:\n        return split_words(txt)\n    if len(txt) > 11:\n        return split_words(txt)\n    if len(txt) > 12:\n        return split_words(txt)\n    if len(txt) > 13:\n        return split_words(txt)\n    if len(txt) > 14:\n        return split_words(txt)\n    if len(txt) > 15:\n        return split_words(txt)\n    if len(txt) > 16:\n        return split_words(txt)\n    if len(txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order letters\n    txt = txt.split(\" \", ord('a') == 0)\n    # Split on even order letters\n    txt = txt.split(\" \", ord('b') == 1)\n    # Split on even order letters\n    txt = txt.split(\" \", ord('z') == 25)\n    # Split on odd order letters\n    txt = txt.split(\" \", ord('f') == 1)\n    # Split on even order letters\n    txt = txt.split(\" \", ord('g') == 1)\n    # Split on even order letters\n    txt = txt.split(\" \", ord('h') == 1)\n    # Split on even order letters\n    txt = txt.split(\" \", ord('i') == 1)\n    # Split on even order letters\n    txt = txt.split(\" \", ord('o') == 1)\n    # Split on even order letters\n    txt = txt.split(\" \", ord('p') == 1)\n    # Split on even order letters\n    txt = txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(',')\n    if len(words) == 0:\n        return []\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) == 1:\n            return [split_words(txt[0]) for txt in txt[1:]]\n        if len(txt) == 2:\n            return [split_words(txt[0]) for txt in txt[1:]]\n        if len(txt) == 3:\n            return [split_words(txt[0]) for txt in txt[1:]]\n        if len(txt) == 4:\n            return [split_words(txt[0]) for txt in txt[1:]]\n        if len(txt) == 5:\n            return [split_words(txt[0]) for txt in txt[1:]]\n        if len(txt) == 6:\n            return [split_words(txt[0]) for txt in txt[1:]]\n        if len(txt) == 7:\n            return", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split the string into words\n    words = split_words(txt)\n    # Return the list of words\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\"", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if len(txt) > 1:\n        return split_words(txt[0])\n    if len(txt) > 2:\n        return split_words(txt[1])\n    if len(txt) > 3:\n        return split_words(txt[2])\n    if len(txt) > 4:\n        return split_words(txt[3])\n    if len(txt) > 5:\n        return split_words(txt[4])\n    if len(txt) > 6:\n        return split_words(txt[5])\n    if len(txt) > 7:\n        return split_words(txt[6])\n    if len(txt) > 8:\n        return split_words(txt[7])\n    if len(txt) > 9:\n        return split_words(txt[8])\n    if len(txt) > 10:\n        return split_words(txt[9])\n    if len(txt) > 11:\n        return split_words(txt[10])\n    if len(txt) > 12:\n        return split_words(txt[11])\n    if len(txt) > 13:\n        return split_words(txt[12])\n    if len(txt) > 14:\n        return split_words(txt[13])\n    if len(txt) > 15:\n        return split_words(txt[14])\n    if len(txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) == 1:\n            return split_words(txt[0])\n        if len(txt) == 2:\n            return split_words(txt[1])\n        if len(txt) == 3:\n            return split_words(txt[2])\n        if len(txt) == 4:\n            return split_words(txt[3])\n        if len(txt) == 5:\n            return split_words(txt[4])\n        if len(txt) == 6:\n            return split_words(txt[5])\n        if len(txt) == 7:\n            return split_words(txt[6])\n        if len(txt) == 8:\n            return split_words(txt[7])\n        if len(txt) == 9:\n            return split_words(txt[8])\n        if len(txt) == 10:\n            return", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) > 1:\n            return [split_words(txt[0]) for txt in txt[1:]]\n        else:\n            return [split_words(txt) for txt in txt[1:]]\n\n    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) > 1:\n            return [", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    #", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    words = split_words(txt)\n    # Split on commas\n    words = split_words(','.join(words))\n    # Split on odd order letters\n    words = split_words(','.join([ord(x) for x in words]))\n    # Split on odd order letters\n    words = split_words(','.join([ord(x) for x in words]))\n    # Split on odd order letters\n    words = split_words(','.join([ord(x) for x in words]))\n    # Split on odd order letters\n    words = split_words(','.join([ord(x) for x in words]))\n    # Split on odd order letters\n    words = split_words(','.join([ord(x) for x in words]))\n    # Split on odd order letters\n    words = split_words(','.join([ord(x) for x in words]))\n    # Split on odd order letters\n    words = split_words(','.join([ord(x) for x in words]))\n    # Split on odd order letters\n    words = split_words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[:-1]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split the string into words\n    words = split_words(txt)\n    # Return the number of words that are lower-case letters with odd order in the alphabet\n    return len(words)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if len(txt) > 1:\n        return split_words(txt)\n    if len(txt) > 2:\n        return split_words(txt)\n    if len(txt) > 3:\n        return split_words(txt)\n    if len(txt) > 4:\n        return split_words(txt)\n    if len(txt) > 5:\n        return split_words(txt)\n    if len(txt) > 6:\n        return split_words(txt)\n    if len(txt) > 7:\n        return split_words(txt)\n    if len(txt) > 8:\n        return split_words(txt)\n    if len(txt) > 9:\n        return split_words(txt)\n    if len(txt) > 10:\n        return split_words(txt)\n    if len(txt) > 11:\n        return split_words(txt)\n    if len(txt) > 12:\n        return split_words(txt)\n    if len(txt) > 13:\n        return split_words(txt)\n    if len(txt) > 14:\n        return split_words(txt)\n    if len(txt) > 15:\n        return split_words(txt)\n    if len(txt) > 16:\n        return split_words(txt)\n    if len(txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split the string into words\n    words = split_words(txt)\n    # Return the number of words that are lower-case letters with odd order in the alphabet\n    return len(words)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 2)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 3)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 4)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 5)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 6)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 7)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 8)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 9)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 10)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 11)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"abcdef\") == 3 \n        '''\n        return split_words(txt)\n\n    def split_words(txt, separator=','):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) == 1:\n            return split_words(txt[0])\n        if len(txt) == 2:\n            return split_words(txt[1])\n        if len(txt) == 3:\n            return split_words(txt[2])\n        if len(txt) == 4:\n            return split_words(txt[3])\n        if len(txt) == 5:\n            return split_words(txt[4])\n        if len(txt) == 6:\n            return split_words(txt[5])\n        if len(txt) == 7:\n            return split_words(txt[6])\n        if len(txt) == 8:\n            return split_words(txt[7])\n        if len(txt) == 9:\n            return split_words(txt[8])\n        if len(txt) == 10:\n            return", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(\",\")\n    return [word for word in words if word.startswith(\"abcdef\")]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 2)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 3)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 4)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 5)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 6)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 7)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 8)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 9)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 10)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 11)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"abcdef\") == 3 \n        '''\n        return split_words(txt)\n\n    def split_words(txt, start=None):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world!\"", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(',')\n    if len(words) == 1:\n        return [words[0]]\n    else:\n        return [words[0]].split(',')", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + \" \"\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + \" \" + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + \" \" + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + \" \" + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + \" \" + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + \" \" + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + \" \" + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + \" \" + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + \" \" + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    return split_words(txt)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(txt)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = []\n    for word in txt:\n        if word.startswith(\" \"):\n            words.append(word[2:])\n        elif word.startswith(\" \"):\n            words.append(word[2:])\n        elif word.startswith(\" \"):\n            words.append(word[2:])\n        elif word.startswith(\" \"):\n            words.append(word[2:])\n        elif word.startswith(\" \"):\n            words.append(word[2:])\n        elif word.startswith(\" \"):\n            words.append(word[2:])\n        elif word.startswith(\" \"):\n            words.append(word[2:])\n        elif word.startswith(\" \"):\n            words.append(word[2:])\n        elif word.startswith(\" \"):\n            words.append(word[2:])\n        elif word.startswith(\" \"):\n            words.append(word[2:])\n        elif word.startswith(\" \"):\n            words.append(word[2:])\n        elif word.startswith(\" \"):\n            words.append(word[2:])\n        elif word.startswith(\" \"):\n            words.append(word[2:", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) == 1:\n            return split_words(txt[0])\n        if len(txt) == 2:\n            return split_words(txt[1])\n        if len(txt) == 3:\n            return split_words(txt[2])\n        if len(txt) == 4:\n            return split_words(txt[3])\n        if len(txt) == 5:\n            return split_words(txt[4])\n        if len(txt) == 6:\n            return split_words(txt[5])\n        if len(txt) == 7:\n            return split_words(txt[6])\n        if len(txt) == 8:\n            return split_words(txt[7])\n        if len(txt) == 9:\n            return split_words(txt[8])\n        if len(txt) == 10:\n            return", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(txt) - 1", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(txt) - 1", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\"", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    words = split_words(txt)\n    # Split on commas\n    words = [word for word in words if word not in ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',',", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    #", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \"):\n        return split_words(txt.split(\" \"))\n    elif txt.startswith(\" \"):\n        return split_words(txt.split(\" \"))\n    elif txt.startswith(\" \"):\n        return split_words(txt.split(\" \"))\n    elif txt.startswith(\" \"):\n        return split_words(txt.split(\" \"))\n    elif txt.startswith(\" \"):\n        return split_words(txt.split(\" \"))\n    elif txt.startswith(\" \"):\n        return split_words(txt.split(\" \"))\n    elif txt.startswith(\" \"):\n        return split_words(txt.split(\" \"))\n    elif txt.startswith(\" \"):\n        return split_words(txt.split(\" \"))\n    elif txt.startswith(\" \"):\n        return split_words(txt.split(\" \"))\n    elif txt.startswith(\" \"):\n        return split_words(txt.split(\" \"))\n    elif txt.startswith(\" \"):\n        return split_", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\"", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 2)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 3)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 4)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 5)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 6)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 7)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 8)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 9)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 10)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 11)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split the string on whitespace\n    txt = split_words(txt)\n    # Split the string on commas\n    txt = split_words(txt, \",\")\n    # Split the string on odd order\n    txt = split_words(txt, \",\", ord('a') == 0, ord('b') == 1,... ord('z') == 25)\n    return txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        return split_words(txt)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        return split_words(txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \"\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if len(txt) > 1:\n        return split_words(txt[0])\n    if len(txt) > 2:\n        return split_words(txt[1])\n    if len(txt) > 3:\n        return split_words(txt[2])\n    if len(txt) > 4:\n        return split_words(txt[3])\n    if len(txt) > 5:\n        return split_words(txt[4])\n    if len(txt) > 6:\n        return split_words(txt[5])\n    if len(txt) > 7:\n        return split_words(txt[6])\n    if len(txt) > 8:\n        return split_words(txt[7])\n    if len(txt) > 9:\n        return split_words(txt[8])\n    if len(txt) > 10:\n        return split_words(txt[9])\n    if len(txt) > 11:\n        return split_words(txt[10])\n    if len(txt) > 12:\n        return split_words(txt[11])\n    if len(txt) > 13:\n        return split_words(txt[12])\n    if len(txt) > 14:\n        return split_words(txt[13])\n    if len(txt) > 15:\n        return split_words(txt[14])\n    if len(txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(\",\")\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    else:\n        return [words[0], words[1], words[2]]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(txt) - 1", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"abcdef\") == 3 \n        '''\n        return split_words(txt)\n\n    def split_words(txt, delimiter=','):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split the string on whitespace\n    txt = split_words(txt)\n    # Split on commas\n    txt = split_words(txt, ',')\n    # Split on commas\n    txt = split_words(txt, ',', ',')\n    # Split on commas\n    txt = split_words(txt, ',', ',', ',')\n    # Split on commas\n    txt = split_words(txt, ',', ',', ',', ',')\n    # Split on commas\n    txt = split_words(txt, ',', ',', ',', ',', ',')\n    # Split on commas\n    txt = split_words(txt, ',', ',', ',', ',', ',', ',', ',')\n    # Split on commas\n    txt = split_words(txt, ',', ',', ',', ',', ',', ',', ',', ',')\n    # Split on commas\n    txt = split_words(txt, ',', ',',", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 2)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 3)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 4)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 5)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 6)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 7)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = split_words(txt)\n    if len(words) == 0:\n        return []\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) > 1:\n            return [split_words(txt[0]) for txt in txt[1:]]\n        return [split_words(txt) for txt in txt[1:]]\n\n    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) > 1:\n            return [split_", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if len(txt) == 0:\n        return []\n    split_words = split_words(txt)\n    # Split on commas\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[0])\n    # Split on odd order in the alphabet\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[1])\n    # Split on odd order in the alphabet\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[2])\n    # Split on odd order in the alphabet\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[3])\n    # Split on odd order in the alphabet\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[4])\n    # Split on odd order in the alphabet\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[5])\n    # Split on odd order in the alphabet\n    if len(split_words) == 0:\n        return []", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"abcdef\") == 3 \n        '''\n        return split_words(txt)\n\n    def split_words(txt, start, end):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world!", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(txt) - 1", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if len(txt) == 0:\n        return []\n    split_words = split_words(txt)\n    # Split on commas\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[:-1])\n    # Split on odd order in the alphabet\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[ord('z')])\n    # Split on odd order in the alphabet\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[ord('f')])\n    # Split on odd order in the alphabet\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[ord('r')])\n    # Split on odd order in the alphabet\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_words[ord('u')])\n    # Split on odd order in the alphabet\n    if len(split_words) == 0:\n        return []\n    split_words = split_words(split_", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(\",\")\n    if len(words) == 1:\n        return [words[0], words[1], words[2]]\n    else:\n        return [words[0], words[1], words[2]]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    words = split_words(txt)\n    # Split on commas\n    words = split_words(','.join(words))\n    # Split on odd order\n    words = split_words(ord('a') + ord('b') + ord('z') + 1)\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(words)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    words = split_words(txt)\n    # Split on commas\n    words = [word for word in words if word.startswith(\",\")]\n    # Split on odd order in the alphabet\n    words = [ord(word) for word in words]\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(words)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    return split_words(txt)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) > 1:\n            return [split_words(txt[0]) for txt in txt[1:]]\n        if len(txt) > 2:\n            return [split_words(txt[1]) for txt in txt[1:]]\n        if len(txt) > 3:\n            return [split_words(txt[2]) for txt in txt[1:]]\n        if len(txt) > 4:\n            return [split_words(txt[3]) for txt in txt[1:]]\n        if len(txt) > 5:\n            return [split_words(txt[4]) for txt in txt[1:]]\n        if len(txt) > 6:\n            return [split_words(txt[5]) for txt in txt[1:]]\n        if len(txt) > 7:\n            return", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(txt)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if len(txt) > 1:\n        return split_words(txt)\n    return []", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(' ')\n    words = [word for word in words if word.startswith(' ')]\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(',')\n    if len(words) == 1:\n        return [words[0], words[1], words[2]]\n    else:\n        return [words[0], words[1], words[2]]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if len(txt) == 1:\n        return split_words(txt[0])\n    if len(txt) == 2:\n        return split_words(txt[1])\n    if len(txt) == 3:\n        return split_words(txt[2])\n    if len(txt) == 4:\n        return split_words(txt[3])\n    if len(txt) == 5:\n        return split_words(txt[4])\n    if len(txt) == 6:\n        return split_words(txt[5])\n    if len(txt) == 7:\n        return split_words(txt[6])\n    if len(txt) == 8:\n        return split_words(txt[7])\n    if len(txt) == 9:\n        return split_words(txt[8])\n    if len(txt) == 10:\n        return split_words(txt[9])\n    if len(txt) == 11:\n        return split_words(txt[10])\n    if len(txt) == 12:\n        return split_words(txt[11])\n    if len(txt) == 13:\n        return split_words(txt[12])\n    if len(txt) == 14:\n        return split_words(txt[13])\n    if len(txt) == 15:\n        return split_words(txt[14])\n    if len(txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\"", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 2)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 3)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 4)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 5)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 6)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 7)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if len(txt) == 1:\n        return split_words(txt[0])\n    if len(txt) == 2:\n        return split_words(txt[1])\n    if len(txt) == 3:\n        return split_words(txt[2])\n    if len(txt) == 4:\n        return split_words(txt[3])\n    if len(txt) == 5:\n        return split_words(txt[4])\n    if len(txt) == 6:\n        return split_words(txt[5])\n    if len(txt) == 7:\n        return split_words(txt[6])\n    if len(txt) == 8:\n        return split_words(txt[7])\n    if len(txt) == 9:\n        return split_words(txt[8])\n    if len(txt) == 10:\n        return split_words(txt[9])\n    if len(txt) == 11:\n        return split_words(txt[10])\n    if len(txt) == 12:\n        return split_words(txt[11])\n    if len(txt) == 13:\n        return split_words(txt[12])\n    if len(txt) == 14:\n        return split_words(txt[13])\n    if len(txt) == 15:\n        return split_words(txt[14])\n    if len(txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order of letters\n    txt = txt.split(\",\")\n    # Split on odd order of letters\n    txt = txt.split(\",\")\n    # Split on odd order of letters\n    txt = txt.split(\",\")\n    # Split on odd order of letters\n    txt = txt.split(\",\")\n    # Split on odd order of letters\n    txt = txt.split(\",\")\n    # Split on odd order of letters\n    txt = txt.split(\",\")\n    # Split on odd order of letters\n    txt = txt.split(\",\")\n    # Split on odd order of letters\n    txt = txt.split(\",\")\n    # Split on odd order of letters\n    txt = txt.split(\",\")\n    # Split on odd order of letters\n    txt = txt.split(\",\")\n    # Split on odd order of letters\n    txt = txt.split(\",\")\n    # Split on odd order of letters\n    txt = txt.split(\",\")\n    # Split on odd order of letters\n    txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    words = split_words(txt)\n    # Split on commas\n    words = [word for word in words if not word.startswith(',')]\n    # Split on odd order in the alphabet\n    words = [word for word in words if ord(word) == ord('z')]\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(words)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    #", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    split_words = split_words(txt)\n    return split_words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if len(txt) == 0:\n        return []\n    # Split on commas\n    if len(txt) == 1:\n        return [txt[0], txt[1]]\n    # Split on odd order\n    if len(txt) == 3:\n        return [txt[0], txt[1], txt[2]]\n    # Split on even order\n    if len(txt) == 5:\n        return [txt[0], txt[1], txt[2], txt[3]]\n    # Split on even order\n    if len(txt) == 6:\n        return [txt[0], txt[1], txt[2], txt[3], txt[4]]\n    # Split on even order\n    if len(txt) == 7:\n        return [txt[0], txt[1], txt[2], txt[3], txt[4, 5]]\n    # Split on even order\n    if len(txt) == 8:\n        return [txt[0], txt[1], txt[2], txt[3], txt[4, 5, 6]]\n    # Split on even order\n    if len(txt) == 9:\n        return [txt[0], txt[1], txt[2], txt[3], txt[4, 5, 6, 7]]\n    # Split on even order\n    if len(txt) == 10:\n        return [txt[0], txt[1]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    words = split_words(txt)\n    # Split on commas\n    words = [word for word in words if word not in ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',',", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if len(txt) > 1:\n        return split_words(txt[0])\n    if len(txt) > 2:\n        return split_words(txt[1])\n    if len(txt) > 3:\n        return split_words(txt[2])\n    if len(txt) > 4:\n        return split_words(txt[3])\n    if len(txt) > 5:\n        return split_words(txt[4])\n    if len(txt) > 6:\n        return split_words(txt[5])\n    if len(txt) > 7:\n        return split_words(txt[6])\n    if len(txt) > 8:\n        return split_words(txt[7])\n    if len(txt) > 9:\n        return split_words(txt[8])\n    if len(txt) > 10:\n        return split_words(txt[9])\n    if len(txt) > 11:\n        return split_words(txt[10])\n    if len(txt) > 12:\n        return split_words(txt[11])\n    if len(txt) > 13:\n        return split_words(txt[12])\n    if len(txt) > 14:\n        return split_words(txt[13])\n    if len(txt) > 15:\n        return split_words(txt[14])\n    if len(txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 2)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 3)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 4)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 5)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 6)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 7)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 8)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 9)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 10)\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \", 11)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) > 1:\n            return [split_words(txt[0]) for txt in txt[1:]]\n        else:\n            return [split_words(txt) for txt in txt[1:]]\n\n    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) > 1:\n            return [", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"abcdef\") == 3 \n        '''\n        return [split_words(x) for x in txt]\n    def split_words(txt, spaces):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = []\n    for word in txt:\n        if word.startswith(\" \"):\n            words.append(word.split(\" \")[0])\n        else:\n            words.append(word)\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(\",\")\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    else:\n        return [words[0], words[1], words[2]]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    if txt.", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split the string on whitespace\n    txt = split_words(txt)\n    # Split on commas\n    if len(txt) == 1:\n        txt = split_words(txt[0])\n    # Split on commas\n    if len(txt) == 2:\n        txt = split_words(txt[0])\n    # Split on commas\n    if len(txt) == 3:\n        txt = split_words(txt[0])\n    # Split on commas\n    if len(txt) == 4:\n        txt = split_words(txt[0])\n    # Split on commas\n    if len(txt) == 5:\n        txt = split_words(txt[0])\n    # Split on commas\n    if len(txt) == 6:\n        txt = split_words(txt[0])\n    # Split on commas\n    if len(txt) == 7:\n        txt = split_words(txt[0])\n    # Split on commas\n    if len(txt) == 8:\n        txt = split_words(txt[0])\n    # Split on commas\n    if len(txt) == 9:\n        txt = split_words(txt[0])\n    # Split on commas\n    if len(txt) == 10:\n        txt = split_words(txt[0])\n    # Split on commas\n    if len(txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(\" \")\n    words = [word for word in words if word.isdigit()]\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(',')\n    if len(words) == 0:\n        return []\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \"\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and txt[2:] == \",\":\n        txt = txt[2:]\n    elif txt.startswith(\" \") and", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\",", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(',')\n    words = [word for word in words if word not in ',' and word not in ','.split(',')]\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\"", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    else:\n        txt = txt.split(\" \")\n    # Split on commas\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    else:\n        txt = txt.split(\" \")\n    # Split on commas\n    if txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    else:\n        txt = txt.split(\" \")\n    # Split on commas\n    if txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    else:\n        txt = txt.split(\" \")\n    # Split on commas\n    if txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    else:\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[:-1]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt[-2:]\n    elif txt.startswith(\" \"):\n        txt = txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 2)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 3)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 4)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 5)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 6)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 7)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 1)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 2)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 3)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 4)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 5)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 6)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \", 7)\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(\",\")\n    if len(words) == 3:\n        return [words[0], words[1], words[2]]\n    else:\n        return [words[0], words[1], words[2]]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"):\n        txt = txt.split(\" \")\n    elif txt.startswith(\" \") and txt.endswith(\" \"", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(txt) - 1", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(\",\")\n    words = [word for word in words if word.startswith(\"abcdef\")]\n    return words", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\"", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\" \")\n    txt = txt.split(\"", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(txt) - 1", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    words = split_words(txt)\n    # Split on commas\n    words = [word for word in words if word not in ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',',", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) > 1:\n            return [split_words(txt[0]) for txt in txt[1:]]\n        else:\n            return [split_words(txt[0]) for txt in txt[1:]]\n\n    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        '''\n        if len(txt) == 0:\n            return []\n        if len(txt) > 1:\n            return", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[2:] + txt[", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if len(txt) > 1:\n        return split_words(txt)\n    if len(txt) > 2:\n        return split_words(txt)\n    if len(txt) > 3:\n        return split_words(txt)\n    if len(txt) > 4:\n        return split_words(txt)\n    if len(txt) > 5:\n        return split_words(txt)\n    if len(txt) > 6:\n        return split_words(txt)\n    if len(txt) > 7:\n        return split_words(txt)\n    if len(txt) > 8:\n        return split_words(txt)\n    if len(txt) > 9:\n        return split_words(txt)\n    if len(txt) > 10:\n        return split_words(txt)\n    if len(txt) > 11:\n        return split_words(txt)\n    if len(txt) > 12:\n        return split_words(txt)\n    if len(txt) > 13:\n        return split_words(txt)\n    if len(txt) > 14:\n        return split_words(txt)\n    if len(txt) > 15:\n        return split_words(txt)\n    if len(txt) > 16:\n        return split_words(txt)\n    if len(txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(' ')\n    # Split on odd order in the alphabet\n    txt = txt.split(',')\n    # Split on odd order in the alphabet\n    txt = txt.split(',')\n    # Split on odd order in the alphabet\n    txt = txt.split(',')\n    # Split on odd order in the alphabet\n    txt = txt.split(',')\n    # Split on odd order in the alphabet\n    txt = txt.split(',')\n    # Split on odd order in the alphabet\n    txt = txt.split(',')\n    # Split on odd order in the alphabet\n    txt = txt.split(',')\n    # Split on odd order in the alphabet\n    txt = txt.split(',')\n    # Split on odd order in the alphabet\n    txt = txt.split(',')\n    # Split on odd order in the alphabet\n    txt = txt.split(',')\n    # Split on odd order in the alphabet\n    txt = txt.split(',", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt =", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    def split_words(txt):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n        split_words(\"abcdef\") == 3 \n        '''\n        return split_words(txt)\n\n    def split_words(txt, start=None):\n        '''\n        Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n        Examples\n        split_words(\"Hello world!\"", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    if txt.startswith(\" \"):\n        txt = txt[:-1]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt[2:]\n    elif txt.startswith(\" \"):\n        txt = txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if len(txt) > 1:\n        return split_words(txt[0])\n    if len(txt) > 2:\n        return split_words(txt[1])\n    if len(txt) > 3:\n        return split_words(txt[2])\n    if len(txt) > 4:\n        return split_words(txt[3])\n    if len(txt) > 5:\n        return split_words(txt[4])\n    if len(txt) > 6:\n        return split_words(txt[5])\n    if len(txt) > 7:\n        return split_words(txt[6])\n    if len(txt) > 8:\n        return split_words(txt[7])\n    if len(txt) > 9:\n        return split_words(txt[8])\n    if len(txt) > 10:\n        return split_words(txt[9])\n    if len(txt) > 11:\n        return split_words(txt[10])\n    if len(txt) > 12:\n        return split_words(txt[11])\n    if len(txt) > 13:\n        return split_words(txt[12])\n    if len(txt) > 14:\n        return split_words(txt[13])\n    if len(txt) > 15:\n        return split_words(txt[14])\n    if len(txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    words = txt.split(\" \")\n    # Split on commas\n    words = [word for word in words if word.isalnum()]\n    # Split on odd order in the alphabet\n    words = [word for word in words if ord(word) > ord('z')]\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(words)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on commas\n    txt = txt.split(\"", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\" \")", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    #", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on even order\n    txt = txt.split(\",\")\n    # Return the number of lower-case letters with odd order in the alphabet\n    return len(txt)", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    words = txt.split(\",\")\n    if len(words) == 0:\n        return []\n    return [word for word in words if word.startswith(\"abcdef\")]", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\" \")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split the string on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    if len(txt) > 1:\n        txt = txt[:-1].split(\",\")\n    # Split on commas\n    if len(txt) > 2:\n        txt = txt[:-1].split(\",\")\n    # Split on commas\n    if len(txt) > 3:\n        txt = txt[:-1].split(\",\")\n    # Split on commas\n    if len(txt) > 4:\n        txt = txt[:-1].split(\",\")\n    # Split on commas\n    if len(txt) > 5:\n        txt = txt[:-1].split(\",\")\n    # Split on commas\n    if len(txt) > 6:\n        txt = txt[:-1].split(\",\")\n    # Split on commas\n    if len(txt) > 7:\n        txt = txt[:-1].split(\",\")\n    # Split on commas\n    if len(txt) > 8:\n        txt = txt[:-1].split(\",\")\n    # Split on commas\n    if len(txt) > 9:\n        txt = txt[:-1].split(\",\")\n    # Split on commas", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if len(txt) > 1:\n        return [split_words(txt)]\n    if len(txt) == 2:\n        return [split_words(txt)]\n    if len(txt) == 3:\n        return [split_words(txt)]\n    if len(txt) == 4:\n        return [split_words(txt)]\n    if len(txt) == 5:\n        return [split_words(txt)]\n    if len(txt) == 6:\n        return [split_words(txt)]\n    if len(txt) == 7:\n        return [split_words(txt)]\n    if len(txt) == 8:\n        return [split_words(txt)]\n    if len(txt) == 9:\n        return [split_words(txt)]\n    if len(txt) == 10:\n        return [split_words(txt)]\n    if len(txt) == 11:\n        return [split_words(txt)]\n    if len(txt) == 12:\n        return [split_words(txt)]\n    if len(txt) == 13:\n        return [split_words(txt)]\n    if len(txt) == 14:\n        return [", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    if len(txt) == 0:\n        return []\n    if len(txt) > 1:\n        return split_words(txt[0])\n    if len(txt) > 2:\n        return split_words(txt[1])\n    if len(txt) > 3:\n        return split_words(txt[2])\n    if len(txt) > 4:\n        return split_words(txt[3])\n    if len(txt) > 5:\n        return split_words(txt[4])\n    if len(txt) > 6:\n        return split_words(txt[5])\n    if len(txt) > 7:\n        return split_words(txt[6])\n    if len(txt) > 8:\n        return split_words(txt[7])\n    if len(txt) > 9:\n        return split_words(txt[8])\n    if len(txt) > 10:\n        return split_words(txt[9])\n    if len(txt) > 11:\n        return split_words(txt[10])\n    if len(txt) > 12:\n        return split_words(txt[11])\n    if len(txt) > 13:\n        return split_words(txt[12])\n    if len(txt) > 14:\n        return split_words(txt[13])\n    if len(txt) > 15:\n        return split_words(txt[14])\n    if len(txt", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet\n    txt = txt.split(\" \")\n    # Split on odd order in the alphabet", "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''    # Split on whitespace\n    txt = txt.split(\" \")\n    # Split on commas\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    # Split on odd order\n    txt = txt.split(\",\")\n    #"]]