[["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    #-----------------------------\n    # Return True if an element is monotonic increasing or decreasing.\n    #-----------------------------\n    return itertools.product(l, -1).any() or l.any() or l.any() or l.any()\n\n    #-----------------------------\n    # Return True if an element is monotonic increasing or decreasing.\n    #-----------------------------\n    return monotonic([0, 3, 1, 1, 2, 1]).any() or monotonic([0, -1, 3, 1, 2, 1]).any() or monotonic([0, -1]).any() or monotonic([0, 1]).any() or monotonic([0, -1, 1]).any() or monotonic([0, -2]).any() or monotonic([1, 2, 4, 20])\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 4, 20, 3, 1, 2, 1]).any() or monotonic([1, 2, 4, 20, 3, 1, 2, 1]).any() or monotonic([1, 4, 20, 3, 1, 2, 1]).any() or monotonic([1, 2, 4, 20, 3, 1, 2", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for l in l:\n        if isinstance(l, int):\n            if l <= 0:\n                return False\n            elif l >= 0:\n                return True\n        elif isinstance(l, list):\n            for k in l:\n                if isinstance(k, int):\n                    if k <= 0:\n                        return False\n                    elif k >= 0:\n                        return True\n        elif isinstance(l, (list, tuple)):\n            for k in l:\n                if isinstance(k, int):\n                    if k <= 0:\n                        return False\n                    elif k >= 0:\n                        return True\n        elif isinstance(l, (tuple, list)):\n            for k in l:\n                if isinstance(k, int):\n                    if k <= 0:\n                        return False\n                    elif k >= 0:\n                        return True\n        elif isinstance(l, float):\n            if not isinstance(l, list):\n                return False\n            elif isinstance(l, tuple):\n                if isinstance(k, int):\n                    if k <= 0:\n                        return False\n                    elif k >= 0:\n                        return True\n                elif isinstance(k, float):\n                    if k <= 0:\n                        return False\n                    elif k >= 0:\n                        return True\n        elif isinstance(l, None):\n            return False\n        elif isinstance(l, basestr", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return bool([isinstance(x, list) for x in l])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return isinstance(l, list) and len(l) == 1 and not monotonic(l[0]) or \\\n               not monotonic(l[1]) or not monotonic(l[2]) or \\\n               not monotonic(l[3])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def monit(x: int):\n        return x > 0 or x < -1\n    return monit", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return all(l.__iter__() for l in l)\n    return False\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)!= 3:\n        return False\n    for element in l:\n        if element[0]!= element[1] or element[2]!= element[3]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return True\n    return False\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_monotonic(l: list):\n        if len(l) < 2:\n            return True\n        elif len(l) == 2:\n            return isinstance(l[0], tuple) and isinstance(l[1], tuple)\n        else:\n            return False\n        return is_monotonic(l) or not is_monotonic([1, 2, 4, 20])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l[0] in (1, 20, 4, 10):\n        return True\n    if l[0] in (-1, -20, -40, -100):\n        return False\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return True if len(l) == 1 else False\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return bool(isinstance(l, list))\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return type([int(x) for x in l]) == list and type([int(x) for x in l]) == int and type([int(x) for x in l]) == int and type([int(x) for x in l]) == int", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return itertools.ismonotonic(l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for n, m in zip(l, monotonic):\n        if n == m:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return l[0] == 1 and l[-1] == 1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return isinstance(l, list) and len(l) == 2 and l[0] < l[-1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    return monotonic(l[0]) or monotonic(l[1])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) > 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return isinstance(l, list) and list(l)[::-1] == [True] and list(l)[-1] == [False]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for x in l:\n        if (not x[0]) or (not x[0] == x[1] or x[1] == 0) or (not x[1] == 1):\n            return False\n        else:\n            return True\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return not monotonic([1, 2, 3, 4, 20])\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def monotonic(l: list):\n        \"\"\"Return True is list elements are monotonically increasing or decreasing.\n        \"\"\"\n        return all([(i, j) for i, j in l])\n    return monotonic", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (len(l) <= 10) or (len(l) <= 20) or (len(l) <= 4)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return [(i, j) for i, j in enumerate(l)]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in l:\n        if i > 0:\n            return True\n        else:\n            return False\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return True if isinstance(l, list) else False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    for l in l:\n        if l[0] < l[1]:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic([1, 20, 4, 10]) or monotonic([1, 20, -4]) or monotonic([1, 4, 0, 10])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n    return int(l[0]) < int(l[0]) + int(l[1]) < int(l[1]) + int(l[2]) < int(l[2]) + int(l[3]) < int(l[3]) + int(l[4]) < int(l[4]) + int(l[5]) < int(l[5]) + int(l[6]) < int(l[6]) + int(l[7]) < int(l[7])\n    return True\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for element in l:\n        if element < 0:\n            return False\n        else:\n            if element >= 20:\n                return True\n            elif element < 0 and element >= 4:\n                return True\n            elif element >= 1 and element >= 4:\n                return True\n            elif element >= 4 and element >= 0:\n                return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return any(x[0] for x in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in l:\n        if (i[0] == 1 or i[0] == 0 or i[1] == 0 or i[0] == 0 or i[1] == 0 or i[1] == 0 or i[0] == 0 or i[0] == 20 or i[0] == 0 or i[1] == 0 or i[1] == 0):\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return False in l", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for item in l:\n        if item[0] < item:\n            return True\n        elif item[0] > item:\n            return False\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for x in l:\n        if x >= 0:\n            return True\n        if x <= 0:\n            return False\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return isinstance(l, list)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic([1, 2, 4, 20]) or monotonic([1, 4, 0, 20]) or monotonic([1, -20, 0, -10])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for x in range(10):\n        if x > 0:\n            return True\n    return False\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)!= 4:\n        raise TypeError(\"expected 4 elements to be a list, got \"\n                          \"%d\" % len(l))\n    return l[0] < l[1] < l[2] < l[3]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return l[0] == 4 and l[-1] == 0 and len(l) == 20\n    elif isinstance(l, tuple):\n        return l[0] == 2 and l[-1] == 0 and len(l) == 20\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic([1, 20, 4, 10])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return list(set(list(range(1, len(l))) % l) & set(list(range(1, len(l) - 1))) & set(set(set(list(range(1, len(l)) - 1)) | set(set(set(set(range(1, len(l)) - 1)))) % l) & set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Test monotonicity with the following lists:\n    #\n    #    [2, 10, 3, 5, 10]\n    #    [10, 2, 10, 10, 3, 5, 20]\n    #    [10, 5, 3, 10, 10, 5, 20]\n    #\n    #    [10, 4, 10, 3, 5, 20]\n    #    [10, 2, 10, 5, 10, 3, 5, 20]\n    #\n    #    [1, 2, 5, 3, 10, 20]\n    #\n    #    [1, 5, 3, 2, 10, 20]\n    #\n    #    [1, 5, 3, 2, 10, 20]\n    #\n    #    [2, 2, 10, 3, 5, 20]\n    #    [2, 5, 3, 10, 10, 5, 20]\n    #\n    #    [1, 20, 4, 10, 3, 5, 20]\n    #    [1, 20, 4, 10, 3, 5, 20]\n    #\n    #    [1, 10, 5, 3, 10, 20]\n    #    [1, 10, 5, 3, 10, 5, 20]\n    #\n    #", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for item in l:\n        if isinstance(item, list):\n            return True\n        if isinstance(item, int):\n            return item < 0\n        if isinstance(item, float):\n            return item < 10\n        return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    assert isinstance(l, list)\n    return l[0] <= l[1] <= l[2] <= l[3]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n    for i in l:\n        if i not in [None, '-']:\n            return True\n        if len(i) == 0:\n            return False\n        if i[0] < i[1]:\n            return True\n        if len(i) == 1:\n            return False\n        if i[0] == i[1]:\n            return True\n        if i[0] >= i[1]:\n            return True\n        if len(i) == 2:\n            return True\n        if i[0] < i[1]:\n            return True\n        if len(i) == 3:\n            return True\n        if i[0] == i[1]:\n            return True\n        if i[0] >= i[1]:\n            return True\n        if len(i) == 4:\n            return True\n        if i[0] > i[1]:\n            return True\n        if len(i) == 5:\n            return True\n        if i[0] == i[1]:\n            return True\n        if i[0] >= i[1]:\n            return True\n\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def _monotonous(l: list):\n        if len(l) == 0:\n            return True\n        for i in range(0, len(l)):\n            if l[i] > l[i-1] and l[i] < l[i+1]:\n                return True\n            if l[i] == 0 and l[i+1] == 0:\n                return True\n            return False\n        return False\n    monotonic([1, 20, 4, 10])\n    monotonic([1, 0, -10])\n    monotonic([1, -20])\n    monotonic([1, -10])\n    monotonic([1, 20, 10])\n    monotonic([1, 0, 0, -10])\n    monotonic([1, -10])\n    monotonic([1, 20, 0, -10])\n    monotonic([1, 0, -10])\n    monotonic([1, 0, -20])\n    monotonic([1, -20])\n    monotonic([1, -10])\n    monotonic([1, 0, 0, -10])\n    monotonic([1, 0, -20])\n    monotonic([1, 0, -20])\n    monotonic([1, 0, -20])\n    monotonic([1, 0, 0, -10])\n    monotonic([1, -20])\n    monot", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for element in l:\n        if element.value < 0:\n            return False\n        if element.value > 10:\n            return True\n\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic([1, 20, 4, 10])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) == 1 and len(l) <= 1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return isinstance(l, list) and not len(l) == 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def __iter__(self):\n        return iter(self)\n\n    monotonic = monotonic\n\n    def __getitem__(self, i: int) -> list:\n        return [__iter__()] * len(self) + self[i]\n\n    def __setitem__(self, i: int, l: list) -> None:\n        self[i] = l\n\nfor i in range(0, len(self) + 1):\n    for j in range(i + 1, len(self) + 1):\n        self[i] = self[j + 1]\n\nfor i in range(0, len(self) + 1):\n    for j in range(i + 1, len(self) + 1):\n        self[i] = self[j]\n\nfor i in range(0, len(self) + 1):\n    for j in range(i + 1, len(self) + 1):\n        self[i] = self[j + 1]\n\nfor i in range(0, len(self) + 1):\n    for j in range(i + 1, len(self) + 1):\n        self[i] = self[j]\n\nfor i in range(0, len(self) + 1):", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) == 1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for a, b in l:\n        if a > b:\n            return True\n        elif a < b:\n            return False\n        else:\n            return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic([0, 1, 4, 10, 0, 0, 2, 20, 1, 4, 10])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return isinstance(l, list)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (l[0] <= 1 and l[0] >= 0 and l[-1] <= 4 and l[-1] >= 0 and l[-1] >= 10)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for element in l:\n        if not element > 0:\n            return True\n        if not element < 0:\n            return False\n\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for element in l:\n        if element > 0:\n            return True\n        elif element < 0:\n            return False\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not isinstance(l, list):\n        return False\n    return monotonic(l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for _ in l:\n        if not isinstance(_, int):\n            raise TypeError(\"element type must be int\")\n        elif isinstance(_, list):\n            return isinstance(_, list)\n        elif isinstance(_, int):\n            return isinstance(_, list)\n        elif isinstance(_, list):\n            return isinstance(_, list)\n    return False\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # The following check does not return the same result as monotonic\n    # on non-degenerate lists, because for non-degenerate lists, the\n    # value of the monotonic function can be -1 if the list is not\n    # degenerate.\n    if l == []:\n        return False\n\n    if len(l) == 1:\n        return True\n    elif len(l) == 2:\n        return int(l[0]) == int(l[1])\n\n    if l == []:\n        return False\n\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (l < 4 or l >= 10 or l == -10)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return (True, False)\n    elif len(l) > 1:\n        return (True, False)\n    else:\n        return (True, False)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (int(l[0]) == int(l[1]) and int(l[2]) == int(l[3]) and int(l[4]) == int(l[5]) and int(l[6]) == int(l[7]) and int(l[8]) == int(l[9]) and int(l[10]) == int(l[11]) and int(l[12]) == int(l[13]) and int(l[14]) == int(l[15])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # deterministic monotonicity\n    if not isinstance(l, list):\n        return False\n    for i in l:\n        if isinstance(i, int):\n            return i < 0 or i > 10\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # We use the list of list elements for this function as a base.\n    return (l[0] <= l[-1]) & (l[0] <= l[-1]) & (l[0] <= l[-1])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(isinstance(elem, list) for elem in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def test(monoton: bool):\n        \"\"\"Test monotonicity.\n        >>> monotonic([1, 2, 4])\n        True\n        >>> monotonic([1, 2, 4])\n        False\n        >>> monotonic([1, 2, 4])\n        True\n        >>> monotonic([1, 4, 2, 20])\n        True\n        >>> monotonic([1, 4, 4, 10])\n        False\n        >>> monotonic([1, 4, 0, -10])\n        True\n        >>> monotonic([1, 0, 2, 20])\n        False\n        >>> monotonic([1, 0, 0, 10])\n        False\n        >>> monotonic([1, 0, -10])\n        False\n        >>> monotonic([0, 2, 4, 20])\n        True\n        >>> monotonic([0, 0, 4, 10])\n        False\n        >>> monotonic([0, -10])\n        False\n        >>> monotonic([0, -20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([1, 4, 0, -10])\n        True\n        >>> monotonic([1, 0, 2, 20])\n        True\n        >>> monotonic([0, 0, 0, 10])\n        True\n        >>> monotonic", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) > 1:\n        return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return ((elem for elem in l if elem > 0) or (elem for elem in l if elem < 0))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return (len(l) == 1 and list(l)[0] == 1 and list(l)[1] == 4 and list(l)[2] == 20 and list(l)[3] == 10 and l.sort())\n        # Let the monotonically increasing or decreasing edges be the same.\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) == len(list(l)) and not monotonic(l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Return True if monotonic is the first element in the list.\n    if len(l) == 1:\n        return True\n    for l in l:\n        if l[0] < 0:\n            return True\n        if l[0] > len(l) - 1:\n            return True\n    return False\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (isinstance(l, list) and (len(l) == 3) and (len(l[0]) == 2) and (len(l[1]) == 4) and (len(l[2]) == 20))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return len(l) == 1\n    return len(l) > 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return bool(l[0] in (1, 2, 4, 20))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n    return monotonic(l) == 1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return (len(l) > 0) and (len(l) < l.size)\n    elif isinstance(l, list) and isinstance(l[0], int):\n        return (len(l) > 0) and (len(l) < l[0])\n    elif isinstance(l, list) and isinstance(l[-1], int):\n        return (len(l) > 0) and (len(l) < l[-1])\n    elif isinstance(l, list) and isinstance(l[-1][-1], int):\n        return (len(l) > 0) and (len(l) < l[-1][-1])\n    elif isinstance(l, list) and isinstance(l[-1][-1], int) and isinstance(l[-1], int):\n        return (len(l) > 0) and (len(l) < l[-1][-1])\n    elif isinstance(l, list) and isinstance(l[-1], int) and isinstance(l[-2][-1], int):\n        return (len(l) > 0) and (len(l) < l[-1][-1])\n    elif isinstance(l, list) and isinstance(l[", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return isinstance(l, list)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return l[0] <= l[-1]\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    try:\n        return all([a < b] for a, b in l)\n    except TypeError:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic([1, 2, 4, 20])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return l.monotonic()\n    return l.monotonic() == False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return isinstance(l, list)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not isinstance(l, list):\n        return False\n    if len(l) == 1:\n        return monotonic(l[0])\n    if len(l) == 2:\n        return monotonic(l[1])\n    if len(l) == 3:\n        return monotonic(l[0] + l[1])\n    if len(l) == 4:\n        return monotonic(l[0] - l[1])\n    if len(l) == 5:\n        return monotonic(l[0] - l[0] + l[1] + l[0])\n    if len(l) == 6:\n        return monotonic(l[0] - l[0] + l[1] + l[0] + l[0] - l[0])\n    return False\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return True\n    if len(l) == 3:\n        return True\n    if len(l) == 4:\n        return True\n    if len(l) == 5:\n        return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Check that the element is monotonic increasing or decreasing.\n    if len(l) == 0:\n        return False\n    if not l[0] == 1 and not l[1] == 1:\n        return False\n    if l[0] > 1 and l[1] > 1:\n        return False\n    if l[0] == -1 and l[1] == -1:\n        return False\n    if l[0] == -1 and l[1] == 1:\n        return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonically([1, 2, 4, 20], True)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return l.ismonotonic()\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in l:\n        if i is None:\n            return False\n        if not i in monotonic(l[i]):\n            return False\n        return True\n    return False\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        for item in l:\n            if item < 0 or item > 20:\n                return False\n    if isinstance(l, list):\n        for item in l:\n            if item < 20 or item > 0:\n                return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l.any:\n        return True\n    return False\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic([1, 2, 4])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] == i:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return l[0] > 0 and l[1] <= 0 and l[2] > 0 and l[3] <= 0\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for element in l:\n        if element[0] < element[1]:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for x in l:\n        if not isinstance(x, int):\n            raise TypeError('Numeric types are not supported.')\n        if isinstance(x, float):\n            if x < 0:\n                raise TypeError('Number types are not supported.')\n            if x > 1:\n                raise TypeError('Double numbers are not supported.')\n        if isinstance(x, list):\n            if not isinstance(x, int):\n                raise TypeError('List elements are not monotonic increasing or decreasing.')\n            if isinstance(x, list):\n                l = [x for x in l if x < 0]\n            if isinstance(x, list):\n                return True\n            if isinstance(x, int):\n                return int(x)\n                if isinstance(x, list):\n                    l = [x for x in l if x > 0]\n            if isinstance(x, list):\n                return True\n            return False\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (len(l) > 0 and (l[0] <= l[-1] and len(l) == len(l[-1])) or (len(l) == 0 and len(l) == 0 and len(l) == 0 and len(l) == 0))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) == 1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all([isinstance(x, list) for x in l]) or l[0].startswith('-')", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return list(range(int(l[0]) * int(l[1]) + int(l[2])) & (1 << int(l[0]) & 1 << int(l[1])) & l[2]) & (1 << int(l[0]) & 1 << int(l[1])) & l[1]) & l[0] <= int(l[2]) & l[3] < int(l[4])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) > 1 and not monotonic(l[0])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return l.every(cmp.cmp) == 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return not monotonic([[1, 3, 1, 20], [20, 2, 0, -10], [20, 2, 10, -10], [20, 2, 0, -10]])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for elem in l:\n        if elem < 0:\n            return True\n        if elem > 0:\n            return True\n    if not isinstance(elem, int):\n        if elem < 0:\n            return True\n        if elem > 0:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return ((l[0]!= 0 and l[1]!= 0 and l[2]!= 0 and l[3]!= 0 and l[4]!= 0 and l[5]!= 0) or (l[0] == 0 and l[1] == 0 and l[2] == 0 and l[3] == 0 and l[4] == 0 and l[5] == 0))\n    for i, l in enumerate(l):\n        if not l[0] in l or not l[1] in l or not l[2] in l or not l[3] in l or not l[4] in l or not l[5] in l:\n            return False\n\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return True\n    for i in l:\n        if not monotonic(i):\n            return False\n    return True\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) > 0 and len(l) < 10", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) > 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return bool(l.any())\n    # # not good\n    # # not good\n    return l.any() # not good\n    # # not good\n    return l.any() # not good\n\n    # # ok\n    # # ok\n    return l.any()\n\n    # # ok\n    return l.any() # not good\n    # # ok\n    return l.any() # not good", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def test(l: list):\n        if len(l) == 2:\n            return l[0] > l[1] and l[0] < l[1]\n        return l[0] < l[1] and l[1] > l[0]\n\n    monotonic.__name__ ='monotonic'\n    monotonic.__doc__ = 'Monotonicity test'\n    monotonic.__version__ = '0.0'\n    monotonic.__source__ = 'Monotonicity'\n    monotonic.__requires__ = ['Monotonicity']\n    monotonic.__requires__ = ['montonic']\n    monotonic.__source_is_const = True\n    monotonic.__name__ ='monotonic'\n    monotonic.__doc__ = 'Monotonicity test'\n    monotonic.__version__ = '1.0'\n    monotonic.__source_is_const = True\n    monotonic.__name__ ='monotonic'\n    monotonic.__doc__ = 'Monotonicity test'\n    monotonic.__version__ = '2.0'\n    monotonic.__source_is_const = True\n    monotonic.__name__ ='monotonic'\n    monotonic.__doc__ = 'Monotonicity test'\n    monotonic.__", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for _ in range(1, len(l)):\n        if l[_-1] in l:\n            return True\n        elif l[_-1] >= l[_]:\n            return True\n    monotonic.__doc__ = monotonic.__doc__ or 'increasing'\n    monotonic.__doc__ = monotonic.__doc__ or 'decreasing'\n    monotonic.__name__ = monotonic.__name__ or'monotonic'\n\n    return monotonic", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n    if len(l)!= 4:\n        return False\n    if len(l)!= 20:\n        return False\n    if len(l)!= 4:\n        return False\n    if len(l)!= 20:\n        return False\n    if len(l)!= 20:\n        return False\n    if l[0] > l[1]:\n        return False\n    if l[0] < l[1] + 1:\n        return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    assert l.__len__() == 0\n    return l.__contains__(0) or l.__contains__(1)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    if len(l) == 3:\n        return True\n    if len(l) == 5:\n        return True\n    if len(l) == 6:\n        return True\n    if len(l) == 7:\n        return True\n    if len(l) == 8:\n        return True\n    if len(l) == 9:\n        return True\n    if len(l) == 10:\n        return False\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # return True if all elements are monotonically increasing\n    return (len(l) > 0) or (len(l) == 0) or (len(l) == 0)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)!= 3:\n        return False\n    for k,v in l:\n        if k == 0:\n            return True\n        else:\n            if isinstance(v, tuple):\n                if isinstance(v[0], int):\n                    return True\n                else:\n                    return v[0] == 4\n            else:\n                if isinstance(v, float):\n                    return True\n                else:\n                    return v == 4\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def test(test: monotonic):\n        for i in range(1, 20):\n            for j in range(1, 10):\n                if test(i, j):\n                    return True\n\n    for k in range(1, 10):\n        for l in range(1, 20):\n            if test(l, k):\n                return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return any([isinstance(x, list) for x in l]) == True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def _monotonicallyIncreasing(l: list):\n        \"\"\"Return True if monotonicity exists.\n        >>> monotonic([1, 2, 4, 20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([4, 1, 0, -10])\n        True\n        >>> monotonic([4, 20, 0, -10])\n        False\n        >>> monotonic([4, 10, 0, 0, 0, -10])\n        False\n        >>> monotonic([20, 20, 0, 0, -20])\n        True\n        >>> monotonic([20, 10, 0, 0, 0, 0, -20])\n        False\n        >>> monotonic([20, 10, 10, 0, 0, 0, -20])\n        False\n        >>> monotonic([20, 10, 20, 0, 0, 0, -20])\n        False\n        >>> monotonic([20, 20, 10, 0, 0, 0, -20])\n        False\n        >>> monotonic([20, 10, 20, 20, 0, 0, -20])\n        True\n        >>> monotonic([20, 20, 20, 20, 20, -20])\n        True\n        >>> monotonic([", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return bool(n for n in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        if l[0] > 0 or l[0] <= 20 or l[-1] < -10:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(isinstance(x, int) for x in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (l[1] <= l[0])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, (list, tuple)):\n        return l.__iter__() in monotonic\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) == 1 and l[0] in range(0, 10)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def monotonic_increasing(_, k: int):\n        \"\"\"Return True is k elements are monotonic increasing.\n        >>> monotonic_increasing([1, 2, 4, 20])\n        True\n        >>> monotonic_increasing([1, 20, 4, 10])\n        False\n        >>> monotonic_increasing([4, 1, 0, -10])\n        False\n        >>> monotonic_increasing([4, 20, 0, -10])\n        True\n        >>> monotonic_increasing([0, 4, 10])\n        True\n        >>> monotonic_increasing([1, 0, 4, 10])\n        False\n        >>> monotonic_increasing([1, 20, 0, -10])\n        True\n        >>> monotonic_increasing([1, 4, 0, -10])\n        False\n        >>> monotonic_increasing([2, 1, 0, -10])\n        False\n        >>> monotonic_increasing([2, 20, 0, -10])\n        True\n        >>> monotonic_increasing([0, 2, 4, 10])\n        False\n        >>> monotonic_increasing([2, 0, 2, 4, 10])\n        False\n        >>> monotonic_increasing([1, 0, 0,", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def func(_, x: int) -> bool:\n        if isinstance(x, int):\n            return len(l) == x\n        return len(l) == x\n    return monotonic\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return l[0] <= l[1] <= l[2] <= l[3] <= l[4]\n    elif isinstance(l, tuple):\n        return l[0] < l[1] < l[2] < l[3] < l[4]\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n    for i in l:\n        if i > 0:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Check for monotonic increasing and decreasing.\n    for i in l:\n        if i not in [0, 1, 2, 4, 20, 10]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return len(l) == 1\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # TODO: should it be possible to make monotonic from list elements?\n    if len(l) == 0:\n        return False\n    elif l[0] > l[1]:\n        return True\n    elif l[0] < l[1]:\n        return False\n    else:\n        return l[0] == l[1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return(lambda x: x <= 0) or (lambda x: x <= 1) or (lambda x: x <= 2)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(i for i, l in enumerate(l)) == 1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return True\n    for i in l:\n        if i > 0:\n            return True\n        if i < 0:\n            return False\n        return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for element in l:\n        if element!= 1:\n            return False\n        if element == 20:\n            return True\n        if element == 4:\n            return False\n        if element == 0:\n            return True\n        return False\n\n    if isinstance(l, list):\n        for item in l:\n            if isinstance(item, list):\n                return item.monotonic()\n    if isinstance(l, tuple):\n        for item in l:\n            if isinstance(item, list):\n                return item.monotonic()\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    if len(l) > 1:\n        return False\n    for i in range(1, len(l)):\n        if (len(l[i]) < 1) or (len(l[i]) > 10):\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def asc(x):\n        return x < 0 or x > 0\n    def desc(x):\n        return x <= 0 or x > 0\n    def asc_eq(asc, desc):\n        return asc > desc or asc == desc\n    def desc_eq(desc, asc):\n        return desc <= asc or desc == asc\n    def monotonic_eq(monotonic, asc):\n        return monotonic > asc\n    def monotonic_asc(monotonic, asc):\n        return monotonic == asc\n    return asc_eq, desc_eq, asc", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return ([i for i in l if i is not None]).any()", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def monotonicLess(l: list):\n        return len(l) - len(l) < 1\n    return monotonicLess", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return list(iter(l) for l in list(monotonic([1, 2, 4, 20]))) > 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) > 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n    if len(l) % 2!= 0:\n        return True\n    if len(l) == 0:\n        return False\n    for i in range(0, len(l)):\n        if l[i] % 2!= 0:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l.length == 0:\n        return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # returns True if and only if l.min() >= l.max()\n    # returns False if and only if l.max() <= l.min()\n    return (l.min() >= l.max() and l.max() <= l.min())", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return True\n    for i in l:\n        if isinstance(i, list):\n            return monotonic(i)\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return True\n    for i in l:\n        if isinstance(i, int):\n            return i == 0\n        elif isinstance(i, bool):\n            return (i in [True, False] or i in [False, True])\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return all(i for i in l if i == 0)\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for element in l:\n        if element >= 0:\n            return True\n        if element < 0:\n            return False\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return bool(l.__contains__(x) for x in l)\n\n    def monotonic_subset(l: list):\n        \"\"\"Return True is elements in the monotonic subset of the list are monotonically increasing or decreasing.\n        >>> monotonic_subset([1, 2, 4, 20])\n        True\n        >>> monotonic_subset([1, 20, 4, 10])\n        False\n        >>> monotonic_subset([4, 1, 0, -10])\n        True\n        >>> monotonic_subset([0, 4, 20, 1, 4])\n        True\n        >>> monotonic_subset([1, 20, 4, 10])\n        False\n        >>> monotonic_subset([0, 4, 20, 1, 4])\n        False\n        >>> monotonic_subset([0, 4, 20, 1, 4])\n        True\n        >>> monotonic_subset([0, 4, 20, 1, 4])\n        True\n        >>> monotonic_subset([0, 4, 20, 1, 4])\n        True\n        >>> monotonic_subset([1, 20, 4, 10])\n        False\n        >>> monotonic_subset([1, 20, 4, 10])\n        False\n        >>> monotonic_subset([0, 4, 20, 1,", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return isinstance(l, list) and len(l) == 1 and (len(l[0]) == 0 or len(l[1]) == 0 or len(l[0]) == len(l[1]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for element in l:\n        if element!= None:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return False\n    for i in l:\n        if isinstance(i, int) and i > 0:\n            return False\n        if isinstance(i, float) and i < 0:\n            return False\n        return True\n    if isinstance(l, list) and len(l) == 1:\n        return True\n    for i in l:\n        if isinstance(i, int) and i >= 0:\n            return False\n        if isinstance(i, float) and i <= 0:\n            return False\n        return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for a in l:\n        if a < 0:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not isinstance(l, list):\n        raise TypeError('l must be a list')\n    if len(l)!= 2:\n        raise TypeError('l must be a list')\n    if len(l)!= 4:\n        raise TypeError('l must be a list')\n    if len(l)!= 20:\n        raise TypeError('l must be a list')\n    if not isinstance(l[0], int):\n        raise TypeError('l must be a list')\n    if not isinstance(l[0], bool):\n        raise TypeError('l must be a list')\n    if not isinstance(l[1], int):\n        raise TypeError('l must be a list')\n    if not isinstance(l[1], bool):\n        raise TypeError('l must be a list')\n    if not isinstance(l[2], int):\n        raise TypeError('l must be a list')\n    if not isinstance(l[2], bool):\n        raise TypeError('l must be a list')\n    if not isinstance(l[3], int):\n        raise TypeError('l must be a list')\n    if not isinstance(l[3], bool):\n        raise TypeError('l must be a list')\n    if", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic([1, 20, 4, 10])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        l = [l]\n    l = [l[0] for l in l]\n    if isinstance(l, tuple):\n        l = [l]\n    return l[0] < l[1] and l[-1] > l[-1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not isinstance(l, list):\n        l = [l]\n    for i in range(len(l)):\n        if l[i] =='' or l[i]!= '+' or l[i]!= '-' or l[i]!='/'or l[i]!= '.' or l[i]!= '^' or l[i]!= '^' or l[i]!= '.' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l[i]!= '^' or l", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not isinstance(l, list):\n        raise TypeError(\"Must be a list\")\n    return monotonic(l) and len(l) > 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    assert isinstance(l, list)\n    if not isinstance(l, tuple):\n        return False\n    for i in range(0, len(l)):\n        if i == 0:\n            return False\n        if not monotonic(l[i]):\n            return False\n        # If not monotonically increasing, continue\n        elif i > 0:\n            return True\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return l.sum() >= 10 and l.sum() <= 20 and l.sum() >= 0 and l.sum() <= -1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return list(map(int, range(20, 10))) == list(map(int, range(0, 10)))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return ((not None for x in l) and x < 0) and (not None for y in l) and x > 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return l[0] == 1 and l[1] == 20 and l[2] == 10 and l[3] == 20 and l[4] == 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l:\n        return l[0] > 0\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    result = True\n    for element in l:\n        if isinstance(element, int):\n            result = result and element in (1, 2, 4, 20)\n            break\n        elif isinstance(element, list):\n            result = result and element in (1, 2, 4, 20)\n            break\n        elif isinstance(element, long):\n            result = result and element in (1, 2, 4, 20)\n            break\n    return result", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not isinstance(l, list):\n        return False\n\n    for i in l:\n        if i!= 0:\n            return False\n        if i > 0:\n            return True\n        else:\n            return True\n\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return True\n    if isinstance(l, tuple):\n        return False\n    if isinstance(l, list) and len(l) > 1:\n        # monotonically increasing elements are not removed\n        return True\n    if isinstance(l, list) and len(l) == 1:\n        # monotonically decreasing elements are not removed\n        return False\n    if isinstance(l, list):\n        return len(l) > 0\n    if isinstance(l, list):\n        return len(l) == 0 and len(l) <= len(l[0])\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return bool(l.m) in (True, False)\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all([i for i in l if (i > 0 or i < 0)] == False)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) == len(list(l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not isinstance(l, list):\n        l = [l]\n    for l in l:\n        if l is None:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return True\n    for i, v in l.items():\n        if v in monotonic:\n            return True\n    if isinstance(l, list):\n        return False\n    for i, v in l.items():\n        if not v in monotonic:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) > 1:\n        return True\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        if isinstance(l[0], int):\n            if isinstance(l[0], int64):\n                return True\n        elif isinstance(l[0], double):\n            return True\n        elif isinstance(l[0], float):\n            return True\n        elif isinstance(l[0], list):\n            if isinstance(l[0], list)[0] < l[1]:\n                return True\n            if isinstance(l[0], list)[0] > l[1]:\n                return True\n            return False\n        elif isinstance(l[0], list):\n            if isinstance(l[0], int):\n                return True\n            elif isinstance(l[0], int64):\n                return True\n            elif isinstance(l[0], double):\n                return True\n            elif isinstance(l[0], float):\n                return True\n            elif isinstance(l[0], list):\n                return True\n            elif isinstance(l[0], list)[0] < l[1]:\n                return True\n            elif isinstance(l[0], list)[0] > l[1]:\n                return True\n            return False\n        elif isinstance(l[0], list):\n            if isinstance(l[0], int):\n                return True\n            elif isinstance(l[0], int64):\n                return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if i > 0:\n            return True\n        elif i < 0:\n            return False\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return list(map(int, l)) == map(int, l)[0]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return list(set(l) - set(e for e in l for e in e.iteritems())) == set(l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (len(l) == 2 and len(l[0]) == 0 and len(l[1]) == 0) or (len(l) == 3 and len(l[0]) == 0 and len(l[1]) == 0)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return any([(x, y) for x, y in l])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    for i in range(1, len(l)):\n        if len(l) < i - 1:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return list.__contains__(l, 1) or list.__contains__(l, 2) or list.__contains__(l, 4) or list.__contains__(l, 20) or list.__contains__(l, 10) or list.__contains__(l, 0)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    assert isinstance(l, list)\n    for idx in range(len(l)):\n        assert isinstance(l[idx], int)\n        assert (l[idx] == 0 or l[idx] > 0)\n        assert isinstance(l[idx - 1], int)\n        assert (l[idx - 1] == 0 or l[idx - 1] > 0)\n    return monotonic([1, 2, 4, 20])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x for x in l if x > 0 or x < -1)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n    else:\n        for item in l:\n            if item[0] == '+' and item[1] == '-' and item[2] == '+' and item[3] == '-':\n                return True\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x in l for x in l) in monotonic([20, 4, 10])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return (l[0] is monotonic([1, 2, 4, 20]) or l[0] is monotonic([1, 20, 4, 10]))\n    return False\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return list(l.__iter__() == l).__contains__(key) or list(l.__iter__() == l).__contains__(lambda x: x) == l.__iter__() == l", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    return l[0].ismonotonic(1) or l[0].ismonotonic(2) or l[0].ismonotonic(4)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return bool(isinstance(l, list)) and (isinstance(l[0], list) or isinstance(l[0], int) or isinstance(l[0], long)) and (isinstance(l[1], list) or isinstance(l[1], int) or isinstance(l[1], long)) and not (isinstance(l[2], list) or isinstance(l[2], int) or isinstance(l[2], long)) and not (isinstance(l[3], list) or isinstance(l[3], int) or isinstance(l[3], long)) and (isinstance(l[4], list) or isinstance(l[4], int) or isinstance(l[4], long)) and (isinstance(l[5], list) or isinstance(l[5], int) or isinstance(l[5], long)) and not (isinstance(l[6], list) or isinstance(l[6], int) or isinstance(l[6], long)) and not (isinstance(l[7], list) or isinstance(l[7], int) or isinstance(l[7], long)) and not (isinstance(l[8], list) or isinstance(l[8], int) or isinstance(l[8], long)) and (isinstance(l", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic([1, 2, 4, 20])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return itertools.count(l) == 1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return True if len(l) == 1 else False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic([1, 2, 20, 4, 10]) == 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for item in l:\n        return item.monotonic()", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 1: return True\n    return bool(l.startswith(\",\"))"]]