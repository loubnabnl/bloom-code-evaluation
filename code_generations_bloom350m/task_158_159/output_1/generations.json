[["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return \" \".join(words)\n    return \" \".join(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        return words[0]\n    else:\n        return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        return find_max(words)\n    else:\n        return find_max([\"name\", \"of\", \"string\"])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word[0] in words:\n            return word[0]\n        else:\n            return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return words[0]\n    if len(words) == 2:\n        return words[1]\n    if len(words) == 3:\n        return words[2]\n    if len(words) == 4:\n        return words[3]\n    if len(words) == 5:\n        return words[4]\n    if len(words) == 6:\n        return words[5]\n    if len(words) == 7:\n        return words[6]\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word in [\"name\", \"of\", \"string\"]:\n            return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word in find_max(words):\n            return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":\n            return word[1]\n        if word[0] == \"\":", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word in words:\n            return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0] + word[1]\n        if len(word) == 3:\n            return word[0] + word[1] + word[2]\n        if len(word) == 4:\n            return word[0] + word[1] + word[2] + word[3]\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word in find_max(words):\n            return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word in find_max:\n            return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]\n\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        return find_max(words)\n    else:\n        return find_max([\"name\", \"of\", \"string\"])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word in find_max:\n            return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) == 1:\n            return word[0]\n        else:\n            return word[0] + 1", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) == 1:\n            return word[0]\n        else:\n            return find_max(word)\n\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    if len(words) > 1:\n        return words[0]\n    if len(words) > 2:\n        return words[0]\n    if len(words) > 3:\n        return words[0]\n    if len(words) > 4:\n        return words[0]\n    if len(words) > 5:\n        return words[0]\n    if len(words) > 6:\n        return words[0]\n    if len(words) > 7:\n        return words[0]\n    if len(words) > 8:\n        return words[0]\n    if len(words) > 9:\n        return words[0]\n    if len(words) > 10:\n        return words[0]\n    if len(words) > 11:\n        return words[0]\n    if len(words) > 12:\n        return words[0]\n    if len(words) > 13:\n        return words[0]\n    if len(words) > 14:\n        return words[0]\n    if len(words) > 15:\n        return words[0]\n    if len(words) > 16:\n        return words[0]\n    if len(words) > 17:\n        return words[0]\n    if len(words) > 18:\n        return words[0]\n    if len(words) > 19:\n        return words[0]\n    if len(words) > 20:\n        return words[0]\n    if len(", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        return find_max(words)\n    else:\n        return find_max([\"name\", \"of\", \"string\"])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        return words[1]\n    if len(words) == 3:\n        return words[2]\n    if len(words) == 4:\n        return words[3]\n    if len(words) == 5:\n        return words[4]\n    if len(words) == 6:\n        return words[5]\n    if len(words) == 7:\n        return words[6]\n    if len(words) == 8:\n        return words[7]\n    if len(words) == 9:\n        return words[8]\n    if len(words) == 10:\n        return words[9]\n    if len(words) == 11:\n        return words[10]\n    if len(words) == 12:\n        return words[11]\n    if len(words) == 13:\n        return words[12]\n    if len(words) == 14:\n        return words[13]\n    if len(words) == 15:\n        return words[14]\n    if len(words) == 16:\n        return words[15]\n    if len(words) == 17:\n        return words[16]\n    if len(words) == 18:\n        return words[17]\n    if len(words) == 19:\n        return words[18]\n    if len(words) == 20:\n        return words[19]\n    if len(words) == 21:\n        return words[20]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        return find_max(words)\n    else:\n        return find_max([\"name\", \"of\", \"string\"])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) == 1:\n            return word[0]\n        else:\n            return find_max(word)\n\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    if len(words) > 2:\n        return find_max(words)\n    if len(words) > 3:\n        return find_max(words)\n    if len(words) > 4:\n        return find_max(words)\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word in words:\n            return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        return words[1]\n    if len(words) == 3:\n        return words[2]\n    if len(words) == 4:\n        return words[3]\n    if len(words) == 5:\n        return words[4]\n    if len(words) == 6:\n        return words[5]\n    if len(words) == 7:\n        return words[6]\n    if len(words) == 8:\n        return words[7]\n    if len(words) == 9:\n        return words[8]\n    if len(words) == 10:\n        return words[9]\n    if len(words) == 11:\n        return words[10]\n    if len(words) == 12:\n        return words[11]\n    if len(words) == 13:\n        return words[12]\n    if len(words) == 14:\n        return words[13]\n    if len(words) == 15:\n        return words[14]\n    if len(words) == 16:\n        return words[15]\n    if len(words) == 17:\n        return words[16]\n    if len(words) == 18:\n        return words[17]\n    if len(words) == 19:\n        return words[18]\n    if len(words) == 20:\n        return words[19]\n    if", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return \"aaaaaaa\"\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        return find_max(words)\n    else:\n        return find_max([\"name\", \"of\", \"string\"])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        return words[1]\n    if len(words) == 3:\n        return words[2]\n    if len(words) == 4:\n        return words[3]\n    if len(words) == 5:\n        return words[4]\n    if len(words) == 6:\n        return words[5]\n    if len(words) == 7:\n        return words[6]\n    if len(words) == 8:\n        return words[7]\n    if len(words) == 9:\n        return words[8]\n    if len(words) == 10:\n        return words[9]\n    if len(words) == 11:\n        return words[10]\n    if len(words) == 12:\n        return words[11]\n    if len(words) == 13:\n        return words[12]\n    if len(words) == 14:\n        return words[13]\n    if len(words) == 15:\n        return words[14]\n    if len(words) == 16:\n        return words[15]\n    if len(words) == 17:\n        return words[16]\n    if len(words) == 18:\n        return words[17]\n    if len(words) == 19:\n        return words[18]\n    if len(words) == 20:\n        return words[19]\n    if len(words) == 21:\n        return words[20]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word in words:\n            return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word not in words:\n            return word\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[1]\n        if len(word) == 3:\n            return word[2]\n        if len(word) == 4:\n            return word[3]\n        if len(word) == 5:\n            return word[4]\n        if len(word) == 6:\n            return word[5]\n        if len(word) == 7:\n            return word[6]\n        if len(word) == 8:\n            return word[7]\n        return word[0]\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return \"aaaaaaa\"\n    elif len(words) == 2:\n        return \"bb\"\n    elif len(words) == 3:\n        return \"cc\"\n    else:\n        return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word not in words:\n            return word\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    elif len(words) == 2:\n        return words[0]\n    elif len(words) == 3:\n        return words[0]\n    elif len(words) == 4:\n        return words[0]\n    elif len(words) == 5:\n        return words[0]\n    elif len(words) == 6:\n        return words[0]\n    elif len(words) == 7:\n        return words[0]\n    elif len(words) == 8:\n        return words[0]\n    elif len(words) == 9:\n        return words[0]\n    elif len(words) == 10:\n        return words[0]\n    elif len(words) == 11:\n        return words[0]\n    elif len(words) == 12:\n        return words[0]\n    elif len(words) == 13:\n        return words[0]\n    elif len(words) == 14:\n        return words[0]\n    elif len(words) == 15:\n        return words[0]\n    elif len(words) == 16:\n        return words[0]\n    elif len(words) == 17:\n        return words[0]\n    elif len(words) == 18:\n        return words[0]\n    elif len(words) == 19:\n        return words[0]\n    elif len(words) == 20:\n        return words[0]\n    elif len(words) == 21:\n        return words[0]\n    elif len(", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) == 1:\n            return word[0]\n        else:\n            return find_max(word)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word in words:\n            return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return words[0]\n    if len(words) > 2:\n        return words[1]\n    if len(words) > 3:\n        return words[2]\n    if len(words) > 4:\n        return words[3]\n    if len(words) > 5:\n        return words[4]\n    if len(words) > 6:\n        return words[5]\n    if len(words) > 7:\n        return words[6]\n    if len(words) > 8:\n        return words[7]\n    if len(words) > 9:\n        return words[8]\n    if len(words) > 10:\n        return words[9]\n    if len(words) > 11:\n        return words[10]\n    if len(words) > 12:\n        return words[11]\n    if len(words) > 13:\n        return words[12]\n    if len(words) > 14:\n        return words[13]\n    if len(words) > 15:\n        return words[14]\n    if len(words) > 16:\n        return words[15]\n    if len(words) > 17:\n        return words[16]\n    if len(words) > 18:\n        return words[17]\n    if len(words) > 19:\n        return words[18]\n    if len(words) > 20:\n        return words[19]\n    if", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return \" \".join(words)\n    if len(words) > 2:\n        return \" \".join(words)\n    if len(words) > 3:\n        return \" \".join(words)\n    if len(words) > 4:\n        return \" \".join(words)\n    if len(words) > 5:\n        return \" \".join(words)\n    if len(words) > 6:\n        return \" \".join(words)\n    if len(words) > 7:\n        return \" \".join(words)\n    if len(words) > 8:\n        return \" \".join(words)\n    if len(words) > 9:\n        return \" \".join(words)\n    if len(words) > 10:\n        return \" \".join(words)\n    if len(words) > 11:\n        return \" \".join(words)\n    if len(words) > 12:\n        return \" \".join(words)\n    if len(words) > 13:\n        return \" \".join(words)\n    if len(words) > 14:\n        return \" \".join(words)\n    if len(words) > 15:\n        return \" \".join(words)\n    if len(words", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    elif len(words) == 2:\n        return words[0]\n    elif len(words) == 3:\n        return words[0]\n    elif len(words) == 4:\n        return words[0]\n    elif len(words) == 5:\n        return words[0]\n    elif len(words) == 6:\n        return words[0]\n    elif len(words) == 7:\n        return words[0]\n    elif len(words) == 8:\n        return words[0]\n    elif len(words) == 9:\n        return words[0]\n    elif len(words) == 10:\n        return words[0]\n    elif len(words) == 11:\n        return words[0]\n    elif len(words) == 12:\n        return words[0]\n    elif len(words) == 13:\n        return words[0]\n    elif len(words) == 14:\n        return words[0]\n    elif len(words) == 15:\n        return words[0]\n    elif len(words) == 16:\n        return words[0]\n    elif len(words) == 17:\n        return words[0]\n    elif len(words) == 18:\n        return words[0]\n    elif len(words) == 19:\n        return words[0]\n    elif len(words) == 20:\n        return words[0]\n    elif len(words) == 21:\n        return words[0]\n    elif len(", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    if len(words) == 2:\n        return find_max(words)\n    if len(words) == 3:\n        return find_max(words)\n    if len(words) == 4:\n        return find_max(words)\n    if len(words) == 5:\n        return find_max(words)\n    if len(words) == 6:\n        return find_max(words)\n    if len(words) == 7:\n        return find_max(words)\n    if len(words) == 8:\n        return find_max(words)\n    if len(words) == 9:\n        return find_max(words)\n    if len(words) == 10:\n        return find_max(words)\n    if len(words) == 11:\n        return find_max(words)\n    if len(words) == 12:\n        return find_max(words)\n    if len(words) == 13:\n        return find_max(words)\n    if len(words) == 14:\n        return find_max(words)\n    if len(words) == 15:\n        return find_max(words)\n    if len(words) == 16:\n        return find_max(words)\n    if len(words) == 17:\n        return find_max(words)\n    if len(words) ==", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        return find_max(words)\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[1]\n        if len(word) == 3:\n            return word[2]\n        if len(word) == 4:\n            return word[3]\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]\n\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]\n\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        return words[1]\n    if len(words) == 3:\n        return words[2]\n    if len(words) == 4:\n        return words[3]\n    if len(words) == 5:\n        return words[4]\n    if len(words) == 6:\n        return words[5]\n    if len(words) == 7:\n        return words[6]\n    if len(words) == 8:\n        return words[7]\n    if len(words) == 9:\n        return words[8]\n    if len(words) == 10:\n        return words[9]\n    if len(words) == 11:\n        return words[10]\n    if len(words) == 12:\n        return words[11]\n    if len(words) == 13:\n        return words[12]\n    if len(words) == 14:\n        return words[13]\n    if len(words) == 15:\n        return words[14]\n    if len(words) == 16:\n        return words[15]\n    if len(words) == 17:\n        return words[16]\n    if len(words) == 18:\n        return words[17]\n    if len(words) == 19:\n        return words[18]\n    if len(words) == 20:\n        return words[19]\n    if", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return \" \".join(words)\n    if len(words) > 2:\n        return \" \".join(words)\n    if len(words) > 3:\n        return \" \".join(words)\n    if len(words) > 4:\n        return \" \".join(words)\n    if len(words) > 5:\n        return \" \".join(words)\n    if len(words) > 6:\n        return \" \".join(words)\n    if len(words) > 7:\n        return \" \".join(words)\n    if len(words) > 8:\n        return \" \".join(words)\n    if len(words) > 9:\n        return \" \".join(words)\n    if len(words) > 10:\n        return \" \".join(words)\n    if len(words) > 11:\n        return \" \".join(words)\n    if len(words) > 12:\n        return \" \".join(words)\n    if len(words) > 13:\n        return \" \".join(words)\n    if len(words) > 14:\n        return \" \".join(words)\n    if len(words) > 15:\n        return \" \".join(words)\n    if len(words", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word.count(\" \") > 0:\n            return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) == 1:\n            return word[0]\n        elif len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) == 1:\n            return word[0]\n        elif len(word) == 2:\n            return word[0] + word[1]\n        elif len(word) == 3:\n            return word[0] + word[1] + word[2]\n        elif len(word) == 4:\n            return word[0] + word[1] + word[2] + word[3]\n        elif len(word) == 5:\n            return word[0] + word[1] + word[2] + word[3] + word[4]\n        elif len(word) == 6:\n            return word[0] + word[1] + word[2] + word[3] + word[4] + word[5]\n        elif len(word) == 7:\n            return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6]\n        elif len(word) == 8:\n            return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7]\n        elif len(word) == 9:\n            return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8]\n        elif len(word) == 10:\n            return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] +", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word[0] == \"\":\n            return word\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]\n\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        return find_max(words)\n    return find_max([\"name\", \"of\", \"string\"])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    elif len(words) > 1:\n        return words[0]\n    else:\n        return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[1]\n        if len(word) == 3:\n            return word[2]\n        if len(word) == 4:\n            return word[3]\n        if len(word) == 5:\n            return word[4]\n        if len(word) == 6:\n            return word[5]\n        if len(word) == 7:\n            return word[6]\n        if len(word) == 8:\n            return word[7]\n        return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    if len(words) == 2:\n        return find_max(words)\n    if len(words) == 3:\n        return find_max(words)\n    if len(words) == 4:\n        return find_max(words)\n    if len(words) == 5:\n        return find_max(words)\n    if len(words) == 6:\n        return find_max(words)\n    if len(words) == 7:\n        return find_max(words)\n    if len(words) == 8:\n        return find_max(words)\n    if len(words) == 9:\n        return find_max(words)\n    if len(words) == 10:\n        return find_max(words)\n    if len(words) == 11:\n        return find_max(words)\n    if len(words) == 12:\n        return find_max(words)\n    if len(words) == 13:\n        return find_max(words)\n    if len(words) == 14:\n        return find_max(words)\n    if len(words) == 15:\n        return find_max(words)\n    if len(words) == 16:\n        return find_max(words)\n    if len(words) == 17:\n        return find_max(words)\n    if len(words) ==", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        return find_max(words)\n    else:\n        return find_max([\"name\", \"enam\", \"game\"])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word not in find_max:\n            return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        return find_max(words)\n    else:\n        return find_max([\"name\", \"enam\", \"game\"])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if word in words:\n            max = max + 1\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return \" \".join(words)\n    if len(words) > 2:\n        return \" \".join(words)\n    if len(words) > 3:\n        return \" \".join(words)\n    if len(words) > 4:\n        return \" \".join(words)\n    if len(words) > 5:\n        return \" \".join(words)\n    if len(words) > 6:\n        return \" \".join(words)\n    if len(words) > 7:\n        return \" \".join(words)\n    if len(words) > 8:\n        return \" \".join(words)\n    if len(words) > 9:\n        return \" \".join(words)\n    if len(words) > 10:\n        return \" \".join(words)\n    if len(words) > 11:\n        return \" \".join(words)\n    if len(words) > 12:\n        return \" \".join(words)\n    if len(words) > 13:\n        return \" \".join(words)\n    if len(words) > 14:\n        return \" \".join(words)\n    if len(words) > 15:\n        return \" \".join(words)\n    if len(words", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word in words:\n            return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) == 1:\n            return word[0]\n        else:\n            return find_max(word)\n\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word not in words:\n            return word\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n        if len(word) == 1:\n            return word[0]\n        if len(word) == 2:\n            return word[0]\n        if len(word) == 3:\n            return word[0]\n        if len(word) == 4:\n            return word[0]\n        if len(word) == 5:\n            return word[0]\n        if len(word) == 6:\n            return word[0]\n        if len(word) == 7:\n            return word[0]\n        if len(word) == 8:\n            return word[0]\n        if len(word) == 9:\n            return word[0]\n        if len(word) == 10:\n            return word[0]\n        if len(word) == 11:\n            return word[0]\n        if len(word) == 12:\n            return word[0]\n        if len(word) == 13:\n            return word[0]\n        if len(word) == 14:\n            return word[0]\n        if len(word) == 15:\n            return word[0]\n        if len(word) == 16:\n            return word[0]\n        if len(word) == 17:\n            return word[0]\n        if len(word) == 18:\n            return word[0]\n        if len(word) == 19:\n            return word[0]\n        if len(word) == 20:\n            return", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) > 1:\n        return find_max(words)\n    return find_max(words)"]]