[["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([l] for l in l1) + set([l] for l in l2))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(unique(lambda x: x[2:]), reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(l1, list):\n        common = list(common)\n        common.sort()\n        return common\n    elif isinstance(l2, list):\n        common = list(common)\n        common.sort()\n        return common\n    else:\n        common = list(common)\n        common.sort()\n        return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [(i, j) for (i, j) in zip(*l1) for (i, j) in zip(*l2) if (len(i) == len(j))]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def __str__(x):\n        return \"%s: %r\" % (x, repr(x))\n\n    def sorted_common(l1, l2):\n        # first, check if l1 and l2 are not sorted\n        if l1.issubset(l2):\n            return sorted_common(l1, l2)\n        # then, if l1 and l2 are sorted, check if l1 is also sorted\n        if l1[0] < l2[0]:\n            return sorted_common(l1, l2)\n        # then, if l1 and l2 are not sorted, check if l1 is also sorted\n        if l1[1] < l2[1]:\n            return sorted_common(l1, l2)\n        # then, if l1 and l2 are not sorted, check if l1 is also sorted\n        if l1[2] < l2[2]:\n            return sorted_common(l1, l2)\n\n        return sorted_common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common(list1, list2):\n        return list1[0] == list2[0] and list2[1] == list1[1] and list1[2] == list2[2]\n\n    def common_unicode(list1, list2):\n        common = list1[0] == list2[0]\n        common = common_unicode(common, list2[1])\n        common = common_unicode(common, list2[2])\n        return common\n\n    def common_unicode_unicode(list1, list2):\n        common = list1[0] == list2[0]\n        common = common_unicode_unicode(common, list2[1])\n        common = common_unicode_unicode(common, list2[2])\n        return common\n\n    def common_unicode(list1, list2):\n        common = list1[0] == list2[0]\n        common = common_unicode(common, list2[1])\n        common = common_unicode(common, list2[2])\n        return common\n\n    common = common_unicode\n\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for common in l1.sort(key=lambda x: common.__getitem__, reverse=True):\n        for common2 in l2.sort(key=lambda x: common.__getitem__, reverse=True):\n            if common.__ne__(common2):\n                continue\n            if common.__gt__(common2):\n                continue\n            if common.__lt__(common2):\n                continue\n            return common.__getitem__(), common2.__getitem__()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(set(set(l1.intersect(l2).intersect(range(len(l1)))) + set(set(set(l2.intersect(range(len(l2)))) + set(set(set(l3.intersect(range(len(l2)))))) + set(set(set(l4.intersect(range(len(l2)))))) + set(set(set(set(set(set(l5.intersect(range(len(l2)))))))) + set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(set(", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for k in range(len(l1)):\n        common[k] = list(map(common[k], l1[k]))\n    for k in range(len(l2)):\n        common[k] = list(map(common[k], l2[k]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list.intersection([common(l1, l2) for l1 in l1 if not common(l2, l1)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    items = []\n    for i in range(len(L1)):\n        items.append(common(L1[i], L2[i]))\n\n    for i in range(len(L2)):\n        items.append(common(L2[i], L1[i]))\n    return items", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == 0:\n        return\n    if len(l2) == 0:\n        return\n    common = []\n    for item in l1[0]:\n        common.append(item)\n    for item in l2[0]:\n        common.append(item)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([(i, i + 1) for i in range(len(l1) + len(l2))])</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _common_(*a):\n        \"\"\"Return a common element for the given a list.\n\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common([5, 3, 2, 8], [2, 3])\n        [1, 5]\n        >>> common([5, 3, 2, 8], [2, 3])\n        [5, 3, 2, 8]\n        >>> common([5, 3, 2, 8], [2, 3])\n        [5, 3, 2, 8]\n        >>> common([5, 3, 2, 8], [2, 3])\n        [1, 5]\n        >>> common([5, 3, 2, 8], [2, 3])\n        [5, 3, 2, 8]\n        >>> common([5, 3, 2, 8], [2, 3])\n        [5, 3, 2, 8]\n        >>> common([5, 3, 2, 8], [2, 3])\n        [5, 3, 2, 8]\n\n    >>> common([1, 4, 3", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common.sort_common(lambda x: x[1][0], lambda x: x[2][0])\n    common.sort_common(lambda x: x[3][0], lambda x: x[4][0])\n    common.sort_common(lambda x: x[5][0], lambda x: x[6][0])\n    common.sort_common(lambda x: x[7][0], lambda x: x[8][0])\n    common.sort_common(lambda x: x[9][0], lambda x: x[10][0])\n    common.sort_common(lambda x: x[11][0], lambda x: x[12][0])\n    common.sort_common(lambda x: x[13][0], lambda x: x[14][0])\n    common.sort_common(lambda x: x[15][0], lambda x: x[16][0])\n    common.sort_common(lambda x: x[17][0], lambda x: x[18][0])\n    common.sort_common(lambda x: x[19][0], lambda x: x[20][0])\n    common.sort_common(lambda x: x[21][0], lambda x: x[22][0])\n    common.sort_common(lambda x: x[23][0], lambda x: x[24][0])\n    common.sort_common(lambda x: x[25][0], lambda x: x[26][0])\n    common.sort_common(lambda x: x[27][0], lambda x: x[28][0])\n    common.sort_common(", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = lambda l: (L1.find(l) < L2.find(l)) or (L2.find(l) > L1.find(l))\n    return common(L1, L2)\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sort(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    \"\"\"Return a list that is sorted by common element.\"\"\"\n    return common(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([len(l) for l in list], key=lambda l: len(l) == len(list[0]), reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def find_common_element(l1: list, l2: list):\n        common_list = []\n        for element in list1:\n            if element[0] == element[1]:\n                common_list.append(element)\n        common_list = sorted(common_list, key=lambda x: x[0])\n        return common_list\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for l in l1:\n        for l2 in l2.iteritems():\n            if len(l) == len(l2):\n                return common(l, l2)\n    return list()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # no-op\n    if isinstance(l1, list) and isinstance(l2, list):\n        return common(l1, l2)\n    else:\n        # lazy lazy lazy lazy lazy\n        return common(l1, list(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(list) > 1:\n        return (common(list[0], list[1])) if len(list) == 1 else (common(list[0], list[1])) if len(list) == 2 else (common(list[0], list[1])) if len(list) == 3 else (common(list[0], list[1]))\n\n    return (common(list[0], list[1])) if len(list) == 1 else (common(list[0], list[1])) if len(list) == 2 else (common(list[0], list[1])) if len(list) == 3 else (common(list[0], list[1]))</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(common(l1, l2))), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Test the behavior of the common function on lists, with\n    # non-unique elements\n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\n    common([5, 3, 2, 8], [3, 2])\n    common([5, 3, 2, 8], [3, 2])\n    common([5, 3, 2, 8], [3, 2])\n    common([5, 3, 2, 8], [3, 2])\n    common([5, 3, 2, 8], [3, 2])\n    common([5, 3, 2, 8], [3, 2])\n    common([5, 3, 2, 8], [3, 2])\n    common([5, 3, 2, 8], [3, 2])\n    common([5, 3, 2, 8], [3, 2])\n    common([5, 3, 2, 8], [3, 2])\n    common([5, 3, 2, 8], [3, 2])\n    common([5, 3, 2, 8], [3, 2])\n    common([5, 3, 2, 8], [3, 2])\n    common([5, 3, 2, 8", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        def common_list(l1: list, l2: list):\n            \"\"\"Return sorted unique common elements for two lists.\n            >>> common_list([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n            [1, 5, 653]\n            >>> common_list([5, 3, 2, 8], [3, 2])\n            [2, 3]\n            \"\"\"\n            l1 = common_list(l1, l1)\n            l2 = common_list(l2, l2)\n            return common_list(l1, l2)\n        assert common_list([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        assert common_list([5, 3, 2, 8], [3", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for key in l1:\n        if key not in common:\n            common[key] = key\n    for key in l2:\n        if key not in common:\n            common[key] = key\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common(l1: list, l2: list):\n        for m, v in zip(L1, L2):\n            if m % 2 == 0:\n                return common(m1, m2)\n            else:\n                return common(m1, m2)\n\n    def common(m1, m2):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common([(1, 5), (2, 3), (3, 4)], [1, 5, 3, 4, 653, 121])\n        [1, 5, 3, 4]\n        >>> common([(1, 5), (2, 3), (3, 4), (5, 3), (7, 1), (7, 5), (7, 3)], [1, 5, 5, 3, 4, 653, 121])\n        [1, 5, 3, 4, 653, 121]\n        >>> common([(1, 5), (2, 3), (3, 4), (5, 3), (7, 1), (7, 5), (7, 3), (8, 1), (8, 5), (8, 3)], [1, 5, 5, 3, 4, 653, 121])\n        [1, 5, 3, 4, 653, 121]\n        >>> common([", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    assert isinstance(l1, list)\n    assert isinstance(l2, list)\n    return common([l1[0] for l1 in l1 if l1[1]], [l2[0] for l2 in l2 if l2[1]])\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_subset(c1, c2):\n        \"\"\"Return common subset of c1 and c2.\"\"\"\n        if c1!= c2 or c1!= c1[0]:\n            return False\n        return common(c1, c2)\n\n    def common(c1, c2):\n        \"\"\"Return common elements for c1 and c2.\"\"\"\n        common_subset(c1, c2)\n        common_subset(c2, c1)\n        return common_subset(c1, c2)\n\n    def common_subset(c1, c2):\n        \"\"\"Return common subset of c1 and c2.\"\"\"\n        common_subset(c1, common_subset(c2, c1))\n        common_subset(c2, common_subset(c1, common_subset(c2, c1)))\n    return common</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {\n       'sum': lambda x: len(x) if len(x) else 1\n    }\n    common.sort(reverse=True)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return lambda li: li[0].find(lambda li: li[0].index(li) >= 0)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(set(l1) - set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(L1, list):\n        return self.reorder_common(l1)\n    elif isinstance(L2, list):\n        return self.reorder_common(l2)\n    return self._convert_common(L1, L2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    u1 = list(common(l1, l2))\n    u2 = list(common(l1, l2))\n    common(u1, u2)\n\n    return list(common(l1, l2) + list(common(l2, l1)))\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_element(elem1, elem2):\n        if elem1 == elem2: return elem1\n        if elem1 < elem2: return elem1\n        if elem1 > elem2: return elem2\n        return None\n\n    common_element.__doc__ = common_element.__name__\n    return common_element", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(zip(*sorted(list(map(lambda x: x[0], list(map(lambda x: x[1], list(map(lambda x: x[2], list(map(lambda x: x[3], list(map(lambda x: x[4], list(map(lambda x: x[5], list(map(lambda x: x[6], list(map(lambda x: x[7], list(map(lambda x: x[8], list(map(lambda x: x[9], list(map(lambda x: x[10], list(map(lambda x: x[11], list(map(lambda x: x[12], list(map(lambda x: x[13], list(map(lambda x: x[14], list(map(lambda x: x[15], list(map(lambda x: x[16], list(map(lambda x: x[17], list(map(lambda x: x[18, list(map(lambda x: x[19, list(map(lambda x: x[20], list(map(lambda x: x[21], list(map(lambda x: x[22], list(map(lambda x: x[23, list(map(lambda x: x[24, list(map(lambda x: x[25], list(map", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    lst1 = list(lst1)\n    lst2 = list(lst2)\n\n    common_elements = [(i, j) for i, j in zip(lst1, lst2) if i == j]\n\n    for common_element in common_elements:\n        common = common_element[0]\n        common_elements.append((common, common_elements[common]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for x in list1:\n        common[x] = [x[0], x[1]]\n    common = sorted(common, key=operator.attrgetter('common'))\n\n    return common\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(l1, list):\n        return list(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    if isinstance(l2, list):\n        return list(common([5, 7, 1, 5, 9, 653, 121], [1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    return list(common(l1, l2))\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i, j in zip(L1, L2):\n        common.append(common.index(j) + 1)\n        common.append(common.index(j + 1))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _common(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> _common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> _common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> _common([5, 3, 2, 8], [3, 2])\n        [2, 3, 4]\n        >>> _common([5, 3, 2, 8], [3, 2])\n        [2, 3, 4, 5]\n        >>> _common([5, 3, 2, 8], [3, 2])\n        [2, 3, 4, 5, 6]\n        >>> _common([5, 3, 2, 8], [3, 2])\n        [2, 3, 4, 5, 6]\n        >>> _common([5, 3, 2, 8], [3, 2])\n        [2, 3, 4, 5, 6, 7, 8, 9]\n        >>> _common([5, 3, 2, 8], [3, 2])\n        [2, 3, 4, 5, 6, 7, 8, 9", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(common(list(range(1, len(l1)), list(range(2, len(l2)))))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([l1, l2, l2], [None, None]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for k in range(1, len(L1)):\n        common[k] = list(L1[k])\n    common.sort(key=lambda k: k[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    sorted_list = list(set(list(range(len(l1))))) & list(set(list(range(len(l2))))) & list(set(l1))\n    return sorted_list[::-1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(li)!= len(l2):\n        raise ValueError(\"Expected list lengths: %d, got %d\" % (len(li), len(l2)))\n    common = list(set(set(common.sort(key=lambda x: (x[0] * x[1] for x in common)))))\n    common.sort(key=lambda x: (x[0] * x[1] for x in common))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"expected lists to have same length.\")\n    if len(l1)!= len(l2):\n        return\n    common = []\n    for list1 in l1:\n        for list2 in l2:\n            if list1 in list2 or list1 not in list2:\n                common.append(list1)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = map(lambda x, y: x + y, list(range(len(l1) + len(l2)))\n    if not isinstance(common, list):\n        common = [common]\n    for x, y in common:\n        if x[0]!= y:\n            return common[x]\n        else:\n            return x + y\n\n    common = map(lambda x, y: x + y, list(range(len(l1) + len(l2)))\n        if not isinstance(common, list):\n            common = [common]\n    for x, y in common:\n        if x[0]!= y:\n            return common[x]\n        else:\n            return x + y\n\n    common = map(lambda x, y: x + y, list(range(len(l1) + len(l2)))\n        if not isinstance(common, list):\n            common = [common]\n    for x, y in common:\n        if x[0]!= y:\n            return common[x]\n        else:\n            return x + y\n\n    common = map(lambda x, y: x + y, list(range(len(l1) + len(l2)))\n        if not isinstance(common, list):\n            common = [common]\n    for x, y in common:\n        if", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [(i, j) for (i, j) in zip(l1, l2)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def add(l1: list, l2: list):\n        \"\"\"Add a new element to the list.\"\"\"\n        for item in list1:\n            item += list2\n        return l1\n    def remove(l1: list, l2: list):\n        \"\"\"Remove a given element from the list.\"\"\"\n        for item in list1:\n            if item in l2 or list2[0] == item:\n                l2.remove(item)\n        return l1\n    return add, remove", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common1 = list(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    common1.sort()\n\n    common2 = list(common([5, 3, 2, 8], [3, 2]))\n    common2.sort()\n\n    return common1, common2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for element in list(common(l1, l2)):\n        print element\n    return list(common(l1, l2))[0]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return common([l1[0]], [l2[0]])\n    return common([l1[1], l2], [l1[0], l2])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _sorted_common(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> _sorted_common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> _sorted_common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n        \"\"\"\n        common_l1 = l1.copy()\n        common_l2 = l2.copy()\n        common_l1.sort()\n        common_l2.sort()\n\n        if common_l1.count(common_l2) == 1:\n            return sorted(common_l1)\n        elif common_l1.count(common_l2) == 2:\n            return sorted(common_l1, key=lambda x, y: x[1] < y[1])\n        else:\n            return sorted(common_l1, key=lambda x, y: x[0] < y[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i in range(len(l1)):\n        common[i] = [i for i, j in zip(l1, l2) if j not in common[i]]\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort the elements by common\n    common = sorted(common, key=lambda x: x[0], reverse=True)\n\n    # Use this to recursively extract the elements\n    common = common.get(*common.values())\n    # Then extract the common elements for the current list\n    common = list.__getitem__(common)\n\n    common = list.__getitem__(common)\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def zip(n):\n        \"\"\"Return list of the same length as list.\"\"\"\n        return zip([(i * (i * (n - 1)) for i in range(len(n))], list(n)))\n    res = []\n    for x in list:\n        res.append((x[0], x[1]))\n    return res", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(l1, list):\n        return sorted(common(l1, l2))\n    elif isinstance(l1, list):\n        return sorted(common(l1, [1, 5, 3, 34, 653, 2, 5]))\n    elif isinstance(l1, list):\n        return sorted(common(l1, [2, 3, 4, 35, 1, 1]))\n    elif isinstance(l1, list):\n        return sorted(common(l1, [1, 5, 3, 34, 653, 2, 5, 8, 2, 3]))\n    elif isinstance(l1, list):\n        return sorted(common(l1, [2, 3, 4, 35, 1, 1]))\n    elif isinstance(l1, list):\n        return sorted(common(l1, [2, 5, 3, 34, 653, 2, 3, 8, 2, 5]))\n    elif isinstance(l1, list):\n        return sorted(common(l1, [3, 4, 3, 35, 1, 1]))\n    elif isinstance(l1, list):\n        return sorted(common(l1, [4, 3, 3, 35, 1, 1]))\n    elif isinstance(l", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    from itertools import product\n    result = []\n    for (a, b) in zip(L1, L2):\n        if not product(a, b):\n            continue\n        result.append(common(a, b))\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common1 = sorted([common.unique() for common in l1 if common.not in l2 and common.not in common2, common2])\n    common2 = sorted([common.unique() for common in l2 if common.not in l1 and common.not in common2])\n    common1 = common1.sort(key=lambda x: x.uncommon().index(common1) + 1)\n    common2 = common2.sort(key=lambda x: x.uncommon().index(common2) + 1)\n    common1.reverse()\n    common2.reverse()\n\n    if len(l1)!= len(l2) or len(common1)!= len(common2):\n        raise TypeError('len(l1) or len(common1) or len(common2) must be equal!')\n\n    common1.sort(key=lambda x: x.uncommon().index(common1) + 1)\n    common2.sort(key=lambda x: x.uncommon().index(common2) + 1)\n    common1.reverse()\n    common2.reverse()\n\n    return common1, common2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(map(lambda x: x[0], list(set(map(lambda x: x[0], list(set(l1, l2)))))),\n                          key=lambda x, y: x[1].startswith(y.startswith(\" \"))), key=lambda x, y: x[0].startswith(y.startswith(\" \")))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return np.unique(np.dot(list, list) * 1.0)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == 0:\n        return [common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])]\n    if len(l2) == 0:\n        return [common([5, 3, 2, 8], [3, 2])]\n    return list(set(sorted(common([l1, l2, 5, 7], [5, 3, 2, 8], [3, 2]))))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"len(l1) = %d, len(l2) = %d\" % (len(l1), len(l2)))\n    common = [[i for i in l1 if i!= 0 for i in l2 if i!= 0] for i in common]\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [\n        common([\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(L1) > len(L2):\n        return L1\n    if len(L1) > len(L2):\n        return L2\n\n    def common_common(l1: list, l2: list):\n        \"\"\"Return common element of two lists and return sorted.\n        \"\"\"\n        l = common_common(L1, l2)\n        return sorted(l)\n\n    def common_common_common(l1: list, l2: list):\n        \"\"\"Return common common element of two lists and return sorted.\n        \"\"\"\n        l = common_common_common(L1, l2)\n        return sorted(l)\n\n    def common_common_common_common(l1: list, l2: list):\n        \"\"\"Return common common common element of two lists and return sorted.\n        \"\"\"\n        l = common_common_common_common(L1, l2)\n        return sorted(l)\n\n    def common_common_common_common(l1: list, l2: list):\n        \"\"\"Return common common common element of two lists and return sorted.\n        \"\"\"\n        l = common_common_common_common(L1, l2)\n        return sorted(l)\n\n    def common_common_common_common_common(l1: list, l2: list):\n        \"\"\"Return common common common common element of two lists and return sorted.\n        \"\"\"\n        l = common_common_common_common_common(L1, l2)\n        return", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    n = len(l1)\n    if n < 3:\n        raise IndexError('unique common elements for lists must be non-empty')\n    if n > 2:\n        raise IndexError('unique common elements for lists must be non-empty')\n    common = []\n    for i in range(n):\n        common.append(common[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i in range(len(L1)):\n        common.update(common.copy())\n    for i in range(len(L2)):\n        common.update(common.copy())\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([L1, L2, l2], [L1, L2, l2]), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common([l1, l2, l2]).sort()\n    common([l1, l2, l2]).sort()\n\n    # Compute the set of common elements.\n    result = [common(l1, l2) for l1, l2 in common(l1, l2)]\n\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([common(item[0], item[1]) for item in list])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    items = []\n    for l in lists:\n        item = common(l[0], l[1])\n        if item is not None:\n            items.append(item)\n    return items", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # find the common elements for all pairs\n    common = {}\n    for pair in zip(L1, L2):\n        if pair not in common:\n            common[pair] = list(set(common[pair]))\n        else:\n            common[pair].sort()\n        if pair in common:\n            return common[pair]\n    return set()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([list[i] for i in list[2]])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for x in list1:\n        if isinstance(x, list):\n            common[x] = sorted(x)\n        elif isinstance(x, tuple):\n            common[x] = [x[0], x[1]]\n        else:\n            common[x] = [x[0], x[1]]\n    for x in list2:\n        if isinstance(x, list):\n            common[x] = sorted(x)\n        elif isinstance(x, tuple):\n            common[x] = [x[0], x[1]]\n        else:\n            common[x] = [x[0], x[1]]\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set([common(l, l) for l in list if common(l, l)]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for x in range(len(L1)):\n        common[x] = L1[x]\n    for x in range(len(L2)):\n        common[x] = L2[x]\n\n    common.update({k: v for k, v in common.items()})\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common.p(x) for x in l1 if x not in l2]))\n    common = [common.p(x) for x in l2 if x not in l1]\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set([(x[0], x[1]), (x[0], x[2]), (x[0], x[3]), (x[0], x[4]), (x[0], x[5]), (x[0], x[6]), (x[0], x[7]), (x[0], x[8])] for x in l1) + \\\n           sorted(set([(x[0], x[1]), (x[0], x[2]), (x[0], x[3]), (x[0], x[4]), (x[0], x[5]), (x[0], x[6]), (x[0], x[7]), (x[0], x[8])] for x in l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l1 in l1:\n        common.append(common[-l1[0]])\n    for l2 in l2:\n        common.append(common[-l2[0]])\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for x in l1:\n        result.append(common(x, x))\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    _ = lambda x: x[0]\n    return x[::-1].sort()[0]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Order elements by name\n    def range(l1, l2):\n        \"\"\"Return a sequence of elements in [(1, 2), (3, 4), (6, 3), (7, 1), (5, 9), (7, 6), (6, 7), (8, 3), (9, 2), (5, 2), (7, 2), (8, 2), (6, 1), (7, 1)].\n        >>> common([1, 4, 3, 34, 653, 2, 5], range([1, 4, 3, 34, 653, 2, 5], range([5, 3, 2, 8], [3, 2], range([5, 3, 2, 8], [3, 2])))\n    [1, 4, 3, 34, 653, 2, 5]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    >>> common([5, 3, 2, 8], [3, 2], range([5, 3, 2, 8], [3, 2]))\n    [1, 4, 3, 34, 653, 2, 5]\n    >>> common([5, 3, 2, 8], [3, 2], range([5, 3, 2, 8]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(map(lambda x: x if x[0]!= 0 else x[1], list(common(l1, l2))))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # if v1 is list([0, 4, 9, 653, 121]), v2 is list([0, 4, 5, 9, 653, 121]):\n    #     return [common(v1, v2) for v1 in v1 if common(v1, v2) and common(v2, v1)]\n    # else:\n    #     return [[common(v1, v2) for v1 in v1 if common(v1, v2) and common(v2, v1)] for v2 in v2 if common(v1, v2)]\n\n    def common(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n        \"\"\"\n        # if v1 is list([0, 4, 9, 653, 121]), v2 is list([0, 4, 5, 9, 653, 121]):\n        #     return [common(v1, v2) for v1 in v1 if common(", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # the rest are special for fun\n    if len(list)!= 2:\n        return sorted([common(l1, l2) for l1 in list], key=lambda l: l[0])\n    if len(list) == 2:\n        return sorted([common(l1, l2) for l2 in list], key=lambda l: l[0])\n    if len(list) == 3:\n        return sorted([common(l1, l2) for l2 in list], key=lambda l: l[0])\n    if len(list) == 5:\n        return sorted([common(l1, l2) for l2 in list], key=lambda l: l[0])\n    if len(list) == 6:\n        return sorted([common(l1, l2) for l2 in list], key=lambda l: l[0])\n    if len(list) == 7:\n        return sorted([common(l1, l2) for l2 in list], key=lambda l: l[0])\n    return sorted([common(l1, l2) for l2 in list], key=lambda l: l[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # returns the first and last element in the list\n    common1 = lambda l1: len(l1) - 1\n    common2 = lambda l2: len(l2) - 1\n    common = lambda l1: common1(l1) + common2(l2)\n    return common(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for m in l1:\n        common.append(m)\n    for m in l2:\n        common.append(m)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]), key=lambda x: x[0])\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common)\n    common.sort()\n    return list(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([(i,j) for i,j in zip(L1,L2) if (i == j)])</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s = []\n    for e in list:\n        if e.startswith(\"_\"):\n            s.append(e)\n        else:\n            s.append(e)\n    return s", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return map(lambda a: common(a[0], a[1]), l1.sort(key=lambda x: x[1]), l2.sort(key=lambda x: x[0]))\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l1 in l1:\n        common.append(l1)\n    for l2 in l2:\n        common.append(l2)\n\n    for c in common:\n        if len(c) == 2:\n            return c[0], c[1]\n    return 0", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_element = lambda l1, l2 : l1.count(l2)\n    common_element([68, 30, 51, 70, 15, 1], [7, 12, 0, 4])\n    common_element([68, 25, 51, 70, 6, 1], [7, 12, 0, 4])\n    common_element([5, 3, 2, 8], [3, 2])\n    common_element([5, 3, 2, 8], [3, 2])\n\n    def common_element(l1, l2):\n        \"\"\"Return common elements for two lists.\n        >>> common_element([68, 30, 51, 70, 15, 1], [7, 12, 0, 4])\n        [1, 5, 653]\n        >>> common_element([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        common_element([68, 30, 51, 70, 15, 1], [7, 12, 0, 4])\n        common_element([5, 3, 2, 8], [3, 2])\n        common_element([5, 3, 2, 8], [3, 2])\n\n    def common_element(l1, l2):\n        \"\"\"Return common elements for two lists.\n        >>> common_element([68, 30, 51,", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return common([1, 4], [5, 4, 9], [7, 8], [1, 3, 2], [2, 3, 4, 9])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([common(t, a) for t in l1, l2 if common(t, a)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(list([l1]), list([l2])))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common1 = list(common([1, 2, 4], [2, 4, 9]))\n    common2 = list(common([3, 2, 4], [3, 4, 9]))\n    common1.sort()\n    common2.sort()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n\n    common1.sort()\n    common2.sort()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2.reverse()\n    common1.reverse()\n    common2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return common([int(l[1]), int(l[2])], [int(l[0]), int(l[1])])[1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1), len(l2)))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for common in L1.sort():\n        for common2 in L2.sort():\n            if common2[0] == common:\n                return common, common2\n\n    return list(common.items())", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for a, b in l1:\n        common.append(common.index(a, b))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not isinstance(lists, list):\n        return list(common(lists, lists))\n    for elem in list(common(lists, lists)):\n        if isinstance(elem, list):\n            return elem\n        elif isinstance(elem, tuple):\n            return [elem]\n        elif isinstance(elem, (tuple, list)):\n            return [elem]\n\n    def reduce(x, y):\n        \"\"\"Return sorted unique elements that are not contained in the x and y.\n        >>> reduce([1, 4], [4, 3])\n        [1, 4, 3]\n        >>> reduce([5, 3, 2, 8], [2, 3])\n        [2, 3]\n        >>> reduce([6, 1], [1, 4])\n        [1, 5, 653]\n        >>> reduce([7, 1], [1, 4])\n        [2, 3]\n        >>> reduce([8, 6], [2, 3])\n        [2, 4]\n        >>> reduce([1, 4], [1, 4])\n        [1, 5, 653]\n        >>> reduce([6, 2, 4], [1, 4])\n        [2, 4]\n        >>> reduce([7, 3, 2], [1, 4])\n        [2, 4]\n        >>> reduce([8, 6, 1], [1, 4])\n        [2, 4]\n        >>>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = map(lambda x: x[0], list)\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort elements: first element is unique and last unique and\n    # any later element should be the same\n    for e1 in reversed(list(l1)):\n        if e1!= e2:\n            return [e1]\n        # Sort elements: first element is unique and last unique and\n    # any later element should be the same\n        for e2 in reversed(list(l2)):\n            if e2!= e1:\n                return [e2]\n        # Sort elements: first element is unique and last unique and\n    # any later element should be the same\n    return [e1, e2, e3]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # remove any common elements\n    common = list.iteritems(common)\n\n    # check if common elements are sorted\n    assert common == list.sorted(common)\n\n    # get the element\n    return common[0]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([l], [l]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(L1) <= len(L2):\n        return list(merge(L1, L2, key=lambda x: x[0])) # merge all in same order\n    else:\n        return list(merge(L1, L2, key=lambda x: x[1])) # merge all in same order\n\n    def slice(l1: list, l2: list):\n        if isinstance(L1, list):\n            return list(merge(L1, l2))\n        if isinstance(L2, list):\n            return list(merge(L2, l1))\n        if isinstance(L1, list):\n            return list(merge(L1, slice(L2, l2)))\n        if isinstance(L2, list):\n            return list(slice(L2, l1))\n        return list(slice(L1, l2)) # in same order\n\n    def full(l1: list, l2: list):\n        if isinstance(L1, list):\n            return list(merge(L1, slice(L2, l2)))\n        if isinstance(L2, list):\n            return list(slice(L2, slice(L1, l2)))\n        if isinstance(L1, list):\n            return list(slice(L1, slice(L2, slice(L1, l2))))\n        if isinstance(L2, list):", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    from itertools import chain\n    return list(chain(*iterable.iteritems(list(list(chain(*iterable.iteritems(l1))))\n                 ^\n               ^\n               ^\n               ^\n               ^\n               ^\n               ^\n               ^\n               ^\n               ^\n               ^\n               ^\n               ^\n               ^\n               ^))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(x.__getitem__(1) for x in l1))\n    common = list(set(x.__getitem__(2) for x in l2))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for list1, list2 in zip(L1, L2):\n        common.append(common.index(list1) + common.index(list2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([l1, l2], [None, l2]), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort by length. We remove all elements before the first element\n    # (the last common element). All elements after the first element are\n    # removed first, and then the first element is removed after all elements\n    # after the first element.\n    common = []\n    for common_element in common1:\n        common.append((common_element[0], common_element[1]))\n    common = sorted(common, key=lambda x: x[1])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort and return unique elements.\n    lst = list(l1)\n    lst2 = list(l2)\n    lst1.sort()\n    lst2.sort()\n    return lst1, lst2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def first_common_element(element_list):\n        element_list.sort(key=lambda element: element[0])\n        return element_list[0]\n    for element in first_common_element(l2):\n        # element == element_list\n        return element\n    return sorted([first_common_element(l2) for l2 in l1 if l1[element]])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([list1, list2], [list2, list1]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l0 = list(l1)\n    l1 = list(l2)\n\n    # Sort the elements from left to right\n    for k, l in enumerate(l0, -1):\n        if k < len(l1):\n            l1 = l1[:k]\n        else:\n            l1 = l1[-l1]\n\n    # Sort the elements from bottom to top\n    for k, l in enumerate(l1, -1):\n        if k > len(l0):\n            l2 = l2[:k]\n        else:\n            l2 = l2[-l2]\n\n    # Sort the elements from top to bottom\n    for k, l in enumerate(l0, -1):\n        if k < len(l1):\n            l1 = l1[:k]\n        else:\n            l1 = l1[-l1]\n\n    # Sort the elements from top to bottom\n    for k, l in enumerate(l1, -1):\n        if k > len(l0):\n            l2 = l2[:k]\n        else:\n            l2 = l2[-l2]\n\n    # Sort the elements from bottom to top\n    for k, l in enumerate(l0, -1):\n        if k < len(l1):\n            l1 = l1[:k]\n        else:\n            l1 = l1[-l1]\n\n    #", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for li in range(1, len(l1)):\n        common[li] = l1[li]\n    for li in range(1, len(l2)):\n        common[li] = l2[li]\n\n    common.update(sorted(list(self.get_possible_common_elements(l1, l2)))\n    common.update(sorted(list(self.get_possible_common_elements(l2, l1)))\n    common.update(sorted(list(self.get_possible_common_elements(l2, l1))))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for common in commons:\n        return common.sort_values(key = lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([[1, 1], [1, 3]], [[2, 2]]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(L1) == len(L2):\n        return sorted([common(i, j) for i, j in zip(L1, L2)])\n    else:\n        return sorted([common(i, j) for i, j in zip(L1, L2)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = lambda l1: common([1, 4], [1, 2])\n    common = lambda l2: common([5, 4], [5, 3])\n    common = lambda l3: common([2, 4], [2, 3])\n    common = lambda l4: common([3, 4], [3, 3])\n    common = lambda l5: common([2, 3], [2, 4])\n    common = lambda l6: common([4, 4], [4, 5])\n    common = lambda l7: common([4, 3], [4, 5])\n    common = lambda l8: common([5, 3], [5, 4])\n    common = lambda l9: common([5, 4], [5, 5])\n    common = lambda l10: common([5, 5], [5, 4])\n    common = lambda l11: common([6, 4], [6, 5])\n    common = lambda l12: common([6, 5], [6, 4])\n    common = lambda l13: common([6, 5], [6, 4])\n    common = lambda l14: common([6, 5], [6, 4])\n    common = lambda l15: common([6, 5], [6, 4])\n    common = lambda l16: common([6, 4], [6, 5])\n    common = lambda l17: common([6, 5]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([l1, l2, l2], [None, None, None]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_sort(left, right):\n        \"\"\"Return the first common element for two lists.\n        >>> common_sort([1, 4], [2, 4])\n        [(1, 4), (2, 4)]\n        >>> common_sort([5, 3], [3, 2])\n        [(5, 3), (3, 2)]\n        >>> common_sort([653], [2, 4])\n        [(653, 4), (4, 4])\n        >>> common_sort([2, 3], [2, 3])\n        [(2, 3), (3, 2)]\n        >>> common_sort([2, 1], [1, 4])\n        [(2, 1), (4, 4)]\n        >>> common_sort([1, 4], [1, 4])\n        [(1, 4), (2, 4)]\n        >>> common_sort([5, 3], [5, 3])\n        [(5, 3), (3, 2)]\n        >>> common_sort([2, 1], [2, 4])\n        [(2, 1), (4, 4)]\n        >>> common_sort([1, 4], [5, 3])\n        [(1, 4), (2, 4)]\n        >>> common_sort([5, 3, 4], [5, 3])\n        [(5, 3,", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {k: v for k, v in common.items() if k in (3, 2)}\n    common = [common.pop() for k in common.keys()]\n    common = [common.pop() for k in common.keys()]\n    for k, v in common.items():\n        if k not in (0, 1, 2):\n            return [k, v]\n    return common.keys()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([(l, i) for i, l in enumerate(L1)]) \\\n               for (l, i) in sorted([(l2, j) for j, l2 in enumerate(L2)]) \\\n               if (i, j) in (1, 2, 3, 4, 5, 7, 8) \\\n               and i not in (0, 1, 2, 3, 4, 5, 7, 8) \\\n               and not (i in (0, 1, 2, 3, 4, 5, 7, 8)) \\\n               and (i in (1, 2, 3, 4, 5, 7, 8)) \\\n               and not (j in (0, 1, 2, 3, 4, 5, 7, 8)) \\\n               and not (j in (1, 2, 3, 4, 5, 7, 8)) \\\n               and not (l in (1, 2, 3, 4, 5, 7, 8)) \\\n               and not (l in (1, 2, 3, 4, 5, 7, 8)) \\\n               and not (l in (0, 1, 2, 3, 4, 5, 7, 8)) \\", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # we can use the list(list(itertools.permutations(lambda x: x[2], l1)))\n    # to order the elements by their length, that is, the element at the right\n    # side of the list is the element with the greatest length.\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            common = common(l1[i], l2[j])\n            if common.elements == common.elements - 1:\n                break\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            common = common(l1[i], l2[j])\n            if common.elements == common.elements - 1:\n                break\n    common.elements = 0\n    common.elements -= 1\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common.items())\n    if len(common) == 0:\n        return common\n    common = common[len(common)-1]\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common = list(common.items())\n    common =", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return map(lambda x, y: x + y, lambda x: x.sorted(reverse=True))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # NOTE: This comparison is not strictly equivalent\n    # to lcmp, but it is done by different arrays\n    # so we don't have to do it here.\n    common = sorted(common, key=lambda x: x[0].value)\n    if len(common) > 1:\n        return common[0]\n    return common[1:]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(l1, list):\n        return sorted([common(l1, l2) for l1, l2 in zip(list1, list2)])\n    if isinstance(l2, list):\n        return sorted([common(l1, l2) for l1, l2 in zip(list1, list2)])\n    return list(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l1 in l1:\n        common.append(l1[0])\n    common.extend(l2)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i, l in enumerate(l1):\n        if len(l2) > i:\n            common.append(i)\n    common.sort()\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for common in sorted(l1, key=lambda x: x[0], reverse=True):\n        for common2 in sorted(l2, key=lambda x: x[1], reverse=True):\n            if common2 in common:\n                return common2\n        raise ValueError(\"Common elements can only be sorted in the same order\")\n    return [common]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # TODO(benjamin): replace these lists with logical and logical-like tuples, both\n    # by default.\n    common = [(x, y) for x, y in itertools.combinations(l1, l2)]\n\n    def common_basic(x, y):\n        \"\"\"Return a tuple that has both elements in common.\"\"\"\n        return (x, y)\n\n    common_basic([5, 3, 2, 8], [2, 3])\n    common_basic([5, 3, 2, 8], [2, 3])\n    common_basic([5, 3, 2, 8], [5, 3, 2, 8])\n    common_basic([5, 3, 2, 8], [2, 3])\n    common_basic([5, 3, 2, 8], [2, 3])\n    common_basic([5, 3, 2, 8], [2, 3])\n    common_basic([5, 3, 2, 8], [2, 3])\n    common_basic([5, 3, 2, 8], [2, 3])\n    common_basic([5, 3, 2, 8], [2, 3])\n    common_basic([5, 3, 2, 8], [5, 3, 2,", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(range(len(l1)), reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n\n    for len, item in enumerate(l1):\n        for len, item in enumerate(l2):\n            common[item] = common[item] + len\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # https://stackoverflow.com/questions/14647664/how-to-sort-unique-containers-of-two-classes\n    # TODO(theStaged): put code in the common method and get rid of the methods?\n    for l1 in l1:\n        for l2 in l2:\n            common(l1, l2, 1)\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def gen_common(l1: list, l2: list):\n        \"\"\"Generate a sorted list, similar to the list shared by\n        `common` but not sharing common elements.\n        >>> common([1, 4], [5, 7, 2, 5])\n        [1, 5]\n        >>> common([5, 7, 1, 5, 9, 653, 121])\n        [5, 9, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        return sorted(gen_common(L1, L2), key=lambda x: x[0] if x[2] else x[1])\n\n    def gen_common_adjacent(l1: list, l2: list):\n        \"\"\"Generate a sorted list, similar to the list shared by\n        `common_adjacent` but not sharing common elements.\n        >>> common_adjacent([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_adjacent([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        return sorted(gen_common_adjacent(L1, L2), key=lambda", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l1 in l1:\n        common.append(common[l1[0]])\n    for l2 in l2:\n        common.append(common[l2[0]])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return lambda x, y : common(x, y)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    list_l1 = list(l1)\n    list_l2 = list(l2)\n\n    common = list_l1.intersection(list_l2)\n    if len(common) > 1:\n        common = list_l2.intersection(common)\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return {key: list[(k, v) for k, v in l1.items()] for key in l2.items()}", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_element(a: list, b: list):\n        for c in a:\n            if common_element(b, c):\n                return c\n        return list\n\n    def common_element(a: list, b: list, elements: list):\n        common_element(b, a, elements)\n        common_element(b, a, elements + [elements])\n        common_element(b, a, elements + [elements])\n\n    def common_element(a: list, b: list, elements: list, elements: list):\n        common_element(b, a, elements + [elements])\n        common_element(b, a, elements + [elements])\n\n    def common_element(a: list, b: list, elements: list, elements: list):\n        common_element(b, a, elements + [elements])\n        common_element(b, a, elements + [elements])\n\n    def common_element(a: list, b: list, elements: list, elements: list, elements: list):\n        common_element(b, a, elements + [elements])\n        common_element(b, a, elements + [elements] + [elements])\n\n    def common_element(a: list, b: list, elements: list, elements: list, elements: list, elements: list", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return lambda l1: common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) or lambda l1: common([5, 7, 1, 5, 9, 653, 121]) or lambda l1: common([5, 7, 1, 5, 9, 653, 121]) or lambda l1: common([5, 7, 1, 5, 9, 653, 121]) or lambda l1: common([5, 7, 1, 5, 9, 653, 121]) or lambda l1: common([5, 7, 1, 5, 9, 653, 121]) or lambda l1: common([5, 7, 1, 5, 9, 653, 121]) or lambda l1: common([5, 7, 1, 5, 9, 653, 121]) or lambda l1: common([5, 7, 1, 5, 9, 653, 121]) or lambda l1: common([5, 7, 1, 5, 9, 653, 121])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common([(1, 4), (3, 2), (6, 3), (0, 6), (0, 9), (0, 10), (1, 5), (1, 0), (2, 0), (0, 2), (0, 2), (0, 2), (1, 4), (1, 4), (0, 4), (0, 4), (1, 4), (1, 4), (0, 4), (0, 4), (0, 4), (0, 4), (1, 4), (0, 4), (0, 4), (1, 4), (0, 4), (1, 4), (0, 4), (1, 4), (1, 4), (0, 4), (1, 4), (0, 4), (0, 4), (1, 4), (1, 4), (0, 4), (1, 4), (0, 4), (1, 4), (0, 4), (1, 4), (1, 4), (0, 4), (1, 4), (0, 4), (1, 4), (1, 4), (0, 4), (1, 4), (1, 4), (0, 4), (0, 4), (1, 4), (1, 4), (1, 4), (0, 4), (1, 4), (0, 4), (1, 4), (1, 4), (0, 4", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = sorted(list(range(len(l1) - 1, len(l2) - 1)))\n    common_elements.sort(key=lambda x, y: x[2] == y[2])\n    return common_elements", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elem = {}\n    for elem in common:\n        common_elem[elem] = elem\n\n    return common_elem", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) > len(l2):\n        return list(l1)[-l1:l]\n\n    # get common elements from the first and last lists\n    common1 = []\n    common2 = []\n    for l1 in l1:\n        for l2 in l2:\n            common1.append(common1.index(l2[0]) + common2.index(l2[1]))\n    common2 = common2.sort(key=lambda x: x[0])\n    return common1, common2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    list1 = list(a1)\n    list2 = list(a2)\n    for i in range(len(list1)):\n        if list2[i] == list1[i]:\n            return True\n    return False", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    r = []\n    for x in l1:\n        r.append(common(x, x2))\n    for x in l2:\n        r.append(common(x, x1))\n    return r", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for elem in list(l1):\n        for elem in list(l2):\n            if elem not in common(elem, elem):\n                raise RuntimeError('elem in common() must be distinct')\n        return list(common(elem, elem))[len(common(elem, elem))]\n    return list(common(elem, elem))[len(common(elem, elem))]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for (li, l2) in zip(L1, L2):\n        if len(li) > len(l2):\n            common.append((li, l2))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return [None, None]\n\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i, l1 in enumerate(L1):\n        for i, l2 in enumerate(L2):\n            common.append(common.copy())\n            common.extend(common.copy())\n            common.extend(common.copy())\n        common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return lambda a: list(a for a in list(a for a in common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # this is for the deep blue color\n    # it's not used here in any way\n\n    common = list(range(len(L1)))\n    common = list(range(len(L2)))\n    common = list(set(common))\n    common.sort()\n\n    common = list(set(common) - list(common.copy()))\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    key1, key2 = lambda x: x[0], x[1]\n    keys = list(zip(key1, key2))\n    keys.sort()\n    if len(keys) == 2:\n        return sorted(keys, key=lambda x: x[0].upper())\n    return [sorted(x[0] for x in keys) for x in keys]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(l1, list):\n        return l1.__getitem__(l2)['__common']\n    if isinstance(l2, list):\n        return l2.__getitem__(l1)['__common']\n    return list(set(common(l1, l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(set([common(i, j) for i, j in zip(L1, L2)]) for i, j in zip(L1, L2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    x = list(range(len(l1)))\n    y = list(range(len(l2)))\n    for x in xrange(len(l1)):\n        for y in yrange(len(l2)):\n            common(x, y)\n    return common(x, y)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def sub(l1, l2):\n        \"\"\"Make sure two lists are sorted by common elements.\n        >>> sub([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> sub([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> sub([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> sub([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> sub([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> sub([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> sub([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> sub([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> sub([5, 3, 2, 8", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    list1 = list1.split(',')\n    list2 = list2.split(',')\n\n    def common_element(l1: list1, l2: list2):\n        \"\"\"Return common element for two lists.\n        >>> common_element([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 4, 3, 34]\n        >>> common_element([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n\n        if isinstance(l1, list):\n            list1 = list1.split(',')\n        if isinstance(l2, list):\n            list2 = list2.split(',')\n\n        return common_element(list1, list2)\n\n    def sort_common_elements(l1: list, l2: list):\n        \"\"\"Sort common elements in two lists.\n        >>> sort_common_elements([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 4, 3, 34]\n        >>> sort_common_elements([5, 3, 2, 8], [3, 2])\n        [2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    commonList = []\n    for a in l1:\n        commonList.append(common([a, b], a.sort()[1]))\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    commonList.sort()\n    common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(common([x1, x2, yx] for x1, x2, yx in x1.split(',')) for x in x2.split(',')))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    assert len(L1) == len(L2)\n    common = list(set([int(x[0]) for x in L1 if int(x[1]) == int(x[2])]))\n    common.sort()\n    common.reverse()\n    common.reverse()\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1) + len(l2)))\n    common.sort()\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # it's not a wildcard for a list - a list of int, float or int, float or int\n    # however, the common method works for lists\n    common = lambda l: ([l] if isinstance(l, list) else (l, []))[0]\n\n    for l in list(common):\n        for i in range(len(l)):\n            if i % 2 == 0:\n                return common(l, i)\n            else:\n                return common(l[i], i)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    lst = [1, 2, 3]\n    lst.sort(key=lambda x, y: x[1] < y[1])\n    lst.reverse()\n    return lst", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for i in range(len(L1)):\n        for j in range(len(L2)):\n            if L1[i] == L2[j]:\n                result.append(i + 1)\n        if i >= len(L1) or i < 0:\n            result.append(i)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_list = list(list(l1))\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()\n    common_list.sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common.sort(lambda l: l[0] < l[1])\n    common.sort(lambda l: l[0] > l[1])\n    common.sort(lambda l: l[0] < l[1] < l[2])\n    common.sort(lambda l: l[0] > l[1] > l[2])\n    common.sort(lambda l: l[0] < l[1])\n    common.sort(lambda l: l[0] < l[1])\n    common.sort(lambda l: l[0] < l[1])\n    common.sort(lambda l: l[0] < l[1])\n    common.sort(lambda l: l[0] < l[1])\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = list(set(list(filter(lambda x: list(x).intersection(list(list(list(filter(lambda x: list(x).intersection(list(filter(lambda x: list(x).intersection(list(list(filter(lambda x: list(x).intersection(list(filter(lambda x: list(x).intersection(list(list(filter(lambda x: list(x).intersection(list(list(filter(lambda x: list(x).intersection(list(filter(lambda x: list(x).intersection(list(list(filter(lambda x: list(x).intersection(list(filter(lambda x: list(x).intersection(list(filter(lambda x: list(x).intersection(list(list(filter(lambda x: list(x).intersection(list(list(filter(lambda x: list(x).intersection(list(filter(lambda x: list(x).intersection(list(filter(lambda x: list(x).intersection(list(filter(lambda x: list(x).intersection(list(filter(lambda x: list(x).intersection(list(list(filter(lambda x: list(x).", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common.sort(cmp=lambda a: cmp(common(a, b)), reverse=False)\n    common.sort(cmp=lambda a: cmp(common(a, b)), reverse=True)\n    common.sort(cmp=lambda a: cmp(common(a, b)), reverse=False)\n    common.sort(cmp=lambda a: cmp(common(a, b)), reverse=False)\n    common.sort(cmp=lambda a: cmp(common(a, b)), reverse=False)\n    common.sort(cmp=lambda a: cmp(common(a, b)), reverse=False)\n    common.sort(cmp=lambda a: cmp(common(a, b)), reverse=False)\n    common.sort(cmp=lambda a: cmp(common(a, b)), reverse=False)\n    common.sort(cmp=lambda a: cmp(common(a, b)), reverse=False)\n    common.sort(cmp=lambda a: cmp(common(a, b)), reverse=False)\n    common.sort(cmp=lambda a: cmp(common(a, b)), reverse=False)\n    common.sort(cmp=lambda a: cmp(common(a, b)), reverse=False)\n    common.sort(cmp=lambda a: cmp(common(a, b)), reverse=False)\n    common.sort(cmp=lambda a:", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = sorted(L1)\n    l2 = sorted(L2)\n    common.update([common.get(x, x) for x in l1 if len(x) == 2 and x[0] == x[1] and common.get(x, x) for x in l2])\n\n\n    def common_arcs(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common_arcs([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 4, 3, 34, 653, 121]\n        >>> common_arcs([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_arcs([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_arcs([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_arcs([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_arcs([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {1: [1, 5, 653], 2: [1, 2, 8]}\n    for x in range(1, len(l1), len(l2)):\n        if common[x].count(x) > 1:\n            common[x].sort(key=lambda x: common[x][0][x] - common[x][1][x])\n            common[x] = common[x][0][x]\n            common.update(common)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    common.update(list(range(1, len(l1)))) # sort by common size, ascending\n    common.update(list(range(2, len(l2))))\n    common.update(range(len(l1) + 1, len(l2)))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return zip(*[common(l1, l2) for l1 in l1 and l2 in l2 if l1 in l2 and len(l2) == len(l1)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for item in list.items():\n        common[item] = common[item] + 1\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i, l1 in enumerate(L1):\n        common[l1] = [i, l2]\n    for i, l2 in enumerate(L2):\n        common[l2] = [i, l1]\n    return common\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(li, list):\n        return sorted(li)\n    else:\n        return sorted(li.items())", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = [common(l1) for l1 in l1 if l1[0] < l1[1] and l1[1] < l2[0] and l1[2] < l2[1]]\n    result = result.sort()\n    if not result.has_key(0):\n        return result\n\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list()\n    common.sort(key=lambda l: len(l[0])-l[1], reverse=True)\n    common.sort(key=lambda l: len(l[1])-l[0], reverse=True)\n    common.sort(key=lambda l: len(l[2])-l[0], reverse=True)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(zip(list(set(l1), set(l2)), [('common', '!=', '!=')]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    keys = list(set(list(xrange(len(l1), len(l2)))))\n    keys.sort(cmp)\n    return [(i, i.sort(cmp)) for i in keys]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    i = 0\n    j = 0\n    for l in list1:\n        if len(l) < 2:\n            return i, j\n        if i % 2 == 0:\n            return i, j\n        if l[j + 1] == l[j + 1] + 1:\n            j += 1\n        else:\n            j += 1\n    return j, i", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for col in l1:\n        return l.index(col) + 1 if col.find('=') > 0 else 0\n\n    def common_plus(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common_plus([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_plus([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        for col in l1:\n            common_plus(l1.index(col), l2.index(col))\n        return l\n\n    def common_subtract(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common_subtract([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_subtract([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        common_subtract(l1.index(col), l2.index(", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for el in list1:\n        common[el] = list2.index(el)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(sorted(list(unique(l1) for l1 in l1) for l2 in l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    import itertools\n    import random\n    # Sort the list (with 0 being the first element) into two lists\n    s = list(sort(list(itertools.product(*l1)))\n    # Sort the list (with 0 being the first element) into two lists\n    s = list(sort(list(itertools.product(*l2)))\n\n    return s", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    x = list(set(range(1, 3, 5)))\n    y = list(set(range(1, 6, 10)))\n    common = [x[::-1] for x in x]\n    common = [x for x in common if x not in y]\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([list.popleft() for list in l1]) + list(set([list.popleft() for list in l2]) + list(set([list.popleft() for list in l3]) + list(set([list.popleft() for list in l4]) + list(set([list.popleft() for list in l5]))]) + list(set([list.popleft() for list in l6])) + list(set([list.popleft() for list in l7])) + list(set([list.popleft() for list in l8])) + list(set([list.popleft() for list in l9])) + list(set([list.popleft() for list in l10])) + list(set([list.popleft() for list in l11])) + list(set([list.popleft() for list in l12])) + list(set([list.popleft() for list in l13])) + list(set([list.popleft() for list in l14]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Replace the items of the lists by the elements of the\n        # corresponding keys in the two lists, i.e.\n        # [5, 3, 2, 8] -> [5, 3, 2, 8].\n        for key, value in zip(l1, l2):\n            for value, key in zip(value, key):\n                common(value, key)\n    return common(l1, l2)"]]