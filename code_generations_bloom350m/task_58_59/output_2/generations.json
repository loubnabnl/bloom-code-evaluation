[["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common for common in l1 if common not in l2 or common not in [None, None]]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common)\n    common.sort(key=lambda x: x[0], reverse=True)\n    common = list(common.reverse())\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1) + set(l2))\n    common.sort(key=lambda x: len(x))\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l1, l2 in l1: l2 + l2: common.extend(common)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return common(item, list2)\n    return None", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) > len(l2):\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common = list(common([l], [l]))\n        common =", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([common(l1, l2) for l1 in l1 if common(l2, l1)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l1 in l1:\n        common.append(common.index(l1) + 1)\n    for l2 in l2:\n        common.append(common.index(l2) + 1)\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for x in range(len(l1)):\n        common.append(common.min([l1[x], l2[x]]))\n    for x in range(len(l2)):\n        common.append(common.max([l1[x], l2[x]]))\n    common = common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(map(lambda x: x[0], list(l1))), key=lambda x: x[1])[0]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)) + list(range(len(l2))))\n    common.sort()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(l1, list):\n        return sorted(common([l1, l2]))\n    elif isinstance(l2, list):\n        return sorted(common([l1, l2], reverse=True))\n    else:\n        raise TypeError(\"Expected list, got: %s\" % type(l1))\n    return list(common([l1, l2]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l in l1:\n        common[l[0]] = common[l[1]] = l[2]\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common(x, y) for x, y in zip(L1, L2)]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for li in l1:\n        common.append(common.index(li))\n    for li in l2:\n        common.append(common.index(li))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i in range(len(L1)):\n        common[i] = list(L1[i])\n    for i in range(len(L2)):\n        common[i] = list(L2[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for item in l1:\n        for item in l2:\n            if item in common(item, item):\n                return item\n    return list(range(len(l1) + len(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[0]) if isinstance(l1, list) else sorted(common(l2, l1), key=lambda x: x[0]) if isinstance(l2, list) else sorted(common([(x[0], x[1]), (x[0], x[2]), (x[0], x[3]), (x[0], x[4]), (x[0], x[5]), (x[0], x[6]), (x[0], x[7]), (x[0], x[8]), (x[0], x[9]), (x[0], x[10]), (x[0], x[11])]), key=lambda x: x[0]) if isinstance(l2, list) else sorted(common([(x[0], x[1]), (x[0], x[2]), (x[0], x[3]), (x[0], x[4]), (x[0], x[5]), (x[0], x[6]), (x[0], x[7]), (x[0], x[8]), (x[0], x[9]), (x[0], x[10]), (x[0], x[11])]), key=lambda x: x[0]) if isinstance(l1, list) else sorted(common([(x[0], x[1]), (x[0], x[2]), (x[0], x[3]), (x[0],", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([l1, l2], [1, 4]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(filter(lambda x: x[0]!= 1, list(range(len(l1)))) + list(filter(lambda x: x[0]!= 2, list(range(len(l2)))))\n    common = sorted(common, key=lambda x: x[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for x in range(len(l1)):\n        if len(l2) <= x and len(l2) <= x + 1:\n            return common(l1, l2)\n    return []", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return common(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([common(l1, l2) for l1 in l1 if common(l2, l1)], key=lambda x: x[1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for item in l1:\n        common.append(item)\n    for item in l2:\n        common.append(item)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(L1[i][0])\n    common.append(L1[i][1])\n    common.append(L1[i][2])\n    common.append(L1[i][3])\n    common.append(L1[i][4])\n    common.append(L1[i][5])\n    common.append(L1[i][6])\n    common.append(L1[i][7])\n    common.append(L1[i][8])\n    common.append(L1[i][9])\n    common.append(L1[i][10])\n    common.append(L1[i][11])\n    common.append(L1[i][12])\n    common.append(L1[i][13])\n    common.append(L1[i][14])\n    common.append(L1[i][15])\n    common.append(L1[i][16])\n    common.append(L1[i][17])\n    common.append(L1[i][18])\n    common.append(L1[i][19])\n    common.append(L1[i][20])\n    common.append(L1[i][21])\n    common.append(L1[i][22])\n    common.append(L1[i][23])\n    common.append(L1[i][24])\n    common.append(L1[i][25])\n    common.append(L1[i][26])\n    common.append(L1[i][27])\n    common.append(L1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(common(l1, l2))), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # TODO(mickey): make this a list of lists of lists\n    common = list(zip([common(l1, l2) for l1 in l1 if l1 not in l2 and l1 not in list(common)]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l in l1:\n        for l2 in l2:\n            common[l[1, l2]] = common[l2[1, l2]] + common[l2[2, l2]]\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common = common.items()\n    common = common.sort()\n    common =", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # First, return the common elements for the lists.\n    common = []\n    for l1 in l1:\n        common.append(common.sort(lambda x, y: cmp(x, y)))\n    common = common.sort(lambda x, y: cmp(x, y))\n    return common\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for a in l1:\n        common.append(common[a])\n    for b in l2:\n        common.append(common[b][-1])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([(i, j) for i, j in zip(L1, L2)], key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([common(i, j) for i, j in zip(L1, L2)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)) + list(range(len(l2)))\n    for i, l in enumerate(common):\n        if i < len(l2):\n            return common[i]\n    return list(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for k, v in zip(L1, L2):\n        if v in common:\n            common.append(v)\n        else:\n            common.append(v)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = [(i, j) for i, j in zip(L1, L2)]\n    common.sort()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort by key\n    common = list(common.sort_by(lambda x: x[0]))\n    common.sort(key=lambda x: x[0])\n    common.sort(reverse=True)\n    common.sort(reverse=False)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for item in l1:\n        common.append(item)\n    for item in l2:\n        common.append(item)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(l1, list):\n        common = common(l1, l2)\n    elif isinstance(l2, list):\n        common = common(l2, l1)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([(i, j) for i, j in zip(l1, l2)]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(common(l1, l2))), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort unique common elements by common not equal\n    common = sorted(common, key=lambda x: x[0])\n    # Sort unique common elements by common not equal\n    common = sorted(common, key=lambda x: x[1])\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for (l1, l2) in zip(list, l1):\n        common[l2] = common[l1]\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([(x, y) for x, y in list(l1)]), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.index(l1[i], lambda x: x[0] == i))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i in range(len(l1)):\n        common[l1[i]] = common[l1[i]] + common[l1[i]]\n    for i in range(len(l2)):\n        common[l2[i]] = common[l2[i]] + common[l2[i]]\n    for i in range(len(common)):\n        print common[i]\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(zip(*list(map(lambda x: x[0], list(map(lambda x: x[1], list(map(lambda x: x[2], list(map(lambda x: x[3], list(map(lambda x: x[4], list(map(lambda x: x[5], list(map(lambda x: x[6], list(map(lambda x: x[7], list(map(lambda x: x[8], list(map(lambda x: x[9], list(map(lambda x: x[10], list(map(lambda x: x[11], list(map(lambda x: x[12], list(map(lambda x: x[13], list(map(lambda x: x[14], list(map(lambda x: x[15], list(map(lambda x: x[16], list(map(lambda x: x[17], list(map(lambda x: x[18], list(map(lambda x: x[19], list(map(lambda x: x[20], list(map(lambda x: x[21], list(map(lambda x: x[22], list(map(lambda x: x[23], list(map(lambda x: x[24], list(map(lambda x: x[25], list(map(lambda", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    common[l1] = common[l2] = 0\n    for i in range(len(l1)):\n        common[l2] += common[l1][i]\n    common[l2] = common[l2] + common[l2]\n    for i in range(len(l2)):\n        common[l2] += common[l2][i]\n    common[l2] = common[l2] + common[l2]\n    for i in range(len(l1)):\n        common[l2] += common[l2][i]\n    common[l2] = common[l2] + common[l2]\n    for i in range(len(l2)):\n        common[l2] += common[l2][i]\n    common[l2] = common[l2] + common[l2]\n    for i in range(len(l1)):\n        common[l2] += common[l2][i]\n    common[l2] = common[l2] + common[l2]\n    for i in range(len(l1)):\n        common[l2] += common[l2][i]\n    common[l2] = common[l2] + common[l2]\n    for i in range(len(l1)):\n        common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for item in list1:\n        common.append(common.index(item))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l1 in l1:\n        common.append(common[l1.index(l2)])\n    common = sorted(common, key=lambda l: l[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for item in l1:\n        common.append(item[0])\n    for item in l2:\n        common.append(item[1])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # TODO: We should be able to use the sortedness of the list as a\n    #       heuristic to decide when to return unique common elements,\n    #       instead of just the list itself.\n    common = []\n    for l in l1:\n        common.append(l)\n    common.sort(key=lambda l: l[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_words(words):\n        \"\"\"Return the common elements of a list of words.\n        >>> common_words([1, 4, 3, 34, 653, 2, 5])\n        [1, 4, 3, 34, 653]\n        >>> common_words([5, 7, 1, 5, 9, 653, 121])\n        [5, 7, 1, 5, 9, 653]\n        >>> common_words([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_words([2, 3], [2, 3])\n        [2, 3]\n        >>> common_words([2, 3], [2, 3])\n        [2, 3]\n        >>> common_words([2, 3], [2, 3])\n        [2, 3]\n        >>> common_words([2, 3], [2, 3])\n        [2, 3]\n        >>> common_words([2, 3], [2, 3])\n        [2, 3]\n        >>> common_words([2, 3], [2, 3])\n        [2, 3]\n        >>> common_words([2, 3], [2, 3])\n        [2, 3]\n        >>> common_words([2, 3], [2, 3])\n        [2, 3]\n        >>> common_words([2, 3], [2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Use a common hash function for two lists\n    common_hash = lambda x: x.__hash__().sum(0)\n    return common_hash(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for k, v in zip(L1, L2):\n        if isinstance(v, list):\n            common.append(common.index(k, v[0]))\n        elif isinstance(v, tuple):\n            common.append(common.index(k, v[0]) + 1)\n        elif isinstance(v, int):\n            common.append(common.index(k, v[0]) + 1)\n        return common\n\n    common.sort(key=lambda x: x[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(L1[i])\n    for i in range(len(L2)):\n        common.append(L2[i])\n\n    common.sort(key=lambda x, y: cmp(x, y))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for li in l1:\n        for li2 in l2:\n            if li[0] == li2[0]:\n                common.append(li[0])\n                common.append(li[1])\n            elif li[0] == li2[1]:\n                common.append(li[0])\n                common.append(li[1])\n            elif li[0] == li2[2]:\n                common.append(li[0])\n                common.append(li[1])\n        return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort unique elements by their frequency\n    if len(l1) == len(l2):\n        return sorted(common(l1, l2))\n    else:\n        return sorted(common(l1, l2, sort=lambda x: x[0], reverse=True))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {\n        'first': list(common.keys()[0]),\n        'last': list(common.keys()[1])\n    }\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for x in l1:\n        common.append(x)\n    for x in l2:\n        common.append(x)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common = list(range(len(l2)))\n    common = sorted(common, key=lambda x: x[1], reverse=True)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(l1, list):\n        return sorted([common(l1[0], l1[1]) for l1 in l1[1:]])\n    else:\n        return sorted([common(l1[0], l1[1]) for l1 in l1[1:]])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common)\n    common.sort(key=lambda l: l[0])\n    common.sort(key=lambda l: l[1])\n    common.sort(key=lambda l: l[2])\n    common.sort(key=lambda l: l[3])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for a in list(a1):\n        common.append(common.index(a))\n    for b in list(a2):\n        common.append(common.index(b))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l in l1:\n        common.append(common.index(l))\n    common = sorted(common, key=lambda x: common[x][0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for item in l1:\n        common.append(common.append(common.append(common.append(common.append(common.append(item))))\n    for item in l2:\n        common.append(common.append(common.append(common.append(common.append(common.append(common.append(common.append(item))))))\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_flat(l1, l2):\n        if l1 == l2:\n            return l1\n        for common in l1.items():\n            if common in l2.items():\n                return common_flat(common, l2)\n        return l1\n    common_flat([5, 3, 2, 8], [3, 2])\n\n    def common_flat(common1, common2):\n        if common1 == common2:\n            return common1\n        for common in common1.items():\n            if common in common2.items():\n                return common_flat(common, common2)\n        return common1\n    common_flat([5, 3, 2, 8], [3, 2])\n\n    def common_flat(common1, common2, common3):\n        if common1 == common2:\n            return common1\n        for common in common1.items():\n            if common in common2.items():\n                return common_flat(common, common2, common3)\n        return common1\n    common_flat([5, 3, 2, 8], [3, 2])\n\n    common_flat([5, 3, 2, 8], [5, 3, 2, 8], [5, 3, 2, 8])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _common(l1: list, l2: list):\n        common = {}\n        for i in range(len(l1)):\n            common[l1[i]] = common[l2][i]\n        return common\n\n    def common(l1: list, l2: list, common: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        common = common.copy()\n        common[l1[i]] = common[l2][i]\n        common.update(common)\n        return common\n\n    def common(l1: list, l2: list, common: list, common_to_common: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            result.append(l1[i])\n    for i in range(len(l2)):\n        if l2[i]!= l1[i]:\n            result.append(l2[i])\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_to_dict(l1, l2):\n        \"\"\"Return the common elements for two lists.\n        >>> common_to_dict([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_to_dict([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_to_dict([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_to_dict([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_to_dict([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_to_dict([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_to_dict([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_to_dict([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_to_dict([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_to_dict([5, 3, 2, 8],", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l in l1:\n        common[l[0]] = common[l[1]] = 1\n    for l in l2:\n        common[l[0]] = common[l[1]] = 0\n\n    common.update(common.copy())\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _common(l1: list, l2: list):\n        common = lambda x: x[0] == 1 and x[1] == 4 and x[2] == 3 and x[3] == 6\n        if len(common) > 0:\n            return common(l1, l2)\n        return lambda x: x[0] == 1 and x[1] == 4 and x[2] == 3 and x[3] == 6\n    return _common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort the lists by common elements\n    common = lambda x: x[1] * x[2]\n    common.sort(key=lambda x: x[0], reverse=True)\n\n    for l in lists:\n        common(l, l)\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for item in l1:\n        if item in l2:\n            common.append(item)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.max(lambda x : x[0] == i))\n    for i in range(len(L2)):\n        common.append(common.max(lambda x : x[0] == i))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(map(lambda x: x.sort(), list(common(l1, l2))))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for key, value in list.items():\n        if key not in common:\n            common.append([value])\n        else:\n            common.append([value])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = [l1[0] for l1 in list(common)]\n    common.sort()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(L1, list):\n        return sorted([common(L1, L2) for L1, L2 in zip(L1, L2)])\n    if isinstance(L2, list):\n        return sorted([common(L2, L1) for L2, L1 in zip(L2, L1)])\n    return list([common(L1, L2) for L1, L2 in zip(L1, L2)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for x in l1:\n        common.append(common.index(x))\n    common.sort(key=lambda x, y: x[1] < y[1])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(L1)))\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common = list(range(len(l2)))\n    common = list(range(len(l1)))\n    common = list(range(len(l2)))\n    common = list(range(len(l1)))\n    common = list(range(len(l2)))\n    common = list(range(len(l1)))\n    common = list(range(len(l2)))\n    common = list(range(len(l1)))\n    common = list(range(len(l2)))\n    common = list(range(len(l1)))\n    common = list(range(len(l2)))\n    common = list(range(len(l1)))\n    common = list(range(len(l2)))\n    common = list(range(len(l1)))\n    common = list(range(len(l2)))\n    common = list(range(len(l1)))\n    common = list(range(len(l2)))\n    common = list(range(len(l1)))\n    common = list(range(len(l2)))\n    common = list(range(len(l1)))\n    common = list(range(len(l2)))\n    common = list(range(len(l1)))\n    common = list(range(len(l2)))\n    common = list", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) < len(l2):\n        return l1\n    if len(l2) < len(l1):\n        return l2\n    common = {}\n    for l1 in l1:\n        common[l1[0]] = common[l1[1]] = common[l2[0]] = common[l2[1]] = 1\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(common.items()))\n    common.sort(key=lambda x, y: x > y)\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l in l1:\n        common.append(common.index(l))\n    common.sort()\n    common = sorted(common)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([common(l1, l2) for l1 in l1 if common(l2, l1)], key=lambda k: k)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list([common(x, y) for x, y in list(common(l1, l2))])\n    common.sort()\n    common = common.sort(key=lambda x: x[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = [(x, x) for x in list(common)]\n    return sorted(common)[:2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return sorted(common(l1, l2))\n    elif len(l1) > len(l2):\n        return sorted(common(l1, list([int(l1[0])])))\n    elif len(l2) > len(l1):\n        return sorted(common(l2, list([int(l2[0])])))\n    elif len(l1) == len(l2):\n        return sorted(common(l1, list([int(l1[1])])))\n    elif len(l2) > len(l1):\n        return sorted(common(l2, list([int(l2[1])])))\n    elif len(l1) == len(l2):\n        return sorted(common(l1, list([int(l1[2])])))\n    elif len(l2) == len(l1):\n        return sorted(common(l2, list([int(l2[2])])))\n    elif len(l1) == len(l2):\n        return sorted(common(l1, list([int(l1[3])])))\n    elif len(l2) == len(l1):", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for a in l1:\n        common.append(common.index(a))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(L1, list):\n        return sorted(L1)\n    if isinstance(L2, list):\n        return sorted(L2)\n\n    return sorted(common(L1, L2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(map(lambda x: x[0], list(range(len(l1))))\n    common = list(map(lambda x: x[0], list(range(len(l2))))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort the lists\n    sorted_lists = sorted(l1, key=lambda l: l[0])\n    sorted_lists = sorted(l2, key=lambda l: l[1])\n\n    # Return the unique elements\n    unique_lists = sorted(sorted_lists, key=lambda l: l[0])\n    unique_lists = sorted(sorted_lists, key=lambda l: l[1])\n\n    return unique_lists", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # for each element in l1, l2, common(l1, l2)\n    for key in common(l1, l2):\n        if key not in l2:\n            raise TypeError('common', key)\n        if key not in l1:\n            raise TypeError('common', key)\n        if key in l2:\n            return (l1[key], l2[key])\n    return None\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for a in l1:\n        common.append(common[a, a, a])\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1) + set(l2))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([(i, i) for i in range(len(l1))], reverse=True))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append([L1[i], L2[i]])\n    for i in range(len(L2)):\n        common.append([L2[i], L1[i]])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(1, len(l1)))\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[::-1]\n    common = common[", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(common([(x, y) for x, y in zip(l1, l2)]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_element(a, b: list):\n        \"\"\"Return a list of all common elements between a and b.\n        >>> common_element([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_element([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        common = list(set(a.items() + set(b.items())))\n        return common\n    common_element([5, 3, 2, 8], [2, 3])\n    common_element([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    common_element([5, 3, 2, 8], [2, 3])\n    common_element([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    common_element([5, 3, 2, 8], [3, 2])\n    common_element([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9,", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i, l in enumerate(L1):\n        common.append(common.filter(lambda x: x[0] == i))\n    common.sort(key=lambda x: common[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for x in l1:\n        common.append(x)\n    for x in l2:\n        common.append(x)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == 2:\n        return sorted([common(l1[0], l1[1]) for l1 in l1 if common(l1[0], l1[1])])\n    elif len(l2) == 2:\n        return sorted([common(l2[0], l2[1]) for l2 in l2 if common(l2[0], l2[1])])\n    else:\n        return sorted([common(l1[0], l1[1]) for l1 in l1 if common(l1[0], l1[1])])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common(l1: list, l2: list):\n        for i in range(len(L1)):\n            for j in range(len(L2)):\n                if l1[i] in l2[j]:\n                    return l1[i], l2[j]\n        return [], []\n    common([5, 3, 2, 8], [3, 2])\n    common([5, 3, 2, 8], [2, 3])\n    common([5, 3, 2, 8], [1, 4])\n    common([5, 3, 2, 8], [1, 4])\n    common([5, 3, 2, 8], [1, 4])\n    common([5, 3, 2, 8], [1, 4])\n    common([5, 3, 2, 8], [1, 4])\n    common([5, 3, 2, 8], [1, 4])\n    common([5, 3, 2, 8], [1, 4])\n    common([5, 3, 2, 8], [1, 4])\n    common([5, 3, 2, 8], [1, 4])\n    common([5, 3, 2, 8], [1, 4])\n    common([5, 3, 2, 8], [1, 4])\n    common([5, 3", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(sorted(common))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_from_list(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common_from_list([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_from_list([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n        \"\"\"\n        common = []\n        for i in range(len(l1)):\n            common.append(common_from_list(l1, l1[i]))\n        common.sort(key=operator.attrgetter('unique'))\n        common.sort(reverse=True)\n        common.reverse()\n        return common\n\n    def common_from_list(l1: list, l2: list, ignore_results: bool):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common_from_list([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_from_list([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n        \"\"\"\n        common = []", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for item in list1:\n        common[item] = common[item] + 1\n    for item in list2:\n        common[item] = common[item] + 1\n    common = sorted(common, key=item.lower)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(filter(lambda x: x not in l1, l1))\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common.split())\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l1 in l1:\n        common.append(common(l1, l2))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set([l1.common(l2) for l in list(l1))]), key=lambda x: x.common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for key, value in zip(l1, l2):\n        if key not in result:\n            result.append(key)\n        result.append(value)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1) * len(l2)))\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i in range(len(L1)):\n        common[l1[i]] = common[l2[i]] = 0\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(map(lambda x: x[0], l1))\n    common = list(map(lambda x: x[0], l2))\n    common = list(map(lambda x: x[0], common))\n\n    common = common.sort(key=lambda x: x[1])\n    common = common.sort(key=lambda x: x[2])\n    common = common.sort(key=lambda x: x[3])\n    common = common.sort(key=lambda x: x[4])\n    common = common.sort(key=lambda x: x[5])\n    common = common.sort(key=lambda x: x[6])\n    common = common.sort(key=lambda x: x[7])\n    common = common.sort(key=lambda x: x[8])\n    common = common.sort(key=lambda x: x[9])\n    common = common.sort(key=lambda x: x[10])\n    common = common.sort(key=lambda x: x[11])\n    common = common.sort(key=lambda x: x[12])\n    common = common.sort(key=lambda x: x[13])\n    common = common.sort(key=lambda x: x[14])\n    common = common.sort(key=lambda x: x[15])\n    common = common.sort(key=lambda x: x[16])\n    common = common.sort(key=", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.append(L1[i]))\n        common.append(common.append(L2[i]))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for x in l1:\n        common.append(common.index(x) + 1)\n    for x in l2:\n        common.append(common.index(x) + 1)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(L1)))\n    common.sort()\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for item in list1:\n        result.append(item)\n    result.sort(reverse=True)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([(i, j) for i, j in zip(l1, l2)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def get_common(l1: list, l2: list):\n        \"\"\"Return list of common elements for two lists.\n        >>> get_common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> get_common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> get_common([5, 7, 1, 5, 9, 653, 121], [2, 3])\n        [2, 3]\n        >>> get_common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> get_common([5, 7, 1, 5, 9, 653, 121], [2, 3])\n        [2, 3]\n        >>> get_common([5, 7, 1, 5, 9, 653, 121], [2, 3])\n        [2, 3]\n        >>> get_common([5, 7, 1, 5, 9, 653, 121], [2, 3])\n        [2, 3]\n        >>> get_common([5, 7, 1, 5, 9, 653, 121], [2, 3])\n        [2, 3]\n        >>> get_common([5,", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort by length\n    if isinstance(l2, list):\n        l2 = sorted(l2, key=lambda l: l[1])\n        common(l2, l2)\n    if isinstance(l1, list):\n        l1 = sorted(l1, key=lambda l: l[0])\n        common(l1, l1)\n    return common(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort()\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l1 in l1:\n        for l2 in l2:\n            common[l1.index(l2)] = l1\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return sorted(common(l1, l2))\n    elif len(l1) == len(l2):\n        return sorted(common(l1, l2))\n    elif len(l1) == len(l2):\n        return sorted(common(l1, l2))\n    elif len(l1) == len(l2):\n        return sorted(common(l1, l2))\n    elif len(l1) == len(l2):\n        return sorted(common(l1, l2))\n    elif len(l1) == len(l2):\n        return sorted(common(l1, l2))\n    elif len(l1) == len(l2):\n        return sorted(common(l1, l2))\n    elif len(l1) == len(l2):\n        return sorted(common(l1, l2))\n    elif len(l1) == len(l2):\n        return sorted(common(l1, l2))\n    elif len(l1) == len(l2):\n        return sorted(common(l1, l2))\n    elif len(l1) == len(l2):\n        return sorted(common(l1, l2))\n    elif len", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(L1)))\n    common.sort(key=lambda l: int(l[0]))\n    common.sort(key=lambda l: int(l[1]))\n    common.sort(key=lambda l: int(l[2]))\n    common.sort(key=lambda l: int(l[3]))\n    common.sort(key=lambda l: int(l[4]))\n    common.sort(key=lambda l: int(l[5]))\n    common.sort(key=lambda l: int(l[6]))\n    common.sort(key=lambda l: int(l[7]))\n    common.sort(key=lambda l: int(l[8]))\n    common.sort(key=lambda l: int(l[9]))\n    common.sort(key=lambda l: int(l[10]))\n    common.sort(key=lambda l: int(l[11]))\n    common.sort(key=lambda l: int(l[12]))\n    common.sort(key=lambda l: int(l[13]))\n    common.sort(key=lambda l: int(l[14]))\n    common.sort(key=lambda l: int(l[15]))\n    common.sort(key=lambda l: int(l[16]))\n    common.sort(key=lambda", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) > len(l2):\n        return []\n\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(l1, list):\n        l1 = l1.sort()\n    if isinstance(l2, list):\n        l2 = l2.sort()\n    common = list(set(set(l1).intersection(l2)))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(zip(*[common(i, j) for i, j in zip(*l1, l2)]))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(l1[i])\n    for i in range(len(l2)):\n        common.append(l2[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(map(lambda x: x[0], l1))\n    common = list(map(lambda x: x[1], l2))\n    common = common.sort(key=lambda x: x[0])\n    common = common.sort(reverse=True)\n    common = common.sort(reverse=True)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort(key=lambda l: cmp(l[1], l[2]))\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common = list(range(len(l2)))\n    common = list(common)\n    common = list(common)[::-1]\n    common = list(common)[:-1]\n    common = list(common)[::-1]\n    common = list(common)[:-1]\n    common = list(common)[:-1]\n    common = list(common)[::-1]\n    common = list(common)[:-1]\n    common = list(common)[::-1]\n    common = list(common)[:-1]\n    common = list(common)[::-1]\n    common = list(common)[::-1]\n    common = list(common)[::-1]\n    common = list(common)[::-1]\n    common = list(common)[::-1]\n    common = list(common)[::-1]\n    common = list(common)[::-1]\n    common = list(common)[::-1]\n    common = list(common)[::-1]\n    common = list(common)[::-1]\n    common = list(common)[::-1]\n    common = list(common)[::-1]\n    common = list(common)[::-1]\n    common = list(common)[::-1]\n    common = list", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for a in l1.items():\n        common.append(common.index(a))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort by common element.\n    common = list(common.sort(key=common.__getitem__))\n    common = sorted(common, key=common.__getitem__)\n\n    common = list(common.sort(key=common.__getitem__))\n    common = sorted(common, key=common.__getitem__)\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort the list\n    common = sorted(common, key=lambda x: x[0])\n    # Add common to list\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = [(i, j) for i, j in zip(L1, L2)]\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i in range(len(l1)):\n        common[l1[i]] = list(common[l1[i]] + list(common[l1[i]] + list(l1[i])))\n\n    common.update(list(common[l2] + list(common[l2] + list(l2[i]))))\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([common(i, j) for i, j in zip(L1, L2)])[0]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(l1, list):\n        return sorted(common(l1, l2))\n    else:\n        return sorted(common(l1, l2, key=lambda x: x[0] if x[1] == 0 else x[1], key=lambda x: x[0] if x[1] == 0 else x[1]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l1 in l1:\n        common[l1[0]] = common[l1[1]] = common[l1[2]]\n    for l2 in l2:\n        common[l2[0]] = common[l2[1]] = common[l2[2]]\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return item\n    return list", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(L1) == 0:\n        return l1\n    if len(L2) == 0:\n        return l2\n    common = {k: v for k, v in l1.items() if v in l2.items()}\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(map(lambda x: len(x), list(range(len(l1)) + list(range(len(l2)) + 1)))\n    common.sort()\n    common.reverse()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([l], [l]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for item in l1:\n        common[item] = item\n    for item in l2:\n        common[item] = item\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common)\n    common.sort()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common = list(range(len(l2)))\n    common = sorted(common, key=lambda x: x[0], reverse=True)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(L1) + len(L2)))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda l: l[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for x in list(x):\n        common.append(common.index(x))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for common_element in l1.items():\n        common.append(common_element[0])\n    common.sort()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common.reverse()\n    common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        common.append(common.append(common.append(common.append(l1[i])))\n    for i in range(len(l2)):\n        common.append(common.append(common.append(common.append(l2[i])))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([common.sort() for common in list(l1)]))\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.sort()\n    common.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i, j in itertools.cycle(L1, L2):\n        common[i][j] = common[i][j] * 1.0 / sum([common[i][j] for j in i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([l1[0] for l1 in list(common([71, 5, 9, 653, 121]))]))\n    common = sorted(common, key=lambda x: x[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # returns a list of the common elements\n    common = []\n    for l1 in l1:\n        common.append(common.index(l1))\n    for l2 in l2:\n        common.append(common.index(l2))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([(x, y) for x, y in zip(L1, L2)]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common.items())\n    common.sort(key=lambda l: l[0])\n    common.sort(key=lambda l: l[1])\n    common.sort(key=lambda l: l[2])\n    common.sort(key=lambda l: l[3])\n    common.sort(key=lambda l: l[4])\n    common.sort(key=lambda l: l[5])\n    common.sort(key=lambda l: l[6])\n    common.sort(key=lambda l: l[7])\n    common.sort(key=lambda l: l[8])\n    common.sort(key=lambda l: l[9])\n    common.sort(key=lambda l: l[10])\n    common.sort(key=lambda l: l[11])\n    common.sort(key=lambda l: l[12])\n    common.sort(key=lambda l: l[13])\n    common.sort(key=lambda l: l[14])\n    common.sort(key=lambda l: l[15])\n    common.sort(key=lambda l: l[16])\n    common.sort(key=lambda l: l[17])\n    common.sort(key=lambda l: l[18])\n    common.sort(key=lambda l: l[19])\n    common.sort(", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(1, len(l1)) + list(range(1, len(l2))))\n    common.sort()\n    common = [common[0] for common in common]\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(L1)):\n        common.append(common.index(L1[i]))\n    for i in range(len(L2)):\n        common.append(common.index(L2[i]))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l1 in l1:\n        common.append(common[l2].copy())\n    for l2 in l2:\n        common.append(common[l1].copy())\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(1, len(l1)):\n        common.append((i, l1[i]))\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(set(range(len(l1)))) - set(set(set(range(len(l2)))))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(l1, list):\n        return sorted(common(l1, l2))\n    elif isinstance(l1, list) and isinstance(l2, list):\n        return sorted(common(l1, l2, reverse=True))\n    elif isinstance(l2, list) and isinstance(l1, list):\n        return sorted(common(l1, l2, reverse=True, reverse=True))\n    elif isinstance(l1, list) and isinstance(l2, list):\n        return sorted(common(l1, l2, reverse=True, reverse=True))\n    elif isinstance(l2, list) and isinstance(l1, list):\n        return sorted(common(l1, l2, reverse=True, reverse=True, reverse=True))\n    elif isinstance(l2, list) and isinstance(l1, list):\n        return sorted(common(l1, l2, reverse=True, reverse=True, reverse=True))\n\n    def __cmp__(self, other: list) -> int:\n        \"\"\"Compare two list elements, returning -1 if they differ.\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        -1\n        >>> common([5", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(common)\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.sort()\n    common = list(common[::-1])\n    common.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Return sorted unique common elements for two lists\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i][j-1]!= l2[i][j-1]:\n                return [i, j]\n    return [i, j]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                return (i, j)\n    return (None, None)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(l1, list):\n        return list(common(l1, l1))\n    elif isinstance(l2, list):\n        return list(common(l2, l2))\n    else:\n        raise TypeError(\"common() expects a list, not list: \" + str(l1))\n    return list(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _check_common(elem: list, common: list):\n        if elem.intersection(common):\n            return True\n        return False\n\n    def _common_common(elem: list, common: list):\n        common_common = common.intersection(elem)\n        common_common = common_common.sort(key=lambda x: len(x))\n        if common_common == 0 or common_common == len(elem):\n            return True\n        return False\n\n    def _common_common_mean(elem: list, common: list):\n        common_common = common_common.mean()\n        common_common = common_common.sort(key=lambda x: len(x))\n        common_common_mean = common_common_mean.sort(key=lambda x: len(x))\n        common_common_mean = common_common_mean.mean(key=lambda x: len(x))\n        common_common_mean = common_common_mean.mean(key=lambda x: len(x))\n        return common_common_mean\n\n    def _common_common_rank(elem: list, common: list):\n        common_common = common_common.sort(key=lambda x: len(x))\n        common_common_rank = common_common_rank.sort(key=lambda x: len(x))\n        common_common_rank = common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return common(list(set([(i, j) for i, j in zip(list(L1), list(L2))]), list(set([(i, j) for i, j in zip(list(L1), list(L2))])))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Find the common elements of the two lists\n    common = []\n    for l1 in l1:\n        for l2 in l2:\n            common.append(common.index(l1, l2))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1) + len(l2)))\n    common.sort(key=lambda x: x[0], reverse=True)\n    common.sort(key=lambda x: x[1], reverse=True)\n    common.sort(key=lambda x: x[2], reverse=True)\n    common.sort(key=lambda x: x[3], reverse=True)\n    common.sort(key=lambda x: x[4], reverse=True)\n    common.sort(key=lambda x: x[5], reverse=True)\n    common.sort(key=lambda x: x[6], reverse=True)\n    common.sort(key=lambda x: x[7], reverse=True)\n    common.sort(key=lambda x: x[8], reverse=True)\n    common.sort(key=lambda x: x[9], reverse=True)\n    common.sort(key=lambda x: x[10], reverse=True)\n    common.sort(key=lambda x: x[11], reverse=True)\n    common.sort(key=lambda x: x[12], reverse=True)\n    common.sort(key=lambda x: x[13], reverse=True)\n    common.sort(key=lambda x: x[14], reverse=True)\n    common.sort(key=lambda x: x[15], reverse=True)\n    common.sort(key=lambda x: x[16], reverse=True)\n    common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort lists by common elements\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            common(l1[i], l2[j])\n    return common(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(range(len(l1)) - set(range(len(l2)))) / set(range(len(l1)) - set(range(len(l2)))) * set(range(len(l1)) - set(range(len(l2)))) * set(range(len(l1)) - set(range(len(l2)))) * set(range(len(l1)) - set(range(len(l2)))) * set(range(len(l1)) - set(range(len(l2)))) * set(range(len(l1)) - set(range(len(l2)))) * set(range(len(l1)) - set(range(len(l2)))) * set(range(len(l1)) - set(range(len(l2)))) * set(range(len(l1)) - set(range(len(l2)))) * set(range(len(l1)) - set(range(len(l2)))) * set(range(len(l1)) - set(range(len(l2)))) * set(range(len(l1)) - set(range(len(l2)))) * set(range(", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for x in l1:\n        common.append(common[x])\n    for x in l2:\n        common.append(common[x])\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(map(lambda x: x[0], list(range(len(list(common)))))\n    common.sort(key=lambda x: x[0])\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort(reverse=True)\n    common.sort", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort the elements in the lists\n    common = list(common.sort())\n\n    # Sort the elements in the lists\n    common = list(common.reverse())\n\n    # Sort the elements in the lists\n    common = list(common.reverse()[::-1])\n\n    # Sort the elements in the lists\n    common = list(common.reverse()[::-1].reverse())\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for item in l1:\n        result.append(common(item, l2))\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common([x1, x2, y] for x1, x2, y in list(x1) + list(x2)), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(l1, list):\n        return sorted(common(l1, l2))\n    elif isinstance(l2, list):\n        return sorted(common(l2, l1))\n    else:\n        raise TypeError(\"common is not a function of list\")", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for i in range(len(L1)):\n        for j in range(len(L2)):\n            if L1[i][j] == L2[i][j]]:\n                return (L1[i][j], L2[i][j]]\n        return (None, None)\n\n    return (None, None)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(range(len(l1)))\n    common.sort(key=lambda x: x[0])\n    common.sort(key=lambda x: x[1])\n    common.sort(key=lambda x: x[2])\n    common.sort(key=lambda x: x[3])\n    common.sort(key=lambda x: x[4])\n    common.sort(key=lambda x: x[5])\n    common.sort(key=lambda x: x[6])\n    common.sort(key=lambda x: x[7])\n    common.sort(key=lambda x: x[8])\n    common.sort(key=lambda x: x[9])\n    common.sort(key=lambda x: x[10])\n    common.sort(key=lambda x: x[11])\n    common.sort(key=lambda x: x[12])\n    common.sort(key=lambda x: x[13])\n    common.sort(key=lambda x: x[14])\n    common.sort(key=lambda x: x[15])\n    common.sort(key=lambda x: x[16])\n    common.sort(key=lambda x: x[17])\n    common.sort(key=lambda x: x[18])\n    common.sort(key=lambda x: x[19])\n    common.sort(key=lambda x: x[20])\n    common.sort(key=lambda x: x", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == 0:\n        return\n    if len(l2) == 0:\n        return\n    common = {}\n    for key, value in zip(l1, l2):\n        if key not in common:\n            common[key] = value\n        else:\n            common[key] += value\n    common = common.keys()\n    return common\n</s>"]]